
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015598  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08015838  08015838  00025838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cc4  08015cc4  00030458  2**0
                  CONTENTS
  4 .ARM          00000008  08015cc4  08015cc4  00025cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ccc  08015ccc  00030458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ccc  08015ccc  00025ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015cd0  08015cd0  00025cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  24000000  08015cd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e18  24000458  0801612c  00030458  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24004270  0801612c  00034270  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY
 12 .debug_info   000475f7  00000000  00000000  00030486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078f1  00000000  00000000  00077a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021c8  00000000  00000000  0007f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f30  00000000  00000000  00081538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040f1d  00000000  00000000  00083468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ffce  00000000  00000000  000c4385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00190443  00000000  00000000  000f4353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00284796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bb0  00000000  00000000  002847ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000458 	.word	0x24000458
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015820 	.word	0x08015820

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400045c 	.word	0x2400045c
 80002dc:	08015820 	.word	0x08015820

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_DMA_Init+0x6c>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_DMA_Init+0x6c>)
 80007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_DMA_Init+0x6c>)
 80007e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <MX_DMA_Init+0x6c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA_Init+0x6c>)
 80007f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2010      	movs	r0, #16
 8000804:	f001 facb 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000808:	2010      	movs	r0, #16
 800080a:	f001 fae2 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2011      	movs	r0, #17
 8000814:	f001 fac3 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000818:	2011      	movs	r0, #17
 800081a:	f001 fada 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	58024400 	.word	0x58024400

0800082c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	4a35      	ldr	r2, [pc, #212]	; (8000910 <MX_GPIO_Init+0xe4>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000842:	4b33      	ldr	r3, [pc, #204]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	f003 0320 	and.w	r3, r3, #32
 800084c:	61fb      	str	r3, [r7, #28]
 800084e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000856:	4a2e      	ldr	r2, [pc, #184]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <MX_GPIO_Init+0xe4>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_GPIO_Init+0xe4>)
 8000894:	f043 0310 	orr.w	r3, r3, #16
 8000898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xe4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_GPIO_Init+0xe4>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000904:	f000 f806 	bl	8000914 <GPIO_Port_Config>

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	58024400 	.word	0x58024400

08000914 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <GPIO_Port_Config+0xb8>)
 800092e:	f003 fec9 	bl	80046c4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000948:	f003 fd0c 	bl	8004364 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000952:	481e      	ldr	r0, [pc, #120]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000954:	f003 feb6 	bl	80046c4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4817      	ldr	r0, [pc, #92]	; (80009cc <GPIO_Port_Config+0xb8>)
 8000970:	f003 fcf8 	bl	8004364 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <GPIO_Port_Config+0xbc>)
 800097c:	f003 fea2 	bl	80046c4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <GPIO_Port_Config+0xbc>)
 8000998:	f003 fce4 	bl	8004364 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <GPIO_Port_Config+0xbc>)
 80009a4:	f003 fe8e 	bl	80046c4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <GPIO_Port_Config+0xbc>)
 80009c0:	f003 fcd0 	bl	8004364 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58021000 	.word	0x58021000
 80009d0:	58021400 	.word	0x58021400

080009d4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C2_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C2_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a10:	f003 fea0 	bl	8004754 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 fa75 	bl	8000f08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a22:	f004 fdac 	bl	800557e <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f000 fa6c 	bl	8000f08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C2_Init+0x74>)
 8000a34:	f004 fdee 	bl	8005614 <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 fa63 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000498 	.word	0x24000498
 8000a4c:	40005800 	.word	0x40005800
 8000a50:	307075b1 	.word	0x307075b1

08000a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0b8      	sub	sp, #224	; 0xe0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	22bc      	movs	r2, #188	; 0xbc
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f012 f8cf 	bl	8012c18 <memset>
  if(i2cHandle->Instance==I2C2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a2d      	ldr	r2, [pc, #180]	; (8000b34 <HAL_I2C_MspInit+0xe0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d152      	bne.n	8000b2a <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a84:	2308      	movs	r3, #8
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 f82e 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a9e:	f000 fa33 	bl	8000f08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0302 	and.w	r3, r3, #2
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ac0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ada:	2304      	movs	r3, #4
 8000adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <HAL_I2C_MspInit+0xe8>)
 8000ae8:	f003 fc3c 	bl	8004364 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_I2C_MspInit+0xe4>)
 8000afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2021      	movs	r0, #33	; 0x21
 8000b10:	f001 f945 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b14:	2021      	movs	r0, #33	; 0x21
 8000b16:	f001 f95c 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2022      	movs	r0, #34	; 0x22
 8000b20:	f001 f93d 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b24:	2022      	movs	r0, #34	; 0x22
 8000b26:	f001 f954 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	37e0      	adds	r7, #224	; 0xe0
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40005800 	.word	0x40005800
 8000b38:	58024400 	.word	0x58024400
 8000b3c:	58020400 	.word	0x58020400

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b46:	f000 f999 	bl	8000e7c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b4a:	4b5b      	ldr	r3, [pc, #364]	; (8000cb8 <main+0x178>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d11b      	bne.n	8000b8e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b56:	f3bf 8f4f 	dsb	sy
}
 8000b5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b5c:	f3bf 8f6f 	isb	sy
}
 8000b60:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b62:	4b55      	ldr	r3, [pc, #340]	; (8000cb8 <main+0x178>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6a:	f3bf 8f4f 	dsb	sy
}
 8000b6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b70:	f3bf 8f6f 	isb	sy
}
 8000b74:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b76:	4b50      	ldr	r3, [pc, #320]	; (8000cb8 <main+0x178>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a4f      	ldr	r2, [pc, #316]	; (8000cb8 <main+0x178>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b82:	f3bf 8f4f 	dsb	sy
}
 8000b86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b88:	f3bf 8f6f 	isb	sy
}
 8000b8c:	e000      	b.n	8000b90 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b8e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b90:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <main+0x178>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d138      	bne.n	8000c0e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b9c:	4b46      	ldr	r3, [pc, #280]	; (8000cb8 <main+0x178>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba4:	f3bf 8f4f 	dsb	sy
}
 8000ba8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000baa:	4b43      	ldr	r3, [pc, #268]	; (8000cb8 <main+0x178>)
 8000bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bb0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	0b5b      	lsrs	r3, r3, #13
 8000bb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bba:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bc4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	015a      	lsls	r2, r3, #5
 8000bca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd4:	4938      	ldr	r1, [pc, #224]	; (8000cb8 <main+0x178>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1ef      	bne.n	8000bc6 <main+0x86>
    } while(sets-- != 0U);
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	60fa      	str	r2, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1e5      	bne.n	8000bbc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf0:	f3bf 8f4f 	dsb	sy
}
 8000bf4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <main+0x178>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <main+0x178>)
 8000bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c02:	f3bf 8f4f 	dsb	sy
}
 8000c06:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c08:	f3bf 8f6f 	isb	sy
}
 8000c0c:	e000      	b.n	8000c10 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c0e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c14:	617b      	str	r3, [r7, #20]

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000c16:	e000      	b.n	8000c1a <main+0xda>
 8000c18:	bf00      	nop
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <main+0x17c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f8      	bne.n	8000c18 <main+0xd8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 ff1d 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f89f 	bl	8000d6c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <main+0x17c>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <main+0x17c>)
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <main+0x17c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f003 fd53 	bl	80046f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f003 fd69 	bl	800472c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c60:	bf00      	nop
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <main+0x17c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d104      	bne.n	8000c78 <main+0x138>
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	617a      	str	r2, [r7, #20]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dcf4      	bgt.n	8000c62 <main+0x122>
if ( timeout < 0 )
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da01      	bge.n	8000c82 <main+0x142>
{
Error_Handler();
 8000c7e:	f000 f943 	bl	8000f08 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c82:	f7ff fdd3 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c86:	f7ff fd99 	bl	80007bc <MX_DMA_Init>
  MX_I2C2_Init();
 8000c8a:	f7ff fea3 	bl	80009d4 <MX_I2C2_Init>
 // MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8000c8e:	f000 fb57 	bl	8001340 <MX_TIM1_Init>
  MX_UART4_Init();
 8000c92:	f000 fcfd 	bl	8001690 <MX_UART4_Init>
  MX_FATFS_Init();
 8000c96:	f00f fadd 	bl	8010254 <MX_FATFS_Init>
  MX_UART7_Init();
 8000c9a:	f000 fd49 	bl	8001730 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000c9e:	f011 fa11 	bl	80120c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  FIRInit(&lpf_Acc);
 8000ca2:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <main+0x180>)
 8000ca4:	f00f fd02 	bl	80106ac <FIRInit>
  {
    /* USER CODE END WHILE */

    // ReadGPS();
    // ReadMag();
     ReadAcc();
 8000ca8:	f000 f83e 	bl	8000d28 <ReadAcc>

     FilterData();
 8000cac:	f000 f80a 	bl	8000cc4 <FilterData>
//      count = 1;
//    }
//
//    CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
//
    HAL_Delay(10);
 8000cb0:	200a      	movs	r0, #10
 8000cb2:	f000 ff69 	bl	8001b88 <HAL_Delay>
     ReadAcc();
 8000cb6:	e7f7      	b.n	8000ca8 <main+0x168>
 8000cb8:	e000ed00 	.word	0xe000ed00
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	240004e4 	.word	0x240004e4

08000cc4 <FilterData>:
}



void FilterData()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0a2      	sub	sp, #136	; 0x88
 8000cc8:	af02      	add	r7, sp, #8
  FIRUpdate(&lpf_Acc, acc_values.imu_acc_x);
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <FilterData+0x58>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <FilterData+0x5c>)
 8000cd6:	f00f fd0d 	bl	80106f4 <FIRUpdate>

  char logBuf[128];

  sprintf(logBuf, "%.4f, %.4f\r\n", acc_values.imu_acc_x, lpf_Acc.output);
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <FilterData+0x58>)
 8000cdc:	edd3 7a00 	vldr	s15, [r3]
 8000ce0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <FilterData+0x5c>)
 8000ce6:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8000cea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cee:	4638      	mov	r0, r7
 8000cf0:	ed8d 7b00 	vstr	d7, [sp]
 8000cf4:	ec53 2b16 	vmov	r2, r3, d6
 8000cf8:	490a      	ldr	r1, [pc, #40]	; (8000d24 <FilterData+0x60>)
 8000cfa:	f012 fc93 	bl	8013624 <siprintf>
  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff faed 	bl	80002e0 <strlen>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f011 fae4 	bl	80122dc <CDC_Transmit_FS>
}
 8000d14:	bf00      	nop
 8000d16:	3780      	adds	r7, #128	; 0x80
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24000614 	.word	0x24000614
 8000d20:	240004e4 	.word	0x240004e4
 8000d24:	08015838 	.word	0x08015838

08000d28 <ReadAcc>:
  }
  HAL_HSEM_Release(HSEM_ID_0,0);

}
void ReadAcc(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f003 fce3 	bl	80046f8 <HAL_HSEM_FastTake>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10e      	bne.n	8000d56 <ReadAcc+0x2e>
  {
      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <ReadAcc+0x3c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <ReadAcc+0x40>)
 8000d40:	6013      	str	r3, [r2, #0]
      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <ReadAcc+0x3c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <ReadAcc+0x40>)
 8000d4a:	6053      	str	r3, [r2, #4]
      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <ReadAcc+0x3c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <ReadAcc+0x40>)
 8000d54:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f003 fce7 	bl	800472c <HAL_HSEM_Release>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	24000008 	.word	0x24000008
 8000d68:	24000614 	.word	0x24000614

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09c      	sub	sp, #112	; 0x70
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	224c      	movs	r2, #76	; 0x4c
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f011 ff4c 	bl	8012c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2220      	movs	r2, #32
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f011 ff46 	bl	8012c18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	f005 fe69 	bl	8006a64 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b36      	ldr	r3, [pc, #216]	; (8000e70 <SystemClock_Config+0x104>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a35      	ldr	r2, [pc, #212]	; (8000e70 <SystemClock_Config+0x104>)
 8000d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <SystemClock_Config+0x104>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <SystemClock_Config+0x108>)
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	4a30      	ldr	r2, [pc, #192]	; (8000e74 <SystemClock_Config+0x108>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000db8:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <SystemClock_Config+0x108>)
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dc4:	bf00      	nop
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <SystemClock_Config+0x104>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd2:	d1f8      	bne.n	8000dc6 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <SystemClock_Config+0x10c>)
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	f023 0303 	bic.w	r3, r3, #3
 8000ddc:	4a26      	ldr	r2, [pc, #152]	; (8000e78 <SystemClock_Config+0x10c>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000de4:	2321      	movs	r3, #33	; 0x21
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dee:	2301      	movs	r3, #1
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	2302      	movs	r3, #2
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000dfe:	233c      	movs	r3, #60	; 0x3c
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000e06:	230f      	movs	r3, #15
 8000e08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f005 fe8a 	bl	8006b38 <HAL_RCC_OscConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e2a:	f000 f86d 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	233f      	movs	r3, #63	; 0x3f
 8000e30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2303      	movs	r3, #3
 8000e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2104      	movs	r1, #4
 8000e54:	4618      	mov	r0, r3
 8000e56:	f006 fa7f 	bl	8007358 <HAL_RCC_ClockConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000e60:	f000 f852 	bl	8000f08 <Error_Handler>
  }

  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000e64:	f005 fe58 	bl	8006b18 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000e68:	bf00      	nop
 8000e6a:	3770      	adds	r7, #112	; 0x70
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024800 	.word	0x58024800
 8000e74:	58000400 	.word	0x58000400
 8000e78:	58024400 	.word	0x58024400

08000e7c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e8e:	f000 ffbb 	bl	8001e08 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000e9a:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000e9e:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000ea0:	2312      	movs	r3, #18
 8000ea2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000eac:	2303      	movs	r3, #3
 8000eae:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 ffd8 	bl	8001e78 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000ecc:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000ed0:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 ffbf 	bl	8001e78 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000efa:	2004      	movs	r0, #4
 8000efc:	f000 ff9c 	bl	8001e38 <HAL_MPU_Enable>
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_SD_MspInit>:
  /* USER CODE END SDMMC1_Init 2 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ba      	sub	sp, #232	; 0xe8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	22bc      	movs	r2, #188	; 0xbc
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f011 fe6f 	bl	8012c18 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a3b      	ldr	r2, [pc, #236]	; (800102c <HAL_SD_MspInit+0x118>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d16e      	bne.n	8001022 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	4618      	mov	r0, r3
 8000f54:	f006 fdce 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f7ff ffd3 	bl	8000f08 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f68:	4a31      	ldr	r2, [pc, #196]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f72:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f80:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a2a      	ldr	r2, [pc, #168]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <HAL_SD_MspInit+0x11c>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fbc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fdc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <HAL_SD_MspInit+0x120>)
 8000fe4:	f003 f9be 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001000:	230c      	movs	r3, #12
 8001002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001006:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800100a:	4619      	mov	r1, r3
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <HAL_SD_MspInit+0x124>)
 800100e:	f003 f9a9 	bl	8004364 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	2031      	movs	r0, #49	; 0x31
 8001018:	f000 fec1 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800101c:	2031      	movs	r0, #49	; 0x31
 800101e:	f000 fed8 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	37e8      	adds	r7, #232	; 0xe8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	52007000 	.word	0x52007000
 8001030:	58024400 	.word	0x58024400
 8001034:	58020800 	.word	0x58020800
 8001038:	58020c00 	.word	0x58020c00

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x30>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x30>)
 8001054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	58024400 	.word	0x58024400

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <NMI_Handler+0x4>

08001076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107a:	e7fe      	b.n	800107a <HardFault_Handler+0x4>

0800107c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <MemManage_Handler+0x4>

08001082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <UsageFault_Handler+0x4>

0800108e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 fd44 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <DMA1_Stream5_IRQHandler+0x10>)
 80010ca:	f001 ffd7 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24000808 	.word	0x24000808

080010d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <DMA1_Stream6_IRQHandler+0x10>)
 80010de:	f001 ffcd 	bl	800307c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	24000790 	.word	0x24000790

080010ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <TIM1_BRK_IRQHandler+0x10>)
 80010f2:	f00a fb77 	bl	800b7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	240006b4 	.word	0x240006b4

08001100 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <TIM1_UP_IRQHandler+0x10>)
 8001106:	f00a fb6d 	bl	800b7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	240006b4 	.word	0x240006b4

08001114 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM1_TRG_COM_IRQHandler+0x10>)
 800111a:	f00a fb63 	bl	800b7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	240006b4 	.word	0x240006b4

08001128 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM1_CC_IRQHandler+0x10>)
 800112e:	f00a fb59 	bl	800b7e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	240006b4 	.word	0x240006b4

0800113c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <I2C2_EV_IRQHandler+0x10>)
 8001142:	f003 fb97 	bl	8004874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	24000498 	.word	0x24000498

08001150 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <I2C2_ER_IRQHandler+0x10>)
 8001156:	f003 fba7 	bl	80048a8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	24000498 	.word	0x24000498

08001164 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <SDMMC1_IRQHandler+0x10>)
 800116a:	f009 f8b1 	bl	800a2d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	24000638 	.word	0x24000638

08001178 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <UART4_IRQHandler+0x10>)
 800117e:	f00b fc01 	bl	800c984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	24000880 	.word	0x24000880

0800118c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <UART7_IRQHandler+0x10>)
 8001192:	f00b fbf7 	bl	800c984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	24000700 	.word	0x24000700

080011a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <OTG_FS_IRQHandler+0x10>)
 80011a6:	f004 fbd8 	bl	800595a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	24003e58 	.word	0x24003e58

080011b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	return 1;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_kill>:

int _kill(int pid, int sig)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011ce:	f011 fce9 	bl	8012ba4 <__errno>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2216      	movs	r2, #22
 80011d6:	601a      	str	r2, [r3, #0]
	return -1;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_exit>:

void _exit (int status)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ffe7 	bl	80011c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011f6:	e7fe      	b.n	80011f6 <_exit+0x12>

080011f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	e00a      	b.n	8001220 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800120a:	f3af 8000 	nop.w
 800120e:	4601      	mov	r1, r0
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60ba      	str	r2, [r7, #8]
 8001216:	b2ca      	uxtb	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbf0      	blt.n	800120a <_read+0x12>
	}

return len;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	e009      	b.n	8001258 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbf1      	blt.n	8001244 <_write+0x12>
	}
	return len;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_close>:

int _close(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	return -1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001292:	605a      	str	r2, [r3, #4]
	return 0;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_isatty>:

int _isatty(int file)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	return 1;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f011 fc4e 	bl	8012ba4 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	24040000 	.word	0x24040000
 8001334:	00004000 	.word	0x00004000
 8001338:	24000474 	.word	0x24000474
 800133c:	24004270 	.word	0x24004270

08001340 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0a4      	sub	sp, #144	; 0x90
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001360:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	222c      	movs	r2, #44	; 0x2c
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f011 fc4b 	bl	8012c18 <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f011 fc45 	bl	8012c18 <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 800139e:	463a      	mov	r2, r7
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 fb63 	bl	8007a70 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d104      	bne.n	80013ba <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 80013b0:	f006 fb32 	bl	8007a18 <HAL_RCC_GetPCLK1Freq>
 80013b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80013b8:	e005      	b.n	80013c6 <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 80013ba:	f006 fb2d 	bl	8007a18 <HAL_RCC_GetPCLK1Freq>
 80013be:	4603      	mov	r3, r0
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 80013c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80013ca:	4a5f      	ldr	r2, [pc, #380]	; (8001548 <MX_TIM1_Init+0x208>)
 80013cc:	fba2 2303 	umull	r2, r3, r2, r3
 80013d0:	0c9b      	lsrs	r3, r3, #18
 80013d2:	3301      	adds	r3, #1
 80013d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 80013d8:	4b5c      	ldr	r3, [pc, #368]	; (800154c <MX_TIM1_Init+0x20c>)
 80013da:	4a5d      	ldr	r2, [pc, #372]	; (8001550 <MX_TIM1_Init+0x210>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 80013de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a59      	ldr	r2, [pc, #356]	; (800154c <MX_TIM1_Init+0x20c>)
 80013e6:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b58      	ldr	r3, [pc, #352]	; (800154c <MX_TIM1_Init+0x20c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 80013ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	3b01      	subs	r3, #1
 8001404:	4a51      	ldr	r2, [pc, #324]	; (800154c <MX_TIM1_Init+0x20c>)
 8001406:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <MX_TIM1_Init+0x20c>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800140e:	4b4f      	ldr	r3, [pc, #316]	; (800154c <MX_TIM1_Init+0x20c>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <MX_TIM1_Init+0x20c>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800141a:	484c      	ldr	r0, [pc, #304]	; (800154c <MX_TIM1_Init+0x20c>)
 800141c:	f00a f92a 	bl	800b674 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001426:	f7ff fd6f 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001434:	4619      	mov	r1, r3
 8001436:	4845      	ldr	r0, [pc, #276]	; (800154c <MX_TIM1_Init+0x20c>)
 8001438:	f00a fc04 	bl	800bc44 <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001442:	f7ff fd61 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001446:	4841      	ldr	r0, [pc, #260]	; (800154c <MX_TIM1_Init+0x20c>)
 8001448:	f00a f96b 	bl	800b722 <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001452:	f7ff fd59 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001462:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001466:	4619      	mov	r1, r3
 8001468:	4838      	ldr	r0, [pc, #224]	; (800154c <MX_TIM1_Init+0x20c>)
 800146a:	f00b f917 	bl	800c69c <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001474:	f7ff fd48 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 800147c:	2332      	movs	r3, #50	; 0x32
 800147e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001484:	2300      	movs	r3, #0
 8001486:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148c:	2300      	movs	r3, #0
 800148e:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	482b      	ldr	r0, [pc, #172]	; (800154c <MX_TIM1_Init+0x20c>)
 800149e:	f00a fac1 	bl	800ba24 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80014a8:	f7ff fd2e 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014b0:	2204      	movs	r2, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4825      	ldr	r0, [pc, #148]	; (800154c <MX_TIM1_Init+0x20c>)
 80014b6:	f00a fab5 	bl	800ba24 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80014c0:	f7ff fd22 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014c8:	2208      	movs	r2, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	481f      	ldr	r0, [pc, #124]	; (800154c <MX_TIM1_Init+0x20c>)
 80014ce:	f00a faa9 	bl	800ba24 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 80014d8:	f7ff fd16 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014e0:	220c      	movs	r2, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	4819      	ldr	r0, [pc, #100]	; (800154c <MX_TIM1_Init+0x20c>)
 80014e6:	f00a fa9d 	bl	800ba24 <HAL_TIM_PWM_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 80014f0:	f7ff fd0a 	bl	8000f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <MX_TIM1_Init+0x20c>)
 800152c:	f00b f93e 	bl	800c7ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 8001536:	f7ff fce7 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_TIM1_Init+0x20c>)
 800153c:	f000 f84a 	bl	80015d4 <HAL_TIM_MspPostInit>

}
 8001540:	bf00      	nop
 8001542:	3790      	adds	r7, #144	; 0x90
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	66673335 	.word	0x66673335
 800154c:	240006b4 	.word	0x240006b4
 8001550:	40010000 	.word	0x40010000

08001554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1a      	ldr	r2, [pc, #104]	; (80015cc <HAL_TIM_Base_MspInit+0x78>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12e      	bne.n	80015c4 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800156c:	4a18      	ldr	r2, [pc, #96]	; (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HAL_TIM_Base_MspInit+0x7c>)
 8001578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2018      	movs	r0, #24
 800158a:	f000 fc08 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800158e:	2018      	movs	r0, #24
 8001590:	f000 fc1f 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2019      	movs	r0, #25
 800159a:	f000 fc00 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800159e:	2019      	movs	r0, #25
 80015a0:	f000 fc17 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	201a      	movs	r0, #26
 80015aa:	f000 fbf8 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80015ae:	201a      	movs	r0, #26
 80015b0:	f000 fc0f 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	201b      	movs	r0, #27
 80015ba:	f000 fbf0 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80015be:	201b      	movs	r0, #27
 80015c0:	f000 fc07 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010000 	.word	0x40010000
 80015d0:	58024400 	.word	0x58024400

080015d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a23      	ldr	r2, [pc, #140]	; (8001680 <HAL_TIM_MspPostInit+0xac>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d13f      	bne.n	8001676 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_TIM_MspPostInit+0xb0>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <HAL_TIM_MspPostInit+0xb0>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_TIM_MspPostInit+0xb0>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_TIM_MspPostInit+0xb0>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <HAL_TIM_MspPostInit+0xb0>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001624:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_TIM_MspPostInit+0xb0>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001632:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <HAL_TIM_MspPostInit+0xb4>)
 8001650:	f002 fe88 	bl	8004364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001666:	2301      	movs	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4806      	ldr	r0, [pc, #24]	; (800168c <HAL_TIM_MspPostInit+0xb8>)
 8001672:	f002 fe77 	bl	8004364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40010000 	.word	0x40010000
 8001684:	58024400 	.word	0x58024400
 8001688:	58021000 	.word	0x58021000
 800168c:	58020000 	.word	0x58020000

08001690 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <MX_UART4_Init+0x94>)
 8001696:	4a24      	ldr	r2, [pc, #144]	; (8001728 <MX_UART4_Init+0x98>)
 8001698:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_UART4_Init+0x94>)
 800169c:	4a23      	ldr	r2, [pc, #140]	; (800172c <MX_UART4_Init+0x9c>)
 800169e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_UART4_Init+0x94>)
 80016a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_UART4_Init+0x94>)
 80016aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ae:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_UART4_Init+0x94>)
 80016b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_UART4_Init+0x94>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_UART4_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_UART4_Init+0x94>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_UART4_Init+0x94>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_UART4_Init+0x94>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_UART4_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016dc:	4811      	ldr	r0, [pc, #68]	; (8001724 <MX_UART4_Init+0x94>)
 80016de:	f00b f901 	bl	800c8e4 <HAL_UART_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80016e8:	f7ff fc0e 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ec:	2100      	movs	r1, #0
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_UART4_Init+0x94>)
 80016f0:	f00c fba9 	bl	800de46 <HAL_UARTEx_SetTxFifoThreshold>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f7ff fc05 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016fe:	2100      	movs	r1, #0
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <MX_UART4_Init+0x94>)
 8001702:	f00c fbde 	bl	800dec2 <HAL_UARTEx_SetRxFifoThreshold>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 800170c:	f7ff fbfc 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_UART4_Init+0x94>)
 8001712:	f00c fb5f 	bl	800ddd4 <HAL_UARTEx_DisableFifoMode>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 800171c:	f7ff fbf4 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24000880 	.word	0x24000880
 8001728:	40004c00 	.word	0x40004c00
 800172c:	000186a0 	.word	0x000186a0

08001730 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MX_UART7_Init+0x90>)
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <MX_UART7_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_UART7_Init+0x90>)
 800173c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001740:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_UART7_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_UART7_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_UART7_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_UART7_Init+0x90>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_UART7_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_UART7_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_UART7_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_UART7_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_UART7_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <MX_UART7_Init+0x90>)
 800177a:	f00b f8b3 	bl	800c8e4 <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001784:	f7ff fbc0 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_UART7_Init+0x90>)
 800178c:	f00c fb5b 	bl	800de46 <HAL_UARTEx_SetTxFifoThreshold>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001796:	f7ff fbb7 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <MX_UART7_Init+0x90>)
 800179e:	f00c fb90 	bl	800dec2 <HAL_UARTEx_SetRxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f7ff fbae 	bl	8000f08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_UART7_Init+0x90>)
 80017ae:	f00c fb11 	bl	800ddd4 <HAL_UARTEx_DisableFifoMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f7ff fba6 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	24000700 	.word	0x24000700
 80017c4:	40007800 	.word	0x40007800

080017c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0ba      	sub	sp, #232	; 0xe8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	22bc      	movs	r2, #188	; 0xbc
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f011 fa15 	bl	8012c18 <memset>
  if(uartHandle->Instance==UART4)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7e      	ldr	r2, [pc, #504]	; (80019ec <HAL_UART_MspInit+0x224>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d14a      	bne.n	800188e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	4618      	mov	r0, r3
 8001808:	f006 f974 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001812:	f7ff fb79 	bl	8000f08 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001816:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <HAL_UART_MspInit+0x228>)
 8001818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800181c:	4a74      	ldr	r2, [pc, #464]	; (80019f0 <HAL_UART_MspInit+0x228>)
 800181e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001826:	4b72      	ldr	r3, [pc, #456]	; (80019f0 <HAL_UART_MspInit+0x228>)
 8001828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800182c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <HAL_UART_MspInit+0x228>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183a:	4a6d      	ldr	r2, [pc, #436]	; (80019f0 <HAL_UART_MspInit+0x228>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_UART_MspInit+0x228>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001852:	2303      	movs	r3, #3
 8001854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800186a:	2308      	movs	r3, #8
 800186c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001874:	4619      	mov	r1, r3
 8001876:	485f      	ldr	r0, [pc, #380]	; (80019f4 <HAL_UART_MspInit+0x22c>)
 8001878:	f002 fd74 	bl	8004364 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	2034      	movs	r0, #52	; 0x34
 8001882:	f000 fa8c 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001886:	2034      	movs	r0, #52	; 0x34
 8001888:	f000 faa3 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800188c:	e0a9      	b.n	80019e2 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==UART7)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a59      	ldr	r2, [pc, #356]	; (80019f8 <HAL_UART_MspInit+0x230>)
 8001894:	4293      	cmp	r3, r2
 8001896:	f040 80a4 	bne.w	80019e2 <HAL_UART_MspInit+0x21a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f006 f923 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80018b4:	f7ff fb28 	bl	8000f08 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80018b8:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <HAL_UART_MspInit+0x228>)
 80018ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018be:	4a4c      	ldr	r2, [pc, #304]	; (80019f0 <HAL_UART_MspInit+0x228>)
 80018c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c8:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_UART_MspInit+0x228>)
 80018ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_UART_MspInit+0x228>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018dc:	4a44      	ldr	r2, [pc, #272]	; (80019f0 <HAL_UART_MspInit+0x228>)
 80018de:	f043 0320 	orr.w	r3, r3, #32
 80018e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_UART_MspInit+0x228>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f4:	23c0      	movs	r3, #192	; 0xc0
 80018f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800190c:	2307      	movs	r3, #7
 800190e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001912:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001916:	4619      	mov	r1, r3
 8001918:	4838      	ldr	r0, [pc, #224]	; (80019fc <HAL_UART_MspInit+0x234>)
 800191a:	f002 fd23 	bl	8004364 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 800191e:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_UART_MspInit+0x23c>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001926:	224f      	movs	r2, #79	; 0x4f
 8001928:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_UART_MspInit+0x238>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193e:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_UART_MspInit+0x238>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001956:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800195c:	4828      	ldr	r0, [pc, #160]	; (8001a00 <HAL_UART_MspInit+0x238>)
 800195e:	f000 facf 	bl	8001f00 <HAL_DMA_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001968:	f7ff face 	bl	8000f08 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001970:	67da      	str	r2, [r3, #124]	; 0x7c
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_UART_MspInit+0x238>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_UART_MspInit+0x240>)
 800197a:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <HAL_UART_MspInit+0x244>)
 800197c:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_UART_MspInit+0x240>)
 8001980:	2250      	movs	r2, #80	; 0x50
 8001982:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_UART_MspInit+0x240>)
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <HAL_UART_MspInit+0x240>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_UART_MspInit+0x240>)
 8001992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001996:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_UART_MspInit+0x240>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_UART_MspInit+0x240>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_UART_MspInit+0x240>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_UART_MspInit+0x240>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_UART_MspInit+0x240>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <HAL_UART_MspInit+0x240>)
 80019b8:	f000 faa2 	bl	8001f00 <HAL_DMA_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 80019c2:	f7ff faa1 	bl	8000f08 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_UART_MspInit+0x240>)
 80019ca:	679a      	str	r2, [r3, #120]	; 0x78
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_UART_MspInit+0x240>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	2052      	movs	r0, #82	; 0x52
 80019d8:	f000 f9e1 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80019dc:	2052      	movs	r0, #82	; 0x52
 80019de:	f000 f9f8 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	37e8      	adds	r7, #232	; 0xe8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40004c00 	.word	0x40004c00
 80019f0:	58024400 	.word	0x58024400
 80019f4:	58020000 	.word	0x58020000
 80019f8:	40007800 	.word	0x40007800
 80019fc:	58021400 	.word	0x58021400
 8001a00:	24000808 	.word	0x24000808
 8001a04:	40020088 	.word	0x40020088
 8001a08:	24000790 	.word	0x24000790
 8001a0c:	400200a0 	.word	0x400200a0

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a14:	f7fe fe38 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1a:	490d      	ldr	r1, [pc, #52]	; (8001a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a30:	4c0a      	ldr	r4, [pc, #40]	; (8001a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f011 f8b7 	bl	8012bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff f87d 	bl	8000b40 <main>
  bx  lr
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a48:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001a4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a50:	24000458 	.word	0x24000458
  ldr r2, =_sidata
 8001a54:	08015cd4 	.word	0x08015cd4
  ldr r2, =_sbss
 8001a58:	24000458 	.word	0x24000458
  ldr r4, =_ebss
 8001a5c:	24004270 	.word	0x24004270

08001a60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC3_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f98c 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a70:	f005 fe28 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_Init+0x68>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	0a1b      	lsrs	r3, r3, #8
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	4913      	ldr	r1, [pc, #76]	; (8001ad0 <HAL_Init+0x6c>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_Init+0x68>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_Init+0x6c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_Init+0x70>)
 8001aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001aa8:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_Init+0x74>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 f814 	bl	8001adc <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e002      	b.n	8001ac4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001abe:	f7ff fabd 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	08015890 	.word	0x08015890
 8001ad4:	24000004 	.word	0x24000004
 8001ad8:	24000000 	.word	0x24000000

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_InitTick+0x60>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e021      	b.n	8001b34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_InitTick+0x64>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_InitTick+0x60>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f971 	bl	8001dee <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f93b 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x68>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24000010 	.word	0x24000010
 8001b40:	24000000 	.word	0x24000000
 8001b44:	2400000c 	.word	0x2400000c

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	24000010 	.word	0x24000010
 8001b6c:	24000910 	.word	0x24000910

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	24000910 	.word	0x24000910

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	24000010 	.word	0x24000010

08001bd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_GetREVID+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0c1b      	lsrs	r3, r3, #16
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	5c001000 	.word	0x5c001000

08001be8 <__NVIC_SetPriorityGrouping>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <__NVIC_SetPriorityGrouping+0x40>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <__NVIC_SetPriorityGrouping+0x40>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00
 8001c2c:	05fa0000 	.word	0x05fa0000

08001c30 <__NVIC_GetPriorityGrouping>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__NVIC_GetPriorityGrouping+0x18>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	f003 0307 	and.w	r3, r3, #7
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_EnableIRQ>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <__NVIC_SetPriority>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6039      	str	r1, [r7, #0]
 8001c92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	db0a      	blt.n	8001cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <__NVIC_SetPriority+0x4c>)
 8001ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ca6:	0112      	lsls	r2, r2, #4
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	440b      	add	r3, r1
 8001cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cb0:	e00a      	b.n	8001cc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4908      	ldr	r1, [pc, #32]	; (8001cd8 <__NVIC_SetPriority+0x50>)
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	3b04      	subs	r3, #4
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	761a      	strb	r2, [r3, #24]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000e100 	.word	0xe000e100
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <NVIC_EncodePriority>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f1c3 0307 	rsb	r3, r3, #7
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf28      	it	cs
 8001cfa:	2304      	movcs	r3, #4
 8001cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3304      	adds	r3, #4
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d902      	bls.n	8001d0c <NVIC_EncodePriority+0x30>
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3b03      	subs	r3, #3
 8001d0a:	e000      	b.n	8001d0e <NVIC_EncodePriority+0x32>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	f04f 32ff 	mov.w	r2, #4294967295
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2e:	43d9      	mvns	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	4313      	orrs	r3, r2
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff8e 	bl	8001c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff29 	bl	8001be8 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff40 	bl	8001c30 <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff90 	bl	8001cdc <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5f 	bl	8001c88 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff33 	bl	8001c4c <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa4 	bl	8001d44 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e0c:	f3bf 8f5f 	dmb	sy
}
 8001e10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_MPU_Disable+0x28>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_MPU_Disable+0x28>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_MPU_Disable+0x2c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	e000ed90 	.word	0xe000ed90

08001e38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_MPU_Enable+0x38>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_MPU_Enable+0x3c>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_MPU_Enable+0x3c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001e56:	f3bf 8f4f 	dsb	sy
}
 8001e5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5c:	f3bf 8f6f 	isb	sy
}
 8001e60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000ed90 	.word	0xe000ed90
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	785a      	ldrb	r2, [r3, #1]
 8001e84:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_MPU_ConfigRegion+0x84>)
 8001e86:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d029      	beq.n	8001ee4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_MPU_ConfigRegion+0x84>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7b1b      	ldrb	r3, [r3, #12]
 8001e9c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7adb      	ldrb	r3, [r3, #11]
 8001ea2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ea4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7a9b      	ldrb	r3, [r3, #10]
 8001eaa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001eac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7b5b      	ldrb	r3, [r3, #13]
 8001eb2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001eb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	7b9b      	ldrb	r3, [r3, #14]
 8001eba:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ebc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7bdb      	ldrb	r3, [r3, #15]
 8001ec2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ec4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7a5b      	ldrb	r3, [r3, #9]
 8001eca:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ecc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7a1b      	ldrb	r3, [r3, #8]
 8001ed2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ed4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	7812      	ldrb	r2, [r2, #0]
 8001eda:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ede:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ee0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001ee2:	e005      	b.n	8001ef0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_MPU_ConfigRegion+0x84>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_MPU_ConfigRegion+0x84>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed90 	.word	0xe000ed90

08001f00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff fe32 	bl	8001b70 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e316      	b.n	8002546 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <HAL_DMA_Init+0x1b8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d04a      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a65      	ldr	r2, [pc, #404]	; (80020bc <HAL_DMA_Init+0x1bc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d045      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a63      	ldr	r2, [pc, #396]	; (80020c0 <HAL_DMA_Init+0x1c0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d040      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a62      	ldr	r2, [pc, #392]	; (80020c4 <HAL_DMA_Init+0x1c4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d03b      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a60      	ldr	r2, [pc, #384]	; (80020c8 <HAL_DMA_Init+0x1c8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d036      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a5f      	ldr	r2, [pc, #380]	; (80020cc <HAL_DMA_Init+0x1cc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d031      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <HAL_DMA_Init+0x1d0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d02c      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a5c      	ldr	r2, [pc, #368]	; (80020d4 <HAL_DMA_Init+0x1d4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d027      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a5a      	ldr	r2, [pc, #360]	; (80020d8 <HAL_DMA_Init+0x1d8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d022      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a59      	ldr	r2, [pc, #356]	; (80020dc <HAL_DMA_Init+0x1dc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d01d      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a57      	ldr	r2, [pc, #348]	; (80020e0 <HAL_DMA_Init+0x1e0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d018      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a56      	ldr	r2, [pc, #344]	; (80020e4 <HAL_DMA_Init+0x1e4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d013      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a54      	ldr	r2, [pc, #336]	; (80020e8 <HAL_DMA_Init+0x1e8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00e      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a53      	ldr	r2, [pc, #332]	; (80020ec <HAL_DMA_Init+0x1ec>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a51      	ldr	r2, [pc, #324]	; (80020f0 <HAL_DMA_Init+0x1f0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d004      	beq.n	8001fb8 <HAL_DMA_Init+0xb8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a50      	ldr	r2, [pc, #320]	; (80020f4 <HAL_DMA_Init+0x1f4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_DMA_Init+0xbc>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_DMA_Init+0xbe>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 813b 	beq.w	800223a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a37      	ldr	r2, [pc, #220]	; (80020b8 <HAL_DMA_Init+0x1b8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d04a      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a36      	ldr	r2, [pc, #216]	; (80020bc <HAL_DMA_Init+0x1bc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d045      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <HAL_DMA_Init+0x1c0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d040      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a33      	ldr	r2, [pc, #204]	; (80020c4 <HAL_DMA_Init+0x1c4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d03b      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <HAL_DMA_Init+0x1c8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d036      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a30      	ldr	r2, [pc, #192]	; (80020cc <HAL_DMA_Init+0x1cc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d031      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <HAL_DMA_Init+0x1d0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d02c      	beq.n	8002074 <HAL_DMA_Init+0x174>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <HAL_DMA_Init+0x1d4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d027      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2b      	ldr	r2, [pc, #172]	; (80020d8 <HAL_DMA_Init+0x1d8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d022      	beq.n	8002074 <HAL_DMA_Init+0x174>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <HAL_DMA_Init+0x1dc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d01d      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_DMA_Init+0x1e0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d018      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_DMA_Init+0x1e4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_DMA_Init+0x174>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <HAL_DMA_Init+0x1e8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00e      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_DMA_Init+0x1ec>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_DMA_Init+0x174>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <HAL_DMA_Init+0x1f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_DMA_Init+0x174>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <HAL_DMA_Init+0x1f4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d108      	bne.n	8002086 <HAL_DMA_Init+0x186>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e007      	b.n	8002096 <HAL_DMA_Init+0x196>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002096:	e02f      	b.n	80020f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002098:	f7ff fd6a 	bl	8001b70 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	d928      	bls.n	80020f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2203      	movs	r2, #3
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e246      	b.n	8002546 <HAL_DMA_Init+0x646>
 80020b8:	40020010 	.word	0x40020010
 80020bc:	40020028 	.word	0x40020028
 80020c0:	40020040 	.word	0x40020040
 80020c4:	40020058 	.word	0x40020058
 80020c8:	40020070 	.word	0x40020070
 80020cc:	40020088 	.word	0x40020088
 80020d0:	400200a0 	.word	0x400200a0
 80020d4:	400200b8 	.word	0x400200b8
 80020d8:	40020410 	.word	0x40020410
 80020dc:	40020428 	.word	0x40020428
 80020e0:	40020440 	.word	0x40020440
 80020e4:	40020458 	.word	0x40020458
 80020e8:	40020470 	.word	0x40020470
 80020ec:	40020488 	.word	0x40020488
 80020f0:	400204a0 	.word	0x400204a0
 80020f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1c8      	bne.n	8002098 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4b83      	ldr	r3, [pc, #524]	; (8002320 <HAL_DMA_Init+0x420>)
 8002112:	4013      	ands	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800211e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002136:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2b04      	cmp	r3, #4
 800214a:	d107      	bne.n	800215c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4313      	orrs	r3, r2
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800215c:	4b71      	ldr	r3, [pc, #452]	; (8002324 <HAL_DMA_Init+0x424>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b71      	ldr	r3, [pc, #452]	; (8002328 <HAL_DMA_Init+0x428>)
 8002162:	4013      	ands	r3, r2
 8002164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002168:	d328      	bcc.n	80021bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b28      	cmp	r3, #40	; 0x28
 8002170:	d903      	bls.n	800217a <HAL_DMA_Init+0x27a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b2e      	cmp	r3, #46	; 0x2e
 8002178:	d917      	bls.n	80021aa <HAL_DMA_Init+0x2aa>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b3e      	cmp	r3, #62	; 0x3e
 8002180:	d903      	bls.n	800218a <HAL_DMA_Init+0x28a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b42      	cmp	r3, #66	; 0x42
 8002188:	d90f      	bls.n	80021aa <HAL_DMA_Init+0x2aa>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b46      	cmp	r3, #70	; 0x46
 8002190:	d903      	bls.n	800219a <HAL_DMA_Init+0x29a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b48      	cmp	r3, #72	; 0x48
 8002198:	d907      	bls.n	80021aa <HAL_DMA_Init+0x2aa>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b4e      	cmp	r3, #78	; 0x4e
 80021a0:	d905      	bls.n	80021ae <HAL_DMA_Init+0x2ae>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b52      	cmp	r3, #82	; 0x52
 80021a8:	d801      	bhi.n	80021ae <HAL_DMA_Init+0x2ae>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_DMA_Init+0x2b0>
 80021ae:	2300      	movs	r3, #0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f023 0307 	bic.w	r3, r3, #7
 80021d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4313      	orrs	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d117      	bne.n	8002216 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00e      	beq.n	8002216 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 ff29 	bl	8004050 <DMA_CheckFifoParam>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e197      	b.n	8002546 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f001 fe64 	bl	8003eec <DMA_CalcBaseAndBitshift>
 8002224:	4603      	mov	r3, r0
 8002226:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	223f      	movs	r2, #63	; 0x3f
 8002232:	409a      	lsls	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e0cd      	b.n	80023d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a3b      	ldr	r2, [pc, #236]	; (800232c <HAL_DMA_Init+0x42c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d022      	beq.n	800228a <HAL_DMA_Init+0x38a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a39      	ldr	r2, [pc, #228]	; (8002330 <HAL_DMA_Init+0x430>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01d      	beq.n	800228a <HAL_DMA_Init+0x38a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a38      	ldr	r2, [pc, #224]	; (8002334 <HAL_DMA_Init+0x434>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d018      	beq.n	800228a <HAL_DMA_Init+0x38a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a36      	ldr	r2, [pc, #216]	; (8002338 <HAL_DMA_Init+0x438>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_DMA_Init+0x38a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a35      	ldr	r2, [pc, #212]	; (800233c <HAL_DMA_Init+0x43c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00e      	beq.n	800228a <HAL_DMA_Init+0x38a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a33      	ldr	r2, [pc, #204]	; (8002340 <HAL_DMA_Init+0x440>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d009      	beq.n	800228a <HAL_DMA_Init+0x38a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <HAL_DMA_Init+0x444>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d004      	beq.n	800228a <HAL_DMA_Init+0x38a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a30      	ldr	r2, [pc, #192]	; (8002348 <HAL_DMA_Init+0x448>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_DMA_Init+0x38e>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_DMA_Init+0x390>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8097 	beq.w	80023c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_DMA_Init+0x42c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d021      	beq.n	80022e4 <HAL_DMA_Init+0x3e4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_DMA_Init+0x430>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01c      	beq.n	80022e4 <HAL_DMA_Init+0x3e4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_DMA_Init+0x434>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d017      	beq.n	80022e4 <HAL_DMA_Init+0x3e4>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_DMA_Init+0x438>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d012      	beq.n	80022e4 <HAL_DMA_Init+0x3e4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_DMA_Init+0x43c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00d      	beq.n	80022e4 <HAL_DMA_Init+0x3e4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_DMA_Init+0x440>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d008      	beq.n	80022e4 <HAL_DMA_Init+0x3e4>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_DMA_Init+0x444>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <HAL_DMA_Init+0x3e4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_DMA_Init+0x448>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_DMA_Init+0x44c>)
 8002302:	4013      	ands	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b40      	cmp	r3, #64	; 0x40
 800230c:	d020      	beq.n	8002350 <HAL_DMA_Init+0x450>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b80      	cmp	r3, #128	; 0x80
 8002314:	d102      	bne.n	800231c <HAL_DMA_Init+0x41c>
 8002316:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800231a:	e01a      	b.n	8002352 <HAL_DMA_Init+0x452>
 800231c:	2300      	movs	r3, #0
 800231e:	e018      	b.n	8002352 <HAL_DMA_Init+0x452>
 8002320:	fe10803f 	.word	0xfe10803f
 8002324:	5c001000 	.word	0x5c001000
 8002328:	ffff0000 	.word	0xffff0000
 800232c:	58025408 	.word	0x58025408
 8002330:	5802541c 	.word	0x5802541c
 8002334:	58025430 	.word	0x58025430
 8002338:	58025444 	.word	0x58025444
 800233c:	58025458 	.word	0x58025458
 8002340:	5802546c 	.word	0x5802546c
 8002344:	58025480 	.word	0x58025480
 8002348:	58025494 	.word	0x58025494
 800234c:	fffe000f 	.word	0xfffe000f
 8002350:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002380:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	4b6e      	ldr	r3, [pc, #440]	; (8002550 <HAL_DMA_Init+0x650>)
 8002398:	4413      	add	r3, r2
 800239a:	4a6e      	ldr	r2, [pc, #440]	; (8002554 <HAL_DMA_Init+0x654>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f001 fd9f 	bl	8003eec <DMA_CalcBaseAndBitshift>
 80023ae:	4603      	mov	r3, r0
 80023b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	e008      	b.n	80023d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2203      	movs	r2, #3
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0b7      	b.n	8002546 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5f      	ldr	r2, [pc, #380]	; (8002558 <HAL_DMA_Init+0x658>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d072      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a5d      	ldr	r2, [pc, #372]	; (800255c <HAL_DMA_Init+0x65c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d06d      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5c      	ldr	r2, [pc, #368]	; (8002560 <HAL_DMA_Init+0x660>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d068      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <HAL_DMA_Init+0x664>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d063      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a59      	ldr	r2, [pc, #356]	; (8002568 <HAL_DMA_Init+0x668>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d05e      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_DMA_Init+0x66c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d059      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_DMA_Init+0x670>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d054      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a54      	ldr	r2, [pc, #336]	; (8002574 <HAL_DMA_Init+0x674>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d04f      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a53      	ldr	r2, [pc, #332]	; (8002578 <HAL_DMA_Init+0x678>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d04a      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a51      	ldr	r2, [pc, #324]	; (800257c <HAL_DMA_Init+0x67c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d045      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a50      	ldr	r2, [pc, #320]	; (8002580 <HAL_DMA_Init+0x680>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d040      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <HAL_DMA_Init+0x684>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d03b      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a4d      	ldr	r2, [pc, #308]	; (8002588 <HAL_DMA_Init+0x688>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d036      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a4b      	ldr	r2, [pc, #300]	; (800258c <HAL_DMA_Init+0x68c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d031      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a4a      	ldr	r2, [pc, #296]	; (8002590 <HAL_DMA_Init+0x690>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d02c      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a48      	ldr	r2, [pc, #288]	; (8002594 <HAL_DMA_Init+0x694>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d027      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a47      	ldr	r2, [pc, #284]	; (8002598 <HAL_DMA_Init+0x698>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d022      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a45      	ldr	r2, [pc, #276]	; (800259c <HAL_DMA_Init+0x69c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01d      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a44      	ldr	r2, [pc, #272]	; (80025a0 <HAL_DMA_Init+0x6a0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d018      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a42      	ldr	r2, [pc, #264]	; (80025a4 <HAL_DMA_Init+0x6a4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a41      	ldr	r2, [pc, #260]	; (80025a8 <HAL_DMA_Init+0x6a8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3f      	ldr	r2, [pc, #252]	; (80025ac <HAL_DMA_Init+0x6ac>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a3e      	ldr	r2, [pc, #248]	; (80025b0 <HAL_DMA_Init+0x6b0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_DMA_Init+0x5c6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a3c      	ldr	r2, [pc, #240]	; (80025b4 <HAL_DMA_Init+0x6b4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_Init+0x5ca>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_DMA_Init+0x5cc>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d032      	beq.n	8002536 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f001 fe39 	bl	8004148 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d102      	bne.n	80024e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80024f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <HAL_DMA_Init+0x624>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b08      	cmp	r3, #8
 8002508:	d80c      	bhi.n	8002524 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f001 feb6 	bl	800427c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	e008      	b.n	8002536 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	a7fdabf8 	.word	0xa7fdabf8
 8002554:	cccccccd 	.word	0xcccccccd
 8002558:	40020010 	.word	0x40020010
 800255c:	40020028 	.word	0x40020028
 8002560:	40020040 	.word	0x40020040
 8002564:	40020058 	.word	0x40020058
 8002568:	40020070 	.word	0x40020070
 800256c:	40020088 	.word	0x40020088
 8002570:	400200a0 	.word	0x400200a0
 8002574:	400200b8 	.word	0x400200b8
 8002578:	40020410 	.word	0x40020410
 800257c:	40020428 	.word	0x40020428
 8002580:	40020440 	.word	0x40020440
 8002584:	40020458 	.word	0x40020458
 8002588:	40020470 	.word	0x40020470
 800258c:	40020488 	.word	0x40020488
 8002590:	400204a0 	.word	0x400204a0
 8002594:	400204b8 	.word	0x400204b8
 8002598:	58025408 	.word	0x58025408
 800259c:	5802541c 	.word	0x5802541c
 80025a0:	58025430 	.word	0x58025430
 80025a4:	58025444 	.word	0x58025444
 80025a8:	58025458 	.word	0x58025458
 80025ac:	5802546c 	.word	0x5802546c
 80025b0:	58025480 	.word	0x58025480
 80025b4:	58025494 	.word	0x58025494

080025b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff fad6 	bl	8001b70 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e2dc      	b.n	8002b8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d008      	beq.n	80025ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e2cd      	b.n	8002b8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a76      	ldr	r2, [pc, #472]	; (80027cc <HAL_DMA_Abort+0x214>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04a      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a74      	ldr	r2, [pc, #464]	; (80027d0 <HAL_DMA_Abort+0x218>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d045      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a73      	ldr	r2, [pc, #460]	; (80027d4 <HAL_DMA_Abort+0x21c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d040      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a71      	ldr	r2, [pc, #452]	; (80027d8 <HAL_DMA_Abort+0x220>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d03b      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a70      	ldr	r2, [pc, #448]	; (80027dc <HAL_DMA_Abort+0x224>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d036      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a6e      	ldr	r2, [pc, #440]	; (80027e0 <HAL_DMA_Abort+0x228>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d031      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6d      	ldr	r2, [pc, #436]	; (80027e4 <HAL_DMA_Abort+0x22c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d02c      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6b      	ldr	r2, [pc, #428]	; (80027e8 <HAL_DMA_Abort+0x230>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d027      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6a      	ldr	r2, [pc, #424]	; (80027ec <HAL_DMA_Abort+0x234>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d022      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a68      	ldr	r2, [pc, #416]	; (80027f0 <HAL_DMA_Abort+0x238>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01d      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a67      	ldr	r2, [pc, #412]	; (80027f4 <HAL_DMA_Abort+0x23c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d018      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_DMA_Abort+0x240>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a64      	ldr	r2, [pc, #400]	; (80027fc <HAL_DMA_Abort+0x244>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00e      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a62      	ldr	r2, [pc, #392]	; (8002800 <HAL_DMA_Abort+0x248>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d009      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a61      	ldr	r2, [pc, #388]	; (8002804 <HAL_DMA_Abort+0x24c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_DMA_Abort+0xd6>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a5f      	ldr	r2, [pc, #380]	; (8002808 <HAL_DMA_Abort+0x250>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_DMA_Abort+0xda>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_DMA_Abort+0xdc>
 8002692:	2300      	movs	r3, #0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 021e 	bic.w	r2, r2, #30
 80026a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	e00a      	b.n	80026d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 020e 	bic.w	r2, r2, #14
 80026ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3c      	ldr	r2, [pc, #240]	; (80027cc <HAL_DMA_Abort+0x214>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d072      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <HAL_DMA_Abort+0x218>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d06d      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a39      	ldr	r2, [pc, #228]	; (80027d4 <HAL_DMA_Abort+0x21c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d068      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <HAL_DMA_Abort+0x220>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d063      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_DMA_Abort+0x224>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d05e      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a34      	ldr	r2, [pc, #208]	; (80027e0 <HAL_DMA_Abort+0x228>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d059      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a33      	ldr	r2, [pc, #204]	; (80027e4 <HAL_DMA_Abort+0x22c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d054      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <HAL_DMA_Abort+0x230>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04f      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a30      	ldr	r2, [pc, #192]	; (80027ec <HAL_DMA_Abort+0x234>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04a      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2e      	ldr	r2, [pc, #184]	; (80027f0 <HAL_DMA_Abort+0x238>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d045      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2d      	ldr	r2, [pc, #180]	; (80027f4 <HAL_DMA_Abort+0x23c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d040      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <HAL_DMA_Abort+0x240>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d03b      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2a      	ldr	r2, [pc, #168]	; (80027fc <HAL_DMA_Abort+0x244>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d036      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a28      	ldr	r2, [pc, #160]	; (8002800 <HAL_DMA_Abort+0x248>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a27      	ldr	r2, [pc, #156]	; (8002804 <HAL_DMA_Abort+0x24c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d02c      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a25      	ldr	r2, [pc, #148]	; (8002808 <HAL_DMA_Abort+0x250>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a24      	ldr	r2, [pc, #144]	; (800280c <HAL_DMA_Abort+0x254>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a22      	ldr	r2, [pc, #136]	; (8002810 <HAL_DMA_Abort+0x258>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_DMA_Abort+0x25c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_DMA_Abort+0x260>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1e      	ldr	r2, [pc, #120]	; (800281c <HAL_DMA_Abort+0x264>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a1c      	ldr	r2, [pc, #112]	; (8002820 <HAL_DMA_Abort+0x268>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <HAL_DMA_Abort+0x26c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Abort+0x20e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_DMA_Abort+0x270>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d132      	bne.n	800282c <HAL_DMA_Abort+0x274>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e031      	b.n	800282e <HAL_DMA_Abort+0x276>
 80027ca:	bf00      	nop
 80027cc:	40020010 	.word	0x40020010
 80027d0:	40020028 	.word	0x40020028
 80027d4:	40020040 	.word	0x40020040
 80027d8:	40020058 	.word	0x40020058
 80027dc:	40020070 	.word	0x40020070
 80027e0:	40020088 	.word	0x40020088
 80027e4:	400200a0 	.word	0x400200a0
 80027e8:	400200b8 	.word	0x400200b8
 80027ec:	40020410 	.word	0x40020410
 80027f0:	40020428 	.word	0x40020428
 80027f4:	40020440 	.word	0x40020440
 80027f8:	40020458 	.word	0x40020458
 80027fc:	40020470 	.word	0x40020470
 8002800:	40020488 	.word	0x40020488
 8002804:	400204a0 	.word	0x400204a0
 8002808:	400204b8 	.word	0x400204b8
 800280c:	58025408 	.word	0x58025408
 8002810:	5802541c 	.word	0x5802541c
 8002814:	58025430 	.word	0x58025430
 8002818:	58025444 	.word	0x58025444
 800281c:	58025458 	.word	0x58025458
 8002820:	5802546c 	.word	0x5802546c
 8002824:	58025480 	.word	0x58025480
 8002828:	58025494 	.word	0x58025494
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002840:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6d      	ldr	r2, [pc, #436]	; (80029fc <HAL_DMA_Abort+0x444>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04a      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a6b      	ldr	r2, [pc, #428]	; (8002a00 <HAL_DMA_Abort+0x448>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d045      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6a      	ldr	r2, [pc, #424]	; (8002a04 <HAL_DMA_Abort+0x44c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d040      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a68      	ldr	r2, [pc, #416]	; (8002a08 <HAL_DMA_Abort+0x450>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d03b      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a67      	ldr	r2, [pc, #412]	; (8002a0c <HAL_DMA_Abort+0x454>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d036      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_DMA_Abort+0x458>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a64      	ldr	r2, [pc, #400]	; (8002a14 <HAL_DMA_Abort+0x45c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d02c      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a62      	ldr	r2, [pc, #392]	; (8002a18 <HAL_DMA_Abort+0x460>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d027      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a61      	ldr	r2, [pc, #388]	; (8002a1c <HAL_DMA_Abort+0x464>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d022      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5f      	ldr	r2, [pc, #380]	; (8002a20 <HAL_DMA_Abort+0x468>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01d      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a5e      	ldr	r2, [pc, #376]	; (8002a24 <HAL_DMA_Abort+0x46c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d018      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a5c      	ldr	r2, [pc, #368]	; (8002a28 <HAL_DMA_Abort+0x470>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5b      	ldr	r2, [pc, #364]	; (8002a2c <HAL_DMA_Abort+0x474>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a59      	ldr	r2, [pc, #356]	; (8002a30 <HAL_DMA_Abort+0x478>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_DMA_Abort+0x47c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_Abort+0x32a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a56      	ldr	r2, [pc, #344]	; (8002a38 <HAL_DMA_Abort+0x480>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d108      	bne.n	80028f4 <HAL_DMA_Abort+0x33c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	e007      	b.n	8002904 <HAL_DMA_Abort+0x34c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002904:	e013      	b.n	800292e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002906:	f7ff f933 	bl	8001b70 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b05      	cmp	r3, #5
 8002912:	d90c      	bls.n	800292e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2203      	movs	r2, #3
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e12d      	b.n	8002b8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e5      	bne.n	8002906 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <HAL_DMA_Abort+0x444>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d04a      	beq.n	80029da <HAL_DMA_Abort+0x422>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2d      	ldr	r2, [pc, #180]	; (8002a00 <HAL_DMA_Abort+0x448>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d045      	beq.n	80029da <HAL_DMA_Abort+0x422>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2c      	ldr	r2, [pc, #176]	; (8002a04 <HAL_DMA_Abort+0x44c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d040      	beq.n	80029da <HAL_DMA_Abort+0x422>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <HAL_DMA_Abort+0x450>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d03b      	beq.n	80029da <HAL_DMA_Abort+0x422>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <HAL_DMA_Abort+0x454>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d036      	beq.n	80029da <HAL_DMA_Abort+0x422>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <HAL_DMA_Abort+0x458>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d031      	beq.n	80029da <HAL_DMA_Abort+0x422>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <HAL_DMA_Abort+0x45c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d02c      	beq.n	80029da <HAL_DMA_Abort+0x422>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <HAL_DMA_Abort+0x460>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d027      	beq.n	80029da <HAL_DMA_Abort+0x422>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <HAL_DMA_Abort+0x464>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_Abort+0x422>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a21      	ldr	r2, [pc, #132]	; (8002a20 <HAL_DMA_Abort+0x468>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_DMA_Abort+0x422>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_DMA_Abort+0x46c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_DMA_Abort+0x422>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_DMA_Abort+0x470>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_DMA_Abort+0x422>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_DMA_Abort+0x474>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_DMA_Abort+0x422>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_DMA_Abort+0x478>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_DMA_Abort+0x422>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_DMA_Abort+0x47c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_DMA_Abort+0x422>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_DMA_Abort+0x480>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_DMA_Abort+0x426>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_Abort+0x428>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02b      	beq.n	8002a3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	223f      	movs	r2, #63	; 0x3f
 80029f4:	409a      	lsls	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	e02a      	b.n	8002a52 <HAL_DMA_Abort+0x49a>
 80029fc:	40020010 	.word	0x40020010
 8002a00:	40020028 	.word	0x40020028
 8002a04:	40020040 	.word	0x40020040
 8002a08:	40020058 	.word	0x40020058
 8002a0c:	40020070 	.word	0x40020070
 8002a10:	40020088 	.word	0x40020088
 8002a14:	400200a0 	.word	0x400200a0
 8002a18:	400200b8 	.word	0x400200b8
 8002a1c:	40020410 	.word	0x40020410
 8002a20:	40020428 	.word	0x40020428
 8002a24:	40020440 	.word	0x40020440
 8002a28:	40020458 	.word	0x40020458
 8002a2c:	40020470 	.word	0x40020470
 8002a30:	40020488 	.word	0x40020488
 8002a34:	400204a0 	.word	0x400204a0
 8002a38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4f      	ldr	r2, [pc, #316]	; (8002b94 <HAL_DMA_Abort+0x5dc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d072      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a4d      	ldr	r2, [pc, #308]	; (8002b98 <HAL_DMA_Abort+0x5e0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d06d      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <HAL_DMA_Abort+0x5e4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d068      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a4a      	ldr	r2, [pc, #296]	; (8002ba0 <HAL_DMA_Abort+0x5e8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d063      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a49      	ldr	r2, [pc, #292]	; (8002ba4 <HAL_DMA_Abort+0x5ec>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d05e      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a47      	ldr	r2, [pc, #284]	; (8002ba8 <HAL_DMA_Abort+0x5f0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d059      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a46      	ldr	r2, [pc, #280]	; (8002bac <HAL_DMA_Abort+0x5f4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d054      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a44      	ldr	r2, [pc, #272]	; (8002bb0 <HAL_DMA_Abort+0x5f8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d04f      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a43      	ldr	r2, [pc, #268]	; (8002bb4 <HAL_DMA_Abort+0x5fc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04a      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a41      	ldr	r2, [pc, #260]	; (8002bb8 <HAL_DMA_Abort+0x600>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d045      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a40      	ldr	r2, [pc, #256]	; (8002bbc <HAL_DMA_Abort+0x604>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3e      	ldr	r2, [pc, #248]	; (8002bc0 <HAL_DMA_Abort+0x608>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d03b      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <HAL_DMA_Abort+0x60c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d036      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3b      	ldr	r2, [pc, #236]	; (8002bc8 <HAL_DMA_Abort+0x610>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d031      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <HAL_DMA_Abort+0x614>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02c      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a38      	ldr	r2, [pc, #224]	; (8002bd0 <HAL_DMA_Abort+0x618>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d027      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_DMA_Abort+0x61c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a35      	ldr	r2, [pc, #212]	; (8002bd8 <HAL_DMA_Abort+0x620>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <HAL_DMA_Abort+0x624>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_DMA_Abort+0x628>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_DMA_Abort+0x62c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <HAL_DMA_Abort+0x630>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2e      	ldr	r2, [pc, #184]	; (8002bec <HAL_DMA_Abort+0x634>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_DMA_Abort+0x58a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <HAL_DMA_Abort+0x638>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Abort+0x58e>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_Abort+0x590>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	58025408 	.word	0x58025408
 8002bd8:	5802541c 	.word	0x5802541c
 8002bdc:	58025430 	.word	0x58025430
 8002be0:	58025444 	.word	0x58025444
 8002be4:	58025458 	.word	0x58025458
 8002be8:	5802546c 	.word	0x5802546c
 8002bec:	58025480 	.word	0x58025480
 8002bf0:	58025494 	.word	0x58025494

08002bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e205      	b.n	8003012 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d004      	beq.n	8002c1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e1fa      	b.n	8003012 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a8c      	ldr	r2, [pc, #560]	; (8002e54 <HAL_DMA_Abort_IT+0x260>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d04a      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a8b      	ldr	r2, [pc, #556]	; (8002e58 <HAL_DMA_Abort_IT+0x264>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d045      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a89      	ldr	r2, [pc, #548]	; (8002e5c <HAL_DMA_Abort_IT+0x268>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d040      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a88      	ldr	r2, [pc, #544]	; (8002e60 <HAL_DMA_Abort_IT+0x26c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d03b      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a86      	ldr	r2, [pc, #536]	; (8002e64 <HAL_DMA_Abort_IT+0x270>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d036      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a85      	ldr	r2, [pc, #532]	; (8002e68 <HAL_DMA_Abort_IT+0x274>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d031      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a83      	ldr	r2, [pc, #524]	; (8002e6c <HAL_DMA_Abort_IT+0x278>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02c      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a82      	ldr	r2, [pc, #520]	; (8002e70 <HAL_DMA_Abort_IT+0x27c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d027      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a80      	ldr	r2, [pc, #512]	; (8002e74 <HAL_DMA_Abort_IT+0x280>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d022      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7f      	ldr	r2, [pc, #508]	; (8002e78 <HAL_DMA_Abort_IT+0x284>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d01d      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7d      	ldr	r2, [pc, #500]	; (8002e7c <HAL_DMA_Abort_IT+0x288>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d018      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_DMA_Abort_IT+0x28c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_DMA_Abort_IT+0x290>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a79      	ldr	r2, [pc, #484]	; (8002e88 <HAL_DMA_Abort_IT+0x294>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a77      	ldr	r2, [pc, #476]	; (8002e8c <HAL_DMA_Abort_IT+0x298>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_DMA_Abort_IT+0xc8>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a76      	ldr	r2, [pc, #472]	; (8002e90 <HAL_DMA_Abort_IT+0x29c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_DMA_Abort_IT+0xcc>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_DMA_Abort_IT+0xce>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d065      	beq.n	8002d92 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a60      	ldr	r2, [pc, #384]	; (8002e54 <HAL_DMA_Abort_IT+0x260>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d04a      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5e      	ldr	r2, [pc, #376]	; (8002e58 <HAL_DMA_Abort_IT+0x264>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d045      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5d      	ldr	r2, [pc, #372]	; (8002e5c <HAL_DMA_Abort_IT+0x268>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d040      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <HAL_DMA_Abort_IT+0x26c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d03b      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a5a      	ldr	r2, [pc, #360]	; (8002e64 <HAL_DMA_Abort_IT+0x270>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d036      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a58      	ldr	r2, [pc, #352]	; (8002e68 <HAL_DMA_Abort_IT+0x274>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d031      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a57      	ldr	r2, [pc, #348]	; (8002e6c <HAL_DMA_Abort_IT+0x278>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d02c      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a55      	ldr	r2, [pc, #340]	; (8002e70 <HAL_DMA_Abort_IT+0x27c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d027      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_DMA_Abort_IT+0x280>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_DMA_Abort_IT+0x284>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a51      	ldr	r2, [pc, #324]	; (8002e7c <HAL_DMA_Abort_IT+0x288>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d018      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4f      	ldr	r2, [pc, #316]	; (8002e80 <HAL_DMA_Abort_IT+0x28c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a4e      	ldr	r2, [pc, #312]	; (8002e84 <HAL_DMA_Abort_IT+0x290>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a4c      	ldr	r2, [pc, #304]	; (8002e88 <HAL_DMA_Abort_IT+0x294>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a4b      	ldr	r2, [pc, #300]	; (8002e8c <HAL_DMA_Abort_IT+0x298>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x17a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a49      	ldr	r2, [pc, #292]	; (8002e90 <HAL_DMA_Abort_IT+0x29c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <HAL_DMA_Abort_IT+0x18c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e147      	b.n	8003010 <HAL_DMA_Abort_IT+0x41c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e13e      	b.n	8003010 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 020e 	bic.w	r2, r2, #14
 8002da0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <HAL_DMA_Abort_IT+0x260>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d04a      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a29      	ldr	r2, [pc, #164]	; (8002e58 <HAL_DMA_Abort_IT+0x264>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d045      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <HAL_DMA_Abort_IT+0x268>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d040      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a26      	ldr	r2, [pc, #152]	; (8002e60 <HAL_DMA_Abort_IT+0x26c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d03b      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <HAL_DMA_Abort_IT+0x270>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d036      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_DMA_Abort_IT+0x274>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <HAL_DMA_Abort_IT+0x278>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d02c      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <HAL_DMA_Abort_IT+0x27c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_DMA_Abort_IT+0x280>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <HAL_DMA_Abort_IT+0x284>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_DMA_Abort_IT+0x288>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <HAL_DMA_Abort_IT+0x28c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_DMA_Abort_IT+0x290>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <HAL_DMA_Abort_IT+0x294>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <HAL_DMA_Abort_IT+0x298>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x24e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <HAL_DMA_Abort_IT+0x29c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d128      	bne.n	8002e94 <HAL_DMA_Abort_IT+0x2a0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e027      	b.n	8002ea4 <HAL_DMA_Abort_IT+0x2b0>
 8002e54:	40020010 	.word	0x40020010
 8002e58:	40020028 	.word	0x40020028
 8002e5c:	40020040 	.word	0x40020040
 8002e60:	40020058 	.word	0x40020058
 8002e64:	40020070 	.word	0x40020070
 8002e68:	40020088 	.word	0x40020088
 8002e6c:	400200a0 	.word	0x400200a0
 8002e70:	400200b8 	.word	0x400200b8
 8002e74:	40020410 	.word	0x40020410
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40020440 	.word	0x40020440
 8002e80:	40020458 	.word	0x40020458
 8002e84:	40020470 	.word	0x40020470
 8002e88:	40020488 	.word	0x40020488
 8002e8c:	400204a0 	.word	0x400204a0
 8002e90:	400204b8 	.word	0x400204b8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5c      	ldr	r2, [pc, #368]	; (800301c <HAL_DMA_Abort_IT+0x428>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d072      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	; (8003020 <HAL_DMA_Abort_IT+0x42c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d06d      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a59      	ldr	r2, [pc, #356]	; (8003024 <HAL_DMA_Abort_IT+0x430>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d068      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_DMA_Abort_IT+0x434>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d063      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a56      	ldr	r2, [pc, #344]	; (800302c <HAL_DMA_Abort_IT+0x438>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d05e      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a55      	ldr	r2, [pc, #340]	; (8003030 <HAL_DMA_Abort_IT+0x43c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d059      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a53      	ldr	r2, [pc, #332]	; (8003034 <HAL_DMA_Abort_IT+0x440>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d054      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_DMA_Abort_IT+0x444>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d04f      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a50      	ldr	r2, [pc, #320]	; (800303c <HAL_DMA_Abort_IT+0x448>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d04a      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_DMA_Abort_IT+0x44c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d045      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_DMA_Abort_IT+0x450>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d040      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_DMA_Abort_IT+0x454>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03b      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <HAL_DMA_Abort_IT+0x458>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d036      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a49      	ldr	r2, [pc, #292]	; (8003050 <HAL_DMA_Abort_IT+0x45c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d031      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a47      	ldr	r2, [pc, #284]	; (8003054 <HAL_DMA_Abort_IT+0x460>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02c      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a46      	ldr	r2, [pc, #280]	; (8003058 <HAL_DMA_Abort_IT+0x464>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d027      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a44      	ldr	r2, [pc, #272]	; (800305c <HAL_DMA_Abort_IT+0x468>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a43      	ldr	r2, [pc, #268]	; (8003060 <HAL_DMA_Abort_IT+0x46c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01d      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a41      	ldr	r2, [pc, #260]	; (8003064 <HAL_DMA_Abort_IT+0x470>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a40      	ldr	r2, [pc, #256]	; (8003068 <HAL_DMA_Abort_IT+0x474>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3e      	ldr	r2, [pc, #248]	; (800306c <HAL_DMA_Abort_IT+0x478>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <HAL_DMA_Abort_IT+0x47c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3b      	ldr	r2, [pc, #236]	; (8003074 <HAL_DMA_Abort_IT+0x480>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x3a0>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <HAL_DMA_Abort_IT+0x484>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d101      	bne.n	8002f98 <HAL_DMA_Abort_IT+0x3a4>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_DMA_Abort_IT+0x3a6>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d028      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fcc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40020010 	.word	0x40020010
 8003020:	40020028 	.word	0x40020028
 8003024:	40020040 	.word	0x40020040
 8003028:	40020058 	.word	0x40020058
 800302c:	40020070 	.word	0x40020070
 8003030:	40020088 	.word	0x40020088
 8003034:	400200a0 	.word	0x400200a0
 8003038:	400200b8 	.word	0x400200b8
 800303c:	40020410 	.word	0x40020410
 8003040:	40020428 	.word	0x40020428
 8003044:	40020440 	.word	0x40020440
 8003048:	40020458 	.word	0x40020458
 800304c:	40020470 	.word	0x40020470
 8003050:	40020488 	.word	0x40020488
 8003054:	400204a0 	.word	0x400204a0
 8003058:	400204b8 	.word	0x400204b8
 800305c:	58025408 	.word	0x58025408
 8003060:	5802541c 	.word	0x5802541c
 8003064:	58025430 	.word	0x58025430
 8003068:	58025444 	.word	0x58025444
 800306c:	58025458 	.word	0x58025458
 8003070:	5802546c 	.word	0x5802546c
 8003074:	58025480 	.word	0x58025480
 8003078:	58025494 	.word	0x58025494

0800307c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003088:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_DMA_IRQHandler+0x1ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a67      	ldr	r2, [pc, #412]	; (800322c <HAL_DMA_IRQHandler+0x1b0>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0a9b      	lsrs	r3, r3, #10
 8003094:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a5f      	ldr	r2, [pc, #380]	; (8003230 <HAL_DMA_IRQHandler+0x1b4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d04a      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a5d      	ldr	r2, [pc, #372]	; (8003234 <HAL_DMA_IRQHandler+0x1b8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d045      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a5c      	ldr	r2, [pc, #368]	; (8003238 <HAL_DMA_IRQHandler+0x1bc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d040      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5a      	ldr	r2, [pc, #360]	; (800323c <HAL_DMA_IRQHandler+0x1c0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d03b      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a59      	ldr	r2, [pc, #356]	; (8003240 <HAL_DMA_IRQHandler+0x1c4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d036      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a57      	ldr	r2, [pc, #348]	; (8003244 <HAL_DMA_IRQHandler+0x1c8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d031      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_DMA_IRQHandler+0x1cc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d02c      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a54      	ldr	r2, [pc, #336]	; (800324c <HAL_DMA_IRQHandler+0x1d0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d027      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a53      	ldr	r2, [pc, #332]	; (8003250 <HAL_DMA_IRQHandler+0x1d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a51      	ldr	r2, [pc, #324]	; (8003254 <HAL_DMA_IRQHandler+0x1d8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01d      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a50      	ldr	r2, [pc, #320]	; (8003258 <HAL_DMA_IRQHandler+0x1dc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d018      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4e      	ldr	r2, [pc, #312]	; (800325c <HAL_DMA_IRQHandler+0x1e0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a4d      	ldr	r2, [pc, #308]	; (8003260 <HAL_DMA_IRQHandler+0x1e4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <HAL_DMA_IRQHandler+0x1e8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a4a      	ldr	r2, [pc, #296]	; (8003268 <HAL_DMA_IRQHandler+0x1ec>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_DMA_IRQHandler+0xd2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a48      	ldr	r2, [pc, #288]	; (800326c <HAL_DMA_IRQHandler+0x1f0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_DMA_IRQHandler+0xd6>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_DMA_IRQHandler+0xd8>
 8003152:	2300      	movs	r3, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 842b 	beq.w	80039b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2208      	movs	r2, #8
 8003164:	409a      	lsls	r2, r3
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80a2 	beq.w	80032b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2e      	ldr	r2, [pc, #184]	; (8003230 <HAL_DMA_IRQHandler+0x1b4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04a      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <HAL_DMA_IRQHandler+0x1b8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d045      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <HAL_DMA_IRQHandler+0x1bc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d040      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2a      	ldr	r2, [pc, #168]	; (800323c <HAL_DMA_IRQHandler+0x1c0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d03b      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a28      	ldr	r2, [pc, #160]	; (8003240 <HAL_DMA_IRQHandler+0x1c4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d036      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a27      	ldr	r2, [pc, #156]	; (8003244 <HAL_DMA_IRQHandler+0x1c8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d031      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a25      	ldr	r2, [pc, #148]	; (8003248 <HAL_DMA_IRQHandler+0x1cc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02c      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a24      	ldr	r2, [pc, #144]	; (800324c <HAL_DMA_IRQHandler+0x1d0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d027      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	; (8003250 <HAL_DMA_IRQHandler+0x1d4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d022      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	; (8003254 <HAL_DMA_IRQHandler+0x1d8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d01d      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_DMA_IRQHandler+0x1dc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d018      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <HAL_DMA_IRQHandler+0x1e0>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_DMA_IRQHandler+0x1e4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00e      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_DMA_IRQHandler+0x1e8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_DMA_IRQHandler+0x1ec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_DMA_IRQHandler+0x194>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_DMA_IRQHandler+0x1f0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d12f      	bne.n	8003270 <HAL_DMA_IRQHandler+0x1f4>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	e02e      	b.n	8003284 <HAL_DMA_IRQHandler+0x208>
 8003226:	bf00      	nop
 8003228:	24000000 	.word	0x24000000
 800322c:	1b4e81b5 	.word	0x1b4e81b5
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2208      	movs	r2, #8
 80032a2:	409a      	lsls	r2, r3
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d06e      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a69      	ldr	r2, [pc, #420]	; (8003474 <HAL_DMA_IRQHandler+0x3f8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d04a      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a67      	ldr	r2, [pc, #412]	; (8003478 <HAL_DMA_IRQHandler+0x3fc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d045      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a66      	ldr	r2, [pc, #408]	; (800347c <HAL_DMA_IRQHandler+0x400>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d040      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a64      	ldr	r2, [pc, #400]	; (8003480 <HAL_DMA_IRQHandler+0x404>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d03b      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a63      	ldr	r2, [pc, #396]	; (8003484 <HAL_DMA_IRQHandler+0x408>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d036      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a61      	ldr	r2, [pc, #388]	; (8003488 <HAL_DMA_IRQHandler+0x40c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d031      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a60      	ldr	r2, [pc, #384]	; (800348c <HAL_DMA_IRQHandler+0x410>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d02c      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <HAL_DMA_IRQHandler+0x414>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d027      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a5d      	ldr	r2, [pc, #372]	; (8003494 <HAL_DMA_IRQHandler+0x418>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d022      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5b      	ldr	r2, [pc, #364]	; (8003498 <HAL_DMA_IRQHandler+0x41c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01d      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a5a      	ldr	r2, [pc, #360]	; (800349c <HAL_DMA_IRQHandler+0x420>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d018      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_DMA_IRQHandler+0x424>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a57      	ldr	r2, [pc, #348]	; (80034a4 <HAL_DMA_IRQHandler+0x428>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00e      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a55      	ldr	r2, [pc, #340]	; (80034a8 <HAL_DMA_IRQHandler+0x42c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d009      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a54      	ldr	r2, [pc, #336]	; (80034ac <HAL_DMA_IRQHandler+0x430>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d004      	beq.n	800336a <HAL_DMA_IRQHandler+0x2ee>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_DMA_IRQHandler+0x434>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10a      	bne.n	8003380 <HAL_DMA_IRQHandler+0x304>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	e003      	b.n	8003388 <HAL_DMA_IRQHandler+0x30c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2201      	movs	r2, #1
 8003396:	409a      	lsls	r2, r3
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	f043 0202 	orr.w	r2, r3, #2
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	2204      	movs	r2, #4
 80033b2:	409a      	lsls	r2, r3
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 808f 	beq.w	80034dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <HAL_DMA_IRQHandler+0x3f8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d04a      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a2a      	ldr	r2, [pc, #168]	; (8003478 <HAL_DMA_IRQHandler+0x3fc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d045      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a29      	ldr	r2, [pc, #164]	; (800347c <HAL_DMA_IRQHandler+0x400>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d040      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <HAL_DMA_IRQHandler+0x404>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d03b      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a26      	ldr	r2, [pc, #152]	; (8003484 <HAL_DMA_IRQHandler+0x408>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d036      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a24      	ldr	r2, [pc, #144]	; (8003488 <HAL_DMA_IRQHandler+0x40c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a23      	ldr	r2, [pc, #140]	; (800348c <HAL_DMA_IRQHandler+0x410>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d02c      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a21      	ldr	r2, [pc, #132]	; (8003490 <HAL_DMA_IRQHandler+0x414>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d027      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a20      	ldr	r2, [pc, #128]	; (8003494 <HAL_DMA_IRQHandler+0x418>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d022      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_DMA_IRQHandler+0x41c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01d      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_DMA_IRQHandler+0x420>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d018      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a1b      	ldr	r2, [pc, #108]	; (80034a0 <HAL_DMA_IRQHandler+0x424>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_DMA_IRQHandler+0x428>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_DMA_IRQHandler+0x42c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a17      	ldr	r2, [pc, #92]	; (80034ac <HAL_DMA_IRQHandler+0x430>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_DMA_IRQHandler+0x3e2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <HAL_DMA_IRQHandler+0x434>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d12a      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x438>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e023      	b.n	80034bc <HAL_DMA_IRQHandler+0x440>
 8003474:	40020010 	.word	0x40020010
 8003478:	40020028 	.word	0x40020028
 800347c:	40020040 	.word	0x40020040
 8003480:	40020058 	.word	0x40020058
 8003484:	40020070 	.word	0x40020070
 8003488:	40020088 	.word	0x40020088
 800348c:	400200a0 	.word	0x400200a0
 8003490:	400200b8 	.word	0x400200b8
 8003494:	40020410 	.word	0x40020410
 8003498:	40020428 	.word	0x40020428
 800349c:	40020440 	.word	0x40020440
 80034a0:	40020458 	.word	0x40020458
 80034a4:	40020470 	.word	0x40020470
 80034a8:	40020488 	.word	0x40020488
 80034ac:	400204a0 	.word	0x400204a0
 80034b0:	400204b8 	.word	0x400204b8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2204      	movs	r2, #4
 80034ca:	409a      	lsls	r2, r3
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2210      	movs	r2, #16
 80034e6:	409a      	lsls	r2, r3
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80a6 	beq.w	800363e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a85      	ldr	r2, [pc, #532]	; (800370c <HAL_DMA_IRQHandler+0x690>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d04a      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a83      	ldr	r2, [pc, #524]	; (8003710 <HAL_DMA_IRQHandler+0x694>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d045      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a82      	ldr	r2, [pc, #520]	; (8003714 <HAL_DMA_IRQHandler+0x698>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d040      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a80      	ldr	r2, [pc, #512]	; (8003718 <HAL_DMA_IRQHandler+0x69c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d03b      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a7f      	ldr	r2, [pc, #508]	; (800371c <HAL_DMA_IRQHandler+0x6a0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d036      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a7d      	ldr	r2, [pc, #500]	; (8003720 <HAL_DMA_IRQHandler+0x6a4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d031      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a7c      	ldr	r2, [pc, #496]	; (8003724 <HAL_DMA_IRQHandler+0x6a8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d02c      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a7a      	ldr	r2, [pc, #488]	; (8003728 <HAL_DMA_IRQHandler+0x6ac>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d027      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a79      	ldr	r2, [pc, #484]	; (800372c <HAL_DMA_IRQHandler+0x6b0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d022      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a77      	ldr	r2, [pc, #476]	; (8003730 <HAL_DMA_IRQHandler+0x6b4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a76      	ldr	r2, [pc, #472]	; (8003734 <HAL_DMA_IRQHandler+0x6b8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d018      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a74      	ldr	r2, [pc, #464]	; (8003738 <HAL_DMA_IRQHandler+0x6bc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a73      	ldr	r2, [pc, #460]	; (800373c <HAL_DMA_IRQHandler+0x6c0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a71      	ldr	r2, [pc, #452]	; (8003740 <HAL_DMA_IRQHandler+0x6c4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d009      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a70      	ldr	r2, [pc, #448]	; (8003744 <HAL_DMA_IRQHandler+0x6c8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_DMA_IRQHandler+0x516>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6e      	ldr	r2, [pc, #440]	; (8003748 <HAL_DMA_IRQHandler+0x6cc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d10a      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x52c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e009      	b.n	80035bc <HAL_DMA_IRQHandler+0x540>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d03e      	beq.n	800363e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2210      	movs	r2, #16
 80035ca:	409a      	lsls	r2, r3
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d024      	beq.n	800363e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
 80035fc:	e01f      	b.n	800363e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01b      	beq.n	800363e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e016      	b.n	800363e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d107      	bne.n	800362e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0208 	bic.w	r2, r2, #8
 800362c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2220      	movs	r2, #32
 8003648:	409a      	lsls	r2, r3
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 8110 	beq.w	8003874 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <HAL_DMA_IRQHandler+0x690>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04a      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <HAL_DMA_IRQHandler+0x694>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d045      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a29      	ldr	r2, [pc, #164]	; (8003714 <HAL_DMA_IRQHandler+0x698>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d040      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a28      	ldr	r2, [pc, #160]	; (8003718 <HAL_DMA_IRQHandler+0x69c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d03b      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a26      	ldr	r2, [pc, #152]	; (800371c <HAL_DMA_IRQHandler+0x6a0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d036      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_DMA_IRQHandler+0x6a4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d031      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a23      	ldr	r2, [pc, #140]	; (8003724 <HAL_DMA_IRQHandler+0x6a8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d02c      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_DMA_IRQHandler+0x6ac>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d027      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_DMA_IRQHandler+0x6b0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d022      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <HAL_DMA_IRQHandler+0x6b4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01d      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_DMA_IRQHandler+0x6b8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d018      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_DMA_IRQHandler+0x6bc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d013      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_DMA_IRQHandler+0x6c0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00e      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a19      	ldr	r2, [pc, #100]	; (8003740 <HAL_DMA_IRQHandler+0x6c4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d009      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a17      	ldr	r2, [pc, #92]	; (8003744 <HAL_DMA_IRQHandler+0x6c8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x678>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a16      	ldr	r2, [pc, #88]	; (8003748 <HAL_DMA_IRQHandler+0x6cc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d12b      	bne.n	800374c <HAL_DMA_IRQHandler+0x6d0>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	e02a      	b.n	8003760 <HAL_DMA_IRQHandler+0x6e4>
 800370a:	bf00      	nop
 800370c:	40020010 	.word	0x40020010
 8003710:	40020028 	.word	0x40020028
 8003714:	40020040 	.word	0x40020040
 8003718:	40020058 	.word	0x40020058
 800371c:	40020070 	.word	0x40020070
 8003720:	40020088 	.word	0x40020088
 8003724:	400200a0 	.word	0x400200a0
 8003728:	400200b8 	.word	0x400200b8
 800372c:	40020410 	.word	0x40020410
 8003730:	40020428 	.word	0x40020428
 8003734:	40020440 	.word	0x40020440
 8003738:	40020458 	.word	0x40020458
 800373c:	40020470 	.word	0x40020470
 8003740:	40020488 	.word	0x40020488
 8003744:	400204a0 	.word	0x400204a0
 8003748:	400204b8 	.word	0x400204b8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8087 	beq.w	8003874 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2220      	movs	r2, #32
 8003770:	409a      	lsls	r2, r3
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b04      	cmp	r3, #4
 8003780:	d139      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0216 	bic.w	r2, r2, #22
 8003790:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x736>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0208 	bic.w	r2, r2, #8
 80037c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	223f      	movs	r2, #63	; 0x3f
 80037cc:	409a      	lsls	r2, r3
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 834a 	beq.w	8003e80 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
          }
          return;
 80037f4:	e344      	b.n	8003e80 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d018      	beq.n	8003836 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d108      	bne.n	8003824 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	2b00      	cmp	r3, #0
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
 8003822:	e027      	b.n	8003874 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d023      	beq.n	8003874 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
 8003834:	e01e      	b.n	8003874 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0210 	bic.w	r2, r2, #16
 8003852:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8306 	beq.w	8003e8a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8088 	beq.w	800399c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2204      	movs	r2, #4
 8003890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a7a      	ldr	r2, [pc, #488]	; (8003a84 <HAL_DMA_IRQHandler+0xa08>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d04a      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a79      	ldr	r2, [pc, #484]	; (8003a88 <HAL_DMA_IRQHandler+0xa0c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d045      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a77      	ldr	r2, [pc, #476]	; (8003a8c <HAL_DMA_IRQHandler+0xa10>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d040      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a76      	ldr	r2, [pc, #472]	; (8003a90 <HAL_DMA_IRQHandler+0xa14>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d03b      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a74      	ldr	r2, [pc, #464]	; (8003a94 <HAL_DMA_IRQHandler+0xa18>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d036      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	; (8003a98 <HAL_DMA_IRQHandler+0xa1c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d031      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a71      	ldr	r2, [pc, #452]	; (8003a9c <HAL_DMA_IRQHandler+0xa20>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02c      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a70      	ldr	r2, [pc, #448]	; (8003aa0 <HAL_DMA_IRQHandler+0xa24>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d027      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a6e      	ldr	r2, [pc, #440]	; (8003aa4 <HAL_DMA_IRQHandler+0xa28>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d022      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6d      	ldr	r2, [pc, #436]	; (8003aa8 <HAL_DMA_IRQHandler+0xa2c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01d      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a6b      	ldr	r2, [pc, #428]	; (8003aac <HAL_DMA_IRQHandler+0xa30>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6a      	ldr	r2, [pc, #424]	; (8003ab0 <HAL_DMA_IRQHandler+0xa34>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a68      	ldr	r2, [pc, #416]	; (8003ab4 <HAL_DMA_IRQHandler+0xa38>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a67      	ldr	r2, [pc, #412]	; (8003ab8 <HAL_DMA_IRQHandler+0xa3c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a65      	ldr	r2, [pc, #404]	; (8003abc <HAL_DMA_IRQHandler+0xa40>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_DMA_IRQHandler+0x8b8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a64      	ldr	r2, [pc, #400]	; (8003ac0 <HAL_DMA_IRQHandler+0xa44>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <HAL_DMA_IRQHandler+0x8ca>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e007      	b.n	8003956 <HAL_DMA_IRQHandler+0x8da>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3301      	adds	r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	429a      	cmp	r2, r3
 8003960:	d307      	bcc.n	8003972 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f2      	bne.n	8003956 <HAL_DMA_IRQHandler+0x8da>
 8003970:	e000      	b.n	8003974 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003972:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2203      	movs	r2, #3
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003992:	e003      	b.n	800399c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 8272 	beq.w	8003e8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
 80039ae:	e26c      	b.n	8003e8a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <HAL_DMA_IRQHandler+0xa48>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d022      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x984>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a42      	ldr	r2, [pc, #264]	; (8003ac8 <HAL_DMA_IRQHandler+0xa4c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d01d      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x984>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a40      	ldr	r2, [pc, #256]	; (8003acc <HAL_DMA_IRQHandler+0xa50>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d018      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x984>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a3f      	ldr	r2, [pc, #252]	; (8003ad0 <HAL_DMA_IRQHandler+0xa54>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x984>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a3d      	ldr	r2, [pc, #244]	; (8003ad4 <HAL_DMA_IRQHandler+0xa58>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x984>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a3c      	ldr	r2, [pc, #240]	; (8003ad8 <HAL_DMA_IRQHandler+0xa5c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d009      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x984>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a3a      	ldr	r2, [pc, #232]	; (8003adc <HAL_DMA_IRQHandler+0xa60>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x984>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a39      	ldr	r2, [pc, #228]	; (8003ae0 <HAL_DMA_IRQHandler+0xa64>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x988>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_DMA_IRQHandler+0x98a>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 823f 	beq.w	8003e8a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80cd 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0xb48>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80c7 	beq.w	8003bc4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2204      	movs	r2, #4
 8003a40:	409a      	lsls	r2, r3
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d049      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8210 	beq.w	8003e84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a6c:	e20a      	b.n	8003e84 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8206 	beq.w	8003e84 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a80:	e200      	b.n	8003e84 <HAL_DMA_IRQHandler+0xe08>
 8003a82:	bf00      	nop
 8003a84:	40020010 	.word	0x40020010
 8003a88:	40020028 	.word	0x40020028
 8003a8c:	40020040 	.word	0x40020040
 8003a90:	40020058 	.word	0x40020058
 8003a94:	40020070 	.word	0x40020070
 8003a98:	40020088 	.word	0x40020088
 8003a9c:	400200a0 	.word	0x400200a0
 8003aa0:	400200b8 	.word	0x400200b8
 8003aa4:	40020410 	.word	0x40020410
 8003aa8:	40020428 	.word	0x40020428
 8003aac:	40020440 	.word	0x40020440
 8003ab0:	40020458 	.word	0x40020458
 8003ab4:	40020470 	.word	0x40020470
 8003ab8:	40020488 	.word	0x40020488
 8003abc:	400204a0 	.word	0x400204a0
 8003ac0:	400204b8 	.word	0x400204b8
 8003ac4:	58025408 	.word	0x58025408
 8003ac8:	5802541c 	.word	0x5802541c
 8003acc:	58025430 	.word	0x58025430
 8003ad0:	58025444 	.word	0x58025444
 8003ad4:	58025458 	.word	0x58025458
 8003ad8:	5802546c 	.word	0x5802546c
 8003adc:	58025480 	.word	0x58025480
 8003ae0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d160      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a8c      	ldr	r2, [pc, #560]	; (8003d24 <HAL_DMA_IRQHandler+0xca8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d04a      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a8a      	ldr	r2, [pc, #552]	; (8003d28 <HAL_DMA_IRQHandler+0xcac>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d045      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a89      	ldr	r2, [pc, #548]	; (8003d2c <HAL_DMA_IRQHandler+0xcb0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d040      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a87      	ldr	r2, [pc, #540]	; (8003d30 <HAL_DMA_IRQHandler+0xcb4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d03b      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a86      	ldr	r2, [pc, #536]	; (8003d34 <HAL_DMA_IRQHandler+0xcb8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d036      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a84      	ldr	r2, [pc, #528]	; (8003d38 <HAL_DMA_IRQHandler+0xcbc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d031      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a83      	ldr	r2, [pc, #524]	; (8003d3c <HAL_DMA_IRQHandler+0xcc0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d02c      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a81      	ldr	r2, [pc, #516]	; (8003d40 <HAL_DMA_IRQHandler+0xcc4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d027      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a80      	ldr	r2, [pc, #512]	; (8003d44 <HAL_DMA_IRQHandler+0xcc8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7e      	ldr	r2, [pc, #504]	; (8003d48 <HAL_DMA_IRQHandler+0xccc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01d      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7d      	ldr	r2, [pc, #500]	; (8003d4c <HAL_DMA_IRQHandler+0xcd0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d018      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a7b      	ldr	r2, [pc, #492]	; (8003d50 <HAL_DMA_IRQHandler+0xcd4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7a      	ldr	r2, [pc, #488]	; (8003d54 <HAL_DMA_IRQHandler+0xcd8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a78      	ldr	r2, [pc, #480]	; (8003d58 <HAL_DMA_IRQHandler+0xcdc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a77      	ldr	r2, [pc, #476]	; (8003d5c <HAL_DMA_IRQHandler+0xce0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xb12>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <HAL_DMA_IRQHandler+0xce4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0xb24>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0208 	bic.w	r2, r2, #8
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e007      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xb34>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8165 	beq.w	8003e84 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bc2:	e15f      	b.n	8003e84 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2202      	movs	r2, #2
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80c5 	beq.w	8003d64 <HAL_DMA_IRQHandler+0xce8>
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80bf 	beq.w	8003d64 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2202      	movs	r2, #2
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d018      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 813a 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c1c:	e134      	b.n	8003e88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8130 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c30:	e12a      	b.n	8003e88 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d168      	bne.n	8003d0e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <HAL_DMA_IRQHandler+0xca8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d04a      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a37      	ldr	r2, [pc, #220]	; (8003d28 <HAL_DMA_IRQHandler+0xcac>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d045      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a35      	ldr	r2, [pc, #212]	; (8003d2c <HAL_DMA_IRQHandler+0xcb0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d040      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <HAL_DMA_IRQHandler+0xcb4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d03b      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a32      	ldr	r2, [pc, #200]	; (8003d34 <HAL_DMA_IRQHandler+0xcb8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d036      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a31      	ldr	r2, [pc, #196]	; (8003d38 <HAL_DMA_IRQHandler+0xcbc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d031      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2f      	ldr	r2, [pc, #188]	; (8003d3c <HAL_DMA_IRQHandler+0xcc0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02c      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a2e      	ldr	r2, [pc, #184]	; (8003d40 <HAL_DMA_IRQHandler+0xcc4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d027      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <HAL_DMA_IRQHandler+0xcc8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <HAL_DMA_IRQHandler+0xccc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <HAL_DMA_IRQHandler+0xcd0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <HAL_DMA_IRQHandler+0xcd4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_DMA_IRQHandler+0xcd8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <HAL_DMA_IRQHandler+0xcdc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a23      	ldr	r2, [pc, #140]	; (8003d5c <HAL_DMA_IRQHandler+0xce0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xc60>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a22      	ldr	r2, [pc, #136]	; (8003d60 <HAL_DMA_IRQHandler+0xce4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d108      	bne.n	8003cee <HAL_DMA_IRQHandler+0xc72>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0214 	bic.w	r2, r2, #20
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e007      	b.n	8003cfe <HAL_DMA_IRQHandler+0xc82>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 020a 	bic.w	r2, r2, #10
 8003cfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80b8 	beq.w	8003e88 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d20:	e0b2      	b.n	8003e88 <HAL_DMA_IRQHandler+0xe0c>
 8003d22:	bf00      	nop
 8003d24:	40020010 	.word	0x40020010
 8003d28:	40020028 	.word	0x40020028
 8003d2c:	40020040 	.word	0x40020040
 8003d30:	40020058 	.word	0x40020058
 8003d34:	40020070 	.word	0x40020070
 8003d38:	40020088 	.word	0x40020088
 8003d3c:	400200a0 	.word	0x400200a0
 8003d40:	400200b8 	.word	0x400200b8
 8003d44:	40020410 	.word	0x40020410
 8003d48:	40020428 	.word	0x40020428
 8003d4c:	40020440 	.word	0x40020440
 8003d50:	40020458 	.word	0x40020458
 8003d54:	40020470 	.word	0x40020470
 8003d58:	40020488 	.word	0x40020488
 8003d5c:	400204a0 	.word	0x400204a0
 8003d60:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8088 	beq.w	8003e8a <HAL_DMA_IRQHandler+0xe0e>
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8082 	beq.w	8003e8a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a41      	ldr	r2, [pc, #260]	; (8003e90 <HAL_DMA_IRQHandler+0xe14>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04a      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <HAL_DMA_IRQHandler+0xe18>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d045      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3e      	ldr	r2, [pc, #248]	; (8003e98 <HAL_DMA_IRQHandler+0xe1c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d040      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a3c      	ldr	r2, [pc, #240]	; (8003e9c <HAL_DMA_IRQHandler+0xe20>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d03b      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a3b      	ldr	r2, [pc, #236]	; (8003ea0 <HAL_DMA_IRQHandler+0xe24>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d036      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a39      	ldr	r2, [pc, #228]	; (8003ea4 <HAL_DMA_IRQHandler+0xe28>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d031      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a38      	ldr	r2, [pc, #224]	; (8003ea8 <HAL_DMA_IRQHandler+0xe2c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d02c      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a36      	ldr	r2, [pc, #216]	; (8003eac <HAL_DMA_IRQHandler+0xe30>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d027      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a35      	ldr	r2, [pc, #212]	; (8003eb0 <HAL_DMA_IRQHandler+0xe34>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a33      	ldr	r2, [pc, #204]	; (8003eb4 <HAL_DMA_IRQHandler+0xe38>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a32      	ldr	r2, [pc, #200]	; (8003eb8 <HAL_DMA_IRQHandler+0xe3c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a30      	ldr	r2, [pc, #192]	; (8003ebc <HAL_DMA_IRQHandler+0xe40>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <HAL_DMA_IRQHandler+0xe44>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <HAL_DMA_IRQHandler+0xe48>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <HAL_DMA_IRQHandler+0xe4c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xdaa>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <HAL_DMA_IRQHandler+0xe50>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <HAL_DMA_IRQHandler+0xdbc>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 021c 	bic.w	r2, r2, #28
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e007      	b.n	8003e48 <HAL_DMA_IRQHandler+0xdcc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020e 	bic.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2201      	movs	r2, #1
 8003e52:	409a      	lsls	r2, r3
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
 8003e7e:	e004      	b.n	8003e8a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e88:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40020010 	.word	0x40020010
 8003e94:	40020028 	.word	0x40020028
 8003e98:	40020040 	.word	0x40020040
 8003e9c:	40020058 	.word	0x40020058
 8003ea0:	40020070 	.word	0x40020070
 8003ea4:	40020088 	.word	0x40020088
 8003ea8:	400200a0 	.word	0x400200a0
 8003eac:	400200b8 	.word	0x400200b8
 8003eb0:	40020410 	.word	0x40020410
 8003eb4:	40020428 	.word	0x40020428
 8003eb8:	40020440 	.word	0x40020440
 8003ebc:	40020458 	.word	0x40020458
 8003ec0:	40020470 	.word	0x40020470
 8003ec4:	40020488 	.word	0x40020488
 8003ec8:	400204a0 	.word	0x400204a0
 8003ecc:	400204b8 	.word	0x400204b8

08003ed0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ede:	b2db      	uxtb	r3, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <DMA_CalcBaseAndBitshift+0x118>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a41      	ldr	r2, [pc, #260]	; (8004008 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d045      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3f      	ldr	r2, [pc, #252]	; (800400c <DMA_CalcBaseAndBitshift+0x120>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	; (8004010 <DMA_CalcBaseAndBitshift+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d03b      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <DMA_CalcBaseAndBitshift+0x128>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d036      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d031      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a39      	ldr	r2, [pc, #228]	; (800401c <DMA_CalcBaseAndBitshift+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	; (8004020 <DMA_CalcBaseAndBitshift+0x134>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a36      	ldr	r2, [pc, #216]	; (8004024 <DMA_CalcBaseAndBitshift+0x138>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a35      	ldr	r2, [pc, #212]	; (8004028 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a33      	ldr	r2, [pc, #204]	; (800402c <DMA_CalcBaseAndBitshift+0x140>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a32      	ldr	r2, [pc, #200]	; (8004030 <DMA_CalcBaseAndBitshift+0x144>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	; (8004034 <DMA_CalcBaseAndBitshift+0x148>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <DMA_CalcBaseAndBitshift+0x150>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <DMA_CalcBaseAndBitshift+0x154>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <DMA_CalcBaseAndBitshift+0xac>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <DMA_CalcBaseAndBitshift+0xae>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d024      	beq.n	8003fe8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	3b10      	subs	r3, #16
 8003fa6:	4a27      	ldr	r2, [pc, #156]	; (8004044 <DMA_CalcBaseAndBitshift+0x158>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	4a24      	ldr	r2, [pc, #144]	; (8004048 <DMA_CalcBaseAndBitshift+0x15c>)
 8003fb8:	5cd3      	ldrb	r3, [r2, r3]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d908      	bls.n	8003fd8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b1f      	ldr	r3, [pc, #124]	; (800404c <DMA_CalcBaseAndBitshift+0x160>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58
 8003fd6:	e00d      	b.n	8003ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <DMA_CalcBaseAndBitshift+0x160>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe6:	e005      	b.n	8003ff4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40020010 	.word	0x40020010
 8004008:	40020028 	.word	0x40020028
 800400c:	40020040 	.word	0x40020040
 8004010:	40020058 	.word	0x40020058
 8004014:	40020070 	.word	0x40020070
 8004018:	40020088 	.word	0x40020088
 800401c:	400200a0 	.word	0x400200a0
 8004020:	400200b8 	.word	0x400200b8
 8004024:	40020410 	.word	0x40020410
 8004028:	40020428 	.word	0x40020428
 800402c:	40020440 	.word	0x40020440
 8004030:	40020458 	.word	0x40020458
 8004034:	40020470 	.word	0x40020470
 8004038:	40020488 	.word	0x40020488
 800403c:	400204a0 	.word	0x400204a0
 8004040:	400204b8 	.word	0x400204b8
 8004044:	aaaaaaab 	.word	0xaaaaaaab
 8004048:	080158a0 	.word	0x080158a0
 800404c:	fffffc00 	.word	0xfffffc00

08004050 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d120      	bne.n	80040a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004068:	2b03      	cmp	r3, #3
 800406a:	d858      	bhi.n	800411e <DMA_CheckFifoParam+0xce>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <DMA_CheckFifoParam+0x24>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004085 	.word	0x08004085
 8004078:	08004097 	.word	0x08004097
 800407c:	08004085 	.word	0x08004085
 8004080:	0800411f 	.word	0x0800411f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d048      	beq.n	8004122 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004094:	e045      	b.n	8004122 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800409e:	d142      	bne.n	8004126 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040a4:	e03f      	b.n	8004126 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ae:	d123      	bne.n	80040f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d838      	bhi.n	800412a <DMA_CheckFifoParam+0xda>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <DMA_CheckFifoParam+0x70>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040d7 	.word	0x080040d7
 80040c8:	080040d1 	.word	0x080040d1
 80040cc:	080040e9 	.word	0x080040e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
        break;
 80040d4:	e030      	b.n	8004138 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d025      	beq.n	800412e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e6:	e022      	b.n	800412e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040f0:	d11f      	bne.n	8004132 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040f6:	e01c      	b.n	8004132 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d902      	bls.n	8004106 <DMA_CheckFifoParam+0xb6>
 8004100:	2b03      	cmp	r3, #3
 8004102:	d003      	beq.n	800410c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004104:	e018      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
        break;
 800410a:	e015      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
    break;
 800411c:	e00b      	b.n	8004136 <DMA_CheckFifoParam+0xe6>
        break;
 800411e:	bf00      	nop
 8004120:	e00a      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 8004122:	bf00      	nop
 8004124:	e008      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 8004126:	bf00      	nop
 8004128:	e006      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
        break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
    break;
 8004136:	bf00      	nop
    }
  }

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop

08004148 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a38      	ldr	r2, [pc, #224]	; (800423c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d022      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a36      	ldr	r2, [pc, #216]	; (8004240 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01d      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a35      	ldr	r2, [pc, #212]	; (8004244 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d018      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a33      	ldr	r2, [pc, #204]	; (8004248 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a32      	ldr	r2, [pc, #200]	; (800424c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00e      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a30      	ldr	r2, [pc, #192]	; (8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d009      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d004      	beq.n	80041a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01a      	beq.n	80041e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	3b08      	subs	r3, #8
 80041b8:	4a28      	ldr	r2, [pc, #160]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4b26      	ldr	r3, [pc, #152]	; (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a24      	ldr	r2, [pc, #144]	; (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2201      	movs	r2, #1
 80041de:	409a      	lsls	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80041e4:	e024      	b.n	8004230 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3b10      	subs	r3, #16
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	; (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d806      	bhi.n	800420e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d902      	bls.n	800420e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	3308      	adds	r3, #8
 800420c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4b18      	ldr	r3, [pc, #96]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	461a      	mov	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a16      	ldr	r2, [pc, #88]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004220:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2201      	movs	r2, #1
 800422a:	409a      	lsls	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	58025408 	.word	0x58025408
 8004240:	5802541c 	.word	0x5802541c
 8004244:	58025430 	.word	0x58025430
 8004248:	58025444 	.word	0x58025444
 800424c:	58025458 	.word	0x58025458
 8004250:	5802546c 	.word	0x5802546c
 8004254:	58025480 	.word	0x58025480
 8004258:	58025494 	.word	0x58025494
 800425c:	cccccccd 	.word	0xcccccccd
 8004260:	16009600 	.word	0x16009600
 8004264:	58025880 	.word	0x58025880
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	400204b8 	.word	0x400204b8
 8004270:	4002040f 	.word	0x4002040f
 8004274:	10008200 	.word	0x10008200
 8004278:	40020880 	.word	0x40020880

0800427c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d04a      	beq.n	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d847      	bhi.n	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a24      	ldr	r2, [pc, #144]	; (8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d01d      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a22      	ldr	r2, [pc, #136]	; (800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	; (8004340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1f      	ldr	r2, [pc, #124]	; (8004344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d101      	bne.n	80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004304:	671a      	str	r2, [r3, #112]	; 0x70
 8004306:	e009      	b.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	461a      	mov	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a11      	ldr	r2, [pc, #68]	; (8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800431a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3b01      	subs	r3, #1
 8004320:	2201      	movs	r2, #1
 8004322:	409a      	lsls	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	58025408 	.word	0x58025408
 8004338:	5802541c 	.word	0x5802541c
 800433c:	58025430 	.word	0x58025430
 8004340:	58025444 	.word	0x58025444
 8004344:	58025458 	.word	0x58025458
 8004348:	5802546c 	.word	0x5802546c
 800434c:	58025480 	.word	0x58025480
 8004350:	58025494 	.word	0x58025494
 8004354:	1600963f 	.word	0x1600963f
 8004358:	58025940 	.word	0x58025940
 800435c:	1000823f 	.word	0x1000823f
 8004360:	40020940 	.word	0x40020940

08004364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	; 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004372:	4b89      	ldr	r3, [pc, #548]	; (8004598 <HAL_GPIO_Init+0x234>)
 8004374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004376:	e194      	b.n	80046a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2101      	movs	r1, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8186 	beq.w	800469c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d00b      	beq.n	80043b0 <HAL_GPIO_Init+0x4c>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d007      	beq.n	80043b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043a4:	2b11      	cmp	r3, #17
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b12      	cmp	r3, #18
 80043ae:	d130      	bne.n	8004412 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	2203      	movs	r2, #3
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	43db      	mvns	r3, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043e6:	2201      	movs	r2, #1
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	f003 0201 	and.w	r2, r3, #1
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	2203      	movs	r2, #3
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d003      	beq.n	8004452 <HAL_GPIO_Init+0xee>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b12      	cmp	r3, #18
 8004450:	d123      	bne.n	800449a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	08da      	lsrs	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3208      	adds	r2, #8
 800445a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	08da      	lsrs	r2, r3, #3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3208      	adds	r2, #8
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80e0 	beq.w	800469c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044dc:	4b2f      	ldr	r3, [pc, #188]	; (800459c <HAL_GPIO_Init+0x238>)
 80044de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044e2:	4a2e      	ldr	r2, [pc, #184]	; (800459c <HAL_GPIO_Init+0x238>)
 80044e4:	f043 0302 	orr.w	r3, r3, #2
 80044e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_GPIO_Init+0x238>)
 80044ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044fa:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <HAL_GPIO_Init+0x23c>)
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a20      	ldr	r2, [pc, #128]	; (80045a4 <HAL_GPIO_Init+0x240>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d052      	beq.n	80045cc <HAL_GPIO_Init+0x268>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <HAL_GPIO_Init+0x244>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d031      	beq.n	8004592 <HAL_GPIO_Init+0x22e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <HAL_GPIO_Init+0x248>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02b      	beq.n	800458e <HAL_GPIO_Init+0x22a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_GPIO_Init+0x24c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d025      	beq.n	800458a <HAL_GPIO_Init+0x226>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <HAL_GPIO_Init+0x250>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d01f      	beq.n	8004586 <HAL_GPIO_Init+0x222>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_GPIO_Init+0x254>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d019      	beq.n	8004582 <HAL_GPIO_Init+0x21e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <HAL_GPIO_Init+0x258>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_GPIO_Init+0x21a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_GPIO_Init+0x25c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_GPIO_Init+0x216>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_GPIO_Init+0x260>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <HAL_GPIO_Init+0x212>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <HAL_GPIO_Init+0x264>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d101      	bne.n	8004572 <HAL_GPIO_Init+0x20e>
 800456e:	2309      	movs	r3, #9
 8004570:	e02d      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004572:	230a      	movs	r3, #10
 8004574:	e02b      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004576:	2308      	movs	r3, #8
 8004578:	e029      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800457a:	2307      	movs	r3, #7
 800457c:	e027      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800457e:	2306      	movs	r3, #6
 8004580:	e025      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004582:	2305      	movs	r3, #5
 8004584:	e023      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004586:	2304      	movs	r3, #4
 8004588:	e021      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800458a:	2303      	movs	r3, #3
 800458c:	e01f      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 800458e:	2302      	movs	r3, #2
 8004590:	e01d      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004592:	2301      	movs	r3, #1
 8004594:	e01b      	b.n	80045ce <HAL_GPIO_Init+0x26a>
 8004596:	bf00      	nop
 8004598:	58000080 	.word	0x58000080
 800459c:	58024400 	.word	0x58024400
 80045a0:	58000400 	.word	0x58000400
 80045a4:	58020000 	.word	0x58020000
 80045a8:	58020400 	.word	0x58020400
 80045ac:	58020800 	.word	0x58020800
 80045b0:	58020c00 	.word	0x58020c00
 80045b4:	58021000 	.word	0x58021000
 80045b8:	58021400 	.word	0x58021400
 80045bc:	58021800 	.word	0x58021800
 80045c0:	58021c00 	.word	0x58021c00
 80045c4:	58022000 	.word	0x58022000
 80045c8:	58022400 	.word	0x58022400
 80045cc:	2300      	movs	r3, #0
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	f002 0203 	and.w	r2, r2, #3
 80045d4:	0092      	lsls	r2, r2, #2
 80045d6:	4093      	lsls	r3, r2
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045de:	4938      	ldr	r1, [pc, #224]	; (80046c0 <HAL_GPIO_Init+0x35c>)
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	3302      	adds	r3, #2
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f ae63 	bne.w	8004378 <HAL_GPIO_Init+0x14>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	3724      	adds	r7, #36	; 0x24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	58000400 	.word	0x58000400

080046c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
 80046d0:	4613      	mov	r3, r2
 80046d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046d4:	787b      	ldrb	r3, [r7, #1]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80046e0:	e003      	b.n	80046ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046e2:	887b      	ldrh	r3, [r7, #2]
 80046e4:	041a      	lsls	r2, r3, #16
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	619a      	str	r2, [r3, #24]
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_HSEM_FastTake+0x2c>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3320      	adds	r3, #32
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	4a07      	ldr	r2, [pc, #28]	; (8004728 <HAL_HSEM_FastTake+0x30>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d101      	bne.n	8004714 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58026400 	.word	0x58026400
 8004728:	80000300 	.word	0x80000300

0800472c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004736:	4906      	ldr	r1, [pc, #24]	; (8004750 <HAL_HSEM_Release+0x24>)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	58026400 	.word	0x58026400

08004754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07f      	b.n	8004866 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fc f96a 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	; 0x24
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	e006      	b.n	80047dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d104      	bne.n	80047ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <HAL_I2C_Init+0x11c>)
 80047fa:	430b      	orrs	r3, r1
 80047fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800480c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	ea42 0103 	orr.w	r1, r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	69d9      	ldr	r1, [r3, #28]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	02008000 	.word	0x02008000

08004874 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
  }
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	0a1b      	lsrs	r3, r3, #8
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d010      	beq.n	80048ee <HAL_I2C_ER_IRQHandler+0x46>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	09db      	lsrs	r3, r3, #7
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	f043 0201 	orr.w	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	0a9b      	lsrs	r3, r3, #10
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <HAL_I2C_ER_IRQHandler+0x74>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	09db      	lsrs	r3, r3, #7
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	f043 0208 	orr.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	0a5b      	lsrs	r3, r3, #9
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <HAL_I2C_ER_IRQHandler+0xa2>
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	09db      	lsrs	r3, r3, #7
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004938:	f043 0202 	orr.w	r2, r3, #2
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004948:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 030b 	and.w	r3, r3, #11
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fc77 	bl	8005250 <I2C_ITError>
  }
}
 8004962:	bf00      	nop
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	70fb      	strb	r3, [r7, #3]
 800499e:	4613      	mov	r3, r2
 80049a0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <I2C_Slave_ISR_IT+0x24>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0ec      	b.n	8004be8 <I2C_Slave_ISR_IT+0x1fe>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <I2C_Slave_ISR_IT+0x4c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	095b      	lsrs	r3, r3, #5
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004a2e:	6939      	ldr	r1, [r7, #16]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f9bf 	bl	8004db4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04d      	beq.n	8004ade <I2C_Slave_ISR_IT+0xf4>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d047      	beq.n	8004ade <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d128      	bne.n	8004aaa <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b28      	cmp	r3, #40	; 0x28
 8004a62:	d108      	bne.n	8004a76 <I2C_Slave_ISR_IT+0x8c>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a6a:	d104      	bne.n	8004a76 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a6c:	6939      	ldr	r1, [r7, #16]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fb98 	bl	80051a4 <I2C_ITListenCplt>
 8004a74:	e032      	b.n	8004adc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b29      	cmp	r3, #41	; 0x29
 8004a80:	d10e      	bne.n	8004aa0 <I2C_Slave_ISR_IT+0xb6>
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a88:	d00a      	beq.n	8004aa0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2210      	movs	r2, #16
 8004a90:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fcd3 	bl	800543e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f92d 	bl	8004cf8 <I2C_ITSlaveSeqCplt>
 8004a9e:	e01d      	b.n	8004adc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004aa8:	e096      	b.n	8004bd8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <I2C_Slave_ISR_IT+0xe4>
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aca:	f040 8085 	bne.w	8004bd8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fbbb 	bl	8005250 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004ada:	e07d      	b.n	8004bd8 <I2C_Slave_ISR_IT+0x1ee>
 8004adc:	e07c      	b.n	8004bd8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	089b      	lsrs	r3, r3, #2
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d030      	beq.n	8004b4c <I2C_Slave_ISR_IT+0x162>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d02a      	beq.n	8004b4c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d018      	beq.n	8004b32 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d14f      	bne.n	8004bdc <I2C_Slave_ISR_IT+0x1f2>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b42:	d04b      	beq.n	8004bdc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f8d7 	bl	8004cf8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004b4a:	e047      	b.n	8004bdc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	08db      	lsrs	r3, r3, #3
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	08db      	lsrs	r3, r3, #3
 8004b5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d004      	beq.n	8004b6e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004b64:	6939      	ldr	r1, [r7, #16]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f842 	bl	8004bf0 <I2C_ITAddrCplt>
 8004b6c:	e037      	b.n	8004bde <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d031      	beq.n	8004bde <I2C_Slave_ISR_IT+0x1f4>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d02b      	beq.n	8004bde <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d018      	beq.n	8004bc2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004bc0:	e00d      	b.n	8004bde <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bc8:	d002      	beq.n	8004bd0 <I2C_Slave_ISR_IT+0x1e6>
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f891 	bl	8004cf8 <I2C_ITSlaveSeqCplt>
 8004bd6:	e002      	b.n	8004bde <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004bd8:	bf00      	nop
 8004bda:	e000      	b.n	8004bde <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004bdc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c06:	2b28      	cmp	r3, #40	; 0x28
 8004c08:	d16a      	bne.n	8004ce0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	0c1b      	lsrs	r3, r3, #16
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c28:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c36:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004c44:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d138      	bne.n	8004cc0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004c4e:	897b      	ldrh	r3, [r7, #10]
 8004c50:	09db      	lsrs	r3, r3, #7
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	89bb      	ldrh	r3, [r7, #12]
 8004c56:	4053      	eors	r3, r2
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f003 0306 	and.w	r3, r3, #6
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11c      	bne.n	8004c9c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d13b      	bne.n	8004cf0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2208      	movs	r2, #8
 8004c84:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c8e:	89ba      	ldrh	r2, [r7, #12]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fe7c 	bl	8004992 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c9a:	e029      	b.n	8004cf0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004c9c:	893b      	ldrh	r3, [r7, #8]
 8004c9e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ca0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fc0c 	bl	80054c2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cb2:	89ba      	ldrh	r2, [r7, #12]
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fe6a 	bl	8004992 <HAL_I2C_AddrCallback>
}
 8004cbe:	e017      	b.n	8004cf0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fbfc 	bl	80054c2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cd2:	89ba      	ldrh	r2, [r7, #12]
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fe5a 	bl	8004992 <HAL_I2C_AddrCallback>
}
 8004cde:	e007      	b.n	8004cf0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	0b9b      	lsrs	r3, r3, #14
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e00d      	b.n	8004d4a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	0bdb      	lsrs	r3, r3, #15
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d48:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b29      	cmp	r3, #41	; 0x29
 8004d54:	d112      	bne.n	8004d7c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2228      	movs	r2, #40	; 0x28
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2221      	movs	r2, #33	; 0x21
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d64:	2101      	movs	r1, #1
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fbab 	bl	80054c2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff fdf8 	bl	800496a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d7a:	e017      	b.n	8004dac <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b2a      	cmp	r3, #42	; 0x2a
 8004d86:	d111      	bne.n	8004dac <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2228      	movs	r2, #40	; 0x28
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2222      	movs	r2, #34	; 0x22
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d96:	2102      	movs	r1, #2
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb92 	bl	80054c2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff fde9 	bl	800497e <HAL_I2C_SlaveRxCpltCallback>
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b21      	cmp	r3, #33	; 0x21
 8004dde:	d002      	beq.n	8004de6 <I2C_ITSlaveCplt+0x32>
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b29      	cmp	r3, #41	; 0x29
 8004de4:	d108      	bne.n	8004df8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004de6:	f248 0101 	movw	r1, #32769	; 0x8001
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fb69 	bl	80054c2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2221      	movs	r2, #33	; 0x21
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
 8004df6:	e00d      	b.n	8004e14 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	2b22      	cmp	r3, #34	; 0x22
 8004dfc:	d002      	beq.n	8004e04 <I2C_ITSlaveCplt+0x50>
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b2a      	cmp	r3, #42	; 0x2a
 8004e02:	d107      	bne.n	8004e14 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004e04:	f248 0102 	movw	r1, #32770	; 0x8002
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb5a 	bl	80054c2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2222      	movs	r2, #34	; 0x22
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e22:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b80      	ldr	r3, [pc, #512]	; (8005030 <I2C_ITSlaveCplt+0x27c>)
 8004e30:	400b      	ands	r3, r1
 8004e32:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb02 	bl	800543e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	0b9b      	lsrs	r3, r3, #14
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d07a      	beq.n	8004f3c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e54:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8111 	beq.w	8005082 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a73      	ldr	r2, [pc, #460]	; (8005034 <I2C_ITSlaveCplt+0x280>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d059      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a71      	ldr	r2, [pc, #452]	; (8005038 <I2C_ITSlaveCplt+0x284>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d053      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a6f      	ldr	r2, [pc, #444]	; (800503c <I2C_ITSlaveCplt+0x288>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d04d      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6d      	ldr	r2, [pc, #436]	; (8005040 <I2C_ITSlaveCplt+0x28c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d047      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6b      	ldr	r2, [pc, #428]	; (8005044 <I2C_ITSlaveCplt+0x290>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d041      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a69      	ldr	r2, [pc, #420]	; (8005048 <I2C_ITSlaveCplt+0x294>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d03b      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a67      	ldr	r2, [pc, #412]	; (800504c <I2C_ITSlaveCplt+0x298>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d035      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a65      	ldr	r2, [pc, #404]	; (8005050 <I2C_ITSlaveCplt+0x29c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d02f      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a63      	ldr	r2, [pc, #396]	; (8005054 <I2C_ITSlaveCplt+0x2a0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d029      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a61      	ldr	r2, [pc, #388]	; (8005058 <I2C_ITSlaveCplt+0x2a4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d023      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a5f      	ldr	r2, [pc, #380]	; (800505c <I2C_ITSlaveCplt+0x2a8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d01d      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a5d      	ldr	r2, [pc, #372]	; (8005060 <I2C_ITSlaveCplt+0x2ac>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d017      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a5b      	ldr	r2, [pc, #364]	; (8005064 <I2C_ITSlaveCplt+0x2b0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d011      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a59      	ldr	r2, [pc, #356]	; (8005068 <I2C_ITSlaveCplt+0x2b4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a57      	ldr	r2, [pc, #348]	; (800506c <I2C_ITSlaveCplt+0x2b8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d005      	beq.n	8004f20 <I2C_ITSlaveCplt+0x16c>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a55      	ldr	r2, [pc, #340]	; (8005070 <I2C_ITSlaveCplt+0x2bc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d105      	bne.n	8004f2c <I2C_ITSlaveCplt+0x178>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	e004      	b.n	8004f36 <I2C_ITSlaveCplt+0x182>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004f3a:	e0a2      	b.n	8005082 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	0bdb      	lsrs	r3, r3, #15
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 809c 	beq.w	8005082 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 808f 	beq.w	8005082 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a32      	ldr	r2, [pc, #200]	; (8005034 <I2C_ITSlaveCplt+0x280>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d059      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a30      	ldr	r2, [pc, #192]	; (8005038 <I2C_ITSlaveCplt+0x284>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d053      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2e      	ldr	r2, [pc, #184]	; (800503c <I2C_ITSlaveCplt+0x288>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d04d      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2c      	ldr	r2, [pc, #176]	; (8005040 <I2C_ITSlaveCplt+0x28c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d047      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <I2C_ITSlaveCplt+0x290>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d041      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a28      	ldr	r2, [pc, #160]	; (8005048 <I2C_ITSlaveCplt+0x294>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d03b      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	; (800504c <I2C_ITSlaveCplt+0x298>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d035      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a24      	ldr	r2, [pc, #144]	; (8005050 <I2C_ITSlaveCplt+0x29c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d02f      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a22      	ldr	r2, [pc, #136]	; (8005054 <I2C_ITSlaveCplt+0x2a0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d029      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a20      	ldr	r2, [pc, #128]	; (8005058 <I2C_ITSlaveCplt+0x2a4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d023      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	; (800505c <I2C_ITSlaveCplt+0x2a8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d01d      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <I2C_ITSlaveCplt+0x2ac>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d017      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <I2C_ITSlaveCplt+0x2b0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d011      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a18      	ldr	r2, [pc, #96]	; (8005068 <I2C_ITSlaveCplt+0x2b4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <I2C_ITSlaveCplt+0x2b8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d005      	beq.n	8005024 <I2C_ITSlaveCplt+0x270>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a14      	ldr	r2, [pc, #80]	; (8005070 <I2C_ITSlaveCplt+0x2bc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d127      	bne.n	8005074 <I2C_ITSlaveCplt+0x2c0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	b29b      	uxth	r3, r3
 800502e:	e026      	b.n	800507e <I2C_ITSlaveCplt+0x2ca>
 8005030:	fe00e800 	.word	0xfe00e800
 8005034:	40020010 	.word	0x40020010
 8005038:	40020028 	.word	0x40020028
 800503c:	40020040 	.word	0x40020040
 8005040:	40020058 	.word	0x40020058
 8005044:	40020070 	.word	0x40020070
 8005048:	40020088 	.word	0x40020088
 800504c:	400200a0 	.word	0x400200a0
 8005050:	400200b8 	.word	0x400200b8
 8005054:	40020410 	.word	0x40020410
 8005058:	40020428 	.word	0x40020428
 800505c:	40020440 	.word	0x40020440
 8005060:	40020458 	.word	0x40020458
 8005064:	40020470 	.word	0x40020470
 8005068:	40020488 	.word	0x40020488
 800506c:	400204a0 	.word	0x400204a0
 8005070:	400204b8 	.word	0x400204b8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	b29b      	uxth	r3, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d020      	beq.n	80050d0 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 0304 	bic.w	r3, r3, #4
 8005094:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f043 0204 	orr.w	r2, r3, #4
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d010      	beq.n	800511e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8a4 	bl	8005250 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b28      	cmp	r3, #40	; 0x28
 8005112:	d141      	bne.n	8005198 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005114:	6979      	ldr	r1, [r7, #20]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f844 	bl	80051a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800511c:	e03c      	b.n	8005198 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005126:	d014      	beq.n	8005152 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fde5 	bl	8004cf8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <I2C_ITSlaveCplt+0x3ec>)
 8005132:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7ff fc2f 	bl	80049ae <HAL_I2C_ListenCpltCallback>
}
 8005150:	e022      	b.n	8005198 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b22      	cmp	r3, #34	; 0x22
 800515c:	d10e      	bne.n	800517c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff fc02 	bl	800497e <HAL_I2C_SlaveRxCpltCallback>
}
 800517a:	e00d      	b.n	8005198 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fbe9 	bl	800496a <HAL_I2C_SlaveTxCpltCallback>
}
 8005198:	bf00      	nop
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	ffff0000 	.word	0xffff0000

080051a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a26      	ldr	r2, [pc, #152]	; (800524c <I2C_ITListenCplt+0xa8>)
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	089b      	lsrs	r3, r3, #2
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d022      	beq.n	8005222 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f043 0204 	orr.w	r2, r3, #4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005222:	f248 0103 	movw	r1, #32771	; 0x8003
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f94b 	bl	80054c2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2210      	movs	r2, #16
 8005232:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff fbb6 	bl	80049ae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	ffff0000 	.word	0xffff0000

08005250 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005260:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a5d      	ldr	r2, [pc, #372]	; (80053e4 <I2C_ITError+0x194>)
 800526e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b28      	cmp	r3, #40	; 0x28
 8005286:	d005      	beq.n	8005294 <I2C_ITError+0x44>
 8005288:	7bfb      	ldrb	r3, [r7, #15]
 800528a:	2b29      	cmp	r3, #41	; 0x29
 800528c:	d002      	beq.n	8005294 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	2b2a      	cmp	r3, #42	; 0x2a
 8005292:	d10b      	bne.n	80052ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005294:	2103      	movs	r1, #3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f913 	bl	80054c2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2228      	movs	r2, #40	; 0x28
 80052a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a50      	ldr	r2, [pc, #320]	; (80053e8 <I2C_ITError+0x198>)
 80052a8:	635a      	str	r2, [r3, #52]	; 0x34
 80052aa:	e011      	b.n	80052d0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80052ac:	f248 0103 	movw	r1, #32771	; 0x8003
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f906 	bl	80054c2 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b60      	cmp	r3, #96	; 0x60
 80052c0:	d003      	beq.n	80052ca <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d039      	beq.n	8005352 <I2C_ITError+0x102>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b11      	cmp	r3, #17
 80052e2:	d002      	beq.n	80052ea <I2C_ITError+0x9a>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b21      	cmp	r3, #33	; 0x21
 80052e8:	d133      	bne.n	8005352 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f8:	d107      	bne.n	800530a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005308:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fdde 	bl	8003ed0 <HAL_DMA_GetState>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d017      	beq.n	800534a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	4a33      	ldr	r2, [pc, #204]	; (80053ec <I2C_ITError+0x19c>)
 8005320:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	4618      	mov	r0, r3
 8005330:	f7fd fc60 	bl	8002bf4 <HAL_DMA_Abort_IT>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d04d      	beq.n	80053d6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005344:	4610      	mov	r0, r2
 8005346:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005348:	e045      	b.n	80053d6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f850 	bl	80053f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005350:	e041      	b.n	80053d6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d039      	beq.n	80053ce <I2C_ITError+0x17e>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b12      	cmp	r3, #18
 800535e:	d002      	beq.n	8005366 <I2C_ITError+0x116>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b22      	cmp	r3, #34	; 0x22
 8005364:	d133      	bne.n	80053ce <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005374:	d107      	bne.n	8005386 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005384:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fda0 	bl	8003ed0 <HAL_DMA_GetState>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d017      	beq.n	80053c6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <I2C_ITError+0x19c>)
 800539c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fd fc22 	bl	8002bf4 <HAL_DMA_Abort_IT>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d011      	beq.n	80053da <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053c0:	4610      	mov	r0, r2
 80053c2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053c4:	e009      	b.n	80053da <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f812 	bl	80053f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053cc:	e005      	b.n	80053da <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f80e 	bl	80053f0 <I2C_TreatErrorCallback>
  }
}
 80053d4:	e002      	b.n	80053dc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053d6:	bf00      	nop
 80053d8:	e000      	b.n	80053dc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053da:	bf00      	nop
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	ffff0000 	.word	0xffff0000
 80053e8:	080049eb 	.word	0x080049eb
 80053ec:	08005487 	.word	0x08005487

080053f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b60      	cmp	r3, #96	; 0x60
 8005402:	d10e      	bne.n	8005422 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff fadb 	bl	80049d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005420:	e009      	b.n	8005436 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fac6 	bl	80049c2 <HAL_I2C_ErrorCallback>
}
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d103      	bne.n	800545c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d007      	beq.n	800547a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	619a      	str	r2, [r3, #24]
  }
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a0:	2200      	movs	r2, #0
 80054a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b0:	2200      	movs	r2, #0
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff ff9b 	bl	80053f0 <I2C_TreatErrorCallback>
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00f      	beq.n	80054fc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80054e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054f0:	2b28      	cmp	r3, #40	; 0x28
 80054f2:	d003      	beq.n	80054fc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80054fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00f      	beq.n	8005526 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800550c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800551a:	2b28      	cmp	r3, #40	; 0x28
 800551c:	d003      	beq.n	8005526 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005524:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005526:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800552a:	2b00      	cmp	r3, #0
 800552c:	da03      	bge.n	8005536 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005534:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005536:	887b      	ldrh	r3, [r7, #2]
 8005538:	2b10      	cmp	r3, #16
 800553a:	d103      	bne.n	8005544 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005542:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	2b20      	cmp	r3, #32
 8005548:	d103      	bne.n	8005552 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f043 0320 	orr.w	r3, r3, #32
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	2b40      	cmp	r3, #64	; 0x40
 8005556:	d103      	bne.n	8005560 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	43da      	mvns	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	400a      	ands	r2, r1
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	d138      	bne.n	8005606 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800559e:	2302      	movs	r3, #2
 80055a0:	e032      	b.n	8005608 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2224      	movs	r2, #36	; 0x24
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6819      	ldr	r1, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b20      	cmp	r3, #32
 8005628:	d139      	bne.n	800569e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005634:	2302      	movs	r3, #2
 8005636:	e033      	b.n	80056a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2224      	movs	r2, #36	; 0x24
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005666:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ae:	b08f      	sub	sp, #60	; 0x3c
 80056b0:	af0a      	add	r7, sp, #40	; 0x28
 80056b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e116      	b.n	80058ec <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f00c ff47 	bl	801256c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2203      	movs	r2, #3
 80056e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f009 fb58 	bl	800edb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	603b      	str	r3, [r7, #0]
 8005708:	687e      	ldr	r6, [r7, #4]
 800570a:	466d      	mov	r5, sp
 800570c:	f106 0410 	add.w	r4, r6, #16
 8005710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005712:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005718:	e894 0003 	ldmia.w	r4, {r0, r1}
 800571c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005720:	1d33      	adds	r3, r6, #4
 8005722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005724:	6838      	ldr	r0, [r7, #0]
 8005726:	f009 fa23 	bl	800eb70 <USB_CoreInit>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0d7      	b.n	80058ec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f009 fb46 	bl	800edd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005748:	2300      	movs	r3, #0
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e04a      	b.n	80057e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	333d      	adds	r3, #61	; 0x3d
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005762:	7bfa      	ldrb	r2, [r7, #15]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	1a9b      	subs	r3, r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	333c      	adds	r3, #60	; 0x3c
 8005772:	7bfa      	ldrb	r2, [r7, #15]
 8005774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	b298      	uxth	r0, r3
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	3342      	adds	r3, #66	; 0x42
 800578a:	4602      	mov	r2, r0
 800578c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800578e:	7bfa      	ldrb	r2, [r7, #15]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	333f      	adds	r3, #63	; 0x3f
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057a2:	7bfa      	ldrb	r2, [r7, #15]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3344      	adds	r3, #68	; 0x44
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80057b6:	7bfa      	ldrb	r2, [r7, #15]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	3348      	adds	r3, #72	; 0x48
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80057ca:	7bfa      	ldrb	r2, [r7, #15]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3350      	adds	r3, #80	; 0x50
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	3301      	adds	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d3af      	bcc.n	800574e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]
 80057f2:	e044      	b.n	800587e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057f4:	7bfa      	ldrb	r2, [r7, #15]
 80057f6:	6879      	ldr	r1, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800581c:	7bfa      	ldrb	r2, [r7, #15]
 800581e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005836:	7bfa      	ldrb	r2, [r7, #15]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800584c:	7bfa      	ldrb	r2, [r7, #15]
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005862:	7bfa      	ldrb	r2, [r7, #15]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	3301      	adds	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
 800587e:	7bfa      	ldrb	r2, [r7, #15]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	429a      	cmp	r2, r3
 8005886:	d3b5      	bcc.n	80057f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	687e      	ldr	r6, [r7, #4]
 8005890:	466d      	mov	r5, sp
 8005892:	f106 0410 	add.w	r4, r6, #16
 8005896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800589a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800589c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800589e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80058a6:	1d33      	adds	r3, r6, #4
 80058a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058aa:	6838      	ldr	r0, [r7, #0]
 80058ac:	f009 fabc 	bl	800ee28 <USB_DevInit>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e014      	b.n	80058ec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d102      	bne.n	80058e0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 f892 	bl	8006a04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f00a fb3c 	bl	800ff62 <USB_DevDisconnect>

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_PCD_Start+0x1c>
 800590c:	2302      	movs	r3, #2
 800590e:	e020      	b.n	8005952 <HAL_PCD_Start+0x5e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	2b01      	cmp	r3, #1
 800591e:	d109      	bne.n	8005934 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005924:	2b01      	cmp	r3, #1
 8005926:	d005      	beq.n	8005934 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f009 fa29 	bl	800ed90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f00a faec 	bl	800ff20 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800595a:	b590      	push	{r4, r7, lr}
 800595c:	b08d      	sub	sp, #52	; 0x34
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f00a fbaa 	bl	80100ca <USB_GetMode>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 83ca 	bne.w	8006112 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f00a fb0e 	bl	800ffa4 <USB_ReadInterrupts>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 83c0 	beq.w	8006110 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f00a fb05 	bl	800ffa4 <USB_ReadInterrupts>
 800599a:	4603      	mov	r3, r0
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d107      	bne.n	80059b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f002 0202 	and.w	r2, r2, #2
 80059b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f00a faf3 	bl	800ffa4 <USB_ReadInterrupts>
 80059be:	4603      	mov	r3, r0
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d161      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0210 	bic.w	r2, r2, #16
 80059d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f003 020f 	and.w	r2, r3, #15
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4413      	add	r3, r2
 80059f4:	3304      	adds	r3, #4
 80059f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	0c5b      	lsrs	r3, r3, #17
 80059fc:	f003 030f 	and.w	r3, r3, #15
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d124      	bne.n	8005a4e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d035      	beq.n	8005a7c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	6a38      	ldr	r0, [r7, #32]
 8005a24:	f00a f92a 	bl	800fc7c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a34:	441a      	add	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a46:	441a      	add	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	619a      	str	r2, [r3, #24]
 8005a4c:	e016      	b.n	8005a7c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	0c5b      	lsrs	r3, r3, #17
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d110      	bne.n	8005a7c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a60:	2208      	movs	r2, #8
 8005a62:	4619      	mov	r1, r3
 8005a64:	6a38      	ldr	r0, [r7, #32]
 8005a66:	f00a f909 	bl	800fc7c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a76:	441a      	add	r2, r3
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0210 	orr.w	r2, r2, #16
 8005a8a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f00a fa87 	bl	800ffa4 <USB_ReadInterrupts>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005aa0:	d16e      	bne.n	8005b80 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f00a fa8d 	bl	800ffca <USB_ReadDevAllOutEpInterrupt>
 8005ab0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ab2:	e062      	b.n	8005b7a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d057      	beq.n	8005b6e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f00a fab2 	bl	8010032 <USB_ReadDevOutEPInterrupt>
 8005ace:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2301      	movs	r3, #1
 8005aea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fdde 	bl	80066b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fed8 	bl	80068c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2310      	movs	r3, #16
 8005b32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b66:	461a      	mov	r2, r3
 8005b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	3301      	adds	r3, #1
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d199      	bne.n	8005ab4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f00a fa0d 	bl	800ffa4 <USB_ReadInterrupts>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b94:	f040 80c0 	bne.w	8005d18 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f00a fa2e 	bl	800fffe <USB_ReadDevAllInEpInterrupt>
 8005ba2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ba8:	e0b2      	b.n	8005d10 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80a7 	beq.w	8005d04 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f00a fa54 	bl	801006e <USB_ReadDevInEPInterrupt>
 8005bc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d057      	beq.n	8005c82 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	2201      	movs	r2, #1
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	43db      	mvns	r3, r3
 8005bec:	69f9      	ldr	r1, [r7, #28]
 8005bee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	461a      	mov	r2, r3
 8005c04:	2301      	movs	r3, #1
 8005c06:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d132      	bne.n	8005c76 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	3348      	adds	r3, #72	; 0x48
 8005c20:	6819      	ldr	r1, [r3, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4403      	add	r3, r0
 8005c30:	3344      	adds	r3, #68	; 0x44
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4419      	add	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4403      	add	r3, r0
 8005c44:	3348      	adds	r3, #72	; 0x48
 8005c46:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d113      	bne.n	8005c76 <HAL_PCD_IRQHandler+0x31c>
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	3350      	adds	r3, #80	; 0x50
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d108      	bne.n	8005c76 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2101      	movs	r1, #1
 8005c72:	f00a fa5d 	bl	8010130 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f00c fd12 	bl	80126a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d008      	beq.n	8005c9e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d008      	beq.n	8005cba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	2340      	movs	r3, #64	; 0x40
 8005cd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	461a      	mov	r2, r3
 8005cee:	2302      	movs	r3, #2
 8005cf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fc48 	bl	8006594 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	3301      	adds	r3, #1
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f47f af49 	bne.w	8005baa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f00a f941 	bl	800ffa4 <USB_ReadInterrupts>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d2c:	d122      	bne.n	8005d74 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d108      	bne.n	8005d5e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d54:	2100      	movs	r1, #0
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fe78 	bl	8006a4c <HAL_PCDEx_LPM_Callback>
 8005d5c:	e002      	b.n	8005d64 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f00c fd18 	bl	8012794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f00a f913 	bl	800ffa4 <USB_ReadInterrupts>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d88:	d112      	bne.n	8005db0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d102      	bne.n	8005da0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f00c fcd4 	bl	8012748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695a      	ldr	r2, [r3, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f00a f8f5 	bl	800ffa4 <USB_ReadInterrupts>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc4:	d121      	bne.n	8005e0a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005dd4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d111      	bne.n	8005e04 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fe25 	bl	8006a4c <HAL_PCDEx_LPM_Callback>
 8005e02:	e002      	b.n	8005e0a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f00c fc9f 	bl	8012748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f00a f8c8 	bl	800ffa4 <USB_ReadInterrupts>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1e:	f040 80c7 	bne.w	8005fb0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2110      	movs	r1, #16
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f009 f951 	bl	800f0e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e46:	e056      	b.n	8005ef6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	461a      	mov	r2, r3
 8005e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ece:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d3a3      	bcc.n	8005e48 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d016      	beq.n	8005f4a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f2c:	f043 030b 	orr.w	r3, r3, #11
 8005f30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f42:	f043 030b 	orr.w	r3, r3, #11
 8005f46:	6453      	str	r3, [r2, #68]	; 0x44
 8005f48:	e015      	b.n	8005f76 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f242 032b 	movw	r3, #8235	; 0x202b
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f70:	f043 030b 	orr.w	r3, r3, #11
 8005f74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f00a f8c8 	bl	8010130 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f009 fff5 	bl	800ffa4 <USB_ReadInterrupts>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc4:	d124      	bne.n	8006010 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f00a f88c 	bl	80100e8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f009 f8e6 	bl	800f1a6 <USB_GetDevSpeed>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	461a      	mov	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681c      	ldr	r4, [r3, #0]
 8005fe6:	f001 fce7 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 8005fea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f008 fe29 	bl	800ec4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f00c fb7b 	bl	80126f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800600e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f009 ffc5 	bl	800ffa4 <USB_ReadInterrupts>
 800601a:	4603      	mov	r3, r0
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b08      	cmp	r3, #8
 8006022:	d10a      	bne.n	800603a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f00c fb58 	bl	80126da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695a      	ldr	r2, [r3, #20]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f002 0208 	and.w	r2, r2, #8
 8006038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4618      	mov	r0, r3
 8006040:	f009 ffb0 	bl	800ffa4 <USB_ReadInterrupts>
 8006044:	4603      	mov	r3, r0
 8006046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800604a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604e:	d10f      	bne.n	8006070 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	b2db      	uxtb	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f00c fbba 	bl	80127d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800606e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f009 ff95 	bl	800ffa4 <USB_ReadInterrupts>
 800607a:	4603      	mov	r3, r0
 800607c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006084:	d10f      	bne.n	80060a6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	b2db      	uxtb	r3, r3
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f00c fb8d 	bl	80127b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80060a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f009 ff7a 	bl	800ffa4 <USB_ReadInterrupts>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ba:	d10a      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f00c fb9b 	bl	80127f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80060d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f009 ff64 	bl	800ffa4 <USB_ReadInterrupts>
 80060dc:	4603      	mov	r3, r0
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d115      	bne.n	8006112 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f00c fb8b 	bl	8012814 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	430a      	orrs	r2, r1
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	e000      	b.n	8006112 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006110:	bf00      	nop
    }
  }
}
 8006112:	3734      	adds	r7, #52	; 0x34
 8006114:	46bd      	mov	sp, r7
 8006116:	bd90      	pop	{r4, r7, pc}

08006118 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_PCD_SetAddress+0x1a>
 800612e:	2302      	movs	r3, #2
 8006130:	e013      	b.n	800615a <HAL_PCD_SetAddress+0x42>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	4611      	mov	r1, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f009 fec2 	bl	800fed4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	4608      	mov	r0, r1
 800616c:	4611      	mov	r1, r2
 800616e:	461a      	mov	r2, r3
 8006170:	4603      	mov	r3, r0
 8006172:	70fb      	strb	r3, [r7, #3]
 8006174:	460b      	mov	r3, r1
 8006176:	803b      	strh	r3, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006184:	2b00      	cmp	r3, #0
 8006186:	da0f      	bge.n	80061a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 020f 	and.w	r2, r3, #15
 800618e:	4613      	mov	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	3338      	adds	r3, #56	; 0x38
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	4413      	add	r3, r2
 800619c:	3304      	adds	r3, #4
 800619e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	705a      	strb	r2, [r3, #1]
 80061a6:	e00f      	b.n	80061c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	f003 020f 	and.w	r2, r3, #15
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	3304      	adds	r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80061d4:	883a      	ldrh	r2, [r7, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	78ba      	ldrb	r2, [r7, #2]
 80061de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80061f2:	78bb      	ldrb	r3, [r7, #2]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d102      	bne.n	80061fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_PCD_EP_Open+0xaa>
 8006208:	2302      	movs	r3, #2
 800620a:	e00e      	b.n	800622a <HAL_PCD_EP_Open+0xc8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	4618      	mov	r0, r3
 800621c:	f008 ffe8 	bl	800f1f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006228:	7afb      	ldrb	r3, [r7, #11]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800623e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006242:	2b00      	cmp	r3, #0
 8006244:	da0f      	bge.n	8006266 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	f003 020f 	and.w	r2, r3, #15
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	3338      	adds	r3, #56	; 0x38
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	3304      	adds	r3, #4
 800625c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	705a      	strb	r2, [r3, #1]
 8006264:	e00f      	b.n	8006286 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4413      	add	r3, r2
 800627c:	3304      	adds	r3, #4
 800627e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006298:	2b01      	cmp	r3, #1
 800629a:	d101      	bne.n	80062a0 <HAL_PCD_EP_Close+0x6e>
 800629c:	2302      	movs	r3, #2
 800629e:	e00e      	b.n	80062be <HAL_PCD_EP_Close+0x8c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68f9      	ldr	r1, [r7, #12]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f009 f826 	bl	800f300 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	460b      	mov	r3, r1
 80062d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	4613      	mov	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	3304      	adds	r3, #4
 80062ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006308:	7afb      	ldrb	r3, [r7, #11]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	b2da      	uxtb	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2b00      	cmp	r3, #0
 800632a:	d109      	bne.n	8006340 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	6979      	ldr	r1, [r7, #20]
 800633a:	f009 fb09 	bl	800f950 <USB_EP0StartXfer>
 800633e:	e008      	b.n	8006352 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	f009 f8b3 	bl	800f4b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	1a9b      	subs	r3, r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800637e:	681b      	ldr	r3, [r3, #0]
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	460b      	mov	r3, r1
 800639a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	3338      	adds	r3, #56	; 0x38
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	3304      	adds	r3, #4
 80063b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2200      	movs	r2, #0
 80063c4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2201      	movs	r2, #1
 80063ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063cc:	7afb      	ldrb	r3, [r7, #11]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d102      	bne.n	80063e6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d109      	bne.n	8006404 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	6979      	ldr	r1, [r7, #20]
 80063fe:	f009 faa7 	bl	800f950 <USB_EP0StartXfer>
 8006402:	e008      	b.n	8006416 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	f009 f851 	bl	800f4b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800642c:	78fb      	ldrb	r3, [r7, #3]
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d901      	bls.n	800643e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e050      	b.n	80064e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800643e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006442:	2b00      	cmp	r3, #0
 8006444:	da0f      	bge.n	8006466 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	1a9b      	subs	r3, r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	3338      	adds	r3, #56	; 0x38
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	3304      	adds	r3, #4
 800645c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	705a      	strb	r2, [r3, #1]
 8006464:	e00d      	b.n	8006482 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006466:	78fa      	ldrb	r2, [r7, #3]
 8006468:	4613      	mov	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	4413      	add	r3, r2
 8006478:	3304      	adds	r3, #4
 800647a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006488:	78fb      	ldrb	r3, [r7, #3]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_PCD_EP_SetStall+0x82>
 800649e:	2302      	movs	r3, #2
 80064a0:	e01e      	b.n	80064e0 <HAL_PCD_EP_SetStall+0xc0>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f009 fc3b 	bl	800fd2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	b2d9      	uxtb	r1, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064d0:	461a      	mov	r2, r3
 80064d2:	f009 fe2d 	bl	8010130 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	f003 020f 	and.w	r2, r3, #15
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d901      	bls.n	8006506 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e042      	b.n	800658c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800650a:	2b00      	cmp	r3, #0
 800650c:	da0f      	bge.n	800652e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	4613      	mov	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	3338      	adds	r3, #56	; 0x38
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4413      	add	r3, r2
 8006522:	3304      	adds	r3, #4
 8006524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	705a      	strb	r2, [r3, #1]
 800652c:	e00f      	b.n	800654e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	f003 020f 	and.w	r2, r3, #15
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	3304      	adds	r3, #4
 8006546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	b2da      	uxtb	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_PCD_EP_ClrStall+0x86>
 800656a:	2302      	movs	r3, #2
 800656c:	e00e      	b.n	800658c <HAL_PCD_EP_ClrStall+0xa4>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	4618      	mov	r0, r3
 800657e:	f009 fc43 	bl	800fe08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af02      	add	r7, sp, #8
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	1a9b      	subs	r3, r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	3338      	adds	r3, #56	; 0x38
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	3304      	adds	r3, #4
 80065ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	699a      	ldr	r2, [r3, #24]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d901      	bls.n	80065cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e06c      	b.n	80066a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d902      	bls.n	80065e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	3303      	adds	r3, #3
 80065ec:	089b      	lsrs	r3, r3, #2
 80065ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065f0:	e02b      	b.n	800664a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	695a      	ldr	r2, [r3, #20]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	429a      	cmp	r2, r3
 8006606:	d902      	bls.n	800660e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	3303      	adds	r3, #3
 8006612:	089b      	lsrs	r3, r3, #2
 8006614:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68d9      	ldr	r1, [r3, #12]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006626:	b2db      	uxtb	r3, r3
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	4603      	mov	r3, r0
 800662c:	6978      	ldr	r0, [r7, #20]
 800662e:	f009 fae7 	bl	800fc00 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	b29b      	uxth	r3, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	429a      	cmp	r2, r3
 800665e:	d809      	bhi.n	8006674 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	699a      	ldr	r2, [r3, #24]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006668:	429a      	cmp	r2, r3
 800666a:	d203      	bcs.n	8006674 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1be      	bne.n	80065f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	695a      	ldr	r2, [r3, #20]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d811      	bhi.n	80066a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	2201      	movs	r2, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	43db      	mvns	r3, r3
 800669a:	6939      	ldr	r1, [r7, #16]
 800669c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a0:	4013      	ands	r3, r2
 80066a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	333c      	adds	r3, #60	; 0x3c
 80066c8:	3304      	adds	r3, #4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	f040 80a0 	bne.w	8006828 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d015      	beq.n	800671e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a72      	ldr	r2, [pc, #456]	; (80068c0 <PCD_EP_OutXfrComplete_int+0x210>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	f240 80dd 	bls.w	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80d7 	beq.w	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	461a      	mov	r2, r3
 8006716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800671a:	6093      	str	r3, [r2, #8]
 800671c:	e0cb      	b.n	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006734:	461a      	mov	r2, r3
 8006736:	2320      	movs	r3, #32
 8006738:	6093      	str	r3, [r2, #8]
 800673a:	e0bc      	b.n	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006742:	2b00      	cmp	r3, #0
 8006744:	f040 80b7 	bne.w	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4a5d      	ldr	r2, [pc, #372]	; (80068c0 <PCD_EP_OutXfrComplete_int+0x210>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d90f      	bls.n	8006770 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	461a      	mov	r2, r3
 8006768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676c:	6093      	str	r3, [r2, #8]
 800676e:	e0a2      	b.n	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	4613      	mov	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006782:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	0159      	lsls	r1, r3, #5
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	440b      	add	r3, r1
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006796:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4403      	add	r3, r0
 80067a6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80067aa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4613      	mov	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4403      	add	r3, r0
 80067ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4419      	add	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	4613      	mov	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4403      	add	r3, r0
 80067e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80067e8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d114      	bne.n	800681a <PCD_EP_OutXfrComplete_int+0x16a>
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d108      	bne.n	800681a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006812:	461a      	mov	r2, r3
 8006814:	2101      	movs	r1, #1
 8006816:	f009 fc8b 	bl	8010130 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f00b ff25 	bl	8012670 <HAL_PCD_DataOutStageCallback>
 8006826:	e046      	b.n	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4a26      	ldr	r2, [pc, #152]	; (80068c4 <PCD_EP_OutXfrComplete_int+0x214>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d124      	bne.n	800687a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006846:	461a      	mov	r2, r3
 8006848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800684c:	6093      	str	r3, [r2, #8]
 800684e:	e032      	b.n	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d008      	beq.n	800686c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	461a      	mov	r2, r3
 8006868:	2320      	movs	r3, #32
 800686a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f00b fefc 	bl	8012670 <HAL_PCD_DataOutStageCallback>
 8006878:	e01d      	b.n	80068b6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d114      	bne.n	80068aa <PCD_EP_OutXfrComplete_int+0x1fa>
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d108      	bne.n	80068aa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068a2:	461a      	mov	r2, r3
 80068a4:	2100      	movs	r1, #0
 80068a6:	f009 fc43 	bl	8010130 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f00b fedd 	bl	8012670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	4f54300a 	.word	0x4f54300a
 80068c4:	4f54310a 	.word	0x4f54310a

080068c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	333c      	adds	r3, #60	; 0x3c
 80068e0:	3304      	adds	r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a15      	ldr	r2, [pc, #84]	; (8006950 <PCD_EP_OutSetupPacket_int+0x88>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d90e      	bls.n	800691c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	461a      	mov	r2, r3
 8006916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800691a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f00b fe95 	bl	801264c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <PCD_EP_OutSetupPacket_int+0x88>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d90c      	bls.n	8006944 <PCD_EP_OutSetupPacket_int+0x7c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d108      	bne.n	8006944 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800693c:	461a      	mov	r2, r3
 800693e:	2101      	movs	r1, #1
 8006940:	f009 fbf6 	bl	8010130 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	4f54300a 	.word	0x4f54300a

08006954 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
 8006960:	4613      	mov	r3, r2
 8006962:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006972:	883b      	ldrh	r3, [r7, #0]
 8006974:	0419      	lsls	r1, r3, #16
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	430a      	orrs	r2, r1
 800697e:	629a      	str	r2, [r3, #40]	; 0x28
 8006980:	e028      	b.n	80069d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	4413      	add	r3, r2
 800698e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
 8006994:	e00d      	b.n	80069b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	3340      	adds	r3, #64	; 0x40
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	0c1b      	lsrs	r3, r3, #16
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	4413      	add	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	3301      	adds	r3, #1
 80069b0:	73fb      	strb	r3, [r7, #15]
 80069b2:	7bfa      	ldrb	r2, [r7, #15]
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d3ec      	bcc.n	8006996 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80069bc:	883b      	ldrh	r3, [r7, #0]
 80069be:	0418      	lsls	r0, r3, #16
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	4302      	orrs	r2, r0
 80069cc:	3340      	adds	r3, #64	; 0x40
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b083      	sub	sp, #12
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	460b      	mov	r3, r1
 80069ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_PCDEx_ActivateLPM+0x44>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	10000003 	.word	0x10000003

08006a4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006a6c:	4b29      	ldr	r3, [pc, #164]	; (8006b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	2b06      	cmp	r3, #6
 8006a76:	d00a      	beq.n	8006a8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a78:	4b26      	ldr	r3, [pc, #152]	; (8006b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d001      	beq.n	8006a8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e040      	b.n	8006b0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e03e      	b.n	8006b0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a8e:	4b21      	ldr	r3, [pc, #132]	; (8006b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006a96:	491f      	ldr	r1, [pc, #124]	; (8006b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a9e:	f7fb f867 	bl	8001b70 <HAL_GetTick>
 8006aa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006aa4:	e009      	b.n	8006aba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006aa6:	f7fb f863 	bl	8001b70 <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab4:	d901      	bls.n	8006aba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e028      	b.n	8006b0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006aba:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac6:	d1ee      	bne.n	8006aa6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b1e      	cmp	r3, #30
 8006acc:	d008      	beq.n	8006ae0 <HAL_PWREx_ConfigSupply+0x7c>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ad2:	d005      	beq.n	8006ae0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b1d      	cmp	r3, #29
 8006ad8:	d002      	beq.n	8006ae0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b2d      	cmp	r3, #45	; 0x2d
 8006ade:	d114      	bne.n	8006b0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006ae0:	f7fb f846 	bl	8001b70 <HAL_GetTick>
 8006ae4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ae6:	e009      	b.n	8006afc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ae8:	f7fb f842 	bl	8001b70 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006af6:	d901      	bls.n	8006afc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e007      	b.n	8006b0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006afc:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <HAL_PWREx_ConfigSupply+0xb0>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b08:	d1ee      	bne.n	8006ae8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	58024800 	.word	0x58024800

08006b18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006b1c:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b26:	60d3      	str	r3, [r2, #12]
}
 8006b28:	bf00      	nop
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	58024800 	.word	0x58024800

08006b38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08c      	sub	sp, #48	; 0x30
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e3ff      	b.n	800734a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8087 	beq.w	8006c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b58:	4b99      	ldr	r3, [pc, #612]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b62:	4b97      	ldr	r3, [pc, #604]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d007      	beq.n	8006b7e <HAL_RCC_OscConfig+0x46>
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	2b18      	cmp	r3, #24
 8006b72:	d110      	bne.n	8006b96 <HAL_RCC_OscConfig+0x5e>
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d10b      	bne.n	8006b96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b7e:	4b90      	ldr	r3, [pc, #576]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d06c      	beq.n	8006c64 <HAL_RCC_OscConfig+0x12c>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d168      	bne.n	8006c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e3d9      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9e:	d106      	bne.n	8006bae <HAL_RCC_OscConfig+0x76>
 8006ba0:	4b87      	ldr	r3, [pc, #540]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a86      	ldr	r2, [pc, #536]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	e02e      	b.n	8006c0c <HAL_RCC_OscConfig+0xd4>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x98>
 8006bb6:	4b82      	ldr	r3, [pc, #520]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a81      	ldr	r2, [pc, #516]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b7f      	ldr	r3, [pc, #508]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a7e      	ldr	r2, [pc, #504]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	e01d      	b.n	8006c0c <HAL_RCC_OscConfig+0xd4>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bd8:	d10c      	bne.n	8006bf4 <HAL_RCC_OscConfig+0xbc>
 8006bda:	4b79      	ldr	r3, [pc, #484]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a78      	ldr	r2, [pc, #480]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4b76      	ldr	r3, [pc, #472]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a75      	ldr	r2, [pc, #468]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e00b      	b.n	8006c0c <HAL_RCC_OscConfig+0xd4>
 8006bf4:	4b72      	ldr	r3, [pc, #456]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a71      	ldr	r2, [pc, #452]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4b6f      	ldr	r3, [pc, #444]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a6e      	ldr	r2, [pc, #440]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d013      	beq.n	8006c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fa ffac 	bl	8001b70 <HAL_GetTick>
 8006c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c1c:	f7fa ffa8 	bl	8001b70 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b64      	cmp	r3, #100	; 0x64
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e38d      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c2e:	4b64      	ldr	r3, [pc, #400]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0xe4>
 8006c3a:	e014      	b.n	8006c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3c:	f7fa ff98 	bl	8001b70 <HAL_GetTick>
 8006c40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c44:	f7fa ff94 	bl	8001b70 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	; 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e379      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c56:	4b5a      	ldr	r3, [pc, #360]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x10c>
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 80ae 	beq.w	8006dd0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c74:	4b52      	ldr	r3, [pc, #328]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c7e:	4b50      	ldr	r3, [pc, #320]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d007      	beq.n	8006c9a <HAL_RCC_OscConfig+0x162>
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	2b18      	cmp	r3, #24
 8006c8e:	d13a      	bne.n	8006d06 <HAL_RCC_OscConfig+0x1ce>
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d135      	bne.n	8006d06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c9a:	4b49      	ldr	r3, [pc, #292]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x17a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e34b      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb2:	f7fa ff8d 	bl	8001bd0 <HAL_GetREVID>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d817      	bhi.n	8006cf0 <HAL_RCC_OscConfig+0x1b8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d108      	bne.n	8006cda <HAL_RCC_OscConfig+0x1a2>
 8006cc8:	4b3d      	ldr	r3, [pc, #244]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006cd0:	4a3b      	ldr	r2, [pc, #236]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cd8:	e07a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cda:	4b39      	ldr	r3, [pc, #228]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	031b      	lsls	r3, r3, #12
 8006ce8:	4935      	ldr	r1, [pc, #212]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cee:	e06f      	b.n	8006dd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf0:	4b33      	ldr	r3, [pc, #204]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	4930      	ldr	r1, [pc, #192]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d04:	e064      	b.n	8006dd0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d045      	beq.n	8006d9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 0219 	bic.w	r2, r3, #25
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	4929      	ldr	r1, [pc, #164]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d20:	f7fa ff26 	bl	8001b70 <HAL_GetTick>
 8006d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d28:	f7fa ff22 	bl	8001b70 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e307      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d3a:	4b21      	ldr	r3, [pc, #132]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d46:	f7fa ff43 	bl	8001bd0 <HAL_GetREVID>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d817      	bhi.n	8006d84 <HAL_RCC_OscConfig+0x24c>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d108      	bne.n	8006d6e <HAL_RCC_OscConfig+0x236>
 8006d5c:	4b18      	ldr	r3, [pc, #96]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d64:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d6a:	6053      	str	r3, [r2, #4]
 8006d6c:	e030      	b.n	8006dd0 <HAL_RCC_OscConfig+0x298>
 8006d6e:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	031b      	lsls	r3, r3, #12
 8006d7c:	4910      	ldr	r1, [pc, #64]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	604b      	str	r3, [r1, #4]
 8006d82:	e025      	b.n	8006dd0 <HAL_RCC_OscConfig+0x298>
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	061b      	lsls	r3, r3, #24
 8006d92:	490b      	ldr	r1, [pc, #44]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	604b      	str	r3, [r1, #4]
 8006d98:	e01a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <HAL_RCC_OscConfig+0x288>)
 8006da0:	f023 0301 	bic.w	r3, r3, #1
 8006da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da6:	f7fa fee3 	bl	8001b70 <HAL_GetTick>
 8006daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dac:	e00a      	b.n	8006dc4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dae:	f7fa fedf 	bl	8001b70 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d903      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e2c4      	b.n	800734a <HAL_RCC_OscConfig+0x812>
 8006dc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006dc4:	4ba4      	ldr	r3, [pc, #656]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1ee      	bne.n	8006dae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 80a9 	beq.w	8006f30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dde:	4b9e      	ldr	r3, [pc, #632]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006de8:	4b9b      	ldr	r3, [pc, #620]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d007      	beq.n	8006e04 <HAL_RCC_OscConfig+0x2cc>
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b18      	cmp	r3, #24
 8006df8:	d13a      	bne.n	8006e70 <HAL_RCC_OscConfig+0x338>
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d135      	bne.n	8006e70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e04:	4b94      	ldr	r3, [pc, #592]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <HAL_RCC_OscConfig+0x2e4>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	2b80      	cmp	r3, #128	; 0x80
 8006e16:	d001      	beq.n	8006e1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e296      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e1c:	f7fa fed8 	bl	8001bd0 <HAL_GetREVID>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d817      	bhi.n	8006e5a <HAL_RCC_OscConfig+0x322>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d108      	bne.n	8006e44 <HAL_RCC_OscConfig+0x30c>
 8006e32:	4b89      	ldr	r3, [pc, #548]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e3a:	4a87      	ldr	r2, [pc, #540]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e42:	e075      	b.n	8006f30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e44:	4b84      	ldr	r3, [pc, #528]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	069b      	lsls	r3, r3, #26
 8006e52:	4981      	ldr	r1, [pc, #516]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e58:	e06a      	b.n	8006f30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e5a:	4b7f      	ldr	r3, [pc, #508]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	061b      	lsls	r3, r3, #24
 8006e68:	497b      	ldr	r1, [pc, #492]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e6e:	e05f      	b.n	8006f30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d042      	beq.n	8006efe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e78:	4b77      	ldr	r3, [pc, #476]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a76      	ldr	r2, [pc, #472]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e84:	f7fa fe74 	bl	8001b70 <HAL_GetTick>
 8006e88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e8a:	e008      	b.n	8006e9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e8c:	f7fa fe70 	bl	8001b70 <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d901      	bls.n	8006e9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e255      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e9e:	4b6e      	ldr	r3, [pc, #440]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0f0      	beq.n	8006e8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006eaa:	f7fa fe91 	bl	8001bd0 <HAL_GetREVID>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d817      	bhi.n	8006ee8 <HAL_RCC_OscConfig+0x3b0>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d108      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x39a>
 8006ec0:	4b65      	ldr	r3, [pc, #404]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006ec8:	4a63      	ldr	r2, [pc, #396]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ece:	6053      	str	r3, [r2, #4]
 8006ed0:	e02e      	b.n	8006f30 <HAL_RCC_OscConfig+0x3f8>
 8006ed2:	4b61      	ldr	r3, [pc, #388]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	069b      	lsls	r3, r3, #26
 8006ee0:	495d      	ldr	r1, [pc, #372]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	604b      	str	r3, [r1, #4]
 8006ee6:	e023      	b.n	8006f30 <HAL_RCC_OscConfig+0x3f8>
 8006ee8:	4b5b      	ldr	r3, [pc, #364]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	061b      	lsls	r3, r3, #24
 8006ef6:	4958      	ldr	r1, [pc, #352]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60cb      	str	r3, [r1, #12]
 8006efc:	e018      	b.n	8006f30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006efe:	4b56      	ldr	r3, [pc, #344]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a55      	ldr	r2, [pc, #340]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0a:	f7fa fe31 	bl	8001b70 <HAL_GetTick>
 8006f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f10:	e008      	b.n	8006f24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f12:	f7fa fe2d 	bl	8001b70 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e212      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f24:	4b4c      	ldr	r3, [pc, #304]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f0      	bne.n	8006f12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0308 	and.w	r3, r3, #8
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d036      	beq.n	8006faa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	695b      	ldr	r3, [r3, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d019      	beq.n	8006f78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f44:	4b44      	ldr	r3, [pc, #272]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f48:	4a43      	ldr	r2, [pc, #268]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f50:	f7fa fe0e 	bl	8001b70 <HAL_GetTick>
 8006f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f58:	f7fa fe0a 	bl	8001b70 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e1ef      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f6a:	4b3b      	ldr	r3, [pc, #236]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCC_OscConfig+0x420>
 8006f76:	e018      	b.n	8006faa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f78:	4b37      	ldr	r3, [pc, #220]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7c:	4a36      	ldr	r2, [pc, #216]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006f7e:	f023 0301 	bic.w	r3, r3, #1
 8006f82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f84:	f7fa fdf4 	bl	8001b70 <HAL_GetTick>
 8006f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f8c:	f7fa fdf0 	bl	8001b70 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e1d5      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d036      	beq.n	8007024 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d019      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fbe:	4b26      	ldr	r3, [pc, #152]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a25      	ldr	r2, [pc, #148]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fca:	f7fa fdd1 	bl	8001b70 <HAL_GetTick>
 8006fce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fd2:	f7fa fdcd 	bl	8001b70 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e1b2      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fe4:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f0      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x49a>
 8006ff0:	e018      	b.n	8007024 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ff2:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 8006ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ffc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ffe:	f7fa fdb7 	bl	8001b70 <HAL_GetTick>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007006:	f7fa fdb3 	bl	8001b70 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e198      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007018:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <HAL_RCC_OscConfig+0x520>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1f0      	bne.n	8007006 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8085 	beq.w	800713c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007032:	4b0a      	ldr	r3, [pc, #40]	; (800705c <HAL_RCC_OscConfig+0x524>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a09      	ldr	r2, [pc, #36]	; (800705c <HAL_RCC_OscConfig+0x524>)
 8007038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800703e:	f7fa fd97 	bl	8001b70 <HAL_GetTick>
 8007042:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007044:	e00c      	b.n	8007060 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007046:	f7fa fd93 	bl	8001b70 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b64      	cmp	r3, #100	; 0x64
 8007052:	d905      	bls.n	8007060 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e178      	b.n	800734a <HAL_RCC_OscConfig+0x812>
 8007058:	58024400 	.word	0x58024400
 800705c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007060:	4b96      	ldr	r3, [pc, #600]	; (80072bc <HAL_RCC_OscConfig+0x784>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0ec      	beq.n	8007046 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d106      	bne.n	8007082 <HAL_RCC_OscConfig+0x54a>
 8007074:	4b92      	ldr	r3, [pc, #584]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	4a91      	ldr	r2, [pc, #580]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	6713      	str	r3, [r2, #112]	; 0x70
 8007080:	e02d      	b.n	80070de <HAL_RCC_OscConfig+0x5a6>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10c      	bne.n	80070a4 <HAL_RCC_OscConfig+0x56c>
 800708a:	4b8d      	ldr	r3, [pc, #564]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	4a8c      	ldr	r2, [pc, #560]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007090:	f023 0301 	bic.w	r3, r3, #1
 8007094:	6713      	str	r3, [r2, #112]	; 0x70
 8007096:	4b8a      	ldr	r3, [pc, #552]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709a:	4a89      	ldr	r2, [pc, #548]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800709c:	f023 0304 	bic.w	r3, r3, #4
 80070a0:	6713      	str	r3, [r2, #112]	; 0x70
 80070a2:	e01c      	b.n	80070de <HAL_RCC_OscConfig+0x5a6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b05      	cmp	r3, #5
 80070aa:	d10c      	bne.n	80070c6 <HAL_RCC_OscConfig+0x58e>
 80070ac:	4b84      	ldr	r3, [pc, #528]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	4a83      	ldr	r2, [pc, #524]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070b2:	f043 0304 	orr.w	r3, r3, #4
 80070b6:	6713      	str	r3, [r2, #112]	; 0x70
 80070b8:	4b81      	ldr	r3, [pc, #516]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070bc:	4a80      	ldr	r2, [pc, #512]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	6713      	str	r3, [r2, #112]	; 0x70
 80070c4:	e00b      	b.n	80070de <HAL_RCC_OscConfig+0x5a6>
 80070c6:	4b7e      	ldr	r3, [pc, #504]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	4a7d      	ldr	r2, [pc, #500]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	6713      	str	r3, [r2, #112]	; 0x70
 80070d2:	4b7b      	ldr	r3, [pc, #492]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	4a7a      	ldr	r2, [pc, #488]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80070d8:	f023 0304 	bic.w	r3, r3, #4
 80070dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d015      	beq.n	8007112 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e6:	f7fa fd43 	bl	8001b70 <HAL_GetTick>
 80070ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070ec:	e00a      	b.n	8007104 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ee:	f7fa fd3f 	bl	8001b70 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e122      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007104:	4b6e      	ldr	r3, [pc, #440]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0ee      	beq.n	80070ee <HAL_RCC_OscConfig+0x5b6>
 8007110:	e014      	b.n	800713c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007112:	f7fa fd2d 	bl	8001b70 <HAL_GetTick>
 8007116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007118:	e00a      	b.n	8007130 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800711a:	f7fa fd29 	bl	8001b70 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	f241 3288 	movw	r2, #5000	; 0x1388
 8007128:	4293      	cmp	r3, r2
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e10c      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007130:	4b63      	ldr	r3, [pc, #396]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1ee      	bne.n	800711a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8101 	beq.w	8007348 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007146:	4b5e      	ldr	r3, [pc, #376]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800714e:	2b18      	cmp	r3, #24
 8007150:	f000 80bc 	beq.w	80072cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b02      	cmp	r3, #2
 800715a:	f040 8095 	bne.w	8007288 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800715e:	4b58      	ldr	r3, [pc, #352]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a57      	ldr	r2, [pc, #348]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716a:	f7fa fd01 	bl	8001b70 <HAL_GetTick>
 800716e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007172:	f7fa fcfd 	bl	8001b70 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e0e2      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007184:	4b4e      	ldr	r3, [pc, #312]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f0      	bne.n	8007172 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007190:	4b4b      	ldr	r3, [pc, #300]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007194:	4b4b      	ldr	r3, [pc, #300]	; (80072c4 <HAL_RCC_OscConfig+0x78c>)
 8007196:	4013      	ands	r3, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071a0:	0112      	lsls	r2, r2, #4
 80071a2:	430a      	orrs	r2, r1
 80071a4:	4946      	ldr	r1, [pc, #280]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	628b      	str	r3, [r1, #40]	; 0x28
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	3b01      	subs	r3, #1
 80071b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b8:	3b01      	subs	r3, #1
 80071ba:	025b      	lsls	r3, r3, #9
 80071bc:	b29b      	uxth	r3, r3
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	3b01      	subs	r3, #1
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	3b01      	subs	r3, #1
 80071d4:	061b      	lsls	r3, r3, #24
 80071d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80071da:	4939      	ldr	r1, [pc, #228]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80071e0:	4b37      	ldr	r3, [pc, #220]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a36      	ldr	r2, [pc, #216]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80071e6:	f023 0301 	bic.w	r3, r3, #1
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071ec:	4b34      	ldr	r3, [pc, #208]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80071ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f0:	4b35      	ldr	r3, [pc, #212]	; (80072c8 <HAL_RCC_OscConfig+0x790>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071f8:	00d2      	lsls	r2, r2, #3
 80071fa:	4931      	ldr	r1, [pc, #196]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007200:	4b2f      	ldr	r3, [pc, #188]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	f023 020c 	bic.w	r2, r3, #12
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	492c      	ldr	r1, [pc, #176]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800720e:	4313      	orrs	r3, r2
 8007210:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007212:	4b2b      	ldr	r3, [pc, #172]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	f023 0202 	bic.w	r2, r3, #2
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	4928      	ldr	r1, [pc, #160]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007220:	4313      	orrs	r3, r2
 8007222:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007224:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	4a25      	ldr	r2, [pc, #148]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800722a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800722e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007230:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800723c:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	4a1f      	ldr	r2, [pc, #124]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007246:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007248:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a1c      	ldr	r2, [pc, #112]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007254:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a19      	ldr	r2, [pc, #100]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800725a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800725e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fa fc86 	bl	8001b70 <HAL_GetTick>
 8007264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007268:	f7fa fc82 	bl	8001b70 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e067      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800727a:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x730>
 8007286:	e05f      	b.n	8007348 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007288:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a0c      	ldr	r2, [pc, #48]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 800728e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fa fc6c 	bl	8001b70 <HAL_GetTick>
 8007298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800729c:	f7fa fc68 	bl	8001b70 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e04d      	b.n	800734a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <HAL_RCC_OscConfig+0x788>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f0      	bne.n	800729c <HAL_RCC_OscConfig+0x764>
 80072ba:	e045      	b.n	8007348 <HAL_RCC_OscConfig+0x810>
 80072bc:	58024800 	.word	0x58024800
 80072c0:	58024400 	.word	0x58024400
 80072c4:	fffffc0c 	.word	0xfffffc0c
 80072c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80072cc:	4b21      	ldr	r3, [pc, #132]	; (8007354 <HAL_RCC_OscConfig+0x81c>)
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80072d2:	4b20      	ldr	r3, [pc, #128]	; (8007354 <HAL_RCC_OscConfig+0x81c>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d031      	beq.n	8007344 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f003 0203 	and.w	r2, r3, #3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d12a      	bne.n	8007344 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	091b      	lsrs	r3, r3, #4
 80072f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d122      	bne.n	8007344 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800730a:	429a      	cmp	r2, r3
 800730c:	d11a      	bne.n	8007344 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	0a5b      	lsrs	r3, r3, #9
 8007312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800731c:	429a      	cmp	r2, r3
 800731e:	d111      	bne.n	8007344 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	0c1b      	lsrs	r3, r3, #16
 8007324:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800732e:	429a      	cmp	r2, r3
 8007330:	d108      	bne.n	8007344 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	0e1b      	lsrs	r3, r3, #24
 8007336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007340:	429a      	cmp	r2, r3
 8007342:	d001      	beq.n	8007348 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3730      	adds	r7, #48	; 0x30
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	58024400 	.word	0x58024400

08007358 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e19c      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800736c:	4b8a      	ldr	r3, [pc, #552]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d910      	bls.n	800739c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737a:	4b87      	ldr	r3, [pc, #540]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f023 020f 	bic.w	r2, r3, #15
 8007382:	4985      	ldr	r1, [pc, #532]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	4313      	orrs	r3, r2
 8007388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800738a:	4b83      	ldr	r3, [pc, #524]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d001      	beq.n	800739c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e184      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d010      	beq.n	80073ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	4b7b      	ldr	r3, [pc, #492]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d908      	bls.n	80073ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073b8:	4b78      	ldr	r3, [pc, #480]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	4975      	ldr	r1, [pc, #468]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	4b70      	ldr	r3, [pc, #448]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d908      	bls.n	80073f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073e6:	4b6d      	ldr	r3, [pc, #436]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	496a      	ldr	r1, [pc, #424]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b00      	cmp	r3, #0
 8007402:	d010      	beq.n	8007426 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699a      	ldr	r2, [r3, #24]
 8007408:	4b64      	ldr	r3, [pc, #400]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007410:	429a      	cmp	r2, r3
 8007412:	d908      	bls.n	8007426 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007414:	4b61      	ldr	r3, [pc, #388]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	495e      	ldr	r1, [pc, #376]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007422:	4313      	orrs	r3, r2
 8007424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0320 	and.w	r3, r3, #32
 800742e:	2b00      	cmp	r3, #0
 8007430:	d010      	beq.n	8007454 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69da      	ldr	r2, [r3, #28]
 8007436:	4b59      	ldr	r3, [pc, #356]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800743e:	429a      	cmp	r2, r3
 8007440:	d908      	bls.n	8007454 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007442:	4b56      	ldr	r3, [pc, #344]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	4953      	ldr	r1, [pc, #332]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007450:	4313      	orrs	r3, r2
 8007452:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d010      	beq.n	8007482 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	4b4d      	ldr	r3, [pc, #308]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	429a      	cmp	r2, r3
 800746e:	d908      	bls.n	8007482 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007470:	4b4a      	ldr	r3, [pc, #296]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	f023 020f 	bic.w	r2, r3, #15
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	4947      	ldr	r1, [pc, #284]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 800747e:	4313      	orrs	r3, r2
 8007480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d055      	beq.n	800753a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800748e:	4b43      	ldr	r3, [pc, #268]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	4940      	ldr	r1, [pc, #256]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 800749c:	4313      	orrs	r3, r2
 800749e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d107      	bne.n	80074b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074a8:	4b3c      	ldr	r3, [pc, #240]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d121      	bne.n	80074f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e0f6      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d107      	bne.n	80074d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074c0:	4b36      	ldr	r3, [pc, #216]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d115      	bne.n	80074f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0ea      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d107      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074d8:	4b30      	ldr	r3, [pc, #192]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d109      	bne.n	80074f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0de      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074e8:	4b2c      	ldr	r3, [pc, #176]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0d6      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074f8:	4b28      	ldr	r3, [pc, #160]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f023 0207 	bic.w	r2, r3, #7
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4925      	ldr	r1, [pc, #148]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007506:	4313      	orrs	r3, r2
 8007508:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750a:	f7fa fb31 	bl	8001b70 <HAL_GetTick>
 800750e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007510:	e00a      	b.n	8007528 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007512:	f7fa fb2d 	bl	8001b70 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007520:	4293      	cmp	r3, r2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e0be      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007528:	4b1c      	ldr	r3, [pc, #112]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	429a      	cmp	r2, r3
 8007538:	d1eb      	bne.n	8007512 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d010      	beq.n	8007568 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	429a      	cmp	r2, r3
 8007554:	d208      	bcs.n	8007568 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007556:	4b11      	ldr	r3, [pc, #68]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	f023 020f 	bic.w	r2, r3, #15
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	490e      	ldr	r1, [pc, #56]	; (800759c <HAL_RCC_ClockConfig+0x244>)
 8007564:	4313      	orrs	r3, r2
 8007566:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007568:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 030f 	and.w	r3, r3, #15
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	429a      	cmp	r2, r3
 8007574:	d214      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007576:	4b08      	ldr	r3, [pc, #32]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f023 020f 	bic.w	r2, r3, #15
 800757e:	4906      	ldr	r1, [pc, #24]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	4313      	orrs	r3, r2
 8007584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007586:	4b04      	ldr	r3, [pc, #16]	; (8007598 <HAL_RCC_ClockConfig+0x240>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d005      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e086      	b.n	80076a6 <HAL_RCC_ClockConfig+0x34e>
 8007598:	52002000 	.word	0x52002000
 800759c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	4b3f      	ldr	r3, [pc, #252]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d208      	bcs.n	80075ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075bc:	4b3c      	ldr	r3, [pc, #240]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	4939      	ldr	r1, [pc, #228]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d010      	beq.n	80075fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	4b34      	ldr	r3, [pc, #208]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d208      	bcs.n	80075fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80075ea:	4b31      	ldr	r3, [pc, #196]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	492e      	ldr	r1, [pc, #184]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0310 	and.w	r3, r3, #16
 8007604:	2b00      	cmp	r3, #0
 8007606:	d010      	beq.n	800762a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699a      	ldr	r2, [r3, #24]
 800760c:	4b28      	ldr	r3, [pc, #160]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007614:	429a      	cmp	r2, r3
 8007616:	d208      	bcs.n	800762a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007618:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	4922      	ldr	r1, [pc, #136]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 8007626:	4313      	orrs	r3, r2
 8007628:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69da      	ldr	r2, [r3, #28]
 800763a:	4b1d      	ldr	r3, [pc, #116]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007642:	429a      	cmp	r2, r3
 8007644:	d208      	bcs.n	8007658 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007646:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	4917      	ldr	r1, [pc, #92]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 8007654:	4313      	orrs	r3, r2
 8007656:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007658:	f000 f834 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 800765c:	4602      	mov	r2, r0
 800765e:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	0a1b      	lsrs	r3, r3, #8
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	4912      	ldr	r1, [pc, #72]	; (80076b4 <HAL_RCC_ClockConfig+0x35c>)
 800766a:	5ccb      	ldrb	r3, [r1, r3]
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
 8007674:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <HAL_RCC_ClockConfig+0x358>)
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	4a0d      	ldr	r2, [pc, #52]	; (80076b4 <HAL_RCC_ClockConfig+0x35c>)
 8007680:	5cd3      	ldrb	r3, [r2, r3]
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	fa22 f303 	lsr.w	r3, r2, r3
 800768c:	4a0a      	ldr	r2, [pc, #40]	; (80076b8 <HAL_RCC_ClockConfig+0x360>)
 800768e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <HAL_RCC_ClockConfig+0x364>)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007696:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <HAL_RCC_ClockConfig+0x368>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fa fa1e 	bl	8001adc <HAL_InitTick>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	58024400 	.word	0x58024400
 80076b4:	08015890 	.word	0x08015890
 80076b8:	24000004 	.word	0x24000004
 80076bc:	24000000 	.word	0x24000000
 80076c0:	2400000c 	.word	0x2400000c

080076c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076ca:	4bb3      	ldr	r3, [pc, #716]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076d2:	2b18      	cmp	r3, #24
 80076d4:	f200 8155 	bhi.w	8007982 <HAL_RCC_GetSysClockFreq+0x2be>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	08007745 	.word	0x08007745
 80076e4:	08007983 	.word	0x08007983
 80076e8:	08007983 	.word	0x08007983
 80076ec:	08007983 	.word	0x08007983
 80076f0:	08007983 	.word	0x08007983
 80076f4:	08007983 	.word	0x08007983
 80076f8:	08007983 	.word	0x08007983
 80076fc:	08007983 	.word	0x08007983
 8007700:	0800776b 	.word	0x0800776b
 8007704:	08007983 	.word	0x08007983
 8007708:	08007983 	.word	0x08007983
 800770c:	08007983 	.word	0x08007983
 8007710:	08007983 	.word	0x08007983
 8007714:	08007983 	.word	0x08007983
 8007718:	08007983 	.word	0x08007983
 800771c:	08007983 	.word	0x08007983
 8007720:	08007771 	.word	0x08007771
 8007724:	08007983 	.word	0x08007983
 8007728:	08007983 	.word	0x08007983
 800772c:	08007983 	.word	0x08007983
 8007730:	08007983 	.word	0x08007983
 8007734:	08007983 	.word	0x08007983
 8007738:	08007983 	.word	0x08007983
 800773c:	08007983 	.word	0x08007983
 8007740:	08007777 	.word	0x08007777
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007744:	4b94      	ldr	r3, [pc, #592]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007750:	4b91      	ldr	r3, [pc, #580]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	08db      	lsrs	r3, r3, #3
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	4a90      	ldr	r2, [pc, #576]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
 8007760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007762:	e111      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007764:	4b8d      	ldr	r3, [pc, #564]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007766:	61bb      	str	r3, [r7, #24]
    break;
 8007768:	e10e      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800776a:	4b8d      	ldr	r3, [pc, #564]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800776c:	61bb      	str	r3, [r7, #24]
    break;
 800776e:	e10b      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007770:	4b8c      	ldr	r3, [pc, #560]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007772:	61bb      	str	r3, [r7, #24]
    break;
 8007774:	e108      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007776:	4b88      	ldr	r3, [pc, #544]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007780:	4b85      	ldr	r3, [pc, #532]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	091b      	lsrs	r3, r3, #4
 8007786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800778a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800778c:	4b82      	ldr	r3, [pc, #520]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007796:	4b80      	ldr	r3, [pc, #512]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80e1 	beq.w	800797c <HAL_RCC_GetSysClockFreq+0x2b8>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	f000 8083 	beq.w	80078c8 <HAL_RCC_GetSysClockFreq+0x204>
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	f200 80a1 	bhi.w	800790c <HAL_RCC_GetSysClockFreq+0x248>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_RCC_GetSysClockFreq+0x114>
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d056      	beq.n	8007884 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077d6:	e099      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d8:	4b6f      	ldr	r3, [pc, #444]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d02d      	beq.n	8007840 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077e4:	4b6c      	ldr	r3, [pc, #432]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	08db      	lsrs	r3, r3, #3
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	4a6b      	ldr	r2, [pc, #428]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
 80077f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	ee07 3a90 	vmov	s15, r3
 80077fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780e:	4b62      	ldr	r3, [pc, #392]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007822:	eddf 5a61 	vldr	s11, [pc, #388]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800782a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800783e:	e087      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80079ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800784e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007852:	4b51      	ldr	r3, [pc, #324]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007862:	ed97 6a02 	vldr	s12, [r7, #8]
 8007866:	eddf 5a50 	vldr	s11, [pc, #320]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800786a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007882:	e065      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007896:	4b40      	ldr	r3, [pc, #256]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80078aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c6:	e043      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80079b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078da:	4b2f      	ldr	r3, [pc, #188]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800790a:	e021      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007916:	eddf 6a26 	vldr	s13, [pc, #152]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800791a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791e:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007926:	ee07 3a90 	vmov	s15, r3
 800792a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007932:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800794e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	0a5b      	lsrs	r3, r3, #9
 8007956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795a:	3301      	adds	r3, #1
 800795c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	ee07 3a90 	vmov	s15, r3
 8007964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007968:	edd7 6a07 	vldr	s13, [r7, #28]
 800796c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007974:	ee17 3a90 	vmov	r3, s15
 8007978:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800797a:	e005      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	61bb      	str	r3, [r7, #24]
    break;
 8007980:	e002      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007984:	61bb      	str	r3, [r7, #24]
    break;
 8007986:	bf00      	nop
  }

  return sysclockfreq;
 8007988:	69bb      	ldr	r3, [r7, #24]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3724      	adds	r7, #36	; 0x24
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	58024400 	.word	0x58024400
 800799c:	03d09000 	.word	0x03d09000
 80079a0:	003d0900 	.word	0x003d0900
 80079a4:	00f42400 	.word	0x00f42400
 80079a8:	46000000 	.word	0x46000000
 80079ac:	4c742400 	.word	0x4c742400
 80079b0:	4a742400 	.word	0x4a742400
 80079b4:	4b742400 	.word	0x4b742400

080079b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079be:	f7ff fe81 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	0a1b      	lsrs	r3, r3, #8
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	490f      	ldr	r1, [pc, #60]	; (8007a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80079d0:	5ccb      	ldrb	r3, [r1, r3]
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	fa22 f303 	lsr.w	r3, r2, r3
 80079da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	4a09      	ldr	r2, [pc, #36]	; (8007a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80079e6:	5cd3      	ldrb	r3, [r2, r3]
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	fa22 f303 	lsr.w	r3, r2, r3
 80079f2:	4a07      	ldr	r2, [pc, #28]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80079f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079f6:	4a07      	ldr	r2, [pc, #28]	; (8007a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80079fe:	681b      	ldr	r3, [r3, #0]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	08015890 	.word	0x08015890
 8007a10:	24000004 	.word	0x24000004
 8007a14:	24000000 	.word	0x24000000

08007a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a1c:	f7ff ffcc 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	091b      	lsrs	r3, r3, #4
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	4904      	ldr	r1, [pc, #16]	; (8007a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a2e:	5ccb      	ldrb	r3, [r1, r3]
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	08015890 	.word	0x08015890

08007a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a48:	f7ff ffb6 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4904      	ldr	r1, [pc, #16]	; (8007a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a5a:	5ccb      	ldrb	r3, [r1, r3]
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	58024400 	.word	0x58024400
 8007a6c:	08015890 	.word	0x08015890

08007a70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	223f      	movs	r2, #63	; 0x3f
 8007a7e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a80:	4b1a      	ldr	r3, [pc, #104]	; (8007aec <HAL_RCC_GetClockConfig+0x7c>)
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	f003 0207 	and.w	r2, r3, #7
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007a8c:	4b17      	ldr	r3, [pc, #92]	; (8007aec <HAL_RCC_GetClockConfig+0x7c>)
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007a98:	4b14      	ldr	r3, [pc, #80]	; (8007aec <HAL_RCC_GetClockConfig+0x7c>)
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f003 020f 	and.w	r2, r3, #15
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007aa4:	4b11      	ldr	r3, [pc, #68]	; (8007aec <HAL_RCC_GetClockConfig+0x7c>)
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <HAL_RCC_GetClockConfig+0x7c>)
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007abc:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <HAL_RCC_GetClockConfig+0x7c>)
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007ac8:	4b08      	ldr	r3, [pc, #32]	; (8007aec <HAL_RCC_GetClockConfig+0x7c>)
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <HAL_RCC_GetClockConfig+0x80>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	601a      	str	r2, [r3, #0]
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	58024400 	.word	0x58024400
 8007af0:	52002000 	.word	0x52002000

08007af4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007afc:	2300      	movs	r3, #0
 8007afe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b00:	2300      	movs	r3, #0
 8007b02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d03f      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b18:	d02a      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b1e:	d824      	bhi.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b24:	d018      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b2a:	d81e      	bhi.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b34:	d007      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b36:	e018      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b38:	4bab      	ldr	r3, [pc, #684]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4aaa      	ldr	r2, [pc, #680]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b44:	e015      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f001 fff3 	bl	8009b38 <RCCEx_PLL2_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b56:	e00c      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3324      	adds	r3, #36	; 0x24
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f002 f89c 	bl	8009c9c <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6e:	e000      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d109      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b78:	4b9b      	ldr	r3, [pc, #620]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b84:	4998      	ldr	r1, [pc, #608]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	650b      	str	r3, [r1, #80]	; 0x50
 8007b8a:	e001      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d03d      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d826      	bhi.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bc1 	.word	0x08007bc1
 8007bb0:	08007bcf 	.word	0x08007bcf
 8007bb4:	08007be1 	.word	0x08007be1
 8007bb8:	08007bf9 	.word	0x08007bf9
 8007bbc:	08007bf9 	.word	0x08007bf9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc0:	4b89      	ldr	r3, [pc, #548]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4a88      	ldr	r2, [pc, #544]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bcc:	e015      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3304      	adds	r3, #4
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 ffaf 	bl	8009b38 <RCCEx_PLL2_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bde:	e00c      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f002 f858 	bl	8009c9c <RCCEx_PLL3_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e003      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf6:	e000      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c00:	4b79      	ldr	r3, [pc, #484]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c04:	f023 0207 	bic.w	r2, r3, #7
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0c:	4976      	ldr	r1, [pc, #472]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	650b      	str	r3, [r1, #80]	; 0x50
 8007c12:	e001      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d042      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2c:	d02b      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c32:	d825      	bhi.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c34:	2bc0      	cmp	r3, #192	; 0xc0
 8007c36:	d028      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c38:	2bc0      	cmp	r3, #192	; 0xc0
 8007c3a:	d821      	bhi.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c3c:	2b80      	cmp	r3, #128	; 0x80
 8007c3e:	d016      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d81d      	bhi.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d007      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007c4c:	e018      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c4e:	4b66      	ldr	r3, [pc, #408]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	4a65      	ldr	r2, [pc, #404]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c5a:	e017      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f001 ff68 	bl	8009b38 <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c6c:	e00e      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3324      	adds	r3, #36	; 0x24
 8007c72:	2100      	movs	r1, #0
 8007c74:	4618      	mov	r0, r3
 8007c76:	f002 f811 	bl	8009c9c <RCCEx_PLL3_Config>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c7e:	e005      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	75fb      	strb	r3, [r7, #23]
      break;
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c86:	bf00      	nop
 8007c88:	e000      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c92:	4b55      	ldr	r3, [pc, #340]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c9e:	4952      	ldr	r1, [pc, #328]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	650b      	str	r3, [r1, #80]	; 0x50
 8007ca4:	e001      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d049      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cc0:	d030      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cc6:	d82a      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ccc:	d02c      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007cce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007cd2:	d824      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd8:	d018      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cde:	d81e      	bhi.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ce8:	d007      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007cea:	e018      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cec:	4b3e      	ldr	r3, [pc, #248]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	4a3d      	ldr	r2, [pc, #244]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cf8:	e017      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 ff19 	bl	8009b38 <RCCEx_PLL2_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d0a:	e00e      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3324      	adds	r3, #36	; 0x24
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 ffc2 	bl	8009c9c <RCCEx_PLL3_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d1c:	e005      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]
      break;
 8007d22:	e002      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d24:	bf00      	nop
 8007d26:	e000      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007d30:	4b2d      	ldr	r3, [pc, #180]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d3e:	492a      	ldr	r1, [pc, #168]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	658b      	str	r3, [r1, #88]	; 0x58
 8007d44:	e001      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d46:	7dfb      	ldrb	r3, [r7, #23]
 8007d48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d04c      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d60:	d030      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d66:	d82a      	bhi.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d6c:	d02c      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d72:	d824      	bhi.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d78:	d018      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d7e:	d81e      	bhi.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d88:	d007      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d8a:	e018      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8c:	4b16      	ldr	r3, [pc, #88]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d90:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d98:	e017      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 fec9 	bl	8009b38 <RCCEx_PLL2_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007daa:	e00e      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3324      	adds	r3, #36	; 0x24
 8007db0:	2100      	movs	r1, #0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f001 ff72 	bl	8009c9c <RCCEx_PLL3_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007dbc:	e005      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc2:	e002      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10d      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007dd0:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007dde:	4902      	ldr	r1, [pc, #8]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	658b      	str	r3, [r1, #88]	; 0x58
 8007de4:	e004      	b.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007de6:	bf00      	nop
 8007de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d032      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e00:	2b30      	cmp	r3, #48	; 0x30
 8007e02:	d01c      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e04:	2b30      	cmp	r3, #48	; 0x30
 8007e06:	d817      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d00c      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007e0c:	2b20      	cmp	r3, #32
 8007e0e:	d813      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d016      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d10f      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e18:	4baf      	ldr	r3, [pc, #700]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	4aae      	ldr	r2, [pc, #696]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e24:	e00e      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	2102      	movs	r1, #2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 fe83 	bl	8009b38 <RCCEx_PLL2_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007e36:	e005      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e3c:	e002      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007e4a:	4ba3      	ldr	r3, [pc, #652]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e56:	49a0      	ldr	r1, [pc, #640]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e5c:	e001      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5e:	7dfb      	ldrb	r3, [r7, #23]
 8007e60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d047      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e76:	d030      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e7c:	d82a      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e82:	d02c      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e88:	d824      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8e:	d018      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e94:	d81e      	bhi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9e:	d007      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007ea0:	e018      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea2:	4b8d      	ldr	r3, [pc, #564]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	4a8c      	ldr	r2, [pc, #560]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007eae:	e017      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 fe3e 	bl	8009b38 <RCCEx_PLL2_Config>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ec0:	e00e      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3324      	adds	r3, #36	; 0x24
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 fee7 	bl	8009c9c <RCCEx_PLL3_Config>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ed2:	e005      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed8:	e002      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ee6:	4b7c      	ldr	r3, [pc, #496]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef2:	4979      	ldr	r1, [pc, #484]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	650b      	str	r3, [r1, #80]	; 0x50
 8007ef8:	e001      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d049      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f12:	d02e      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f18:	d828      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f1e:	d02a      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f24:	d822      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f2a:	d026      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007f2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f30:	d81c      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f36:	d010      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f3c:	d816      	bhi.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d01d      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f46:	d111      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fdf2 	bl	8009b38 <RCCEx_PLL2_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f58:	e012      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3324      	adds	r3, #36	; 0x24
 8007f5e:	2101      	movs	r1, #1
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 fe9b 	bl	8009c9c <RCCEx_PLL3_Config>
 8007f66:	4603      	mov	r3, r0
 8007f68:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f6a:	e009      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f70:	e006      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f72:	bf00      	nop
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f76:	bf00      	nop
 8007f78:	e002      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f86:	4b54      	ldr	r3, [pc, #336]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f92:	4951      	ldr	r1, [pc, #324]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	650b      	str	r3, [r1, #80]	; 0x50
 8007f98:	e001      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d04b      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fb4:	d02e      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fba:	d828      	bhi.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc0:	d02a      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc6:	d822      	bhi.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fcc:	d026      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fd2:	d81c      	bhi.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd8:	d010      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fde:	d816      	bhi.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01d      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fe8:	d111      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3304      	adds	r3, #4
 8007fee:	2101      	movs	r1, #1
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f001 fda1 	bl	8009b38 <RCCEx_PLL2_Config>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ffa:	e012      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3324      	adds	r3, #36	; 0x24
 8008000:	2101      	movs	r1, #1
 8008002:	4618      	mov	r0, r3
 8008004:	f001 fe4a 	bl	8009c9c <RCCEx_PLL3_Config>
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800800c:	e009      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
      break;
 8008012:	e006      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008014:	bf00      	nop
 8008016:	e004      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008018:	bf00      	nop
 800801a:	e002      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800801c:	bf00      	nop
 800801e:	e000      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008028:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800802a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008036:	4928      	ldr	r1, [pc, #160]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008038:	4313      	orrs	r3, r2
 800803a:	658b      	str	r3, [r1, #88]	; 0x58
 800803c:	e001      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02f      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008056:	d00e      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805c:	d814      	bhi.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d015      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008066:	d10f      	bne.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008068:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	4a1a      	ldr	r2, [pc, #104]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800806e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008072:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008074:	e00c      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3304      	adds	r3, #4
 800807a:	2101      	movs	r1, #1
 800807c:	4618      	mov	r0, r3
 800807e:	f001 fd5b 	bl	8009b38 <RCCEx_PLL2_Config>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008086:	e003      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	75fb      	strb	r3, [r7, #23]
      break;
 800808c:	e000      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800808e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008096:	4b10      	ldr	r3, [pc, #64]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a2:	490d      	ldr	r1, [pc, #52]	; (80080d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	650b      	str	r3, [r1, #80]	; 0x50
 80080a8:	e001      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d033      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	2b03      	cmp	r3, #3
 80080c0:	d81c      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	08008103 	.word	0x08008103
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080eb 	.word	0x080080eb
 80080d4:	08008103 	.word	0x08008103
 80080d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080dc:	4bb8      	ldr	r3, [pc, #736]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4ab7      	ldr	r2, [pc, #732]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80080e8:	e00c      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3304      	adds	r3, #4
 80080ee:	2102      	movs	r1, #2
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 fd21 	bl	8009b38 <RCCEx_PLL2_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008100:	e000      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008104:	7dfb      	ldrb	r3, [r7, #23]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d109      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800810a:	4bad      	ldr	r3, [pc, #692]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800810c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810e:	f023 0203 	bic.w	r2, r3, #3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008116:	49aa      	ldr	r1, [pc, #680]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008118:	4313      	orrs	r3, r2
 800811a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800811c:	e001      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8086 	beq.w	800823c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008130:	4ba4      	ldr	r3, [pc, #656]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4aa3      	ldr	r2, [pc, #652]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800813a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800813c:	f7f9 fd18 	bl	8001b70 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008142:	e009      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008144:	f7f9 fd14 	bl	8001b70 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b64      	cmp	r3, #100	; 0x64
 8008150:	d902      	bls.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	75fb      	strb	r3, [r7, #23]
        break;
 8008156:	e005      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008158:	4b9a      	ldr	r3, [pc, #616]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0ef      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d166      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800816a:	4b95      	ldr	r3, [pc, #596]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800816c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008174:	4053      	eors	r3, r2
 8008176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800817a:	2b00      	cmp	r3, #0
 800817c:	d013      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800817e:	4b90      	ldr	r3, [pc, #576]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008186:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008188:	4b8d      	ldr	r3, [pc, #564]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800818a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818c:	4a8c      	ldr	r2, [pc, #560]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800818e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008192:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008194:	4b8a      	ldr	r3, [pc, #552]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008198:	4a89      	ldr	r2, [pc, #548]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800819a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800819e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80081a0:	4a87      	ldr	r2, [pc, #540]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b0:	d115      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b2:	f7f9 fcdd 	bl	8001b70 <HAL_GetTick>
 80081b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081b8:	e00b      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ba:	f7f9 fcd9 	bl	8001b70 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d902      	bls.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	75fb      	strb	r3, [r7, #23]
            break;
 80081d0:	e005      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081d2:	4b7b      	ldr	r3, [pc, #492]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0ed      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d126      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f2:	d10d      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80081f4:	4b72      	ldr	r3, [pc, #456]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008202:	0919      	lsrs	r1, r3, #4
 8008204:	4b70      	ldr	r3, [pc, #448]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008206:	400b      	ands	r3, r1
 8008208:	496d      	ldr	r1, [pc, #436]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800820a:	4313      	orrs	r3, r2
 800820c:	610b      	str	r3, [r1, #16]
 800820e:	e005      	b.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008210:	4b6b      	ldr	r3, [pc, #428]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	4a6a      	ldr	r2, [pc, #424]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008216:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800821a:	6113      	str	r3, [r2, #16]
 800821c:	4b68      	ldr	r3, [pc, #416]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800821e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800822a:	4965      	ldr	r1, [pc, #404]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800822c:	4313      	orrs	r3, r2
 800822e:	670b      	str	r3, [r1, #112]	; 0x70
 8008230:	e004      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	75bb      	strb	r3, [r7, #22]
 8008236:	e001      	b.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d07e      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800824c:	2b28      	cmp	r3, #40	; 0x28
 800824e:	d867      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	08008327 	.word	0x08008327
 800825c:	08008321 	.word	0x08008321
 8008260:	08008321 	.word	0x08008321
 8008264:	08008321 	.word	0x08008321
 8008268:	08008321 	.word	0x08008321
 800826c:	08008321 	.word	0x08008321
 8008270:	08008321 	.word	0x08008321
 8008274:	08008321 	.word	0x08008321
 8008278:	080082fd 	.word	0x080082fd
 800827c:	08008321 	.word	0x08008321
 8008280:	08008321 	.word	0x08008321
 8008284:	08008321 	.word	0x08008321
 8008288:	08008321 	.word	0x08008321
 800828c:	08008321 	.word	0x08008321
 8008290:	08008321 	.word	0x08008321
 8008294:	08008321 	.word	0x08008321
 8008298:	0800830f 	.word	0x0800830f
 800829c:	08008321 	.word	0x08008321
 80082a0:	08008321 	.word	0x08008321
 80082a4:	08008321 	.word	0x08008321
 80082a8:	08008321 	.word	0x08008321
 80082ac:	08008321 	.word	0x08008321
 80082b0:	08008321 	.word	0x08008321
 80082b4:	08008321 	.word	0x08008321
 80082b8:	08008327 	.word	0x08008327
 80082bc:	08008321 	.word	0x08008321
 80082c0:	08008321 	.word	0x08008321
 80082c4:	08008321 	.word	0x08008321
 80082c8:	08008321 	.word	0x08008321
 80082cc:	08008321 	.word	0x08008321
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008321 	.word	0x08008321
 80082d8:	08008327 	.word	0x08008327
 80082dc:	08008321 	.word	0x08008321
 80082e0:	08008321 	.word	0x08008321
 80082e4:	08008321 	.word	0x08008321
 80082e8:	08008321 	.word	0x08008321
 80082ec:	08008321 	.word	0x08008321
 80082f0:	08008321 	.word	0x08008321
 80082f4:	08008321 	.word	0x08008321
 80082f8:	08008327 	.word	0x08008327
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3304      	adds	r3, #4
 8008300:	2101      	movs	r1, #1
 8008302:	4618      	mov	r0, r3
 8008304:	f001 fc18 	bl	8009b38 <RCCEx_PLL2_Config>
 8008308:	4603      	mov	r3, r0
 800830a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800830c:	e00c      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3324      	adds	r3, #36	; 0x24
 8008312:	2101      	movs	r1, #1
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fcc1 	bl	8009c9c <RCCEx_PLL3_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800831e:	e003      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]
      break;
 8008324:	e000      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800832e:	4b24      	ldr	r3, [pc, #144]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008332:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800833a:	4921      	ldr	r1, [pc, #132]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800833c:	4313      	orrs	r3, r2
 800833e:	654b      	str	r3, [r1, #84]	; 0x54
 8008340:	e001      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0302 	and.w	r3, r3, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d03e      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008356:	2b05      	cmp	r3, #5
 8008358:	d820      	bhi.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	080083a3 	.word	0x080083a3
 8008364:	08008379 	.word	0x08008379
 8008368:	0800838b 	.word	0x0800838b
 800836c:	080083a3 	.word	0x080083a3
 8008370:	080083a3 	.word	0x080083a3
 8008374:	080083a3 	.word	0x080083a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3304      	adds	r3, #4
 800837c:	2101      	movs	r1, #1
 800837e:	4618      	mov	r0, r3
 8008380:	f001 fbda 	bl	8009b38 <RCCEx_PLL2_Config>
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008388:	e00c      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3324      	adds	r3, #36	; 0x24
 800838e:	2101      	movs	r1, #1
 8008390:	4618      	mov	r0, r3
 8008392:	f001 fc83 	bl	8009c9c <RCCEx_PLL3_Config>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800839a:	e003      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	75fb      	strb	r3, [r7, #23]
      break;
 80083a0:	e000      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80083a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d110      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80083aa:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	f023 0207 	bic.w	r2, r3, #7
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b6:	4902      	ldr	r1, [pc, #8]	; (80083c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	654b      	str	r3, [r1, #84]	; 0x54
 80083bc:	e008      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80083be:	bf00      	nop
 80083c0:	58024400 	.word	0x58024400
 80083c4:	58024800 	.word	0x58024800
 80083c8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d039      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e2:	2b05      	cmp	r3, #5
 80083e4:	d820      	bhi.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	0800842f 	.word	0x0800842f
 80083f0:	08008405 	.word	0x08008405
 80083f4:	08008417 	.word	0x08008417
 80083f8:	0800842f 	.word	0x0800842f
 80083fc:	0800842f 	.word	0x0800842f
 8008400:	0800842f 	.word	0x0800842f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3304      	adds	r3, #4
 8008408:	2101      	movs	r1, #1
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fb94 	bl	8009b38 <RCCEx_PLL2_Config>
 8008410:	4603      	mov	r3, r0
 8008412:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008414:	e00c      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3324      	adds	r3, #36	; 0x24
 800841a:	2101      	movs	r1, #1
 800841c:	4618      	mov	r0, r3
 800841e:	f001 fc3d 	bl	8009c9c <RCCEx_PLL3_Config>
 8008422:	4603      	mov	r3, r0
 8008424:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008426:	e003      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	75fb      	strb	r3, [r7, #23]
      break;
 800842c:	e000      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800842e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10a      	bne.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008436:	4bb7      	ldr	r3, [pc, #732]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843a:	f023 0207 	bic.w	r2, r3, #7
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008444:	49b3      	ldr	r1, [pc, #716]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008446:	4313      	orrs	r3, r2
 8008448:	658b      	str	r3, [r1, #88]	; 0x58
 800844a:	e001      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844c:	7dfb      	ldrb	r3, [r7, #23]
 800844e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0320 	and.w	r3, r3, #32
 8008458:	2b00      	cmp	r3, #0
 800845a:	d04b      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008466:	d02e      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800846c:	d828      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800846e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008472:	d02a      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008478:	d822      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800847a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800847e:	d026      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008480:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008484:	d81c      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800848a:	d010      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800848c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008490:	d816      	bhi.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008492:	2b00      	cmp	r3, #0
 8008494:	d01d      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800849a:	d111      	bne.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	2100      	movs	r1, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fb48 	bl	8009b38 <RCCEx_PLL2_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80084ac:	e012      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3324      	adds	r3, #36	; 0x24
 80084b2:	2102      	movs	r1, #2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fbf1 	bl	8009c9c <RCCEx_PLL3_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80084be:	e009      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	75fb      	strb	r3, [r7, #23]
      break;
 80084c4:	e006      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084c6:	bf00      	nop
 80084c8:	e004      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084ca:	bf00      	nop
 80084cc:	e002      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084ce:	bf00      	nop
 80084d0:	e000      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80084d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10a      	bne.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084da:	4b8e      	ldr	r3, [pc, #568]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e8:	498a      	ldr	r1, [pc, #552]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	654b      	str	r3, [r1, #84]	; 0x54
 80084ee:	e001      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d04b      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008506:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800850a:	d02e      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800850c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008510:	d828      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008516:	d02a      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851c:	d822      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800851e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008522:	d026      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008524:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008528:	d81c      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800852a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800852e:	d010      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008534:	d816      	bhi.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01d      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800853a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853e:	d111      	bne.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3304      	adds	r3, #4
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f001 faf6 	bl	8009b38 <RCCEx_PLL2_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008550:	e012      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3324      	adds	r3, #36	; 0x24
 8008556:	2102      	movs	r1, #2
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fb9f 	bl	8009c9c <RCCEx_PLL3_Config>
 800855e:	4603      	mov	r3, r0
 8008560:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008562:	e009      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	75fb      	strb	r3, [r7, #23]
      break;
 8008568:	e006      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800856a:	bf00      	nop
 800856c:	e004      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800856e:	bf00      	nop
 8008570:	e002      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008572:	bf00      	nop
 8008574:	e000      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800857e:	4b65      	ldr	r3, [pc, #404]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008582:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800858c:	4961      	ldr	r1, [pc, #388]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800858e:	4313      	orrs	r3, r2
 8008590:	658b      	str	r3, [r1, #88]	; 0x58
 8008592:	e001      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d04b      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085ae:	d02e      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80085b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80085b4:	d828      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ba:	d02a      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80085bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c0:	d822      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085c6:	d026      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80085c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80085cc:	d81c      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d2:	d010      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80085d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085d8:	d816      	bhi.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01d      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80085de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e2:	d111      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3304      	adds	r3, #4
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 faa4 	bl	8009b38 <RCCEx_PLL2_Config>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80085f4:	e012      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	3324      	adds	r3, #36	; 0x24
 80085fa:	2102      	movs	r1, #2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fb4d 	bl	8009c9c <RCCEx_PLL3_Config>
 8008602:	4603      	mov	r3, r0
 8008604:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008606:	e009      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	75fb      	strb	r3, [r7, #23]
      break;
 800860c:	e006      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800860e:	bf00      	nop
 8008610:	e004      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008612:	bf00      	nop
 8008614:	e002      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008616:	bf00      	nop
 8008618:	e000      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800861a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008622:	4b3c      	ldr	r3, [pc, #240]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008630:	4938      	ldr	r1, [pc, #224]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008632:	4313      	orrs	r3, r2
 8008634:	658b      	str	r3, [r1, #88]	; 0x58
 8008636:	e001      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008638:	7dfb      	ldrb	r3, [r7, #23]
 800863a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01a      	beq.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800864e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008652:	d10a      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	2102      	movs	r1, #2
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fb1e 	bl	8009c9c <RCCEx_PLL3_Config>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800866a:	4b2a      	ldr	r3, [pc, #168]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008678:	4926      	ldr	r1, [pc, #152]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800867a:	4313      	orrs	r3, r2
 800867c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b00      	cmp	r3, #0
 8008688:	d01a      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008694:	d10a      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3324      	adds	r3, #36	; 0x24
 800869a:	2102      	movs	r1, #2
 800869c:	4618      	mov	r0, r3
 800869e:	f001 fafd 	bl	8009c9c <RCCEx_PLL3_Config>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086ac:	4b19      	ldr	r3, [pc, #100]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ba:	4916      	ldr	r1, [pc, #88]	; (8008714 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d036      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086d6:	d01f      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80086d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086dc:	d817      	bhi.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80086e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086e6:	d009      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80086e8:	e011      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3304      	adds	r3, #4
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f001 fa21 	bl	8009b38 <RCCEx_PLL2_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80086fa:	e00e      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	3324      	adds	r3, #36	; 0x24
 8008700:	2102      	movs	r1, #2
 8008702:	4618      	mov	r0, r3
 8008704:	f001 faca 	bl	8009c9c <RCCEx_PLL3_Config>
 8008708:	4603      	mov	r3, r0
 800870a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800870c:	e005      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]
      break;
 8008712:	e002      	b.n	800871a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008714:	58024400 	.word	0x58024400
      break;
 8008718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008720:	4b93      	ldr	r3, [pc, #588]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800872e:	4990      	ldr	r1, [pc, #576]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008730:	4313      	orrs	r3, r2
 8008732:	658b      	str	r3, [r1, #88]	; 0x58
 8008734:	e001      	b.n	800873a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d033      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800874c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008750:	d01c      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008752:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008756:	d816      	bhi.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875c:	d003      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800875e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008762:	d007      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008764:	e00f      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008766:	4b82      	ldr	r3, [pc, #520]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	4a81      	ldr	r2, [pc, #516]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800876c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008772:	e00c      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3324      	adds	r3, #36	; 0x24
 8008778:	2101      	movs	r1, #1
 800877a:	4618      	mov	r0, r3
 800877c:	f001 fa8e 	bl	8009c9c <RCCEx_PLL3_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008784:	e003      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	75fb      	strb	r3, [r7, #23]
      break;
 800878a:	e000      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800878c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008794:	4b76      	ldr	r3, [pc, #472]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a2:	4973      	ldr	r1, [pc, #460]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	654b      	str	r3, [r1, #84]	; 0x54
 80087a8:	e001      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d029      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d003      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80087c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c6:	d007      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80087c8:	e00f      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087ca:	4b69      	ldr	r3, [pc, #420]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	4a68      	ldr	r2, [pc, #416]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80087d6:	e00b      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3304      	adds	r3, #4
 80087dc:	2102      	movs	r1, #2
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 f9aa 	bl	8009b38 <RCCEx_PLL2_Config>
 80087e4:	4603      	mov	r3, r0
 80087e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80087e8:	e002      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	75fb      	strb	r3, [r7, #23]
      break;
 80087ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80087f6:	4b5e      	ldr	r3, [pc, #376]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80087f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008802:	495b      	ldr	r1, [pc, #364]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008804:	4313      	orrs	r3, r2
 8008806:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008808:	e001      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	3324      	adds	r3, #36	; 0x24
 800881e:	2102      	movs	r1, #2
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fa3b 	bl	8009c9c <RCCEx_PLL3_Config>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d030      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008844:	d017      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800884a:	d811      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800884c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008850:	d013      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008856:	d80b      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800885c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008860:	d106      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008862:	4b43      	ldr	r3, [pc, #268]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	4a42      	ldr	r2, [pc, #264]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800886c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800886e:	e007      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	75fb      	strb	r3, [r7, #23]
      break;
 8008874:	e004      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008876:	bf00      	nop
 8008878:	e002      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800887a:	bf00      	nop
 800887c:	e000      	b.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800887e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008880:	7dfb      	ldrb	r3, [r7, #23]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d109      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008886:	4b3a      	ldr	r3, [pc, #232]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008892:	4937      	ldr	r1, [pc, #220]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008894:	4313      	orrs	r3, r2
 8008896:	654b      	str	r3, [r1, #84]	; 0x54
 8008898:	e001      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d008      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80088aa:	4b31      	ldr	r3, [pc, #196]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b6:	492e      	ldr	r1, [pc, #184]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d009      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80088c8:	4b29      	ldr	r3, [pc, #164]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088d6:	4926      	ldr	r1, [pc, #152]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088e8:	4b21      	ldr	r3, [pc, #132]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f4:	491e      	ldr	r1, [pc, #120]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00d      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008906:	4b1a      	ldr	r3, [pc, #104]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	4a19      	ldr	r2, [pc, #100]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800890c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008910:	6113      	str	r3, [r2, #16]
 8008912:	4b17      	ldr	r3, [pc, #92]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008914:	691a      	ldr	r2, [r3, #16]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800891c:	4914      	ldr	r1, [pc, #80]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	da08      	bge.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800892a:	4b11      	ldr	r3, [pc, #68]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800892c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008936:	490e      	ldr	r1, [pc, #56]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008938:	4313      	orrs	r3, r2
 800893a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d009      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008948:	4b09      	ldr	r3, [pc, #36]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800894a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800894c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008956:	4906      	ldr	r1, [pc, #24]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008958:	4313      	orrs	r3, r2
 800895a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800895c:	7dbb      	ldrb	r3, [r7, #22]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e000      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
}
 8008968:	4618      	mov	r0, r3
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	58024400 	.word	0x58024400

08008974 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b090      	sub	sp, #64	; 0x40
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008982:	f040 8095 	bne.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008986:	4bae      	ldr	r3, [pc, #696]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	633b      	str	r3, [r7, #48]	; 0x30
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	2b04      	cmp	r3, #4
 8008994:	f200 8088 	bhi.w	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008998:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	080089b5 	.word	0x080089b5
 80089a4:	080089dd 	.word	0x080089dd
 80089a8:	08008a05 	.word	0x08008a05
 80089ac:	08008aa1 	.word	0x08008aa1
 80089b0:	08008a2d 	.word	0x08008a2d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089b4:	4ba2      	ldr	r3, [pc, #648]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089c0:	d108      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 ff64 	bl	8009894 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80089cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089d0:	f000 bc95 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d8:	f000 bc91 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089dc:	4b98      	ldr	r3, [pc, #608]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e8:	d108      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ea:	f107 0318 	add.w	r3, r7, #24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fca8 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089f8:	f000 bc81 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a00:	f000 bc7d 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a04:	4b8e      	ldr	r3, [pc, #568]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a10:	d108      	bne.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a12:	f107 030c 	add.w	r3, r7, #12
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fde8 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a20:	f000 bc6d 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a28:	f000 bc69 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a2c:	4b84      	ldr	r3, [pc, #528]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a34:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a36:	4b82      	ldr	r3, [pc, #520]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0304 	and.w	r3, r3, #4
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d10c      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d109      	bne.n	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a48:	4b7d      	ldr	r3, [pc, #500]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	08db      	lsrs	r3, r3, #3
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	4a7c      	ldr	r2, [pc, #496]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
 8008a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a5a:	e01f      	b.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a5c:	4b78      	ldr	r3, [pc, #480]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a68:	d106      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a70:	d102      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a72:	4b75      	ldr	r3, [pc, #468]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a76:	e011      	b.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a78:	4b71      	ldr	r3, [pc, #452]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a84:	d106      	bne.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a8c:	d102      	bne.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a8e:	4b6f      	ldr	r3, [pc, #444]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a92:	e003      	b.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a98:	f000 bc31 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a9c:	f000 bc2f 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008aa0:	4b6b      	ldr	r3, [pc, #428]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa4:	f000 bc2b 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aac:	f000 bc27 	b.w	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab6:	f040 8095 	bne.w	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008aba:	4b61      	ldr	r3, [pc, #388]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008abe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008ac2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aca:	d04d      	beq.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad2:	f200 8084 	bhi.w	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	2bc0      	cmp	r3, #192	; 0xc0
 8008ada:	d07d      	beq.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	2bc0      	cmp	r3, #192	; 0xc0
 8008ae0:	d87d      	bhi.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	2b80      	cmp	r3, #128	; 0x80
 8008ae6:	d02d      	beq.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aea:	2b80      	cmp	r3, #128	; 0x80
 8008aec:	d877      	bhi.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	2b40      	cmp	r3, #64	; 0x40
 8008af8:	d012      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008afa:	e070      	b.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008afc:	4b50      	ldr	r3, [pc, #320]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b08:	d107      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 fec0 	bl	8009894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b18:	e3f1      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b1e:	e3ee      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b20:	4b47      	ldr	r3, [pc, #284]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b2c:	d107      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b2e:	f107 0318 	add.w	r3, r7, #24
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fc06 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b3c:	e3df      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b42:	e3dc      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b44:	4b3e      	ldr	r3, [pc, #248]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b50:	d107      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b52:	f107 030c 	add.w	r3, r7, #12
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 fd48 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b60:	e3cd      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008b62:	2300      	movs	r3, #0
 8008b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b66:	e3ca      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b68:	4b35      	ldr	r3, [pc, #212]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b70:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b72:	4b33      	ldr	r3, [pc, #204]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d10c      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d109      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b84:	4b2e      	ldr	r3, [pc, #184]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	08db      	lsrs	r3, r3, #3
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	4a2d      	ldr	r2, [pc, #180]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b96:	e01e      	b.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b98:	4b29      	ldr	r3, [pc, #164]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ba4:	d106      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bac:	d102      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bae:	4b26      	ldr	r3, [pc, #152]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb2:	e010      	b.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bb4:	4b22      	ldr	r3, [pc, #136]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc0:	d106      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bc8:	d102      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bca:	4b20      	ldr	r3, [pc, #128]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bce:	e002      	b.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008bd4:	e393      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008bd6:	e392      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bd8:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bdc:	e38f      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008bde:	2300      	movs	r3, #0
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be2:	e38c      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bea:	f040 80a7 	bne.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008bee:	4b14      	ldr	r3, [pc, #80]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008bf6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bfe:	d05f      	beq.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c06:	f200 8096 	bhi.w	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c10:	f000 808e 	beq.w	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c1a:	f200 808c 	bhi.w	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c24:	d03a      	beq.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c2c:	f200 8083 	bhi.w	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00e      	beq.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c3c:	d01c      	beq.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008c3e:	e07a      	b.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008c40:	58024400 	.word	0x58024400
 8008c44:	03d09000 	.word	0x03d09000
 8008c48:	003d0900 	.word	0x003d0900
 8008c4c:	00f42400 	.word	0x00f42400
 8008c50:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c54:	4baa      	ldr	r3, [pc, #680]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c60:	d107      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fe14 	bl	8009894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c70:	e345      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c76:	e342      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c78:	4ba1      	ldr	r3, [pc, #644]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c84:	d107      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c86:	f107 0318 	add.w	r3, r7, #24
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 fb5a 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c94:	e333      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c9a:	e330      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c9c:	4b98      	ldr	r3, [pc, #608]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca8:	d107      	bne.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fc9c 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cb8:	e321      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cbe:	e31e      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cc0:	4b8f      	ldr	r3, [pc, #572]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cca:	4b8d      	ldr	r3, [pc, #564]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d10c      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d109      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cdc:	4b88      	ldr	r3, [pc, #544]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	08db      	lsrs	r3, r3, #3
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	4a87      	ldr	r2, [pc, #540]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cee:	e01e      	b.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cf0:	4b83      	ldr	r3, [pc, #524]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cfc:	d106      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d04:	d102      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d06:	4b80      	ldr	r3, [pc, #512]	; (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d0a:	e010      	b.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d0c:	4b7c      	ldr	r3, [pc, #496]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d18:	d106      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d20:	d102      	bne.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d22:	4b7a      	ldr	r3, [pc, #488]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d26:	e002      	b.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d2c:	e2e7      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d2e:	e2e6      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d30:	4b77      	ldr	r3, [pc, #476]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008d32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d34:	e2e3      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3a:	e2e0      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d42:	f040 809c 	bne.w	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008d46:	4b6e      	ldr	r3, [pc, #440]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008d4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d56:	d054      	beq.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d5e:	f200 808b 	bhi.w	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d68:	f000 8083 	beq.w	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d72:	f200 8081 	bhi.w	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d7c:	d02f      	beq.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d84:	d878      	bhi.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d004      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d92:	d012      	beq.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008d94:	e070      	b.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d96:	4b5a      	ldr	r3, [pc, #360]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008da2:	d107      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fd73 	bl	8009894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008db2:	e2a4      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db8:	e2a1      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dba:	4b51      	ldr	r3, [pc, #324]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc6:	d107      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc8:	f107 0318 	add.w	r3, r7, #24
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fab9 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008dd6:	e292      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ddc:	e28f      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dde:	4b48      	ldr	r3, [pc, #288]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dea:	d107      	bne.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dec:	f107 030c 	add.w	r3, r7, #12
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fbfb 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dfa:	e280      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e00:	e27d      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e02:	4b3f      	ldr	r3, [pc, #252]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e0a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e0c:	4b3c      	ldr	r3, [pc, #240]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d10c      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d109      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e1e:	4b38      	ldr	r3, [pc, #224]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	08db      	lsrs	r3, r3, #3
 8008e24:	f003 0303 	and.w	r3, r3, #3
 8008e28:	4a36      	ldr	r2, [pc, #216]	; (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e30:	e01e      	b.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e32:	4b33      	ldr	r3, [pc, #204]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3e:	d106      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e46:	d102      	bne.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e48:	4b2f      	ldr	r3, [pc, #188]	; (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e4c:	e010      	b.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e4e:	4b2c      	ldr	r3, [pc, #176]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e5a:	d106      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e62:	d102      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e64:	4b29      	ldr	r3, [pc, #164]	; (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e68:	e002      	b.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e6e:	e246      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e70:	e245      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e72:	4b27      	ldr	r3, [pc, #156]	; (8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e76:	e242      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7c:	e23f      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e84:	f040 80a8 	bne.w	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008e88:	4b1d      	ldr	r3, [pc, #116]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008e90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e98:	d060      	beq.n	8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ea0:	f200 8097 	bhi.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008eaa:	f000 808f 	beq.w	8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008eb4:	f200 808d 	bhi.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ebe:	d03b      	beq.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec6:	f200 8084 	bhi.w	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ed6:	d01d      	beq.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008ed8:	e07b      	b.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eda:	4b09      	ldr	r3, [pc, #36]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ee6:	d107      	bne.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fcd1 	bl	8009894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ef6:	e202      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008efc:	e1ff      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008efe:	bf00      	nop
 8008f00:	58024400 	.word	0x58024400
 8008f04:	03d09000 	.word	0x03d09000
 8008f08:	003d0900 	.word	0x003d0900
 8008f0c:	00f42400 	.word	0x00f42400
 8008f10:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f14:	4ba3      	ldr	r3, [pc, #652]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f20:	d107      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f22:	f107 0318 	add.w	r3, r7, #24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fa0c 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f30:	e1e5      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f32:	2300      	movs	r3, #0
 8008f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f36:	e1e2      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f38:	4b9a      	ldr	r3, [pc, #616]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f44:	d107      	bne.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f46:	f107 030c 	add.w	r3, r7, #12
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fb4e 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f54:	e1d3      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f5a:	e1d0      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f5c:	4b91      	ldr	r3, [pc, #580]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f64:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f66:	4b8f      	ldr	r3, [pc, #572]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0304 	and.w	r3, r3, #4
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d10c      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d109      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f78:	4b8a      	ldr	r3, [pc, #552]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	4a89      	ldr	r2, [pc, #548]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8a:	e01e      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f8c:	4b85      	ldr	r3, [pc, #532]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f98:	d106      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fa0:	d102      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fa2:	4b82      	ldr	r3, [pc, #520]	; (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa6:	e010      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fa8:	4b7e      	ldr	r3, [pc, #504]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fb4:	d106      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fbc:	d102      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fbe:	4b7c      	ldr	r3, [pc, #496]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fc2:	e002      	b.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fc8:	e199      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fca:	e198      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fcc:	4b79      	ldr	r3, [pc, #484]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd0:	e195      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd6:	e192      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fde:	d173      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008fe0:	4b70      	ldr	r3, [pc, #448]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fe8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff0:	d02f      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff8:	d863      	bhi.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009006:	d012      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8009008:	e05b      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800900a:	4b66      	ldr	r3, [pc, #408]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009016:	d107      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009018:	f107 0318 	add.w	r3, r7, #24
 800901c:	4618      	mov	r0, r3
 800901e:	f000 f991 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009026:	e16a      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800902c:	e167      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800902e:	4b5d      	ldr	r3, [pc, #372]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800903a:	d107      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800903c:	f107 030c 	add.w	r3, r7, #12
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fad3 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800904a:	e158      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009050:	e155      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009052:	4b54      	ldr	r3, [pc, #336]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800905a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800905c:	4b51      	ldr	r3, [pc, #324]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0304 	and.w	r3, r3, #4
 8009064:	2b04      	cmp	r3, #4
 8009066:	d10c      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800906e:	4b4d      	ldr	r3, [pc, #308]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	4a4b      	ldr	r2, [pc, #300]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800907a:	fa22 f303 	lsr.w	r3, r2, r3
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009080:	e01e      	b.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009082:	4b48      	ldr	r3, [pc, #288]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800908e:	d106      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009096:	d102      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009098:	4b44      	ldr	r3, [pc, #272]	; (80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800909a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800909c:	e010      	b.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800909e:	4b41      	ldr	r3, [pc, #260]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090aa:	d106      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80090ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b2:	d102      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80090b4:	4b3e      	ldr	r3, [pc, #248]	; (80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80090b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090b8:	e002      	b.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80090be:	e11e      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80090c0:	e11d      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090c6:	e11a      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ce:	d133      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80090d0:	4b34      	ldr	r3, [pc, #208]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d004      	beq.n	80090ea <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e6:	d012      	beq.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80090e8:	e023      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090ea:	4b2e      	ldr	r3, [pc, #184]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090f6:	d107      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fbc9 	bl	8009894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009106:	e0fa      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009108:	2300      	movs	r3, #0
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800910c:	e0f7      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800910e:	4b25      	ldr	r3, [pc, #148]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800911a:	d107      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911c:	f107 0318 	add.w	r3, r7, #24
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f90f 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800912a:	e0e8      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009130:	e0e5      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009132:	2300      	movs	r3, #0
 8009134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009136:	e0e2      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800913e:	f040 808f 	bne.w	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009142:	4b18      	ldr	r3, [pc, #96]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009146:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800914a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009152:	d075      	beq.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800915a:	d87e      	bhi.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800915c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009162:	d060      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916a:	d876      	bhi.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009172:	d045      	beq.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8009174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009176:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800917a:	d86e      	bhi.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009182:	d02b      	beq.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800918a:	d866      	bhi.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009198:	d00e      	beq.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800919a:	e05e      	b.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800919c:	f000 f8bc 	bl	8009318 <HAL_RCCEx_GetD3PCLK1Freq>
 80091a0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80091a2:	e0ac      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091a4:	58024400 	.word	0x58024400
 80091a8:	03d09000 	.word	0x03d09000
 80091ac:	003d0900 	.word	0x003d0900
 80091b0:	00f42400 	.word	0x00f42400
 80091b4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091b8:	4b53      	ldr	r3, [pc, #332]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c4:	d107      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c6:	f107 0318 	add.w	r3, r7, #24
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f8ba 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091d4:	e093      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091d6:	2300      	movs	r3, #0
 80091d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091da:	e090      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091dc:	4b4a      	ldr	r3, [pc, #296]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e8:	d107      	bne.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f9fc 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091f8:	e081      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091fe:	e07e      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009200:	4b41      	ldr	r3, [pc, #260]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b04      	cmp	r3, #4
 800920a:	d109      	bne.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800920c:	4b3e      	ldr	r3, [pc, #248]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	08db      	lsrs	r3, r3, #3
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	4a3d      	ldr	r2, [pc, #244]	; (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009218:	fa22 f303 	lsr.w	r3, r2, r3
 800921c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800921e:	e06e      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009224:	e06b      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009226:	4b38      	ldr	r3, [pc, #224]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009232:	d102      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009234:	4b36      	ldr	r3, [pc, #216]	; (8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009236:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009238:	e061      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800923e:	e05e      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009240:	4b31      	ldr	r3, [pc, #196]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800924c:	d102      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 800924e:	4b31      	ldr	r3, [pc, #196]	; (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009250:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009252:	e054      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009258:	e051      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800925e:	e04e      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009266:	d148      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009268:	4b27      	ldr	r3, [pc, #156]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009270:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009278:	d02a      	beq.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800927a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009280:	d838      	bhi.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	d004      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800928e:	d00d      	beq.n	80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009290:	e030      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009292:	4b1d      	ldr	r3, [pc, #116]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800929a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800929e:	d102      	bne.n	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 80092a0:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092a4:	e02b      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092aa:	e028      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092ac:	4b16      	ldr	r3, [pc, #88]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092b8:	d107      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fae8 	bl	8009894 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092c8:	e019      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092ce:	e016      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092d0:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092dc:	d107      	bne.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092de:	f107 0318 	add.w	r3, r7, #24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 f82e 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092ec:	e007      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f2:	e004      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f8:	e001      	b.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80092fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009300:	4618      	mov	r0, r3
 8009302:	3740      	adds	r7, #64	; 0x40
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	58024400 	.word	0x58024400
 800930c:	03d09000 	.word	0x03d09000
 8009310:	003d0900 	.word	0x003d0900
 8009314:	00f42400 	.word	0x00f42400

08009318 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800931c:	f7fe fb4c 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 8009320:	4602      	mov	r2, r0
 8009322:	4b06      	ldr	r3, [pc, #24]	; (800933c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	091b      	lsrs	r3, r3, #4
 8009328:	f003 0307 	and.w	r3, r3, #7
 800932c:	4904      	ldr	r1, [pc, #16]	; (8009340 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800932e:	5ccb      	ldrb	r3, [r1, r3]
 8009330:	f003 031f 	and.w	r3, r3, #31
 8009334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009338:	4618      	mov	r0, r3
 800933a:	bd80      	pop	{r7, pc}
 800933c:	58024400 	.word	0x58024400
 8009340:	08015890 	.word	0x08015890

08009344 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009344:	b480      	push	{r7}
 8009346:	b089      	sub	sp, #36	; 0x24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800934c:	4ba1      	ldr	r3, [pc, #644]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800934e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009350:	f003 0303 	and.w	r3, r3, #3
 8009354:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009356:	4b9f      	ldr	r3, [pc, #636]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935a:	0b1b      	lsrs	r3, r3, #12
 800935c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009360:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009362:	4b9c      	ldr	r3, [pc, #624]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009366:	091b      	lsrs	r3, r3, #4
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800936e:	4b99      	ldr	r3, [pc, #612]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009372:	08db      	lsrs	r3, r3, #3
 8009374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	fb02 f303 	mul.w	r3, r2, r3
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8111 	beq.w	80095b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b02      	cmp	r3, #2
 8009396:	f000 8083 	beq.w	80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b02      	cmp	r3, #2
 800939e:	f200 80a1 	bhi.w	80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d056      	beq.n	800945c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80093ae:	e099      	b.n	80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093b0:	4b88      	ldr	r3, [pc, #544]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d02d      	beq.n	8009418 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093bc:	4b85      	ldr	r3, [pc, #532]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	08db      	lsrs	r3, r3, #3
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	4a84      	ldr	r2, [pc, #528]	; (80095d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80093c8:	fa22 f303 	lsr.w	r3, r2, r3
 80093cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	ee07 3a90 	vmov	s15, r3
 80093de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e6:	4b7b      	ldr	r3, [pc, #492]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800940a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009412:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009416:	e087      	b.n	8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009422:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800942a:	4b6a      	ldr	r3, [pc, #424]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800943a:	ed97 6a03 	vldr	s12, [r7, #12]
 800943e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800944a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800944e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800945a:	e065      	b.n	8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800946a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946e:	4b59      	ldr	r3, [pc, #356]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009482:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800949e:	e043      	b.n	8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80094ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b2:	4b48      	ldr	r3, [pc, #288]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094e2:	e021      	b.n	8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f6:	4b37      	ldr	r3, [pc, #220]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009506:	ed97 6a03 	vldr	s12, [r7, #12]
 800950a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800950e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800951a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009526:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009528:	4b2a      	ldr	r3, [pc, #168]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	0a5b      	lsrs	r3, r3, #9
 800952e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800953e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009542:	edd7 6a07 	vldr	s13, [r7, #28]
 8009546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800954a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954e:	ee17 2a90 	vmov	r2, s15
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009556:	4b1f      	ldr	r3, [pc, #124]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009560:	ee07 3a90 	vmov	s15, r3
 8009564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800956c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009570:	edd7 6a07 	vldr	s13, [r7, #28]
 8009574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800957c:	ee17 2a90 	vmov	r2, s15
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009584:	4b13      	ldr	r3, [pc, #76]	; (80095d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009588:	0e1b      	lsrs	r3, r3, #24
 800958a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800959a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800959e:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095aa:	ee17 2a90 	vmov	r2, s15
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80095b2:	e008      	b.n	80095c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	609a      	str	r2, [r3, #8]
}
 80095c6:	bf00      	nop
 80095c8:	3724      	adds	r7, #36	; 0x24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	58024400 	.word	0x58024400
 80095d8:	03d09000 	.word	0x03d09000
 80095dc:	46000000 	.word	0x46000000
 80095e0:	4c742400 	.word	0x4c742400
 80095e4:	4a742400 	.word	0x4a742400
 80095e8:	4b742400 	.word	0x4b742400

080095ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b089      	sub	sp, #36	; 0x24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095f4:	4ba1      	ldr	r3, [pc, #644]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	f003 0303 	and.w	r3, r3, #3
 80095fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80095fe:	4b9f      	ldr	r3, [pc, #636]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	0d1b      	lsrs	r3, r3, #20
 8009604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009608:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800960a:	4b9c      	ldr	r3, [pc, #624]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800960c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009616:	4b99      	ldr	r3, [pc, #612]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961a:	08db      	lsrs	r3, r3, #3
 800961c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	fb02 f303 	mul.w	r3, r2, r3
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 8111 	beq.w	800985c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b02      	cmp	r3, #2
 800963e:	f000 8083 	beq.w	8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b02      	cmp	r3, #2
 8009646:	f200 80a1 	bhi.w	800978c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d003      	beq.n	8009658 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d056      	beq.n	8009704 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009656:	e099      	b.n	800978c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009658:	4b88      	ldr	r3, [pc, #544]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0320 	and.w	r3, r3, #32
 8009660:	2b00      	cmp	r3, #0
 8009662:	d02d      	beq.n	80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009664:	4b85      	ldr	r3, [pc, #532]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	08db      	lsrs	r3, r3, #3
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	4a84      	ldr	r2, [pc, #528]	; (8009880 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009670:	fa22 f303 	lsr.w	r3, r2, r3
 8009674:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968e:	4b7b      	ldr	r3, [pc, #492]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969e:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096be:	e087      	b.n	80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80096ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d2:	4b6a      	ldr	r3, [pc, #424]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009702:	e065      	b.n	80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800988c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009716:	4b59      	ldr	r3, [pc, #356]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009726:	ed97 6a03 	vldr	s12, [r7, #12]
 800972a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800972e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800973a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009742:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009746:	e043      	b.n	80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009752:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009890 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975a:	4b48      	ldr	r3, [pc, #288]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976a:	ed97 6a03 	vldr	s12, [r7, #12]
 800976e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800978a:	e021      	b.n	80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009796:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800988c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800979a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979e:	4b37      	ldr	r3, [pc, #220]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a6:	ee07 3a90 	vmov	s15, r3
 80097aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80097b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009884 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80097d0:	4b2a      	ldr	r3, [pc, #168]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	0a5b      	lsrs	r3, r3, #9
 80097d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80097ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f6:	ee17 2a90 	vmov	r2, s15
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80097fe:	4b1f      	ldr	r3, [pc, #124]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009810:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009814:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009818:	edd7 6a07 	vldr	s13, [r7, #28]
 800981c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009824:	ee17 2a90 	vmov	r2, s15
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800982c:	4b13      	ldr	r3, [pc, #76]	; (800987c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800982e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009830:	0e1b      	lsrs	r3, r3, #24
 8009832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009842:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009846:	edd7 6a07 	vldr	s13, [r7, #28]
 800984a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800984e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009852:	ee17 2a90 	vmov	r2, s15
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800985a:	e008      	b.n	800986e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	609a      	str	r2, [r3, #8]
}
 800986e:	bf00      	nop
 8009870:	3724      	adds	r7, #36	; 0x24
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	58024400 	.word	0x58024400
 8009880:	03d09000 	.word	0x03d09000
 8009884:	46000000 	.word	0x46000000
 8009888:	4c742400 	.word	0x4c742400
 800988c:	4a742400 	.word	0x4a742400
 8009890:	4b742400 	.word	0x4b742400

08009894 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009894:	b480      	push	{r7}
 8009896:	b089      	sub	sp, #36	; 0x24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800989c:	4ba0      	ldr	r3, [pc, #640]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a0:	f003 0303 	and.w	r3, r3, #3
 80098a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80098a6:	4b9e      	ldr	r3, [pc, #632]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098aa:	091b      	lsrs	r3, r3, #4
 80098ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80098b2:	4b9b      	ldr	r3, [pc, #620]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80098bc:	4b98      	ldr	r3, [pc, #608]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c0:	08db      	lsrs	r3, r3, #3
 80098c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	fb02 f303 	mul.w	r3, r2, r3
 80098cc:	ee07 3a90 	vmov	s15, r3
 80098d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 8111 	beq.w	8009b02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	f000 8083 	beq.w	80099ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	f200 80a1 	bhi.w	8009a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d003      	beq.n	80098fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d056      	beq.n	80099aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80098fc:	e099      	b.n	8009a32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098fe:	4b88      	ldr	r3, [pc, #544]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d02d      	beq.n	8009966 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800990a:	4b85      	ldr	r3, [pc, #532]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	08db      	lsrs	r3, r3, #3
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	4a83      	ldr	r2, [pc, #524]	; (8009b24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009916:	fa22 f303 	lsr.w	r3, r2, r3
 800991a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	ee07 3a90 	vmov	s15, r3
 800992c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009934:	4b7a      	ldr	r3, [pc, #488]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993c:	ee07 3a90 	vmov	s15, r3
 8009940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009944:	ed97 6a03 	vldr	s12, [r7, #12]
 8009948:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800994c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009960:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009964:	e087      	b.n	8009a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	ee07 3a90 	vmov	s15, r3
 800996c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009970:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009978:	4b69      	ldr	r3, [pc, #420]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800997a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009980:	ee07 3a90 	vmov	s15, r3
 8009984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009988:	ed97 6a03 	vldr	s12, [r7, #12]
 800998c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009998:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a8:	e065      	b.n	8009a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	ee07 3a90 	vmov	s15, r3
 80099b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009b30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80099b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099bc:	4b58      	ldr	r3, [pc, #352]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80099d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ec:	e043      	b.n	8009a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	ee07 3a90 	vmov	s15, r3
 80099f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009b34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80099fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a00:	4b47      	ldr	r3, [pc, #284]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a08:	ee07 3a90 	vmov	s15, r3
 8009a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a14:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a30:	e021      	b.n	8009a76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	ee07 3a90 	vmov	s15, r3
 8009a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009b2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a44:	4b36      	ldr	r3, [pc, #216]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4c:	ee07 3a90 	vmov	s15, r3
 8009a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a58:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009b28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009a76:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7a:	0a5b      	lsrs	r3, r3, #9
 8009a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a9c:	ee17 2a90 	vmov	r2, s15
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009aa4:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa8:	0c1b      	lsrs	r3, r3, #16
 8009aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009abe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aca:	ee17 2a90 	vmov	r2, s15
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009ad2:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad6:	0e1b      	lsrs	r3, r3, #24
 8009ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009adc:	ee07 3a90 	vmov	s15, r3
 8009ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8009af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009af8:	ee17 2a90 	vmov	r2, s15
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009b00:	e008      	b.n	8009b14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	609a      	str	r2, [r3, #8]
}
 8009b14:	bf00      	nop
 8009b16:	3724      	adds	r7, #36	; 0x24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	58024400 	.word	0x58024400
 8009b24:	03d09000 	.word	0x03d09000
 8009b28:	46000000 	.word	0x46000000
 8009b2c:	4c742400 	.word	0x4c742400
 8009b30:	4a742400 	.word	0x4a742400
 8009b34:	4b742400 	.word	0x4b742400

08009b38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b46:	4b53      	ldr	r3, [pc, #332]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	f003 0303 	and.w	r3, r3, #3
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d101      	bne.n	8009b56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e099      	b.n	8009c8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b56:	4b4f      	ldr	r3, [pc, #316]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a4e      	ldr	r2, [pc, #312]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b62:	f7f8 f805 	bl	8001b70 <HAL_GetTick>
 8009b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b68:	e008      	b.n	8009b7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b6a:	f7f8 f801 	bl	8001b70 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d901      	bls.n	8009b7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e086      	b.n	8009c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b7c:	4b45      	ldr	r3, [pc, #276]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1f0      	bne.n	8009b6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b88:	4b42      	ldr	r3, [pc, #264]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	031b      	lsls	r3, r3, #12
 8009b96:	493f      	ldr	r1, [pc, #252]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	025b      	lsls	r3, r3, #9
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	041b      	lsls	r3, r3, #16
 8009bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	061b      	lsls	r3, r3, #24
 8009bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bcc:	4931      	ldr	r1, [pc, #196]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009bd2:	4b30      	ldr	r3, [pc, #192]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	492d      	ldr	r1, [pc, #180]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009be4:	4b2b      	ldr	r3, [pc, #172]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	f023 0220 	bic.w	r2, r3, #32
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	4928      	ldr	r1, [pc, #160]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009bf6:	4b27      	ldr	r3, [pc, #156]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfa:	4a26      	ldr	r2, [pc, #152]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009bfc:	f023 0310 	bic.w	r3, r3, #16
 8009c00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c02:	4b24      	ldr	r3, [pc, #144]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c06:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <RCCEx_PLL2_Config+0x160>)
 8009c08:	4013      	ands	r3, r2
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	69d2      	ldr	r2, [r2, #28]
 8009c0e:	00d2      	lsls	r2, r2, #3
 8009c10:	4920      	ldr	r1, [pc, #128]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c16:	4b1f      	ldr	r3, [pc, #124]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	4a1e      	ldr	r2, [pc, #120]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c1c:	f043 0310 	orr.w	r3, r3, #16
 8009c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d106      	bne.n	8009c36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c28:	4b1a      	ldr	r3, [pc, #104]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a19      	ldr	r2, [pc, #100]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c34:	e00f      	b.n	8009c56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d106      	bne.n	8009c4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c3c:	4b15      	ldr	r3, [pc, #84]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c40:	4a14      	ldr	r2, [pc, #80]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c48:	e005      	b.n	8009c56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c4a:	4b12      	ldr	r3, [pc, #72]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c4e:	4a11      	ldr	r2, [pc, #68]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c56:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a0e      	ldr	r2, [pc, #56]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c62:	f7f7 ff85 	bl	8001b70 <HAL_GetTick>
 8009c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c68:	e008      	b.n	8009c7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c6a:	f7f7 ff81 	bl	8001b70 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e006      	b.n	8009c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <RCCEx_PLL2_Config+0x15c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0f0      	beq.n	8009c6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	58024400 	.word	0x58024400
 8009c98:	ffff0007 	.word	0xffff0007

08009c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009caa:	4b53      	ldr	r3, [pc, #332]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d101      	bne.n	8009cba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e099      	b.n	8009dee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009cba:	4b4f      	ldr	r3, [pc, #316]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a4e      	ldr	r2, [pc, #312]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cc6:	f7f7 ff53 	bl	8001b70 <HAL_GetTick>
 8009cca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ccc:	e008      	b.n	8009ce0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cce:	f7f7 ff4f 	bl	8001b70 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d901      	bls.n	8009ce0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e086      	b.n	8009dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ce0:	4b45      	ldr	r3, [pc, #276]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f0      	bne.n	8009cce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009cec:	4b42      	ldr	r3, [pc, #264]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	051b      	lsls	r3, r3, #20
 8009cfa:	493f      	ldr	r1, [pc, #252]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	025b      	lsls	r3, r3, #9
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	431a      	orrs	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	041b      	lsls	r3, r3, #16
 8009d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d22:	431a      	orrs	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	061b      	lsls	r3, r3, #24
 8009d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d30:	4931      	ldr	r1, [pc, #196]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d36:	4b30      	ldr	r3, [pc, #192]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	492d      	ldr	r1, [pc, #180]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d44:	4313      	orrs	r3, r2
 8009d46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d48:	4b2b      	ldr	r3, [pc, #172]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	4928      	ldr	r1, [pc, #160]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d5a:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5e:	4a26      	ldr	r2, [pc, #152]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d66:	4b24      	ldr	r3, [pc, #144]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d6a:	4b24      	ldr	r3, [pc, #144]	; (8009dfc <RCCEx_PLL3_Config+0x160>)
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	69d2      	ldr	r2, [r2, #28]
 8009d72:	00d2      	lsls	r2, r2, #3
 8009d74:	4920      	ldr	r1, [pc, #128]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d7a:	4b1f      	ldr	r3, [pc, #124]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7e:	4a1e      	ldr	r2, [pc, #120]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d106      	bne.n	8009d9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d8c:	4b1a      	ldr	r3, [pc, #104]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d90:	4a19      	ldr	r2, [pc, #100]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d98:	e00f      	b.n	8009dba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d106      	bne.n	8009dae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009da0:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	4a14      	ldr	r2, [pc, #80]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009da6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009dac:	e005      	b.n	8009dba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009dae:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	4a11      	ldr	r2, [pc, #68]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009db8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009dba:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a0e      	ldr	r2, [pc, #56]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dc6:	f7f7 fed3 	bl	8001b70 <HAL_GetTick>
 8009dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dcc:	e008      	b.n	8009de0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009dce:	f7f7 fecf 	bl	8001b70 <HAL_GetTick>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d901      	bls.n	8009de0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ddc:	2303      	movs	r3, #3
 8009dde:	e006      	b.n	8009dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <RCCEx_PLL3_Config+0x15c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0f0      	beq.n	8009dce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	58024400 	.word	0x58024400
 8009dfc:	ffff0007 	.word	0xffff0007

08009e00 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b08a      	sub	sp, #40	; 0x28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e075      	b.n	8009efe <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d105      	bne.n	8009e2a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7f7 f875 	bl	8000f14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2203      	movs	r2, #3
 8009e2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 f868 	bl	8009f08 <HAL_SD_InitCard>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e05d      	b.n	8009efe <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009e42:	f107 0308 	add.w	r3, r7, #8
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fda5 	bl	800a998 <HAL_SD_GetCardStatus>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e052      	b.n	8009efe <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009e58:	7e3b      	ldrb	r3, [r7, #24]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009e5e:	7e7b      	ldrb	r3, [r7, #25]
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d10a      	bne.n	8009e82 <HAL_SD_Init+0x82>
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d102      	bne.n	8009e78 <HAL_SD_Init+0x78>
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d004      	beq.n	8009e82 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e7e:	659a      	str	r2, [r3, #88]	; 0x58
 8009e80:	e00b      	b.n	8009e9a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d104      	bne.n	8009e94 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e90:	659a      	str	r2, [r3, #88]	; 0x58
 8009e92:	e002      	b.n	8009e9a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fe5b 	bl	800ab5c <HAL_SD_ConfigWideBusOperation>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d001      	beq.n	8009eb0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e026      	b.n	8009efe <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009eb0:	f7f7 fe5e 	bl	8001b70 <HAL_GetTick>
 8009eb4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009eb6:	e011      	b.n	8009edc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009eb8:	f7f7 fe5a 	bl	8001b70 <HAL_GetTick>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec6:	d109      	bne.n	8009edc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ece:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e010      	b.n	8009efe <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 ff4d 	bl	800ad7c <HAL_SD_GetCardState>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d1e7      	bne.n	8009eb8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3728      	adds	r7, #40	; 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f08:	b590      	push	{r4, r7, lr}
 8009f0a:	b08d      	sub	sp, #52	; 0x34
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009f10:	2300      	movs	r3, #0
 8009f12:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009f20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009f24:	f7fe fd26 	bl	8008974 <HAL_RCCEx_GetPeriphCLKFreq>
 8009f28:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d109      	bne.n	8009f44 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009f3e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	e06a      	b.n	800a01a <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	0a1b      	lsrs	r3, r3, #8
 8009f48:	4a36      	ldr	r2, [pc, #216]	; (800a024 <HAL_SD_InitCard+0x11c>)
 8009f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4e:	091b      	lsrs	r3, r3, #4
 8009f50:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681c      	ldr	r4, [r3, #0]
 8009f56:	466a      	mov	r2, sp
 8009f58:	f107 0318 	add.w	r3, r7, #24
 8009f5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f60:	e882 0003 	stmia.w	r2, {r0, r1}
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f004 f836 	bl	800dfdc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f004 f879 	bl	800e06c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009f86:	4a28      	ldr	r2, [pc, #160]	; (800a028 <HAL_SD_InitCard+0x120>)
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8e:	3301      	adds	r3, #1
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7f7 fdf9 	bl	8001b88 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 ffcc 	bl	800af34 <SD_PowerON>
 8009f9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00b      	beq.n	8009fbc <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e02e      	b.n	800a01a <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fefd 	bl	800adbc <SD_InitCard>
 8009fc2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00b      	beq.n	8009fe2 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e01b      	b.n	800a01a <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fea:	4618      	mov	r0, r3
 8009fec:	f004 f8d4 	bl	800e198 <SDMMC_CmdBlockLength>
 8009ff0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00f      	beq.n	800a018 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a0b      	ldr	r2, [pc, #44]	; (800a02c <HAL_SD_InitCard+0x124>)
 8009ffe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	372c      	adds	r7, #44	; 0x2c
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd90      	pop	{r4, r7, pc}
 800a022:	bf00      	nop
 800a024:	014f8b59 	.word	0x014f8b59
 800a028:	00012110 	.word	0x00012110
 800a02c:	1fe00fff 	.word	0x1fe00fff

0800a030 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08c      	sub	sp, #48	; 0x30
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e08d      	b.n	800a174 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b01      	cmp	r3, #1
 800a062:	f040 8086 	bne.w	800a172 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	441a      	add	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a076:	429a      	cmp	r2, r3
 800a078:	d907      	bls.n	800a08a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a07e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e074      	b.n	800a174 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2203      	movs	r2, #3
 800a08e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2200      	movs	r2, #0
 800a098:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	025a      	lsls	r2, r3, #9
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d002      	beq.n	800a0b6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	025b      	lsls	r3, r3, #9
 800a0b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	025b      	lsls	r3, r3, #9
 800a0c0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a0c2:	2390      	movs	r3, #144	; 0x90
 800a0c4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f107 0210 	add.w	r2, r7, #16
 800a0da:	4611      	mov	r1, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f004 f82f 	bl	800e140 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0f0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2201      	movs	r2, #1
 800a100:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d90a      	bls.n	800a11e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2282      	movs	r2, #130	; 0x82
 800a10c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a114:	4618      	mov	r0, r3
 800a116:	f004 f885 	bl	800e224 <SDMMC_CmdReadMultiBlock>
 800a11a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a11c:	e009      	b.n	800a132 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2281      	movs	r2, #129	; 0x81
 800a122:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12a:	4618      	mov	r0, r3
 800a12c:	f004 f857 	bl	800e1de <SDMMC_CmdReadSingleBlock>
 800a130:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d012      	beq.n	800a15e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a0f      	ldr	r2, [pc, #60]	; (800a17c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a13e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	431a      	orrs	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e00a      	b.n	800a174 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a16c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	e000      	b.n	800a174 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a172:	2302      	movs	r3, #2
  }
}
 800a174:	4618      	mov	r0, r3
 800a176:	3730      	adds	r7, #48	; 0x30
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	1fe00fff 	.word	0x1fe00fff

0800a180 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08c      	sub	sp, #48	; 0x30
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d107      	bne.n	800a1a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e08d      	b.n	800a2c4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	f040 8086 	bne.w	800a2c2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d907      	bls.n	800a1da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e074      	b.n	800a2c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2203      	movs	r2, #3
 800a1de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	025a      	lsls	r2, r3, #9
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d002      	beq.n	800a206 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a202:	025b      	lsls	r3, r3, #9
 800a204:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a206:	f04f 33ff 	mov.w	r3, #4294967295
 800a20a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	025b      	lsls	r3, r3, #9
 800a210:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a212:	2390      	movs	r3, #144	; 0x90
 800a214:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a216:	2300      	movs	r3, #0
 800a218:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a21e:	2300      	movs	r3, #0
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f107 0210 	add.w	r2, r7, #16
 800a22a:	4611      	mov	r1, r2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f003 ff87 	bl	800e140 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a240:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2201      	movs	r2, #1
 800a250:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d90a      	bls.n	800a26e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	22a0      	movs	r2, #160	; 0xa0
 800a25c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a264:	4618      	mov	r0, r3
 800a266:	f004 f823 	bl	800e2b0 <SDMMC_CmdWriteMultiBlock>
 800a26a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a26c:	e009      	b.n	800a282 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2290      	movs	r2, #144	; 0x90
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a27a:	4618      	mov	r0, r3
 800a27c:	f003 fff5 	bl	800e26a <SDMMC_CmdWriteSingleBlock>
 800a280:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	2b00      	cmp	r3, #0
 800a286:	d012      	beq.n	800a2ae <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a0f      	ldr	r2, [pc, #60]	; (800a2cc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a28e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	431a      	orrs	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e00a      	b.n	800a2c4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a2bc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	e000      	b.n	800a2c4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a2c2:	2302      	movs	r3, #2
  }
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3730      	adds	r7, #48	; 0x30
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	1fe00fff 	.word	0x1fe00fff

0800a2d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d008      	beq.n	800a2fe <HAL_SD_IRQHandler+0x2e>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f003 0308 	and.w	r3, r3, #8
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 f904 	bl	800b504 <SD_Read_IT>
 800a2fc:	e19a      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 80ac 	beq.w	800a466 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a316:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b9d      	ldr	r3, [pc, #628]	; (800a598 <HAL_SD_IRQHandler+0x2c8>)
 800a324:	400b      	ands	r3, r1
 800a326:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a336:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68da      	ldr	r2, [r3, #12]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a346:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f003 0308 	and.w	r3, r3, #8
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d038      	beq.n	800a3c4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f003 0302 	and.w	r3, r3, #2
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d104      	bne.n	800a366 <HAL_SD_IRQHandler+0x96>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f003 0320 	and.w	r3, r3, #32
 800a362:	2b00      	cmp	r3, #0
 800a364:	d011      	beq.n	800a38a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f003 ffc4 	bl	800e2f8 <SDMMC_CmdStopTransfer>
 800a370:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d008      	beq.n	800a38a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	431a      	orrs	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f959 	bl	800a63c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a83      	ldr	r2, [pc, #524]	; (800a59c <HAL_SD_IRQHandler+0x2cc>)
 800a390:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d104      	bne.n	800a3b4 <HAL_SD_IRQHandler+0xe4>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f005 ffe1 	bl	801037c <HAL_SD_RxCpltCallback>
 800a3ba:	e13b      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f005 ffd3 	bl	8010368 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a3c2:	e137      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 8132 	beq.w	800a634 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d104      	bne.n	800a3fc <HAL_SD_IRQHandler+0x12c>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f003 0320 	and.w	r3, r3, #32
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d011      	beq.n	800a420 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4618      	mov	r0, r3
 800a402:	f003 ff79 	bl	800e2f8 <SDMMC_CmdStopTransfer>
 800a406:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d008      	beq.n	800a420 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f90e 	bl	800a63c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f003 0310 	and.w	r3, r3, #16
 800a434:	2b00      	cmp	r3, #0
 800a436:	d104      	bne.n	800a442 <HAL_SD_IRQHandler+0x172>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f003 0320 	and.w	r3, r3, #32
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f005 ff90 	bl	8010368 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d105      	bne.n	800a45e <HAL_SD_IRQHandler+0x18e>
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f003 0302 	and.w	r3, r3, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 80eb 	beq.w	800a634 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f005 ff8c 	bl	801037c <HAL_SD_RxCpltCallback>
}
 800a464:	e0e6      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d008      	beq.n	800a486 <HAL_SD_IRQHandler+0x1b6>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 f886 	bl	800b590 <SD_Write_IT>
 800a484:	e0d6      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 80a2 	beq.w	800a5da <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d005      	beq.n	800a4b0 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a8:	f043 0202 	orr.w	r2, r3, #2
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b6:	f003 0308 	and.w	r3, r3, #8
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c2:	f043 0208 	orr.w	r2, r3, #8
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4dc:	f043 0220 	orr.w	r2, r3, #32
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ea:	f003 0310 	and.w	r3, r3, #16
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d005      	beq.n	800a4fe <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f6:	f043 0210 	orr.w	r2, r3, #16
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a26      	ldr	r2, [pc, #152]	; (800a59c <HAL_SD_IRQHandler+0x2cc>)
 800a504:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a514:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a524:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a534:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68da      	ldr	r2, [r3, #12]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a544:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f003 fed4 	bl	800e2f8 <SDMMC_CmdStopTransfer>
 800a550:	4602      	mov	r2, r0
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68da      	ldr	r2, [r3, #12]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a56a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a574:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00f      	beq.n	800a5a0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f854 	bl	800a63c <HAL_SD_ErrorCallback>
}
 800a594:	e04e      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
 800a596:	bf00      	nop
 800a598:	ffff3ec5 	.word	0xffff3ec5
 800a59c:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d044      	beq.n	800a634 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d040      	beq.n	800a634 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5c0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f832 	bl	800a63c <HAL_SD_ErrorCallback>
}
 800a5d8:	e02c      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d025      	beq.n	800a634 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10c      	bne.n	800a61a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f003 0320 	and.w	r3, r3, #32
 800a606:	2b00      	cmp	r3, #0
 800a608:	d003      	beq.n	800a612 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 f828 	bl	800b660 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a610:	e010      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f001 f810 	bl	800b638 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a618:	e00c      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f003 0320 	and.w	r3, r3, #32
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 f811 	bl	800b64c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a62a:	e003      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fff9 	bl	800b624 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a632:	e7ff      	b.n	800a634 <HAL_SD_IRQHandler+0x364>
 800a634:	bf00      	nop
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a65e:	0f9b      	lsrs	r3, r3, #30
 800a660:	b2da      	uxtb	r2, r3
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a66a:	0e9b      	lsrs	r3, r3, #26
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	b2da      	uxtb	r2, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67c:	0e1b      	lsrs	r3, r3, #24
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	f003 0303 	and.w	r3, r3, #3
 800a684:	b2da      	uxtb	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a68e:	0c1b      	lsrs	r3, r3, #16
 800a690:	b2da      	uxtb	r2, r3
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b0:	0d1b      	lsrs	r3, r3, #20
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6bc:	0c1b      	lsrs	r3, r3, #16
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ce:	0bdb      	lsrs	r3, r3, #15
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	f003 0301 	and.w	r3, r3, #1
 800a6d6:	b2da      	uxtb	r2, r3
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6e0:	0b9b      	lsrs	r3, r3, #14
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6f2:	0b5b      	lsrs	r3, r3, #13
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a704:	0b1b      	lsrs	r3, r3, #12
 800a706:	b2db      	uxtb	r3, r3
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2200      	movs	r2, #0
 800a716:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d163      	bne.n	800a7e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a724:	009a      	lsls	r2, r3, #2
 800a726:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a72a:	4013      	ands	r3, r2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a730:	0f92      	lsrs	r2, r2, #30
 800a732:	431a      	orrs	r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a73c:	0edb      	lsrs	r3, r3, #27
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	f003 0307 	and.w	r3, r3, #7
 800a744:	b2da      	uxtb	r2, r3
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a74e:	0e1b      	lsrs	r3, r3, #24
 800a750:	b2db      	uxtb	r3, r3
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	b2da      	uxtb	r2, r3
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a760:	0d5b      	lsrs	r3, r3, #21
 800a762:	b2db      	uxtb	r3, r3
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a772:	0c9b      	lsrs	r3, r3, #18
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a784:	0bdb      	lsrs	r3, r3, #15
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f003 0307 	and.w	r3, r3, #7
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	7e1b      	ldrb	r3, [r3, #24]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	3302      	adds	r3, #2
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a7b2:	fb02 f203 	mul.w	r2, r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	7a1b      	ldrb	r3, [r3, #8]
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	f003 030f 	and.w	r3, r3, #15
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	409a      	lsls	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a7d4:	0a52      	lsrs	r2, r2, #9
 800a7d6:	fb02 f203 	mul.w	r2, r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7e4:	655a      	str	r2, [r3, #84]	; 0x54
 800a7e6:	e031      	b.n	800a84c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d11d      	bne.n	800a82c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7f4:	041b      	lsls	r3, r3, #16
 800a7f6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7fe:	0c1b      	lsrs	r3, r3, #16
 800a800:	431a      	orrs	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	3301      	adds	r3, #1
 800a80c:	029a      	lsls	r2, r3, #10
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a820:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	655a      	str	r2, [r3, #84]	; 0x54
 800a82a:	e00f      	b.n	800a84c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a58      	ldr	r2, [pc, #352]	; (800a994 <HAL_SD_GetCardCSD+0x344>)
 800a832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e09d      	b.n	800a988 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a850:	0b9b      	lsrs	r3, r3, #14
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a862:	09db      	lsrs	r3, r3, #7
 800a864:	b2db      	uxtb	r3, r3
 800a866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a874:	b2db      	uxtb	r3, r3
 800a876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a884:	0fdb      	lsrs	r3, r3, #31
 800a886:	b2da      	uxtb	r2, r3
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a890:	0f5b      	lsrs	r3, r3, #29
 800a892:	b2db      	uxtb	r3, r3
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8a2:	0e9b      	lsrs	r3, r3, #26
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 0307 	and.w	r3, r3, #7
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8b4:	0d9b      	lsrs	r3, r3, #22
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8c6:	0d5b      	lsrs	r3, r3, #21
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	f003 0301 	and.w	r3, r3, #1
 800a8ce:	b2da      	uxtb	r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8f6:	0bdb      	lsrs	r3, r3, #15
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a90a:	0b9b      	lsrs	r3, r3, #14
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	b2da      	uxtb	r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a91e:	0b5b      	lsrs	r3, r3, #13
 800a920:	b2db      	uxtb	r3, r3
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	b2da      	uxtb	r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a932:	0b1b      	lsrs	r3, r3, #12
 800a934:	b2db      	uxtb	r3, r3
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a946:	0a9b      	lsrs	r3, r3, #10
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	b2da      	uxtb	r2, r3
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	b2da      	uxtb	r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a96e:	085b      	lsrs	r3, r3, #1
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	b2da      	uxtb	r2, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	1fe00fff 	.word	0x1fe00fff

0800a998 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b094      	sub	sp, #80	; 0x50
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a9a8:	f107 0308 	add.w	r3, r7, #8
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fb4a 	bl	800b048 <SD_SendSDStatus>
 800a9b4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d011      	beq.n	800a9e0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a4f      	ldr	r2, [pc, #316]	; (800ab00 <HAL_SD_GetCardStatus+0x168>)
 800a9c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a9de:	e070      	b.n	800aac2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	099b      	lsrs	r3, r3, #6
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f003 0303 	and.w	r3, r3, #3
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	095b      	lsrs	r3, r3, #5
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0301 	and.w	r3, r3, #1
 800a9fa:	b2da      	uxtb	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	0a1b      	lsrs	r3, r3, #8
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	0e1b      	lsrs	r3, r3, #24
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	4313      	orrs	r3, r2
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	061a      	lsls	r2, r3, #24
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	021b      	lsls	r3, r3, #8
 800aa22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa26:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	0a1b      	lsrs	r3, r3, #8
 800aa2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aa30:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	0e1b      	lsrs	r3, r3, #24
 800aa36:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	0a1b      	lsrs	r3, r3, #8
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	0d1b      	lsrs	r3, r3, #20
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	f003 030f 	and.w	r3, r3, #15
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	0c1b      	lsrs	r3, r3, #16
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4313      	orrs	r3, r2
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	0a9b      	lsrs	r3, r3, #10
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	0a1b      	lsrs	r3, r3, #8
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 0303 	and.w	r3, r3, #3
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	091b      	lsrs	r3, r3, #4
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 030f 	and.w	r3, r3, #15
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	0e1b      	lsrs	r3, r3, #24
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aaca:	4618      	mov	r0, r3
 800aacc:	f003 fb64 	bl	800e198 <SDMMC_CmdBlockLength>
 800aad0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00d      	beq.n	800aaf4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <HAL_SD_GetCardStatus+0x168>)
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aae4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800aaf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3750      	adds	r7, #80	; 0x50
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	1fe00fff 	.word	0x1fe00fff

0800ab04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ab5c:	b590      	push	{r4, r7, lr}
 800ab5e:	b08d      	sub	sp, #52	; 0x34
 800ab60:	af02      	add	r7, sp, #8
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2203      	movs	r2, #3
 800ab70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d02e      	beq.n	800abda <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab82:	d106      	bne.n	800ab92 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	635a      	str	r2, [r3, #52]	; 0x34
 800ab90:	e029      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab98:	d10a      	bne.n	800abb0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fb4c 	bl	800b238 <SD_WideBus_Enable>
 800aba0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	431a      	orrs	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	635a      	str	r2, [r3, #52]	; 0x34
 800abae:	e01a      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fb89 	bl	800b2ce <SD_WideBus_Disable>
 800abbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	431a      	orrs	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	635a      	str	r2, [r3, #52]	; 0x34
 800abca:	e00c      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	635a      	str	r2, [r3, #52]	; 0x34
 800abd8:	e005      	b.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4a5e      	ldr	r2, [pc, #376]	; (800ad6c <HAL_SD_ConfigWideBusOperation+0x210>)
 800abf4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abfc:	e094      	b.n	800ad28 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800abfe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ac02:	f7fd feb7 	bl	8008974 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac06:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 8083 	beq.w	800ad16 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	695a      	ldr	r2, [r3, #20]
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4950      	ldr	r1, [pc, #320]	; (800ad70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ac2e:	fba1 1303 	umull	r1, r3, r1, r3
 800ac32:	0e1b      	lsrs	r3, r3, #24
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d303      	bcc.n	800ac40 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	e05a      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac48:	d103      	bne.n	800ac52 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	695b      	ldr	r3, [r3, #20]
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	e051      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac5a:	d126      	bne.n	800acaa <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10e      	bne.n	800ac82 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	4a43      	ldr	r2, [pc, #268]	; (800ad74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d906      	bls.n	800ac7a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	4a40      	ldr	r2, [pc, #256]	; (800ad70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ac70:	fba2 2303 	umull	r2, r3, r2, r3
 800ac74:	0e5b      	lsrs	r3, r3, #25
 800ac76:	61bb      	str	r3, [r7, #24]
 800ac78:	e03d      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	61bb      	str	r3, [r7, #24]
 800ac80:	e039      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	69fa      	ldr	r2, [r7, #28]
 800ac8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac8e:	4a39      	ldr	r2, [pc, #228]	; (800ad74 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d906      	bls.n	800aca2 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	4a36      	ldr	r2, [pc, #216]	; (800ad70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ac98:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9c:	0e5b      	lsrs	r3, r3, #25
 800ac9e:	61bb      	str	r3, [r7, #24]
 800aca0:	e029      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	61bb      	str	r3, [r7, #24]
 800aca8:	e025      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10e      	bne.n	800acd0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	4a30      	ldr	r2, [pc, #192]	; (800ad78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d906      	bls.n	800acc8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	4a2c      	ldr	r2, [pc, #176]	; (800ad70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800acbe:	fba2 2303 	umull	r2, r3, r2, r3
 800acc2:	0e1b      	lsrs	r3, r3, #24
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	e016      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	61bb      	str	r3, [r7, #24]
 800acce:	e012      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800acdc:	4a26      	ldr	r2, [pc, #152]	; (800ad78 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d906      	bls.n	800acf0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	4a22      	ldr	r2, [pc, #136]	; (800ad70 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ace6:	fba2 2303 	umull	r2, r3, r2, r3
 800acea:	0e1b      	lsrs	r3, r3, #24
 800acec:	61bb      	str	r3, [r7, #24]
 800acee:	e002      	b.n	800acf6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681c      	ldr	r4, [r3, #0]
 800acfa:	466a      	mov	r2, sp
 800acfc:	f107 0314 	add.w	r3, r7, #20
 800ad00:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad04:	e882 0003 	stmia.w	r2, {r0, r1}
 800ad08:	f107 0308 	add.w	r3, r7, #8
 800ad0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f003 f964 	bl	800dfdc <SDMMC_Init>
 800ad14:	e008      	b.n	800ad28 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad30:	4618      	mov	r0, r3
 800ad32:	f003 fa31 	bl	800e198 <SDMMC_CmdBlockLength>
 800ad36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00c      	beq.n	800ad58 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <HAL_SD_ConfigWideBusOperation+0x210>)
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	431a      	orrs	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800ad60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	372c      	adds	r7, #44	; 0x2c
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd90      	pop	{r4, r7, pc}
 800ad6c:	1fe00fff 	.word	0x1fe00fff
 800ad70:	55e63b89 	.word	0x55e63b89
 800ad74:	02faf080 	.word	0x02faf080
 800ad78:	017d7840 	.word	0x017d7840

0800ad7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ad88:	f107 030c 	add.w	r3, r7, #12
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fa2a 	bl	800b1e8 <SD_SendStatus>
 800ad94:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d005      	beq.n	800ada8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	431a      	orrs	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	0a5b      	lsrs	r3, r3, #9
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800adb2:	693b      	ldr	r3, [r7, #16]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b090      	sub	sp, #64	; 0x40
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800adc4:	2301      	movs	r3, #1
 800adc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4618      	mov	r0, r3
 800adce:	f003 f95e 	bl	800e08e <SDMMC_GetPowerState>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800add8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800addc:	e0a5      	b.n	800af2a <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d02e      	beq.n	800ae44 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4618      	mov	r0, r3
 800adec:	f003 fba9 	bl	800e542 <SDMMC_CmdSendCID>
 800adf0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800adf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <SD_InitCard+0x40>
    {
      return errorstate;
 800adf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adfa:	e096      	b.n	800af2a <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2100      	movs	r1, #0
 800ae02:	4618      	mov	r0, r3
 800ae04:	f003 f989 	bl	800e11a <SDMMC_GetResponse>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2104      	movs	r1, #4
 800ae14:	4618      	mov	r0, r3
 800ae16:	f003 f980 	bl	800e11a <SDMMC_GetResponse>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2108      	movs	r1, #8
 800ae26:	4618      	mov	r0, r3
 800ae28:	f003 f977 	bl	800e11a <SDMMC_GetResponse>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	210c      	movs	r1, #12
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f003 f96e 	bl	800e11a <SDMMC_GetResponse>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d00d      	beq.n	800ae68 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f107 020e 	add.w	r2, r7, #14
 800ae54:	4611      	mov	r1, r2
 800ae56:	4618      	mov	r0, r3
 800ae58:	f003 fbb2 	bl	800e5c0 <SDMMC_CmdSetRelAdd>
 800ae5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <SD_InitCard+0xac>
    {
      return errorstate;
 800ae64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae66:	e060      	b.n	800af2a <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d036      	beq.n	800aede <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae70:	89fb      	ldrh	r3, [r7, #14]
 800ae72:	461a      	mov	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae80:	041b      	lsls	r3, r3, #16
 800ae82:	4619      	mov	r1, r3
 800ae84:	4610      	mov	r0, r2
 800ae86:	f003 fb7b 	bl	800e580 <SDMMC_CmdSendCSD>
 800ae8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <SD_InitCard+0xda>
    {
      return errorstate;
 800ae92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae94:	e049      	b.n	800af2a <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f003 f93c 	bl	800e11a <SDMMC_GetResponse>
 800aea2:	4602      	mov	r2, r0
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2104      	movs	r1, #4
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f003 f933 	bl	800e11a <SDMMC_GetResponse>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2108      	movs	r1, #8
 800aec0:	4618      	mov	r0, r3
 800aec2:	f003 f92a 	bl	800e11a <SDMMC_GetResponse>
 800aec6:	4602      	mov	r2, r0
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	210c      	movs	r1, #12
 800aed2:	4618      	mov	r0, r3
 800aed4:	f003 f921 	bl	800e11a <SDMMC_GetResponse>
 800aed8:	4602      	mov	r2, r0
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2104      	movs	r1, #4
 800aee4:	4618      	mov	r0, r3
 800aee6:	f003 f918 	bl	800e11a <SDMMC_GetResponse>
 800aeea:	4603      	mov	r3, r0
 800aeec:	0d1a      	lsrs	r2, r3, #20
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aef2:	f107 0310 	add.w	r3, r7, #16
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff fba9 	bl	800a650 <HAL_SD_GetCardCSD>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af08:	e00f      	b.n	800af2a <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af12:	041b      	lsls	r3, r3, #16
 800af14:	4619      	mov	r1, r3
 800af16:	4610      	mov	r0, r2
 800af18:	f003 fa2a 	bl	800e370 <SDMMC_CmdSelDesel>
 800af1c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800af1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <SD_InitCard+0x16c>
  {
    return errorstate;
 800af24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af26:	e000      	b.n	800af2a <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3740      	adds	r7, #64	; 0x40
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
	...

0800af34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f003 fa32 	bl	800e3b6 <SDMMC_CmdGoIdleState>
 800af52:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <SD_PowerON+0x2a>
  {
    return errorstate;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	e06e      	b.n	800b03c <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4618      	mov	r0, r3
 800af64:	f003 fa45 	bl	800e3f2 <SDMMC_CmdOperCond>
 800af68:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00d      	beq.n	800af8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f003 fa1b 	bl	800e3b6 <SDMMC_CmdGoIdleState>
 800af80:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d004      	beq.n	800af92 <SD_PowerON+0x5e>
    {
      return errorstate;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	e057      	b.n	800b03c <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af96:	2b01      	cmp	r3, #1
 800af98:	d137      	bne.n	800b00a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f003 fa46 	bl	800e432 <SDMMC_CmdAppCommand>
 800afa6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d02d      	beq.n	800b00a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800afb2:	e043      	b.n	800b03c <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f003 fa39 	bl	800e432 <SDMMC_CmdAppCommand>
 800afc0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d001      	beq.n	800afcc <SD_PowerON+0x98>
    {
      return errorstate;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	e037      	b.n	800b03c <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	491c      	ldr	r1, [pc, #112]	; (800b044 <SD_PowerON+0x110>)
 800afd2:	4618      	mov	r0, r3
 800afd4:	f003 fa50 	bl	800e478 <SDMMC_CmdAppOperCommand>
 800afd8:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d002      	beq.n	800afe6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800afe4:	e02a      	b.n	800b03c <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2100      	movs	r1, #0
 800afec:	4618      	mov	r0, r3
 800afee:	f003 f894 	bl	800e11a <SDMMC_GetResponse>
 800aff2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	0fdb      	lsrs	r3, r3, #31
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d101      	bne.n	800b000 <SD_PowerON+0xcc>
 800affc:	2301      	movs	r3, #1
 800affe:	e000      	b.n	800b002 <SD_PowerON+0xce>
 800b000:	2300      	movs	r3, #0
 800b002:	613b      	str	r3, [r7, #16]

    count++;
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	3301      	adds	r3, #1
 800b008:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b010:	4293      	cmp	r3, r2
 800b012:	d802      	bhi.n	800b01a <SD_PowerON+0xe6>
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0cc      	beq.n	800afb4 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b020:	4293      	cmp	r3, r2
 800b022:	d902      	bls.n	800b02a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b028:	e008      	b.n	800b03c <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	c1100000 	.word	0xc1100000

0800b048 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08c      	sub	sp, #48	; 0x30
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b052:	f7f6 fd8d 	bl	8001b70 <HAL_GetTick>
 800b056:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2100      	movs	r1, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f003 f859 	bl	800e11a <SDMMC_GetResponse>
 800b068:	4603      	mov	r3, r0
 800b06a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b06e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b072:	d102      	bne.n	800b07a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b078:	e0b0      	b.n	800b1dc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2140      	movs	r1, #64	; 0x40
 800b080:	4618      	mov	r0, r3
 800b082:	f003 f889 	bl	800e198 <SDMMC_CmdBlockLength>
 800b086:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	e0a0      	b.n	800b1dc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a2:	041b      	lsls	r3, r3, #16
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	f003 f9c3 	bl	800e432 <SDMMC_CmdAppCommand>
 800b0ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b0bc:	6a3b      	ldr	r3, [r7, #32]
 800b0be:	e08d      	b.n	800b1dc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b0c6:	2340      	movs	r3, #64	; 0x40
 800b0c8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b0ca:	2360      	movs	r3, #96	; 0x60
 800b0cc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f107 0208 	add.w	r2, r7, #8
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f003 f82b 	bl	800e140 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f003 faab 	bl	800e64a <SDMMC_CmdStatusRegister>
 800b0f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d02b      	beq.n	800b154 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	e069      	b.n	800b1dc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b10e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d013      	beq.n	800b13e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b116:	2300      	movs	r3, #0
 800b118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b11a:	e00d      	b.n	800b138 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f002 ff85 	bl	800e030 <SDMMC_ReadFIFO>
 800b126:	4602      	mov	r2, r0
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	601a      	str	r2, [r3, #0]
        pData++;
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	3304      	adds	r3, #4
 800b130:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	3301      	adds	r3, #1
 800b136:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13a:	2b07      	cmp	r3, #7
 800b13c:	d9ee      	bls.n	800b11c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b13e:	f7f6 fd17 	bl	8001b70 <HAL_GetTick>
 800b142:	4602      	mov	r2, r0
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14c:	d102      	bne.n	800b154 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b14e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b152:	e043      	b.n	800b1dc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0d2      	beq.n	800b108 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b168:	f003 0308 	and.w	r3, r3, #8
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b170:	2308      	movs	r3, #8
 800b172:	e033      	b.n	800b1dc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b182:	2302      	movs	r3, #2
 800b184:	e02a      	b.n	800b1dc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18c:	f003 0320 	and.w	r3, r3, #32
 800b190:	2b00      	cmp	r3, #0
 800b192:	d017      	beq.n	800b1c4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b194:	2320      	movs	r3, #32
 800b196:	e021      	b.n	800b1dc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f002 ff47 	bl	800e030 <SDMMC_ReadFIFO>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a6:	601a      	str	r2, [r3, #0]
    pData++;
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b1ae:	f7f6 fcdf 	bl	8001b70 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1bc:	d102      	bne.n	800b1c4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b1be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1c2:	e00b      	b.n	800b1dc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e2      	bne.n	800b198 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a03      	ldr	r2, [pc, #12]	; (800b1e4 <SD_SendSDStatus+0x19c>)
 800b1d8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3730      	adds	r7, #48	; 0x30
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	18000f3a 	.word	0x18000f3a

0800b1e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d102      	bne.n	800b1fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b1f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1fc:	e018      	b.n	800b230 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b206:	041b      	lsls	r3, r3, #16
 800b208:	4619      	mov	r1, r3
 800b20a:	4610      	mov	r0, r2
 800b20c:	f003 f9fa 	bl	800e604 <SDMMC_CmdSendStatus>
 800b210:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	e009      	b.n	800b230 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2100      	movs	r1, #0
 800b222:	4618      	mov	r0, r3
 800b224:	f002 ff79 	bl	800e11a <SDMMC_GetResponse>
 800b228:	4602      	mov	r2, r0
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b240:	2300      	movs	r3, #0
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	2300      	movs	r3, #0
 800b246:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2100      	movs	r1, #0
 800b24e:	4618      	mov	r0, r3
 800b250:	f002 ff63 	bl	800e11a <SDMMC_GetResponse>
 800b254:	4603      	mov	r3, r0
 800b256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b25a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b25e:	d102      	bne.n	800b266 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b260:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b264:	e02f      	b.n	800b2c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b266:	f107 030c 	add.w	r3, r7, #12
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f879 	bl	800b364 <SD_FindSCR>
 800b272:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	e023      	b.n	800b2c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01c      	beq.n	800b2c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b290:	041b      	lsls	r3, r3, #16
 800b292:	4619      	mov	r1, r3
 800b294:	4610      	mov	r0, r2
 800b296:	f003 f8cc 	bl	800e432 <SDMMC_CmdAppCommand>
 800b29a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	e00f      	b.n	800b2c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2102      	movs	r1, #2
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f003 f903 	bl	800e4b8 <SDMMC_CmdBusWidth>
 800b2b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	e003      	b.n	800b2c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e001      	b.n	800b2c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f002 ff18 	bl	800e11a <SDMMC_GetResponse>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f4:	d102      	bne.n	800b2fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b2f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2fa:	e02f      	b.n	800b35c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b2fc:	f107 030c 	add.w	r3, r7, #12
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f82e 	bl	800b364 <SD_FindSCR>
 800b308:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	e023      	b.n	800b35c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d01c      	beq.n	800b358 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b326:	041b      	lsls	r3, r3, #16
 800b328:	4619      	mov	r1, r3
 800b32a:	4610      	mov	r0, r2
 800b32c:	f003 f881 	bl	800e432 <SDMMC_CmdAppCommand>
 800b330:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	e00f      	b.n	800b35c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f003 f8b8 	bl	800e4b8 <SDMMC_CmdBusWidth>
 800b348:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	e003      	b.n	800b35c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b354:	2300      	movs	r3, #0
 800b356:	e001      	b.n	800b35c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b358:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08e      	sub	sp, #56	; 0x38
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b36e:	f7f6 fbff 	bl	8001b70 <HAL_GetTick>
 800b372:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b374:	2300      	movs	r3, #0
 800b376:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b378:	2300      	movs	r3, #0
 800b37a:	60bb      	str	r3, [r7, #8]
 800b37c:	2300      	movs	r3, #0
 800b37e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2108      	movs	r1, #8
 800b38a:	4618      	mov	r0, r3
 800b38c:	f002 ff04 	bl	800e198 <SDMMC_CmdBlockLength>
 800b390:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	2b00      	cmp	r3, #0
 800b396:	d001      	beq.n	800b39c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	e0ad      	b.n	800b4f8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3a4:	041b      	lsls	r3, r3, #16
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	f003 f842 	bl	800e432 <SDMMC_CmdAppCommand>
 800b3ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <SD_FindSCR+0x56>
  {
    return errorstate;
 800b3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b8:	e09e      	b.n	800b4f8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b3be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b3c0:	2308      	movs	r3, #8
 800b3c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b3c4:	2330      	movs	r3, #48	; 0x30
 800b3c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f107 0210 	add.w	r2, r7, #16
 800b3dc:	4611      	mov	r1, r2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f002 feae 	bl	800e140 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f003 f888 	bl	800e4fe <SDMMC_CmdSendSCR>
 800b3ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d027      	beq.n	800b446 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	e07e      	b.n	800b4f8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d113      	bne.n	800b430 <SD_FindSCR+0xcc>
 800b408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d110      	bne.n	800b430 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4618      	mov	r0, r3
 800b414:	f002 fe0c 	bl	800e030 <SDMMC_ReadFIFO>
 800b418:	4603      	mov	r3, r0
 800b41a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f002 fe05 	bl	800e030 <SDMMC_ReadFIFO>
 800b426:	4603      	mov	r3, r0
 800b428:	60fb      	str	r3, [r7, #12]
      index++;
 800b42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42c:	3301      	adds	r3, #1
 800b42e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b430:	f7f6 fb9e 	bl	8001b70 <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d102      	bne.n	800b446 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b444:	e058      	b.n	800b4f8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b44c:	f240 532a 	movw	r3, #1322	; 0x52a
 800b450:	4013      	ands	r3, r2
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0d1      	beq.n	800b3fa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45c:	f003 0308 	and.w	r3, r3, #8
 800b460:	2b00      	cmp	r3, #0
 800b462:	d005      	beq.n	800b470 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2208      	movs	r2, #8
 800b46a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b46c:	2308      	movs	r3, #8
 800b46e:	e043      	b.n	800b4f8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b476:	f003 0302 	and.w	r3, r3, #2
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d005      	beq.n	800b48a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2202      	movs	r2, #2
 800b484:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b486:	2302      	movs	r3, #2
 800b488:	e036      	b.n	800b4f8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b490:	f003 0320 	and.w	r3, r3, #32
 800b494:	2b00      	cmp	r3, #0
 800b496:	d005      	beq.n	800b4a4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2220      	movs	r2, #32
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b4a0:	2320      	movs	r3, #32
 800b4a2:	e029      	b.n	800b4f8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a15      	ldr	r2, [pc, #84]	; (800b500 <SD_FindSCR+0x19c>)
 800b4aa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	061a      	lsls	r2, r3, #24
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	0a1b      	lsrs	r3, r3, #8
 800b4be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b4c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	0e1b      	lsrs	r3, r3, #24
 800b4c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4cc:	601a      	str	r2, [r3, #0]
    scr++;
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	061a      	lsls	r2, r3, #24
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	021b      	lsls	r3, r3, #8
 800b4dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	0a1b      	lsrs	r3, r3, #8
 800b4e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b4ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	0e1b      	lsrs	r3, r3, #24
 800b4f0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3738      	adds	r7, #56	; 0x38
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	18000f3a 	.word	0x18000f3a

0800b504 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b510:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	2b1f      	cmp	r3, #31
 800b518:	d936      	bls.n	800b588 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b51a:	2300      	movs	r3, #0
 800b51c:	617b      	str	r3, [r7, #20]
 800b51e:	e027      	b.n	800b570 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4618      	mov	r0, r3
 800b526:	f002 fd83 	bl	800e030 <SDMMC_ReadFIFO>
 800b52a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	3301      	adds	r3, #1
 800b538:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	0a1b      	lsrs	r3, r3, #8
 800b53e:	b2da      	uxtb	r2, r3
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	3301      	adds	r3, #1
 800b548:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	0c1b      	lsrs	r3, r3, #16
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	3301      	adds	r3, #1
 800b558:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	0e1b      	lsrs	r3, r3, #24
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	3301      	adds	r3, #1
 800b568:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	3301      	adds	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2b07      	cmp	r3, #7
 800b574:	d9d4      	bls.n	800b520 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b580:	f1a3 0220 	sub.w	r2, r3, #32
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b588:	bf00      	nop
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	2b1f      	cmp	r3, #31
 800b5a4:	d93a      	bls.n	800b61c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e02b      	b.n	800b604 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	021a      	lsls	r2, r3, #8
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	041a      	lsls	r2, r3, #16
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	061a      	lsls	r2, r3, #24
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f107 020c 	add.w	r2, r7, #12
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f002 fd26 	bl	800e04a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	3301      	adds	r3, #1
 800b602:	617b      	str	r3, [r7, #20]
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	2b07      	cmp	r3, #7
 800b608:	d9d0      	bls.n	800b5ac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	f1a3 0220 	sub.w	r2, r3, #32
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	621a      	str	r2, [r3, #32]
  }
}
 800b61c:	bf00      	nop
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b668:	bf00      	nop
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e049      	b.n	800b71a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d106      	bne.n	800b6a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7f5 ff5a 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	f000 fbec 	bl	800be90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	e049      	b.n	800b7c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d106      	bne.n	800b74e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f841 	bl	800b7d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2202      	movs	r2, #2
 800b752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3304      	adds	r3, #4
 800b75e:	4619      	mov	r1, r3
 800b760:	4610      	mov	r0, r2
 800b762:	f000 fb95 	bl	800be90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d122      	bne.n	800b840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0302 	and.w	r3, r3, #2
 800b804:	2b02      	cmp	r3, #2
 800b806:	d11b      	bne.n	800b840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0202 	mvn.w	r2, #2
 800b810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	f003 0303 	and.w	r3, r3, #3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fb14 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b82c:	e005      	b.n	800b83a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fb06 	bl	800be40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fb17 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0304 	and.w	r3, r3, #4
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	d122      	bne.n	800b894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f003 0304 	and.w	r3, r3, #4
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d11b      	bne.n	800b894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f06f 0204 	mvn.w	r2, #4
 800b864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2202      	movs	r2, #2
 800b86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 faea 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b880:	e005      	b.n	800b88e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fadc 	bl	800be40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 faed 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	f003 0308 	and.w	r3, r3, #8
 800b89e:	2b08      	cmp	r3, #8
 800b8a0:	d122      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f003 0308 	and.w	r3, r3, #8
 800b8ac:	2b08      	cmp	r3, #8
 800b8ae:	d11b      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f06f 0208 	mvn.w	r2, #8
 800b8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2204      	movs	r2, #4
 800b8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	f003 0303 	and.w	r3, r3, #3
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fac0 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b8d4:	e005      	b.n	800b8e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fab2 	bl	800be40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fac3 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	f003 0310 	and.w	r3, r3, #16
 800b8f2:	2b10      	cmp	r3, #16
 800b8f4:	d122      	bne.n	800b93c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f003 0310 	and.w	r3, r3, #16
 800b900:	2b10      	cmp	r3, #16
 800b902:	d11b      	bne.n	800b93c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f06f 0210 	mvn.w	r2, #16
 800b90c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2208      	movs	r2, #8
 800b912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	69db      	ldr	r3, [r3, #28]
 800b91a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 fa96 	bl	800be54 <HAL_TIM_IC_CaptureCallback>
 800b928:	e005      	b.n	800b936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fa88 	bl	800be40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fa99 	bl	800be68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b01      	cmp	r3, #1
 800b948:	d10e      	bne.n	800b968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	2b01      	cmp	r3, #1
 800b956:	d107      	bne.n	800b968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f06f 0201 	mvn.w	r2, #1
 800b960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa62 	bl	800be2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b972:	2b80      	cmp	r3, #128	; 0x80
 800b974:	d10e      	bne.n	800b994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b980:	2b80      	cmp	r3, #128	; 0x80
 800b982:	d107      	bne.n	800b994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b98c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 ff94 	bl	800c8bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b99e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9a2:	d10e      	bne.n	800b9c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ae:	2b80      	cmp	r3, #128	; 0x80
 800b9b0:	d107      	bne.n	800b9c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b9ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 ff87 	bl	800c8d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9cc:	2b40      	cmp	r3, #64	; 0x40
 800b9ce:	d10e      	bne.n	800b9ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9da:	2b40      	cmp	r3, #64	; 0x40
 800b9dc:	d107      	bne.n	800b9ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fa47 	bl	800be7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	f003 0320 	and.w	r3, r3, #32
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	d10e      	bne.n	800ba1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f003 0320 	and.w	r3, r3, #32
 800ba06:	2b20      	cmp	r3, #32
 800ba08:	d107      	bne.n	800ba1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f06f 0220 	mvn.w	r2, #32
 800ba12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 ff47 	bl	800c8a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d101      	bne.n	800ba3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	e0fd      	b.n	800bc3a <HAL_TIM_PWM_ConfigChannel+0x216>
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b14      	cmp	r3, #20
 800ba4a:	f200 80f0 	bhi.w	800bc2e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ba4e:	a201      	add	r2, pc, #4	; (adr r2, 800ba54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800baa9 	.word	0x0800baa9
 800ba58:	0800bc2f 	.word	0x0800bc2f
 800ba5c:	0800bc2f 	.word	0x0800bc2f
 800ba60:	0800bc2f 	.word	0x0800bc2f
 800ba64:	0800bae9 	.word	0x0800bae9
 800ba68:	0800bc2f 	.word	0x0800bc2f
 800ba6c:	0800bc2f 	.word	0x0800bc2f
 800ba70:	0800bc2f 	.word	0x0800bc2f
 800ba74:	0800bb2b 	.word	0x0800bb2b
 800ba78:	0800bc2f 	.word	0x0800bc2f
 800ba7c:	0800bc2f 	.word	0x0800bc2f
 800ba80:	0800bc2f 	.word	0x0800bc2f
 800ba84:	0800bb6b 	.word	0x0800bb6b
 800ba88:	0800bc2f 	.word	0x0800bc2f
 800ba8c:	0800bc2f 	.word	0x0800bc2f
 800ba90:	0800bc2f 	.word	0x0800bc2f
 800ba94:	0800bbad 	.word	0x0800bbad
 800ba98:	0800bc2f 	.word	0x0800bc2f
 800ba9c:	0800bc2f 	.word	0x0800bc2f
 800baa0:	0800bc2f 	.word	0x0800bc2f
 800baa4:	0800bbed 	.word	0x0800bbed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 fa88 	bl	800bfc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0208 	orr.w	r2, r2, #8
 800bac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	699a      	ldr	r2, [r3, #24]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f022 0204 	bic.w	r2, r2, #4
 800bad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6999      	ldr	r1, [r3, #24]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	691a      	ldr	r2, [r3, #16]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	430a      	orrs	r2, r1
 800bae4:	619a      	str	r2, [r3, #24]
      break;
 800bae6:	e0a3      	b.n	800bc30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 faf8 	bl	800c0e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	699a      	ldr	r2, [r3, #24]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	699a      	ldr	r2, [r3, #24]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6999      	ldr	r1, [r3, #24]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	021a      	lsls	r2, r3, #8
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	619a      	str	r2, [r3, #24]
      break;
 800bb28:	e082      	b.n	800bc30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68b9      	ldr	r1, [r7, #8]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fb61 	bl	800c1f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69da      	ldr	r2, [r3, #28]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f042 0208 	orr.w	r2, r2, #8
 800bb44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69da      	ldr	r2, [r3, #28]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f022 0204 	bic.w	r2, r2, #4
 800bb54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69d9      	ldr	r1, [r3, #28]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	691a      	ldr	r2, [r3, #16]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	430a      	orrs	r2, r1
 800bb66:	61da      	str	r2, [r3, #28]
      break;
 800bb68:	e062      	b.n	800bc30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68b9      	ldr	r1, [r7, #8]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 fbc7 	bl	800c304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	69da      	ldr	r2, [r3, #28]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69da      	ldr	r2, [r3, #28]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	69d9      	ldr	r1, [r3, #28]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	021a      	lsls	r2, r3, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	61da      	str	r2, [r3, #28]
      break;
 800bbaa:	e041      	b.n	800bc30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68b9      	ldr	r1, [r7, #8]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 fc0e 	bl	800c3d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f042 0208 	orr.w	r2, r2, #8
 800bbc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f022 0204 	bic.w	r2, r2, #4
 800bbd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	691a      	ldr	r2, [r3, #16]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	430a      	orrs	r2, r1
 800bbe8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bbea:	e021      	b.n	800bc30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68b9      	ldr	r1, [r7, #8]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 fc50 	bl	800c498 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	021a      	lsls	r2, r3, #8
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bc2c:	e000      	b.n	800bc30 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bc2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop

0800bc44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d101      	bne.n	800bc5c <HAL_TIM_ConfigClockSource+0x18>
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e0db      	b.n	800be14 <HAL_TIM_ConfigClockSource+0x1d0>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	4b69      	ldr	r3, [pc, #420]	; (800be1c <HAL_TIM_ConfigClockSource+0x1d8>)
 800bc78:	4013      	ands	r3, r2
 800bc7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a63      	ldr	r2, [pc, #396]	; (800be20 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	f000 80a9 	beq.w	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bc98:	4a61      	ldr	r2, [pc, #388]	; (800be20 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	f200 80ae 	bhi.w	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bca0:	4a60      	ldr	r2, [pc, #384]	; (800be24 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	f000 80a1 	beq.w	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bca8:	4a5e      	ldr	r2, [pc, #376]	; (800be24 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	f200 80a6 	bhi.w	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bcb0:	4a5d      	ldr	r2, [pc, #372]	; (800be28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	f000 8099 	beq.w	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bcb8:	4a5b      	ldr	r2, [pc, #364]	; (800be28 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	f200 809e 	bhi.w	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bcc0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bcc4:	f000 8091 	beq.w	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bcc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bccc:	f200 8096 	bhi.w	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bcd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcd4:	f000 8089 	beq.w	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bcd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcdc:	f200 808e 	bhi.w	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bce4:	d03e      	beq.n	800bd64 <HAL_TIM_ConfigClockSource+0x120>
 800bce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcea:	f200 8087 	bhi.w	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bcee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf2:	f000 8085 	beq.w	800be00 <HAL_TIM_ConfigClockSource+0x1bc>
 800bcf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcfa:	d87f      	bhi.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bcfc:	2b70      	cmp	r3, #112	; 0x70
 800bcfe:	d01a      	beq.n	800bd36 <HAL_TIM_ConfigClockSource+0xf2>
 800bd00:	2b70      	cmp	r3, #112	; 0x70
 800bd02:	d87b      	bhi.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bd04:	2b60      	cmp	r3, #96	; 0x60
 800bd06:	d050      	beq.n	800bdaa <HAL_TIM_ConfigClockSource+0x166>
 800bd08:	2b60      	cmp	r3, #96	; 0x60
 800bd0a:	d877      	bhi.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bd0c:	2b50      	cmp	r3, #80	; 0x50
 800bd0e:	d03c      	beq.n	800bd8a <HAL_TIM_ConfigClockSource+0x146>
 800bd10:	2b50      	cmp	r3, #80	; 0x50
 800bd12:	d873      	bhi.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bd14:	2b40      	cmp	r3, #64	; 0x40
 800bd16:	d058      	beq.n	800bdca <HAL_TIM_ConfigClockSource+0x186>
 800bd18:	2b40      	cmp	r3, #64	; 0x40
 800bd1a:	d86f      	bhi.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bd1c:	2b30      	cmp	r3, #48	; 0x30
 800bd1e:	d064      	beq.n	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bd20:	2b30      	cmp	r3, #48	; 0x30
 800bd22:	d86b      	bhi.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bd24:	2b20      	cmp	r3, #32
 800bd26:	d060      	beq.n	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bd28:	2b20      	cmp	r3, #32
 800bd2a:	d867      	bhi.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d05c      	beq.n	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
 800bd30:	2b10      	cmp	r3, #16
 800bd32:	d05a      	beq.n	800bdea <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bd34:	e062      	b.n	800bdfc <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6818      	ldr	r0, [r3, #0]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	6899      	ldr	r1, [r3, #8]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	f000 fc89 	bl	800c65c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	609a      	str	r2, [r3, #8]
      break;
 800bd62:	e04e      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6818      	ldr	r0, [r3, #0]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	6899      	ldr	r1, [r3, #8]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	f000 fc72 	bl	800c65c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	689a      	ldr	r2, [r3, #8]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd86:	609a      	str	r2, [r3, #8]
      break;
 800bd88:	e03b      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6859      	ldr	r1, [r3, #4]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	461a      	mov	r2, r3
 800bd98:	f000 fbe2 	bl	800c560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2150      	movs	r1, #80	; 0x50
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 fc3c 	bl	800c620 <TIM_ITRx_SetConfig>
      break;
 800bda8:	e02b      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6818      	ldr	r0, [r3, #0]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	6859      	ldr	r1, [r3, #4]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f000 fc01 	bl	800c5be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2160      	movs	r1, #96	; 0x60
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fc2c 	bl	800c620 <TIM_ITRx_SetConfig>
      break;
 800bdc8:	e01b      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	6859      	ldr	r1, [r3, #4]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f000 fbc2 	bl	800c560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2140      	movs	r1, #64	; 0x40
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 fc1c 	bl	800c620 <TIM_ITRx_SetConfig>
      break;
 800bde8:	e00b      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f000 fc13 	bl	800c620 <TIM_ITRx_SetConfig>
        break;
 800bdfa:	e002      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800bdfc:	bf00      	nop
 800bdfe:	e000      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800be00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	ffceff88 	.word	0xffceff88
 800be20:	00100040 	.word	0x00100040
 800be24:	00100030 	.word	0x00100030
 800be28:	00100020 	.word	0x00100020

0800be2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a40      	ldr	r2, [pc, #256]	; (800bfa4 <TIM_Base_SetConfig+0x114>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d013      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beae:	d00f      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a3d      	ldr	r2, [pc, #244]	; (800bfa8 <TIM_Base_SetConfig+0x118>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d00b      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a3c      	ldr	r2, [pc, #240]	; (800bfac <TIM_Base_SetConfig+0x11c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d007      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a3b      	ldr	r2, [pc, #236]	; (800bfb0 <TIM_Base_SetConfig+0x120>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d003      	beq.n	800bed0 <TIM_Base_SetConfig+0x40>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a3a      	ldr	r2, [pc, #232]	; (800bfb4 <TIM_Base_SetConfig+0x124>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d108      	bne.n	800bee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a2f      	ldr	r2, [pc, #188]	; (800bfa4 <TIM_Base_SetConfig+0x114>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d01f      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bef0:	d01b      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a2c      	ldr	r2, [pc, #176]	; (800bfa8 <TIM_Base_SetConfig+0x118>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d017      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a2b      	ldr	r2, [pc, #172]	; (800bfac <TIM_Base_SetConfig+0x11c>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d013      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a2a      	ldr	r2, [pc, #168]	; (800bfb0 <TIM_Base_SetConfig+0x120>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d00f      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a29      	ldr	r2, [pc, #164]	; (800bfb4 <TIM_Base_SetConfig+0x124>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d00b      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a28      	ldr	r2, [pc, #160]	; (800bfb8 <TIM_Base_SetConfig+0x128>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d007      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a27      	ldr	r2, [pc, #156]	; (800bfbc <TIM_Base_SetConfig+0x12c>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d003      	beq.n	800bf2a <TIM_Base_SetConfig+0x9a>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a26      	ldr	r2, [pc, #152]	; (800bfc0 <TIM_Base_SetConfig+0x130>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d108      	bne.n	800bf3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a10      	ldr	r2, [pc, #64]	; (800bfa4 <TIM_Base_SetConfig+0x114>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d00f      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a12      	ldr	r2, [pc, #72]	; (800bfb4 <TIM_Base_SetConfig+0x124>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d00b      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a11      	ldr	r2, [pc, #68]	; (800bfb8 <TIM_Base_SetConfig+0x128>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d007      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a10      	ldr	r2, [pc, #64]	; (800bfbc <TIM_Base_SetConfig+0x12c>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d003      	beq.n	800bf88 <TIM_Base_SetConfig+0xf8>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a0f      	ldr	r2, [pc, #60]	; (800bfc0 <TIM_Base_SetConfig+0x130>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d103      	bne.n	800bf90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	691a      	ldr	r2, [r3, #16]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	615a      	str	r2, [r3, #20]
}
 800bf96:	bf00      	nop
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	40010000 	.word	0x40010000
 800bfa8:	40000400 	.word	0x40000400
 800bfac:	40000800 	.word	0x40000800
 800bfb0:	40000c00 	.word	0x40000c00
 800bfb4:	40010400 	.word	0x40010400
 800bfb8:	40014000 	.word	0x40014000
 800bfbc:	40014400 	.word	0x40014400
 800bfc0:	40014800 	.word	0x40014800

0800bfc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	f023 0201 	bic.w	r2, r3, #1
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4b37      	ldr	r3, [pc, #220]	; (800c0cc <TIM_OC1_SetConfig+0x108>)
 800bff0:	4013      	ands	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f023 0303 	bic.w	r3, r3, #3
 800bffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f023 0302 	bic.w	r3, r3, #2
 800c00c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	4313      	orrs	r3, r2
 800c016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a2d      	ldr	r2, [pc, #180]	; (800c0d0 <TIM_OC1_SetConfig+0x10c>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d00f      	beq.n	800c040 <TIM_OC1_SetConfig+0x7c>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a2c      	ldr	r2, [pc, #176]	; (800c0d4 <TIM_OC1_SetConfig+0x110>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d00b      	beq.n	800c040 <TIM_OC1_SetConfig+0x7c>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a2b      	ldr	r2, [pc, #172]	; (800c0d8 <TIM_OC1_SetConfig+0x114>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d007      	beq.n	800c040 <TIM_OC1_SetConfig+0x7c>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a2a      	ldr	r2, [pc, #168]	; (800c0dc <TIM_OC1_SetConfig+0x118>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d003      	beq.n	800c040 <TIM_OC1_SetConfig+0x7c>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a29      	ldr	r2, [pc, #164]	; (800c0e0 <TIM_OC1_SetConfig+0x11c>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d10c      	bne.n	800c05a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f023 0308 	bic.w	r3, r3, #8
 800c046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	4313      	orrs	r3, r2
 800c050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f023 0304 	bic.w	r3, r3, #4
 800c058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a1c      	ldr	r2, [pc, #112]	; (800c0d0 <TIM_OC1_SetConfig+0x10c>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d00f      	beq.n	800c082 <TIM_OC1_SetConfig+0xbe>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a1b      	ldr	r2, [pc, #108]	; (800c0d4 <TIM_OC1_SetConfig+0x110>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d00b      	beq.n	800c082 <TIM_OC1_SetConfig+0xbe>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a1a      	ldr	r2, [pc, #104]	; (800c0d8 <TIM_OC1_SetConfig+0x114>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d007      	beq.n	800c082 <TIM_OC1_SetConfig+0xbe>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a19      	ldr	r2, [pc, #100]	; (800c0dc <TIM_OC1_SetConfig+0x118>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d003      	beq.n	800c082 <TIM_OC1_SetConfig+0xbe>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a18      	ldr	r2, [pc, #96]	; (800c0e0 <TIM_OC1_SetConfig+0x11c>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d111      	bne.n	800c0a6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	4313      	orrs	r3, r2
 800c09a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	697a      	ldr	r2, [r7, #20]
 800c0be:	621a      	str	r2, [r3, #32]
}
 800c0c0:	bf00      	nop
 800c0c2:	371c      	adds	r7, #28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	fffeff8f 	.word	0xfffeff8f
 800c0d0:	40010000 	.word	0x40010000
 800c0d4:	40010400 	.word	0x40010400
 800c0d8:	40014000 	.word	0x40014000
 800c0dc:	40014400 	.word	0x40014400
 800c0e0:	40014800 	.word	0x40014800

0800c0e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6a1b      	ldr	r3, [r3, #32]
 800c0f2:	f023 0210 	bic.w	r2, r3, #16
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	4b34      	ldr	r3, [pc, #208]	; (800c1e0 <TIM_OC2_SetConfig+0xfc>)
 800c110:	4013      	ands	r3, r2
 800c112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c11a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	021b      	lsls	r3, r3, #8
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	4313      	orrs	r3, r2
 800c126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	f023 0320 	bic.w	r3, r3, #32
 800c12e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	4313      	orrs	r3, r2
 800c13a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a29      	ldr	r2, [pc, #164]	; (800c1e4 <TIM_OC2_SetConfig+0x100>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d003      	beq.n	800c14c <TIM_OC2_SetConfig+0x68>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a28      	ldr	r2, [pc, #160]	; (800c1e8 <TIM_OC2_SetConfig+0x104>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d10d      	bne.n	800c168 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	011b      	lsls	r3, r3, #4
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a1e      	ldr	r2, [pc, #120]	; (800c1e4 <TIM_OC2_SetConfig+0x100>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d00f      	beq.n	800c190 <TIM_OC2_SetConfig+0xac>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a1d      	ldr	r2, [pc, #116]	; (800c1e8 <TIM_OC2_SetConfig+0x104>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d00b      	beq.n	800c190 <TIM_OC2_SetConfig+0xac>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a1c      	ldr	r2, [pc, #112]	; (800c1ec <TIM_OC2_SetConfig+0x108>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d007      	beq.n	800c190 <TIM_OC2_SetConfig+0xac>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a1b      	ldr	r2, [pc, #108]	; (800c1f0 <TIM_OC2_SetConfig+0x10c>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d003      	beq.n	800c190 <TIM_OC2_SetConfig+0xac>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a1a      	ldr	r2, [pc, #104]	; (800c1f4 <TIM_OC2_SetConfig+0x110>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d113      	bne.n	800c1b8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c196:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c19e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	693a      	ldr	r2, [r7, #16]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	621a      	str	r2, [r3, #32]
}
 800c1d2:	bf00      	nop
 800c1d4:	371c      	adds	r7, #28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	feff8fff 	.word	0xfeff8fff
 800c1e4:	40010000 	.word	0x40010000
 800c1e8:	40010400 	.word	0x40010400
 800c1ec:	40014000 	.word	0x40014000
 800c1f0:	40014400 	.word	0x40014400
 800c1f4:	40014800 	.word	0x40014800

0800c1f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f023 0303 	bic.w	r3, r3, #3
 800c22e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	4313      	orrs	r3, r2
 800c238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	021b      	lsls	r3, r3, #8
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a27      	ldr	r2, [pc, #156]	; (800c2f0 <TIM_OC3_SetConfig+0xf8>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d003      	beq.n	800c25e <TIM_OC3_SetConfig+0x66>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a26      	ldr	r2, [pc, #152]	; (800c2f4 <TIM_OC3_SetConfig+0xfc>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d10d      	bne.n	800c27a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	021b      	lsls	r3, r3, #8
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	4313      	orrs	r3, r2
 800c270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a1c      	ldr	r2, [pc, #112]	; (800c2f0 <TIM_OC3_SetConfig+0xf8>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d00f      	beq.n	800c2a2 <TIM_OC3_SetConfig+0xaa>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a1b      	ldr	r2, [pc, #108]	; (800c2f4 <TIM_OC3_SetConfig+0xfc>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d00b      	beq.n	800c2a2 <TIM_OC3_SetConfig+0xaa>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a1a      	ldr	r2, [pc, #104]	; (800c2f8 <TIM_OC3_SetConfig+0x100>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d007      	beq.n	800c2a2 <TIM_OC3_SetConfig+0xaa>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a19      	ldr	r2, [pc, #100]	; (800c2fc <TIM_OC3_SetConfig+0x104>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d003      	beq.n	800c2a2 <TIM_OC3_SetConfig+0xaa>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a18      	ldr	r2, [pc, #96]	; (800c300 <TIM_OC3_SetConfig+0x108>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d113      	bne.n	800c2ca <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	693a      	ldr	r2, [r7, #16]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	685a      	ldr	r2, [r3, #4]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	697a      	ldr	r2, [r7, #20]
 800c2e2:	621a      	str	r2, [r3, #32]
}
 800c2e4:	bf00      	nop
 800c2e6:	371c      	adds	r7, #28
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr
 800c2f0:	40010000 	.word	0x40010000
 800c2f4:	40010400 	.word	0x40010400
 800c2f8:	40014000 	.word	0x40014000
 800c2fc:	40014400 	.word	0x40014400
 800c300:	40014800 	.word	0x40014800

0800c304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a1b      	ldr	r3, [r3, #32]
 800c31e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	69db      	ldr	r3, [r3, #28]
 800c32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	021b      	lsls	r3, r3, #8
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	4313      	orrs	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c34e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	031b      	lsls	r3, r3, #12
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	4313      	orrs	r3, r2
 800c35a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a18      	ldr	r2, [pc, #96]	; (800c3c0 <TIM_OC4_SetConfig+0xbc>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d00f      	beq.n	800c384 <TIM_OC4_SetConfig+0x80>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a17      	ldr	r2, [pc, #92]	; (800c3c4 <TIM_OC4_SetConfig+0xc0>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d00b      	beq.n	800c384 <TIM_OC4_SetConfig+0x80>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a16      	ldr	r2, [pc, #88]	; (800c3c8 <TIM_OC4_SetConfig+0xc4>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d007      	beq.n	800c384 <TIM_OC4_SetConfig+0x80>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a15      	ldr	r2, [pc, #84]	; (800c3cc <TIM_OC4_SetConfig+0xc8>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d003      	beq.n	800c384 <TIM_OC4_SetConfig+0x80>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a14      	ldr	r2, [pc, #80]	; (800c3d0 <TIM_OC4_SetConfig+0xcc>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d109      	bne.n	800c398 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c38a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	019b      	lsls	r3, r3, #6
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	4313      	orrs	r3, r2
 800c396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	685a      	ldr	r2, [r3, #4]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	693a      	ldr	r2, [r7, #16]
 800c3b0:	621a      	str	r2, [r3, #32]
}
 800c3b2:	bf00      	nop
 800c3b4:	371c      	adds	r7, #28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	40010000 	.word	0x40010000
 800c3c4:	40010400 	.word	0x40010400
 800c3c8:	40014000 	.word	0x40014000
 800c3cc:	40014400 	.word	0x40014400
 800c3d0:	40014800 	.word	0x40014800

0800c3d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b087      	sub	sp, #28
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a1b      	ldr	r3, [r3, #32]
 800c3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c414:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	041b      	lsls	r3, r3, #16
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	4313      	orrs	r3, r2
 800c420:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a17      	ldr	r2, [pc, #92]	; (800c484 <TIM_OC5_SetConfig+0xb0>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d00f      	beq.n	800c44a <TIM_OC5_SetConfig+0x76>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a16      	ldr	r2, [pc, #88]	; (800c488 <TIM_OC5_SetConfig+0xb4>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d00b      	beq.n	800c44a <TIM_OC5_SetConfig+0x76>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a15      	ldr	r2, [pc, #84]	; (800c48c <TIM_OC5_SetConfig+0xb8>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d007      	beq.n	800c44a <TIM_OC5_SetConfig+0x76>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a14      	ldr	r2, [pc, #80]	; (800c490 <TIM_OC5_SetConfig+0xbc>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d003      	beq.n	800c44a <TIM_OC5_SetConfig+0x76>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a13      	ldr	r2, [pc, #76]	; (800c494 <TIM_OC5_SetConfig+0xc0>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d109      	bne.n	800c45e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c450:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	021b      	lsls	r3, r3, #8
 800c458:	697a      	ldr	r2, [r7, #20]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68fa      	ldr	r2, [r7, #12]
 800c468:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	621a      	str	r2, [r3, #32]
}
 800c478:	bf00      	nop
 800c47a:	371c      	adds	r7, #28
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	40010000 	.word	0x40010000
 800c488:	40010400 	.word	0x40010400
 800c48c:	40014000 	.word	0x40014000
 800c490:	40014400 	.word	0x40014400
 800c494:	40014800 	.word	0x40014800

0800c498 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c498:	b480      	push	{r7}
 800c49a:	b087      	sub	sp, #28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	021b      	lsls	r3, r3, #8
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	051b      	lsls	r3, r3, #20
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a18      	ldr	r2, [pc, #96]	; (800c54c <TIM_OC6_SetConfig+0xb4>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d00f      	beq.n	800c510 <TIM_OC6_SetConfig+0x78>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a17      	ldr	r2, [pc, #92]	; (800c550 <TIM_OC6_SetConfig+0xb8>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d00b      	beq.n	800c510 <TIM_OC6_SetConfig+0x78>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a16      	ldr	r2, [pc, #88]	; (800c554 <TIM_OC6_SetConfig+0xbc>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d007      	beq.n	800c510 <TIM_OC6_SetConfig+0x78>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a15      	ldr	r2, [pc, #84]	; (800c558 <TIM_OC6_SetConfig+0xc0>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d003      	beq.n	800c510 <TIM_OC6_SetConfig+0x78>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a14      	ldr	r2, [pc, #80]	; (800c55c <TIM_OC6_SetConfig+0xc4>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d109      	bne.n	800c524 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	029b      	lsls	r3, r3, #10
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	4313      	orrs	r3, r2
 800c522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	621a      	str	r2, [r3, #32]
}
 800c53e:	bf00      	nop
 800c540:	371c      	adds	r7, #28
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	40010000 	.word	0x40010000
 800c550:	40010400 	.word	0x40010400
 800c554:	40014000 	.word	0x40014000
 800c558:	40014400 	.word	0x40014400
 800c55c:	40014800 	.word	0x40014800

0800c560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c560:	b480      	push	{r7}
 800c562:	b087      	sub	sp, #28
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	f023 0201 	bic.w	r2, r3, #1
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c58a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	011b      	lsls	r3, r3, #4
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	4313      	orrs	r3, r2
 800c594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	f023 030a 	bic.w	r3, r3, #10
 800c59c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c59e:	697a      	ldr	r2, [r7, #20]
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	697a      	ldr	r2, [r7, #20]
 800c5b0:	621a      	str	r2, [r3, #32]
}
 800c5b2:	bf00      	nop
 800c5b4:	371c      	adds	r7, #28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b087      	sub	sp, #28
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	60f8      	str	r0, [r7, #12]
 800c5c6:	60b9      	str	r1, [r7, #8]
 800c5c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	f023 0210 	bic.w	r2, r3, #16
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6a1b      	ldr	r3, [r3, #32]
 800c5e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	031b      	lsls	r3, r3, #12
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c5fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	011b      	lsls	r3, r3, #4
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	4313      	orrs	r3, r2
 800c604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	697a      	ldr	r2, [r7, #20]
 800c60a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	621a      	str	r2, [r3, #32]
}
 800c612:	bf00      	nop
 800c614:	371c      	adds	r7, #28
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
	...

0800c620 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	4b09      	ldr	r3, [pc, #36]	; (800c658 <TIM_ITRx_SetConfig+0x38>)
 800c634:	4013      	ands	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	4313      	orrs	r3, r2
 800c63e:	f043 0307 	orr.w	r3, r3, #7
 800c642:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	609a      	str	r2, [r3, #8]
}
 800c64a:	bf00      	nop
 800c64c:	3714      	adds	r7, #20
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	ffcfff8f 	.word	0xffcfff8f

0800c65c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	021a      	lsls	r2, r3, #8
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	431a      	orrs	r2, r3
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	4313      	orrs	r3, r2
 800c684:	697a      	ldr	r2, [r7, #20]
 800c686:	4313      	orrs	r3, r2
 800c688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	609a      	str	r2, [r3, #8]
}
 800c690:	bf00      	nop
 800c692:	371c      	adds	r7, #28
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d101      	bne.n	800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	e068      	b.n	800c786 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2202      	movs	r2, #2
 800c6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a2e      	ldr	r2, [pc, #184]	; (800c794 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d004      	beq.n	800c6e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a2d      	ldr	r2, [pc, #180]	; (800c798 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d108      	bne.n	800c6fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c6ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	4313      	orrs	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a1e      	ldr	r2, [pc, #120]	; (800c794 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d01d      	beq.n	800c75a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c726:	d018      	beq.n	800c75a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a1b      	ldr	r2, [pc, #108]	; (800c79c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d013      	beq.n	800c75a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a1a      	ldr	r2, [pc, #104]	; (800c7a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d00e      	beq.n	800c75a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a18      	ldr	r2, [pc, #96]	; (800c7a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d009      	beq.n	800c75a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a13      	ldr	r2, [pc, #76]	; (800c798 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d004      	beq.n	800c75a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a14      	ldr	r2, [pc, #80]	; (800c7a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d10c      	bne.n	800c774 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	68ba      	ldr	r2, [r7, #8]
 800c768:	4313      	orrs	r3, r2
 800c76a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c784:	2300      	movs	r3, #0
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	40010000 	.word	0x40010000
 800c798:	40010400 	.word	0x40010400
 800c79c:	40000400 	.word	0x40000400
 800c7a0:	40000800 	.word	0x40000800
 800c7a4:	40000c00 	.word	0x40000c00
 800c7a8:	40001800 	.word	0x40001800

0800c7ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d101      	bne.n	800c7c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	e065      	b.n	800c894 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	689b      	ldr	r3, [r3, #8]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4313      	orrs	r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	4313      	orrs	r3, r2
 800c814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	4313      	orrs	r3, r2
 800c822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82e:	4313      	orrs	r3, r2
 800c830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	041b      	lsls	r3, r3, #16
 800c83e:	4313      	orrs	r3, r2
 800c840:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a16      	ldr	r2, [pc, #88]	; (800c8a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d004      	beq.n	800c856 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a14      	ldr	r2, [pc, #80]	; (800c8a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d115      	bne.n	800c882 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	051b      	lsls	r3, r3, #20
 800c862:	4313      	orrs	r3, r2
 800c864:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	69db      	ldr	r3, [r3, #28]
 800c870:	4313      	orrs	r3, r2
 800c872:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	4313      	orrs	r3, r2
 800c880:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	40010000 	.word	0x40010000
 800c8a4:	40010400 	.word	0x40010400

0800c8a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8b0:	bf00      	nop
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr

0800c8bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d101      	bne.n	800c8f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e042      	b.n	800c97c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d106      	bne.n	800c90e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f7f4 ff5d 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2224      	movs	r2, #36	; 0x24
 800c912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f022 0201 	bic.w	r2, r2, #1
 800c924:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fb06 	bl	800cf38 <UART_SetConfig>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d101      	bne.n	800c936 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e022      	b.n	800c97c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 f85a 	bl	800d9f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	685a      	ldr	r2, [r3, #4]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f042 0201 	orr.w	r2, r2, #1
 800c972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f001 f8e1 	bl	800db3c <UART_CheckIdleState>
 800c97a:	4603      	mov	r3, r0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b088      	sub	sp, #32
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c9a4:	69fa      	ldr	r2, [r7, #28]
 800c9a6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d118      	bne.n	800c9e6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	f003 0320 	and.w	r3, r3, #32
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d013      	beq.n	800c9e6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	f003 0320 	and.w	r3, r3, #32
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d104      	bne.n	800c9d2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d009      	beq.n	800c9e6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 8282 	beq.w	800cee0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	4798      	blx	r3
      }
      return;
 800c9e4:	e27c      	b.n	800cee0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 80ef 	beq.w	800cbcc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	4b73      	ldr	r3, [pc, #460]	; (800cbc0 <HAL_UART_IRQHandler+0x23c>)
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d105      	bne.n	800ca04 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c9f8:	69ba      	ldr	r2, [r7, #24]
 800c9fa:	4b72      	ldr	r3, [pc, #456]	; (800cbc4 <HAL_UART_IRQHandler+0x240>)
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 80e4 	beq.w	800cbcc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d010      	beq.n	800ca30 <HAL_UART_IRQHandler+0xac>
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00b      	beq.n	800ca30 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca26:	f043 0201 	orr.w	r2, r3, #1
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d010      	beq.n	800ca5c <HAL_UART_IRQHandler+0xd8>
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00b      	beq.n	800ca5c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2202      	movs	r2, #2
 800ca4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca52:	f043 0204 	orr.w	r2, r3, #4
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f003 0304 	and.w	r3, r3, #4
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d010      	beq.n	800ca88 <HAL_UART_IRQHandler+0x104>
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00b      	beq.n	800ca88 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2204      	movs	r2, #4
 800ca76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca7e:	f043 0202 	orr.w	r2, r3, #2
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	f003 0308 	and.w	r3, r3, #8
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d015      	beq.n	800cabe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	f003 0320 	and.w	r3, r3, #32
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d104      	bne.n	800caa6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	4b48      	ldr	r3, [pc, #288]	; (800cbc0 <HAL_UART_IRQHandler+0x23c>)
 800caa0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00b      	beq.n	800cabe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2208      	movs	r2, #8
 800caac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cab4:	f043 0208 	orr.w	r2, r3, #8
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d011      	beq.n	800caec <HAL_UART_IRQHandler+0x168>
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00c      	beq.n	800caec <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cae2:	f043 0220 	orr.w	r2, r3, #32
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f000 81f6 	beq.w	800cee4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	f003 0320 	and.w	r3, r3, #32
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d011      	beq.n	800cb26 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	f003 0320 	and.w	r3, r3, #32
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d104      	bne.n	800cb16 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d007      	beq.n	800cb26 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d003      	beq.n	800cb26 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb2c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb38:	2b40      	cmp	r3, #64	; 0x40
 800cb3a:	d004      	beq.n	800cb46 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d031      	beq.n	800cbaa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f001 f8c4 	bl	800dcd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb56:	2b40      	cmp	r3, #64	; 0x40
 800cb58:	d123      	bne.n	800cba2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	689a      	ldr	r2, [r3, #8]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb68:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d013      	beq.n	800cb9a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb76:	4a14      	ldr	r2, [pc, #80]	; (800cbc8 <HAL_UART_IRQHandler+0x244>)
 800cb78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7f6 f838 	bl	8002bf4 <HAL_DMA_Abort_IT>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d017      	beq.n	800cbba <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cb94:	4610      	mov	r0, r2
 800cb96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb98:	e00f      	b.n	800cbba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 f9b6 	bl	800cf0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba0:	e00b      	b.n	800cbba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f9b2 	bl	800cf0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cba8:	e007      	b.n	800cbba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f000 f9ae 	bl	800cf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cbb8:	e194      	b.n	800cee4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbba:	bf00      	nop
    return;
 800cbbc:	e192      	b.n	800cee4 <HAL_UART_IRQHandler+0x560>
 800cbbe:	bf00      	nop
 800cbc0:	10000001 	.word	0x10000001
 800cbc4:	04000120 	.word	0x04000120
 800cbc8:	0800dd39 	.word	0x0800dd39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	f040 810f 	bne.w	800cdf4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	f003 0310 	and.w	r3, r3, #16
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 8109 	beq.w	800cdf4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	f003 0310 	and.w	r3, r3, #16
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	f000 8103 	beq.w	800cdf4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2210      	movs	r2, #16
 800cbf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc00:	2b40      	cmp	r3, #64	; 0x40
 800cc02:	f040 80bb 	bne.w	800cd7c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a96      	ldr	r2, [pc, #600]	; (800ce68 <HAL_UART_IRQHandler+0x4e4>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d059      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a94      	ldr	r2, [pc, #592]	; (800ce6c <HAL_UART_IRQHandler+0x4e8>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d053      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a92      	ldr	r2, [pc, #584]	; (800ce70 <HAL_UART_IRQHandler+0x4ec>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d04d      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a90      	ldr	r2, [pc, #576]	; (800ce74 <HAL_UART_IRQHandler+0x4f0>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d047      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a8e      	ldr	r2, [pc, #568]	; (800ce78 <HAL_UART_IRQHandler+0x4f4>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d041      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a8c      	ldr	r2, [pc, #560]	; (800ce7c <HAL_UART_IRQHandler+0x4f8>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d03b      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a8a      	ldr	r2, [pc, #552]	; (800ce80 <HAL_UART_IRQHandler+0x4fc>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d035      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a88      	ldr	r2, [pc, #544]	; (800ce84 <HAL_UART_IRQHandler+0x500>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d02f      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a86      	ldr	r2, [pc, #536]	; (800ce88 <HAL_UART_IRQHandler+0x504>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d029      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a84      	ldr	r2, [pc, #528]	; (800ce8c <HAL_UART_IRQHandler+0x508>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d023      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4a82      	ldr	r2, [pc, #520]	; (800ce90 <HAL_UART_IRQHandler+0x50c>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d01d      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a80      	ldr	r2, [pc, #512]	; (800ce94 <HAL_UART_IRQHandler+0x510>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d017      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a7e      	ldr	r2, [pc, #504]	; (800ce98 <HAL_UART_IRQHandler+0x514>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d011      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a7c      	ldr	r2, [pc, #496]	; (800ce9c <HAL_UART_IRQHandler+0x518>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d00b      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a7a      	ldr	r2, [pc, #488]	; (800cea0 <HAL_UART_IRQHandler+0x51c>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d005      	beq.n	800ccc6 <HAL_UART_IRQHandler+0x342>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a78      	ldr	r2, [pc, #480]	; (800cea4 <HAL_UART_IRQHandler+0x520>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d105      	bne.n	800ccd2 <HAL_UART_IRQHandler+0x34e>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	e004      	b.n	800ccdc <HAL_UART_IRQHandler+0x358>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800ccde:	893b      	ldrh	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 8101 	beq.w	800cee8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ccec:	893a      	ldrh	r2, [r7, #8]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	f080 80fa 	bcs.w	800cee8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	893a      	ldrh	r2, [r7, #8]
 800ccf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd06:	d02b      	beq.n	800cd60 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd16:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f022 0201 	bic.w	r2, r2, #1
 800cd26:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	689a      	ldr	r2, [r3, #8]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd36:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2220      	movs	r2, #32
 800cd3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 0210 	bic.w	r2, r2, #16
 800cd54:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7f5 fc2c 	bl	80025b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f8d3 	bl	800cf20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd7a:	e0b5      	b.n	800cee8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 80a8 	beq.w	800ceec <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800cd9c:	897b      	ldrh	r3, [r7, #10]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 80a4 	beq.w	800ceec <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cdb2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	6899      	ldr	r1, [r3, #8]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	4b3a      	ldr	r3, [pc, #232]	; (800cea8 <HAL_UART_IRQHandler+0x524>)
 800cdc0:	400b      	ands	r3, r1
 800cdc2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2220      	movs	r2, #32
 800cdc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f022 0210 	bic.w	r2, r2, #16
 800cde6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cde8:	897b      	ldrh	r3, [r7, #10]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f897 	bl	800cf20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cdf2:	e07b      	b.n	800ceec <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00d      	beq.n	800ce1a <HAL_UART_IRQHandler+0x496>
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d008      	beq.n	800ce1a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ce10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 ffc0 	bl	800dd98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce18:	e06b      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d012      	beq.n	800ce4a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d104      	bne.n	800ce38 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d008      	beq.n	800ce4a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d057      	beq.n	800cef0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	4798      	blx	r3
    }
    return;
 800ce48:	e052      	b.n	800cef0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d02b      	beq.n	800ceac <HAL_UART_IRQHandler+0x528>
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d026      	beq.n	800ceac <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 ff80 	bl	800dd64 <UART_EndTransmit_IT>
    return;
 800ce64:	e045      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
 800ce66:	bf00      	nop
 800ce68:	40020010 	.word	0x40020010
 800ce6c:	40020028 	.word	0x40020028
 800ce70:	40020040 	.word	0x40020040
 800ce74:	40020058 	.word	0x40020058
 800ce78:	40020070 	.word	0x40020070
 800ce7c:	40020088 	.word	0x40020088
 800ce80:	400200a0 	.word	0x400200a0
 800ce84:	400200b8 	.word	0x400200b8
 800ce88:	40020410 	.word	0x40020410
 800ce8c:	40020428 	.word	0x40020428
 800ce90:	40020440 	.word	0x40020440
 800ce94:	40020458 	.word	0x40020458
 800ce98:	40020470 	.word	0x40020470
 800ce9c:	40020488 	.word	0x40020488
 800cea0:	400204a0 	.word	0x400204a0
 800cea4:	400204b8 	.word	0x400204b8
 800cea8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d008      	beq.n	800cec8 <HAL_UART_IRQHandler+0x544>
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d003      	beq.n	800cec8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 ff7d 	bl	800ddc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cec6:	e014      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00f      	beq.n	800cef2 <HAL_UART_IRQHandler+0x56e>
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	da0c      	bge.n	800cef2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 ff67 	bl	800ddac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cede:	e008      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
      return;
 800cee0:	bf00      	nop
 800cee2:	e006      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
    return;
 800cee4:	bf00      	nop
 800cee6:	e004      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
      return;
 800cee8:	bf00      	nop
 800ceea:	e002      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
      return;
 800ceec:	bf00      	nop
 800ceee:	e000      	b.n	800cef2 <HAL_UART_IRQHandler+0x56e>
    return;
 800cef0:	bf00      	nop
  }
}
 800cef2:	3720      	adds	r7, #32
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf38:	b5b0      	push	{r4, r5, r7, lr}
 800cf3a:	b08e      	sub	sp, #56	; 0x38
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cf40:	2300      	movs	r3, #0
 800cf42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	689a      	ldr	r2, [r3, #8]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	431a      	orrs	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	431a      	orrs	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	69db      	ldr	r3, [r3, #28]
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	4bbf      	ldr	r3, [pc, #764]	; (800d264 <UART_SetConfig+0x32c>)
 800cf66:	4013      	ands	r3, r2
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	6812      	ldr	r2, [r2, #0]
 800cf6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf6e:	430b      	orrs	r3, r1
 800cf70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68da      	ldr	r2, [r3, #12]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4ab5      	ldr	r2, [pc, #724]	; (800d268 <UART_SetConfig+0x330>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d004      	beq.n	800cfa2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a1b      	ldr	r3, [r3, #32]
 800cf9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	4bb0      	ldr	r3, [pc, #704]	; (800d26c <UART_SetConfig+0x334>)
 800cfaa:	4013      	ands	r3, r2
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	6812      	ldr	r2, [r2, #0]
 800cfb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cfb2:	430b      	orrs	r3, r1
 800cfb4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfbc:	f023 010f 	bic.w	r1, r3, #15
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	430a      	orrs	r2, r1
 800cfca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4aa7      	ldr	r2, [pc, #668]	; (800d270 <UART_SetConfig+0x338>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d176      	bne.n	800d0c4 <UART_SetConfig+0x18c>
 800cfd6:	4ba7      	ldr	r3, [pc, #668]	; (800d274 <UART_SetConfig+0x33c>)
 800cfd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cfde:	2b28      	cmp	r3, #40	; 0x28
 800cfe0:	d86c      	bhi.n	800d0bc <UART_SetConfig+0x184>
 800cfe2:	a201      	add	r2, pc, #4	; (adr r2, 800cfe8 <UART_SetConfig+0xb0>)
 800cfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe8:	0800d08d 	.word	0x0800d08d
 800cfec:	0800d0bd 	.word	0x0800d0bd
 800cff0:	0800d0bd 	.word	0x0800d0bd
 800cff4:	0800d0bd 	.word	0x0800d0bd
 800cff8:	0800d0bd 	.word	0x0800d0bd
 800cffc:	0800d0bd 	.word	0x0800d0bd
 800d000:	0800d0bd 	.word	0x0800d0bd
 800d004:	0800d0bd 	.word	0x0800d0bd
 800d008:	0800d095 	.word	0x0800d095
 800d00c:	0800d0bd 	.word	0x0800d0bd
 800d010:	0800d0bd 	.word	0x0800d0bd
 800d014:	0800d0bd 	.word	0x0800d0bd
 800d018:	0800d0bd 	.word	0x0800d0bd
 800d01c:	0800d0bd 	.word	0x0800d0bd
 800d020:	0800d0bd 	.word	0x0800d0bd
 800d024:	0800d0bd 	.word	0x0800d0bd
 800d028:	0800d09d 	.word	0x0800d09d
 800d02c:	0800d0bd 	.word	0x0800d0bd
 800d030:	0800d0bd 	.word	0x0800d0bd
 800d034:	0800d0bd 	.word	0x0800d0bd
 800d038:	0800d0bd 	.word	0x0800d0bd
 800d03c:	0800d0bd 	.word	0x0800d0bd
 800d040:	0800d0bd 	.word	0x0800d0bd
 800d044:	0800d0bd 	.word	0x0800d0bd
 800d048:	0800d0a5 	.word	0x0800d0a5
 800d04c:	0800d0bd 	.word	0x0800d0bd
 800d050:	0800d0bd 	.word	0x0800d0bd
 800d054:	0800d0bd 	.word	0x0800d0bd
 800d058:	0800d0bd 	.word	0x0800d0bd
 800d05c:	0800d0bd 	.word	0x0800d0bd
 800d060:	0800d0bd 	.word	0x0800d0bd
 800d064:	0800d0bd 	.word	0x0800d0bd
 800d068:	0800d0ad 	.word	0x0800d0ad
 800d06c:	0800d0bd 	.word	0x0800d0bd
 800d070:	0800d0bd 	.word	0x0800d0bd
 800d074:	0800d0bd 	.word	0x0800d0bd
 800d078:	0800d0bd 	.word	0x0800d0bd
 800d07c:	0800d0bd 	.word	0x0800d0bd
 800d080:	0800d0bd 	.word	0x0800d0bd
 800d084:	0800d0bd 	.word	0x0800d0bd
 800d088:	0800d0b5 	.word	0x0800d0b5
 800d08c:	2301      	movs	r3, #1
 800d08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d092:	e222      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d094:	2304      	movs	r3, #4
 800d096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d09a:	e21e      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d09c:	2308      	movs	r3, #8
 800d09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0a2:	e21a      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d0a4:	2310      	movs	r3, #16
 800d0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0aa:	e216      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0b2:	e212      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d0b4:	2340      	movs	r3, #64	; 0x40
 800d0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ba:	e20e      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d0bc:	2380      	movs	r3, #128	; 0x80
 800d0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c2:	e20a      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a6b      	ldr	r2, [pc, #428]	; (800d278 <UART_SetConfig+0x340>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d130      	bne.n	800d130 <UART_SetConfig+0x1f8>
 800d0ce:	4b69      	ldr	r3, [pc, #420]	; (800d274 <UART_SetConfig+0x33c>)
 800d0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	2b05      	cmp	r3, #5
 800d0d8:	d826      	bhi.n	800d128 <UART_SetConfig+0x1f0>
 800d0da:	a201      	add	r2, pc, #4	; (adr r2, 800d0e0 <UART_SetConfig+0x1a8>)
 800d0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e0:	0800d0f9 	.word	0x0800d0f9
 800d0e4:	0800d101 	.word	0x0800d101
 800d0e8:	0800d109 	.word	0x0800d109
 800d0ec:	0800d111 	.word	0x0800d111
 800d0f0:	0800d119 	.word	0x0800d119
 800d0f4:	0800d121 	.word	0x0800d121
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0fe:	e1ec      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d100:	2304      	movs	r3, #4
 800d102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d106:	e1e8      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d108:	2308      	movs	r3, #8
 800d10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d10e:	e1e4      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d110:	2310      	movs	r3, #16
 800d112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d116:	e1e0      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d118:	2320      	movs	r3, #32
 800d11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d11e:	e1dc      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d120:	2340      	movs	r3, #64	; 0x40
 800d122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d126:	e1d8      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d128:	2380      	movs	r3, #128	; 0x80
 800d12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12e:	e1d4      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a51      	ldr	r2, [pc, #324]	; (800d27c <UART_SetConfig+0x344>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d130      	bne.n	800d19c <UART_SetConfig+0x264>
 800d13a:	4b4e      	ldr	r3, [pc, #312]	; (800d274 <UART_SetConfig+0x33c>)
 800d13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d13e:	f003 0307 	and.w	r3, r3, #7
 800d142:	2b05      	cmp	r3, #5
 800d144:	d826      	bhi.n	800d194 <UART_SetConfig+0x25c>
 800d146:	a201      	add	r2, pc, #4	; (adr r2, 800d14c <UART_SetConfig+0x214>)
 800d148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d14c:	0800d165 	.word	0x0800d165
 800d150:	0800d16d 	.word	0x0800d16d
 800d154:	0800d175 	.word	0x0800d175
 800d158:	0800d17d 	.word	0x0800d17d
 800d15c:	0800d185 	.word	0x0800d185
 800d160:	0800d18d 	.word	0x0800d18d
 800d164:	2300      	movs	r3, #0
 800d166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d16a:	e1b6      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d16c:	2304      	movs	r3, #4
 800d16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d172:	e1b2      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d174:	2308      	movs	r3, #8
 800d176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d17a:	e1ae      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d17c:	2310      	movs	r3, #16
 800d17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d182:	e1aa      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d184:	2320      	movs	r3, #32
 800d186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d18a:	e1a6      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d18c:	2340      	movs	r3, #64	; 0x40
 800d18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d192:	e1a2      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d194:	2380      	movs	r3, #128	; 0x80
 800d196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d19a:	e19e      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a37      	ldr	r2, [pc, #220]	; (800d280 <UART_SetConfig+0x348>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d130      	bne.n	800d208 <UART_SetConfig+0x2d0>
 800d1a6:	4b33      	ldr	r3, [pc, #204]	; (800d274 <UART_SetConfig+0x33c>)
 800d1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1aa:	f003 0307 	and.w	r3, r3, #7
 800d1ae:	2b05      	cmp	r3, #5
 800d1b0:	d826      	bhi.n	800d200 <UART_SetConfig+0x2c8>
 800d1b2:	a201      	add	r2, pc, #4	; (adr r2, 800d1b8 <UART_SetConfig+0x280>)
 800d1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b8:	0800d1d1 	.word	0x0800d1d1
 800d1bc:	0800d1d9 	.word	0x0800d1d9
 800d1c0:	0800d1e1 	.word	0x0800d1e1
 800d1c4:	0800d1e9 	.word	0x0800d1e9
 800d1c8:	0800d1f1 	.word	0x0800d1f1
 800d1cc:	0800d1f9 	.word	0x0800d1f9
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1d6:	e180      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d1d8:	2304      	movs	r3, #4
 800d1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1de:	e17c      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d1e0:	2308      	movs	r3, #8
 800d1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1e6:	e178      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d1e8:	2310      	movs	r3, #16
 800d1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1ee:	e174      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d1f0:	2320      	movs	r3, #32
 800d1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1f6:	e170      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d1f8:	2340      	movs	r3, #64	; 0x40
 800d1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d1fe:	e16c      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d200:	2380      	movs	r3, #128	; 0x80
 800d202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d206:	e168      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a1d      	ldr	r2, [pc, #116]	; (800d284 <UART_SetConfig+0x34c>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d142      	bne.n	800d298 <UART_SetConfig+0x360>
 800d212:	4b18      	ldr	r3, [pc, #96]	; (800d274 <UART_SetConfig+0x33c>)
 800d214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d216:	f003 0307 	and.w	r3, r3, #7
 800d21a:	2b05      	cmp	r3, #5
 800d21c:	d838      	bhi.n	800d290 <UART_SetConfig+0x358>
 800d21e:	a201      	add	r2, pc, #4	; (adr r2, 800d224 <UART_SetConfig+0x2ec>)
 800d220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d224:	0800d23d 	.word	0x0800d23d
 800d228:	0800d245 	.word	0x0800d245
 800d22c:	0800d24d 	.word	0x0800d24d
 800d230:	0800d255 	.word	0x0800d255
 800d234:	0800d25d 	.word	0x0800d25d
 800d238:	0800d289 	.word	0x0800d289
 800d23c:	2300      	movs	r3, #0
 800d23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d242:	e14a      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d244:	2304      	movs	r3, #4
 800d246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d24a:	e146      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d24c:	2308      	movs	r3, #8
 800d24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d252:	e142      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d254:	2310      	movs	r3, #16
 800d256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d25a:	e13e      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d25c:	2320      	movs	r3, #32
 800d25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d262:	e13a      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d264:	cfff69f3 	.word	0xcfff69f3
 800d268:	58000c00 	.word	0x58000c00
 800d26c:	11fff4ff 	.word	0x11fff4ff
 800d270:	40011000 	.word	0x40011000
 800d274:	58024400 	.word	0x58024400
 800d278:	40004400 	.word	0x40004400
 800d27c:	40004800 	.word	0x40004800
 800d280:	40004c00 	.word	0x40004c00
 800d284:	40005000 	.word	0x40005000
 800d288:	2340      	movs	r3, #64	; 0x40
 800d28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d28e:	e124      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d290:	2380      	movs	r3, #128	; 0x80
 800d292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d296:	e120      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4acc      	ldr	r2, [pc, #816]	; (800d5d0 <UART_SetConfig+0x698>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d176      	bne.n	800d390 <UART_SetConfig+0x458>
 800d2a2:	4bcc      	ldr	r3, [pc, #816]	; (800d5d4 <UART_SetConfig+0x69c>)
 800d2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2aa:	2b28      	cmp	r3, #40	; 0x28
 800d2ac:	d86c      	bhi.n	800d388 <UART_SetConfig+0x450>
 800d2ae:	a201      	add	r2, pc, #4	; (adr r2, 800d2b4 <UART_SetConfig+0x37c>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d359 	.word	0x0800d359
 800d2b8:	0800d389 	.word	0x0800d389
 800d2bc:	0800d389 	.word	0x0800d389
 800d2c0:	0800d389 	.word	0x0800d389
 800d2c4:	0800d389 	.word	0x0800d389
 800d2c8:	0800d389 	.word	0x0800d389
 800d2cc:	0800d389 	.word	0x0800d389
 800d2d0:	0800d389 	.word	0x0800d389
 800d2d4:	0800d361 	.word	0x0800d361
 800d2d8:	0800d389 	.word	0x0800d389
 800d2dc:	0800d389 	.word	0x0800d389
 800d2e0:	0800d389 	.word	0x0800d389
 800d2e4:	0800d389 	.word	0x0800d389
 800d2e8:	0800d389 	.word	0x0800d389
 800d2ec:	0800d389 	.word	0x0800d389
 800d2f0:	0800d389 	.word	0x0800d389
 800d2f4:	0800d369 	.word	0x0800d369
 800d2f8:	0800d389 	.word	0x0800d389
 800d2fc:	0800d389 	.word	0x0800d389
 800d300:	0800d389 	.word	0x0800d389
 800d304:	0800d389 	.word	0x0800d389
 800d308:	0800d389 	.word	0x0800d389
 800d30c:	0800d389 	.word	0x0800d389
 800d310:	0800d389 	.word	0x0800d389
 800d314:	0800d371 	.word	0x0800d371
 800d318:	0800d389 	.word	0x0800d389
 800d31c:	0800d389 	.word	0x0800d389
 800d320:	0800d389 	.word	0x0800d389
 800d324:	0800d389 	.word	0x0800d389
 800d328:	0800d389 	.word	0x0800d389
 800d32c:	0800d389 	.word	0x0800d389
 800d330:	0800d389 	.word	0x0800d389
 800d334:	0800d379 	.word	0x0800d379
 800d338:	0800d389 	.word	0x0800d389
 800d33c:	0800d389 	.word	0x0800d389
 800d340:	0800d389 	.word	0x0800d389
 800d344:	0800d389 	.word	0x0800d389
 800d348:	0800d389 	.word	0x0800d389
 800d34c:	0800d389 	.word	0x0800d389
 800d350:	0800d389 	.word	0x0800d389
 800d354:	0800d381 	.word	0x0800d381
 800d358:	2301      	movs	r3, #1
 800d35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d35e:	e0bc      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d360:	2304      	movs	r3, #4
 800d362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d366:	e0b8      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d368:	2308      	movs	r3, #8
 800d36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d36e:	e0b4      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d370:	2310      	movs	r3, #16
 800d372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d376:	e0b0      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d378:	2320      	movs	r3, #32
 800d37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d37e:	e0ac      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d380:	2340      	movs	r3, #64	; 0x40
 800d382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d386:	e0a8      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d388:	2380      	movs	r3, #128	; 0x80
 800d38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d38e:	e0a4      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a90      	ldr	r2, [pc, #576]	; (800d5d8 <UART_SetConfig+0x6a0>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d130      	bne.n	800d3fc <UART_SetConfig+0x4c4>
 800d39a:	4b8e      	ldr	r3, [pc, #568]	; (800d5d4 <UART_SetConfig+0x69c>)
 800d39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d39e:	f003 0307 	and.w	r3, r3, #7
 800d3a2:	2b05      	cmp	r3, #5
 800d3a4:	d826      	bhi.n	800d3f4 <UART_SetConfig+0x4bc>
 800d3a6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ac <UART_SetConfig+0x474>)
 800d3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ac:	0800d3c5 	.word	0x0800d3c5
 800d3b0:	0800d3cd 	.word	0x0800d3cd
 800d3b4:	0800d3d5 	.word	0x0800d3d5
 800d3b8:	0800d3dd 	.word	0x0800d3dd
 800d3bc:	0800d3e5 	.word	0x0800d3e5
 800d3c0:	0800d3ed 	.word	0x0800d3ed
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3ca:	e086      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d3cc:	2304      	movs	r3, #4
 800d3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3d2:	e082      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d3d4:	2308      	movs	r3, #8
 800d3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3da:	e07e      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d3dc:	2310      	movs	r3, #16
 800d3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3e2:	e07a      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d3e4:	2320      	movs	r3, #32
 800d3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3ea:	e076      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d3ec:	2340      	movs	r3, #64	; 0x40
 800d3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3f2:	e072      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d3f4:	2380      	movs	r3, #128	; 0x80
 800d3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3fa:	e06e      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a76      	ldr	r2, [pc, #472]	; (800d5dc <UART_SetConfig+0x6a4>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d130      	bne.n	800d468 <UART_SetConfig+0x530>
 800d406:	4b73      	ldr	r3, [pc, #460]	; (800d5d4 <UART_SetConfig+0x69c>)
 800d408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d40a:	f003 0307 	and.w	r3, r3, #7
 800d40e:	2b05      	cmp	r3, #5
 800d410:	d826      	bhi.n	800d460 <UART_SetConfig+0x528>
 800d412:	a201      	add	r2, pc, #4	; (adr r2, 800d418 <UART_SetConfig+0x4e0>)
 800d414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d418:	0800d431 	.word	0x0800d431
 800d41c:	0800d439 	.word	0x0800d439
 800d420:	0800d441 	.word	0x0800d441
 800d424:	0800d449 	.word	0x0800d449
 800d428:	0800d451 	.word	0x0800d451
 800d42c:	0800d459 	.word	0x0800d459
 800d430:	2300      	movs	r3, #0
 800d432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d436:	e050      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d438:	2304      	movs	r3, #4
 800d43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d43e:	e04c      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d440:	2308      	movs	r3, #8
 800d442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d446:	e048      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d448:	2310      	movs	r3, #16
 800d44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d44e:	e044      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d450:	2320      	movs	r3, #32
 800d452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d456:	e040      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d458:	2340      	movs	r3, #64	; 0x40
 800d45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d45e:	e03c      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d460:	2380      	movs	r3, #128	; 0x80
 800d462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d466:	e038      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a5c      	ldr	r2, [pc, #368]	; (800d5e0 <UART_SetConfig+0x6a8>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d130      	bne.n	800d4d4 <UART_SetConfig+0x59c>
 800d472:	4b58      	ldr	r3, [pc, #352]	; (800d5d4 <UART_SetConfig+0x69c>)
 800d474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d476:	f003 0307 	and.w	r3, r3, #7
 800d47a:	2b05      	cmp	r3, #5
 800d47c:	d826      	bhi.n	800d4cc <UART_SetConfig+0x594>
 800d47e:	a201      	add	r2, pc, #4	; (adr r2, 800d484 <UART_SetConfig+0x54c>)
 800d480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d484:	0800d49d 	.word	0x0800d49d
 800d488:	0800d4a5 	.word	0x0800d4a5
 800d48c:	0800d4ad 	.word	0x0800d4ad
 800d490:	0800d4b5 	.word	0x0800d4b5
 800d494:	0800d4bd 	.word	0x0800d4bd
 800d498:	0800d4c5 	.word	0x0800d4c5
 800d49c:	2302      	movs	r3, #2
 800d49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4a2:	e01a      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d4a4:	2304      	movs	r3, #4
 800d4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4aa:	e016      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d4ac:	2308      	movs	r3, #8
 800d4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4b2:	e012      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d4b4:	2310      	movs	r3, #16
 800d4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4ba:	e00e      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d4bc:	2320      	movs	r3, #32
 800d4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4c2:	e00a      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d4c4:	2340      	movs	r3, #64	; 0x40
 800d4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4ca:	e006      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d4cc:	2380      	movs	r3, #128	; 0x80
 800d4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4d2:	e002      	b.n	800d4da <UART_SetConfig+0x5a2>
 800d4d4:	2380      	movs	r3, #128	; 0x80
 800d4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a40      	ldr	r2, [pc, #256]	; (800d5e0 <UART_SetConfig+0x6a8>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	f040 80ef 	bne.w	800d6c4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d4e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d4ea:	2b20      	cmp	r3, #32
 800d4ec:	dc46      	bgt.n	800d57c <UART_SetConfig+0x644>
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	f2c0 8081 	blt.w	800d5f6 <UART_SetConfig+0x6be>
 800d4f4:	3b02      	subs	r3, #2
 800d4f6:	2b1e      	cmp	r3, #30
 800d4f8:	d87d      	bhi.n	800d5f6 <UART_SetConfig+0x6be>
 800d4fa:	a201      	add	r2, pc, #4	; (adr r2, 800d500 <UART_SetConfig+0x5c8>)
 800d4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d500:	0800d583 	.word	0x0800d583
 800d504:	0800d5f7 	.word	0x0800d5f7
 800d508:	0800d58b 	.word	0x0800d58b
 800d50c:	0800d5f7 	.word	0x0800d5f7
 800d510:	0800d5f7 	.word	0x0800d5f7
 800d514:	0800d5f7 	.word	0x0800d5f7
 800d518:	0800d59b 	.word	0x0800d59b
 800d51c:	0800d5f7 	.word	0x0800d5f7
 800d520:	0800d5f7 	.word	0x0800d5f7
 800d524:	0800d5f7 	.word	0x0800d5f7
 800d528:	0800d5f7 	.word	0x0800d5f7
 800d52c:	0800d5f7 	.word	0x0800d5f7
 800d530:	0800d5f7 	.word	0x0800d5f7
 800d534:	0800d5f7 	.word	0x0800d5f7
 800d538:	0800d5ab 	.word	0x0800d5ab
 800d53c:	0800d5f7 	.word	0x0800d5f7
 800d540:	0800d5f7 	.word	0x0800d5f7
 800d544:	0800d5f7 	.word	0x0800d5f7
 800d548:	0800d5f7 	.word	0x0800d5f7
 800d54c:	0800d5f7 	.word	0x0800d5f7
 800d550:	0800d5f7 	.word	0x0800d5f7
 800d554:	0800d5f7 	.word	0x0800d5f7
 800d558:	0800d5f7 	.word	0x0800d5f7
 800d55c:	0800d5f7 	.word	0x0800d5f7
 800d560:	0800d5f7 	.word	0x0800d5f7
 800d564:	0800d5f7 	.word	0x0800d5f7
 800d568:	0800d5f7 	.word	0x0800d5f7
 800d56c:	0800d5f7 	.word	0x0800d5f7
 800d570:	0800d5f7 	.word	0x0800d5f7
 800d574:	0800d5f7 	.word	0x0800d5f7
 800d578:	0800d5e9 	.word	0x0800d5e9
 800d57c:	2b40      	cmp	r3, #64	; 0x40
 800d57e:	d036      	beq.n	800d5ee <UART_SetConfig+0x6b6>
 800d580:	e039      	b.n	800d5f6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d582:	f7fb fec9 	bl	8009318 <HAL_RCCEx_GetD3PCLK1Freq>
 800d586:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d588:	e03b      	b.n	800d602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d58a:	f107 0314 	add.w	r3, r7, #20
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fb fed8 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d598:	e033      	b.n	800d602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d59a:	f107 0308 	add.w	r3, r7, #8
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fc f824 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5a8:	e02b      	b.n	800d602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5aa:	4b0a      	ldr	r3, [pc, #40]	; (800d5d4 <UART_SetConfig+0x69c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f003 0320 	and.w	r3, r3, #32
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5b6:	4b07      	ldr	r3, [pc, #28]	; (800d5d4 <UART_SetConfig+0x69c>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	08db      	lsrs	r3, r3, #3
 800d5bc:	f003 0303 	and.w	r3, r3, #3
 800d5c0:	4a08      	ldr	r2, [pc, #32]	; (800d5e4 <UART_SetConfig+0x6ac>)
 800d5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5c8:	e01b      	b.n	800d602 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d5ca:	4b06      	ldr	r3, [pc, #24]	; (800d5e4 <UART_SetConfig+0x6ac>)
 800d5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5ce:	e018      	b.n	800d602 <UART_SetConfig+0x6ca>
 800d5d0:	40011400 	.word	0x40011400
 800d5d4:	58024400 	.word	0x58024400
 800d5d8:	40007800 	.word	0x40007800
 800d5dc:	40007c00 	.word	0x40007c00
 800d5e0:	58000c00 	.word	0x58000c00
 800d5e4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5e8:	4bc4      	ldr	r3, [pc, #784]	; (800d8fc <UART_SetConfig+0x9c4>)
 800d5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5ec:	e009      	b.n	800d602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5f4:	e005      	b.n	800d602 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 81da 	beq.w	800d9be <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60e:	4abc      	ldr	r2, [pc, #752]	; (800d900 <UART_SetConfig+0x9c8>)
 800d610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d614:	461a      	mov	r2, r3
 800d616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d618:	fbb3 f3f2 	udiv	r3, r3, r2
 800d61c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	4613      	mov	r3, r2
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	4413      	add	r3, r2
 800d628:	6a3a      	ldr	r2, [r7, #32]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d305      	bcc.n	800d63a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d634:	6a3a      	ldr	r2, [r7, #32]
 800d636:	429a      	cmp	r2, r3
 800d638:	d903      	bls.n	800d642 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d640:	e1bd      	b.n	800d9be <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d644:	4618      	mov	r0, r3
 800d646:	f04f 0100 	mov.w	r1, #0
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64e:	4aac      	ldr	r2, [pc, #688]	; (800d900 <UART_SetConfig+0x9c8>)
 800d650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d654:	b29a      	uxth	r2, r3
 800d656:	f04f 0300 	mov.w	r3, #0
 800d65a:	f7f2 fe99 	bl	8000390 <__aeabi_uldivmod>
 800d65e:	4602      	mov	r2, r0
 800d660:	460b      	mov	r3, r1
 800d662:	4610      	mov	r0, r2
 800d664:	4619      	mov	r1, r3
 800d666:	f04f 0200 	mov.w	r2, #0
 800d66a:	f04f 0300 	mov.w	r3, #0
 800d66e:	020b      	lsls	r3, r1, #8
 800d670:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d674:	0202      	lsls	r2, r0, #8
 800d676:	6879      	ldr	r1, [r7, #4]
 800d678:	6849      	ldr	r1, [r1, #4]
 800d67a:	0849      	lsrs	r1, r1, #1
 800d67c:	4608      	mov	r0, r1
 800d67e:	f04f 0100 	mov.w	r1, #0
 800d682:	1814      	adds	r4, r2, r0
 800d684:	eb43 0501 	adc.w	r5, r3, r1
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	461a      	mov	r2, r3
 800d68e:	f04f 0300 	mov.w	r3, #0
 800d692:	4620      	mov	r0, r4
 800d694:	4629      	mov	r1, r5
 800d696:	f7f2 fe7b 	bl	8000390 <__aeabi_uldivmod>
 800d69a:	4602      	mov	r2, r0
 800d69c:	460b      	mov	r3, r1
 800d69e:	4613      	mov	r3, r2
 800d6a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6a8:	d308      	bcc.n	800d6bc <UART_SetConfig+0x784>
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6b0:	d204      	bcs.n	800d6bc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6b8:	60da      	str	r2, [r3, #12]
 800d6ba:	e180      	b.n	800d9be <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d6c2:	e17c      	b.n	800d9be <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6cc:	f040 80bf 	bne.w	800d84e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d6d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6d4:	2b20      	cmp	r3, #32
 800d6d6:	dc49      	bgt.n	800d76c <UART_SetConfig+0x834>
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	db7c      	blt.n	800d7d6 <UART_SetConfig+0x89e>
 800d6dc:	2b20      	cmp	r3, #32
 800d6de:	d87a      	bhi.n	800d7d6 <UART_SetConfig+0x89e>
 800d6e0:	a201      	add	r2, pc, #4	; (adr r2, 800d6e8 <UART_SetConfig+0x7b0>)
 800d6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e6:	bf00      	nop
 800d6e8:	0800d773 	.word	0x0800d773
 800d6ec:	0800d77b 	.word	0x0800d77b
 800d6f0:	0800d7d7 	.word	0x0800d7d7
 800d6f4:	0800d7d7 	.word	0x0800d7d7
 800d6f8:	0800d783 	.word	0x0800d783
 800d6fc:	0800d7d7 	.word	0x0800d7d7
 800d700:	0800d7d7 	.word	0x0800d7d7
 800d704:	0800d7d7 	.word	0x0800d7d7
 800d708:	0800d793 	.word	0x0800d793
 800d70c:	0800d7d7 	.word	0x0800d7d7
 800d710:	0800d7d7 	.word	0x0800d7d7
 800d714:	0800d7d7 	.word	0x0800d7d7
 800d718:	0800d7d7 	.word	0x0800d7d7
 800d71c:	0800d7d7 	.word	0x0800d7d7
 800d720:	0800d7d7 	.word	0x0800d7d7
 800d724:	0800d7d7 	.word	0x0800d7d7
 800d728:	0800d7a3 	.word	0x0800d7a3
 800d72c:	0800d7d7 	.word	0x0800d7d7
 800d730:	0800d7d7 	.word	0x0800d7d7
 800d734:	0800d7d7 	.word	0x0800d7d7
 800d738:	0800d7d7 	.word	0x0800d7d7
 800d73c:	0800d7d7 	.word	0x0800d7d7
 800d740:	0800d7d7 	.word	0x0800d7d7
 800d744:	0800d7d7 	.word	0x0800d7d7
 800d748:	0800d7d7 	.word	0x0800d7d7
 800d74c:	0800d7d7 	.word	0x0800d7d7
 800d750:	0800d7d7 	.word	0x0800d7d7
 800d754:	0800d7d7 	.word	0x0800d7d7
 800d758:	0800d7d7 	.word	0x0800d7d7
 800d75c:	0800d7d7 	.word	0x0800d7d7
 800d760:	0800d7d7 	.word	0x0800d7d7
 800d764:	0800d7d7 	.word	0x0800d7d7
 800d768:	0800d7c9 	.word	0x0800d7c9
 800d76c:	2b40      	cmp	r3, #64	; 0x40
 800d76e:	d02e      	beq.n	800d7ce <UART_SetConfig+0x896>
 800d770:	e031      	b.n	800d7d6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d772:	f7fa f951 	bl	8007a18 <HAL_RCC_GetPCLK1Freq>
 800d776:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d778:	e033      	b.n	800d7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d77a:	f7fa f963 	bl	8007a44 <HAL_RCC_GetPCLK2Freq>
 800d77e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d780:	e02f      	b.n	800d7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d782:	f107 0314 	add.w	r3, r7, #20
 800d786:	4618      	mov	r0, r3
 800d788:	f7fb fddc 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d790:	e027      	b.n	800d7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d792:	f107 0308 	add.w	r3, r7, #8
 800d796:	4618      	mov	r0, r3
 800d798:	f7fb ff28 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7a0:	e01f      	b.n	800d7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7a2:	4b58      	ldr	r3, [pc, #352]	; (800d904 <UART_SetConfig+0x9cc>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f003 0320 	and.w	r3, r3, #32
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d009      	beq.n	800d7c2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7ae:	4b55      	ldr	r3, [pc, #340]	; (800d904 <UART_SetConfig+0x9cc>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	08db      	lsrs	r3, r3, #3
 800d7b4:	f003 0303 	and.w	r3, r3, #3
 800d7b8:	4a53      	ldr	r2, [pc, #332]	; (800d908 <UART_SetConfig+0x9d0>)
 800d7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7c0:	e00f      	b.n	800d7e2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d7c2:	4b51      	ldr	r3, [pc, #324]	; (800d908 <UART_SetConfig+0x9d0>)
 800d7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7c6:	e00c      	b.n	800d7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7c8:	4b4c      	ldr	r3, [pc, #304]	; (800d8fc <UART_SetConfig+0x9c4>)
 800d7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7cc:	e009      	b.n	800d7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d7d4:	e005      	b.n	800d7e2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d7e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f000 80ea 	beq.w	800d9be <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ee:	4a44      	ldr	r2, [pc, #272]	; (800d900 <UART_SetConfig+0x9c8>)
 800d7f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7fc:	005a      	lsls	r2, r3, #1
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	085b      	lsrs	r3, r3, #1
 800d804:	441a      	add	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d80e:	b29b      	uxth	r3, r3
 800d810:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	2b0f      	cmp	r3, #15
 800d816:	d916      	bls.n	800d846 <UART_SetConfig+0x90e>
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d81e:	d212      	bcs.n	800d846 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d822:	b29b      	uxth	r3, r3
 800d824:	f023 030f 	bic.w	r3, r3, #15
 800d828:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82c:	085b      	lsrs	r3, r3, #1
 800d82e:	b29b      	uxth	r3, r3
 800d830:	f003 0307 	and.w	r3, r3, #7
 800d834:	b29a      	uxth	r2, r3
 800d836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d838:	4313      	orrs	r3, r2
 800d83a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d842:	60da      	str	r2, [r3, #12]
 800d844:	e0bb      	b.n	800d9be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d846:	2301      	movs	r3, #1
 800d848:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d84c:	e0b7      	b.n	800d9be <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d84e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d852:	2b20      	cmp	r3, #32
 800d854:	dc4a      	bgt.n	800d8ec <UART_SetConfig+0x9b4>
 800d856:	2b00      	cmp	r3, #0
 800d858:	f2c0 8086 	blt.w	800d968 <UART_SetConfig+0xa30>
 800d85c:	2b20      	cmp	r3, #32
 800d85e:	f200 8083 	bhi.w	800d968 <UART_SetConfig+0xa30>
 800d862:	a201      	add	r2, pc, #4	; (adr r2, 800d868 <UART_SetConfig+0x930>)
 800d864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d868:	0800d8f3 	.word	0x0800d8f3
 800d86c:	0800d90d 	.word	0x0800d90d
 800d870:	0800d969 	.word	0x0800d969
 800d874:	0800d969 	.word	0x0800d969
 800d878:	0800d915 	.word	0x0800d915
 800d87c:	0800d969 	.word	0x0800d969
 800d880:	0800d969 	.word	0x0800d969
 800d884:	0800d969 	.word	0x0800d969
 800d888:	0800d925 	.word	0x0800d925
 800d88c:	0800d969 	.word	0x0800d969
 800d890:	0800d969 	.word	0x0800d969
 800d894:	0800d969 	.word	0x0800d969
 800d898:	0800d969 	.word	0x0800d969
 800d89c:	0800d969 	.word	0x0800d969
 800d8a0:	0800d969 	.word	0x0800d969
 800d8a4:	0800d969 	.word	0x0800d969
 800d8a8:	0800d935 	.word	0x0800d935
 800d8ac:	0800d969 	.word	0x0800d969
 800d8b0:	0800d969 	.word	0x0800d969
 800d8b4:	0800d969 	.word	0x0800d969
 800d8b8:	0800d969 	.word	0x0800d969
 800d8bc:	0800d969 	.word	0x0800d969
 800d8c0:	0800d969 	.word	0x0800d969
 800d8c4:	0800d969 	.word	0x0800d969
 800d8c8:	0800d969 	.word	0x0800d969
 800d8cc:	0800d969 	.word	0x0800d969
 800d8d0:	0800d969 	.word	0x0800d969
 800d8d4:	0800d969 	.word	0x0800d969
 800d8d8:	0800d969 	.word	0x0800d969
 800d8dc:	0800d969 	.word	0x0800d969
 800d8e0:	0800d969 	.word	0x0800d969
 800d8e4:	0800d969 	.word	0x0800d969
 800d8e8:	0800d95b 	.word	0x0800d95b
 800d8ec:	2b40      	cmp	r3, #64	; 0x40
 800d8ee:	d037      	beq.n	800d960 <UART_SetConfig+0xa28>
 800d8f0:	e03a      	b.n	800d968 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d8f2:	f7fa f891 	bl	8007a18 <HAL_RCC_GetPCLK1Freq>
 800d8f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d8f8:	e03c      	b.n	800d974 <UART_SetConfig+0xa3c>
 800d8fa:	bf00      	nop
 800d8fc:	003d0900 	.word	0x003d0900
 800d900:	080158a8 	.word	0x080158a8
 800d904:	58024400 	.word	0x58024400
 800d908:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d90c:	f7fa f89a 	bl	8007a44 <HAL_RCC_GetPCLK2Freq>
 800d910:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d912:	e02f      	b.n	800d974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d914:	f107 0314 	add.w	r3, r7, #20
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fb fd13 	bl	8009344 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d922:	e027      	b.n	800d974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d924:	f107 0308 	add.w	r3, r7, #8
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fb fe5f 	bl	80095ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d932:	e01f      	b.n	800d974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d934:	4b2c      	ldr	r3, [pc, #176]	; (800d9e8 <UART_SetConfig+0xab0>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f003 0320 	and.w	r3, r3, #32
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d009      	beq.n	800d954 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d940:	4b29      	ldr	r3, [pc, #164]	; (800d9e8 <UART_SetConfig+0xab0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	08db      	lsrs	r3, r3, #3
 800d946:	f003 0303 	and.w	r3, r3, #3
 800d94a:	4a28      	ldr	r2, [pc, #160]	; (800d9ec <UART_SetConfig+0xab4>)
 800d94c:	fa22 f303 	lsr.w	r3, r2, r3
 800d950:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d952:	e00f      	b.n	800d974 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d954:	4b25      	ldr	r3, [pc, #148]	; (800d9ec <UART_SetConfig+0xab4>)
 800d956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d958:	e00c      	b.n	800d974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d95a:	4b25      	ldr	r3, [pc, #148]	; (800d9f0 <UART_SetConfig+0xab8>)
 800d95c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d95e:	e009      	b.n	800d974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d964:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d966:	e005      	b.n	800d974 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d96c:	2301      	movs	r3, #1
 800d96e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d972:	bf00      	nop
    }

    if (pclk != 0U)
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	2b00      	cmp	r3, #0
 800d978:	d021      	beq.n	800d9be <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d97e:	4a1d      	ldr	r2, [pc, #116]	; (800d9f4 <UART_SetConfig+0xabc>)
 800d980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d984:	461a      	mov	r2, r3
 800d986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d988:	fbb3 f2f2 	udiv	r2, r3, r2
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	085b      	lsrs	r3, r3, #1
 800d992:	441a      	add	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	fbb2 f3f3 	udiv	r3, r2, r3
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a2:	2b0f      	cmp	r3, #15
 800d9a4:	d908      	bls.n	800d9b8 <UART_SetConfig+0xa80>
 800d9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ac:	d204      	bcs.n	800d9b8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9b4:	60da      	str	r2, [r3, #12]
 800d9b6:	e002      	b.n	800d9be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d9da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3738      	adds	r7, #56	; 0x38
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	58024400 	.word	0x58024400
 800d9ec:	03d09000 	.word	0x03d09000
 800d9f0:	003d0900 	.word	0x003d0900
 800d9f4:	080158a8 	.word	0x080158a8

0800d9f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da04:	f003 0301 	and.w	r3, r3, #1
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00a      	beq.n	800da22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	430a      	orrs	r2, r1
 800da20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da26:	f003 0302 	and.w	r3, r3, #2
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	430a      	orrs	r2, r1
 800da42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d00a      	beq.n	800da66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	430a      	orrs	r2, r1
 800da64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6a:	f003 0308 	and.w	r3, r3, #8
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00a      	beq.n	800da88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	430a      	orrs	r2, r1
 800da86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da8c:	f003 0310 	and.w	r3, r3, #16
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00a      	beq.n	800daaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	430a      	orrs	r2, r1
 800daa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daae:	f003 0320 	and.w	r3, r3, #32
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00a      	beq.n	800dacc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	689b      	ldr	r3, [r3, #8]
 800dabc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	430a      	orrs	r2, r1
 800daca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d01a      	beq.n	800db0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	430a      	orrs	r2, r1
 800daec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800daf6:	d10a      	bne.n	800db0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	685b      	ldr	r3, [r3, #4]
 800dafe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	430a      	orrs	r2, r1
 800db0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00a      	beq.n	800db30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	430a      	orrs	r2, r1
 800db2e:	605a      	str	r2, [r3, #4]
  }
}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af02      	add	r7, sp, #8
 800db42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800db4c:	f7f4 f810 	bl	8001b70 <HAL_GetTick>
 800db50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f003 0308 	and.w	r3, r3, #8
 800db5c:	2b08      	cmp	r3, #8
 800db5e:	d10e      	bne.n	800db7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db64:	9300      	str	r3, [sp, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 f82f 	bl	800dbd2 <UART_WaitOnFlagUntilTimeout>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db7a:	2303      	movs	r3, #3
 800db7c:	e025      	b.n	800dbca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f003 0304 	and.w	r3, r3, #4
 800db88:	2b04      	cmp	r3, #4
 800db8a:	d10e      	bne.n	800dbaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800db8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 f819 	bl	800dbd2 <UART_WaitOnFlagUntilTimeout>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d001      	beq.n	800dbaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dba6:	2303      	movs	r3, #3
 800dba8:	e00f      	b.n	800dbca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2220      	movs	r2, #32
 800dbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2220      	movs	r2, #32
 800dbb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	60f8      	str	r0, [r7, #12]
 800dbda:	60b9      	str	r1, [r7, #8]
 800dbdc:	603b      	str	r3, [r7, #0]
 800dbde:	4613      	mov	r3, r2
 800dbe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbe2:	e062      	b.n	800dcaa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbea:	d05e      	beq.n	800dcaa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbec:	f7f3 ffc0 	bl	8001b70 <HAL_GetTick>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	69ba      	ldr	r2, [r7, #24]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d302      	bcc.n	800dc02 <UART_WaitOnFlagUntilTimeout+0x30>
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d11d      	bne.n	800dc3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dc10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	689a      	ldr	r2, [r3, #8]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f022 0201 	bic.w	r2, r2, #1
 800dc20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2220      	movs	r2, #32
 800dc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2220      	movs	r2, #32
 800dc2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	e045      	b.n	800dcca <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f003 0304 	and.w	r3, r3, #4
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d02e      	beq.n	800dcaa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc5a:	d126      	bne.n	800dcaa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800dc74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f022 0201 	bic.w	r2, r2, #1
 800dc84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2220      	movs	r2, #32
 800dc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2220      	movs	r2, #32
 800dc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2220      	movs	r2, #32
 800dc9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e00f      	b.n	800dcca <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69da      	ldr	r2, [r3, #28]
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	4013      	ands	r3, r2
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	bf0c      	ite	eq
 800dcba:	2301      	moveq	r3, #1
 800dcbc:	2300      	movne	r3, #0
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d08d      	beq.n	800dbe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dcea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6899      	ldr	r1, [r3, #8]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	4b0f      	ldr	r3, [pc, #60]	; (800dd34 <UART_EndRxTransfer+0x60>)
 800dcf8:	400b      	ands	r3, r1
 800dcfa:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d107      	bne.n	800dd14 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f022 0210 	bic.w	r2, r2, #16
 800dd12:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2220      	movs	r2, #32
 800dd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	671a      	str	r2, [r3, #112]	; 0x70
}
 800dd28:	bf00      	nop
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	effffffe 	.word	0xeffffffe

0800dd38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2200      	movs	r2, #0
 800dd52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f7ff f8d8 	bl	800cf0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd5c:	bf00      	nop
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd7a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2220      	movs	r2, #32
 800dd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7ff f8b4 	bl	800cef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ddb4:	bf00      	nop
 800ddb6:	370c      	adds	r7, #12
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b083      	sub	sp, #12
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ddc8:	bf00      	nop
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d101      	bne.n	800ddea <HAL_UARTEx_DisableFifoMode+0x16>
 800dde6:	2302      	movs	r3, #2
 800dde8:	e027      	b.n	800de3a <HAL_UARTEx_DisableFifoMode+0x66>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	2224      	movs	r2, #36	; 0x24
 800ddf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f022 0201 	bic.w	r2, r2, #1
 800de10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800de18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2220      	movs	r2, #32
 800de2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de38:	2300      	movs	r3, #0
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3714      	adds	r7, #20
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b084      	sub	sp, #16
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
 800de4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de56:	2b01      	cmp	r3, #1
 800de58:	d101      	bne.n	800de5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800de5a:	2302      	movs	r3, #2
 800de5c:	e02d      	b.n	800deba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2201      	movs	r2, #1
 800de62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2224      	movs	r2, #36	; 0x24
 800de6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f022 0201 	bic.w	r2, r2, #1
 800de84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	683a      	ldr	r2, [r7, #0]
 800de96:	430a      	orrs	r2, r1
 800de98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 f850 	bl	800df40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68fa      	ldr	r2, [r7, #12]
 800dea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2220      	movs	r2, #32
 800deac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b084      	sub	sp, #16
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d101      	bne.n	800deda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ded6:	2302      	movs	r3, #2
 800ded8:	e02d      	b.n	800df36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2201      	movs	r2, #1
 800dede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2224      	movs	r2, #36	; 0x24
 800dee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f022 0201 	bic.w	r2, r2, #1
 800df00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	430a      	orrs	r2, r1
 800df14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 f812 	bl	800df40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2220      	movs	r2, #32
 800df28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d108      	bne.n	800df62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df60:	e031      	b.n	800dfc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df62:	2310      	movs	r3, #16
 800df64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df66:	2310      	movs	r3, #16
 800df68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	0e5b      	lsrs	r3, r3, #25
 800df72:	b2db      	uxtb	r3, r3
 800df74:	f003 0307 	and.w	r3, r3, #7
 800df78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	0f5b      	lsrs	r3, r3, #29
 800df82:	b2db      	uxtb	r3, r3
 800df84:	f003 0307 	and.w	r3, r3, #7
 800df88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	7b3a      	ldrb	r2, [r7, #12]
 800df8e:	4911      	ldr	r1, [pc, #68]	; (800dfd4 <UARTEx_SetNbDataToProcess+0x94>)
 800df90:	5c8a      	ldrb	r2, [r1, r2]
 800df92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df96:	7b3a      	ldrb	r2, [r7, #12]
 800df98:	490f      	ldr	r1, [pc, #60]	; (800dfd8 <UARTEx_SetNbDataToProcess+0x98>)
 800df9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
 800dfaa:	7b7a      	ldrb	r2, [r7, #13]
 800dfac:	4909      	ldr	r1, [pc, #36]	; (800dfd4 <UARTEx_SetNbDataToProcess+0x94>)
 800dfae:	5c8a      	ldrb	r2, [r1, r2]
 800dfb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dfb4:	7b7a      	ldrb	r2, [r7, #13]
 800dfb6:	4908      	ldr	r1, [pc, #32]	; (800dfd8 <UARTEx_SetNbDataToProcess+0x98>)
 800dfb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dfba:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dfc6:	bf00      	nop
 800dfc8:	3714      	adds	r7, #20
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	080158c0 	.word	0x080158c0
 800dfd8:	080158c8 	.word	0x080158c8

0800dfdc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dfdc:	b084      	sub	sp, #16
 800dfde:	b480      	push	{r7}
 800dfe0:	b085      	sub	sp, #20
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	f107 001c 	add.w	r0, r7, #28
 800dfea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dfee:	2300      	movs	r3, #0
 800dff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dff2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dff4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dff6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dffa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800dffe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800e002:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	4313      	orrs	r3, r2
 800e008:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	4b07      	ldr	r3, [pc, #28]	; (800e02c <SDMMC_Init+0x50>)
 800e010:	4013      	ands	r3, r2
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	431a      	orrs	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	b004      	add	sp, #16
 800e028:	4770      	bx	lr
 800e02a:	bf00      	nop
 800e02c:	ffc02c00 	.word	0xffc02c00

0800e030 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e03e:	4618      	mov	r0, r3
 800e040:	370c      	adds	r7, #12
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr

0800e04a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e04a:	b480      	push	{r7}
 800e04c:	b083      	sub	sp, #12
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
 800e052:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e05e:	2300      	movs	r3, #0
}
 800e060:	4618      	mov	r0, r3
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f043 0203 	orr.w	r2, r3, #3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e08e:	b480      	push	{r7}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 0303 	and.w	r3, r3, #3
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	370c      	adds	r7, #12
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
	...

0800e0ac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e0ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e0d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e0d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68da      	ldr	r2, [r3, #12]
 800e0e2:	4b06      	ldr	r3, [pc, #24]	; (800e0fc <SDMMC_SendCommand+0x50>)
 800e0e4:	4013      	ands	r3, r2
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	431a      	orrs	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3714      	adds	r7, #20
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	fffee0c0 	.word	0xfffee0c0

0800e100 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	691b      	ldr	r3, [r3, #16]
 800e10c:	b2db      	uxtb	r3, r3
}
 800e10e:	4618      	mov	r0, r3
 800e110:	370c      	adds	r7, #12
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e11a:	b480      	push	{r7}
 800e11c:	b085      	sub	sp, #20
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3314      	adds	r3, #20
 800e128:	461a      	mov	r2, r3
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	4413      	add	r3, r2
 800e12e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3714      	adds	r7, #20
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e140:	b480      	push	{r7}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e166:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800e16c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800e172:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	4313      	orrs	r3, r2
 800e178:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	431a      	orrs	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e18a:	2300      	movs	r3, #0

}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3714      	adds	r7, #20
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e1a6:	2310      	movs	r3, #16
 800e1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1ba:	f107 0308 	add.w	r3, r7, #8
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff ff73 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1ca:	2110      	movs	r1, #16
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 fa5f 	bl	800e690 <SDMMC_GetCmdResp1>
 800e1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1d4:	69fb      	ldr	r3, [r7, #28]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3720      	adds	r7, #32
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b088      	sub	sp, #32
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e1ec:	2311      	movs	r3, #17
 800e1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e1f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e200:	f107 0308 	add.w	r3, r7, #8
 800e204:	4619      	mov	r1, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7ff ff50 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e210:	2111      	movs	r1, #17
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 fa3c 	bl	800e690 <SDMMC_GetCmdResp1>
 800e218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e21a:	69fb      	ldr	r3, [r7, #28]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3720      	adds	r7, #32
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e232:	2312      	movs	r3, #18
 800e234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e23a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e23c:	2300      	movs	r3, #0
 800e23e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e246:	f107 0308 	add.w	r3, r7, #8
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff ff2d 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e252:	f241 3288 	movw	r2, #5000	; 0x1388
 800e256:	2112      	movs	r1, #18
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 fa19 	bl	800e690 <SDMMC_GetCmdResp1>
 800e25e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e260:	69fb      	ldr	r3, [r7, #28]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3720      	adds	r7, #32
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b088      	sub	sp, #32
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
 800e272:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e278:	2318      	movs	r3, #24
 800e27a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e27c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e282:	2300      	movs	r3, #0
 800e284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e28a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e28c:	f107 0308 	add.w	r3, r7, #8
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff ff0a 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e298:	f241 3288 	movw	r2, #5000	; 0x1388
 800e29c:	2118      	movs	r1, #24
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 f9f6 	bl	800e690 <SDMMC_GetCmdResp1>
 800e2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2a6:	69fb      	ldr	r3, [r7, #28]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3720      	adds	r7, #32
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e2be:	2319      	movs	r3, #25
 800e2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2d2:	f107 0308 	add.w	r3, r7, #8
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7ff fee7 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2e2:	2119      	movs	r1, #25
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f9d3 	bl	800e690 <SDMMC_GetCmdResp1>
 800e2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3720      	adds	r7, #32
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
	...

0800e2f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e300:	2300      	movs	r3, #0
 800e302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e304:	230c      	movs	r3, #12
 800e306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e30e:	2300      	movs	r3, #0
 800e310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e316:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e330:	f107 0308 	add.w	r3, r7, #8
 800e334:	4619      	mov	r1, r3
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f7ff feb8 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e33c:	4a0b      	ldr	r2, [pc, #44]	; (800e36c <SDMMC_CmdStopTransfer+0x74>)
 800e33e:	210c      	movs	r1, #12
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 f9a5 	bl	800e690 <SDMMC_GetCmdResp1>
 800e346:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e35a:	d101      	bne.n	800e360 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800e35c:	2300      	movs	r3, #0
 800e35e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800e360:	69fb      	ldr	r3, [r7, #28]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3720      	adds	r7, #32
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	05f5e100 	.word	0x05f5e100

0800e370 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b088      	sub	sp, #32
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e37e:	2307      	movs	r3, #7
 800e380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e382:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e388:	2300      	movs	r3, #0
 800e38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e38c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e392:	f107 0308 	add.w	r3, r7, #8
 800e396:	4619      	mov	r1, r3
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7ff fe87 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3a2:	2107      	movs	r1, #7
 800e3a4:	6878      	ldr	r0, [r7, #4]
 800e3a6:	f000 f973 	bl	800e690 <SDMMC_GetCmdResp1>
 800e3aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ac:	69fb      	ldr	r3, [r7, #28]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3720      	adds	r7, #32
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b088      	sub	sp, #32
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3d4:	f107 0308 	add.w	r3, r7, #8
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff fe66 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fb97 	bl	800eb14 <SDMMC_GetCmdError>
 800e3e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3e8:	69fb      	ldr	r3, [r7, #28]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3720      	adds	r7, #32
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b088      	sub	sp, #32
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e3fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e400:	2308      	movs	r3, #8
 800e402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e404:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e40a:	2300      	movs	r3, #0
 800e40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e40e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e412:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e414:	f107 0308 	add.w	r3, r7, #8
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff fe46 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 fb29 	bl	800ea78 <SDMMC_GetCmdResp7>
 800e426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e428:	69fb      	ldr	r3, [r7, #28]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3720      	adds	r7, #32
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b088      	sub	sp, #32
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e440:	2337      	movs	r3, #55	; 0x37
 800e442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e444:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e44a:	2300      	movs	r3, #0
 800e44c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e44e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e454:	f107 0308 	add.w	r3, r7, #8
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff fe26 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e460:	f241 3288 	movw	r2, #5000	; 0x1388
 800e464:	2137      	movs	r1, #55	; 0x37
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f912 	bl	800e690 <SDMMC_GetCmdResp1>
 800e46c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e46e:	69fb      	ldr	r3, [r7, #28]
}
 800e470:	4618      	mov	r0, r3
 800e472:	3720      	adds	r7, #32
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b088      	sub	sp, #32
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e486:	2329      	movs	r3, #41	; 0x29
 800e488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e48a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e490:	2300      	movs	r3, #0
 800e492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e49a:	f107 0308 	add.w	r3, r7, #8
 800e49e:	4619      	mov	r1, r3
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7ff fe03 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fa2e 	bl	800e908 <SDMMC_GetCmdResp3>
 800e4ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ae:	69fb      	ldr	r3, [r7, #28]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3720      	adds	r7, #32
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b088      	sub	sp, #32
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e4c6:	2306      	movs	r3, #6
 800e4c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4da:	f107 0308 	add.w	r3, r7, #8
 800e4de:	4619      	mov	r1, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff fde3 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e4e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4ea:	2106      	movs	r1, #6
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f8cf 	bl	800e690 <SDMMC_GetCmdResp1>
 800e4f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4f4:	69fb      	ldr	r3, [r7, #28]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3720      	adds	r7, #32
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b088      	sub	sp, #32
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e50a:	2333      	movs	r3, #51	; 0x33
 800e50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e50e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e514:	2300      	movs	r3, #0
 800e516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e51c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e51e:	f107 0308 	add.w	r3, r7, #8
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff fdc1 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e52a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e52e:	2133      	movs	r1, #51	; 0x33
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f8ad 	bl	800e690 <SDMMC_GetCmdResp1>
 800e536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e538:	69fb      	ldr	r3, [r7, #28]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3720      	adds	r7, #32
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b088      	sub	sp, #32
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e54a:	2300      	movs	r3, #0
 800e54c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e54e:	2302      	movs	r3, #2
 800e550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e552:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e558:	2300      	movs	r3, #0
 800e55a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e55c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e562:	f107 0308 	add.w	r3, r7, #8
 800e566:	4619      	mov	r1, r3
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7ff fd9f 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f980 	bl	800e874 <SDMMC_GetCmdResp2>
 800e574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e576:	69fb      	ldr	r3, [r7, #28]
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3720      	adds	r7, #32
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b088      	sub	sp, #32
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e58e:	2309      	movs	r3, #9
 800e590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e592:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e598:	2300      	movs	r3, #0
 800e59a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e59c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5a2:	f107 0308 	add.w	r3, r7, #8
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff fd7f 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f960 	bl	800e874 <SDMMC_GetCmdResp2>
 800e5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5b6:	69fb      	ldr	r3, [r7, #28]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3720      	adds	r7, #32
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e5ce:	2303      	movs	r3, #3
 800e5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5e2:	f107 0308 	add.w	r3, r7, #8
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff fd5f 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	2103      	movs	r1, #3
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f9c8 	bl	800e988 <SDMMC_GetCmdResp6>
 800e5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5fa:	69fb      	ldr	r3, [r7, #28]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3720      	adds	r7, #32
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b088      	sub	sp, #32
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e612:	230d      	movs	r3, #13
 800e614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e61c:	2300      	movs	r3, #0
 800e61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e626:	f107 0308 	add.w	r3, r7, #8
 800e62a:	4619      	mov	r1, r3
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f7ff fd3d 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e632:	f241 3288 	movw	r2, #5000	; 0x1388
 800e636:	210d      	movs	r1, #13
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 f829 	bl	800e690 <SDMMC_GetCmdResp1>
 800e63e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e640:	69fb      	ldr	r3, [r7, #28]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3720      	adds	r7, #32
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b088      	sub	sp, #32
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e652:	2300      	movs	r3, #0
 800e654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e656:	230d      	movs	r3, #13
 800e658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e65a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e65e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e660:	2300      	movs	r3, #0
 800e662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e66a:	f107 0308 	add.w	r3, r7, #8
 800e66e:	4619      	mov	r1, r3
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff fd1b 	bl	800e0ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e676:	f241 3288 	movw	r2, #5000	; 0x1388
 800e67a:	210d      	movs	r1, #13
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f807 	bl	800e690 <SDMMC_GetCmdResp1>
 800e682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e684:	69fb      	ldr	r3, [r7, #28]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3720      	adds	r7, #32
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
	...

0800e690 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b088      	sub	sp, #32
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	460b      	mov	r3, r1
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e69e:	4b70      	ldr	r3, [pc, #448]	; (800e860 <SDMMC_GetCmdResp1+0x1d0>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4a70      	ldr	r2, [pc, #448]	; (800e864 <SDMMC_GetCmdResp1+0x1d4>)
 800e6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a8:	0a5a      	lsrs	r2, r3, #9
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	fb02 f303 	mul.w	r3, r2, r3
 800e6b0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	1e5a      	subs	r2, r3, #1
 800e6b6:	61fa      	str	r2, [r7, #28]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d102      	bne.n	800e6c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e6bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6c0:	e0c9      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e6c8:	69ba      	ldr	r2, [r7, #24]
 800e6ca:	4b67      	ldr	r3, [pc, #412]	; (800e868 <SDMMC_GetCmdResp1+0x1d8>)
 800e6cc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0ef      	beq.n	800e6b2 <SDMMC_GetCmdResp1+0x22>
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1ea      	bne.n	800e6b2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e0:	f003 0304 	and.w	r3, r3, #4
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d004      	beq.n	800e6f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2204      	movs	r2, #4
 800e6ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6ee:	2304      	movs	r3, #4
 800e6f0:	e0b1      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d004      	beq.n	800e708 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2201      	movs	r2, #1
 800e702:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e704:	2301      	movs	r3, #1
 800e706:	e0a6      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4a58      	ldr	r2, [pc, #352]	; (800e86c <SDMMC_GetCmdResp1+0x1dc>)
 800e70c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff fcf6 	bl	800e100 <SDMMC_GetCommandResponse>
 800e714:	4603      	mov	r3, r0
 800e716:	461a      	mov	r2, r3
 800e718:	7afb      	ldrb	r3, [r7, #11]
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d001      	beq.n	800e722 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e71e:	2301      	movs	r3, #1
 800e720:	e099      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e722:	2100      	movs	r1, #0
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f7ff fcf8 	bl	800e11a <SDMMC_GetResponse>
 800e72a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e72c:	697a      	ldr	r2, [r7, #20]
 800e72e:	4b50      	ldr	r3, [pc, #320]	; (800e870 <SDMMC_GetCmdResp1+0x1e0>)
 800e730:	4013      	ands	r3, r2
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e736:	2300      	movs	r3, #0
 800e738:	e08d      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	da02      	bge.n	800e746 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e740:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e744:	e087      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e750:	2340      	movs	r3, #64	; 0x40
 800e752:	e080      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d001      	beq.n	800e762 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e75e:	2380      	movs	r3, #128	; 0x80
 800e760:	e079      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d002      	beq.n	800e772 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e770:	e071      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e77c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e780:	e069      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e790:	e061      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e79c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7a0:	e059      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7b0:	e051      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d002      	beq.n	800e7c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7c0:	e049      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d002      	beq.n	800e7d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e7cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e7d0:	e041      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e7dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7e0:	e039      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d002      	beq.n	800e7f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e7ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e7f0:	e031      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e7fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e800:	e029      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d002      	beq.n	800e812 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e80c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e810:	e021      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d002      	beq.n	800e822 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e81c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e820:	e019      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e82c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e830:	e011      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d002      	beq.n	800e842 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e83c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e840:	e009      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	f003 0308 	and.w	r3, r3, #8
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e84c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e850:	e001      	b.n	800e856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e856:	4618      	mov	r0, r3
 800e858:	3720      	adds	r7, #32
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	24000000 	.word	0x24000000
 800e864:	10624dd3 	.word	0x10624dd3
 800e868:	00200045 	.word	0x00200045
 800e86c:	002000c5 	.word	0x002000c5
 800e870:	fdffe008 	.word	0xfdffe008

0800e874 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e87c:	4b1f      	ldr	r3, [pc, #124]	; (800e8fc <SDMMC_GetCmdResp2+0x88>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a1f      	ldr	r2, [pc, #124]	; (800e900 <SDMMC_GetCmdResp2+0x8c>)
 800e882:	fba2 2303 	umull	r2, r3, r2, r3
 800e886:	0a5b      	lsrs	r3, r3, #9
 800e888:	f241 3288 	movw	r2, #5000	; 0x1388
 800e88c:	fb02 f303 	mul.w	r3, r2, r3
 800e890:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	1e5a      	subs	r2, r3, #1
 800e896:	60fa      	str	r2, [r7, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d102      	bne.n	800e8a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e89c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8a0:	e026      	b.n	800e8f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d0ef      	beq.n	800e892 <SDMMC_GetCmdResp2+0x1e>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1ea      	bne.n	800e892 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c0:	f003 0304 	and.w	r3, r3, #4
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d004      	beq.n	800e8d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2204      	movs	r2, #4
 800e8cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8ce:	2304      	movs	r3, #4
 800e8d0:	e00e      	b.n	800e8f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d6:	f003 0301 	and.w	r3, r3, #1
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d004      	beq.n	800e8e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e003      	b.n	800e8f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a06      	ldr	r2, [pc, #24]	; (800e904 <SDMMC_GetCmdResp2+0x90>)
 800e8ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3714      	adds	r7, #20
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	24000000 	.word	0x24000000
 800e900:	10624dd3 	.word	0x10624dd3
 800e904:	002000c5 	.word	0x002000c5

0800e908 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e910:	4b1a      	ldr	r3, [pc, #104]	; (800e97c <SDMMC_GetCmdResp3+0x74>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a1a      	ldr	r2, [pc, #104]	; (800e980 <SDMMC_GetCmdResp3+0x78>)
 800e916:	fba2 2303 	umull	r2, r3, r2, r3
 800e91a:	0a5b      	lsrs	r3, r3, #9
 800e91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e920:	fb02 f303 	mul.w	r3, r2, r3
 800e924:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	1e5a      	subs	r2, r3, #1
 800e92a:	60fa      	str	r2, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d102      	bne.n	800e936 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e934:	e01b      	b.n	800e96e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e93a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e942:	2b00      	cmp	r3, #0
 800e944:	d0ef      	beq.n	800e926 <SDMMC_GetCmdResp3+0x1e>
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d1ea      	bne.n	800e926 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e954:	f003 0304 	and.w	r3, r3, #4
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d004      	beq.n	800e966 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2204      	movs	r2, #4
 800e960:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e962:	2304      	movs	r3, #4
 800e964:	e003      	b.n	800e96e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a06      	ldr	r2, [pc, #24]	; (800e984 <SDMMC_GetCmdResp3+0x7c>)
 800e96a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	24000000 	.word	0x24000000
 800e980:	10624dd3 	.word	0x10624dd3
 800e984:	002000c5 	.word	0x002000c5

0800e988 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	460b      	mov	r3, r1
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e996:	4b35      	ldr	r3, [pc, #212]	; (800ea6c <SDMMC_GetCmdResp6+0xe4>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a35      	ldr	r2, [pc, #212]	; (800ea70 <SDMMC_GetCmdResp6+0xe8>)
 800e99c:	fba2 2303 	umull	r2, r3, r2, r3
 800e9a0:	0a5b      	lsrs	r3, r3, #9
 800e9a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9a6:	fb02 f303 	mul.w	r3, r2, r3
 800e9aa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	1e5a      	subs	r2, r3, #1
 800e9b0:	61fa      	str	r2, [r7, #28]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d102      	bne.n	800e9bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9ba:	e052      	b.n	800ea62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d0ef      	beq.n	800e9ac <SDMMC_GetCmdResp6+0x24>
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1ea      	bne.n	800e9ac <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9da:	f003 0304 	and.w	r3, r3, #4
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2204      	movs	r2, #4
 800e9e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9e8:	2304      	movs	r3, #4
 800e9ea:	e03a      	b.n	800ea62 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f0:	f003 0301 	and.w	r3, r3, #1
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d004      	beq.n	800ea02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e02f      	b.n	800ea62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f7ff fb7c 	bl	800e100 <SDMMC_GetCommandResponse>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	7afb      	ldrb	r3, [r7, #11]
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d001      	beq.n	800ea16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea12:	2301      	movs	r3, #1
 800ea14:	e025      	b.n	800ea62 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	4a16      	ldr	r2, [pc, #88]	; (800ea74 <SDMMC_GetCmdResp6+0xec>)
 800ea1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f7ff fb7b 	bl	800e11a <SDMMC_GetResponse>
 800ea24:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d106      	bne.n	800ea3e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	0c1b      	lsrs	r3, r3, #16
 800ea34:	b29a      	uxth	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e011      	b.n	800ea62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea4c:	e009      	b.n	800ea62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d002      	beq.n	800ea5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea5c:	e001      	b.n	800ea62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3720      	adds	r7, #32
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	24000000 	.word	0x24000000
 800ea70:	10624dd3 	.word	0x10624dd3
 800ea74:	002000c5 	.word	0x002000c5

0800ea78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ea80:	4b22      	ldr	r3, [pc, #136]	; (800eb0c <SDMMC_GetCmdResp7+0x94>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	4a22      	ldr	r2, [pc, #136]	; (800eb10 <SDMMC_GetCmdResp7+0x98>)
 800ea86:	fba2 2303 	umull	r2, r3, r2, r3
 800ea8a:	0a5b      	lsrs	r3, r3, #9
 800ea8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea90:	fb02 f303 	mul.w	r3, r2, r3
 800ea94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	1e5a      	subs	r2, r3, #1
 800ea9a:	60fa      	str	r2, [r7, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d102      	bne.n	800eaa6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eaa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eaa4:	e02c      	b.n	800eb00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaaa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0ef      	beq.n	800ea96 <SDMMC_GetCmdResp7+0x1e>
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1ea      	bne.n	800ea96 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d004      	beq.n	800ead6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2204      	movs	r2, #4
 800ead0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ead2:	2304      	movs	r3, #4
 800ead4:	e014      	b.n	800eb00 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eada:	f003 0301 	and.w	r3, r3, #1
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d004      	beq.n	800eaec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eae8:	2301      	movs	r3, #1
 800eaea:	e009      	b.n	800eb00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d002      	beq.n	800eafe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2240      	movs	r2, #64	; 0x40
 800eafc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800eafe:	2300      	movs	r3, #0

}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3714      	adds	r7, #20
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr
 800eb0c:	24000000 	.word	0x24000000
 800eb10:	10624dd3 	.word	0x10624dd3

0800eb14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800eb1c:	4b11      	ldr	r3, [pc, #68]	; (800eb64 <SDMMC_GetCmdError+0x50>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a11      	ldr	r2, [pc, #68]	; (800eb68 <SDMMC_GetCmdError+0x54>)
 800eb22:	fba2 2303 	umull	r2, r3, r2, r3
 800eb26:	0a5b      	lsrs	r3, r3, #9
 800eb28:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb2c:	fb02 f303 	mul.w	r3, r2, r3
 800eb30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	1e5a      	subs	r2, r3, #1
 800eb36:	60fa      	str	r2, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d102      	bne.n	800eb42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb40:	e009      	b.n	800eb56 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d0f1      	beq.n	800eb32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a06      	ldr	r2, [pc, #24]	; (800eb6c <SDMMC_GetCmdError+0x58>)
 800eb52:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3714      	adds	r7, #20
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
 800eb62:	bf00      	nop
 800eb64:	24000000 	.word	0x24000000
 800eb68:	10624dd3 	.word	0x10624dd3
 800eb6c:	002000c5 	.word	0x002000c5

0800eb70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eb70:	b084      	sub	sp, #16
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b084      	sub	sp, #16
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	f107 001c 	add.w	r0, r7, #28
 800eb7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d120      	bne.n	800ebca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	68da      	ldr	r2, [r3, #12]
 800eb98:	4b2a      	ldr	r3, [pc, #168]	; (800ec44 <USB_CoreInit+0xd4>)
 800eb9a:	4013      	ands	r3, r2
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ebac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d105      	bne.n	800ebbe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f001 fb14 	bl	80101ec <USB_CoreReset>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	73fb      	strb	r3, [r7, #15]
 800ebc8:	e01a      	b.n	800ec00 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f001 fb08 	bl	80101ec <USB_CoreReset>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ebe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	639a      	str	r2, [r3, #56]	; 0x38
 800ebf2:	e005      	b.n	800ec00 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d116      	bne.n	800ec34 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec14:	4b0c      	ldr	r3, [pc, #48]	; (800ec48 <USB_CoreInit+0xd8>)
 800ec16:	4313      	orrs	r3, r2
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	f043 0206 	orr.w	r2, r3, #6
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	f043 0220 	orr.w	r2, r3, #32
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ec40:	b004      	add	sp, #16
 800ec42:	4770      	bx	lr
 800ec44:	ffbdffbf 	.word	0xffbdffbf
 800ec48:	03ee0000 	.word	0x03ee0000

0800ec4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	4613      	mov	r3, r2
 800ec58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d165      	bne.n	800ed2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	4a41      	ldr	r2, [pc, #260]	; (800ed68 <USB_SetTurnaroundTime+0x11c>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d906      	bls.n	800ec76 <USB_SetTurnaroundTime+0x2a>
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	4a40      	ldr	r2, [pc, #256]	; (800ed6c <USB_SetTurnaroundTime+0x120>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d202      	bcs.n	800ec76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ec70:	230f      	movs	r3, #15
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	e062      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	4a3c      	ldr	r2, [pc, #240]	; (800ed6c <USB_SetTurnaroundTime+0x120>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d306      	bcc.n	800ec8c <USB_SetTurnaroundTime+0x40>
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	4a3b      	ldr	r2, [pc, #236]	; (800ed70 <USB_SetTurnaroundTime+0x124>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d202      	bcs.n	800ec8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ec86:	230e      	movs	r3, #14
 800ec88:	617b      	str	r3, [r7, #20]
 800ec8a:	e057      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	4a38      	ldr	r2, [pc, #224]	; (800ed70 <USB_SetTurnaroundTime+0x124>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d306      	bcc.n	800eca2 <USB_SetTurnaroundTime+0x56>
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	4a37      	ldr	r2, [pc, #220]	; (800ed74 <USB_SetTurnaroundTime+0x128>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d202      	bcs.n	800eca2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ec9c:	230d      	movs	r3, #13
 800ec9e:	617b      	str	r3, [r7, #20]
 800eca0:	e04c      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	4a33      	ldr	r2, [pc, #204]	; (800ed74 <USB_SetTurnaroundTime+0x128>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d306      	bcc.n	800ecb8 <USB_SetTurnaroundTime+0x6c>
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	4a32      	ldr	r2, [pc, #200]	; (800ed78 <USB_SetTurnaroundTime+0x12c>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d802      	bhi.n	800ecb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ecb2:	230c      	movs	r3, #12
 800ecb4:	617b      	str	r3, [r7, #20]
 800ecb6:	e041      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	4a2f      	ldr	r2, [pc, #188]	; (800ed78 <USB_SetTurnaroundTime+0x12c>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d906      	bls.n	800ecce <USB_SetTurnaroundTime+0x82>
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	4a2e      	ldr	r2, [pc, #184]	; (800ed7c <USB_SetTurnaroundTime+0x130>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d802      	bhi.n	800ecce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ecc8:	230b      	movs	r3, #11
 800ecca:	617b      	str	r3, [r7, #20]
 800eccc:	e036      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	4a2a      	ldr	r2, [pc, #168]	; (800ed7c <USB_SetTurnaroundTime+0x130>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d906      	bls.n	800ece4 <USB_SetTurnaroundTime+0x98>
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	4a29      	ldr	r2, [pc, #164]	; (800ed80 <USB_SetTurnaroundTime+0x134>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d802      	bhi.n	800ece4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ecde:	230a      	movs	r3, #10
 800ece0:	617b      	str	r3, [r7, #20]
 800ece2:	e02b      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	4a26      	ldr	r2, [pc, #152]	; (800ed80 <USB_SetTurnaroundTime+0x134>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d906      	bls.n	800ecfa <USB_SetTurnaroundTime+0xae>
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	4a25      	ldr	r2, [pc, #148]	; (800ed84 <USB_SetTurnaroundTime+0x138>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d202      	bcs.n	800ecfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ecf4:	2309      	movs	r3, #9
 800ecf6:	617b      	str	r3, [r7, #20]
 800ecf8:	e020      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	4a21      	ldr	r2, [pc, #132]	; (800ed84 <USB_SetTurnaroundTime+0x138>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d306      	bcc.n	800ed10 <USB_SetTurnaroundTime+0xc4>
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	4a20      	ldr	r2, [pc, #128]	; (800ed88 <USB_SetTurnaroundTime+0x13c>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d802      	bhi.n	800ed10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ed0a:	2308      	movs	r3, #8
 800ed0c:	617b      	str	r3, [r7, #20]
 800ed0e:	e015      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	4a1d      	ldr	r2, [pc, #116]	; (800ed88 <USB_SetTurnaroundTime+0x13c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d906      	bls.n	800ed26 <USB_SetTurnaroundTime+0xda>
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	4a1c      	ldr	r2, [pc, #112]	; (800ed8c <USB_SetTurnaroundTime+0x140>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d202      	bcs.n	800ed26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ed20:	2307      	movs	r3, #7
 800ed22:	617b      	str	r3, [r7, #20]
 800ed24:	e00a      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ed26:	2306      	movs	r3, #6
 800ed28:	617b      	str	r3, [r7, #20]
 800ed2a:	e007      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ed2c:	79fb      	ldrb	r3, [r7, #7]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d102      	bne.n	800ed38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ed32:	2309      	movs	r3, #9
 800ed34:	617b      	str	r3, [r7, #20]
 800ed36:	e001      	b.n	800ed3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ed38:	2309      	movs	r3, #9
 800ed3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	68db      	ldr	r3, [r3, #12]
 800ed40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	68da      	ldr	r2, [r3, #12]
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	029b      	lsls	r3, r3, #10
 800ed50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ed54:	431a      	orrs	r2, r3
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ed5a:	2300      	movs	r3, #0
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	371c      	adds	r7, #28
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr
 800ed68:	00d8acbf 	.word	0x00d8acbf
 800ed6c:	00e4e1c0 	.word	0x00e4e1c0
 800ed70:	00f42400 	.word	0x00f42400
 800ed74:	01067380 	.word	0x01067380
 800ed78:	011a499f 	.word	0x011a499f
 800ed7c:	01312cff 	.word	0x01312cff
 800ed80:	014ca43f 	.word	0x014ca43f
 800ed84:	016e3600 	.word	0x016e3600
 800ed88:	01a6ab1f 	.word	0x01a6ab1f
 800ed8c:	01e84800 	.word	0x01e84800

0800ed90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	689b      	ldr	r3, [r3, #8]
 800ed9c:	f043 0201 	orr.w	r2, r3, #1
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr

0800edb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800edb2:	b480      	push	{r7}
 800edb4:	b083      	sub	sp, #12
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	f023 0201 	bic.w	r2, r3, #1
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	370c      	adds	r7, #12
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	460b      	mov	r3, r1
 800edde:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800edec:	78fb      	ldrb	r3, [r7, #3]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d106      	bne.n	800ee00 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	60da      	str	r2, [r3, #12]
 800edfe:	e00b      	b.n	800ee18 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ee00:	78fb      	ldrb	r3, [r7, #3]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d106      	bne.n	800ee14 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	60da      	str	r2, [r3, #12]
 800ee12:	e001      	b.n	800ee18 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e003      	b.n	800ee20 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ee18:	2032      	movs	r0, #50	; 0x32
 800ee1a:	f7f2 feb5 	bl	8001b88 <HAL_Delay>

  return HAL_OK;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee28:	b084      	sub	sp, #16
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b086      	sub	sp, #24
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ee36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ee42:	2300      	movs	r3, #0
 800ee44:	613b      	str	r3, [r7, #16]
 800ee46:	e009      	b.n	800ee5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	3340      	adds	r3, #64	; 0x40
 800ee4e:	009b      	lsls	r3, r3, #2
 800ee50:	4413      	add	r3, r2
 800ee52:	2200      	movs	r2, #0
 800ee54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	613b      	str	r3, [r7, #16]
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	2b0e      	cmp	r3, #14
 800ee60:	d9f2      	bls.n	800ee48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ee62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d11c      	bne.n	800eea2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee76:	f043 0302 	orr.w	r3, r3, #2
 800ee7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	601a      	str	r2, [r3, #0]
 800eea0:	e005      	b.n	800eeae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eec0:	4619      	mov	r1, r3
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eec8:	461a      	mov	r2, r3
 800eeca:	680b      	ldr	r3, [r1, #0]
 800eecc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d10c      	bne.n	800eeee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d104      	bne.n	800eee4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eeda:	2100      	movs	r1, #0
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f000 f949 	bl	800f174 <USB_SetDevSpeed>
 800eee2:	e008      	b.n	800eef6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eee4:	2101      	movs	r1, #1
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 f944 	bl	800f174 <USB_SetDevSpeed>
 800eeec:	e003      	b.n	800eef6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eeee:	2103      	movs	r1, #3
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f93f 	bl	800f174 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eef6:	2110      	movs	r1, #16
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 f8f3 	bl	800f0e4 <USB_FlushTxFifo>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f000 f911 	bl	800f130 <USB_FlushRxFifo>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ef14:	2301      	movs	r3, #1
 800ef16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef1e:	461a      	mov	r2, r3
 800ef20:	2300      	movs	r3, #0
 800ef22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef36:	461a      	mov	r2, r3
 800ef38:	2300      	movs	r3, #0
 800ef3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	613b      	str	r3, [r7, #16]
 800ef40:	e043      	b.n	800efca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	015a      	lsls	r2, r3, #5
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	4413      	add	r3, r2
 800ef4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ef58:	d118      	bne.n	800ef8c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10a      	bne.n	800ef76 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	015a      	lsls	r2, r3, #5
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	4413      	add	r3, r2
 800ef68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ef72:	6013      	str	r3, [r2, #0]
 800ef74:	e013      	b.n	800ef9e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	015a      	lsls	r2, r3, #5
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef82:	461a      	mov	r2, r3
 800ef84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ef88:	6013      	str	r3, [r2, #0]
 800ef8a:	e008      	b.n	800ef9e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	015a      	lsls	r2, r3, #5
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4413      	add	r3, r2
 800ef94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef98:	461a      	mov	r2, r3
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efaa:	461a      	mov	r2, r3
 800efac:	2300      	movs	r3, #0
 800efae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	015a      	lsls	r2, r3, #5
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	4413      	add	r3, r2
 800efb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efbc:	461a      	mov	r2, r3
 800efbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800efc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	3301      	adds	r3, #1
 800efc8:	613b      	str	r3, [r7, #16]
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	693a      	ldr	r2, [r7, #16]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d3b7      	bcc.n	800ef42 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800efd2:	2300      	movs	r3, #0
 800efd4:	613b      	str	r3, [r7, #16]
 800efd6:	e043      	b.n	800f060 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	015a      	lsls	r2, r3, #5
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800efea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800efee:	d118      	bne.n	800f022 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d10a      	bne.n	800f00c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	015a      	lsls	r2, r3, #5
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	4413      	add	r3, r2
 800effe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f002:	461a      	mov	r2, r3
 800f004:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f008:	6013      	str	r3, [r2, #0]
 800f00a:	e013      	b.n	800f034 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	015a      	lsls	r2, r3, #5
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	4413      	add	r3, r2
 800f014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f018:	461a      	mov	r2, r3
 800f01a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f01e:	6013      	str	r3, [r2, #0]
 800f020:	e008      	b.n	800f034 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	015a      	lsls	r2, r3, #5
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	4413      	add	r3, r2
 800f02a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f02e:	461a      	mov	r2, r3
 800f030:	2300      	movs	r3, #0
 800f032:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	015a      	lsls	r2, r3, #5
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	4413      	add	r3, r2
 800f03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f040:	461a      	mov	r2, r3
 800f042:	2300      	movs	r3, #0
 800f044:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	015a      	lsls	r2, r3, #5
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	4413      	add	r3, r2
 800f04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f052:	461a      	mov	r2, r3
 800f054:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f058:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	3301      	adds	r3, #1
 800f05e:	613b      	str	r3, [r7, #16]
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	429a      	cmp	r2, r3
 800f066:	d3b7      	bcc.n	800efd8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f06e:	691b      	ldr	r3, [r3, #16]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f07a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2200      	movs	r2, #0
 800f080:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f088:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d105      	bne.n	800f09c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	699b      	ldr	r3, [r3, #24]
 800f094:	f043 0210 	orr.w	r2, r3, #16
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	699a      	ldr	r2, [r3, #24]
 800f0a0:	4b0e      	ldr	r3, [pc, #56]	; (800f0dc <USB_DevInit+0x2b4>)
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d005      	beq.n	800f0ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	f043 0208 	orr.w	r2, r3, #8
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d105      	bne.n	800f0cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	699a      	ldr	r2, [r3, #24]
 800f0c4:	4b06      	ldr	r3, [pc, #24]	; (800f0e0 <USB_DevInit+0x2b8>)
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3718      	adds	r7, #24
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0d8:	b004      	add	sp, #16
 800f0da:	4770      	bx	lr
 800f0dc:	803c3800 	.word	0x803c3800
 800f0e0:	40000004 	.word	0x40000004

0800f0e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	019b      	lsls	r3, r3, #6
 800f0f6:	f043 0220 	orr.w	r2, r3, #32
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3301      	adds	r3, #1
 800f102:	60fb      	str	r3, [r7, #12]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4a09      	ldr	r2, [pc, #36]	; (800f12c <USB_FlushTxFifo+0x48>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d901      	bls.n	800f110 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800f10c:	2303      	movs	r3, #3
 800f10e:	e006      	b.n	800f11e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	f003 0320 	and.w	r3, r3, #32
 800f118:	2b20      	cmp	r3, #32
 800f11a:	d0f0      	beq.n	800f0fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	00030d40 	.word	0x00030d40

0800f130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800f138:	2300      	movs	r3, #0
 800f13a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2210      	movs	r2, #16
 800f140:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3301      	adds	r3, #1
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	4a09      	ldr	r2, [pc, #36]	; (800f170 <USB_FlushRxFifo+0x40>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d901      	bls.n	800f154 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800f150:	2303      	movs	r3, #3
 800f152:	e006      	b.n	800f162 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	f003 0310 	and.w	r3, r3, #16
 800f15c:	2b10      	cmp	r3, #16
 800f15e:	d0f0      	beq.n	800f142 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr
 800f16e:	bf00      	nop
 800f170:	00030d40 	.word	0x00030d40

0800f174 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	460b      	mov	r3, r1
 800f17e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	78fb      	ldrb	r3, [r7, #3]
 800f18e:	68f9      	ldr	r1, [r7, #12]
 800f190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f194:	4313      	orrs	r3, r2
 800f196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f198:	2300      	movs	r3, #0
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3714      	adds	r7, #20
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f1a6:	b480      	push	{r7}
 800f1a8:	b087      	sub	sp, #28
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	f003 0306 	and.w	r3, r3, #6
 800f1be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d102      	bne.n	800f1cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	75fb      	strb	r3, [r7, #23]
 800f1ca:	e00a      	b.n	800f1e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	d002      	beq.n	800f1d8 <USB_GetDevSpeed+0x32>
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b06      	cmp	r3, #6
 800f1d6:	d102      	bne.n	800f1de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f1d8:	2302      	movs	r3, #2
 800f1da:	75fb      	strb	r3, [r7, #23]
 800f1dc:	e001      	b.n	800f1e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f1de:	230f      	movs	r3, #15
 800f1e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	371c      	adds	r7, #28
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b085      	sub	sp, #20
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	785b      	ldrb	r3, [r3, #1]
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d139      	bne.n	800f280 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f212:	69da      	ldr	r2, [r3, #28]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	f003 030f 	and.w	r3, r3, #15
 800f21c:	2101      	movs	r1, #1
 800f21e:	fa01 f303 	lsl.w	r3, r1, r3
 800f222:	b29b      	uxth	r3, r3
 800f224:	68f9      	ldr	r1, [r7, #12]
 800f226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f22a:	4313      	orrs	r3, r2
 800f22c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	015a      	lsls	r2, r3, #5
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	4413      	add	r3, r2
 800f236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f240:	2b00      	cmp	r3, #0
 800f242:	d153      	bne.n	800f2ec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	015a      	lsls	r2, r3, #5
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	4413      	add	r3, r2
 800f24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	78db      	ldrb	r3, [r3, #3]
 800f25e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f260:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	059b      	lsls	r3, r3, #22
 800f266:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f268:	431a      	orrs	r2, r3
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	0159      	lsls	r1, r3, #5
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	440b      	add	r3, r1
 800f272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f276:	4619      	mov	r1, r3
 800f278:	4b20      	ldr	r3, [pc, #128]	; (800f2fc <USB_ActivateEndpoint+0x10c>)
 800f27a:	4313      	orrs	r3, r2
 800f27c:	600b      	str	r3, [r1, #0]
 800f27e:	e035      	b.n	800f2ec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f286:	69da      	ldr	r2, [r3, #28]
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	f003 030f 	and.w	r3, r3, #15
 800f290:	2101      	movs	r1, #1
 800f292:	fa01 f303 	lsl.w	r3, r1, r3
 800f296:	041b      	lsls	r3, r3, #16
 800f298:	68f9      	ldr	r1, [r7, #12]
 800f29a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f29e:	4313      	orrs	r3, r2
 800f2a0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	015a      	lsls	r2, r3, #5
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d119      	bne.n	800f2ec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	015a      	lsls	r2, r3, #5
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	4413      	add	r3, r2
 800f2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	689b      	ldr	r3, [r3, #8]
 800f2ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	78db      	ldrb	r3, [r3, #3]
 800f2d2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f2d4:	430b      	orrs	r3, r1
 800f2d6:	431a      	orrs	r2, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	0159      	lsls	r1, r3, #5
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	440b      	add	r3, r1
 800f2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	4b05      	ldr	r3, [pc, #20]	; (800f2fc <USB_ActivateEndpoint+0x10c>)
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f2ec:	2300      	movs	r3, #0
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3714      	adds	r7, #20
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr
 800f2fa:	bf00      	nop
 800f2fc:	10008000 	.word	0x10008000

0800f300 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f300:	b480      	push	{r7}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	785b      	ldrb	r3, [r3, #1]
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d161      	bne.n	800f3e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4413      	add	r3, r2
 800f324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f32e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f332:	d11f      	bne.n	800f374 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	015a      	lsls	r2, r3, #5
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	4413      	add	r3, r2
 800f33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	68ba      	ldr	r2, [r7, #8]
 800f344:	0151      	lsls	r1, r2, #5
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	440a      	add	r2, r1
 800f34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f34e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f352:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	015a      	lsls	r2, r3, #5
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	4413      	add	r3, r2
 800f35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	68ba      	ldr	r2, [r7, #8]
 800f364:	0151      	lsls	r1, r2, #5
 800f366:	68fa      	ldr	r2, [r7, #12]
 800f368:	440a      	add	r2, r1
 800f36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f36e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f37a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	f003 030f 	and.w	r3, r3, #15
 800f384:	2101      	movs	r1, #1
 800f386:	fa01 f303 	lsl.w	r3, r1, r3
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	43db      	mvns	r3, r3
 800f38e:	68f9      	ldr	r1, [r7, #12]
 800f390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f394:	4013      	ands	r3, r2
 800f396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39e:	69da      	ldr	r2, [r3, #28]
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	f003 030f 	and.w	r3, r3, #15
 800f3a8:	2101      	movs	r1, #1
 800f3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	43db      	mvns	r3, r3
 800f3b2:	68f9      	ldr	r1, [r7, #12]
 800f3b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3b8:	4013      	ands	r3, r2
 800f3ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	015a      	lsls	r2, r3, #5
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	0159      	lsls	r1, r3, #5
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	440b      	add	r3, r1
 800f3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	4b35      	ldr	r3, [pc, #212]	; (800f4b0 <USB_DeactivateEndpoint+0x1b0>)
 800f3da:	4013      	ands	r3, r2
 800f3dc:	600b      	str	r3, [r1, #0]
 800f3de:	e060      	b.n	800f4a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	015a      	lsls	r2, r3, #5
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3f6:	d11f      	bne.n	800f438 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	015a      	lsls	r2, r3, #5
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	4413      	add	r3, r2
 800f400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68ba      	ldr	r2, [r7, #8]
 800f408:	0151      	lsls	r1, r2, #5
 800f40a:	68fa      	ldr	r2, [r7, #12]
 800f40c:	440a      	add	r2, r1
 800f40e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f412:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f416:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	015a      	lsls	r2, r3, #5
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	4413      	add	r3, r2
 800f420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	68ba      	ldr	r2, [r7, #8]
 800f428:	0151      	lsls	r1, r2, #5
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	440a      	add	r2, r1
 800f42e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f436:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	f003 030f 	and.w	r3, r3, #15
 800f448:	2101      	movs	r1, #1
 800f44a:	fa01 f303 	lsl.w	r3, r1, r3
 800f44e:	041b      	lsls	r3, r3, #16
 800f450:	43db      	mvns	r3, r3
 800f452:	68f9      	ldr	r1, [r7, #12]
 800f454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f458:	4013      	ands	r3, r2
 800f45a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f462:	69da      	ldr	r2, [r3, #28]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	f003 030f 	and.w	r3, r3, #15
 800f46c:	2101      	movs	r1, #1
 800f46e:	fa01 f303 	lsl.w	r3, r1, r3
 800f472:	041b      	lsls	r3, r3, #16
 800f474:	43db      	mvns	r3, r3
 800f476:	68f9      	ldr	r1, [r7, #12]
 800f478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f47c:	4013      	ands	r3, r2
 800f47e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	015a      	lsls	r2, r3, #5
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	4413      	add	r3, r2
 800f488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	0159      	lsls	r1, r3, #5
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	440b      	add	r3, r1
 800f496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f49a:	4619      	mov	r1, r3
 800f49c:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <USB_DeactivateEndpoint+0x1b4>)
 800f49e:	4013      	ands	r3, r2
 800f4a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3714      	adds	r7, #20
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	ec337800 	.word	0xec337800
 800f4b4:	eff37800 	.word	0xeff37800

0800f4b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b08a      	sub	sp, #40	; 0x28
 800f4bc:	af02      	add	r7, sp, #8
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	785b      	ldrb	r3, [r3, #1]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	f040 8163 	bne.w	800f7a0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	695b      	ldr	r3, [r3, #20]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d132      	bne.n	800f548 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	015a      	lsls	r2, r3, #5
 800f4e6:	69fb      	ldr	r3, [r7, #28]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4ee:	691a      	ldr	r2, [r3, #16]
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	0159      	lsls	r1, r3, #5
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	440b      	add	r3, r1
 800f4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4ba5      	ldr	r3, [pc, #660]	; (800f794 <USB_EPStartXfer+0x2dc>)
 800f500:	4013      	ands	r3, r2
 800f502:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f504:	69bb      	ldr	r3, [r7, #24]
 800f506:	015a      	lsls	r2, r3, #5
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	4413      	add	r3, r2
 800f50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	69ba      	ldr	r2, [r7, #24]
 800f514:	0151      	lsls	r1, r2, #5
 800f516:	69fa      	ldr	r2, [r7, #28]
 800f518:	440a      	add	r2, r1
 800f51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f51e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	015a      	lsls	r2, r3, #5
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f530:	691a      	ldr	r2, [r3, #16]
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	0159      	lsls	r1, r3, #5
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	440b      	add	r3, r1
 800f53a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f53e:	4619      	mov	r1, r3
 800f540:	4b95      	ldr	r3, [pc, #596]	; (800f798 <USB_EPStartXfer+0x2e0>)
 800f542:	4013      	ands	r3, r2
 800f544:	610b      	str	r3, [r1, #16]
 800f546:	e074      	b.n	800f632 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f548:	69bb      	ldr	r3, [r7, #24]
 800f54a:	015a      	lsls	r2, r3, #5
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	4413      	add	r3, r2
 800f550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f554:	691a      	ldr	r2, [r3, #16]
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	0159      	lsls	r1, r3, #5
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	440b      	add	r3, r1
 800f55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f562:	4619      	mov	r1, r3
 800f564:	4b8c      	ldr	r3, [pc, #560]	; (800f798 <USB_EPStartXfer+0x2e0>)
 800f566:	4013      	ands	r3, r2
 800f568:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f56a:	69bb      	ldr	r3, [r7, #24]
 800f56c:	015a      	lsls	r2, r3, #5
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	4413      	add	r3, r2
 800f572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f576:	691a      	ldr	r2, [r3, #16]
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	0159      	lsls	r1, r3, #5
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	440b      	add	r3, r1
 800f580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f584:	4619      	mov	r1, r3
 800f586:	4b83      	ldr	r3, [pc, #524]	; (800f794 <USB_EPStartXfer+0x2dc>)
 800f588:	4013      	ands	r3, r2
 800f58a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	015a      	lsls	r2, r3, #5
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	4413      	add	r3, r2
 800f594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f598:	691a      	ldr	r2, [r3, #16]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	6959      	ldr	r1, [r3, #20]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	440b      	add	r3, r1
 800f5a4:	1e59      	subs	r1, r3, #1
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800f5ae:	04d9      	lsls	r1, r3, #19
 800f5b0:	4b7a      	ldr	r3, [pc, #488]	; (800f79c <USB_EPStartXfer+0x2e4>)
 800f5b2:	400b      	ands	r3, r1
 800f5b4:	69b9      	ldr	r1, [r7, #24]
 800f5b6:	0148      	lsls	r0, r1, #5
 800f5b8:	69f9      	ldr	r1, [r7, #28]
 800f5ba:	4401      	add	r1, r0
 800f5bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f5c0:	4313      	orrs	r3, r2
 800f5c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f5c4:	69bb      	ldr	r3, [r7, #24]
 800f5c6:	015a      	lsls	r2, r3, #5
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d0:	691a      	ldr	r2, [r3, #16]
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	695b      	ldr	r3, [r3, #20]
 800f5d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f5da:	69b9      	ldr	r1, [r7, #24]
 800f5dc:	0148      	lsls	r0, r1, #5
 800f5de:	69f9      	ldr	r1, [r7, #28]
 800f5e0:	4401      	add	r1, r0
 800f5e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f5e6:	4313      	orrs	r3, r2
 800f5e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	78db      	ldrb	r3, [r3, #3]
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d11f      	bne.n	800f632 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f5f2:	69bb      	ldr	r3, [r7, #24]
 800f5f4:	015a      	lsls	r2, r3, #5
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5fe:	691b      	ldr	r3, [r3, #16]
 800f600:	69ba      	ldr	r2, [r7, #24]
 800f602:	0151      	lsls	r1, r2, #5
 800f604:	69fa      	ldr	r2, [r7, #28]
 800f606:	440a      	add	r2, r1
 800f608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f60c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f610:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	015a      	lsls	r2, r3, #5
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	4413      	add	r3, r2
 800f61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f61e:	691b      	ldr	r3, [r3, #16]
 800f620:	69ba      	ldr	r2, [r7, #24]
 800f622:	0151      	lsls	r1, r2, #5
 800f624:	69fa      	ldr	r2, [r7, #28]
 800f626:	440a      	add	r2, r1
 800f628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f62c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f630:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f632:	79fb      	ldrb	r3, [r7, #7]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d14b      	bne.n	800f6d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	691b      	ldr	r3, [r3, #16]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d009      	beq.n	800f654 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f640:	69bb      	ldr	r3, [r7, #24]
 800f642:	015a      	lsls	r2, r3, #5
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	4413      	add	r3, r2
 800f648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f64c:	461a      	mov	r2, r3
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	691b      	ldr	r3, [r3, #16]
 800f652:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	78db      	ldrb	r3, [r3, #3]
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d128      	bne.n	800f6ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d110      	bne.n	800f68e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	015a      	lsls	r2, r3, #5
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	4413      	add	r3, r2
 800f674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	69ba      	ldr	r2, [r7, #24]
 800f67c:	0151      	lsls	r1, r2, #5
 800f67e:	69fa      	ldr	r2, [r7, #28]
 800f680:	440a      	add	r2, r1
 800f682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f686:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f68a:	6013      	str	r3, [r2, #0]
 800f68c:	e00f      	b.n	800f6ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	015a      	lsls	r2, r3, #5
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	4413      	add	r3, r2
 800f696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	69ba      	ldr	r2, [r7, #24]
 800f69e:	0151      	lsls	r1, r2, #5
 800f6a0:	69fa      	ldr	r2, [r7, #28]
 800f6a2:	440a      	add	r2, r1
 800f6a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6ae:	69bb      	ldr	r3, [r7, #24]
 800f6b0:	015a      	lsls	r2, r3, #5
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	4413      	add	r3, r2
 800f6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	69ba      	ldr	r2, [r7, #24]
 800f6be:	0151      	lsls	r1, r2, #5
 800f6c0:	69fa      	ldr	r2, [r7, #28]
 800f6c2:	440a      	add	r2, r1
 800f6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6cc:	6013      	str	r3, [r2, #0]
 800f6ce:	e133      	b.n	800f938 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	015a      	lsls	r2, r3, #5
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	4413      	add	r3, r2
 800f6d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	69ba      	ldr	r2, [r7, #24]
 800f6e0:	0151      	lsls	r1, r2, #5
 800f6e2:	69fa      	ldr	r2, [r7, #28]
 800f6e4:	440a      	add	r2, r1
 800f6e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	78db      	ldrb	r3, [r3, #3]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d015      	beq.n	800f724 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	695b      	ldr	r3, [r3, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	f000 811b 	beq.w	800f938 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	781b      	ldrb	r3, [r3, #0]
 800f70e:	f003 030f 	and.w	r3, r3, #15
 800f712:	2101      	movs	r1, #1
 800f714:	fa01 f303 	lsl.w	r3, r1, r3
 800f718:	69f9      	ldr	r1, [r7, #28]
 800f71a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f71e:	4313      	orrs	r3, r2
 800f720:	634b      	str	r3, [r1, #52]	; 0x34
 800f722:	e109      	b.n	800f938 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f72a:	689b      	ldr	r3, [r3, #8]
 800f72c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f730:	2b00      	cmp	r3, #0
 800f732:	d110      	bne.n	800f756 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	015a      	lsls	r2, r3, #5
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	4413      	add	r3, r2
 800f73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	69ba      	ldr	r2, [r7, #24]
 800f744:	0151      	lsls	r1, r2, #5
 800f746:	69fa      	ldr	r2, [r7, #28]
 800f748:	440a      	add	r2, r1
 800f74a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f74e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	e00f      	b.n	800f776 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	015a      	lsls	r2, r3, #5
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	4413      	add	r3, r2
 800f75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	69ba      	ldr	r2, [r7, #24]
 800f766:	0151      	lsls	r1, r2, #5
 800f768:	69fa      	ldr	r2, [r7, #28]
 800f76a:	440a      	add	r2, r1
 800f76c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f774:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	68d9      	ldr	r1, [r3, #12]
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	781a      	ldrb	r2, [r3, #0]
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	695b      	ldr	r3, [r3, #20]
 800f782:	b298      	uxth	r0, r3
 800f784:	79fb      	ldrb	r3, [r7, #7]
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	4603      	mov	r3, r0
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f000 fa38 	bl	800fc00 <USB_WritePacket>
 800f790:	e0d2      	b.n	800f938 <USB_EPStartXfer+0x480>
 800f792:	bf00      	nop
 800f794:	e007ffff 	.word	0xe007ffff
 800f798:	fff80000 	.word	0xfff80000
 800f79c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	015a      	lsls	r2, r3, #5
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ac:	691a      	ldr	r2, [r3, #16]
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	0159      	lsls	r1, r3, #5
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	440b      	add	r3, r1
 800f7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	4b61      	ldr	r3, [pc, #388]	; (800f944 <USB_EPStartXfer+0x48c>)
 800f7be:	4013      	ands	r3, r2
 800f7c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	015a      	lsls	r2, r3, #5
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7ce:	691a      	ldr	r2, [r3, #16]
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	0159      	lsls	r1, r3, #5
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	440b      	add	r3, r1
 800f7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7dc:	4619      	mov	r1, r3
 800f7de:	4b5a      	ldr	r3, [pc, #360]	; (800f948 <USB_EPStartXfer+0x490>)
 800f7e0:	4013      	ands	r3, r2
 800f7e2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	695b      	ldr	r3, [r3, #20]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d123      	bne.n	800f834 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	015a      	lsls	r2, r3, #5
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	4413      	add	r3, r2
 800f7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f8:	691a      	ldr	r2, [r3, #16]
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f802:	69b9      	ldr	r1, [r7, #24]
 800f804:	0148      	lsls	r0, r1, #5
 800f806:	69f9      	ldr	r1, [r7, #28]
 800f808:	4401      	add	r1, r0
 800f80a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f80e:	4313      	orrs	r3, r2
 800f810:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	015a      	lsls	r2, r3, #5
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	4413      	add	r3, r2
 800f81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	69ba      	ldr	r2, [r7, #24]
 800f822:	0151      	lsls	r1, r2, #5
 800f824:	69fa      	ldr	r2, [r7, #28]
 800f826:	440a      	add	r2, r1
 800f828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f82c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f830:	6113      	str	r3, [r2, #16]
 800f832:	e033      	b.n	800f89c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	695a      	ldr	r2, [r3, #20]
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	4413      	add	r3, r2
 800f83e:	1e5a      	subs	r2, r3, #1
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	fbb2 f3f3 	udiv	r3, r2, r3
 800f848:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	015a      	lsls	r2, r3, #5
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	4413      	add	r3, r2
 800f852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f856:	691a      	ldr	r2, [r3, #16]
 800f858:	8afb      	ldrh	r3, [r7, #22]
 800f85a:	04d9      	lsls	r1, r3, #19
 800f85c:	4b3b      	ldr	r3, [pc, #236]	; (800f94c <USB_EPStartXfer+0x494>)
 800f85e:	400b      	ands	r3, r1
 800f860:	69b9      	ldr	r1, [r7, #24]
 800f862:	0148      	lsls	r0, r1, #5
 800f864:	69f9      	ldr	r1, [r7, #28]
 800f866:	4401      	add	r1, r0
 800f868:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f86c:	4313      	orrs	r3, r2
 800f86e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f870:	69bb      	ldr	r3, [r7, #24]
 800f872:	015a      	lsls	r2, r3, #5
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	4413      	add	r3, r2
 800f878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f87c:	691a      	ldr	r2, [r3, #16]
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	689b      	ldr	r3, [r3, #8]
 800f882:	8af9      	ldrh	r1, [r7, #22]
 800f884:	fb01 f303 	mul.w	r3, r1, r3
 800f888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f88c:	69b9      	ldr	r1, [r7, #24]
 800f88e:	0148      	lsls	r0, r1, #5
 800f890:	69f9      	ldr	r1, [r7, #28]
 800f892:	4401      	add	r1, r0
 800f894:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f898:	4313      	orrs	r3, r2
 800f89a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	2b01      	cmp	r3, #1
 800f8a0:	d10d      	bne.n	800f8be <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d009      	beq.n	800f8be <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	68d9      	ldr	r1, [r3, #12]
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	015a      	lsls	r2, r3, #5
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ba:	460a      	mov	r2, r1
 800f8bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	78db      	ldrb	r3, [r3, #3]
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d128      	bne.n	800f918 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8cc:	689b      	ldr	r3, [r3, #8]
 800f8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d110      	bne.n	800f8f8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	015a      	lsls	r2, r3, #5
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	4413      	add	r3, r2
 800f8de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	69ba      	ldr	r2, [r7, #24]
 800f8e6:	0151      	lsls	r1, r2, #5
 800f8e8:	69fa      	ldr	r2, [r7, #28]
 800f8ea:	440a      	add	r2, r1
 800f8ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	e00f      	b.n	800f918 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f8f8:	69bb      	ldr	r3, [r7, #24]
 800f8fa:	015a      	lsls	r2, r3, #5
 800f8fc:	69fb      	ldr	r3, [r7, #28]
 800f8fe:	4413      	add	r3, r2
 800f900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	69ba      	ldr	r2, [r7, #24]
 800f908:	0151      	lsls	r1, r2, #5
 800f90a:	69fa      	ldr	r2, [r7, #28]
 800f90c:	440a      	add	r2, r1
 800f90e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f916:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	015a      	lsls	r2, r3, #5
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	4413      	add	r3, r2
 800f920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	69ba      	ldr	r2, [r7, #24]
 800f928:	0151      	lsls	r1, r2, #5
 800f92a:	69fa      	ldr	r2, [r7, #28]
 800f92c:	440a      	add	r2, r1
 800f92e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f936:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3720      	adds	r7, #32
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	fff80000 	.word	0xfff80000
 800f948:	e007ffff 	.word	0xe007ffff
 800f94c:	1ff80000 	.word	0x1ff80000

0800f950 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f950:	b480      	push	{r7}
 800f952:	b087      	sub	sp, #28
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	4613      	mov	r3, r2
 800f95c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	785b      	ldrb	r3, [r3, #1]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	f040 80cd 	bne.w	800fb0c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	695b      	ldr	r3, [r3, #20]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d132      	bne.n	800f9e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	015a      	lsls	r2, r3, #5
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	4413      	add	r3, r2
 800f982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f986:	691a      	ldr	r2, [r3, #16]
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	0159      	lsls	r1, r3, #5
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	440b      	add	r3, r1
 800f990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f994:	4619      	mov	r1, r3
 800f996:	4b98      	ldr	r3, [pc, #608]	; (800fbf8 <USB_EP0StartXfer+0x2a8>)
 800f998:	4013      	ands	r3, r2
 800f99a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	015a      	lsls	r2, r3, #5
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9a8:	691b      	ldr	r3, [r3, #16]
 800f9aa:	693a      	ldr	r2, [r7, #16]
 800f9ac:	0151      	lsls	r1, r2, #5
 800f9ae:	697a      	ldr	r2, [r7, #20]
 800f9b0:	440a      	add	r2, r1
 800f9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f9ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	015a      	lsls	r2, r3, #5
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c8:	691a      	ldr	r2, [r3, #16]
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	0159      	lsls	r1, r3, #5
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	440b      	add	r3, r1
 800f9d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	4b88      	ldr	r3, [pc, #544]	; (800fbfc <USB_EP0StartXfer+0x2ac>)
 800f9da:	4013      	ands	r3, r2
 800f9dc:	610b      	str	r3, [r1, #16]
 800f9de:	e04e      	b.n	800fa7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	015a      	lsls	r2, r3, #5
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	4413      	add	r3, r2
 800f9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9ec:	691a      	ldr	r2, [r3, #16]
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	0159      	lsls	r1, r3, #5
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	440b      	add	r3, r1
 800f9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4b7f      	ldr	r3, [pc, #508]	; (800fbfc <USB_EP0StartXfer+0x2ac>)
 800f9fe:	4013      	ands	r3, r2
 800fa00:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	015a      	lsls	r2, r3, #5
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	4413      	add	r3, r2
 800fa0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa0e:	691a      	ldr	r2, [r3, #16]
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	0159      	lsls	r1, r3, #5
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	440b      	add	r3, r1
 800fa18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	4b76      	ldr	r3, [pc, #472]	; (800fbf8 <USB_EP0StartXfer+0x2a8>)
 800fa20:	4013      	ands	r3, r2
 800fa22:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	695a      	ldr	r2, [r3, #20]
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	689b      	ldr	r3, [r3, #8]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d903      	bls.n	800fa38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	689a      	ldr	r2, [r3, #8]
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	015a      	lsls	r2, r3, #5
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	4413      	add	r3, r2
 800fa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa44:	691b      	ldr	r3, [r3, #16]
 800fa46:	693a      	ldr	r2, [r7, #16]
 800fa48:	0151      	lsls	r1, r2, #5
 800fa4a:	697a      	ldr	r2, [r7, #20]
 800fa4c:	440a      	add	r2, r1
 800fa4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa64:	691a      	ldr	r2, [r3, #16]
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	695b      	ldr	r3, [r3, #20]
 800fa6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa6e:	6939      	ldr	r1, [r7, #16]
 800fa70:	0148      	lsls	r0, r1, #5
 800fa72:	6979      	ldr	r1, [r7, #20]
 800fa74:	4401      	add	r1, r0
 800fa76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fa7e:	79fb      	ldrb	r3, [r7, #7]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d11e      	bne.n	800fac2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d009      	beq.n	800faa0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa98:	461a      	mov	r2, r3
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	691b      	ldr	r3, [r3, #16]
 800fa9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	015a      	lsls	r2, r3, #5
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	4413      	add	r3, r2
 800faa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	0151      	lsls	r1, r2, #5
 800fab2:	697a      	ldr	r2, [r7, #20]
 800fab4:	440a      	add	r2, r1
 800fab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fabe:	6013      	str	r3, [r2, #0]
 800fac0:	e092      	b.n	800fbe8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	015a      	lsls	r2, r3, #5
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	4413      	add	r3, r2
 800faca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	693a      	ldr	r2, [r7, #16]
 800fad2:	0151      	lsls	r1, r2, #5
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	440a      	add	r2, r1
 800fad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fadc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fae0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	695b      	ldr	r3, [r3, #20]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d07e      	beq.n	800fbe8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f003 030f 	and.w	r3, r3, #15
 800fafa:	2101      	movs	r1, #1
 800fafc:	fa01 f303 	lsl.w	r3, r1, r3
 800fb00:	6979      	ldr	r1, [r7, #20]
 800fb02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb06:	4313      	orrs	r3, r2
 800fb08:	634b      	str	r3, [r1, #52]	; 0x34
 800fb0a:	e06d      	b.n	800fbe8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	015a      	lsls	r2, r3, #5
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	4413      	add	r3, r2
 800fb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb18:	691a      	ldr	r2, [r3, #16]
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	0159      	lsls	r1, r3, #5
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	440b      	add	r3, r1
 800fb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb26:	4619      	mov	r1, r3
 800fb28:	4b34      	ldr	r3, [pc, #208]	; (800fbfc <USB_EP0StartXfer+0x2ac>)
 800fb2a:	4013      	ands	r3, r2
 800fb2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	015a      	lsls	r2, r3, #5
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	4413      	add	r3, r2
 800fb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb3a:	691a      	ldr	r2, [r3, #16]
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	0159      	lsls	r1, r3, #5
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	440b      	add	r3, r1
 800fb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb48:	4619      	mov	r1, r3
 800fb4a:	4b2b      	ldr	r3, [pc, #172]	; (800fbf8 <USB_EP0StartXfer+0x2a8>)
 800fb4c:	4013      	ands	r3, r2
 800fb4e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	695b      	ldr	r3, [r3, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d003      	beq.n	800fb60 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	015a      	lsls	r2, r3, #5
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	4413      	add	r3, r2
 800fb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	693a      	ldr	r2, [r7, #16]
 800fb70:	0151      	lsls	r1, r2, #5
 800fb72:	697a      	ldr	r2, [r7, #20]
 800fb74:	440a      	add	r2, r1
 800fb76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fb7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	015a      	lsls	r2, r3, #5
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	4413      	add	r3, r2
 800fb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb8c:	691a      	ldr	r2, [r3, #16]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	689b      	ldr	r3, [r3, #8]
 800fb92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb96:	6939      	ldr	r1, [r7, #16]
 800fb98:	0148      	lsls	r0, r1, #5
 800fb9a:	6979      	ldr	r1, [r7, #20]
 800fb9c:	4401      	add	r1, r0
 800fb9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fba2:	4313      	orrs	r3, r2
 800fba4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fba6:	79fb      	ldrb	r3, [r7, #7]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d10d      	bne.n	800fbc8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d009      	beq.n	800fbc8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	68d9      	ldr	r1, [r3, #12]
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	015a      	lsls	r2, r3, #5
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc4:	460a      	mov	r2, r1
 800fbc6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	015a      	lsls	r2, r3, #5
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	4413      	add	r3, r2
 800fbd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	693a      	ldr	r2, [r7, #16]
 800fbd8:	0151      	lsls	r1, r2, #5
 800fbda:	697a      	ldr	r2, [r7, #20]
 800fbdc:	440a      	add	r2, r1
 800fbde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbe2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fbe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fbe8:	2300      	movs	r3, #0
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	371c      	adds	r7, #28
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf4:	4770      	bx	lr
 800fbf6:	bf00      	nop
 800fbf8:	e007ffff 	.word	0xe007ffff
 800fbfc:	fff80000 	.word	0xfff80000

0800fc00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b089      	sub	sp, #36	; 0x24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	4611      	mov	r1, r2
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	460b      	mov	r3, r1
 800fc10:	71fb      	strb	r3, [r7, #7]
 800fc12:	4613      	mov	r3, r2
 800fc14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800fc1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d123      	bne.n	800fc6e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fc26:	88bb      	ldrh	r3, [r7, #4]
 800fc28:	3303      	adds	r3, #3
 800fc2a:	089b      	lsrs	r3, r3, #2
 800fc2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fc2e:	2300      	movs	r3, #0
 800fc30:	61bb      	str	r3, [r7, #24]
 800fc32:	e018      	b.n	800fc66 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fc34:	79fb      	ldrb	r3, [r7, #7]
 800fc36:	031a      	lsls	r2, r3, #12
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	4413      	add	r3, r2
 800fc3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fc40:	461a      	mov	r2, r3
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	3301      	adds	r3, #1
 800fc52:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	3301      	adds	r3, #1
 800fc58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	3301      	adds	r3, #1
 800fc64:	61bb      	str	r3, [r7, #24]
 800fc66:	69ba      	ldr	r2, [r7, #24]
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d3e2      	bcc.n	800fc34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fc6e:	2300      	movs	r3, #0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3724      	adds	r7, #36	; 0x24
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b08b      	sub	sp, #44	; 0x2c
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	4613      	mov	r3, r2
 800fc88:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fc92:	88fb      	ldrh	r3, [r7, #6]
 800fc94:	089b      	lsrs	r3, r3, #2
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fc9a:	88fb      	ldrh	r3, [r7, #6]
 800fc9c:	f003 0303 	and.w	r3, r3, #3
 800fca0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fca2:	2300      	movs	r3, #0
 800fca4:	623b      	str	r3, [r7, #32]
 800fca6:	e014      	b.n	800fcd2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	601a      	str	r2, [r3, #0]
    pDest++;
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc8:	3301      	adds	r3, #1
 800fcca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	623b      	str	r3, [r7, #32]
 800fcd2:	6a3a      	ldr	r2, [r7, #32]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d3e6      	bcc.n	800fca8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fcda:	8bfb      	ldrh	r3, [r7, #30]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d01e      	beq.n	800fd1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fce0:	2300      	movs	r3, #0
 800fce2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fcea:	461a      	mov	r2, r3
 800fcec:	f107 0310 	add.w	r3, r7, #16
 800fcf0:	6812      	ldr	r2, [r2, #0]
 800fcf2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fcf4:	693a      	ldr	r2, [r7, #16]
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	00db      	lsls	r3, r3, #3
 800fcfc:	fa22 f303 	lsr.w	r3, r2, r3
 800fd00:	b2da      	uxtb	r2, r3
 800fd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd04:	701a      	strb	r2, [r3, #0]
      i++;
 800fd06:	6a3b      	ldr	r3, [r7, #32]
 800fd08:	3301      	adds	r3, #1
 800fd0a:	623b      	str	r3, [r7, #32]
      pDest++;
 800fd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0e:	3301      	adds	r3, #1
 800fd10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fd12:	8bfb      	ldrh	r3, [r7, #30]
 800fd14:	3b01      	subs	r3, #1
 800fd16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fd18:	8bfb      	ldrh	r3, [r7, #30]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1ea      	bne.n	800fcf4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	372c      	adds	r7, #44	; 0x2c
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	785b      	ldrb	r3, [r3, #1]
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d12c      	bne.n	800fda2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	015a      	lsls	r2, r3, #5
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	4413      	add	r3, r2
 800fd50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	db12      	blt.n	800fd80 <USB_EPSetStall+0x54>
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00f      	beq.n	800fd80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	015a      	lsls	r2, r3, #5
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4413      	add	r3, r2
 800fd68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	0151      	lsls	r1, r2, #5
 800fd72:	68fa      	ldr	r2, [r7, #12]
 800fd74:	440a      	add	r2, r1
 800fd76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fd7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	015a      	lsls	r2, r3, #5
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	4413      	add	r3, r2
 800fd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68ba      	ldr	r2, [r7, #8]
 800fd90:	0151      	lsls	r1, r2, #5
 800fd92:	68fa      	ldr	r2, [r7, #12]
 800fd94:	440a      	add	r2, r1
 800fd96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fd9e:	6013      	str	r3, [r2, #0]
 800fda0:	e02b      	b.n	800fdfa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	015a      	lsls	r2, r3, #5
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	4413      	add	r3, r2
 800fdaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	db12      	blt.n	800fdda <USB_EPSetStall+0xae>
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00f      	beq.n	800fdda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	015a      	lsls	r2, r3, #5
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	0151      	lsls	r1, r2, #5
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	440a      	add	r2, r1
 800fdd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fdd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	015a      	lsls	r2, r3, #5
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	4413      	add	r3, r2
 800fde2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	68ba      	ldr	r2, [r7, #8]
 800fdea:	0151      	lsls	r1, r2, #5
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	440a      	add	r2, r1
 800fdf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fdf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	785b      	ldrb	r3, [r3, #1]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d128      	bne.n	800fe76 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	0151      	lsls	r1, r2, #5
 800fe36:	68fa      	ldr	r2, [r7, #12]
 800fe38:	440a      	add	r2, r1
 800fe3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe42:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	78db      	ldrb	r3, [r3, #3]
 800fe48:	2b03      	cmp	r3, #3
 800fe4a:	d003      	beq.n	800fe54 <USB_EPClearStall+0x4c>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	78db      	ldrb	r3, [r3, #3]
 800fe50:	2b02      	cmp	r3, #2
 800fe52:	d138      	bne.n	800fec6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	015a      	lsls	r2, r3, #5
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	0151      	lsls	r1, r2, #5
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	440a      	add	r2, r1
 800fe6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe72:	6013      	str	r3, [r2, #0]
 800fe74:	e027      	b.n	800fec6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	015a      	lsls	r2, r3, #5
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	0151      	lsls	r1, r2, #5
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	440a      	add	r2, r1
 800fe8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fe94:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	78db      	ldrb	r3, [r3, #3]
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d003      	beq.n	800fea6 <USB_EPClearStall+0x9e>
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	78db      	ldrb	r3, [r3, #3]
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d10f      	bne.n	800fec6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	015a      	lsls	r2, r3, #5
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	4413      	add	r3, r2
 800feae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	68ba      	ldr	r2, [r7, #8]
 800feb6:	0151      	lsls	r1, r2, #5
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	440a      	add	r2, r1
 800febc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fec4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3714      	adds	r7, #20
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	68fa      	ldr	r2, [r7, #12]
 800feee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fef2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fef6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	78fb      	ldrb	r3, [r7, #3]
 800ff02:	011b      	lsls	r3, r3, #4
 800ff04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ff08:	68f9      	ldr	r1, [r7, #12]
 800ff0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff0e:	4313      	orrs	r3, r2
 800ff10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ff12:	2300      	movs	r3, #0
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3714      	adds	r7, #20
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68fa      	ldr	r2, [r7, #12]
 800ff36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff3a:	f023 0303 	bic.w	r3, r3, #3
 800ff3e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff4e:	f023 0302 	bic.w	r3, r3, #2
 800ff52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3714      	adds	r7, #20
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr

0800ff62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ff62:	b480      	push	{r7}
 800ff64:	b085      	sub	sp, #20
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ff7c:	f023 0303 	bic.w	r3, r3, #3
 800ff80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff90:	f043 0302 	orr.w	r3, r3, #2
 800ff94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff96:	2300      	movs	r3, #0
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3714      	adds	r7, #20
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa2:	4770      	bx	lr

0800ffa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	695b      	ldr	r3, [r3, #20]
 800ffb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	699b      	ldr	r3, [r3, #24]
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	4013      	ands	r3, r2
 800ffba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3714      	adds	r7, #20
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr

0800ffca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ffca:	b480      	push	{r7}
 800ffcc:	b085      	sub	sp, #20
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffdc:	699b      	ldr	r3, [r3, #24]
 800ffde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffe6:	69db      	ldr	r3, [r3, #28]
 800ffe8:	68ba      	ldr	r2, [r7, #8]
 800ffea:	4013      	ands	r3, r2
 800ffec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	0c1b      	lsrs	r3, r3, #16
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3714      	adds	r7, #20
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr

0800fffe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fffe:	b480      	push	{r7}
 8010000:	b085      	sub	sp, #20
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010010:	699b      	ldr	r3, [r3, #24]
 8010012:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801001a:	69db      	ldr	r3, [r3, #28]
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	4013      	ands	r3, r2
 8010020:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	b29b      	uxth	r3, r3
}
 8010026:	4618      	mov	r0, r3
 8010028:	3714      	adds	r7, #20
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr

08010032 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010032:	b480      	push	{r7}
 8010034:	b085      	sub	sp, #20
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
 801003a:	460b      	mov	r3, r1
 801003c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010042:	78fb      	ldrb	r3, [r7, #3]
 8010044:	015a      	lsls	r2, r3, #5
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	4413      	add	r3, r2
 801004a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801004e:	689b      	ldr	r3, [r3, #8]
 8010050:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010058:	695b      	ldr	r3, [r3, #20]
 801005a:	68ba      	ldr	r2, [r7, #8]
 801005c:	4013      	ands	r3, r2
 801005e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010060:	68bb      	ldr	r3, [r7, #8]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801006e:	b480      	push	{r7}
 8010070:	b087      	sub	sp, #28
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	460b      	mov	r3, r1
 8010078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010084:	691b      	ldr	r3, [r3, #16]
 8010086:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801008e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010090:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010092:	78fb      	ldrb	r3, [r7, #3]
 8010094:	f003 030f 	and.w	r3, r3, #15
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	fa22 f303 	lsr.w	r3, r2, r3
 801009e:	01db      	lsls	r3, r3, #7
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	693a      	ldr	r2, [r7, #16]
 80100a4:	4313      	orrs	r3, r2
 80100a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80100a8:	78fb      	ldrb	r3, [r7, #3]
 80100aa:	015a      	lsls	r2, r3, #5
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	4413      	add	r3, r2
 80100b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b4:	689b      	ldr	r3, [r3, #8]
 80100b6:	693a      	ldr	r2, [r7, #16]
 80100b8:	4013      	ands	r3, r2
 80100ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80100bc:	68bb      	ldr	r3, [r7, #8]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	371c      	adds	r7, #28
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr

080100ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80100ca:	b480      	push	{r7}
 80100cc:	b083      	sub	sp, #12
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	695b      	ldr	r3, [r3, #20]
 80100d6:	f003 0301 	and.w	r3, r3, #1
}
 80100da:	4618      	mov	r0, r3
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
	...

080100e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010102:	4619      	mov	r1, r3
 8010104:	4b09      	ldr	r3, [pc, #36]	; (801012c <USB_ActivateSetup+0x44>)
 8010106:	4013      	ands	r3, r2
 8010108:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	68fa      	ldr	r2, [r7, #12]
 8010114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801011c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801011e:	2300      	movs	r3, #0
}
 8010120:	4618      	mov	r0, r3
 8010122:	3714      	adds	r7, #20
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr
 801012c:	fffff800 	.word	0xfffff800

08010130 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010130:	b480      	push	{r7}
 8010132:	b087      	sub	sp, #28
 8010134:	af00      	add	r7, sp, #0
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	460b      	mov	r3, r1
 801013a:	607a      	str	r2, [r7, #4]
 801013c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	333c      	adds	r3, #60	; 0x3c
 8010146:	3304      	adds	r3, #4
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	4a26      	ldr	r2, [pc, #152]	; (80101e8 <USB_EP0_OutStart+0xb8>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d90a      	bls.n	801016a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010164:	d101      	bne.n	801016a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010166:	2300      	movs	r3, #0
 8010168:	e037      	b.n	80101da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010170:	461a      	mov	r2, r3
 8010172:	2300      	movs	r3, #0
 8010174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801017c:	691b      	ldr	r3, [r3, #16]
 801017e:	697a      	ldr	r2, [r7, #20]
 8010180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	697a      	ldr	r2, [r7, #20]
 8010194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010198:	f043 0318 	orr.w	r3, r3, #24
 801019c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101a4:	691b      	ldr	r3, [r3, #16]
 80101a6:	697a      	ldr	r2, [r7, #20]
 80101a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101ac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80101b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80101b2:	7afb      	ldrb	r3, [r7, #11]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d10f      	bne.n	80101d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101be:	461a      	mov	r2, r3
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	697a      	ldr	r2, [r7, #20]
 80101ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101d2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80101d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	371c      	adds	r7, #28
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr
 80101e6:	bf00      	nop
 80101e8:	4f54300a 	.word	0x4f54300a

080101ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80101f4:	2300      	movs	r3, #0
 80101f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	3301      	adds	r3, #1
 80101fc:	60fb      	str	r3, [r7, #12]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	4a13      	ldr	r2, [pc, #76]	; (8010250 <USB_CoreReset+0x64>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d901      	bls.n	801020a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010206:	2303      	movs	r3, #3
 8010208:	e01b      	b.n	8010242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	daf2      	bge.n	80101f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010212:	2300      	movs	r3, #0
 8010214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	f043 0201 	orr.w	r2, r3, #1
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	3301      	adds	r3, #1
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	4a09      	ldr	r2, [pc, #36]	; (8010250 <USB_CoreReset+0x64>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d901      	bls.n	8010234 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010230:	2303      	movs	r3, #3
 8010232:	e006      	b.n	8010242 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	2b01      	cmp	r3, #1
 801023e:	d0f0      	beq.n	8010222 <USB_CoreReset+0x36>

  return HAL_OK;
 8010240:	2300      	movs	r3, #0
}
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	00030d40 	.word	0x00030d40

08010254 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010258:	4904      	ldr	r1, [pc, #16]	; (801026c <MX_FATFS_Init+0x18>)
 801025a:	4805      	ldr	r0, [pc, #20]	; (8010270 <MX_FATFS_Init+0x1c>)
 801025c:	f001 ff22 	bl	80120a4 <FATFS_LinkDriver>
 8010260:	4603      	mov	r3, r0
 8010262:	461a      	mov	r2, r3
 8010264:	4b03      	ldr	r3, [pc, #12]	; (8010274 <MX_FATFS_Init+0x20>)
 8010266:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010268:	bf00      	nop
 801026a:	bd80      	pop	{r7, pc}
 801026c:	24000918 	.word	0x24000918
 8010270:	080158d0 	.word	0x080158d0
 8010274:	24000914 	.word	0x24000914

08010278 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801027e:	2300      	movs	r3, #0
 8010280:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010282:	f000 f885 	bl	8010390 <BSP_SD_IsDetected>
 8010286:	4603      	mov	r3, r0
 8010288:	2b01      	cmp	r3, #1
 801028a:	d001      	beq.n	8010290 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801028c:	2302      	movs	r3, #2
 801028e:	e012      	b.n	80102b6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010290:	480b      	ldr	r0, [pc, #44]	; (80102c0 <BSP_SD_Init+0x48>)
 8010292:	f7f9 fdb5 	bl	8009e00 <HAL_SD_Init>
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d109      	bne.n	80102b4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80102a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80102a4:	4806      	ldr	r0, [pc, #24]	; (80102c0 <BSP_SD_Init+0x48>)
 80102a6:	f7fa fc59 	bl	800ab5c <HAL_SD_ConfigWideBusOperation>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d001      	beq.n	80102b4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80102b0:	2301      	movs	r3, #1
 80102b2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80102b4:	79fb      	ldrb	r3, [r7, #7]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	24000638 	.word	0x24000638

080102c4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b086      	sub	sp, #24
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80102d0:	2300      	movs	r3, #0
 80102d2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	68ba      	ldr	r2, [r7, #8]
 80102d8:	68f9      	ldr	r1, [r7, #12]
 80102da:	4806      	ldr	r0, [pc, #24]	; (80102f4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80102dc:	f7f9 fea8 	bl	800a030 <HAL_SD_ReadBlocks_DMA>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d001      	beq.n	80102ea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80102e6:	2301      	movs	r3, #1
 80102e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80102ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3718      	adds	r7, #24
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	24000638 	.word	0x24000638

080102f8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	68ba      	ldr	r2, [r7, #8]
 801030c:	68f9      	ldr	r1, [r7, #12]
 801030e:	4806      	ldr	r0, [pc, #24]	; (8010328 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010310:	f7f9 ff36 	bl	800a180 <HAL_SD_WriteBlocks_DMA>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d001      	beq.n	801031e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801031a:	2301      	movs	r3, #1
 801031c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801031e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	24000638 	.word	0x24000638

0801032c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010330:	4805      	ldr	r0, [pc, #20]	; (8010348 <BSP_SD_GetCardState+0x1c>)
 8010332:	f7fa fd23 	bl	800ad7c <HAL_SD_GetCardState>
 8010336:	4603      	mov	r3, r0
 8010338:	2b04      	cmp	r3, #4
 801033a:	bf14      	ite	ne
 801033c:	2301      	movne	r3, #1
 801033e:	2300      	moveq	r3, #0
 8010340:	b2db      	uxtb	r3, r3
}
 8010342:	4618      	mov	r0, r3
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	24000638 	.word	0x24000638

0801034c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010354:	6879      	ldr	r1, [r7, #4]
 8010356:	4803      	ldr	r0, [pc, #12]	; (8010364 <BSP_SD_GetCardInfo+0x18>)
 8010358:	f7fa fbd4 	bl	800ab04 <HAL_SD_GetCardInfo>
}
 801035c:	bf00      	nop
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}
 8010364:	24000638 	.word	0x24000638

08010368 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010370:	f000 f984 	bl	801067c <BSP_SD_WriteCpltCallback>
}
 8010374:	bf00      	nop
 8010376:	3708      	adds	r7, #8
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010384:	f000 f986 	bl	8010694 <BSP_SD_ReadCpltCallback>
}
 8010388:	bf00      	nop
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010396:	2301      	movs	r3, #1
 8010398:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 801039a:	79fb      	ldrb	r3, [r7, #7]
 801039c:	b2db      	uxtb	r3, r3
}
 801039e:	4618      	mov	r0, r3
 80103a0:	370c      	adds	r7, #12
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr

080103aa <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80103b2:	f7f1 fbdd 	bl	8001b70 <HAL_GetTick>
 80103b6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80103b8:	e006      	b.n	80103c8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80103ba:	f7ff ffb7 	bl	801032c <BSP_SD_GetCardState>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d101      	bne.n	80103c8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	e009      	b.n	80103dc <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80103c8:	f7f1 fbd2 	bl	8001b70 <HAL_GetTick>
 80103cc:	4602      	mov	r2, r0
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d8f0      	bhi.n	80103ba <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80103d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80103ee:	4b0b      	ldr	r3, [pc, #44]	; (801041c <SD_CheckStatus+0x38>)
 80103f0:	2201      	movs	r2, #1
 80103f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80103f4:	f7ff ff9a 	bl	801032c <BSP_SD_GetCardState>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d107      	bne.n	801040e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80103fe:	4b07      	ldr	r3, [pc, #28]	; (801041c <SD_CheckStatus+0x38>)
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	b2db      	uxtb	r3, r3
 8010404:	f023 0301 	bic.w	r3, r3, #1
 8010408:	b2da      	uxtb	r2, r3
 801040a:	4b04      	ldr	r3, [pc, #16]	; (801041c <SD_CheckStatus+0x38>)
 801040c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801040e:	4b03      	ldr	r3, [pc, #12]	; (801041c <SD_CheckStatus+0x38>)
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	b2db      	uxtb	r3, r3
}
 8010414:	4618      	mov	r0, r3
 8010416:	3708      	adds	r7, #8
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	24000011 	.word	0x24000011

08010420 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	4603      	mov	r3, r0
 8010428:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801042a:	f7ff ff25 	bl	8010278 <BSP_SD_Init>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d107      	bne.n	8010444 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010434:	79fb      	ldrb	r3, [r7, #7]
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff ffd4 	bl	80103e4 <SD_CheckStatus>
 801043c:	4603      	mov	r3, r0
 801043e:	461a      	mov	r2, r3
 8010440:	4b04      	ldr	r3, [pc, #16]	; (8010454 <SD_initialize+0x34>)
 8010442:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010444:	4b03      	ldr	r3, [pc, #12]	; (8010454 <SD_initialize+0x34>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	b2db      	uxtb	r3, r3
}
 801044a:	4618      	mov	r0, r3
 801044c:	3708      	adds	r7, #8
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	24000011 	.word	0x24000011

08010458 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	4603      	mov	r3, r0
 8010460:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010462:	79fb      	ldrb	r3, [r7, #7]
 8010464:	4618      	mov	r0, r3
 8010466:	f7ff ffbd 	bl	80103e4 <SD_CheckStatus>
 801046a:	4603      	mov	r3, r0
}
 801046c:	4618      	mov	r0, r3
 801046e:	3708      	adds	r7, #8
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b086      	sub	sp, #24
 8010478:	af00      	add	r7, sp, #0
 801047a:	60b9      	str	r1, [r7, #8]
 801047c:	607a      	str	r2, [r7, #4]
 801047e:	603b      	str	r3, [r7, #0]
 8010480:	4603      	mov	r3, r0
 8010482:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010484:	2301      	movs	r3, #1
 8010486:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010488:	f247 5030 	movw	r0, #30000	; 0x7530
 801048c:	f7ff ff8d 	bl	80103aa <SD_CheckStatusWithTimeout>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	da01      	bge.n	801049a <SD_read+0x26>
  {
    return res;
 8010496:	7dfb      	ldrb	r3, [r7, #23]
 8010498:	e03b      	b.n	8010512 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801049a:	683a      	ldr	r2, [r7, #0]
 801049c:	6879      	ldr	r1, [r7, #4]
 801049e:	68b8      	ldr	r0, [r7, #8]
 80104a0:	f7ff ff10 	bl	80102c4 <BSP_SD_ReadBlocks_DMA>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d132      	bne.n	8010510 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80104aa:	4b1c      	ldr	r3, [pc, #112]	; (801051c <SD_read+0xa8>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80104b0:	f7f1 fb5e 	bl	8001b70 <HAL_GetTick>
 80104b4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80104b6:	bf00      	nop
 80104b8:	4b18      	ldr	r3, [pc, #96]	; (801051c <SD_read+0xa8>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d108      	bne.n	80104d2 <SD_read+0x5e>
 80104c0:	f7f1 fb56 	bl	8001b70 <HAL_GetTick>
 80104c4:	4602      	mov	r2, r0
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d9f2      	bls.n	80104b8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80104d2:	4b12      	ldr	r3, [pc, #72]	; (801051c <SD_read+0xa8>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d102      	bne.n	80104e0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80104da:	2301      	movs	r3, #1
 80104dc:	75fb      	strb	r3, [r7, #23]
 80104de:	e017      	b.n	8010510 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80104e0:	4b0e      	ldr	r3, [pc, #56]	; (801051c <SD_read+0xa8>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80104e6:	f7f1 fb43 	bl	8001b70 <HAL_GetTick>
 80104ea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80104ec:	e007      	b.n	80104fe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80104ee:	f7ff ff1d 	bl	801032c <BSP_SD_GetCardState>
 80104f2:	4603      	mov	r3, r0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d102      	bne.n	80104fe <SD_read+0x8a>
          {
            res = RES_OK;
 80104f8:	2300      	movs	r3, #0
 80104fa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80104fc:	e008      	b.n	8010510 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80104fe:	f7f1 fb37 	bl	8001b70 <HAL_GetTick>
 8010502:	4602      	mov	r2, r0
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	f247 522f 	movw	r2, #29999	; 0x752f
 801050c:	4293      	cmp	r3, r2
 801050e:	d9ee      	bls.n	80104ee <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010510:	7dfb      	ldrb	r3, [r7, #23]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	2400047c 	.word	0x2400047c

08010520 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b086      	sub	sp, #24
 8010524:	af00      	add	r7, sp, #0
 8010526:	60b9      	str	r1, [r7, #8]
 8010528:	607a      	str	r2, [r7, #4]
 801052a:	603b      	str	r3, [r7, #0]
 801052c:	4603      	mov	r3, r0
 801052e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010530:	2301      	movs	r3, #1
 8010532:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010534:	4b24      	ldr	r3, [pc, #144]	; (80105c8 <SD_write+0xa8>)
 8010536:	2200      	movs	r2, #0
 8010538:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801053a:	f247 5030 	movw	r0, #30000	; 0x7530
 801053e:	f7ff ff34 	bl	80103aa <SD_CheckStatusWithTimeout>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	da01      	bge.n	801054c <SD_write+0x2c>
  {
    return res;
 8010548:	7dfb      	ldrb	r3, [r7, #23]
 801054a:	e038      	b.n	80105be <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801054c:	683a      	ldr	r2, [r7, #0]
 801054e:	6879      	ldr	r1, [r7, #4]
 8010550:	68b8      	ldr	r0, [r7, #8]
 8010552:	f7ff fed1 	bl	80102f8 <BSP_SD_WriteBlocks_DMA>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d12f      	bne.n	80105bc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801055c:	f7f1 fb08 	bl	8001b70 <HAL_GetTick>
 8010560:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010562:	bf00      	nop
 8010564:	4b18      	ldr	r3, [pc, #96]	; (80105c8 <SD_write+0xa8>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d108      	bne.n	801057e <SD_write+0x5e>
 801056c:	f7f1 fb00 	bl	8001b70 <HAL_GetTick>
 8010570:	4602      	mov	r2, r0
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	f247 522f 	movw	r2, #29999	; 0x752f
 801057a:	4293      	cmp	r3, r2
 801057c:	d9f2      	bls.n	8010564 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801057e:	4b12      	ldr	r3, [pc, #72]	; (80105c8 <SD_write+0xa8>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d102      	bne.n	801058c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	75fb      	strb	r3, [r7, #23]
 801058a:	e017      	b.n	80105bc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801058c:	4b0e      	ldr	r3, [pc, #56]	; (80105c8 <SD_write+0xa8>)
 801058e:	2200      	movs	r2, #0
 8010590:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010592:	f7f1 faed 	bl	8001b70 <HAL_GetTick>
 8010596:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010598:	e007      	b.n	80105aa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801059a:	f7ff fec7 	bl	801032c <BSP_SD_GetCardState>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d102      	bne.n	80105aa <SD_write+0x8a>
          {
            res = RES_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	75fb      	strb	r3, [r7, #23]
            break;
 80105a8:	e008      	b.n	80105bc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80105aa:	f7f1 fae1 	bl	8001b70 <HAL_GetTick>
 80105ae:	4602      	mov	r2, r0
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	1ad3      	subs	r3, r2, r3
 80105b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d9ee      	bls.n	801059a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80105bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3718      	adds	r7, #24
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	24000478 	.word	0x24000478

080105cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b08c      	sub	sp, #48	; 0x30
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	603a      	str	r2, [r7, #0]
 80105d6:	71fb      	strb	r3, [r7, #7]
 80105d8:	460b      	mov	r3, r1
 80105da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80105dc:	2301      	movs	r3, #1
 80105de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80105e2:	4b25      	ldr	r3, [pc, #148]	; (8010678 <SD_ioctl+0xac>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	f003 0301 	and.w	r3, r3, #1
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <SD_ioctl+0x28>
 80105f0:	2303      	movs	r3, #3
 80105f2:	e03c      	b.n	801066e <SD_ioctl+0xa2>

  switch (cmd)
 80105f4:	79bb      	ldrb	r3, [r7, #6]
 80105f6:	2b03      	cmp	r3, #3
 80105f8:	d834      	bhi.n	8010664 <SD_ioctl+0x98>
 80105fa:	a201      	add	r2, pc, #4	; (adr r2, 8010600 <SD_ioctl+0x34>)
 80105fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010600:	08010611 	.word	0x08010611
 8010604:	08010619 	.word	0x08010619
 8010608:	08010631 	.word	0x08010631
 801060c:	0801064b 	.word	0x0801064b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010616:	e028      	b.n	801066a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010618:	f107 0308 	add.w	r3, r7, #8
 801061c:	4618      	mov	r0, r3
 801061e:	f7ff fe95 	bl	801034c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010622:	6a3a      	ldr	r2, [r7, #32]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010628:	2300      	movs	r3, #0
 801062a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801062e:	e01c      	b.n	801066a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010630:	f107 0308 	add.w	r3, r7, #8
 8010634:	4618      	mov	r0, r3
 8010636:	f7ff fe89 	bl	801034c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801063c:	b29a      	uxth	r2, r3
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010642:	2300      	movs	r3, #0
 8010644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010648:	e00f      	b.n	801066a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801064a:	f107 0308 	add.w	r3, r7, #8
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff fe7c 	bl	801034c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	0a5a      	lsrs	r2, r3, #9
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801065c:	2300      	movs	r3, #0
 801065e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010662:	e002      	b.n	801066a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010664:	2304      	movs	r3, #4
 8010666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801066a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801066e:	4618      	mov	r0, r3
 8010670:	3730      	adds	r7, #48	; 0x30
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	bf00      	nop
 8010678:	24000011 	.word	0x24000011

0801067c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801067c:	b480      	push	{r7}
 801067e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010680:	4b03      	ldr	r3, [pc, #12]	; (8010690 <BSP_SD_WriteCpltCallback+0x14>)
 8010682:	2201      	movs	r2, #1
 8010684:	601a      	str	r2, [r3, #0]
}
 8010686:	bf00      	nop
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	24000478 	.word	0x24000478

08010694 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010694:	b480      	push	{r7}
 8010696:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010698:	4b03      	ldr	r3, [pc, #12]	; (80106a8 <BSP_SD_ReadCpltCallback+0x14>)
 801069a:	2201      	movs	r2, #1
 801069c:	601a      	str	r2, [r3, #0]
}
 801069e:	bf00      	nop
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	2400047c 	.word	0x2400047c

080106ac <FIRInit>:
#include "fir.h"

static float FIR_IMPULSE_RESPONSE[BUFFER_SIZE] = {0.0004935f,0.0007081f,-0.0007039f,-0.0007769f,0.0011041f,0.0008928f,-0.0017719f,-0.0009655f,0.0027688f,0.0008719f,-0.0041321f,-0.0004591f,0.0058687f,-0.0004541f,-0.0079513f,0.0020780f,0.0103177f,-0.0046625f,-0.0128740f,0.0085270f,0.0155003f,-0.0141365f,-0.0180593f,0.0222910f,0.0204070f,-0.0346554f,-0.0224045f,0.0555691f,0.0239290f,-0.1010953f,-0.0248846f,0.3166146f,0.5252101f,0.3166146f,-0.0248846f,-0.1010953f,0.0239290f,0.0555691f,-0.0224045f,-0.0346554f,0.0204070f,0.0222910f,-0.0180593f,-0.0141365f,0.0155003f,0.0085270f,-0.0128740f,-0.0046625f,0.0103177f,0.0020780f,-0.0079513f,-0.0004541f,0.0058687f,-0.0004591f,-0.0041321f,0.0008719f,0.0027688f,-0.0009655f,-0.0017719f,0.0008928f,0.0011041f,-0.0007769f,-0.0007039f,0.0007081f};
void FIRInit(FIRFilter* fir)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b085      	sub	sp, #20
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]

  // Setup the Buffer Array and initialise with zero
  for(uint8_t n = 0; n < BUFFER_SIZE; n++)
 80106b4:	2300      	movs	r3, #0
 80106b6:	73fb      	strb	r3, [r7, #15]
 80106b8:	e009      	b.n	80106ce <FIRInit+0x22>
  {
    fir->buf[n] = 0.0f;
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	009b      	lsls	r3, r3, #2
 80106c0:	4413      	add	r3, r2
 80106c2:	f04f 0200 	mov.w	r2, #0
 80106c6:	601a      	str	r2, [r3, #0]
  for(uint8_t n = 0; n < BUFFER_SIZE; n++)
 80106c8:	7bfb      	ldrb	r3, [r7, #15]
 80106ca:	3301      	adds	r3, #1
 80106cc:	73fb      	strb	r3, [r7, #15]
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	2b3f      	cmp	r3, #63	; 0x3f
 80106d2:	d9f2      	bls.n	80106ba <FIRInit+0xe>
  }

  // reset Buffer Index
  fir->buffer_index = 0;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  // clear filter output
  fir->output = 0.0;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f04f 0200 	mov.w	r2, #0
 80106e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

}
 80106e6:	bf00      	nop
 80106e8:	3714      	adds	r7, #20
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
	...

080106f4 <FIRUpdate>:


float FIRUpdate(FIRFilter *fir, float input)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	ed87 0a00 	vstr	s0, [r7]
 // Store latest sample in buffer   // buffer.put(&rb, input);
  fir->buf[fir->buffer_index] = input;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	4413      	add	r3, r2
 801070c:	683a      	ldr	r2, [r7, #0]
 801070e:	601a      	str	r2, [r3, #0]

  // Increment buffer
  fir->buffer_index++;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8010716:	3301      	adds	r3, #1
 8010718:	b2da      	uxtb	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

  if(fir->buffer_index == BUFFER_SIZE)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8010726:	2b40      	cmp	r3, #64	; 0x40
 8010728:	d103      	bne.n	8010732 <FIRUpdate+0x3e>
  {
    fir->buffer_index = 0;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2200      	movs	r2, #0
 801072e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }

  // CMOpute new output via convolution
  fir->output = 0.0;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f04f 0200 	mov.w	r2, #0
 8010738:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  uint8_t sum_index = fir->buffer_index;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8010742:	73fb      	strb	r3, [r7, #15]

  for(uint8_t n = 0; n < BUFFER_SIZE; n++)
 8010744:	2300      	movs	r3, #0
 8010746:	73bb      	strb	r3, [r7, #14]
 8010748:	e021      	b.n	801078e <FIRUpdate+0x9a>
  {
     // check index and decrement index
    if(sum_index > 0)
 801074a:	7bfb      	ldrb	r3, [r7, #15]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d003      	beq.n	8010758 <FIRUpdate+0x64>
    {
      sum_index--;
 8010750:	7bfb      	ldrb	r3, [r7, #15]
 8010752:	3b01      	subs	r3, #1
 8010754:	73fb      	strb	r3, [r7, #15]
 8010756:	e001      	b.n	801075c <FIRUpdate+0x68>
    }

    else
    {
      sum_index =BUFFER_SIZE - 1;
 8010758:	233f      	movs	r3, #63	; 0x3f
 801075a:	73fb      	strb	r3, [r7, #15]
    }

    // Multiply impulse response with shifted impulse sample and add to output.
    fir->output += FIR_IMPULSE_RESPONSE[n] * fir->buf[sum_index];
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	ed93 7a41 	vldr	s14, [r3, #260]	; 0x104
 8010762:	7bbb      	ldrb	r3, [r7, #14]
 8010764:	4a11      	ldr	r2, [pc, #68]	; (80107ac <FIRUpdate+0xb8>)
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	4413      	add	r3, r2
 801076a:	edd3 6a00 	vldr	s13, [r3]
 801076e:	7bfb      	ldrb	r3, [r7, #15]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	4413      	add	r3, r2
 8010776:	edd3 7a00 	vldr	s15, [r3]
 801077a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801077e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104
  for(uint8_t n = 0; n < BUFFER_SIZE; n++)
 8010788:	7bbb      	ldrb	r3, [r7, #14]
 801078a:	3301      	adds	r3, #1
 801078c:	73bb      	strb	r3, [r7, #14]
 801078e:	7bbb      	ldrb	r3, [r7, #14]
 8010790:	2b3f      	cmp	r3, #63	; 0x3f
 8010792:	d9da      	bls.n	801074a <FIRUpdate+0x56>

  }

  return fir->output;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801079a:	ee07 3a90 	vmov	s15, r3

}
 801079e:	eeb0 0a67 	vmov.f32	s0, s15
 80107a2:	3714      	adds	r7, #20
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	24000014 	.word	0x24000014

080107b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	460b      	mov	r3, r1
 80107ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80107bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80107c0:	f002 fa1a 	bl	8012bf8 <malloc>
 80107c4:	4603      	mov	r3, r0
 80107c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d105      	bne.n	80107da <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2200      	movs	r2, #0
 80107d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80107d6:	2302      	movs	r3, #2
 80107d8:	e066      	b.n	80108a8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7c1b      	ldrb	r3, [r3, #16]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d119      	bne.n	801081e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80107ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107ee:	2202      	movs	r2, #2
 80107f0:	2181      	movs	r1, #129	; 0x81
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f002 f887 	bl	8012906 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2201      	movs	r2, #1
 80107fc:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80107fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010802:	2202      	movs	r2, #2
 8010804:	2101      	movs	r1, #1
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f002 f87d 	bl	8012906 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2201      	movs	r2, #1
 8010810:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2210      	movs	r2, #16
 8010818:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801081c:	e016      	b.n	801084c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801081e:	2340      	movs	r3, #64	; 0x40
 8010820:	2202      	movs	r2, #2
 8010822:	2181      	movs	r1, #129	; 0x81
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f002 f86e 	bl	8012906 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010830:	2340      	movs	r3, #64	; 0x40
 8010832:	2202      	movs	r2, #2
 8010834:	2101      	movs	r1, #1
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f002 f865 	bl	8012906 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2201      	movs	r2, #1
 8010840:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2210      	movs	r2, #16
 8010848:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801084c:	2308      	movs	r3, #8
 801084e:	2203      	movs	r2, #3
 8010850:	2182      	movs	r1, #130	; 0x82
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f002 f857 	bl	8012906 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2201      	movs	r2, #1
 801085c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2200      	movs	r2, #0
 8010876:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	7c1b      	ldrb	r3, [r3, #16]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d109      	bne.n	8010896 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010888:	f44f 7300 	mov.w	r3, #512	; 0x200
 801088c:	2101      	movs	r1, #1
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f002 f928 	bl	8012ae4 <USBD_LL_PrepareReceive>
 8010894:	e007      	b.n	80108a6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801089c:	2340      	movs	r3, #64	; 0x40
 801089e:	2101      	movs	r1, #1
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f002 f91f 	bl	8012ae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	460b      	mov	r3, r1
 80108ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80108bc:	2300      	movs	r3, #0
 80108be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80108c0:	2181      	movs	r1, #129	; 0x81
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f002 f845 	bl	8012952 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80108ce:	2101      	movs	r1, #1
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f002 f83e 	bl	8012952 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80108de:	2182      	movs	r1, #130	; 0x82
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f002 f836 	bl	8012952 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2200      	movs	r2, #0
 80108f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00e      	beq.n	801091e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010910:	4618      	mov	r0, r3
 8010912:	f002 f979 	bl	8012c08 <free>
    pdev->pClassData = NULL;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	2200      	movs	r2, #0
 801091a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 801091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010920:	4618      	mov	r0, r3
 8010922:	3710      	adds	r7, #16
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010938:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801093a:	2300      	movs	r3, #0
 801093c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801093e:	2300      	movs	r3, #0
 8010940:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801094e:	2b00      	cmp	r3, #0
 8010950:	d03a      	beq.n	80109c8 <USBD_CDC_Setup+0xa0>
 8010952:	2b20      	cmp	r3, #32
 8010954:	f040 809a 	bne.w	8010a8c <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	88db      	ldrh	r3, [r3, #6]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d029      	beq.n	80109b4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	b25b      	sxtb	r3, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	da11      	bge.n	801098e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010970:	689b      	ldr	r3, [r3, #8]
 8010972:	683a      	ldr	r2, [r7, #0]
 8010974:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8010976:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010978:	683a      	ldr	r2, [r7, #0]
 801097a:	88d2      	ldrh	r2, [r2, #6]
 801097c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801097e:	6939      	ldr	r1, [r7, #16]
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	88db      	ldrh	r3, [r3, #6]
 8010984:	461a      	mov	r2, r3
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f001 fabf 	bl	8011f0a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 801098c:	e085      	b.n	8010a9a <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	785a      	ldrb	r2, [r3, #1]
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	88db      	ldrh	r3, [r3, #6]
 801099c:	b2da      	uxtb	r2, r3
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80109a4:	6939      	ldr	r1, [r7, #16]
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	88db      	ldrh	r3, [r3, #6]
 80109aa:	461a      	mov	r2, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f001 fad8 	bl	8011f62 <USBD_CtlPrepareRx>
    break;
 80109b2:	e072      	b.n	8010a9a <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	7850      	ldrb	r0, [r2, #1]
 80109c0:	2200      	movs	r2, #0
 80109c2:	6839      	ldr	r1, [r7, #0]
 80109c4:	4798      	blx	r3
    break;
 80109c6:	e068      	b.n	8010a9a <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	785b      	ldrb	r3, [r3, #1]
 80109cc:	2b0b      	cmp	r3, #11
 80109ce:	d852      	bhi.n	8010a76 <USBD_CDC_Setup+0x14e>
 80109d0:	a201      	add	r2, pc, #4	; (adr r2, 80109d8 <USBD_CDC_Setup+0xb0>)
 80109d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109d6:	bf00      	nop
 80109d8:	08010a09 	.word	0x08010a09
 80109dc:	08010a85 	.word	0x08010a85
 80109e0:	08010a77 	.word	0x08010a77
 80109e4:	08010a77 	.word	0x08010a77
 80109e8:	08010a77 	.word	0x08010a77
 80109ec:	08010a77 	.word	0x08010a77
 80109f0:	08010a77 	.word	0x08010a77
 80109f4:	08010a77 	.word	0x08010a77
 80109f8:	08010a77 	.word	0x08010a77
 80109fc:	08010a77 	.word	0x08010a77
 8010a00:	08010a33 	.word	0x08010a33
 8010a04:	08010a5d 	.word	0x08010a5d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	2b03      	cmp	r3, #3
 8010a12:	d107      	bne.n	8010a24 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010a14:	f107 030c 	add.w	r3, r7, #12
 8010a18:	2202      	movs	r2, #2
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f001 fa74 	bl	8011f0a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010a22:	e032      	b.n	8010a8a <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f001 f9fe 	bl	8011e28 <USBD_CtlError>
        ret = USBD_FAIL;
 8010a2c:	2303      	movs	r3, #3
 8010a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8010a30:	e02b      	b.n	8010a8a <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	2b03      	cmp	r3, #3
 8010a3c:	d107      	bne.n	8010a4e <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010a3e:	f107 030f 	add.w	r3, r7, #15
 8010a42:	2201      	movs	r2, #1
 8010a44:	4619      	mov	r1, r3
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f001 fa5f 	bl	8011f0a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010a4c:	e01d      	b.n	8010a8a <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8010a4e:	6839      	ldr	r1, [r7, #0]
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f001 f9e9 	bl	8011e28 <USBD_CtlError>
        ret = USBD_FAIL;
 8010a56:	2303      	movs	r3, #3
 8010a58:	75fb      	strb	r3, [r7, #23]
      break;
 8010a5a:	e016      	b.n	8010a8a <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	d00f      	beq.n	8010a88 <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 8010a68:	6839      	ldr	r1, [r7, #0]
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f001 f9dc 	bl	8011e28 <USBD_CtlError>
        ret = USBD_FAIL;
 8010a70:	2303      	movs	r3, #3
 8010a72:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010a74:	e008      	b.n	8010a88 <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f001 f9d5 	bl	8011e28 <USBD_CtlError>
      ret = USBD_FAIL;
 8010a7e:	2303      	movs	r3, #3
 8010a80:	75fb      	strb	r3, [r7, #23]
      break;
 8010a82:	e002      	b.n	8010a8a <USBD_CDC_Setup+0x162>
      break;
 8010a84:	bf00      	nop
 8010a86:	e008      	b.n	8010a9a <USBD_CDC_Setup+0x172>
      break;
 8010a88:	bf00      	nop
    }
    break;
 8010a8a:	e006      	b.n	8010a9a <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f001 f9ca 	bl	8011e28 <USBD_CtlError>
    ret = USBD_FAIL;
 8010a94:	2303      	movs	r3, #3
 8010a96:	75fb      	strb	r3, [r7, #23]
    break;
 8010a98:	bf00      	nop
  }

  return (uint8_t)ret;
 8010a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3718      	adds	r7, #24
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	460b      	mov	r3, r1
 8010aae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ab6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d101      	bne.n	8010ac6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010ac2:	2303      	movs	r3, #3
 8010ac4:	e049      	b.n	8010b5a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010acc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010ace:	78fa      	ldrb	r2, [r7, #3]
 8010ad0:	6879      	ldr	r1, [r7, #4]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	4413      	add	r3, r2
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	440b      	add	r3, r1
 8010adc:	3318      	adds	r3, #24
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d029      	beq.n	8010b38 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010ae4:	78fa      	ldrb	r2, [r7, #3]
 8010ae6:	6879      	ldr	r1, [r7, #4]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	440b      	add	r3, r1
 8010af2:	3318      	adds	r3, #24
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	78f9      	ldrb	r1, [r7, #3]
 8010af8:	68f8      	ldr	r0, [r7, #12]
 8010afa:	460b      	mov	r3, r1
 8010afc:	00db      	lsls	r3, r3, #3
 8010afe:	1a5b      	subs	r3, r3, r1
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	4403      	add	r3, r0
 8010b04:	3344      	adds	r3, #68	; 0x44
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	fbb2 f1f3 	udiv	r1, r2, r3
 8010b0c:	fb03 f301 	mul.w	r3, r3, r1
 8010b10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d110      	bne.n	8010b38 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010b16:	78fa      	ldrb	r2, [r7, #3]
 8010b18:	6879      	ldr	r1, [r7, #4]
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	4413      	add	r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	440b      	add	r3, r1
 8010b24:	3318      	adds	r3, #24
 8010b26:	2200      	movs	r2, #0
 8010b28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010b2a:	78f9      	ldrb	r1, [r7, #3]
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	2200      	movs	r2, #0
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f001 ffb6 	bl	8012aa2 <USBD_LL_Transmit>
 8010b36:	e00f      	b.n	8010b58 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b46:	691b      	ldr	r3, [r3, #16]
 8010b48:	68ba      	ldr	r2, [r7, #8]
 8010b4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010b4e:	68ba      	ldr	r2, [r7, #8]
 8010b50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010b54:	78fa      	ldrb	r2, [r7, #3]
 8010b56:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010b58:	2300      	movs	r3, #0
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b084      	sub	sp, #16
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
 8010b6a:	460b      	mov	r3, r1
 8010b6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b80:	2303      	movs	r3, #3
 8010b82:	e015      	b.n	8010bb0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010b84:	78fb      	ldrb	r3, [r7, #3]
 8010b86:	4619      	mov	r1, r3
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f001 ffcc 	bl	8012b26 <USBD_LL_GetRxDataSize>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010baa:	4611      	mov	r1, r2
 8010bac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010bae:	2300      	movs	r3, #0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}

08010bb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bc6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d015      	beq.n	8010bfe <USBD_CDC_EP0_RxReady+0x46>
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010bd8:	2bff      	cmp	r3, #255	; 0xff
 8010bda:	d010      	beq.n	8010bfe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8010bea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010bf2:	b292      	uxth	r2, r2
 8010bf4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	22ff      	movs	r2, #255	; 0xff
 8010bfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2243      	movs	r2, #67	; 0x43
 8010c14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010c16:	4b03      	ldr	r3, [pc, #12]	; (8010c24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	370c      	adds	r7, #12
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr
 8010c24:	2400019c 	.word	0x2400019c

08010c28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2243      	movs	r2, #67	; 0x43
 8010c34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010c36:	4b03      	ldr	r3, [pc, #12]	; (8010c44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr
 8010c44:	24000158 	.word	0x24000158

08010c48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2243      	movs	r2, #67	; 0x43
 8010c54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010c56:	4b03      	ldr	r3, [pc, #12]	; (8010c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	370c      	adds	r7, #12
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr
 8010c64:	240001e0 	.word	0x240001e0

08010c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	220a      	movs	r2, #10
 8010c74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010c76:	4b03      	ldr	r3, [pc, #12]	; (8010c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr
 8010c84:	24000114 	.word	0x24000114

08010c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d101      	bne.n	8010c9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010c98:	2303      	movs	r3, #3
 8010c9a:	e004      	b.n	8010ca6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010ca4:	2300      	movs	r3, #0
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	370c      	adds	r7, #12
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr

08010cb2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010cb2:	b480      	push	{r7}
 8010cb4:	b087      	sub	sp, #28
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	60f8      	str	r0, [r7, #12]
 8010cba:	60b9      	str	r1, [r7, #8]
 8010cbc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cc4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	68ba      	ldr	r2, [r7, #8]
 8010cca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	371c      	adds	r7, #28
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cf4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	683a      	ldr	r2, [r7, #0]
 8010cfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3714      	adds	r7, #20
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d1a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d101      	bne.n	8010d2e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	e01a      	b.n	8010d64 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d114      	bne.n	8010d62 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010d56:	2181      	movs	r1, #129	; 0x81
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f001 fea2 	bl	8012aa2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d101      	bne.n	8010d8a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010d86:	2303      	movs	r3, #3
 8010d88:	e016      	b.n	8010db8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	7c1b      	ldrb	r3, [r3, #16]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d109      	bne.n	8010da6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f001 fea0 	bl	8012ae4 <USBD_LL_PrepareReceive>
 8010da4:	e007      	b.n	8010db6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010dac:	2340      	movs	r3, #64	; 0x40
 8010dae:	2101      	movs	r1, #1
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f001 fe97 	bl	8012ae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3710      	adds	r7, #16
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b086      	sub	sp, #24
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	4613      	mov	r3, r2
 8010dcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d101      	bne.n	8010dd8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010dd4:	2303      	movs	r3, #3
 8010dd6:	e025      	b.n	8010e24 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d003      	beq.n	8010dea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d003      	beq.n	8010dfc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2200      	movs	r2, #0
 8010df8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d003      	beq.n	8010e0a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	68ba      	ldr	r2, [r7, #8]
 8010e06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	79fa      	ldrb	r2, [r7, #7]
 8010e16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f001 fd09 	bl	8012830 <USBD_LL_Init>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3718      	adds	r7, #24
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e36:	2300      	movs	r3, #0
 8010e38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010e40:	2303      	movs	r3, #3
 8010e42:	e010      	b.n	8010e66 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	683a      	ldr	r2, [r7, #0]
 8010e48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e54:	f107 020e 	add.w	r2, r7, #14
 8010e58:	4610      	mov	r0, r2
 8010e5a:	4798      	blx	r3
 8010e5c:	4602      	mov	r2, r0
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010e64:	2300      	movs	r3, #0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}

08010e6e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b082      	sub	sp, #8
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f001 fd2a 	bl	80128d0 <USBD_LL_Start>
 8010e7c:	4603      	mov	r3, r0
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010e86:	b480      	push	{r7}
 8010e88:	b083      	sub	sp, #12
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e8e:	2300      	movs	r3, #0
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	370c      	adds	r7, #12
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr

08010e9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010ea8:	2303      	movs	r3, #3
 8010eaa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d009      	beq.n	8010eca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	78fa      	ldrb	r2, [r7, #3]
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	4798      	blx	r3
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	460b      	mov	r3, r1
 8010ede:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d007      	beq.n	8010efa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	78fa      	ldrb	r2, [r7, #3]
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	4798      	blx	r3
  }

  return USBD_OK;
 8010efa:	2300      	movs	r3, #0
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f14:	6839      	ldr	r1, [r7, #0]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f000 ff4c 	bl	8011db4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010f38:	f003 031f 	and.w	r3, r3, #31
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d01a      	beq.n	8010f76 <USBD_LL_SetupStage+0x72>
 8010f40:	2b02      	cmp	r3, #2
 8010f42:	d822      	bhi.n	8010f8a <USBD_LL_SetupStage+0x86>
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d002      	beq.n	8010f4e <USBD_LL_SetupStage+0x4a>
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d00a      	beq.n	8010f62 <USBD_LL_SetupStage+0x5e>
 8010f4c:	e01d      	b.n	8010f8a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f54:	4619      	mov	r1, r3
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fa20 	bl	801139c <USBD_StdDevReq>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8010f60:	e020      	b.n	8010fa4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f68:	4619      	mov	r1, r3
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f000 fa84 	bl	8011478 <USBD_StdItfReq>
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]
      break;
 8010f74:	e016      	b.n	8010fa4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010f7c:	4619      	mov	r1, r3
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 fac3 	bl	801150a <USBD_StdEPReq>
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]
      break;
 8010f88:	e00c      	b.n	8010fa4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010f90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	4619      	mov	r1, r3
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f001 fcf9 	bl	8012990 <USBD_LL_StallEP>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8010fa2:	bf00      	nop
  }

  return ret;
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3710      	adds	r7, #16
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b086      	sub	sp, #24
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	60f8      	str	r0, [r7, #12]
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	607a      	str	r2, [r7, #4]
 8010fba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010fbc:	7afb      	ldrb	r3, [r7, #11]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d138      	bne.n	8011034 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010fc8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010fd0:	2b03      	cmp	r3, #3
 8010fd2:	d14c      	bne.n	801106e <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010fd4:	693b      	ldr	r3, [r7, #16]
 8010fd6:	689a      	ldr	r2, [r3, #8]
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d913      	bls.n	8011008 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	689a      	ldr	r2, [r3, #8]
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	1ad2      	subs	r2, r2, r3
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	68da      	ldr	r2, [r3, #12]
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	689b      	ldr	r3, [r3, #8]
 8010ff6:	4293      	cmp	r3, r2
 8010ff8:	bf28      	it	cs
 8010ffa:	4613      	movcs	r3, r2
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	6879      	ldr	r1, [r7, #4]
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f000 ffcb 	bl	8011f9c <USBD_CtlContinueRx>
 8011006:	e032      	b.n	801106e <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00b      	beq.n	801102c <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801101a:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801101c:	2b03      	cmp	r3, #3
 801101e:	d105      	bne.n	801102c <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 801102c:	68f8      	ldr	r0, [r7, #12]
 801102e:	f000 ffc6 	bl	8011fbe <USBD_CtlSendStatus>
 8011032:	e01c      	b.n	801106e <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801103a:	699b      	ldr	r3, [r3, #24]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d014      	beq.n	801106a <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011046:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 8011048:	2b03      	cmp	r3, #3
 801104a:	d10e      	bne.n	801106a <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011052:	699b      	ldr	r3, [r3, #24]
 8011054:	7afa      	ldrb	r2, [r7, #11]
 8011056:	4611      	mov	r1, r2
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	4798      	blx	r3
 801105c:	4603      	mov	r3, r0
 801105e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011060:	7dfb      	ldrb	r3, [r7, #23]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d003      	beq.n	801106e <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 8011066:	7dfb      	ldrb	r3, [r7, #23]
 8011068:	e002      	b.n	8011070 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801106a:	2303      	movs	r3, #3
 801106c:	e000      	b.n	8011070 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 801106e:	2300      	movs	r3, #0
}
 8011070:	4618      	mov	r0, r3
 8011072:	3718      	adds	r7, #24
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b086      	sub	sp, #24
 801107c:	af00      	add	r7, sp, #0
 801107e:	60f8      	str	r0, [r7, #12]
 8011080:	460b      	mov	r3, r1
 8011082:	607a      	str	r2, [r7, #4]
 8011084:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011086:	7afb      	ldrb	r3, [r7, #11]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d16b      	bne.n	8011164 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	3314      	adds	r3, #20
 8011090:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011098:	2b02      	cmp	r3, #2
 801109a:	d156      	bne.n	801114a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	689a      	ldr	r2, [r3, #8]
 80110a0:	693b      	ldr	r3, [r7, #16]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d914      	bls.n	80110d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	689a      	ldr	r2, [r3, #8]
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	1ad2      	subs	r2, r2, r3
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	689b      	ldr	r3, [r3, #8]
 80110ba:	461a      	mov	r2, r3
 80110bc:	6879      	ldr	r1, [r7, #4]
 80110be:	68f8      	ldr	r0, [r7, #12]
 80110c0:	f000 ff3e 	bl	8011f40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80110c4:	2300      	movs	r3, #0
 80110c6:	2200      	movs	r2, #0
 80110c8:	2100      	movs	r1, #0
 80110ca:	68f8      	ldr	r0, [r7, #12]
 80110cc:	f001 fd0a 	bl	8012ae4 <USBD_LL_PrepareReceive>
 80110d0:	e03b      	b.n	801114a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	68da      	ldr	r2, [r3, #12]
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	689b      	ldr	r3, [r3, #8]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d11c      	bne.n	8011118 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	685a      	ldr	r2, [r3, #4]
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d316      	bcc.n	8011118 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80110ea:	693b      	ldr	r3, [r7, #16]
 80110ec:	685a      	ldr	r2, [r3, #4]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d20f      	bcs.n	8011118 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80110f8:	2200      	movs	r2, #0
 80110fa:	2100      	movs	r1, #0
 80110fc:	68f8      	ldr	r0, [r7, #12]
 80110fe:	f000 ff1f 	bl	8011f40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2200      	movs	r2, #0
 8011106:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801110a:	2300      	movs	r3, #0
 801110c:	2200      	movs	r2, #0
 801110e:	2100      	movs	r1, #0
 8011110:	68f8      	ldr	r0, [r7, #12]
 8011112:	f001 fce7 	bl	8012ae4 <USBD_LL_PrepareReceive>
 8011116:	e018      	b.n	801114a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d00b      	beq.n	801113c <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801112a:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801112c:	2b03      	cmp	r3, #3
 801112e:	d105      	bne.n	801113c <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	68f8      	ldr	r0, [r7, #12]
 801113a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801113c:	2180      	movs	r1, #128	; 0x80
 801113e:	68f8      	ldr	r0, [r7, #12]
 8011140:	f001 fc26 	bl	8012990 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011144:	68f8      	ldr	r0, [r7, #12]
 8011146:	f000 ff4d 	bl	8011fe4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011150:	2b01      	cmp	r3, #1
 8011152:	d124      	bne.n	801119e <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 8011154:	68f8      	ldr	r0, [r7, #12]
 8011156:	f7ff fe96 	bl	8010e86 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2200      	movs	r2, #0
 801115e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011162:	e01c      	b.n	801119e <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801116a:	695b      	ldr	r3, [r3, #20]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d014      	beq.n	801119a <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011176:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 8011178:	2b03      	cmp	r3, #3
 801117a:	d10e      	bne.n	801119a <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	7afa      	ldrb	r2, [r7, #11]
 8011186:	4611      	mov	r1, r2
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	4798      	blx	r3
 801118c:	4603      	mov	r3, r0
 801118e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011190:	7dfb      	ldrb	r3, [r7, #23]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d003      	beq.n	801119e <USBD_LL_DataInStage+0x126>
    {
      return ret;
 8011196:	7dfb      	ldrb	r3, [r7, #23]
 8011198:	e002      	b.n	80111a0 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801119a:	2303      	movs	r3, #3
 801119c:	e000      	b.n	80111a0 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 801119e:	2300      	movs	r3, #0
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3718      	adds	r7, #24
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b082      	sub	sp, #8
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2201      	movs	r2, #1
 80111b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2200      	movs	r2, #0
 80111c4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2200      	movs	r2, #0
 80111ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d009      	beq.n	80111ec <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	6852      	ldr	r2, [r2, #4]
 80111e4:	b2d2      	uxtb	r2, r2
 80111e6:	4611      	mov	r1, r2
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80111ec:	2340      	movs	r3, #64	; 0x40
 80111ee:	2200      	movs	r2, #0
 80111f0:	2100      	movs	r1, #0
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f001 fb87 	bl	8012906 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2201      	movs	r2, #1
 80111fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2240      	movs	r2, #64	; 0x40
 8011204:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011208:	2340      	movs	r3, #64	; 0x40
 801120a:	2200      	movs	r2, #0
 801120c:	2180      	movs	r1, #128	; 0x80
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f001 fb79 	bl	8012906 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2201      	movs	r2, #1
 8011218:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2240      	movs	r2, #64	; 0x40
 801121e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011220:	2300      	movs	r3, #0
}
 8011222:	4618      	mov	r0, r3
 8011224:	3708      	adds	r7, #8
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}

0801122a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801122a:	b480      	push	{r7}
 801122c:	b083      	sub	sp, #12
 801122e:	af00      	add	r7, sp, #0
 8011230:	6078      	str	r0, [r7, #4]
 8011232:	460b      	mov	r3, r1
 8011234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	78fa      	ldrb	r2, [r7, #3]
 801123a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801123c:	2300      	movs	r3, #0
}
 801123e:	4618      	mov	r0, r3
 8011240:	370c      	adds	r7, #12
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr

0801124a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801124a:	b480      	push	{r7}
 801124c:	b083      	sub	sp, #12
 801124e:	af00      	add	r7, sp, #0
 8011250:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011258:	b2da      	uxtb	r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2204      	movs	r2, #4
 8011264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	370c      	adds	r7, #12
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011276:	b480      	push	{r7}
 8011278:	b083      	sub	sp, #12
 801127a:	af00      	add	r7, sp, #0
 801127c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011284:	b2db      	uxtb	r3, r3
 8011286:	2b04      	cmp	r3, #4
 8011288:	d106      	bne.n	8011298 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011290:	b2da      	uxtb	r2, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011298:	2300      	movs	r3, #0
}
 801129a:	4618      	mov	r0, r3
 801129c:	370c      	adds	r7, #12
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr

080112a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b082      	sub	sp, #8
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112b4:	b2db      	uxtb	r3, r3
 80112b6:	2b03      	cmp	r3, #3
 80112b8:	d10b      	bne.n	80112d2 <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112c0:	69db      	ldr	r3, [r3, #28]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d005      	beq.n	80112d2 <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80112cc:	69db      	ldr	r3, [r3, #28]
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80112d2:	2300      	movs	r3, #0
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80112dc:	b480      	push	{r7}
 80112de:	b083      	sub	sp, #12
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	460b      	mov	r3, r1
 80112e6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80112e8:	2300      	movs	r3, #0
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	370c      	adds	r7, #12
 80112ee:	46bd      	mov	sp, r7
 80112f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f4:	4770      	bx	lr

080112f6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80112f6:	b480      	push	{r7}
 80112f8:	b083      	sub	sp, #12
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
 80112fe:	460b      	mov	r3, r1
 8011300:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011302:	2300      	movs	r3, #0
}
 8011304:	4618      	mov	r0, r3
 8011306:	370c      	adds	r7, #12
 8011308:	46bd      	mov	sp, r7
 801130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130e:	4770      	bx	lr

08011310 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011318:	2300      	movs	r3, #0
}
 801131a:	4618      	mov	r0, r3
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr

08011326 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b082      	sub	sp, #8
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2201      	movs	r2, #1
 8011332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801133c:	2b00      	cmp	r3, #0
 801133e:	d009      	beq.n	8011354 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	6852      	ldr	r2, [r2, #4]
 801134c:	b2d2      	uxtb	r2, r2
 801134e:	4611      	mov	r1, r2
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	4798      	blx	r3
  }

  return USBD_OK;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801135e:	b480      	push	{r7}
 8011360:	b087      	sub	sp, #28
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	3301      	adds	r3, #1
 8011374:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801137c:	8a3b      	ldrh	r3, [r7, #16]
 801137e:	021b      	lsls	r3, r3, #8
 8011380:	b21a      	sxth	r2, r3
 8011382:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011386:	4313      	orrs	r3, r2
 8011388:	b21b      	sxth	r3, r3
 801138a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801138c:	89fb      	ldrh	r3, [r7, #14]
}
 801138e:	4618      	mov	r0, r3
 8011390:	371c      	adds	r7, #28
 8011392:	46bd      	mov	sp, r7
 8011394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011398:	4770      	bx	lr
	...

0801139c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80113b2:	2b40      	cmp	r3, #64	; 0x40
 80113b4:	d005      	beq.n	80113c2 <USBD_StdDevReq+0x26>
 80113b6:	2b40      	cmp	r3, #64	; 0x40
 80113b8:	d853      	bhi.n	8011462 <USBD_StdDevReq+0xc6>
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d00b      	beq.n	80113d6 <USBD_StdDevReq+0x3a>
 80113be:	2b20      	cmp	r3, #32
 80113c0:	d14f      	bne.n	8011462 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113c8:	689b      	ldr	r3, [r3, #8]
 80113ca:	6839      	ldr	r1, [r7, #0]
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	4798      	blx	r3
 80113d0:	4603      	mov	r3, r0
 80113d2:	73fb      	strb	r3, [r7, #15]
    break;
 80113d4:	e04a      	b.n	801146c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	785b      	ldrb	r3, [r3, #1]
 80113da:	2b09      	cmp	r3, #9
 80113dc:	d83b      	bhi.n	8011456 <USBD_StdDevReq+0xba>
 80113de:	a201      	add	r2, pc, #4	; (adr r2, 80113e4 <USBD_StdDevReq+0x48>)
 80113e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e4:	08011439 	.word	0x08011439
 80113e8:	0801144d 	.word	0x0801144d
 80113ec:	08011457 	.word	0x08011457
 80113f0:	08011443 	.word	0x08011443
 80113f4:	08011457 	.word	0x08011457
 80113f8:	08011417 	.word	0x08011417
 80113fc:	0801140d 	.word	0x0801140d
 8011400:	08011457 	.word	0x08011457
 8011404:	0801142f 	.word	0x0801142f
 8011408:	08011421 	.word	0x08011421
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801140c:	6839      	ldr	r1, [r7, #0]
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 f9dc 	bl	80117cc <USBD_GetDescriptor>
      break;
 8011414:	e024      	b.n	8011460 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011416:	6839      	ldr	r1, [r7, #0]
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 fb41 	bl	8011aa0 <USBD_SetAddress>
      break;
 801141e:	e01f      	b.n	8011460 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011420:	6839      	ldr	r1, [r7, #0]
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 fb80 	bl	8011b28 <USBD_SetConfig>
 8011428:	4603      	mov	r3, r0
 801142a:	73fb      	strb	r3, [r7, #15]
      break;
 801142c:	e018      	b.n	8011460 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f000 fc1f 	bl	8011c74 <USBD_GetConfig>
      break;
 8011436:	e013      	b.n	8011460 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011438:	6839      	ldr	r1, [r7, #0]
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 fc50 	bl	8011ce0 <USBD_GetStatus>
      break;
 8011440:	e00e      	b.n	8011460 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011442:	6839      	ldr	r1, [r7, #0]
 8011444:	6878      	ldr	r0, [r7, #4]
 8011446:	f000 fc7f 	bl	8011d48 <USBD_SetFeature>
      break;
 801144a:	e009      	b.n	8011460 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801144c:	6839      	ldr	r1, [r7, #0]
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 fc8e 	bl	8011d70 <USBD_ClrFeature>
      break;
 8011454:	e004      	b.n	8011460 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011456:	6839      	ldr	r1, [r7, #0]
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f000 fce5 	bl	8011e28 <USBD_CtlError>
      break;
 801145e:	bf00      	nop
    }
    break;
 8011460:	e004      	b.n	801146c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011462:	6839      	ldr	r1, [r7, #0]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 fcdf 	bl	8011e28 <USBD_CtlError>
    break;
 801146a:	bf00      	nop
  }

  return ret;
 801146c:	7bfb      	ldrb	r3, [r7, #15]
}
 801146e:	4618      	mov	r0, r3
 8011470:	3710      	adds	r7, #16
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop

08011478 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b084      	sub	sp, #16
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011482:	2300      	movs	r3, #0
 8011484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801148e:	2b40      	cmp	r3, #64	; 0x40
 8011490:	d005      	beq.n	801149e <USBD_StdItfReq+0x26>
 8011492:	2b40      	cmp	r3, #64	; 0x40
 8011494:	d82f      	bhi.n	80114f6 <USBD_StdItfReq+0x7e>
 8011496:	2b00      	cmp	r3, #0
 8011498:	d001      	beq.n	801149e <USBD_StdItfReq+0x26>
 801149a:	2b20      	cmp	r3, #32
 801149c:	d12b      	bne.n	80114f6 <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	3b01      	subs	r3, #1
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	d81d      	bhi.n	80114e8 <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	889b      	ldrh	r3, [r3, #4]
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d813      	bhi.n	80114de <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114bc:	689b      	ldr	r3, [r3, #8]
 80114be:	6839      	ldr	r1, [r7, #0]
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	4798      	blx	r3
 80114c4:	4603      	mov	r3, r0
 80114c6:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	88db      	ldrh	r3, [r3, #6]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d110      	bne.n	80114f2 <USBD_StdItfReq+0x7a>
 80114d0:	7bfb      	ldrb	r3, [r7, #15]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d10d      	bne.n	80114f2 <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f000 fd71 	bl	8011fbe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80114dc:	e009      	b.n	80114f2 <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 80114de:	6839      	ldr	r1, [r7, #0]
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 fca1 	bl	8011e28 <USBD_CtlError>
      break;
 80114e6:	e004      	b.n	80114f2 <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 80114e8:	6839      	ldr	r1, [r7, #0]
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f000 fc9c 	bl	8011e28 <USBD_CtlError>
      break;
 80114f0:	e000      	b.n	80114f4 <USBD_StdItfReq+0x7c>
      break;
 80114f2:	bf00      	nop
    }
    break;
 80114f4:	e004      	b.n	8011500 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 80114f6:	6839      	ldr	r1, [r7, #0]
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 fc95 	bl	8011e28 <USBD_CtlError>
    break;
 80114fe:	bf00      	nop
  }

  return ret;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}

0801150a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801150a:	b580      	push	{r7, lr}
 801150c:	b084      	sub	sp, #16
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
 8011512:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011514:	2300      	movs	r3, #0
 8011516:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	889b      	ldrh	r3, [r3, #4]
 801151c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011526:	2b40      	cmp	r3, #64	; 0x40
 8011528:	d007      	beq.n	801153a <USBD_StdEPReq+0x30>
 801152a:	2b40      	cmp	r3, #64	; 0x40
 801152c:	f200 8143 	bhi.w	80117b6 <USBD_StdEPReq+0x2ac>
 8011530:	2b00      	cmp	r3, #0
 8011532:	d00c      	beq.n	801154e <USBD_StdEPReq+0x44>
 8011534:	2b20      	cmp	r3, #32
 8011536:	f040 813e 	bne.w	80117b6 <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011540:	689b      	ldr	r3, [r3, #8]
 8011542:	6839      	ldr	r1, [r7, #0]
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	4798      	blx	r3
 8011548:	4603      	mov	r3, r0
 801154a:	73fb      	strb	r3, [r7, #15]
    break;
 801154c:	e138      	b.n	80117c0 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	785b      	ldrb	r3, [r3, #1]
 8011552:	2b03      	cmp	r3, #3
 8011554:	d007      	beq.n	8011566 <USBD_StdEPReq+0x5c>
 8011556:	2b03      	cmp	r3, #3
 8011558:	f300 8127 	bgt.w	80117aa <USBD_StdEPReq+0x2a0>
 801155c:	2b00      	cmp	r3, #0
 801155e:	d07d      	beq.n	801165c <USBD_StdEPReq+0x152>
 8011560:	2b01      	cmp	r3, #1
 8011562:	d03c      	beq.n	80115de <USBD_StdEPReq+0xd4>
 8011564:	e121      	b.n	80117aa <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801156c:	b2db      	uxtb	r3, r3
 801156e:	2b02      	cmp	r3, #2
 8011570:	d002      	beq.n	8011578 <USBD_StdEPReq+0x6e>
 8011572:	2b03      	cmp	r3, #3
 8011574:	d016      	beq.n	80115a4 <USBD_StdEPReq+0x9a>
 8011576:	e02c      	b.n	80115d2 <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011578:	7bbb      	ldrb	r3, [r7, #14]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d00d      	beq.n	801159a <USBD_StdEPReq+0x90>
 801157e:	7bbb      	ldrb	r3, [r7, #14]
 8011580:	2b80      	cmp	r3, #128	; 0x80
 8011582:	d00a      	beq.n	801159a <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011584:	7bbb      	ldrb	r3, [r7, #14]
 8011586:	4619      	mov	r1, r3
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f001 fa01 	bl	8012990 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801158e:	2180      	movs	r1, #128	; 0x80
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f001 f9fd 	bl	8012990 <USBD_LL_StallEP>
 8011596:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011598:	e020      	b.n	80115dc <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 801159a:	6839      	ldr	r1, [r7, #0]
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f000 fc43 	bl	8011e28 <USBD_CtlError>
        break;
 80115a2:	e01b      	b.n	80115dc <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	885b      	ldrh	r3, [r3, #2]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d10e      	bne.n	80115ca <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80115ac:	7bbb      	ldrb	r3, [r7, #14]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00b      	beq.n	80115ca <USBD_StdEPReq+0xc0>
 80115b2:	7bbb      	ldrb	r3, [r7, #14]
 80115b4:	2b80      	cmp	r3, #128	; 0x80
 80115b6:	d008      	beq.n	80115ca <USBD_StdEPReq+0xc0>
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	88db      	ldrh	r3, [r3, #6]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d104      	bne.n	80115ca <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80115c0:	7bbb      	ldrb	r3, [r7, #14]
 80115c2:	4619      	mov	r1, r3
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f001 f9e3 	bl	8012990 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f000 fcf7 	bl	8011fbe <USBD_CtlSendStatus>

        break;
 80115d0:	e004      	b.n	80115dc <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 80115d2:	6839      	ldr	r1, [r7, #0]
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f000 fc27 	bl	8011e28 <USBD_CtlError>
        break;
 80115da:	bf00      	nop
      }
      break;
 80115dc:	e0ea      	b.n	80117b4 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	d002      	beq.n	80115f0 <USBD_StdEPReq+0xe6>
 80115ea:	2b03      	cmp	r3, #3
 80115ec:	d016      	beq.n	801161c <USBD_StdEPReq+0x112>
 80115ee:	e02e      	b.n	801164e <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80115f0:	7bbb      	ldrb	r3, [r7, #14]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d00d      	beq.n	8011612 <USBD_StdEPReq+0x108>
 80115f6:	7bbb      	ldrb	r3, [r7, #14]
 80115f8:	2b80      	cmp	r3, #128	; 0x80
 80115fa:	d00a      	beq.n	8011612 <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80115fc:	7bbb      	ldrb	r3, [r7, #14]
 80115fe:	4619      	mov	r1, r3
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f001 f9c5 	bl	8012990 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011606:	2180      	movs	r1, #128	; 0x80
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f001 f9c1 	bl	8012990 <USBD_LL_StallEP>
 801160e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011610:	e023      	b.n	801165a <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8011612:	6839      	ldr	r1, [r7, #0]
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 fc07 	bl	8011e28 <USBD_CtlError>
        break;
 801161a:	e01e      	b.n	801165a <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	885b      	ldrh	r3, [r3, #2]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d119      	bne.n	8011658 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011624:	7bbb      	ldrb	r3, [r7, #14]
 8011626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801162a:	2b00      	cmp	r3, #0
 801162c:	d004      	beq.n	8011638 <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801162e:	7bbb      	ldrb	r3, [r7, #14]
 8011630:	4619      	mov	r1, r3
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f001 f9cb 	bl	80129ce <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f000 fcc0 	bl	8011fbe <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011644:	689b      	ldr	r3, [r3, #8]
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	4798      	blx	r3
        }
        break;
 801164c:	e004      	b.n	8011658 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 801164e:	6839      	ldr	r1, [r7, #0]
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 fbe9 	bl	8011e28 <USBD_CtlError>
        break;
 8011656:	e000      	b.n	801165a <USBD_StdEPReq+0x150>
        break;
 8011658:	bf00      	nop
      }
      break;
 801165a:	e0ab      	b.n	80117b4 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011662:	b2db      	uxtb	r3, r3
 8011664:	2b02      	cmp	r3, #2
 8011666:	d002      	beq.n	801166e <USBD_StdEPReq+0x164>
 8011668:	2b03      	cmp	r3, #3
 801166a:	d032      	beq.n	80116d2 <USBD_StdEPReq+0x1c8>
 801166c:	e097      	b.n	801179e <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801166e:	7bbb      	ldrb	r3, [r7, #14]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d007      	beq.n	8011684 <USBD_StdEPReq+0x17a>
 8011674:	7bbb      	ldrb	r3, [r7, #14]
 8011676:	2b80      	cmp	r3, #128	; 0x80
 8011678:	d004      	beq.n	8011684 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 801167a:	6839      	ldr	r1, [r7, #0]
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f000 fbd3 	bl	8011e28 <USBD_CtlError>
          break;
 8011682:	e091      	b.n	80117a8 <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011688:	2b00      	cmp	r3, #0
 801168a:	da0b      	bge.n	80116a4 <USBD_StdEPReq+0x19a>
 801168c:	7bbb      	ldrb	r3, [r7, #14]
 801168e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011692:	4613      	mov	r3, r2
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	4413      	add	r3, r2
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	3310      	adds	r3, #16
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	4413      	add	r3, r2
 80116a0:	3304      	adds	r3, #4
 80116a2:	e00b      	b.n	80116bc <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 80116a4:	7bbb      	ldrb	r3, [r7, #14]
 80116a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80116aa:	4613      	mov	r3, r2
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	4413      	add	r3, r2
 80116b0:	009b      	lsls	r3, r3, #2
 80116b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80116b6:	687a      	ldr	r2, [r7, #4]
 80116b8:	4413      	add	r3, r2
 80116ba:	3304      	adds	r3, #4
 80116bc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	2200      	movs	r2, #0
 80116c2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	2202      	movs	r2, #2
 80116c8:	4619      	mov	r1, r3
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 fc1d 	bl	8011f0a <USBD_CtlSendData>
        break;
 80116d0:	e06a      	b.n	80117a8 <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80116d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	da11      	bge.n	80116fe <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80116da:	7bbb      	ldrb	r3, [r7, #14]
 80116dc:	f003 020f 	and.w	r2, r3, #15
 80116e0:	6879      	ldr	r1, [r7, #4]
 80116e2:	4613      	mov	r3, r2
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	4413      	add	r3, r2
 80116e8:	009b      	lsls	r3, r3, #2
 80116ea:	440b      	add	r3, r1
 80116ec:	3324      	adds	r3, #36	; 0x24
 80116ee:	881b      	ldrh	r3, [r3, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d117      	bne.n	8011724 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 80116f4:	6839      	ldr	r1, [r7, #0]
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f000 fb96 	bl	8011e28 <USBD_CtlError>
            break;
 80116fc:	e054      	b.n	80117a8 <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80116fe:	7bbb      	ldrb	r3, [r7, #14]
 8011700:	f003 020f 	and.w	r2, r3, #15
 8011704:	6879      	ldr	r1, [r7, #4]
 8011706:	4613      	mov	r3, r2
 8011708:	009b      	lsls	r3, r3, #2
 801170a:	4413      	add	r3, r2
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	440b      	add	r3, r1
 8011710:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011714:	881b      	ldrh	r3, [r3, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d104      	bne.n	8011724 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 801171a:	6839      	ldr	r1, [r7, #0]
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f000 fb83 	bl	8011e28 <USBD_CtlError>
            break;
 8011722:	e041      	b.n	80117a8 <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011728:	2b00      	cmp	r3, #0
 801172a:	da0b      	bge.n	8011744 <USBD_StdEPReq+0x23a>
 801172c:	7bbb      	ldrb	r3, [r7, #14]
 801172e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011732:	4613      	mov	r3, r2
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	4413      	add	r3, r2
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	3310      	adds	r3, #16
 801173c:	687a      	ldr	r2, [r7, #4]
 801173e:	4413      	add	r3, r2
 8011740:	3304      	adds	r3, #4
 8011742:	e00b      	b.n	801175c <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011744:	7bbb      	ldrb	r3, [r7, #14]
 8011746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801174a:	4613      	mov	r3, r2
 801174c:	009b      	lsls	r3, r3, #2
 801174e:	4413      	add	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	4413      	add	r3, r2
 801175a:	3304      	adds	r3, #4
 801175c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801175e:	7bbb      	ldrb	r3, [r7, #14]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d002      	beq.n	801176a <USBD_StdEPReq+0x260>
 8011764:	7bbb      	ldrb	r3, [r7, #14]
 8011766:	2b80      	cmp	r3, #128	; 0x80
 8011768:	d103      	bne.n	8011772 <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	2200      	movs	r2, #0
 801176e:	601a      	str	r2, [r3, #0]
 8011770:	e00e      	b.n	8011790 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011772:	7bbb      	ldrb	r3, [r7, #14]
 8011774:	4619      	mov	r1, r3
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f001 f948 	bl	8012a0c <USBD_LL_IsStallEP>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d003      	beq.n	801178a <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	2201      	movs	r2, #1
 8011786:	601a      	str	r2, [r3, #0]
 8011788:	e002      	b.n	8011790 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	2200      	movs	r2, #0
 801178e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	2202      	movs	r2, #2
 8011794:	4619      	mov	r1, r3
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 fbb7 	bl	8011f0a <USBD_CtlSendData>
          break;
 801179c:	e004      	b.n	80117a8 <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 801179e:	6839      	ldr	r1, [r7, #0]
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f000 fb41 	bl	8011e28 <USBD_CtlError>
        break;
 80117a6:	bf00      	nop
      }
      break;
 80117a8:	e004      	b.n	80117b4 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 80117aa:	6839      	ldr	r1, [r7, #0]
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f000 fb3b 	bl	8011e28 <USBD_CtlError>
      break;
 80117b2:	bf00      	nop
    }
    break;
 80117b4:	e004      	b.n	80117c0 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 80117b6:	6839      	ldr	r1, [r7, #0]
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 fb35 	bl	8011e28 <USBD_CtlError>
    break;
 80117be:	bf00      	nop
  }

  return ret;
 80117c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
	...

080117cc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80117d6:	2300      	movs	r3, #0
 80117d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80117da:	2300      	movs	r3, #0
 80117dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80117de:	2300      	movs	r3, #0
 80117e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	885b      	ldrh	r3, [r3, #2]
 80117e6:	0a1b      	lsrs	r3, r3, #8
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	3b01      	subs	r3, #1
 80117ec:	2b06      	cmp	r3, #6
 80117ee:	f200 8128 	bhi.w	8011a42 <USBD_GetDescriptor+0x276>
 80117f2:	a201      	add	r2, pc, #4	; (adr r2, 80117f8 <USBD_GetDescriptor+0x2c>)
 80117f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f8:	08011815 	.word	0x08011815
 80117fc:	0801182d 	.word	0x0801182d
 8011800:	0801186d 	.word	0x0801186d
 8011804:	08011a43 	.word	0x08011a43
 8011808:	08011a43 	.word	0x08011a43
 801180c:	080119e3 	.word	0x080119e3
 8011810:	08011a0f 	.word	0x08011a0f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	687a      	ldr	r2, [r7, #4]
 801181e:	7c12      	ldrb	r2, [r2, #16]
 8011820:	f107 0108 	add.w	r1, r7, #8
 8011824:	4610      	mov	r0, r2
 8011826:	4798      	blx	r3
 8011828:	60f8      	str	r0, [r7, #12]
    break;
 801182a:	e112      	b.n	8011a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	7c1b      	ldrb	r3, [r3, #16]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d10d      	bne.n	8011850 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801183c:	f107 0208 	add.w	r2, r7, #8
 8011840:	4610      	mov	r0, r2
 8011842:	4798      	blx	r3
 8011844:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	3301      	adds	r3, #1
 801184a:	2202      	movs	r2, #2
 801184c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 801184e:	e100      	b.n	8011a52 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011858:	f107 0208 	add.w	r2, r7, #8
 801185c:	4610      	mov	r0, r2
 801185e:	4798      	blx	r3
 8011860:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	3301      	adds	r3, #1
 8011866:	2202      	movs	r2, #2
 8011868:	701a      	strb	r2, [r3, #0]
    break;
 801186a:	e0f2      	b.n	8011a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	885b      	ldrh	r3, [r3, #2]
 8011870:	b2db      	uxtb	r3, r3
 8011872:	2b05      	cmp	r3, #5
 8011874:	f200 80ac 	bhi.w	80119d0 <USBD_GetDescriptor+0x204>
 8011878:	a201      	add	r2, pc, #4	; (adr r2, 8011880 <USBD_GetDescriptor+0xb4>)
 801187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801187e:	bf00      	nop
 8011880:	08011899 	.word	0x08011899
 8011884:	080118cd 	.word	0x080118cd
 8011888:	08011901 	.word	0x08011901
 801188c:	08011935 	.word	0x08011935
 8011890:	08011969 	.word	0x08011969
 8011894:	0801199d 	.word	0x0801199d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d00b      	beq.n	80118bc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118aa:	685b      	ldr	r3, [r3, #4]
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	7c12      	ldrb	r2, [r2, #16]
 80118b0:	f107 0108 	add.w	r1, r7, #8
 80118b4:	4610      	mov	r0, r2
 80118b6:	4798      	blx	r3
 80118b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80118ba:	e091      	b.n	80119e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80118bc:	6839      	ldr	r1, [r7, #0]
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 fab2 	bl	8011e28 <USBD_CtlError>
        err++;
 80118c4:	7afb      	ldrb	r3, [r7, #11]
 80118c6:	3301      	adds	r3, #1
 80118c8:	72fb      	strb	r3, [r7, #11]
      break;
 80118ca:	e089      	b.n	80119e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d00b      	beq.n	80118f0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	7c12      	ldrb	r2, [r2, #16]
 80118e4:	f107 0108 	add.w	r1, r7, #8
 80118e8:	4610      	mov	r0, r2
 80118ea:	4798      	blx	r3
 80118ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80118ee:	e077      	b.n	80119e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80118f0:	6839      	ldr	r1, [r7, #0]
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f000 fa98 	bl	8011e28 <USBD_CtlError>
        err++;
 80118f8:	7afb      	ldrb	r3, [r7, #11]
 80118fa:	3301      	adds	r3, #1
 80118fc:	72fb      	strb	r3, [r7, #11]
      break;
 80118fe:	e06f      	b.n	80119e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00b      	beq.n	8011924 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	7c12      	ldrb	r2, [r2, #16]
 8011918:	f107 0108 	add.w	r1, r7, #8
 801191c:	4610      	mov	r0, r2
 801191e:	4798      	blx	r3
 8011920:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011922:	e05d      	b.n	80119e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011924:	6839      	ldr	r1, [r7, #0]
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 fa7e 	bl	8011e28 <USBD_CtlError>
        err++;
 801192c:	7afb      	ldrb	r3, [r7, #11]
 801192e:	3301      	adds	r3, #1
 8011930:	72fb      	strb	r3, [r7, #11]
      break;
 8011932:	e055      	b.n	80119e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00b      	beq.n	8011958 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011946:	691b      	ldr	r3, [r3, #16]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	7c12      	ldrb	r2, [r2, #16]
 801194c:	f107 0108 	add.w	r1, r7, #8
 8011950:	4610      	mov	r0, r2
 8011952:	4798      	blx	r3
 8011954:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011956:	e043      	b.n	80119e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f000 fa64 	bl	8011e28 <USBD_CtlError>
        err++;
 8011960:	7afb      	ldrb	r3, [r7, #11]
 8011962:	3301      	adds	r3, #1
 8011964:	72fb      	strb	r3, [r7, #11]
      break;
 8011966:	e03b      	b.n	80119e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801196e:	695b      	ldr	r3, [r3, #20]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00b      	beq.n	801198c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801197a:	695b      	ldr	r3, [r3, #20]
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	7c12      	ldrb	r2, [r2, #16]
 8011980:	f107 0108 	add.w	r1, r7, #8
 8011984:	4610      	mov	r0, r2
 8011986:	4798      	blx	r3
 8011988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801198a:	e029      	b.n	80119e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801198c:	6839      	ldr	r1, [r7, #0]
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 fa4a 	bl	8011e28 <USBD_CtlError>
        err++;
 8011994:	7afb      	ldrb	r3, [r7, #11]
 8011996:	3301      	adds	r3, #1
 8011998:	72fb      	strb	r3, [r7, #11]
      break;
 801199a:	e021      	b.n	80119e0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119a2:	699b      	ldr	r3, [r3, #24]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d00b      	beq.n	80119c0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119ae:	699b      	ldr	r3, [r3, #24]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	7c12      	ldrb	r2, [r2, #16]
 80119b4:	f107 0108 	add.w	r1, r7, #8
 80119b8:	4610      	mov	r0, r2
 80119ba:	4798      	blx	r3
 80119bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80119be:	e00f      	b.n	80119e0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80119c0:	6839      	ldr	r1, [r7, #0]
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 fa30 	bl	8011e28 <USBD_CtlError>
        err++;
 80119c8:	7afb      	ldrb	r3, [r7, #11]
 80119ca:	3301      	adds	r3, #1
 80119cc:	72fb      	strb	r3, [r7, #11]
      break;
 80119ce:	e007      	b.n	80119e0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80119d0:	6839      	ldr	r1, [r7, #0]
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f000 fa28 	bl	8011e28 <USBD_CtlError>
      err++;
 80119d8:	7afb      	ldrb	r3, [r7, #11]
 80119da:	3301      	adds	r3, #1
 80119dc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80119de:	bf00      	nop
    }
    break;
 80119e0:	e037      	b.n	8011a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	7c1b      	ldrb	r3, [r3, #16]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d109      	bne.n	80119fe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119f2:	f107 0208 	add.w	r2, r7, #8
 80119f6:	4610      	mov	r0, r2
 80119f8:	4798      	blx	r3
 80119fa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80119fc:	e029      	b.n	8011a52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80119fe:	6839      	ldr	r1, [r7, #0]
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f000 fa11 	bl	8011e28 <USBD_CtlError>
      err++;
 8011a06:	7afb      	ldrb	r3, [r7, #11]
 8011a08:	3301      	adds	r3, #1
 8011a0a:	72fb      	strb	r3, [r7, #11]
    break;
 8011a0c:	e021      	b.n	8011a52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	7c1b      	ldrb	r3, [r3, #16]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d10d      	bne.n	8011a32 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a1e:	f107 0208 	add.w	r2, r7, #8
 8011a22:	4610      	mov	r0, r2
 8011a24:	4798      	blx	r3
 8011a26:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	2207      	movs	r2, #7
 8011a2e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011a30:	e00f      	b.n	8011a52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011a32:	6839      	ldr	r1, [r7, #0]
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f000 f9f7 	bl	8011e28 <USBD_CtlError>
      err++;
 8011a3a:	7afb      	ldrb	r3, [r7, #11]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	72fb      	strb	r3, [r7, #11]
    break;
 8011a40:	e007      	b.n	8011a52 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011a42:	6839      	ldr	r1, [r7, #0]
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 f9ef 	bl	8011e28 <USBD_CtlError>
    err++;
 8011a4a:	7afb      	ldrb	r3, [r7, #11]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	72fb      	strb	r3, [r7, #11]
    break;
 8011a50:	bf00      	nop
  }

  if (err != 0U)
 8011a52:	7afb      	ldrb	r3, [r7, #11]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d11e      	bne.n	8011a96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	88db      	ldrh	r3, [r3, #6]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d016      	beq.n	8011a8e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011a60:	893b      	ldrh	r3, [r7, #8]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d00e      	beq.n	8011a84 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	88da      	ldrh	r2, [r3, #6]
 8011a6a:	893b      	ldrh	r3, [r7, #8]
 8011a6c:	4293      	cmp	r3, r2
 8011a6e:	bf28      	it	cs
 8011a70:	4613      	movcs	r3, r2
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011a76:	893b      	ldrh	r3, [r7, #8]
 8011a78:	461a      	mov	r2, r3
 8011a7a:	68f9      	ldr	r1, [r7, #12]
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f000 fa44 	bl	8011f0a <USBD_CtlSendData>
 8011a82:	e009      	b.n	8011a98 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 f9ce 	bl	8011e28 <USBD_CtlError>
 8011a8c:	e004      	b.n	8011a98 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 fa95 	bl	8011fbe <USBD_CtlSendStatus>
 8011a94:	e000      	b.n	8011a98 <USBD_GetDescriptor+0x2cc>
    return;
 8011a96:	bf00      	nop
    }
  }
}
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop

08011aa0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	889b      	ldrh	r3, [r3, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d131      	bne.n	8011b16 <USBD_SetAddress+0x76>
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	88db      	ldrh	r3, [r3, #6]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d12d      	bne.n	8011b16 <USBD_SetAddress+0x76>
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	885b      	ldrh	r3, [r3, #2]
 8011abe:	2b7f      	cmp	r3, #127	; 0x7f
 8011ac0:	d829      	bhi.n	8011b16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	885b      	ldrh	r3, [r3, #2]
 8011ac6:	b2db      	uxtb	r3, r3
 8011ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011acc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b03      	cmp	r3, #3
 8011ad8:	d104      	bne.n	8011ae4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011ada:	6839      	ldr	r1, [r7, #0]
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 f9a3 	bl	8011e28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ae2:	e01d      	b.n	8011b20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	7bfa      	ldrb	r2, [r7, #15]
 8011ae8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011aec:	7bfb      	ldrb	r3, [r7, #15]
 8011aee:	4619      	mov	r1, r3
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f000 ffb7 	bl	8012a64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 fa61 	bl	8011fbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011afc:	7bfb      	ldrb	r3, [r7, #15]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d004      	beq.n	8011b0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2202      	movs	r2, #2
 8011b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b0a:	e009      	b.n	8011b20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2201      	movs	r2, #1
 8011b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b14:	e004      	b.n	8011b20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011b16:	6839      	ldr	r1, [r7, #0]
 8011b18:	6878      	ldr	r0, [r7, #4]
 8011b1a:	f000 f985 	bl	8011e28 <USBD_CtlError>
  }
}
 8011b1e:	bf00      	nop
 8011b20:	bf00      	nop
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011b32:	2300      	movs	r3, #0
 8011b34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	885b      	ldrh	r3, [r3, #2]
 8011b3a:	b2da      	uxtb	r2, r3
 8011b3c:	4b4c      	ldr	r3, [pc, #304]	; (8011c70 <USBD_SetConfig+0x148>)
 8011b3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011b40:	4b4b      	ldr	r3, [pc, #300]	; (8011c70 <USBD_SetConfig+0x148>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	d905      	bls.n	8011b54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011b48:	6839      	ldr	r1, [r7, #0]
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f000 f96c 	bl	8011e28 <USBD_CtlError>
    return USBD_FAIL;
 8011b50:	2303      	movs	r3, #3
 8011b52:	e088      	b.n	8011c66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	d002      	beq.n	8011b66 <USBD_SetConfig+0x3e>
 8011b60:	2b03      	cmp	r3, #3
 8011b62:	d025      	beq.n	8011bb0 <USBD_SetConfig+0x88>
 8011b64:	e071      	b.n	8011c4a <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011b66:	4b42      	ldr	r3, [pc, #264]	; (8011c70 <USBD_SetConfig+0x148>)
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d01c      	beq.n	8011ba8 <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 8011b6e:	4b40      	ldr	r3, [pc, #256]	; (8011c70 <USBD_SetConfig+0x148>)
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	461a      	mov	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011b78:	4b3d      	ldr	r3, [pc, #244]	; (8011c70 <USBD_SetConfig+0x148>)
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7ff f98c 	bl	8010e9c <USBD_SetClassConfig>
 8011b84:	4603      	mov	r3, r0
 8011b86:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011b88:	7bfb      	ldrb	r3, [r7, #15]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d004      	beq.n	8011b98 <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 f949 	bl	8011e28 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011b96:	e065      	b.n	8011c64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f000 fa10 	bl	8011fbe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2203      	movs	r2, #3
 8011ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011ba6:	e05d      	b.n	8011c64 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f000 fa08 	bl	8011fbe <USBD_CtlSendStatus>
    break;
 8011bae:	e059      	b.n	8011c64 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011bb0:	4b2f      	ldr	r3, [pc, #188]	; (8011c70 <USBD_SetConfig+0x148>)
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d112      	bne.n	8011bde <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2202      	movs	r2, #2
 8011bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011bc0:	4b2b      	ldr	r3, [pc, #172]	; (8011c70 <USBD_SetConfig+0x148>)
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011bca:	4b29      	ldr	r3, [pc, #164]	; (8011c70 <USBD_SetConfig+0x148>)
 8011bcc:	781b      	ldrb	r3, [r3, #0]
 8011bce:	4619      	mov	r1, r3
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f7ff f97f 	bl	8010ed4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f000 f9f1 	bl	8011fbe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011bdc:	e042      	b.n	8011c64 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 8011bde:	4b24      	ldr	r3, [pc, #144]	; (8011c70 <USBD_SetConfig+0x148>)
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	461a      	mov	r2, r3
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d02a      	beq.n	8011c42 <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7ff f96d 	bl	8010ed4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011bfa:	4b1d      	ldr	r3, [pc, #116]	; (8011c70 <USBD_SetConfig+0x148>)
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	461a      	mov	r2, r3
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011c04:	4b1a      	ldr	r3, [pc, #104]	; (8011c70 <USBD_SetConfig+0x148>)
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	4619      	mov	r1, r3
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f7ff f946 	bl	8010e9c <USBD_SetClassConfig>
 8011c10:	4603      	mov	r3, r0
 8011c12:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011c14:	7bfb      	ldrb	r3, [r7, #15]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00f      	beq.n	8011c3a <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 8011c1a:	6839      	ldr	r1, [r7, #0]
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 f903 	bl	8011e28 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	4619      	mov	r1, r3
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f7ff f952 	bl	8010ed4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2202      	movs	r2, #2
 8011c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011c38:	e014      	b.n	8011c64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 f9bf 	bl	8011fbe <USBD_CtlSendStatus>
    break;
 8011c40:	e010      	b.n	8011c64 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f9bb 	bl	8011fbe <USBD_CtlSendStatus>
    break;
 8011c48:	e00c      	b.n	8011c64 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 8011c4a:	6839      	ldr	r1, [r7, #0]
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f000 f8eb 	bl	8011e28 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011c52:	4b07      	ldr	r3, [pc, #28]	; (8011c70 <USBD_SetConfig+0x148>)
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	4619      	mov	r1, r3
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7ff f93b 	bl	8010ed4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8011c5e:	2303      	movs	r3, #3
 8011c60:	73fb      	strb	r3, [r7, #15]
    break;
 8011c62:	bf00      	nop
  }

  return ret;
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	24000480 	.word	0x24000480

08011c74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	88db      	ldrh	r3, [r3, #6]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d004      	beq.n	8011c90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011c86:	6839      	ldr	r1, [r7, #0]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 f8cd 	bl	8011e28 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8011c8e:	e023      	b.n	8011cd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	2b02      	cmp	r3, #2
 8011c9a:	dc02      	bgt.n	8011ca2 <USBD_GetConfig+0x2e>
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	dc03      	bgt.n	8011ca8 <USBD_GetConfig+0x34>
 8011ca0:	e015      	b.n	8011cce <USBD_GetConfig+0x5a>
 8011ca2:	2b03      	cmp	r3, #3
 8011ca4:	d00b      	beq.n	8011cbe <USBD_GetConfig+0x4a>
 8011ca6:	e012      	b.n	8011cce <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2200      	movs	r2, #0
 8011cac:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	3308      	adds	r3, #8
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 f927 	bl	8011f0a <USBD_CtlSendData>
      break;
 8011cbc:	e00c      	b.n	8011cd8 <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	3304      	adds	r3, #4
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 f91f 	bl	8011f0a <USBD_CtlSendData>
      break;
 8011ccc:	e004      	b.n	8011cd8 <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 8011cce:	6839      	ldr	r1, [r7, #0]
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f000 f8a9 	bl	8011e28 <USBD_CtlError>
      break;
 8011cd6:	bf00      	nop
}
 8011cd8:	bf00      	nop
 8011cda:	3708      	adds	r7, #8
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cf0:	b2db      	uxtb	r3, r3
 8011cf2:	3b01      	subs	r3, #1
 8011cf4:	2b02      	cmp	r3, #2
 8011cf6:	d81e      	bhi.n	8011d36 <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	88db      	ldrh	r3, [r3, #6]
 8011cfc:	2b02      	cmp	r3, #2
 8011cfe:	d004      	beq.n	8011d0a <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 8011d00:	6839      	ldr	r1, [r7, #0]
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 f890 	bl	8011e28 <USBD_CtlError>
      break;
 8011d08:	e01a      	b.n	8011d40 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d005      	beq.n	8011d26 <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	68db      	ldr	r3, [r3, #12]
 8011d1e:	f043 0202 	orr.w	r2, r3, #2
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	330c      	adds	r3, #12
 8011d2a:	2202      	movs	r2, #2
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f000 f8eb 	bl	8011f0a <USBD_CtlSendData>
    break;
 8011d34:	e004      	b.n	8011d40 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 8011d36:	6839      	ldr	r1, [r7, #0]
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f000 f875 	bl	8011e28 <USBD_CtlError>
    break;
 8011d3e:	bf00      	nop
  }
}
 8011d40:	bf00      	nop
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	885b      	ldrh	r3, [r3, #2]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d106      	bne.n	8011d68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	2201      	movs	r2, #1
 8011d5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 f92b 	bl	8011fbe <USBD_CtlSendStatus>
  }
}
 8011d68:	bf00      	nop
 8011d6a:	3708      	adds	r7, #8
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}

08011d70 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b082      	sub	sp, #8
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	3b01      	subs	r3, #1
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d80b      	bhi.n	8011da0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	885b      	ldrh	r3, [r3, #2]
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d10c      	bne.n	8011daa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2200      	movs	r2, #0
 8011d94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 f910 	bl	8011fbe <USBD_CtlSendStatus>
      }
      break;
 8011d9e:	e004      	b.n	8011daa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011da0:	6839      	ldr	r1, [r7, #0]
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 f840 	bl	8011e28 <USBD_CtlError>
      break;
 8011da8:	e000      	b.n	8011dac <USBD_ClrFeature+0x3c>
      break;
 8011daa:	bf00      	nop
  }
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	781a      	ldrb	r2, [r3, #0]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	3301      	adds	r3, #1
 8011dce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	781a      	ldrb	r2, [r3, #0]
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3301      	adds	r3, #1
 8011ddc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011dde:	68f8      	ldr	r0, [r7, #12]
 8011de0:	f7ff fabd 	bl	801135e <SWAPBYTE>
 8011de4:	4603      	mov	r3, r0
 8011de6:	461a      	mov	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	3301      	adds	r3, #1
 8011df0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	3301      	adds	r3, #1
 8011df6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011df8:	68f8      	ldr	r0, [r7, #12]
 8011dfa:	f7ff fab0 	bl	801135e <SWAPBYTE>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	461a      	mov	r2, r3
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	3301      	adds	r3, #1
 8011e0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	3301      	adds	r3, #1
 8011e10:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f7ff faa3 	bl	801135e <SWAPBYTE>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	80da      	strh	r2, [r3, #6]
}
 8011e20:	bf00      	nop
 8011e22:	3710      	adds	r7, #16
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b082      	sub	sp, #8
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011e32:	2180      	movs	r1, #128	; 0x80
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 fdab 	bl	8012990 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f000 fda7 	bl	8012990 <USBD_LL_StallEP>
}
 8011e42:	bf00      	nop
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011e4a:	b580      	push	{r7, lr}
 8011e4c:	b086      	sub	sp, #24
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	60f8      	str	r0, [r7, #12]
 8011e52:	60b9      	str	r1, [r7, #8]
 8011e54:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011e56:	2300      	movs	r3, #0
 8011e58:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d036      	beq.n	8011ece <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011e64:	6938      	ldr	r0, [r7, #16]
 8011e66:	f000 f836 	bl	8011ed6 <USBD_GetLen>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	005b      	lsls	r3, r3, #1
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
 8011e7a:	68ba      	ldr	r2, [r7, #8]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	687a      	ldr	r2, [r7, #4]
 8011e80:	7812      	ldrb	r2, [r2, #0]
 8011e82:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e84:	7dfb      	ldrb	r3, [r7, #23]
 8011e86:	3301      	adds	r3, #1
 8011e88:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011e8a:	7dfb      	ldrb	r3, [r7, #23]
 8011e8c:	68ba      	ldr	r2, [r7, #8]
 8011e8e:	4413      	add	r3, r2
 8011e90:	2203      	movs	r2, #3
 8011e92:	701a      	strb	r2, [r3, #0]
  idx++;
 8011e94:	7dfb      	ldrb	r3, [r7, #23]
 8011e96:	3301      	adds	r3, #1
 8011e98:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011e9a:	e013      	b.n	8011ec4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011e9c:	7dfb      	ldrb	r3, [r7, #23]
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	693a      	ldr	r2, [r7, #16]
 8011ea4:	7812      	ldrb	r2, [r2, #0]
 8011ea6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	613b      	str	r3, [r7, #16]
    idx++;
 8011eae:	7dfb      	ldrb	r3, [r7, #23]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011eb4:	7dfb      	ldrb	r3, [r7, #23]
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	4413      	add	r3, r2
 8011eba:	2200      	movs	r2, #0
 8011ebc:	701a      	strb	r2, [r3, #0]
    idx++;
 8011ebe:	7dfb      	ldrb	r3, [r7, #23]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1e7      	bne.n	8011e9c <USBD_GetString+0x52>
 8011ecc:	e000      	b.n	8011ed0 <USBD_GetString+0x86>
    return;
 8011ece:	bf00      	nop
  }
}
 8011ed0:	3718      	adds	r7, #24
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}

08011ed6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	b085      	sub	sp, #20
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011ee6:	e005      	b.n	8011ef4 <USBD_GetLen+0x1e>
  {
    len++;
 8011ee8:	7bfb      	ldrb	r3, [r7, #15]
 8011eea:	3301      	adds	r3, #1
 8011eec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	3301      	adds	r3, #1
 8011ef2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d1f5      	bne.n	8011ee8 <USBD_GetLen+0x12>
  }

  return len;
 8011efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3714      	adds	r7, #20
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011f0a:	b580      	push	{r7, lr}
 8011f0c:	b084      	sub	sp, #16
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	60f8      	str	r0, [r7, #12]
 8011f12:	60b9      	str	r1, [r7, #8]
 8011f14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	2202      	movs	r2, #2
 8011f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	68ba      	ldr	r2, [r7, #8]
 8011f2e:	2100      	movs	r1, #0
 8011f30:	68f8      	ldr	r0, [r7, #12]
 8011f32:	f000 fdb6 	bl	8012aa2 <USBD_LL_Transmit>

  return USBD_OK;
 8011f36:	2300      	movs	r3, #0
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b084      	sub	sp, #16
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	68ba      	ldr	r2, [r7, #8]
 8011f50:	2100      	movs	r1, #0
 8011f52:	68f8      	ldr	r0, [r7, #12]
 8011f54:	f000 fda5 	bl	8012aa2 <USBD_LL_Transmit>

  return USBD_OK;
 8011f58:	2300      	movs	r3, #0
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b084      	sub	sp, #16
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	60f8      	str	r0, [r7, #12]
 8011f6a:	60b9      	str	r1, [r7, #8]
 8011f6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	2203      	movs	r2, #3
 8011f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	687a      	ldr	r2, [r7, #4]
 8011f82:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f000 fda9 	bl	8012ae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011f92:	2300      	movs	r3, #0
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}

08011f9c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b084      	sub	sp, #16
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	68ba      	ldr	r2, [r7, #8]
 8011fac:	2100      	movs	r1, #0
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f000 fd98 	bl	8012ae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011fb4:	2300      	movs	r3, #0
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}

08011fbe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011fbe:	b580      	push	{r7, lr}
 8011fc0:	b082      	sub	sp, #8
 8011fc2:	af00      	add	r7, sp, #0
 8011fc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2204      	movs	r2, #4
 8011fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011fce:	2300      	movs	r3, #0
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	2100      	movs	r1, #0
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f000 fd64 	bl	8012aa2 <USBD_LL_Transmit>

  return USBD_OK;
 8011fda:	2300      	movs	r3, #0
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}

08011fe4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2205      	movs	r2, #5
 8011ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	2100      	movs	r1, #0
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 fd72 	bl	8012ae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012000:	2300      	movs	r3, #0
}
 8012002:	4618      	mov	r0, r3
 8012004:	3708      	adds	r7, #8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
	...

0801200c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801200c:	b480      	push	{r7}
 801200e:	b087      	sub	sp, #28
 8012010:	af00      	add	r7, sp, #0
 8012012:	60f8      	str	r0, [r7, #12]
 8012014:	60b9      	str	r1, [r7, #8]
 8012016:	4613      	mov	r3, r2
 8012018:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801201a:	2301      	movs	r3, #1
 801201c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801201e:	2300      	movs	r3, #0
 8012020:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012022:	4b1f      	ldr	r3, [pc, #124]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 8012024:	7a5b      	ldrb	r3, [r3, #9]
 8012026:	b2db      	uxtb	r3, r3
 8012028:	2b00      	cmp	r3, #0
 801202a:	d131      	bne.n	8012090 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801202c:	4b1c      	ldr	r3, [pc, #112]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 801202e:	7a5b      	ldrb	r3, [r3, #9]
 8012030:	b2db      	uxtb	r3, r3
 8012032:	461a      	mov	r2, r3
 8012034:	4b1a      	ldr	r3, [pc, #104]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 8012036:	2100      	movs	r1, #0
 8012038:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801203a:	4b19      	ldr	r3, [pc, #100]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 801203c:	7a5b      	ldrb	r3, [r3, #9]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	4a17      	ldr	r2, [pc, #92]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4413      	add	r3, r2
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801204a:	4b15      	ldr	r3, [pc, #84]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 801204c:	7a5b      	ldrb	r3, [r3, #9]
 801204e:	b2db      	uxtb	r3, r3
 8012050:	461a      	mov	r2, r3
 8012052:	4b13      	ldr	r3, [pc, #76]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 8012054:	4413      	add	r3, r2
 8012056:	79fa      	ldrb	r2, [r7, #7]
 8012058:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801205a:	4b11      	ldr	r3, [pc, #68]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 801205c:	7a5b      	ldrb	r3, [r3, #9]
 801205e:	b2db      	uxtb	r3, r3
 8012060:	1c5a      	adds	r2, r3, #1
 8012062:	b2d1      	uxtb	r1, r2
 8012064:	4a0e      	ldr	r2, [pc, #56]	; (80120a0 <FATFS_LinkDriverEx+0x94>)
 8012066:	7251      	strb	r1, [r2, #9]
 8012068:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801206a:	7dbb      	ldrb	r3, [r7, #22]
 801206c:	3330      	adds	r3, #48	; 0x30
 801206e:	b2da      	uxtb	r2, r3
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	3301      	adds	r3, #1
 8012078:	223a      	movs	r2, #58	; 0x3a
 801207a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	3302      	adds	r3, #2
 8012080:	222f      	movs	r2, #47	; 0x2f
 8012082:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	3303      	adds	r3, #3
 8012088:	2200      	movs	r2, #0
 801208a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801208c:	2300      	movs	r3, #0
 801208e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012090:	7dfb      	ldrb	r3, [r7, #23]
}
 8012092:	4618      	mov	r0, r3
 8012094:	371c      	adds	r7, #28
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	24000484 	.word	0x24000484

080120a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80120ae:	2200      	movs	r2, #0
 80120b0:	6839      	ldr	r1, [r7, #0]
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7ff ffaa 	bl	801200c <FATFS_LinkDriverEx>
 80120b8:	4603      	mov	r3, r0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
	...

080120c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80120c8:	2200      	movs	r2, #0
 80120ca:	4913      	ldr	r1, [pc, #76]	; (8012118 <MX_USB_DEVICE_Init+0x54>)
 80120cc:	4813      	ldr	r0, [pc, #76]	; (801211c <MX_USB_DEVICE_Init+0x58>)
 80120ce:	f7fe fe77 	bl	8010dc0 <USBD_Init>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d001      	beq.n	80120dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80120d8:	f7ee ff16 	bl	8000f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80120dc:	4910      	ldr	r1, [pc, #64]	; (8012120 <MX_USB_DEVICE_Init+0x5c>)
 80120de:	480f      	ldr	r0, [pc, #60]	; (801211c <MX_USB_DEVICE_Init+0x58>)
 80120e0:	f7fe fea4 	bl	8010e2c <USBD_RegisterClass>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d001      	beq.n	80120ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80120ea:	f7ee ff0d 	bl	8000f08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80120ee:	490d      	ldr	r1, [pc, #52]	; (8012124 <MX_USB_DEVICE_Init+0x60>)
 80120f0:	480a      	ldr	r0, [pc, #40]	; (801211c <MX_USB_DEVICE_Init+0x58>)
 80120f2:	f7fe fdc9 	bl	8010c88 <USBD_CDC_RegisterInterface>
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d001      	beq.n	8012100 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80120fc:	f7ee ff04 	bl	8000f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012100:	4806      	ldr	r0, [pc, #24]	; (801211c <MX_USB_DEVICE_Init+0x58>)
 8012102:	f7fe feb4 	bl	8010e6e <USBD_Start>
 8012106:	4603      	mov	r3, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	d001      	beq.n	8012110 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801210c:	f7ee fefc 	bl	8000f08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012110:	f7f4 fd02 	bl	8006b18 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012114:	bf00      	nop
 8012116:	bd80      	pop	{r7, pc}
 8012118:	24000238 	.word	0x24000238
 801211c:	24002980 	.word	0x24002980
 8012120:	24000120 	.word	0x24000120
 8012124:	24000224 	.word	0x24000224

08012128 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801212c:	2200      	movs	r2, #0
 801212e:	4905      	ldr	r1, [pc, #20]	; (8012144 <CDC_Init_FS+0x1c>)
 8012130:	4805      	ldr	r0, [pc, #20]	; (8012148 <CDC_Init_FS+0x20>)
 8012132:	f7fe fdbe 	bl	8010cb2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012136:	4905      	ldr	r1, [pc, #20]	; (801214c <CDC_Init_FS+0x24>)
 8012138:	4803      	ldr	r0, [pc, #12]	; (8012148 <CDC_Init_FS+0x20>)
 801213a:	f7fe fdd3 	bl	8010ce4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801213e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012140:	4618      	mov	r0, r3
 8012142:	bd80      	pop	{r7, pc}
 8012144:	24003450 	.word	0x24003450
 8012148:	24002980 	.word	0x24002980
 801214c:	24002c50 	.word	0x24002c50

08012150 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012150:	b480      	push	{r7}
 8012152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012154:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012156:	4618      	mov	r0, r3
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr

08012160 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012160:	b480      	push	{r7}
 8012162:	b083      	sub	sp, #12
 8012164:	af00      	add	r7, sp, #0
 8012166:	4603      	mov	r3, r0
 8012168:	6039      	str	r1, [r7, #0]
 801216a:	71fb      	strb	r3, [r7, #7]
 801216c:	4613      	mov	r3, r2
 801216e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012170:	79fb      	ldrb	r3, [r7, #7]
 8012172:	2b23      	cmp	r3, #35	; 0x23
 8012174:	f200 808c 	bhi.w	8012290 <CDC_Control_FS+0x130>
 8012178:	a201      	add	r2, pc, #4	; (adr r2, 8012180 <CDC_Control_FS+0x20>)
 801217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217e:	bf00      	nop
 8012180:	08012291 	.word	0x08012291
 8012184:	08012291 	.word	0x08012291
 8012188:	08012291 	.word	0x08012291
 801218c:	08012291 	.word	0x08012291
 8012190:	08012291 	.word	0x08012291
 8012194:	08012291 	.word	0x08012291
 8012198:	08012291 	.word	0x08012291
 801219c:	08012291 	.word	0x08012291
 80121a0:	08012291 	.word	0x08012291
 80121a4:	08012291 	.word	0x08012291
 80121a8:	08012291 	.word	0x08012291
 80121ac:	08012291 	.word	0x08012291
 80121b0:	08012291 	.word	0x08012291
 80121b4:	08012291 	.word	0x08012291
 80121b8:	08012291 	.word	0x08012291
 80121bc:	08012291 	.word	0x08012291
 80121c0:	08012291 	.word	0x08012291
 80121c4:	08012291 	.word	0x08012291
 80121c8:	08012291 	.word	0x08012291
 80121cc:	08012291 	.word	0x08012291
 80121d0:	08012291 	.word	0x08012291
 80121d4:	08012291 	.word	0x08012291
 80121d8:	08012291 	.word	0x08012291
 80121dc:	08012291 	.word	0x08012291
 80121e0:	08012291 	.word	0x08012291
 80121e4:	08012291 	.word	0x08012291
 80121e8:	08012291 	.word	0x08012291
 80121ec:	08012291 	.word	0x08012291
 80121f0:	08012291 	.word	0x08012291
 80121f4:	08012291 	.word	0x08012291
 80121f8:	08012291 	.word	0x08012291
 80121fc:	08012291 	.word	0x08012291
 8012200:	08012211 	.word	0x08012211
 8012204:	0801224b 	.word	0x0801224b
 8012208:	08012291 	.word	0x08012291
 801220c:	08012291 	.word	0x08012291
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	781a      	ldrb	r2, [r3, #0]
 8012214:	4b22      	ldr	r3, [pc, #136]	; (80122a0 <CDC_Control_FS+0x140>)
 8012216:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	785a      	ldrb	r2, [r3, #1]
 801221c:	4b20      	ldr	r3, [pc, #128]	; (80122a0 <CDC_Control_FS+0x140>)
 801221e:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	789a      	ldrb	r2, [r3, #2]
 8012224:	4b1e      	ldr	r3, [pc, #120]	; (80122a0 <CDC_Control_FS+0x140>)
 8012226:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	78da      	ldrb	r2, [r3, #3]
 801222c:	4b1c      	ldr	r3, [pc, #112]	; (80122a0 <CDC_Control_FS+0x140>)
 801222e:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	791a      	ldrb	r2, [r3, #4]
 8012234:	4b1a      	ldr	r3, [pc, #104]	; (80122a0 <CDC_Control_FS+0x140>)
 8012236:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	795a      	ldrb	r2, [r3, #5]
 801223c:	4b18      	ldr	r3, [pc, #96]	; (80122a0 <CDC_Control_FS+0x140>)
 801223e:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	799a      	ldrb	r2, [r3, #6]
 8012244:	4b16      	ldr	r3, [pc, #88]	; (80122a0 <CDC_Control_FS+0x140>)
 8012246:	719a      	strb	r2, [r3, #6]

    break;
 8012248:	e023      	b.n	8012292 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 801224a:	4b15      	ldr	r3, [pc, #84]	; (80122a0 <CDC_Control_FS+0x140>)
 801224c:	781a      	ldrb	r2, [r3, #0]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	3301      	adds	r3, #1
 8012256:	4a12      	ldr	r2, [pc, #72]	; (80122a0 <CDC_Control_FS+0x140>)
 8012258:	7852      	ldrb	r2, [r2, #1]
 801225a:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	3302      	adds	r3, #2
 8012260:	4a0f      	ldr	r2, [pc, #60]	; (80122a0 <CDC_Control_FS+0x140>)
 8012262:	7892      	ldrb	r2, [r2, #2]
 8012264:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	3303      	adds	r3, #3
 801226a:	4a0d      	ldr	r2, [pc, #52]	; (80122a0 <CDC_Control_FS+0x140>)
 801226c:	78d2      	ldrb	r2, [r2, #3]
 801226e:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	3304      	adds	r3, #4
 8012274:	4a0a      	ldr	r2, [pc, #40]	; (80122a0 <CDC_Control_FS+0x140>)
 8012276:	7912      	ldrb	r2, [r2, #4]
 8012278:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	3305      	adds	r3, #5
 801227e:	4a08      	ldr	r2, [pc, #32]	; (80122a0 <CDC_Control_FS+0x140>)
 8012280:	7952      	ldrb	r2, [r2, #5]
 8012282:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	3306      	adds	r3, #6
 8012288:	4a05      	ldr	r2, [pc, #20]	; (80122a0 <CDC_Control_FS+0x140>)
 801228a:	7992      	ldrb	r2, [r2, #6]
 801228c:	701a      	strb	r2, [r3, #0]

    break;
 801228e:	e000      	b.n	8012292 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012290:	bf00      	nop
  }

  return (USBD_OK);
 8012292:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012294:	4618      	mov	r0, r3
 8012296:	370c      	adds	r7, #12
 8012298:	46bd      	mov	sp, r7
 801229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229e:	4770      	bx	lr
 80122a0:	24003c50 	.word	0x24003c50

080122a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b084      	sub	sp, #16
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80122ae:	6879      	ldr	r1, [r7, #4]
 80122b0:	4809      	ldr	r0, [pc, #36]	; (80122d8 <CDC_Receive_FS+0x34>)
 80122b2:	f7fe fd17 	bl	8010ce4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80122b6:	4808      	ldr	r0, [pc, #32]	; (80122d8 <CDC_Receive_FS+0x34>)
 80122b8:	f7fe fd58 	bl	8010d6c <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 80122c2:	89fb      	ldrh	r3, [r7, #14]
 80122c4:	4619      	mov	r1, r3
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f808 	bl	80122dc <CDC_Transmit_FS>
  return (USBD_OK);
 80122cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	24002980 	.word	0x24002980

080122dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b084      	sub	sp, #16
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	460b      	mov	r3, r1
 80122e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80122e8:	2300      	movs	r3, #0
 80122ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80122ec:	4b0d      	ldr	r3, [pc, #52]	; (8012324 <CDC_Transmit_FS+0x48>)
 80122ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80122fe:	2301      	movs	r3, #1
 8012300:	e00b      	b.n	801231a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012302:	887b      	ldrh	r3, [r7, #2]
 8012304:	461a      	mov	r2, r3
 8012306:	6879      	ldr	r1, [r7, #4]
 8012308:	4806      	ldr	r0, [pc, #24]	; (8012324 <CDC_Transmit_FS+0x48>)
 801230a:	f7fe fcd2 	bl	8010cb2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801230e:	4805      	ldr	r0, [pc, #20]	; (8012324 <CDC_Transmit_FS+0x48>)
 8012310:	f7fe fcfc 	bl	8010d0c <USBD_CDC_TransmitPacket>
 8012314:	4603      	mov	r3, r0
 8012316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012318:	7bfb      	ldrb	r3, [r7, #15]
}
 801231a:	4618      	mov	r0, r3
 801231c:	3710      	adds	r7, #16
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	24002980 	.word	0x24002980

08012328 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012328:	b480      	push	{r7}
 801232a:	b087      	sub	sp, #28
 801232c:	af00      	add	r7, sp, #0
 801232e:	60f8      	str	r0, [r7, #12]
 8012330:	60b9      	str	r1, [r7, #8]
 8012332:	4613      	mov	r3, r2
 8012334:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012336:	2300      	movs	r3, #0
 8012338:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801233a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801233e:	4618      	mov	r0, r3
 8012340:	371c      	adds	r7, #28
 8012342:	46bd      	mov	sp, r7
 8012344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012348:	4770      	bx	lr
	...

0801234c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	4603      	mov	r3, r0
 8012354:	6039      	str	r1, [r7, #0]
 8012356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	2212      	movs	r2, #18
 801235c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801235e:	4b03      	ldr	r3, [pc, #12]	; (801236c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012360:	4618      	mov	r0, r3
 8012362:	370c      	adds	r7, #12
 8012364:	46bd      	mov	sp, r7
 8012366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236a:	4770      	bx	lr
 801236c:	24000254 	.word	0x24000254

08012370 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012370:	b480      	push	{r7}
 8012372:	b083      	sub	sp, #12
 8012374:	af00      	add	r7, sp, #0
 8012376:	4603      	mov	r3, r0
 8012378:	6039      	str	r1, [r7, #0]
 801237a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	2204      	movs	r2, #4
 8012380:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012382:	4b03      	ldr	r3, [pc, #12]	; (8012390 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012384:	4618      	mov	r0, r3
 8012386:	370c      	adds	r7, #12
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr
 8012390:	24000268 	.word	0x24000268

08012394 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b082      	sub	sp, #8
 8012398:	af00      	add	r7, sp, #0
 801239a:	4603      	mov	r3, r0
 801239c:	6039      	str	r1, [r7, #0]
 801239e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123a0:	79fb      	ldrb	r3, [r7, #7]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d105      	bne.n	80123b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80123a6:	683a      	ldr	r2, [r7, #0]
 80123a8:	4907      	ldr	r1, [pc, #28]	; (80123c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80123aa:	4808      	ldr	r0, [pc, #32]	; (80123cc <USBD_FS_ProductStrDescriptor+0x38>)
 80123ac:	f7ff fd4d 	bl	8011e4a <USBD_GetString>
 80123b0:	e004      	b.n	80123bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80123b2:	683a      	ldr	r2, [r7, #0]
 80123b4:	4904      	ldr	r1, [pc, #16]	; (80123c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80123b6:	4805      	ldr	r0, [pc, #20]	; (80123cc <USBD_FS_ProductStrDescriptor+0x38>)
 80123b8:	f7ff fd47 	bl	8011e4a <USBD_GetString>
  }
  return USBD_StrDesc;
 80123bc:	4b02      	ldr	r3, [pc, #8]	; (80123c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3708      	adds	r7, #8
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	24003c58 	.word	0x24003c58
 80123cc:	08015848 	.word	0x08015848

080123d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	4603      	mov	r3, r0
 80123d8:	6039      	str	r1, [r7, #0]
 80123da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80123dc:	683a      	ldr	r2, [r7, #0]
 80123de:	4904      	ldr	r1, [pc, #16]	; (80123f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80123e0:	4804      	ldr	r0, [pc, #16]	; (80123f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80123e2:	f7ff fd32 	bl	8011e4a <USBD_GetString>
  return USBD_StrDesc;
 80123e6:	4b02      	ldr	r3, [pc, #8]	; (80123f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	24003c58 	.word	0x24003c58
 80123f4:	08015860 	.word	0x08015860

080123f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	4603      	mov	r3, r0
 8012400:	6039      	str	r1, [r7, #0]
 8012402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	221a      	movs	r2, #26
 8012408:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801240a:	f000 f843 	bl	8012494 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801240e:	4b02      	ldr	r3, [pc, #8]	; (8012418 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012410:	4618      	mov	r0, r3
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}
 8012418:	2400026c 	.word	0x2400026c

0801241c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	4603      	mov	r3, r0
 8012424:	6039      	str	r1, [r7, #0]
 8012426:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012428:	79fb      	ldrb	r3, [r7, #7]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d105      	bne.n	801243a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801242e:	683a      	ldr	r2, [r7, #0]
 8012430:	4907      	ldr	r1, [pc, #28]	; (8012450 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012432:	4808      	ldr	r0, [pc, #32]	; (8012454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012434:	f7ff fd09 	bl	8011e4a <USBD_GetString>
 8012438:	e004      	b.n	8012444 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801243a:	683a      	ldr	r2, [r7, #0]
 801243c:	4904      	ldr	r1, [pc, #16]	; (8012450 <USBD_FS_ConfigStrDescriptor+0x34>)
 801243e:	4805      	ldr	r0, [pc, #20]	; (8012454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012440:	f7ff fd03 	bl	8011e4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012444:	4b02      	ldr	r3, [pc, #8]	; (8012450 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012446:	4618      	mov	r0, r3
 8012448:	3708      	adds	r7, #8
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	24003c58 	.word	0x24003c58
 8012454:	08015874 	.word	0x08015874

08012458 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b082      	sub	sp, #8
 801245c:	af00      	add	r7, sp, #0
 801245e:	4603      	mov	r3, r0
 8012460:	6039      	str	r1, [r7, #0]
 8012462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012464:	79fb      	ldrb	r3, [r7, #7]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d105      	bne.n	8012476 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801246a:	683a      	ldr	r2, [r7, #0]
 801246c:	4907      	ldr	r1, [pc, #28]	; (801248c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801246e:	4808      	ldr	r0, [pc, #32]	; (8012490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012470:	f7ff fceb 	bl	8011e4a <USBD_GetString>
 8012474:	e004      	b.n	8012480 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012476:	683a      	ldr	r2, [r7, #0]
 8012478:	4904      	ldr	r1, [pc, #16]	; (801248c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801247a:	4805      	ldr	r0, [pc, #20]	; (8012490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801247c:	f7ff fce5 	bl	8011e4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8012480:	4b02      	ldr	r3, [pc, #8]	; (801248c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012482:	4618      	mov	r0, r3
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	24003c58 	.word	0x24003c58
 8012490:	08015880 	.word	0x08015880

08012494 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801249a:	4b0f      	ldr	r3, [pc, #60]	; (80124d8 <Get_SerialNum+0x44>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80124a0:	4b0e      	ldr	r3, [pc, #56]	; (80124dc <Get_SerialNum+0x48>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80124a6:	4b0e      	ldr	r3, [pc, #56]	; (80124e0 <Get_SerialNum+0x4c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80124ac:	68fa      	ldr	r2, [r7, #12]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	4413      	add	r3, r2
 80124b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d009      	beq.n	80124ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80124ba:	2208      	movs	r2, #8
 80124bc:	4909      	ldr	r1, [pc, #36]	; (80124e4 <Get_SerialNum+0x50>)
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f000 f814 	bl	80124ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80124c4:	2204      	movs	r2, #4
 80124c6:	4908      	ldr	r1, [pc, #32]	; (80124e8 <Get_SerialNum+0x54>)
 80124c8:	68b8      	ldr	r0, [r7, #8]
 80124ca:	f000 f80f 	bl	80124ec <IntToUnicode>
  }
}
 80124ce:	bf00      	nop
 80124d0:	3710      	adds	r7, #16
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	1ff1e800 	.word	0x1ff1e800
 80124dc:	1ff1e804 	.word	0x1ff1e804
 80124e0:	1ff1e808 	.word	0x1ff1e808
 80124e4:	2400026e 	.word	0x2400026e
 80124e8:	2400027e 	.word	0x2400027e

080124ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80124ec:	b480      	push	{r7}
 80124ee:	b087      	sub	sp, #28
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	4613      	mov	r3, r2
 80124f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80124fe:	2300      	movs	r3, #0
 8012500:	75fb      	strb	r3, [r7, #23]
 8012502:	e027      	b.n	8012554 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	0f1b      	lsrs	r3, r3, #28
 8012508:	2b09      	cmp	r3, #9
 801250a:	d80b      	bhi.n	8012524 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	0f1b      	lsrs	r3, r3, #28
 8012510:	b2da      	uxtb	r2, r3
 8012512:	7dfb      	ldrb	r3, [r7, #23]
 8012514:	005b      	lsls	r3, r3, #1
 8012516:	4619      	mov	r1, r3
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	440b      	add	r3, r1
 801251c:	3230      	adds	r2, #48	; 0x30
 801251e:	b2d2      	uxtb	r2, r2
 8012520:	701a      	strb	r2, [r3, #0]
 8012522:	e00a      	b.n	801253a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	0f1b      	lsrs	r3, r3, #28
 8012528:	b2da      	uxtb	r2, r3
 801252a:	7dfb      	ldrb	r3, [r7, #23]
 801252c:	005b      	lsls	r3, r3, #1
 801252e:	4619      	mov	r1, r3
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	440b      	add	r3, r1
 8012534:	3237      	adds	r2, #55	; 0x37
 8012536:	b2d2      	uxtb	r2, r2
 8012538:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	011b      	lsls	r3, r3, #4
 801253e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012540:	7dfb      	ldrb	r3, [r7, #23]
 8012542:	005b      	lsls	r3, r3, #1
 8012544:	3301      	adds	r3, #1
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	4413      	add	r3, r2
 801254a:	2200      	movs	r2, #0
 801254c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801254e:	7dfb      	ldrb	r3, [r7, #23]
 8012550:	3301      	adds	r3, #1
 8012552:	75fb      	strb	r3, [r7, #23]
 8012554:	7dfa      	ldrb	r2, [r7, #23]
 8012556:	79fb      	ldrb	r3, [r7, #7]
 8012558:	429a      	cmp	r2, r3
 801255a:	d3d3      	bcc.n	8012504 <IntToUnicode+0x18>
  }
}
 801255c:	bf00      	nop
 801255e:	bf00      	nop
 8012560:	371c      	adds	r7, #28
 8012562:	46bd      	mov	sp, r7
 8012564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012568:	4770      	bx	lr
	...

0801256c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b0b8      	sub	sp, #224	; 0xe0
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012574:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012578:	2200      	movs	r2, #0
 801257a:	601a      	str	r2, [r3, #0]
 801257c:	605a      	str	r2, [r3, #4]
 801257e:	609a      	str	r2, [r3, #8]
 8012580:	60da      	str	r2, [r3, #12]
 8012582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012584:	f107 0310 	add.w	r3, r7, #16
 8012588:	22bc      	movs	r2, #188	; 0xbc
 801258a:	2100      	movs	r1, #0
 801258c:	4618      	mov	r0, r3
 801258e:	f000 fb43 	bl	8012c18 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a2a      	ldr	r2, [pc, #168]	; (8012640 <HAL_PCD_MspInit+0xd4>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d14c      	bne.n	8012636 <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801259c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80125a0:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80125a2:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80125a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80125aa:	f107 0310 	add.w	r3, r7, #16
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7f5 faa0 	bl	8007af4 <HAL_RCCEx_PeriphCLKConfig>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d001      	beq.n	80125be <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 80125ba:	f7ee fca5 	bl	8000f08 <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80125be:	4b21      	ldr	r3, [pc, #132]	; (8012644 <HAL_PCD_MspInit+0xd8>)
 80125c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80125c4:	4a1f      	ldr	r2, [pc, #124]	; (8012644 <HAL_PCD_MspInit+0xd8>)
 80125c6:	f043 0301 	orr.w	r3, r3, #1
 80125ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80125ce:	4b1d      	ldr	r3, [pc, #116]	; (8012644 <HAL_PCD_MspInit+0xd8>)
 80125d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80125d4:	f003 0301 	and.w	r3, r3, #1
 80125d8:	60fb      	str	r3, [r7, #12]
 80125da:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80125dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80125e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125e4:	2302      	movs	r3, #2
 80125e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125ea:	2300      	movs	r3, #0
 80125ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80125f0:	2300      	movs	r3, #0
 80125f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80125f6:	230a      	movs	r3, #10
 80125f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012600:	4619      	mov	r1, r3
 8012602:	4811      	ldr	r0, [pc, #68]	; (8012648 <HAL_PCD_MspInit+0xdc>)
 8012604:	f7f1 feae 	bl	8004364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012608:	4b0e      	ldr	r3, [pc, #56]	; (8012644 <HAL_PCD_MspInit+0xd8>)
 801260a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801260e:	4a0d      	ldr	r2, [pc, #52]	; (8012644 <HAL_PCD_MspInit+0xd8>)
 8012610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012614:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012618:	4b0a      	ldr	r3, [pc, #40]	; (8012644 <HAL_PCD_MspInit+0xd8>)
 801261a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801261e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012622:	60bb      	str	r3, [r7, #8]
 8012624:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012626:	2200      	movs	r2, #0
 8012628:	2100      	movs	r1, #0
 801262a:	2065      	movs	r0, #101	; 0x65
 801262c:	f7ef fbb7 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012630:	2065      	movs	r0, #101	; 0x65
 8012632:	f7ef fbce 	bl	8001dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012636:	bf00      	nop
 8012638:	37e0      	adds	r7, #224	; 0xe0
 801263a:	46bd      	mov	sp, r7
 801263c:	bd80      	pop	{r7, pc}
 801263e:	bf00      	nop
 8012640:	40080000 	.word	0x40080000
 8012644:	58024400 	.word	0x58024400
 8012648:	58020000 	.word	0x58020000

0801264c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012660:	4619      	mov	r1, r3
 8012662:	4610      	mov	r0, r2
 8012664:	f7fe fc4e 	bl	8010f04 <USBD_LL_SetupStage>
}
 8012668:	bf00      	nop
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b082      	sub	sp, #8
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	460b      	mov	r3, r1
 801267a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012682:	78fa      	ldrb	r2, [r7, #3]
 8012684:	6879      	ldr	r1, [r7, #4]
 8012686:	4613      	mov	r3, r2
 8012688:	00db      	lsls	r3, r3, #3
 801268a:	1a9b      	subs	r3, r3, r2
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	440b      	add	r3, r1
 8012690:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	78fb      	ldrb	r3, [r7, #3]
 8012698:	4619      	mov	r1, r3
 801269a:	f7fe fc88 	bl	8010fae <USBD_LL_DataOutStage>
}
 801269e:	bf00      	nop
 80126a0:	3708      	adds	r7, #8
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126a6:	b580      	push	{r7, lr}
 80126a8:	b082      	sub	sp, #8
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	460b      	mov	r3, r1
 80126b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80126b8:	78fa      	ldrb	r2, [r7, #3]
 80126ba:	6879      	ldr	r1, [r7, #4]
 80126bc:	4613      	mov	r3, r2
 80126be:	00db      	lsls	r3, r3, #3
 80126c0:	1a9b      	subs	r3, r3, r2
 80126c2:	009b      	lsls	r3, r3, #2
 80126c4:	440b      	add	r3, r1
 80126c6:	3348      	adds	r3, #72	; 0x48
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	78fb      	ldrb	r3, [r7, #3]
 80126cc:	4619      	mov	r1, r3
 80126ce:	f7fe fcd3 	bl	8011078 <USBD_LL_DataInStage>
}
 80126d2:	bf00      	nop
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b082      	sub	sp, #8
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fe fddc 	bl	80112a6 <USBD_LL_SOF>
}
 80126ee:	bf00      	nop
 80126f0:	3708      	adds	r7, #8
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b084      	sub	sp, #16
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80126fe:	2301      	movs	r3, #1
 8012700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d102      	bne.n	8012710 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801270a:	2300      	movs	r3, #0
 801270c:	73fb      	strb	r3, [r7, #15]
 801270e:	e008      	b.n	8012722 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	2b02      	cmp	r3, #2
 8012716:	d102      	bne.n	801271e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012718:	2301      	movs	r3, #1
 801271a:	73fb      	strb	r3, [r7, #15]
 801271c:	e001      	b.n	8012722 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801271e:	f7ee fbf3 	bl	8000f08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012728:	7bfa      	ldrb	r2, [r7, #15]
 801272a:	4611      	mov	r1, r2
 801272c:	4618      	mov	r0, r3
 801272e:	f7fe fd7c 	bl	801122a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012738:	4618      	mov	r0, r3
 801273a:	f7fe fd35 	bl	80111a8 <USBD_LL_Reset>
}
 801273e:	bf00      	nop
 8012740:	3710      	adds	r7, #16
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
	...

08012748 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012756:	4618      	mov	r0, r3
 8012758:	f7fe fd77 	bl	801124a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	6812      	ldr	r2, [r2, #0]
 801276a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801276e:	f043 0301 	orr.w	r3, r3, #1
 8012772:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6a1b      	ldr	r3, [r3, #32]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d005      	beq.n	8012788 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801277c:	4b04      	ldr	r3, [pc, #16]	; (8012790 <HAL_PCD_SuspendCallback+0x48>)
 801277e:	691b      	ldr	r3, [r3, #16]
 8012780:	4a03      	ldr	r2, [pc, #12]	; (8012790 <HAL_PCD_SuspendCallback+0x48>)
 8012782:	f043 0306 	orr.w	r3, r3, #6
 8012786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012788:	bf00      	nop
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	e000ed00 	.word	0xe000ed00

08012794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fe fd67 	bl	8011276 <USBD_LL_Resume>
}
 80127a8:	bf00      	nop
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	460b      	mov	r3, r1
 80127ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127c2:	78fa      	ldrb	r2, [r7, #3]
 80127c4:	4611      	mov	r1, r2
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe fd95 	bl	80112f6 <USBD_LL_IsoOUTIncomplete>
}
 80127cc:	bf00      	nop
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}

080127d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b082      	sub	sp, #8
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
 80127dc:	460b      	mov	r3, r1
 80127de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127e6:	78fa      	ldrb	r2, [r7, #3]
 80127e8:	4611      	mov	r1, r2
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7fe fd76 	bl	80112dc <USBD_LL_IsoINIncomplete>
}
 80127f0:	bf00      	nop
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012806:	4618      	mov	r0, r3
 8012808:	f7fe fd82 	bl	8011310 <USBD_LL_DevConnected>
}
 801280c:	bf00      	nop
 801280e:	3708      	adds	r7, #8
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012822:	4618      	mov	r0, r3
 8012824:	f7fe fd7f 	bl	8011326 <USBD_LL_DevDisconnected>
}
 8012828:	bf00      	nop
 801282a:	3708      	adds	r7, #8
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d13e      	bne.n	80128be <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012840:	4a21      	ldr	r2, [pc, #132]	; (80128c8 <USBD_LL_Init+0x98>)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	4a1f      	ldr	r2, [pc, #124]	; (80128c8 <USBD_LL_Init+0x98>)
 801284c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012850:	4b1d      	ldr	r3, [pc, #116]	; (80128c8 <USBD_LL_Init+0x98>)
 8012852:	4a1e      	ldr	r2, [pc, #120]	; (80128cc <USBD_LL_Init+0x9c>)
 8012854:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8012856:	4b1c      	ldr	r3, [pc, #112]	; (80128c8 <USBD_LL_Init+0x98>)
 8012858:	2209      	movs	r2, #9
 801285a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801285c:	4b1a      	ldr	r3, [pc, #104]	; (80128c8 <USBD_LL_Init+0x98>)
 801285e:	2202      	movs	r2, #2
 8012860:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012862:	4b19      	ldr	r3, [pc, #100]	; (80128c8 <USBD_LL_Init+0x98>)
 8012864:	2200      	movs	r2, #0
 8012866:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012868:	4b17      	ldr	r3, [pc, #92]	; (80128c8 <USBD_LL_Init+0x98>)
 801286a:	2202      	movs	r2, #2
 801286c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801286e:	4b16      	ldr	r3, [pc, #88]	; (80128c8 <USBD_LL_Init+0x98>)
 8012870:	2200      	movs	r2, #0
 8012872:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012874:	4b14      	ldr	r3, [pc, #80]	; (80128c8 <USBD_LL_Init+0x98>)
 8012876:	2200      	movs	r2, #0
 8012878:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801287a:	4b13      	ldr	r3, [pc, #76]	; (80128c8 <USBD_LL_Init+0x98>)
 801287c:	2200      	movs	r2, #0
 801287e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012880:	4b11      	ldr	r3, [pc, #68]	; (80128c8 <USBD_LL_Init+0x98>)
 8012882:	2200      	movs	r2, #0
 8012884:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012886:	4b10      	ldr	r3, [pc, #64]	; (80128c8 <USBD_LL_Init+0x98>)
 8012888:	2200      	movs	r2, #0
 801288a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801288c:	4b0e      	ldr	r3, [pc, #56]	; (80128c8 <USBD_LL_Init+0x98>)
 801288e:	2200      	movs	r2, #0
 8012890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012892:	480d      	ldr	r0, [pc, #52]	; (80128c8 <USBD_LL_Init+0x98>)
 8012894:	f7f2 ff0a 	bl	80056ac <HAL_PCD_Init>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801289e:	f7ee fb33 	bl	8000f08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80128a2:	2180      	movs	r1, #128	; 0x80
 80128a4:	4808      	ldr	r0, [pc, #32]	; (80128c8 <USBD_LL_Init+0x98>)
 80128a6:	f7f4 f89c 	bl	80069e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80128aa:	2240      	movs	r2, #64	; 0x40
 80128ac:	2100      	movs	r1, #0
 80128ae:	4806      	ldr	r0, [pc, #24]	; (80128c8 <USBD_LL_Init+0x98>)
 80128b0:	f7f4 f850 	bl	8006954 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80128b4:	2280      	movs	r2, #128	; 0x80
 80128b6:	2101      	movs	r1, #1
 80128b8:	4803      	ldr	r0, [pc, #12]	; (80128c8 <USBD_LL_Init+0x98>)
 80128ba:	f7f4 f84b 	bl	8006954 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80128be:	2300      	movs	r3, #0
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3708      	adds	r7, #8
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	24003e58 	.word	0x24003e58
 80128cc:	40080000 	.word	0x40080000

080128d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128d8:	2300      	movs	r3, #0
 80128da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128dc:	2300      	movs	r3, #0
 80128de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7f3 f804 	bl	80058f4 <HAL_PCD_Start>
 80128ec:	4603      	mov	r3, r0
 80128ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128f0:	7bfb      	ldrb	r3, [r7, #15]
 80128f2:	4618      	mov	r0, r3
 80128f4:	f000 f92a 	bl	8012b4c <USBD_Get_USB_Status>
 80128f8:	4603      	mov	r3, r0
 80128fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b084      	sub	sp, #16
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
 801290e:	4608      	mov	r0, r1
 8012910:	4611      	mov	r1, r2
 8012912:	461a      	mov	r2, r3
 8012914:	4603      	mov	r3, r0
 8012916:	70fb      	strb	r3, [r7, #3]
 8012918:	460b      	mov	r3, r1
 801291a:	70bb      	strb	r3, [r7, #2]
 801291c:	4613      	mov	r3, r2
 801291e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012920:	2300      	movs	r3, #0
 8012922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012924:	2300      	movs	r3, #0
 8012926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801292e:	78bb      	ldrb	r3, [r7, #2]
 8012930:	883a      	ldrh	r2, [r7, #0]
 8012932:	78f9      	ldrb	r1, [r7, #3]
 8012934:	f7f3 fc15 	bl	8006162 <HAL_PCD_EP_Open>
 8012938:	4603      	mov	r3, r0
 801293a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801293c:	7bfb      	ldrb	r3, [r7, #15]
 801293e:	4618      	mov	r0, r3
 8012940:	f000 f904 	bl	8012b4c <USBD_Get_USB_Status>
 8012944:	4603      	mov	r3, r0
 8012946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012948:	7bbb      	ldrb	r3, [r7, #14]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b084      	sub	sp, #16
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	460b      	mov	r3, r1
 801295c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801295e:	2300      	movs	r3, #0
 8012960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012962:	2300      	movs	r3, #0
 8012964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801296c:	78fa      	ldrb	r2, [r7, #3]
 801296e:	4611      	mov	r1, r2
 8012970:	4618      	mov	r0, r3
 8012972:	f7f3 fc5e 	bl	8006232 <HAL_PCD_EP_Close>
 8012976:	4603      	mov	r3, r0
 8012978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801297a:	7bfb      	ldrb	r3, [r7, #15]
 801297c:	4618      	mov	r0, r3
 801297e:	f000 f8e5 	bl	8012b4c <USBD_Get_USB_Status>
 8012982:	4603      	mov	r3, r0
 8012984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012986:	7bbb      	ldrb	r3, [r7, #14]
}
 8012988:	4618      	mov	r0, r3
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}

08012990 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b084      	sub	sp, #16
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	460b      	mov	r3, r1
 801299a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801299c:	2300      	movs	r3, #0
 801299e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129a0:	2300      	movs	r3, #0
 80129a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129aa:	78fa      	ldrb	r2, [r7, #3]
 80129ac:	4611      	mov	r1, r2
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7f3 fd36 	bl	8006420 <HAL_PCD_EP_SetStall>
 80129b4:	4603      	mov	r3, r0
 80129b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129b8:	7bfb      	ldrb	r3, [r7, #15]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 f8c6 	bl	8012b4c <USBD_Get_USB_Status>
 80129c0:	4603      	mov	r3, r0
 80129c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b084      	sub	sp, #16
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
 80129d6:	460b      	mov	r3, r1
 80129d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129da:	2300      	movs	r3, #0
 80129dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129de:	2300      	movs	r3, #0
 80129e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129e8:	78fa      	ldrb	r2, [r7, #3]
 80129ea:	4611      	mov	r1, r2
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7f3 fd7b 	bl	80064e8 <HAL_PCD_EP_ClrStall>
 80129f2:	4603      	mov	r3, r0
 80129f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f000 f8a7 	bl	8012b4c <USBD_Get_USB_Status>
 80129fe:	4603      	mov	r3, r0
 8012a00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3710      	adds	r7, #16
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b085      	sub	sp, #20
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	460b      	mov	r3, r1
 8012a16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	da0b      	bge.n	8012a40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012a28:	78fb      	ldrb	r3, [r7, #3]
 8012a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a2e:	68f9      	ldr	r1, [r7, #12]
 8012a30:	4613      	mov	r3, r2
 8012a32:	00db      	lsls	r3, r3, #3
 8012a34:	1a9b      	subs	r3, r3, r2
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	440b      	add	r3, r1
 8012a3a:	333e      	adds	r3, #62	; 0x3e
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	e00b      	b.n	8012a58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012a40:	78fb      	ldrb	r3, [r7, #3]
 8012a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a46:	68f9      	ldr	r1, [r7, #12]
 8012a48:	4613      	mov	r3, r2
 8012a4a:	00db      	lsls	r3, r3, #3
 8012a4c:	1a9b      	subs	r3, r3, r2
 8012a4e:	009b      	lsls	r3, r3, #2
 8012a50:	440b      	add	r3, r1
 8012a52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3714      	adds	r7, #20
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr

08012a64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
 8012a6c:	460b      	mov	r3, r1
 8012a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a70:	2300      	movs	r3, #0
 8012a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a74:	2300      	movs	r3, #0
 8012a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a7e:	78fa      	ldrb	r2, [r7, #3]
 8012a80:	4611      	mov	r1, r2
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f3 fb48 	bl	8006118 <HAL_PCD_SetAddress>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a8c:	7bfb      	ldrb	r3, [r7, #15]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f000 f85c 	bl	8012b4c <USBD_Get_USB_Status>
 8012a94:	4603      	mov	r3, r0
 8012a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3710      	adds	r7, #16
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012aa2:	b580      	push	{r7, lr}
 8012aa4:	b086      	sub	sp, #24
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	60f8      	str	r0, [r7, #12]
 8012aaa:	607a      	str	r2, [r7, #4]
 8012aac:	603b      	str	r3, [r7, #0]
 8012aae:	460b      	mov	r3, r1
 8012ab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012ac0:	7af9      	ldrb	r1, [r7, #11]
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	f7f3 fc61 	bl	800638c <HAL_PCD_EP_Transmit>
 8012aca:	4603      	mov	r3, r0
 8012acc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ace:	7dfb      	ldrb	r3, [r7, #23]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f000 f83b 	bl	8012b4c <USBD_Get_USB_Status>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012ada:	7dbb      	ldrb	r3, [r7, #22]
}
 8012adc:	4618      	mov	r0, r3
 8012ade:	3718      	adds	r7, #24
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}

08012ae4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b086      	sub	sp, #24
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	60f8      	str	r0, [r7, #12]
 8012aec:	607a      	str	r2, [r7, #4]
 8012aee:	603b      	str	r3, [r7, #0]
 8012af0:	460b      	mov	r3, r1
 8012af2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012af4:	2300      	movs	r3, #0
 8012af6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012af8:	2300      	movs	r3, #0
 8012afa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012b02:	7af9      	ldrb	r1, [r7, #11]
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	687a      	ldr	r2, [r7, #4]
 8012b08:	f7f3 fbdd 	bl	80062c6 <HAL_PCD_EP_Receive>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b10:	7dfb      	ldrb	r3, [r7, #23]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f000 f81a 	bl	8012b4c <USBD_Get_USB_Status>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012b1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3718      	adds	r7, #24
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}

08012b26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b26:	b580      	push	{r7, lr}
 8012b28:	b082      	sub	sp, #8
 8012b2a:	af00      	add	r7, sp, #0
 8012b2c:	6078      	str	r0, [r7, #4]
 8012b2e:	460b      	mov	r3, r1
 8012b30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b38:	78fa      	ldrb	r2, [r7, #3]
 8012b3a:	4611      	mov	r1, r2
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7f3 fc0d 	bl	800635c <HAL_PCD_EP_GetRxCount>
 8012b42:	4603      	mov	r3, r0
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}

08012b4c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b085      	sub	sp, #20
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	4603      	mov	r3, r0
 8012b54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b56:	2300      	movs	r3, #0
 8012b58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012b5a:	79fb      	ldrb	r3, [r7, #7]
 8012b5c:	2b03      	cmp	r3, #3
 8012b5e:	d817      	bhi.n	8012b90 <USBD_Get_USB_Status+0x44>
 8012b60:	a201      	add	r2, pc, #4	; (adr r2, 8012b68 <USBD_Get_USB_Status+0x1c>)
 8012b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b66:	bf00      	nop
 8012b68:	08012b79 	.word	0x08012b79
 8012b6c:	08012b7f 	.word	0x08012b7f
 8012b70:	08012b85 	.word	0x08012b85
 8012b74:	08012b8b 	.word	0x08012b8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b7c:	e00b      	b.n	8012b96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b7e:	2303      	movs	r3, #3
 8012b80:	73fb      	strb	r3, [r7, #15]
    break;
 8012b82:	e008      	b.n	8012b96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b84:	2301      	movs	r3, #1
 8012b86:	73fb      	strb	r3, [r7, #15]
    break;
 8012b88:	e005      	b.n	8012b96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b8a:	2303      	movs	r3, #3
 8012b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8012b8e:	e002      	b.n	8012b96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012b90:	2303      	movs	r3, #3
 8012b92:	73fb      	strb	r3, [r7, #15]
    break;
 8012b94:	bf00      	nop
  }
  return usb_status;
 8012b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3714      	adds	r7, #20
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr

08012ba4 <__errno>:
 8012ba4:	4b01      	ldr	r3, [pc, #4]	; (8012bac <__errno+0x8>)
 8012ba6:	6818      	ldr	r0, [r3, #0]
 8012ba8:	4770      	bx	lr
 8012baa:	bf00      	nop
 8012bac:	24000288 	.word	0x24000288

08012bb0 <__libc_init_array>:
 8012bb0:	b570      	push	{r4, r5, r6, lr}
 8012bb2:	4d0d      	ldr	r5, [pc, #52]	; (8012be8 <__libc_init_array+0x38>)
 8012bb4:	4c0d      	ldr	r4, [pc, #52]	; (8012bec <__libc_init_array+0x3c>)
 8012bb6:	1b64      	subs	r4, r4, r5
 8012bb8:	10a4      	asrs	r4, r4, #2
 8012bba:	2600      	movs	r6, #0
 8012bbc:	42a6      	cmp	r6, r4
 8012bbe:	d109      	bne.n	8012bd4 <__libc_init_array+0x24>
 8012bc0:	4d0b      	ldr	r5, [pc, #44]	; (8012bf0 <__libc_init_array+0x40>)
 8012bc2:	4c0c      	ldr	r4, [pc, #48]	; (8012bf4 <__libc_init_array+0x44>)
 8012bc4:	f002 fe2c 	bl	8015820 <_init>
 8012bc8:	1b64      	subs	r4, r4, r5
 8012bca:	10a4      	asrs	r4, r4, #2
 8012bcc:	2600      	movs	r6, #0
 8012bce:	42a6      	cmp	r6, r4
 8012bd0:	d105      	bne.n	8012bde <__libc_init_array+0x2e>
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bd8:	4798      	blx	r3
 8012bda:	3601      	adds	r6, #1
 8012bdc:	e7ee      	b.n	8012bbc <__libc_init_array+0xc>
 8012bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8012be2:	4798      	blx	r3
 8012be4:	3601      	adds	r6, #1
 8012be6:	e7f2      	b.n	8012bce <__libc_init_array+0x1e>
 8012be8:	08015ccc 	.word	0x08015ccc
 8012bec:	08015ccc 	.word	0x08015ccc
 8012bf0:	08015ccc 	.word	0x08015ccc
 8012bf4:	08015cd0 	.word	0x08015cd0

08012bf8 <malloc>:
 8012bf8:	4b02      	ldr	r3, [pc, #8]	; (8012c04 <malloc+0xc>)
 8012bfa:	4601      	mov	r1, r0
 8012bfc:	6818      	ldr	r0, [r3, #0]
 8012bfe:	f000 b863 	b.w	8012cc8 <_malloc_r>
 8012c02:	bf00      	nop
 8012c04:	24000288 	.word	0x24000288

08012c08 <free>:
 8012c08:	4b02      	ldr	r3, [pc, #8]	; (8012c14 <free+0xc>)
 8012c0a:	4601      	mov	r1, r0
 8012c0c:	6818      	ldr	r0, [r3, #0]
 8012c0e:	f000 b80b 	b.w	8012c28 <_free_r>
 8012c12:	bf00      	nop
 8012c14:	24000288 	.word	0x24000288

08012c18 <memset>:
 8012c18:	4402      	add	r2, r0
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d100      	bne.n	8012c22 <memset+0xa>
 8012c20:	4770      	bx	lr
 8012c22:	f803 1b01 	strb.w	r1, [r3], #1
 8012c26:	e7f9      	b.n	8012c1c <memset+0x4>

08012c28 <_free_r>:
 8012c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c2a:	2900      	cmp	r1, #0
 8012c2c:	d048      	beq.n	8012cc0 <_free_r+0x98>
 8012c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c32:	9001      	str	r0, [sp, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f1a1 0404 	sub.w	r4, r1, #4
 8012c3a:	bfb8      	it	lt
 8012c3c:	18e4      	addlt	r4, r4, r3
 8012c3e:	f001 fb33 	bl	80142a8 <__malloc_lock>
 8012c42:	4a20      	ldr	r2, [pc, #128]	; (8012cc4 <_free_r+0x9c>)
 8012c44:	9801      	ldr	r0, [sp, #4]
 8012c46:	6813      	ldr	r3, [r2, #0]
 8012c48:	4615      	mov	r5, r2
 8012c4a:	b933      	cbnz	r3, 8012c5a <_free_r+0x32>
 8012c4c:	6063      	str	r3, [r4, #4]
 8012c4e:	6014      	str	r4, [r2, #0]
 8012c50:	b003      	add	sp, #12
 8012c52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c56:	f001 bb2d 	b.w	80142b4 <__malloc_unlock>
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	d90b      	bls.n	8012c76 <_free_r+0x4e>
 8012c5e:	6821      	ldr	r1, [r4, #0]
 8012c60:	1862      	adds	r2, r4, r1
 8012c62:	4293      	cmp	r3, r2
 8012c64:	bf04      	itt	eq
 8012c66:	681a      	ldreq	r2, [r3, #0]
 8012c68:	685b      	ldreq	r3, [r3, #4]
 8012c6a:	6063      	str	r3, [r4, #4]
 8012c6c:	bf04      	itt	eq
 8012c6e:	1852      	addeq	r2, r2, r1
 8012c70:	6022      	streq	r2, [r4, #0]
 8012c72:	602c      	str	r4, [r5, #0]
 8012c74:	e7ec      	b.n	8012c50 <_free_r+0x28>
 8012c76:	461a      	mov	r2, r3
 8012c78:	685b      	ldr	r3, [r3, #4]
 8012c7a:	b10b      	cbz	r3, 8012c80 <_free_r+0x58>
 8012c7c:	42a3      	cmp	r3, r4
 8012c7e:	d9fa      	bls.n	8012c76 <_free_r+0x4e>
 8012c80:	6811      	ldr	r1, [r2, #0]
 8012c82:	1855      	adds	r5, r2, r1
 8012c84:	42a5      	cmp	r5, r4
 8012c86:	d10b      	bne.n	8012ca0 <_free_r+0x78>
 8012c88:	6824      	ldr	r4, [r4, #0]
 8012c8a:	4421      	add	r1, r4
 8012c8c:	1854      	adds	r4, r2, r1
 8012c8e:	42a3      	cmp	r3, r4
 8012c90:	6011      	str	r1, [r2, #0]
 8012c92:	d1dd      	bne.n	8012c50 <_free_r+0x28>
 8012c94:	681c      	ldr	r4, [r3, #0]
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	6053      	str	r3, [r2, #4]
 8012c9a:	4421      	add	r1, r4
 8012c9c:	6011      	str	r1, [r2, #0]
 8012c9e:	e7d7      	b.n	8012c50 <_free_r+0x28>
 8012ca0:	d902      	bls.n	8012ca8 <_free_r+0x80>
 8012ca2:	230c      	movs	r3, #12
 8012ca4:	6003      	str	r3, [r0, #0]
 8012ca6:	e7d3      	b.n	8012c50 <_free_r+0x28>
 8012ca8:	6825      	ldr	r5, [r4, #0]
 8012caa:	1961      	adds	r1, r4, r5
 8012cac:	428b      	cmp	r3, r1
 8012cae:	bf04      	itt	eq
 8012cb0:	6819      	ldreq	r1, [r3, #0]
 8012cb2:	685b      	ldreq	r3, [r3, #4]
 8012cb4:	6063      	str	r3, [r4, #4]
 8012cb6:	bf04      	itt	eq
 8012cb8:	1949      	addeq	r1, r1, r5
 8012cba:	6021      	streq	r1, [r4, #0]
 8012cbc:	6054      	str	r4, [r2, #4]
 8012cbe:	e7c7      	b.n	8012c50 <_free_r+0x28>
 8012cc0:	b003      	add	sp, #12
 8012cc2:	bd30      	pop	{r4, r5, pc}
 8012cc4:	24000490 	.word	0x24000490

08012cc8 <_malloc_r>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	1ccd      	adds	r5, r1, #3
 8012ccc:	f025 0503 	bic.w	r5, r5, #3
 8012cd0:	3508      	adds	r5, #8
 8012cd2:	2d0c      	cmp	r5, #12
 8012cd4:	bf38      	it	cc
 8012cd6:	250c      	movcc	r5, #12
 8012cd8:	2d00      	cmp	r5, #0
 8012cda:	4606      	mov	r6, r0
 8012cdc:	db01      	blt.n	8012ce2 <_malloc_r+0x1a>
 8012cde:	42a9      	cmp	r1, r5
 8012ce0:	d903      	bls.n	8012cea <_malloc_r+0x22>
 8012ce2:	230c      	movs	r3, #12
 8012ce4:	6033      	str	r3, [r6, #0]
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cea:	f001 fadd 	bl	80142a8 <__malloc_lock>
 8012cee:	4921      	ldr	r1, [pc, #132]	; (8012d74 <_malloc_r+0xac>)
 8012cf0:	680a      	ldr	r2, [r1, #0]
 8012cf2:	4614      	mov	r4, r2
 8012cf4:	b99c      	cbnz	r4, 8012d1e <_malloc_r+0x56>
 8012cf6:	4f20      	ldr	r7, [pc, #128]	; (8012d78 <_malloc_r+0xb0>)
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	b923      	cbnz	r3, 8012d06 <_malloc_r+0x3e>
 8012cfc:	4621      	mov	r1, r4
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f000 fc80 	bl	8013604 <_sbrk_r>
 8012d04:	6038      	str	r0, [r7, #0]
 8012d06:	4629      	mov	r1, r5
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f000 fc7b 	bl	8013604 <_sbrk_r>
 8012d0e:	1c43      	adds	r3, r0, #1
 8012d10:	d123      	bne.n	8012d5a <_malloc_r+0x92>
 8012d12:	230c      	movs	r3, #12
 8012d14:	6033      	str	r3, [r6, #0]
 8012d16:	4630      	mov	r0, r6
 8012d18:	f001 facc 	bl	80142b4 <__malloc_unlock>
 8012d1c:	e7e3      	b.n	8012ce6 <_malloc_r+0x1e>
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	1b5b      	subs	r3, r3, r5
 8012d22:	d417      	bmi.n	8012d54 <_malloc_r+0x8c>
 8012d24:	2b0b      	cmp	r3, #11
 8012d26:	d903      	bls.n	8012d30 <_malloc_r+0x68>
 8012d28:	6023      	str	r3, [r4, #0]
 8012d2a:	441c      	add	r4, r3
 8012d2c:	6025      	str	r5, [r4, #0]
 8012d2e:	e004      	b.n	8012d3a <_malloc_r+0x72>
 8012d30:	6863      	ldr	r3, [r4, #4]
 8012d32:	42a2      	cmp	r2, r4
 8012d34:	bf0c      	ite	eq
 8012d36:	600b      	streq	r3, [r1, #0]
 8012d38:	6053      	strne	r3, [r2, #4]
 8012d3a:	4630      	mov	r0, r6
 8012d3c:	f001 faba 	bl	80142b4 <__malloc_unlock>
 8012d40:	f104 000b 	add.w	r0, r4, #11
 8012d44:	1d23      	adds	r3, r4, #4
 8012d46:	f020 0007 	bic.w	r0, r0, #7
 8012d4a:	1ac2      	subs	r2, r0, r3
 8012d4c:	d0cc      	beq.n	8012ce8 <_malloc_r+0x20>
 8012d4e:	1a1b      	subs	r3, r3, r0
 8012d50:	50a3      	str	r3, [r4, r2]
 8012d52:	e7c9      	b.n	8012ce8 <_malloc_r+0x20>
 8012d54:	4622      	mov	r2, r4
 8012d56:	6864      	ldr	r4, [r4, #4]
 8012d58:	e7cc      	b.n	8012cf4 <_malloc_r+0x2c>
 8012d5a:	1cc4      	adds	r4, r0, #3
 8012d5c:	f024 0403 	bic.w	r4, r4, #3
 8012d60:	42a0      	cmp	r0, r4
 8012d62:	d0e3      	beq.n	8012d2c <_malloc_r+0x64>
 8012d64:	1a21      	subs	r1, r4, r0
 8012d66:	4630      	mov	r0, r6
 8012d68:	f000 fc4c 	bl	8013604 <_sbrk_r>
 8012d6c:	3001      	adds	r0, #1
 8012d6e:	d1dd      	bne.n	8012d2c <_malloc_r+0x64>
 8012d70:	e7cf      	b.n	8012d12 <_malloc_r+0x4a>
 8012d72:	bf00      	nop
 8012d74:	24000490 	.word	0x24000490
 8012d78:	24000494 	.word	0x24000494

08012d7c <__cvt>:
 8012d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d7e:	ed2d 8b02 	vpush	{d8}
 8012d82:	eeb0 8b40 	vmov.f64	d8, d0
 8012d86:	b085      	sub	sp, #20
 8012d88:	4617      	mov	r7, r2
 8012d8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012d8c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012d8e:	ee18 2a90 	vmov	r2, s17
 8012d92:	f025 0520 	bic.w	r5, r5, #32
 8012d96:	2a00      	cmp	r2, #0
 8012d98:	bfb6      	itet	lt
 8012d9a:	222d      	movlt	r2, #45	; 0x2d
 8012d9c:	2200      	movge	r2, #0
 8012d9e:	eeb1 8b40 	vneglt.f64	d8, d0
 8012da2:	2d46      	cmp	r5, #70	; 0x46
 8012da4:	460c      	mov	r4, r1
 8012da6:	701a      	strb	r2, [r3, #0]
 8012da8:	d004      	beq.n	8012db4 <__cvt+0x38>
 8012daa:	2d45      	cmp	r5, #69	; 0x45
 8012dac:	d100      	bne.n	8012db0 <__cvt+0x34>
 8012dae:	3401      	adds	r4, #1
 8012db0:	2102      	movs	r1, #2
 8012db2:	e000      	b.n	8012db6 <__cvt+0x3a>
 8012db4:	2103      	movs	r1, #3
 8012db6:	ab03      	add	r3, sp, #12
 8012db8:	9301      	str	r3, [sp, #4]
 8012dba:	ab02      	add	r3, sp, #8
 8012dbc:	9300      	str	r3, [sp, #0]
 8012dbe:	4622      	mov	r2, r4
 8012dc0:	4633      	mov	r3, r6
 8012dc2:	eeb0 0b48 	vmov.f64	d0, d8
 8012dc6:	f000 fcdb 	bl	8013780 <_dtoa_r>
 8012dca:	2d47      	cmp	r5, #71	; 0x47
 8012dcc:	d109      	bne.n	8012de2 <__cvt+0x66>
 8012dce:	07fb      	lsls	r3, r7, #31
 8012dd0:	d407      	bmi.n	8012de2 <__cvt+0x66>
 8012dd2:	9b03      	ldr	r3, [sp, #12]
 8012dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012dd6:	1a1b      	subs	r3, r3, r0
 8012dd8:	6013      	str	r3, [r2, #0]
 8012dda:	b005      	add	sp, #20
 8012ddc:	ecbd 8b02 	vpop	{d8}
 8012de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012de2:	2d46      	cmp	r5, #70	; 0x46
 8012de4:	eb00 0204 	add.w	r2, r0, r4
 8012de8:	d10c      	bne.n	8012e04 <__cvt+0x88>
 8012dea:	7803      	ldrb	r3, [r0, #0]
 8012dec:	2b30      	cmp	r3, #48	; 0x30
 8012dee:	d107      	bne.n	8012e00 <__cvt+0x84>
 8012df0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df8:	bf1c      	itt	ne
 8012dfa:	f1c4 0401 	rsbne	r4, r4, #1
 8012dfe:	6034      	strne	r4, [r6, #0]
 8012e00:	6833      	ldr	r3, [r6, #0]
 8012e02:	441a      	add	r2, r3
 8012e04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e0c:	bf08      	it	eq
 8012e0e:	9203      	streq	r2, [sp, #12]
 8012e10:	2130      	movs	r1, #48	; 0x30
 8012e12:	9b03      	ldr	r3, [sp, #12]
 8012e14:	4293      	cmp	r3, r2
 8012e16:	d2dc      	bcs.n	8012dd2 <__cvt+0x56>
 8012e18:	1c5c      	adds	r4, r3, #1
 8012e1a:	9403      	str	r4, [sp, #12]
 8012e1c:	7019      	strb	r1, [r3, #0]
 8012e1e:	e7f8      	b.n	8012e12 <__cvt+0x96>

08012e20 <__exponent>:
 8012e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e22:	4603      	mov	r3, r0
 8012e24:	2900      	cmp	r1, #0
 8012e26:	bfb8      	it	lt
 8012e28:	4249      	neglt	r1, r1
 8012e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8012e2e:	bfb4      	ite	lt
 8012e30:	222d      	movlt	r2, #45	; 0x2d
 8012e32:	222b      	movge	r2, #43	; 0x2b
 8012e34:	2909      	cmp	r1, #9
 8012e36:	7042      	strb	r2, [r0, #1]
 8012e38:	dd2a      	ble.n	8012e90 <__exponent+0x70>
 8012e3a:	f10d 0407 	add.w	r4, sp, #7
 8012e3e:	46a4      	mov	ip, r4
 8012e40:	270a      	movs	r7, #10
 8012e42:	46a6      	mov	lr, r4
 8012e44:	460a      	mov	r2, r1
 8012e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8012e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8012e4e:	3530      	adds	r5, #48	; 0x30
 8012e50:	2a63      	cmp	r2, #99	; 0x63
 8012e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8012e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012e5a:	4631      	mov	r1, r6
 8012e5c:	dcf1      	bgt.n	8012e42 <__exponent+0x22>
 8012e5e:	3130      	adds	r1, #48	; 0x30
 8012e60:	f1ae 0502 	sub.w	r5, lr, #2
 8012e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012e68:	1c44      	adds	r4, r0, #1
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	4561      	cmp	r1, ip
 8012e6e:	d30a      	bcc.n	8012e86 <__exponent+0x66>
 8012e70:	f10d 0209 	add.w	r2, sp, #9
 8012e74:	eba2 020e 	sub.w	r2, r2, lr
 8012e78:	4565      	cmp	r5, ip
 8012e7a:	bf88      	it	hi
 8012e7c:	2200      	movhi	r2, #0
 8012e7e:	4413      	add	r3, r2
 8012e80:	1a18      	subs	r0, r3, r0
 8012e82:	b003      	add	sp, #12
 8012e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012e8e:	e7ed      	b.n	8012e6c <__exponent+0x4c>
 8012e90:	2330      	movs	r3, #48	; 0x30
 8012e92:	3130      	adds	r1, #48	; 0x30
 8012e94:	7083      	strb	r3, [r0, #2]
 8012e96:	70c1      	strb	r1, [r0, #3]
 8012e98:	1d03      	adds	r3, r0, #4
 8012e9a:	e7f1      	b.n	8012e80 <__exponent+0x60>
 8012e9c:	0000      	movs	r0, r0
	...

08012ea0 <_printf_float>:
 8012ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	b08b      	sub	sp, #44	; 0x2c
 8012ea6:	460c      	mov	r4, r1
 8012ea8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012eac:	4616      	mov	r6, r2
 8012eae:	461f      	mov	r7, r3
 8012eb0:	4605      	mov	r5, r0
 8012eb2:	f001 f9e7 	bl	8014284 <_localeconv_r>
 8012eb6:	f8d0 b000 	ldr.w	fp, [r0]
 8012eba:	4658      	mov	r0, fp
 8012ebc:	f7ed fa10 	bl	80002e0 <strlen>
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	9308      	str	r3, [sp, #32]
 8012ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8012ec8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012ecc:	6822      	ldr	r2, [r4, #0]
 8012ece:	3307      	adds	r3, #7
 8012ed0:	f023 0307 	bic.w	r3, r3, #7
 8012ed4:	f103 0108 	add.w	r1, r3, #8
 8012ed8:	f8c8 1000 	str.w	r1, [r8]
 8012edc:	4682      	mov	sl, r0
 8012ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012ee2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8012ee6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013148 <_printf_float+0x2a8>
 8012eea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8012eee:	eeb0 6bc0 	vabs.f64	d6, d0
 8012ef2:	eeb4 6b47 	vcmp.f64	d6, d7
 8012ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012efa:	dd24      	ble.n	8012f46 <_printf_float+0xa6>
 8012efc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f04:	d502      	bpl.n	8012f0c <_printf_float+0x6c>
 8012f06:	232d      	movs	r3, #45	; 0x2d
 8012f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f0c:	4b90      	ldr	r3, [pc, #576]	; (8013150 <_printf_float+0x2b0>)
 8012f0e:	4891      	ldr	r0, [pc, #580]	; (8013154 <_printf_float+0x2b4>)
 8012f10:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012f14:	bf94      	ite	ls
 8012f16:	4698      	movls	r8, r3
 8012f18:	4680      	movhi	r8, r0
 8012f1a:	2303      	movs	r3, #3
 8012f1c:	6123      	str	r3, [r4, #16]
 8012f1e:	f022 0204 	bic.w	r2, r2, #4
 8012f22:	2300      	movs	r3, #0
 8012f24:	6022      	str	r2, [r4, #0]
 8012f26:	9304      	str	r3, [sp, #16]
 8012f28:	9700      	str	r7, [sp, #0]
 8012f2a:	4633      	mov	r3, r6
 8012f2c:	aa09      	add	r2, sp, #36	; 0x24
 8012f2e:	4621      	mov	r1, r4
 8012f30:	4628      	mov	r0, r5
 8012f32:	f000 f9d3 	bl	80132dc <_printf_common>
 8012f36:	3001      	adds	r0, #1
 8012f38:	f040 808a 	bne.w	8013050 <_printf_float+0x1b0>
 8012f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012f40:	b00b      	add	sp, #44	; 0x2c
 8012f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f46:	eeb4 0b40 	vcmp.f64	d0, d0
 8012f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f4e:	d709      	bvc.n	8012f64 <_printf_float+0xc4>
 8012f50:	ee10 3a90 	vmov	r3, s1
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	bfbc      	itt	lt
 8012f58:	232d      	movlt	r3, #45	; 0x2d
 8012f5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012f5e:	487e      	ldr	r0, [pc, #504]	; (8013158 <_printf_float+0x2b8>)
 8012f60:	4b7e      	ldr	r3, [pc, #504]	; (801315c <_printf_float+0x2bc>)
 8012f62:	e7d5      	b.n	8012f10 <_printf_float+0x70>
 8012f64:	6863      	ldr	r3, [r4, #4]
 8012f66:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012f6a:	9104      	str	r1, [sp, #16]
 8012f6c:	1c59      	adds	r1, r3, #1
 8012f6e:	d13c      	bne.n	8012fea <_printf_float+0x14a>
 8012f70:	2306      	movs	r3, #6
 8012f72:	6063      	str	r3, [r4, #4]
 8012f74:	2300      	movs	r3, #0
 8012f76:	9303      	str	r3, [sp, #12]
 8012f78:	ab08      	add	r3, sp, #32
 8012f7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012f7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012f82:	ab07      	add	r3, sp, #28
 8012f84:	6861      	ldr	r1, [r4, #4]
 8012f86:	9300      	str	r3, [sp, #0]
 8012f88:	6022      	str	r2, [r4, #0]
 8012f8a:	f10d 031b 	add.w	r3, sp, #27
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f7ff fef4 	bl	8012d7c <__cvt>
 8012f94:	9b04      	ldr	r3, [sp, #16]
 8012f96:	9907      	ldr	r1, [sp, #28]
 8012f98:	2b47      	cmp	r3, #71	; 0x47
 8012f9a:	4680      	mov	r8, r0
 8012f9c:	d108      	bne.n	8012fb0 <_printf_float+0x110>
 8012f9e:	1cc8      	adds	r0, r1, #3
 8012fa0:	db02      	blt.n	8012fa8 <_printf_float+0x108>
 8012fa2:	6863      	ldr	r3, [r4, #4]
 8012fa4:	4299      	cmp	r1, r3
 8012fa6:	dd41      	ble.n	801302c <_printf_float+0x18c>
 8012fa8:	f1a9 0902 	sub.w	r9, r9, #2
 8012fac:	fa5f f989 	uxtb.w	r9, r9
 8012fb0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012fb4:	d820      	bhi.n	8012ff8 <_printf_float+0x158>
 8012fb6:	3901      	subs	r1, #1
 8012fb8:	464a      	mov	r2, r9
 8012fba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012fbe:	9107      	str	r1, [sp, #28]
 8012fc0:	f7ff ff2e 	bl	8012e20 <__exponent>
 8012fc4:	9a08      	ldr	r2, [sp, #32]
 8012fc6:	9004      	str	r0, [sp, #16]
 8012fc8:	1813      	adds	r3, r2, r0
 8012fca:	2a01      	cmp	r2, #1
 8012fcc:	6123      	str	r3, [r4, #16]
 8012fce:	dc02      	bgt.n	8012fd6 <_printf_float+0x136>
 8012fd0:	6822      	ldr	r2, [r4, #0]
 8012fd2:	07d2      	lsls	r2, r2, #31
 8012fd4:	d501      	bpl.n	8012fda <_printf_float+0x13a>
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	6123      	str	r3, [r4, #16]
 8012fda:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d0a2      	beq.n	8012f28 <_printf_float+0x88>
 8012fe2:	232d      	movs	r3, #45	; 0x2d
 8012fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fe8:	e79e      	b.n	8012f28 <_printf_float+0x88>
 8012fea:	9904      	ldr	r1, [sp, #16]
 8012fec:	2947      	cmp	r1, #71	; 0x47
 8012fee:	d1c1      	bne.n	8012f74 <_printf_float+0xd4>
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d1bf      	bne.n	8012f74 <_printf_float+0xd4>
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	e7bc      	b.n	8012f72 <_printf_float+0xd2>
 8012ff8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012ffc:	d118      	bne.n	8013030 <_printf_float+0x190>
 8012ffe:	2900      	cmp	r1, #0
 8013000:	6863      	ldr	r3, [r4, #4]
 8013002:	dd0b      	ble.n	801301c <_printf_float+0x17c>
 8013004:	6121      	str	r1, [r4, #16]
 8013006:	b913      	cbnz	r3, 801300e <_printf_float+0x16e>
 8013008:	6822      	ldr	r2, [r4, #0]
 801300a:	07d0      	lsls	r0, r2, #31
 801300c:	d502      	bpl.n	8013014 <_printf_float+0x174>
 801300e:	3301      	adds	r3, #1
 8013010:	440b      	add	r3, r1
 8013012:	6123      	str	r3, [r4, #16]
 8013014:	2300      	movs	r3, #0
 8013016:	65a1      	str	r1, [r4, #88]	; 0x58
 8013018:	9304      	str	r3, [sp, #16]
 801301a:	e7de      	b.n	8012fda <_printf_float+0x13a>
 801301c:	b913      	cbnz	r3, 8013024 <_printf_float+0x184>
 801301e:	6822      	ldr	r2, [r4, #0]
 8013020:	07d2      	lsls	r2, r2, #31
 8013022:	d501      	bpl.n	8013028 <_printf_float+0x188>
 8013024:	3302      	adds	r3, #2
 8013026:	e7f4      	b.n	8013012 <_printf_float+0x172>
 8013028:	2301      	movs	r3, #1
 801302a:	e7f2      	b.n	8013012 <_printf_float+0x172>
 801302c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013030:	9b08      	ldr	r3, [sp, #32]
 8013032:	4299      	cmp	r1, r3
 8013034:	db05      	blt.n	8013042 <_printf_float+0x1a2>
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	6121      	str	r1, [r4, #16]
 801303a:	07d8      	lsls	r0, r3, #31
 801303c:	d5ea      	bpl.n	8013014 <_printf_float+0x174>
 801303e:	1c4b      	adds	r3, r1, #1
 8013040:	e7e7      	b.n	8013012 <_printf_float+0x172>
 8013042:	2900      	cmp	r1, #0
 8013044:	bfd4      	ite	le
 8013046:	f1c1 0202 	rsble	r2, r1, #2
 801304a:	2201      	movgt	r2, #1
 801304c:	4413      	add	r3, r2
 801304e:	e7e0      	b.n	8013012 <_printf_float+0x172>
 8013050:	6823      	ldr	r3, [r4, #0]
 8013052:	055a      	lsls	r2, r3, #21
 8013054:	d407      	bmi.n	8013066 <_printf_float+0x1c6>
 8013056:	6923      	ldr	r3, [r4, #16]
 8013058:	4642      	mov	r2, r8
 801305a:	4631      	mov	r1, r6
 801305c:	4628      	mov	r0, r5
 801305e:	47b8      	blx	r7
 8013060:	3001      	adds	r0, #1
 8013062:	d12a      	bne.n	80130ba <_printf_float+0x21a>
 8013064:	e76a      	b.n	8012f3c <_printf_float+0x9c>
 8013066:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801306a:	f240 80e2 	bls.w	8013232 <_printf_float+0x392>
 801306e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013072:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801307a:	d133      	bne.n	80130e4 <_printf_float+0x244>
 801307c:	4a38      	ldr	r2, [pc, #224]	; (8013160 <_printf_float+0x2c0>)
 801307e:	2301      	movs	r3, #1
 8013080:	4631      	mov	r1, r6
 8013082:	4628      	mov	r0, r5
 8013084:	47b8      	blx	r7
 8013086:	3001      	adds	r0, #1
 8013088:	f43f af58 	beq.w	8012f3c <_printf_float+0x9c>
 801308c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013090:	429a      	cmp	r2, r3
 8013092:	db02      	blt.n	801309a <_printf_float+0x1fa>
 8013094:	6823      	ldr	r3, [r4, #0]
 8013096:	07d8      	lsls	r0, r3, #31
 8013098:	d50f      	bpl.n	80130ba <_printf_float+0x21a>
 801309a:	4653      	mov	r3, sl
 801309c:	465a      	mov	r2, fp
 801309e:	4631      	mov	r1, r6
 80130a0:	4628      	mov	r0, r5
 80130a2:	47b8      	blx	r7
 80130a4:	3001      	adds	r0, #1
 80130a6:	f43f af49 	beq.w	8012f3c <_printf_float+0x9c>
 80130aa:	f04f 0800 	mov.w	r8, #0
 80130ae:	f104 091a 	add.w	r9, r4, #26
 80130b2:	9b08      	ldr	r3, [sp, #32]
 80130b4:	3b01      	subs	r3, #1
 80130b6:	4543      	cmp	r3, r8
 80130b8:	dc09      	bgt.n	80130ce <_printf_float+0x22e>
 80130ba:	6823      	ldr	r3, [r4, #0]
 80130bc:	079b      	lsls	r3, r3, #30
 80130be:	f100 8108 	bmi.w	80132d2 <_printf_float+0x432>
 80130c2:	68e0      	ldr	r0, [r4, #12]
 80130c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130c6:	4298      	cmp	r0, r3
 80130c8:	bfb8      	it	lt
 80130ca:	4618      	movlt	r0, r3
 80130cc:	e738      	b.n	8012f40 <_printf_float+0xa0>
 80130ce:	2301      	movs	r3, #1
 80130d0:	464a      	mov	r2, r9
 80130d2:	4631      	mov	r1, r6
 80130d4:	4628      	mov	r0, r5
 80130d6:	47b8      	blx	r7
 80130d8:	3001      	adds	r0, #1
 80130da:	f43f af2f 	beq.w	8012f3c <_printf_float+0x9c>
 80130de:	f108 0801 	add.w	r8, r8, #1
 80130e2:	e7e6      	b.n	80130b2 <_printf_float+0x212>
 80130e4:	9b07      	ldr	r3, [sp, #28]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	dc3c      	bgt.n	8013164 <_printf_float+0x2c4>
 80130ea:	4a1d      	ldr	r2, [pc, #116]	; (8013160 <_printf_float+0x2c0>)
 80130ec:	2301      	movs	r3, #1
 80130ee:	4631      	mov	r1, r6
 80130f0:	4628      	mov	r0, r5
 80130f2:	47b8      	blx	r7
 80130f4:	3001      	adds	r0, #1
 80130f6:	f43f af21 	beq.w	8012f3c <_printf_float+0x9c>
 80130fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80130fe:	4313      	orrs	r3, r2
 8013100:	d102      	bne.n	8013108 <_printf_float+0x268>
 8013102:	6823      	ldr	r3, [r4, #0]
 8013104:	07d9      	lsls	r1, r3, #31
 8013106:	d5d8      	bpl.n	80130ba <_printf_float+0x21a>
 8013108:	4653      	mov	r3, sl
 801310a:	465a      	mov	r2, fp
 801310c:	4631      	mov	r1, r6
 801310e:	4628      	mov	r0, r5
 8013110:	47b8      	blx	r7
 8013112:	3001      	adds	r0, #1
 8013114:	f43f af12 	beq.w	8012f3c <_printf_float+0x9c>
 8013118:	f04f 0900 	mov.w	r9, #0
 801311c:	f104 0a1a 	add.w	sl, r4, #26
 8013120:	9b07      	ldr	r3, [sp, #28]
 8013122:	425b      	negs	r3, r3
 8013124:	454b      	cmp	r3, r9
 8013126:	dc01      	bgt.n	801312c <_printf_float+0x28c>
 8013128:	9b08      	ldr	r3, [sp, #32]
 801312a:	e795      	b.n	8013058 <_printf_float+0x1b8>
 801312c:	2301      	movs	r3, #1
 801312e:	4652      	mov	r2, sl
 8013130:	4631      	mov	r1, r6
 8013132:	4628      	mov	r0, r5
 8013134:	47b8      	blx	r7
 8013136:	3001      	adds	r0, #1
 8013138:	f43f af00 	beq.w	8012f3c <_printf_float+0x9c>
 801313c:	f109 0901 	add.w	r9, r9, #1
 8013140:	e7ee      	b.n	8013120 <_printf_float+0x280>
 8013142:	bf00      	nop
 8013144:	f3af 8000 	nop.w
 8013148:	ffffffff 	.word	0xffffffff
 801314c:	7fefffff 	.word	0x7fefffff
 8013150:	080158e8 	.word	0x080158e8
 8013154:	080158ec 	.word	0x080158ec
 8013158:	080158f4 	.word	0x080158f4
 801315c:	080158f0 	.word	0x080158f0
 8013160:	080158f8 	.word	0x080158f8
 8013164:	9a08      	ldr	r2, [sp, #32]
 8013166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013168:	429a      	cmp	r2, r3
 801316a:	bfa8      	it	ge
 801316c:	461a      	movge	r2, r3
 801316e:	2a00      	cmp	r2, #0
 8013170:	4691      	mov	r9, r2
 8013172:	dc38      	bgt.n	80131e6 <_printf_float+0x346>
 8013174:	2300      	movs	r3, #0
 8013176:	9305      	str	r3, [sp, #20]
 8013178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801317c:	f104 021a 	add.w	r2, r4, #26
 8013180:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013182:	9905      	ldr	r1, [sp, #20]
 8013184:	9304      	str	r3, [sp, #16]
 8013186:	eba3 0309 	sub.w	r3, r3, r9
 801318a:	428b      	cmp	r3, r1
 801318c:	dc33      	bgt.n	80131f6 <_printf_float+0x356>
 801318e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013192:	429a      	cmp	r2, r3
 8013194:	db3c      	blt.n	8013210 <_printf_float+0x370>
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	07da      	lsls	r2, r3, #31
 801319a:	d439      	bmi.n	8013210 <_printf_float+0x370>
 801319c:	9a08      	ldr	r2, [sp, #32]
 801319e:	9b04      	ldr	r3, [sp, #16]
 80131a0:	9907      	ldr	r1, [sp, #28]
 80131a2:	1ad3      	subs	r3, r2, r3
 80131a4:	eba2 0901 	sub.w	r9, r2, r1
 80131a8:	4599      	cmp	r9, r3
 80131aa:	bfa8      	it	ge
 80131ac:	4699      	movge	r9, r3
 80131ae:	f1b9 0f00 	cmp.w	r9, #0
 80131b2:	dc35      	bgt.n	8013220 <_printf_float+0x380>
 80131b4:	f04f 0800 	mov.w	r8, #0
 80131b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80131bc:	f104 0a1a 	add.w	sl, r4, #26
 80131c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80131c4:	1a9b      	subs	r3, r3, r2
 80131c6:	eba3 0309 	sub.w	r3, r3, r9
 80131ca:	4543      	cmp	r3, r8
 80131cc:	f77f af75 	ble.w	80130ba <_printf_float+0x21a>
 80131d0:	2301      	movs	r3, #1
 80131d2:	4652      	mov	r2, sl
 80131d4:	4631      	mov	r1, r6
 80131d6:	4628      	mov	r0, r5
 80131d8:	47b8      	blx	r7
 80131da:	3001      	adds	r0, #1
 80131dc:	f43f aeae 	beq.w	8012f3c <_printf_float+0x9c>
 80131e0:	f108 0801 	add.w	r8, r8, #1
 80131e4:	e7ec      	b.n	80131c0 <_printf_float+0x320>
 80131e6:	4613      	mov	r3, r2
 80131e8:	4631      	mov	r1, r6
 80131ea:	4642      	mov	r2, r8
 80131ec:	4628      	mov	r0, r5
 80131ee:	47b8      	blx	r7
 80131f0:	3001      	adds	r0, #1
 80131f2:	d1bf      	bne.n	8013174 <_printf_float+0x2d4>
 80131f4:	e6a2      	b.n	8012f3c <_printf_float+0x9c>
 80131f6:	2301      	movs	r3, #1
 80131f8:	4631      	mov	r1, r6
 80131fa:	4628      	mov	r0, r5
 80131fc:	9204      	str	r2, [sp, #16]
 80131fe:	47b8      	blx	r7
 8013200:	3001      	adds	r0, #1
 8013202:	f43f ae9b 	beq.w	8012f3c <_printf_float+0x9c>
 8013206:	9b05      	ldr	r3, [sp, #20]
 8013208:	9a04      	ldr	r2, [sp, #16]
 801320a:	3301      	adds	r3, #1
 801320c:	9305      	str	r3, [sp, #20]
 801320e:	e7b7      	b.n	8013180 <_printf_float+0x2e0>
 8013210:	4653      	mov	r3, sl
 8013212:	465a      	mov	r2, fp
 8013214:	4631      	mov	r1, r6
 8013216:	4628      	mov	r0, r5
 8013218:	47b8      	blx	r7
 801321a:	3001      	adds	r0, #1
 801321c:	d1be      	bne.n	801319c <_printf_float+0x2fc>
 801321e:	e68d      	b.n	8012f3c <_printf_float+0x9c>
 8013220:	9a04      	ldr	r2, [sp, #16]
 8013222:	464b      	mov	r3, r9
 8013224:	4442      	add	r2, r8
 8013226:	4631      	mov	r1, r6
 8013228:	4628      	mov	r0, r5
 801322a:	47b8      	blx	r7
 801322c:	3001      	adds	r0, #1
 801322e:	d1c1      	bne.n	80131b4 <_printf_float+0x314>
 8013230:	e684      	b.n	8012f3c <_printf_float+0x9c>
 8013232:	9a08      	ldr	r2, [sp, #32]
 8013234:	2a01      	cmp	r2, #1
 8013236:	dc01      	bgt.n	801323c <_printf_float+0x39c>
 8013238:	07db      	lsls	r3, r3, #31
 801323a:	d537      	bpl.n	80132ac <_printf_float+0x40c>
 801323c:	2301      	movs	r3, #1
 801323e:	4642      	mov	r2, r8
 8013240:	4631      	mov	r1, r6
 8013242:	4628      	mov	r0, r5
 8013244:	47b8      	blx	r7
 8013246:	3001      	adds	r0, #1
 8013248:	f43f ae78 	beq.w	8012f3c <_printf_float+0x9c>
 801324c:	4653      	mov	r3, sl
 801324e:	465a      	mov	r2, fp
 8013250:	4631      	mov	r1, r6
 8013252:	4628      	mov	r0, r5
 8013254:	47b8      	blx	r7
 8013256:	3001      	adds	r0, #1
 8013258:	f43f ae70 	beq.w	8012f3c <_printf_float+0x9c>
 801325c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013260:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013268:	d01b      	beq.n	80132a2 <_printf_float+0x402>
 801326a:	9b08      	ldr	r3, [sp, #32]
 801326c:	f108 0201 	add.w	r2, r8, #1
 8013270:	3b01      	subs	r3, #1
 8013272:	4631      	mov	r1, r6
 8013274:	4628      	mov	r0, r5
 8013276:	47b8      	blx	r7
 8013278:	3001      	adds	r0, #1
 801327a:	d10e      	bne.n	801329a <_printf_float+0x3fa>
 801327c:	e65e      	b.n	8012f3c <_printf_float+0x9c>
 801327e:	2301      	movs	r3, #1
 8013280:	464a      	mov	r2, r9
 8013282:	4631      	mov	r1, r6
 8013284:	4628      	mov	r0, r5
 8013286:	47b8      	blx	r7
 8013288:	3001      	adds	r0, #1
 801328a:	f43f ae57 	beq.w	8012f3c <_printf_float+0x9c>
 801328e:	f108 0801 	add.w	r8, r8, #1
 8013292:	9b08      	ldr	r3, [sp, #32]
 8013294:	3b01      	subs	r3, #1
 8013296:	4543      	cmp	r3, r8
 8013298:	dcf1      	bgt.n	801327e <_printf_float+0x3de>
 801329a:	9b04      	ldr	r3, [sp, #16]
 801329c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80132a0:	e6db      	b.n	801305a <_printf_float+0x1ba>
 80132a2:	f04f 0800 	mov.w	r8, #0
 80132a6:	f104 091a 	add.w	r9, r4, #26
 80132aa:	e7f2      	b.n	8013292 <_printf_float+0x3f2>
 80132ac:	2301      	movs	r3, #1
 80132ae:	4642      	mov	r2, r8
 80132b0:	e7df      	b.n	8013272 <_printf_float+0x3d2>
 80132b2:	2301      	movs	r3, #1
 80132b4:	464a      	mov	r2, r9
 80132b6:	4631      	mov	r1, r6
 80132b8:	4628      	mov	r0, r5
 80132ba:	47b8      	blx	r7
 80132bc:	3001      	adds	r0, #1
 80132be:	f43f ae3d 	beq.w	8012f3c <_printf_float+0x9c>
 80132c2:	f108 0801 	add.w	r8, r8, #1
 80132c6:	68e3      	ldr	r3, [r4, #12]
 80132c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132ca:	1a5b      	subs	r3, r3, r1
 80132cc:	4543      	cmp	r3, r8
 80132ce:	dcf0      	bgt.n	80132b2 <_printf_float+0x412>
 80132d0:	e6f7      	b.n	80130c2 <_printf_float+0x222>
 80132d2:	f04f 0800 	mov.w	r8, #0
 80132d6:	f104 0919 	add.w	r9, r4, #25
 80132da:	e7f4      	b.n	80132c6 <_printf_float+0x426>

080132dc <_printf_common>:
 80132dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132e0:	4616      	mov	r6, r2
 80132e2:	4699      	mov	r9, r3
 80132e4:	688a      	ldr	r2, [r1, #8]
 80132e6:	690b      	ldr	r3, [r1, #16]
 80132e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132ec:	4293      	cmp	r3, r2
 80132ee:	bfb8      	it	lt
 80132f0:	4613      	movlt	r3, r2
 80132f2:	6033      	str	r3, [r6, #0]
 80132f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132f8:	4607      	mov	r7, r0
 80132fa:	460c      	mov	r4, r1
 80132fc:	b10a      	cbz	r2, 8013302 <_printf_common+0x26>
 80132fe:	3301      	adds	r3, #1
 8013300:	6033      	str	r3, [r6, #0]
 8013302:	6823      	ldr	r3, [r4, #0]
 8013304:	0699      	lsls	r1, r3, #26
 8013306:	bf42      	ittt	mi
 8013308:	6833      	ldrmi	r3, [r6, #0]
 801330a:	3302      	addmi	r3, #2
 801330c:	6033      	strmi	r3, [r6, #0]
 801330e:	6825      	ldr	r5, [r4, #0]
 8013310:	f015 0506 	ands.w	r5, r5, #6
 8013314:	d106      	bne.n	8013324 <_printf_common+0x48>
 8013316:	f104 0a19 	add.w	sl, r4, #25
 801331a:	68e3      	ldr	r3, [r4, #12]
 801331c:	6832      	ldr	r2, [r6, #0]
 801331e:	1a9b      	subs	r3, r3, r2
 8013320:	42ab      	cmp	r3, r5
 8013322:	dc26      	bgt.n	8013372 <_printf_common+0x96>
 8013324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013328:	1e13      	subs	r3, r2, #0
 801332a:	6822      	ldr	r2, [r4, #0]
 801332c:	bf18      	it	ne
 801332e:	2301      	movne	r3, #1
 8013330:	0692      	lsls	r2, r2, #26
 8013332:	d42b      	bmi.n	801338c <_printf_common+0xb0>
 8013334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013338:	4649      	mov	r1, r9
 801333a:	4638      	mov	r0, r7
 801333c:	47c0      	blx	r8
 801333e:	3001      	adds	r0, #1
 8013340:	d01e      	beq.n	8013380 <_printf_common+0xa4>
 8013342:	6823      	ldr	r3, [r4, #0]
 8013344:	68e5      	ldr	r5, [r4, #12]
 8013346:	6832      	ldr	r2, [r6, #0]
 8013348:	f003 0306 	and.w	r3, r3, #6
 801334c:	2b04      	cmp	r3, #4
 801334e:	bf08      	it	eq
 8013350:	1aad      	subeq	r5, r5, r2
 8013352:	68a3      	ldr	r3, [r4, #8]
 8013354:	6922      	ldr	r2, [r4, #16]
 8013356:	bf0c      	ite	eq
 8013358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801335c:	2500      	movne	r5, #0
 801335e:	4293      	cmp	r3, r2
 8013360:	bfc4      	itt	gt
 8013362:	1a9b      	subgt	r3, r3, r2
 8013364:	18ed      	addgt	r5, r5, r3
 8013366:	2600      	movs	r6, #0
 8013368:	341a      	adds	r4, #26
 801336a:	42b5      	cmp	r5, r6
 801336c:	d11a      	bne.n	80133a4 <_printf_common+0xc8>
 801336e:	2000      	movs	r0, #0
 8013370:	e008      	b.n	8013384 <_printf_common+0xa8>
 8013372:	2301      	movs	r3, #1
 8013374:	4652      	mov	r2, sl
 8013376:	4649      	mov	r1, r9
 8013378:	4638      	mov	r0, r7
 801337a:	47c0      	blx	r8
 801337c:	3001      	adds	r0, #1
 801337e:	d103      	bne.n	8013388 <_printf_common+0xac>
 8013380:	f04f 30ff 	mov.w	r0, #4294967295
 8013384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013388:	3501      	adds	r5, #1
 801338a:	e7c6      	b.n	801331a <_printf_common+0x3e>
 801338c:	18e1      	adds	r1, r4, r3
 801338e:	1c5a      	adds	r2, r3, #1
 8013390:	2030      	movs	r0, #48	; 0x30
 8013392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013396:	4422      	add	r2, r4
 8013398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801339c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80133a0:	3302      	adds	r3, #2
 80133a2:	e7c7      	b.n	8013334 <_printf_common+0x58>
 80133a4:	2301      	movs	r3, #1
 80133a6:	4622      	mov	r2, r4
 80133a8:	4649      	mov	r1, r9
 80133aa:	4638      	mov	r0, r7
 80133ac:	47c0      	blx	r8
 80133ae:	3001      	adds	r0, #1
 80133b0:	d0e6      	beq.n	8013380 <_printf_common+0xa4>
 80133b2:	3601      	adds	r6, #1
 80133b4:	e7d9      	b.n	801336a <_printf_common+0x8e>
	...

080133b8 <_printf_i>:
 80133b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133bc:	460c      	mov	r4, r1
 80133be:	4691      	mov	r9, r2
 80133c0:	7e27      	ldrb	r7, [r4, #24]
 80133c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80133c4:	2f78      	cmp	r7, #120	; 0x78
 80133c6:	4680      	mov	r8, r0
 80133c8:	469a      	mov	sl, r3
 80133ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80133ce:	d807      	bhi.n	80133e0 <_printf_i+0x28>
 80133d0:	2f62      	cmp	r7, #98	; 0x62
 80133d2:	d80a      	bhi.n	80133ea <_printf_i+0x32>
 80133d4:	2f00      	cmp	r7, #0
 80133d6:	f000 80d8 	beq.w	801358a <_printf_i+0x1d2>
 80133da:	2f58      	cmp	r7, #88	; 0x58
 80133dc:	f000 80a3 	beq.w	8013526 <_printf_i+0x16e>
 80133e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80133e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80133e8:	e03a      	b.n	8013460 <_printf_i+0xa8>
 80133ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80133ee:	2b15      	cmp	r3, #21
 80133f0:	d8f6      	bhi.n	80133e0 <_printf_i+0x28>
 80133f2:	a001      	add	r0, pc, #4	; (adr r0, 80133f8 <_printf_i+0x40>)
 80133f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80133f8:	08013451 	.word	0x08013451
 80133fc:	08013465 	.word	0x08013465
 8013400:	080133e1 	.word	0x080133e1
 8013404:	080133e1 	.word	0x080133e1
 8013408:	080133e1 	.word	0x080133e1
 801340c:	080133e1 	.word	0x080133e1
 8013410:	08013465 	.word	0x08013465
 8013414:	080133e1 	.word	0x080133e1
 8013418:	080133e1 	.word	0x080133e1
 801341c:	080133e1 	.word	0x080133e1
 8013420:	080133e1 	.word	0x080133e1
 8013424:	08013571 	.word	0x08013571
 8013428:	08013495 	.word	0x08013495
 801342c:	08013553 	.word	0x08013553
 8013430:	080133e1 	.word	0x080133e1
 8013434:	080133e1 	.word	0x080133e1
 8013438:	08013593 	.word	0x08013593
 801343c:	080133e1 	.word	0x080133e1
 8013440:	08013495 	.word	0x08013495
 8013444:	080133e1 	.word	0x080133e1
 8013448:	080133e1 	.word	0x080133e1
 801344c:	0801355b 	.word	0x0801355b
 8013450:	680b      	ldr	r3, [r1, #0]
 8013452:	1d1a      	adds	r2, r3, #4
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	600a      	str	r2, [r1, #0]
 8013458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801345c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013460:	2301      	movs	r3, #1
 8013462:	e0a3      	b.n	80135ac <_printf_i+0x1f4>
 8013464:	6825      	ldr	r5, [r4, #0]
 8013466:	6808      	ldr	r0, [r1, #0]
 8013468:	062e      	lsls	r6, r5, #24
 801346a:	f100 0304 	add.w	r3, r0, #4
 801346e:	d50a      	bpl.n	8013486 <_printf_i+0xce>
 8013470:	6805      	ldr	r5, [r0, #0]
 8013472:	600b      	str	r3, [r1, #0]
 8013474:	2d00      	cmp	r5, #0
 8013476:	da03      	bge.n	8013480 <_printf_i+0xc8>
 8013478:	232d      	movs	r3, #45	; 0x2d
 801347a:	426d      	negs	r5, r5
 801347c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013480:	485e      	ldr	r0, [pc, #376]	; (80135fc <_printf_i+0x244>)
 8013482:	230a      	movs	r3, #10
 8013484:	e019      	b.n	80134ba <_printf_i+0x102>
 8013486:	f015 0f40 	tst.w	r5, #64	; 0x40
 801348a:	6805      	ldr	r5, [r0, #0]
 801348c:	600b      	str	r3, [r1, #0]
 801348e:	bf18      	it	ne
 8013490:	b22d      	sxthne	r5, r5
 8013492:	e7ef      	b.n	8013474 <_printf_i+0xbc>
 8013494:	680b      	ldr	r3, [r1, #0]
 8013496:	6825      	ldr	r5, [r4, #0]
 8013498:	1d18      	adds	r0, r3, #4
 801349a:	6008      	str	r0, [r1, #0]
 801349c:	0628      	lsls	r0, r5, #24
 801349e:	d501      	bpl.n	80134a4 <_printf_i+0xec>
 80134a0:	681d      	ldr	r5, [r3, #0]
 80134a2:	e002      	b.n	80134aa <_printf_i+0xf2>
 80134a4:	0669      	lsls	r1, r5, #25
 80134a6:	d5fb      	bpl.n	80134a0 <_printf_i+0xe8>
 80134a8:	881d      	ldrh	r5, [r3, #0]
 80134aa:	4854      	ldr	r0, [pc, #336]	; (80135fc <_printf_i+0x244>)
 80134ac:	2f6f      	cmp	r7, #111	; 0x6f
 80134ae:	bf0c      	ite	eq
 80134b0:	2308      	moveq	r3, #8
 80134b2:	230a      	movne	r3, #10
 80134b4:	2100      	movs	r1, #0
 80134b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80134ba:	6866      	ldr	r6, [r4, #4]
 80134bc:	60a6      	str	r6, [r4, #8]
 80134be:	2e00      	cmp	r6, #0
 80134c0:	bfa2      	ittt	ge
 80134c2:	6821      	ldrge	r1, [r4, #0]
 80134c4:	f021 0104 	bicge.w	r1, r1, #4
 80134c8:	6021      	strge	r1, [r4, #0]
 80134ca:	b90d      	cbnz	r5, 80134d0 <_printf_i+0x118>
 80134cc:	2e00      	cmp	r6, #0
 80134ce:	d04d      	beq.n	801356c <_printf_i+0x1b4>
 80134d0:	4616      	mov	r6, r2
 80134d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80134d6:	fb03 5711 	mls	r7, r3, r1, r5
 80134da:	5dc7      	ldrb	r7, [r0, r7]
 80134dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80134e0:	462f      	mov	r7, r5
 80134e2:	42bb      	cmp	r3, r7
 80134e4:	460d      	mov	r5, r1
 80134e6:	d9f4      	bls.n	80134d2 <_printf_i+0x11a>
 80134e8:	2b08      	cmp	r3, #8
 80134ea:	d10b      	bne.n	8013504 <_printf_i+0x14c>
 80134ec:	6823      	ldr	r3, [r4, #0]
 80134ee:	07df      	lsls	r7, r3, #31
 80134f0:	d508      	bpl.n	8013504 <_printf_i+0x14c>
 80134f2:	6923      	ldr	r3, [r4, #16]
 80134f4:	6861      	ldr	r1, [r4, #4]
 80134f6:	4299      	cmp	r1, r3
 80134f8:	bfde      	ittt	le
 80134fa:	2330      	movle	r3, #48	; 0x30
 80134fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013500:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013504:	1b92      	subs	r2, r2, r6
 8013506:	6122      	str	r2, [r4, #16]
 8013508:	f8cd a000 	str.w	sl, [sp]
 801350c:	464b      	mov	r3, r9
 801350e:	aa03      	add	r2, sp, #12
 8013510:	4621      	mov	r1, r4
 8013512:	4640      	mov	r0, r8
 8013514:	f7ff fee2 	bl	80132dc <_printf_common>
 8013518:	3001      	adds	r0, #1
 801351a:	d14c      	bne.n	80135b6 <_printf_i+0x1fe>
 801351c:	f04f 30ff 	mov.w	r0, #4294967295
 8013520:	b004      	add	sp, #16
 8013522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013526:	4835      	ldr	r0, [pc, #212]	; (80135fc <_printf_i+0x244>)
 8013528:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801352c:	6823      	ldr	r3, [r4, #0]
 801352e:	680e      	ldr	r6, [r1, #0]
 8013530:	061f      	lsls	r7, r3, #24
 8013532:	f856 5b04 	ldr.w	r5, [r6], #4
 8013536:	600e      	str	r6, [r1, #0]
 8013538:	d514      	bpl.n	8013564 <_printf_i+0x1ac>
 801353a:	07d9      	lsls	r1, r3, #31
 801353c:	bf44      	itt	mi
 801353e:	f043 0320 	orrmi.w	r3, r3, #32
 8013542:	6023      	strmi	r3, [r4, #0]
 8013544:	b91d      	cbnz	r5, 801354e <_printf_i+0x196>
 8013546:	6823      	ldr	r3, [r4, #0]
 8013548:	f023 0320 	bic.w	r3, r3, #32
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	2310      	movs	r3, #16
 8013550:	e7b0      	b.n	80134b4 <_printf_i+0xfc>
 8013552:	6823      	ldr	r3, [r4, #0]
 8013554:	f043 0320 	orr.w	r3, r3, #32
 8013558:	6023      	str	r3, [r4, #0]
 801355a:	2378      	movs	r3, #120	; 0x78
 801355c:	4828      	ldr	r0, [pc, #160]	; (8013600 <_printf_i+0x248>)
 801355e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013562:	e7e3      	b.n	801352c <_printf_i+0x174>
 8013564:	065e      	lsls	r6, r3, #25
 8013566:	bf48      	it	mi
 8013568:	b2ad      	uxthmi	r5, r5
 801356a:	e7e6      	b.n	801353a <_printf_i+0x182>
 801356c:	4616      	mov	r6, r2
 801356e:	e7bb      	b.n	80134e8 <_printf_i+0x130>
 8013570:	680b      	ldr	r3, [r1, #0]
 8013572:	6826      	ldr	r6, [r4, #0]
 8013574:	6960      	ldr	r0, [r4, #20]
 8013576:	1d1d      	adds	r5, r3, #4
 8013578:	600d      	str	r5, [r1, #0]
 801357a:	0635      	lsls	r5, r6, #24
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	d501      	bpl.n	8013584 <_printf_i+0x1cc>
 8013580:	6018      	str	r0, [r3, #0]
 8013582:	e002      	b.n	801358a <_printf_i+0x1d2>
 8013584:	0671      	lsls	r1, r6, #25
 8013586:	d5fb      	bpl.n	8013580 <_printf_i+0x1c8>
 8013588:	8018      	strh	r0, [r3, #0]
 801358a:	2300      	movs	r3, #0
 801358c:	6123      	str	r3, [r4, #16]
 801358e:	4616      	mov	r6, r2
 8013590:	e7ba      	b.n	8013508 <_printf_i+0x150>
 8013592:	680b      	ldr	r3, [r1, #0]
 8013594:	1d1a      	adds	r2, r3, #4
 8013596:	600a      	str	r2, [r1, #0]
 8013598:	681e      	ldr	r6, [r3, #0]
 801359a:	6862      	ldr	r2, [r4, #4]
 801359c:	2100      	movs	r1, #0
 801359e:	4630      	mov	r0, r6
 80135a0:	f7ec fea6 	bl	80002f0 <memchr>
 80135a4:	b108      	cbz	r0, 80135aa <_printf_i+0x1f2>
 80135a6:	1b80      	subs	r0, r0, r6
 80135a8:	6060      	str	r0, [r4, #4]
 80135aa:	6863      	ldr	r3, [r4, #4]
 80135ac:	6123      	str	r3, [r4, #16]
 80135ae:	2300      	movs	r3, #0
 80135b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135b4:	e7a8      	b.n	8013508 <_printf_i+0x150>
 80135b6:	6923      	ldr	r3, [r4, #16]
 80135b8:	4632      	mov	r2, r6
 80135ba:	4649      	mov	r1, r9
 80135bc:	4640      	mov	r0, r8
 80135be:	47d0      	blx	sl
 80135c0:	3001      	adds	r0, #1
 80135c2:	d0ab      	beq.n	801351c <_printf_i+0x164>
 80135c4:	6823      	ldr	r3, [r4, #0]
 80135c6:	079b      	lsls	r3, r3, #30
 80135c8:	d413      	bmi.n	80135f2 <_printf_i+0x23a>
 80135ca:	68e0      	ldr	r0, [r4, #12]
 80135cc:	9b03      	ldr	r3, [sp, #12]
 80135ce:	4298      	cmp	r0, r3
 80135d0:	bfb8      	it	lt
 80135d2:	4618      	movlt	r0, r3
 80135d4:	e7a4      	b.n	8013520 <_printf_i+0x168>
 80135d6:	2301      	movs	r3, #1
 80135d8:	4632      	mov	r2, r6
 80135da:	4649      	mov	r1, r9
 80135dc:	4640      	mov	r0, r8
 80135de:	47d0      	blx	sl
 80135e0:	3001      	adds	r0, #1
 80135e2:	d09b      	beq.n	801351c <_printf_i+0x164>
 80135e4:	3501      	adds	r5, #1
 80135e6:	68e3      	ldr	r3, [r4, #12]
 80135e8:	9903      	ldr	r1, [sp, #12]
 80135ea:	1a5b      	subs	r3, r3, r1
 80135ec:	42ab      	cmp	r3, r5
 80135ee:	dcf2      	bgt.n	80135d6 <_printf_i+0x21e>
 80135f0:	e7eb      	b.n	80135ca <_printf_i+0x212>
 80135f2:	2500      	movs	r5, #0
 80135f4:	f104 0619 	add.w	r6, r4, #25
 80135f8:	e7f5      	b.n	80135e6 <_printf_i+0x22e>
 80135fa:	bf00      	nop
 80135fc:	080158fa 	.word	0x080158fa
 8013600:	0801590b 	.word	0x0801590b

08013604 <_sbrk_r>:
 8013604:	b538      	push	{r3, r4, r5, lr}
 8013606:	4d06      	ldr	r5, [pc, #24]	; (8013620 <_sbrk_r+0x1c>)
 8013608:	2300      	movs	r3, #0
 801360a:	4604      	mov	r4, r0
 801360c:	4608      	mov	r0, r1
 801360e:	602b      	str	r3, [r5, #0]
 8013610:	f7ed fe60 	bl	80012d4 <_sbrk>
 8013614:	1c43      	adds	r3, r0, #1
 8013616:	d102      	bne.n	801361e <_sbrk_r+0x1a>
 8013618:	682b      	ldr	r3, [r5, #0]
 801361a:	b103      	cbz	r3, 801361e <_sbrk_r+0x1a>
 801361c:	6023      	str	r3, [r4, #0]
 801361e:	bd38      	pop	{r3, r4, r5, pc}
 8013620:	24004260 	.word	0x24004260

08013624 <siprintf>:
 8013624:	b40e      	push	{r1, r2, r3}
 8013626:	b500      	push	{lr}
 8013628:	b09c      	sub	sp, #112	; 0x70
 801362a:	ab1d      	add	r3, sp, #116	; 0x74
 801362c:	9002      	str	r0, [sp, #8]
 801362e:	9006      	str	r0, [sp, #24]
 8013630:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013634:	4809      	ldr	r0, [pc, #36]	; (801365c <siprintf+0x38>)
 8013636:	9107      	str	r1, [sp, #28]
 8013638:	9104      	str	r1, [sp, #16]
 801363a:	4909      	ldr	r1, [pc, #36]	; (8013660 <siprintf+0x3c>)
 801363c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013640:	9105      	str	r1, [sp, #20]
 8013642:	6800      	ldr	r0, [r0, #0]
 8013644:	9301      	str	r3, [sp, #4]
 8013646:	a902      	add	r1, sp, #8
 8013648:	f001 fa22 	bl	8014a90 <_svfiprintf_r>
 801364c:	9b02      	ldr	r3, [sp, #8]
 801364e:	2200      	movs	r2, #0
 8013650:	701a      	strb	r2, [r3, #0]
 8013652:	b01c      	add	sp, #112	; 0x70
 8013654:	f85d eb04 	ldr.w	lr, [sp], #4
 8013658:	b003      	add	sp, #12
 801365a:	4770      	bx	lr
 801365c:	24000288 	.word	0x24000288
 8013660:	ffff0208 	.word	0xffff0208

08013664 <quorem>:
 8013664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013668:	6903      	ldr	r3, [r0, #16]
 801366a:	690c      	ldr	r4, [r1, #16]
 801366c:	42a3      	cmp	r3, r4
 801366e:	4607      	mov	r7, r0
 8013670:	f2c0 8081 	blt.w	8013776 <quorem+0x112>
 8013674:	3c01      	subs	r4, #1
 8013676:	f101 0814 	add.w	r8, r1, #20
 801367a:	f100 0514 	add.w	r5, r0, #20
 801367e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013682:	9301      	str	r3, [sp, #4]
 8013684:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801368c:	3301      	adds	r3, #1
 801368e:	429a      	cmp	r2, r3
 8013690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013698:	fbb2 f6f3 	udiv	r6, r2, r3
 801369c:	d331      	bcc.n	8013702 <quorem+0x9e>
 801369e:	f04f 0e00 	mov.w	lr, #0
 80136a2:	4640      	mov	r0, r8
 80136a4:	46ac      	mov	ip, r5
 80136a6:	46f2      	mov	sl, lr
 80136a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80136ac:	b293      	uxth	r3, r2
 80136ae:	fb06 e303 	mla	r3, r6, r3, lr
 80136b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	ebaa 0303 	sub.w	r3, sl, r3
 80136bc:	0c12      	lsrs	r2, r2, #16
 80136be:	f8dc a000 	ldr.w	sl, [ip]
 80136c2:	fb06 e202 	mla	r2, r6, r2, lr
 80136c6:	fa13 f38a 	uxtah	r3, r3, sl
 80136ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80136ce:	fa1f fa82 	uxth.w	sl, r2
 80136d2:	f8dc 2000 	ldr.w	r2, [ip]
 80136d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80136da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80136de:	b29b      	uxth	r3, r3
 80136e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80136e4:	4581      	cmp	r9, r0
 80136e6:	f84c 3b04 	str.w	r3, [ip], #4
 80136ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80136ee:	d2db      	bcs.n	80136a8 <quorem+0x44>
 80136f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80136f4:	b92b      	cbnz	r3, 8013702 <quorem+0x9e>
 80136f6:	9b01      	ldr	r3, [sp, #4]
 80136f8:	3b04      	subs	r3, #4
 80136fa:	429d      	cmp	r5, r3
 80136fc:	461a      	mov	r2, r3
 80136fe:	d32e      	bcc.n	801375e <quorem+0xfa>
 8013700:	613c      	str	r4, [r7, #16]
 8013702:	4638      	mov	r0, r7
 8013704:	f001 f85a 	bl	80147bc <__mcmp>
 8013708:	2800      	cmp	r0, #0
 801370a:	db24      	blt.n	8013756 <quorem+0xf2>
 801370c:	3601      	adds	r6, #1
 801370e:	4628      	mov	r0, r5
 8013710:	f04f 0c00 	mov.w	ip, #0
 8013714:	f858 2b04 	ldr.w	r2, [r8], #4
 8013718:	f8d0 e000 	ldr.w	lr, [r0]
 801371c:	b293      	uxth	r3, r2
 801371e:	ebac 0303 	sub.w	r3, ip, r3
 8013722:	0c12      	lsrs	r2, r2, #16
 8013724:	fa13 f38e 	uxtah	r3, r3, lr
 8013728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801372c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013730:	b29b      	uxth	r3, r3
 8013732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013736:	45c1      	cmp	r9, r8
 8013738:	f840 3b04 	str.w	r3, [r0], #4
 801373c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013740:	d2e8      	bcs.n	8013714 <quorem+0xb0>
 8013742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801374a:	b922      	cbnz	r2, 8013756 <quorem+0xf2>
 801374c:	3b04      	subs	r3, #4
 801374e:	429d      	cmp	r5, r3
 8013750:	461a      	mov	r2, r3
 8013752:	d30a      	bcc.n	801376a <quorem+0x106>
 8013754:	613c      	str	r4, [r7, #16]
 8013756:	4630      	mov	r0, r6
 8013758:	b003      	add	sp, #12
 801375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801375e:	6812      	ldr	r2, [r2, #0]
 8013760:	3b04      	subs	r3, #4
 8013762:	2a00      	cmp	r2, #0
 8013764:	d1cc      	bne.n	8013700 <quorem+0x9c>
 8013766:	3c01      	subs	r4, #1
 8013768:	e7c7      	b.n	80136fa <quorem+0x96>
 801376a:	6812      	ldr	r2, [r2, #0]
 801376c:	3b04      	subs	r3, #4
 801376e:	2a00      	cmp	r2, #0
 8013770:	d1f0      	bne.n	8013754 <quorem+0xf0>
 8013772:	3c01      	subs	r4, #1
 8013774:	e7eb      	b.n	801374e <quorem+0xea>
 8013776:	2000      	movs	r0, #0
 8013778:	e7ee      	b.n	8013758 <quorem+0xf4>
 801377a:	0000      	movs	r0, r0
 801377c:	0000      	movs	r0, r0
	...

08013780 <_dtoa_r>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	ec59 8b10 	vmov	r8, r9, d0
 8013788:	b095      	sub	sp, #84	; 0x54
 801378a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801378c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801378e:	9107      	str	r1, [sp, #28]
 8013790:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013794:	4606      	mov	r6, r0
 8013796:	9209      	str	r2, [sp, #36]	; 0x24
 8013798:	9310      	str	r3, [sp, #64]	; 0x40
 801379a:	b975      	cbnz	r5, 80137ba <_dtoa_r+0x3a>
 801379c:	2010      	movs	r0, #16
 801379e:	f7ff fa2b 	bl	8012bf8 <malloc>
 80137a2:	4602      	mov	r2, r0
 80137a4:	6270      	str	r0, [r6, #36]	; 0x24
 80137a6:	b920      	cbnz	r0, 80137b2 <_dtoa_r+0x32>
 80137a8:	4bab      	ldr	r3, [pc, #684]	; (8013a58 <_dtoa_r+0x2d8>)
 80137aa:	21ea      	movs	r1, #234	; 0xea
 80137ac:	48ab      	ldr	r0, [pc, #684]	; (8013a5c <_dtoa_r+0x2dc>)
 80137ae:	f001 fa6f 	bl	8014c90 <__assert_func>
 80137b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80137b6:	6005      	str	r5, [r0, #0]
 80137b8:	60c5      	str	r5, [r0, #12]
 80137ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80137bc:	6819      	ldr	r1, [r3, #0]
 80137be:	b151      	cbz	r1, 80137d6 <_dtoa_r+0x56>
 80137c0:	685a      	ldr	r2, [r3, #4]
 80137c2:	604a      	str	r2, [r1, #4]
 80137c4:	2301      	movs	r3, #1
 80137c6:	4093      	lsls	r3, r2
 80137c8:	608b      	str	r3, [r1, #8]
 80137ca:	4630      	mov	r0, r6
 80137cc:	f000 fdb8 	bl	8014340 <_Bfree>
 80137d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80137d2:	2200      	movs	r2, #0
 80137d4:	601a      	str	r2, [r3, #0]
 80137d6:	f1b9 0300 	subs.w	r3, r9, #0
 80137da:	bfbb      	ittet	lt
 80137dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80137e0:	9303      	strlt	r3, [sp, #12]
 80137e2:	2300      	movge	r3, #0
 80137e4:	2201      	movlt	r2, #1
 80137e6:	bfac      	ite	ge
 80137e8:	6023      	strge	r3, [r4, #0]
 80137ea:	6022      	strlt	r2, [r4, #0]
 80137ec:	4b9c      	ldr	r3, [pc, #624]	; (8013a60 <_dtoa_r+0x2e0>)
 80137ee:	9c03      	ldr	r4, [sp, #12]
 80137f0:	43a3      	bics	r3, r4
 80137f2:	d11a      	bne.n	801382a <_dtoa_r+0xaa>
 80137f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80137f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80137fa:	6013      	str	r3, [r2, #0]
 80137fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013800:	ea53 0308 	orrs.w	r3, r3, r8
 8013804:	f000 8512 	beq.w	801422c <_dtoa_r+0xaac>
 8013808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801380a:	b953      	cbnz	r3, 8013822 <_dtoa_r+0xa2>
 801380c:	4b95      	ldr	r3, [pc, #596]	; (8013a64 <_dtoa_r+0x2e4>)
 801380e:	e01f      	b.n	8013850 <_dtoa_r+0xd0>
 8013810:	4b95      	ldr	r3, [pc, #596]	; (8013a68 <_dtoa_r+0x2e8>)
 8013812:	9300      	str	r3, [sp, #0]
 8013814:	3308      	adds	r3, #8
 8013816:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013818:	6013      	str	r3, [r2, #0]
 801381a:	9800      	ldr	r0, [sp, #0]
 801381c:	b015      	add	sp, #84	; 0x54
 801381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013822:	4b90      	ldr	r3, [pc, #576]	; (8013a64 <_dtoa_r+0x2e4>)
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	3303      	adds	r3, #3
 8013828:	e7f5      	b.n	8013816 <_dtoa_r+0x96>
 801382a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801382e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013836:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801383a:	d10b      	bne.n	8013854 <_dtoa_r+0xd4>
 801383c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801383e:	2301      	movs	r3, #1
 8013840:	6013      	str	r3, [r2, #0]
 8013842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013844:	2b00      	cmp	r3, #0
 8013846:	f000 84ee 	beq.w	8014226 <_dtoa_r+0xaa6>
 801384a:	4888      	ldr	r0, [pc, #544]	; (8013a6c <_dtoa_r+0x2ec>)
 801384c:	6018      	str	r0, [r3, #0]
 801384e:	1e43      	subs	r3, r0, #1
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	e7e2      	b.n	801381a <_dtoa_r+0x9a>
 8013854:	a913      	add	r1, sp, #76	; 0x4c
 8013856:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801385a:	aa12      	add	r2, sp, #72	; 0x48
 801385c:	4630      	mov	r0, r6
 801385e:	f001 f851 	bl	8014904 <__d2b>
 8013862:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8013866:	4605      	mov	r5, r0
 8013868:	9812      	ldr	r0, [sp, #72]	; 0x48
 801386a:	2900      	cmp	r1, #0
 801386c:	d047      	beq.n	80138fe <_dtoa_r+0x17e>
 801386e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8013870:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013878:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801387c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013880:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013884:	2400      	movs	r4, #0
 8013886:	ec43 2b16 	vmov	d6, r2, r3
 801388a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801388e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8013a40 <_dtoa_r+0x2c0>
 8013892:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013896:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8013a48 <_dtoa_r+0x2c8>
 801389a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801389e:	eeb0 7b46 	vmov.f64	d7, d6
 80138a2:	ee06 1a90 	vmov	s13, r1
 80138a6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80138aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013a50 <_dtoa_r+0x2d0>
 80138ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80138b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80138b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80138ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138be:	ee16 ba90 	vmov	fp, s13
 80138c2:	9411      	str	r4, [sp, #68]	; 0x44
 80138c4:	d508      	bpl.n	80138d8 <_dtoa_r+0x158>
 80138c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80138ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80138ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138d2:	bf18      	it	ne
 80138d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80138d8:	f1bb 0f16 	cmp.w	fp, #22
 80138dc:	d832      	bhi.n	8013944 <_dtoa_r+0x1c4>
 80138de:	4b64      	ldr	r3, [pc, #400]	; (8013a70 <_dtoa_r+0x2f0>)
 80138e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80138e4:	ed93 7b00 	vldr	d7, [r3]
 80138e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80138ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f4:	d501      	bpl.n	80138fa <_dtoa_r+0x17a>
 80138f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80138fa:	2300      	movs	r3, #0
 80138fc:	e023      	b.n	8013946 <_dtoa_r+0x1c6>
 80138fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013900:	4401      	add	r1, r0
 8013902:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8013906:	2b20      	cmp	r3, #32
 8013908:	bfc3      	ittte	gt
 801390a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801390e:	fa04 f303 	lslgt.w	r3, r4, r3
 8013912:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8013916:	f1c3 0320 	rsble	r3, r3, #32
 801391a:	bfc6      	itte	gt
 801391c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8013920:	ea43 0308 	orrgt.w	r3, r3, r8
 8013924:	fa08 f303 	lslle.w	r3, r8, r3
 8013928:	ee07 3a90 	vmov	s15, r3
 801392c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013930:	3901      	subs	r1, #1
 8013932:	ed8d 7b00 	vstr	d7, [sp]
 8013936:	9c01      	ldr	r4, [sp, #4]
 8013938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801393c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013940:	2401      	movs	r4, #1
 8013942:	e7a0      	b.n	8013886 <_dtoa_r+0x106>
 8013944:	2301      	movs	r3, #1
 8013946:	930f      	str	r3, [sp, #60]	; 0x3c
 8013948:	1a43      	subs	r3, r0, r1
 801394a:	1e5a      	subs	r2, r3, #1
 801394c:	bf45      	ittet	mi
 801394e:	f1c3 0301 	rsbmi	r3, r3, #1
 8013952:	9305      	strmi	r3, [sp, #20]
 8013954:	2300      	movpl	r3, #0
 8013956:	2300      	movmi	r3, #0
 8013958:	9206      	str	r2, [sp, #24]
 801395a:	bf54      	ite	pl
 801395c:	9305      	strpl	r3, [sp, #20]
 801395e:	9306      	strmi	r3, [sp, #24]
 8013960:	f1bb 0f00 	cmp.w	fp, #0
 8013964:	db18      	blt.n	8013998 <_dtoa_r+0x218>
 8013966:	9b06      	ldr	r3, [sp, #24]
 8013968:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801396c:	445b      	add	r3, fp
 801396e:	9306      	str	r3, [sp, #24]
 8013970:	2300      	movs	r3, #0
 8013972:	9a07      	ldr	r2, [sp, #28]
 8013974:	2a09      	cmp	r2, #9
 8013976:	d849      	bhi.n	8013a0c <_dtoa_r+0x28c>
 8013978:	2a05      	cmp	r2, #5
 801397a:	bfc4      	itt	gt
 801397c:	3a04      	subgt	r2, #4
 801397e:	9207      	strgt	r2, [sp, #28]
 8013980:	9a07      	ldr	r2, [sp, #28]
 8013982:	f1a2 0202 	sub.w	r2, r2, #2
 8013986:	bfcc      	ite	gt
 8013988:	2400      	movgt	r4, #0
 801398a:	2401      	movle	r4, #1
 801398c:	2a03      	cmp	r2, #3
 801398e:	d848      	bhi.n	8013a22 <_dtoa_r+0x2a2>
 8013990:	e8df f002 	tbb	[pc, r2]
 8013994:	3a2c2e0b 	.word	0x3a2c2e0b
 8013998:	9b05      	ldr	r3, [sp, #20]
 801399a:	2200      	movs	r2, #0
 801399c:	eba3 030b 	sub.w	r3, r3, fp
 80139a0:	9305      	str	r3, [sp, #20]
 80139a2:	920e      	str	r2, [sp, #56]	; 0x38
 80139a4:	f1cb 0300 	rsb	r3, fp, #0
 80139a8:	e7e3      	b.n	8013972 <_dtoa_r+0x1f2>
 80139aa:	2200      	movs	r2, #0
 80139ac:	9208      	str	r2, [sp, #32]
 80139ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139b0:	2a00      	cmp	r2, #0
 80139b2:	dc39      	bgt.n	8013a28 <_dtoa_r+0x2a8>
 80139b4:	f04f 0a01 	mov.w	sl, #1
 80139b8:	46d1      	mov	r9, sl
 80139ba:	4652      	mov	r2, sl
 80139bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80139c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80139c2:	2100      	movs	r1, #0
 80139c4:	6079      	str	r1, [r7, #4]
 80139c6:	2004      	movs	r0, #4
 80139c8:	f100 0c14 	add.w	ip, r0, #20
 80139cc:	4594      	cmp	ip, r2
 80139ce:	6879      	ldr	r1, [r7, #4]
 80139d0:	d92f      	bls.n	8013a32 <_dtoa_r+0x2b2>
 80139d2:	4630      	mov	r0, r6
 80139d4:	930c      	str	r3, [sp, #48]	; 0x30
 80139d6:	f000 fc73 	bl	80142c0 <_Balloc>
 80139da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139dc:	9000      	str	r0, [sp, #0]
 80139de:	4602      	mov	r2, r0
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d149      	bne.n	8013a78 <_dtoa_r+0x2f8>
 80139e4:	4b23      	ldr	r3, [pc, #140]	; (8013a74 <_dtoa_r+0x2f4>)
 80139e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80139ea:	e6df      	b.n	80137ac <_dtoa_r+0x2c>
 80139ec:	2201      	movs	r2, #1
 80139ee:	e7dd      	b.n	80139ac <_dtoa_r+0x22c>
 80139f0:	2200      	movs	r2, #0
 80139f2:	9208      	str	r2, [sp, #32]
 80139f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139f6:	eb0b 0a02 	add.w	sl, fp, r2
 80139fa:	f10a 0901 	add.w	r9, sl, #1
 80139fe:	464a      	mov	r2, r9
 8013a00:	2a01      	cmp	r2, #1
 8013a02:	bfb8      	it	lt
 8013a04:	2201      	movlt	r2, #1
 8013a06:	e7db      	b.n	80139c0 <_dtoa_r+0x240>
 8013a08:	2201      	movs	r2, #1
 8013a0a:	e7f2      	b.n	80139f2 <_dtoa_r+0x272>
 8013a0c:	2401      	movs	r4, #1
 8013a0e:	2200      	movs	r2, #0
 8013a10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8013a14:	f04f 3aff 	mov.w	sl, #4294967295
 8013a18:	2100      	movs	r1, #0
 8013a1a:	46d1      	mov	r9, sl
 8013a1c:	2212      	movs	r2, #18
 8013a1e:	9109      	str	r1, [sp, #36]	; 0x24
 8013a20:	e7ce      	b.n	80139c0 <_dtoa_r+0x240>
 8013a22:	2201      	movs	r2, #1
 8013a24:	9208      	str	r2, [sp, #32]
 8013a26:	e7f5      	b.n	8013a14 <_dtoa_r+0x294>
 8013a28:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8013a2c:	46d1      	mov	r9, sl
 8013a2e:	4652      	mov	r2, sl
 8013a30:	e7c6      	b.n	80139c0 <_dtoa_r+0x240>
 8013a32:	3101      	adds	r1, #1
 8013a34:	6079      	str	r1, [r7, #4]
 8013a36:	0040      	lsls	r0, r0, #1
 8013a38:	e7c6      	b.n	80139c8 <_dtoa_r+0x248>
 8013a3a:	bf00      	nop
 8013a3c:	f3af 8000 	nop.w
 8013a40:	636f4361 	.word	0x636f4361
 8013a44:	3fd287a7 	.word	0x3fd287a7
 8013a48:	8b60c8b3 	.word	0x8b60c8b3
 8013a4c:	3fc68a28 	.word	0x3fc68a28
 8013a50:	509f79fb 	.word	0x509f79fb
 8013a54:	3fd34413 	.word	0x3fd34413
 8013a58:	08015929 	.word	0x08015929
 8013a5c:	08015940 	.word	0x08015940
 8013a60:	7ff00000 	.word	0x7ff00000
 8013a64:	08015925 	.word	0x08015925
 8013a68:	0801591c 	.word	0x0801591c
 8013a6c:	080158f9 	.word	0x080158f9
 8013a70:	08015a38 	.word	0x08015a38
 8013a74:	0801599f 	.word	0x0801599f
 8013a78:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013a7a:	9900      	ldr	r1, [sp, #0]
 8013a7c:	6011      	str	r1, [r2, #0]
 8013a7e:	f1b9 0f0e 	cmp.w	r9, #14
 8013a82:	d872      	bhi.n	8013b6a <_dtoa_r+0x3ea>
 8013a84:	2c00      	cmp	r4, #0
 8013a86:	d070      	beq.n	8013b6a <_dtoa_r+0x3ea>
 8013a88:	f1bb 0f00 	cmp.w	fp, #0
 8013a8c:	f340 80a6 	ble.w	8013bdc <_dtoa_r+0x45c>
 8013a90:	49ca      	ldr	r1, [pc, #808]	; (8013dbc <_dtoa_r+0x63c>)
 8013a92:	f00b 020f 	and.w	r2, fp, #15
 8013a96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8013a9a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013a9e:	ed92 7b00 	vldr	d7, [r2]
 8013aa2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013aa6:	f000 808d 	beq.w	8013bc4 <_dtoa_r+0x444>
 8013aaa:	4ac5      	ldr	r2, [pc, #788]	; (8013dc0 <_dtoa_r+0x640>)
 8013aac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8013ab0:	ed92 6b08 	vldr	d6, [r2, #32]
 8013ab4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8013ab8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013abc:	f001 010f 	and.w	r1, r1, #15
 8013ac0:	2203      	movs	r2, #3
 8013ac2:	48bf      	ldr	r0, [pc, #764]	; (8013dc0 <_dtoa_r+0x640>)
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	d17f      	bne.n	8013bc8 <_dtoa_r+0x448>
 8013ac8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013acc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ad4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013ad6:	2900      	cmp	r1, #0
 8013ad8:	f000 80b2 	beq.w	8013c40 <_dtoa_r+0x4c0>
 8013adc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013ae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aec:	f140 80a8 	bpl.w	8013c40 <_dtoa_r+0x4c0>
 8013af0:	f1b9 0f00 	cmp.w	r9, #0
 8013af4:	f000 80a4 	beq.w	8013c40 <_dtoa_r+0x4c0>
 8013af8:	f1ba 0f00 	cmp.w	sl, #0
 8013afc:	dd31      	ble.n	8013b62 <_dtoa_r+0x3e2>
 8013afe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013b02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b06:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013b0a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013b0e:	3201      	adds	r2, #1
 8013b10:	4650      	mov	r0, sl
 8013b12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013b16:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013b1a:	ee07 2a90 	vmov	s15, r2
 8013b1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013b22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013b26:	ed8d 5b02 	vstr	d5, [sp, #8]
 8013b2a:	9c03      	ldr	r4, [sp, #12]
 8013b2c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013b30:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8013b34:	2800      	cmp	r0, #0
 8013b36:	f040 8086 	bne.w	8013c46 <_dtoa_r+0x4c6>
 8013b3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013b3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013b42:	ec42 1b17 	vmov	d7, r1, r2
 8013b46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b4e:	f300 8272 	bgt.w	8014036 <_dtoa_r+0x8b6>
 8013b52:	eeb1 7b47 	vneg.f64	d7, d7
 8013b56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b5e:	f100 8267 	bmi.w	8014030 <_dtoa_r+0x8b0>
 8013b62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8013b66:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013b6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013b6c:	2a00      	cmp	r2, #0
 8013b6e:	f2c0 8129 	blt.w	8013dc4 <_dtoa_r+0x644>
 8013b72:	f1bb 0f0e 	cmp.w	fp, #14
 8013b76:	f300 8125 	bgt.w	8013dc4 <_dtoa_r+0x644>
 8013b7a:	4b90      	ldr	r3, [pc, #576]	; (8013dbc <_dtoa_r+0x63c>)
 8013b7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013b80:	ed93 6b00 	vldr	d6, [r3]
 8013b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f280 80c3 	bge.w	8013d12 <_dtoa_r+0x592>
 8013b8c:	f1b9 0f00 	cmp.w	r9, #0
 8013b90:	f300 80bf 	bgt.w	8013d12 <_dtoa_r+0x592>
 8013b94:	f040 824c 	bne.w	8014030 <_dtoa_r+0x8b0>
 8013b98:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013b9c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013ba0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ba4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bac:	464c      	mov	r4, r9
 8013bae:	464f      	mov	r7, r9
 8013bb0:	f280 8222 	bge.w	8013ff8 <_dtoa_r+0x878>
 8013bb4:	f8dd 8000 	ldr.w	r8, [sp]
 8013bb8:	2331      	movs	r3, #49	; 0x31
 8013bba:	f808 3b01 	strb.w	r3, [r8], #1
 8013bbe:	f10b 0b01 	add.w	fp, fp, #1
 8013bc2:	e21e      	b.n	8014002 <_dtoa_r+0x882>
 8013bc4:	2202      	movs	r2, #2
 8013bc6:	e77c      	b.n	8013ac2 <_dtoa_r+0x342>
 8013bc8:	07cc      	lsls	r4, r1, #31
 8013bca:	d504      	bpl.n	8013bd6 <_dtoa_r+0x456>
 8013bcc:	ed90 6b00 	vldr	d6, [r0]
 8013bd0:	3201      	adds	r2, #1
 8013bd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013bd6:	1049      	asrs	r1, r1, #1
 8013bd8:	3008      	adds	r0, #8
 8013bda:	e773      	b.n	8013ac4 <_dtoa_r+0x344>
 8013bdc:	d02e      	beq.n	8013c3c <_dtoa_r+0x4bc>
 8013bde:	f1cb 0100 	rsb	r1, fp, #0
 8013be2:	4a76      	ldr	r2, [pc, #472]	; (8013dbc <_dtoa_r+0x63c>)
 8013be4:	f001 000f 	and.w	r0, r1, #15
 8013be8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013bec:	ed92 7b00 	vldr	d7, [r2]
 8013bf0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8013bf4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013bf8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013bfc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8013c00:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013c04:	486e      	ldr	r0, [pc, #440]	; (8013dc0 <_dtoa_r+0x640>)
 8013c06:	1109      	asrs	r1, r1, #4
 8013c08:	2400      	movs	r4, #0
 8013c0a:	2202      	movs	r2, #2
 8013c0c:	b939      	cbnz	r1, 8013c1e <_dtoa_r+0x49e>
 8013c0e:	2c00      	cmp	r4, #0
 8013c10:	f43f af60 	beq.w	8013ad4 <_dtoa_r+0x354>
 8013c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c1c:	e75a      	b.n	8013ad4 <_dtoa_r+0x354>
 8013c1e:	07cf      	lsls	r7, r1, #31
 8013c20:	d509      	bpl.n	8013c36 <_dtoa_r+0x4b6>
 8013c22:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8013c26:	ed90 7b00 	vldr	d7, [r0]
 8013c2a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013c2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8013c32:	3201      	adds	r2, #1
 8013c34:	2401      	movs	r4, #1
 8013c36:	1049      	asrs	r1, r1, #1
 8013c38:	3008      	adds	r0, #8
 8013c3a:	e7e7      	b.n	8013c0c <_dtoa_r+0x48c>
 8013c3c:	2202      	movs	r2, #2
 8013c3e:	e749      	b.n	8013ad4 <_dtoa_r+0x354>
 8013c40:	465f      	mov	r7, fp
 8013c42:	4648      	mov	r0, r9
 8013c44:	e765      	b.n	8013b12 <_dtoa_r+0x392>
 8013c46:	ec42 1b17 	vmov	d7, r1, r2
 8013c4a:	4a5c      	ldr	r2, [pc, #368]	; (8013dbc <_dtoa_r+0x63c>)
 8013c4c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013c50:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013c54:	9a00      	ldr	r2, [sp, #0]
 8013c56:	1814      	adds	r4, r2, r0
 8013c58:	9a08      	ldr	r2, [sp, #32]
 8013c5a:	b352      	cbz	r2, 8013cb2 <_dtoa_r+0x532>
 8013c5c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013c60:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013c64:	f8dd 8000 	ldr.w	r8, [sp]
 8013c68:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013c6c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013c70:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013c74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013c78:	ee14 2a90 	vmov	r2, s9
 8013c7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013c80:	3230      	adds	r2, #48	; 0x30
 8013c82:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013c86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c8e:	f808 2b01 	strb.w	r2, [r8], #1
 8013c92:	d439      	bmi.n	8013d08 <_dtoa_r+0x588>
 8013c94:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013c98:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca0:	d472      	bmi.n	8013d88 <_dtoa_r+0x608>
 8013ca2:	45a0      	cmp	r8, r4
 8013ca4:	f43f af5d 	beq.w	8013b62 <_dtoa_r+0x3e2>
 8013ca8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013cac:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013cb0:	e7e0      	b.n	8013c74 <_dtoa_r+0x4f4>
 8013cb2:	f8dd 8000 	ldr.w	r8, [sp]
 8013cb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013cba:	4621      	mov	r1, r4
 8013cbc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013cc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013cc4:	ee14 2a90 	vmov	r2, s9
 8013cc8:	3230      	adds	r2, #48	; 0x30
 8013cca:	f808 2b01 	strb.w	r2, [r8], #1
 8013cce:	45a0      	cmp	r8, r4
 8013cd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013cd4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013cd8:	d118      	bne.n	8013d0c <_dtoa_r+0x58c>
 8013cda:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013cde:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013ce2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cea:	dc4d      	bgt.n	8013d88 <_dtoa_r+0x608>
 8013cec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013cf0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf8:	f57f af33 	bpl.w	8013b62 <_dtoa_r+0x3e2>
 8013cfc:	4688      	mov	r8, r1
 8013cfe:	3901      	subs	r1, #1
 8013d00:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013d04:	2b30      	cmp	r3, #48	; 0x30
 8013d06:	d0f9      	beq.n	8013cfc <_dtoa_r+0x57c>
 8013d08:	46bb      	mov	fp, r7
 8013d0a:	e02a      	b.n	8013d62 <_dtoa_r+0x5e2>
 8013d0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013d10:	e7d6      	b.n	8013cc0 <_dtoa_r+0x540>
 8013d12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d16:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013d1a:	f8dd 8000 	ldr.w	r8, [sp]
 8013d1e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013d22:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013d26:	ee15 3a10 	vmov	r3, s10
 8013d2a:	3330      	adds	r3, #48	; 0x30
 8013d2c:	f808 3b01 	strb.w	r3, [r8], #1
 8013d30:	9b00      	ldr	r3, [sp, #0]
 8013d32:	eba8 0303 	sub.w	r3, r8, r3
 8013d36:	4599      	cmp	r9, r3
 8013d38:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013d3c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013d40:	d133      	bne.n	8013daa <_dtoa_r+0x62a>
 8013d42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013d46:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4e:	dc1a      	bgt.n	8013d86 <_dtoa_r+0x606>
 8013d50:	eeb4 7b46 	vcmp.f64	d7, d6
 8013d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d58:	d103      	bne.n	8013d62 <_dtoa_r+0x5e2>
 8013d5a:	ee15 3a10 	vmov	r3, s10
 8013d5e:	07d9      	lsls	r1, r3, #31
 8013d60:	d411      	bmi.n	8013d86 <_dtoa_r+0x606>
 8013d62:	4629      	mov	r1, r5
 8013d64:	4630      	mov	r0, r6
 8013d66:	f000 faeb 	bl	8014340 <_Bfree>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d6e:	f888 3000 	strb.w	r3, [r8]
 8013d72:	f10b 0301 	add.w	r3, fp, #1
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	f43f ad4d 	beq.w	801381a <_dtoa_r+0x9a>
 8013d80:	f8c3 8000 	str.w	r8, [r3]
 8013d84:	e549      	b.n	801381a <_dtoa_r+0x9a>
 8013d86:	465f      	mov	r7, fp
 8013d88:	4643      	mov	r3, r8
 8013d8a:	4698      	mov	r8, r3
 8013d8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013d90:	2a39      	cmp	r2, #57	; 0x39
 8013d92:	d106      	bne.n	8013da2 <_dtoa_r+0x622>
 8013d94:	9a00      	ldr	r2, [sp, #0]
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d1f7      	bne.n	8013d8a <_dtoa_r+0x60a>
 8013d9a:	9900      	ldr	r1, [sp, #0]
 8013d9c:	2230      	movs	r2, #48	; 0x30
 8013d9e:	3701      	adds	r7, #1
 8013da0:	700a      	strb	r2, [r1, #0]
 8013da2:	781a      	ldrb	r2, [r3, #0]
 8013da4:	3201      	adds	r2, #1
 8013da6:	701a      	strb	r2, [r3, #0]
 8013da8:	e7ae      	b.n	8013d08 <_dtoa_r+0x588>
 8013daa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013dae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db6:	d1b2      	bne.n	8013d1e <_dtoa_r+0x59e>
 8013db8:	e7d3      	b.n	8013d62 <_dtoa_r+0x5e2>
 8013dba:	bf00      	nop
 8013dbc:	08015a38 	.word	0x08015a38
 8013dc0:	08015a10 	.word	0x08015a10
 8013dc4:	9908      	ldr	r1, [sp, #32]
 8013dc6:	2900      	cmp	r1, #0
 8013dc8:	f000 80d1 	beq.w	8013f6e <_dtoa_r+0x7ee>
 8013dcc:	9907      	ldr	r1, [sp, #28]
 8013dce:	2901      	cmp	r1, #1
 8013dd0:	f300 80b4 	bgt.w	8013f3c <_dtoa_r+0x7bc>
 8013dd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013dd6:	2900      	cmp	r1, #0
 8013dd8:	f000 80ac 	beq.w	8013f34 <_dtoa_r+0x7b4>
 8013ddc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013de0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013de4:	461c      	mov	r4, r3
 8013de6:	930a      	str	r3, [sp, #40]	; 0x28
 8013de8:	9b05      	ldr	r3, [sp, #20]
 8013dea:	4413      	add	r3, r2
 8013dec:	9305      	str	r3, [sp, #20]
 8013dee:	9b06      	ldr	r3, [sp, #24]
 8013df0:	2101      	movs	r1, #1
 8013df2:	4413      	add	r3, r2
 8013df4:	4630      	mov	r0, r6
 8013df6:	9306      	str	r3, [sp, #24]
 8013df8:	f000 fb5e 	bl	80144b8 <__i2b>
 8013dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dfe:	4607      	mov	r7, r0
 8013e00:	f1b8 0f00 	cmp.w	r8, #0
 8013e04:	dd0d      	ble.n	8013e22 <_dtoa_r+0x6a2>
 8013e06:	9a06      	ldr	r2, [sp, #24]
 8013e08:	2a00      	cmp	r2, #0
 8013e0a:	dd0a      	ble.n	8013e22 <_dtoa_r+0x6a2>
 8013e0c:	4542      	cmp	r2, r8
 8013e0e:	9905      	ldr	r1, [sp, #20]
 8013e10:	bfa8      	it	ge
 8013e12:	4642      	movge	r2, r8
 8013e14:	1a89      	subs	r1, r1, r2
 8013e16:	9105      	str	r1, [sp, #20]
 8013e18:	9906      	ldr	r1, [sp, #24]
 8013e1a:	eba8 0802 	sub.w	r8, r8, r2
 8013e1e:	1a8a      	subs	r2, r1, r2
 8013e20:	9206      	str	r2, [sp, #24]
 8013e22:	b303      	cbz	r3, 8013e66 <_dtoa_r+0x6e6>
 8013e24:	9a08      	ldr	r2, [sp, #32]
 8013e26:	2a00      	cmp	r2, #0
 8013e28:	f000 80a6 	beq.w	8013f78 <_dtoa_r+0x7f8>
 8013e2c:	2c00      	cmp	r4, #0
 8013e2e:	dd13      	ble.n	8013e58 <_dtoa_r+0x6d8>
 8013e30:	4639      	mov	r1, r7
 8013e32:	4622      	mov	r2, r4
 8013e34:	4630      	mov	r0, r6
 8013e36:	930c      	str	r3, [sp, #48]	; 0x30
 8013e38:	f000 fbfa 	bl	8014630 <__pow5mult>
 8013e3c:	462a      	mov	r2, r5
 8013e3e:	4601      	mov	r1, r0
 8013e40:	4607      	mov	r7, r0
 8013e42:	4630      	mov	r0, r6
 8013e44:	f000 fb4e 	bl	80144e4 <__multiply>
 8013e48:	4629      	mov	r1, r5
 8013e4a:	900a      	str	r0, [sp, #40]	; 0x28
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	f000 fa77 	bl	8014340 <_Bfree>
 8013e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013e56:	4615      	mov	r5, r2
 8013e58:	1b1a      	subs	r2, r3, r4
 8013e5a:	d004      	beq.n	8013e66 <_dtoa_r+0x6e6>
 8013e5c:	4629      	mov	r1, r5
 8013e5e:	4630      	mov	r0, r6
 8013e60:	f000 fbe6 	bl	8014630 <__pow5mult>
 8013e64:	4605      	mov	r5, r0
 8013e66:	2101      	movs	r1, #1
 8013e68:	4630      	mov	r0, r6
 8013e6a:	f000 fb25 	bl	80144b8 <__i2b>
 8013e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	4604      	mov	r4, r0
 8013e74:	f340 8082 	ble.w	8013f7c <_dtoa_r+0x7fc>
 8013e78:	461a      	mov	r2, r3
 8013e7a:	4601      	mov	r1, r0
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f000 fbd7 	bl	8014630 <__pow5mult>
 8013e82:	9b07      	ldr	r3, [sp, #28]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	4604      	mov	r4, r0
 8013e88:	dd7b      	ble.n	8013f82 <_dtoa_r+0x802>
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	930a      	str	r3, [sp, #40]	; 0x28
 8013e8e:	6922      	ldr	r2, [r4, #16]
 8013e90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013e94:	6910      	ldr	r0, [r2, #16]
 8013e96:	f000 fabf 	bl	8014418 <__hi0bits>
 8013e9a:	f1c0 0020 	rsb	r0, r0, #32
 8013e9e:	9b06      	ldr	r3, [sp, #24]
 8013ea0:	4418      	add	r0, r3
 8013ea2:	f010 001f 	ands.w	r0, r0, #31
 8013ea6:	f000 808d 	beq.w	8013fc4 <_dtoa_r+0x844>
 8013eaa:	f1c0 0220 	rsb	r2, r0, #32
 8013eae:	2a04      	cmp	r2, #4
 8013eb0:	f340 8086 	ble.w	8013fc0 <_dtoa_r+0x840>
 8013eb4:	f1c0 001c 	rsb	r0, r0, #28
 8013eb8:	9b05      	ldr	r3, [sp, #20]
 8013eba:	4403      	add	r3, r0
 8013ebc:	9305      	str	r3, [sp, #20]
 8013ebe:	9b06      	ldr	r3, [sp, #24]
 8013ec0:	4403      	add	r3, r0
 8013ec2:	4480      	add	r8, r0
 8013ec4:	9306      	str	r3, [sp, #24]
 8013ec6:	9b05      	ldr	r3, [sp, #20]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	dd05      	ble.n	8013ed8 <_dtoa_r+0x758>
 8013ecc:	4629      	mov	r1, r5
 8013ece:	461a      	mov	r2, r3
 8013ed0:	4630      	mov	r0, r6
 8013ed2:	f000 fc07 	bl	80146e4 <__lshift>
 8013ed6:	4605      	mov	r5, r0
 8013ed8:	9b06      	ldr	r3, [sp, #24]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	dd05      	ble.n	8013eea <_dtoa_r+0x76a>
 8013ede:	4621      	mov	r1, r4
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f000 fbfe 	bl	80146e4 <__lshift>
 8013ee8:	4604      	mov	r4, r0
 8013eea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d06b      	beq.n	8013fc8 <_dtoa_r+0x848>
 8013ef0:	4621      	mov	r1, r4
 8013ef2:	4628      	mov	r0, r5
 8013ef4:	f000 fc62 	bl	80147bc <__mcmp>
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	da65      	bge.n	8013fc8 <_dtoa_r+0x848>
 8013efc:	2300      	movs	r3, #0
 8013efe:	4629      	mov	r1, r5
 8013f00:	220a      	movs	r2, #10
 8013f02:	4630      	mov	r0, r6
 8013f04:	f000 fa3e 	bl	8014384 <__multadd>
 8013f08:	9b08      	ldr	r3, [sp, #32]
 8013f0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f0e:	4605      	mov	r5, r0
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	f000 8192 	beq.w	801423a <_dtoa_r+0xaba>
 8013f16:	4639      	mov	r1, r7
 8013f18:	2300      	movs	r3, #0
 8013f1a:	220a      	movs	r2, #10
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f000 fa31 	bl	8014384 <__multadd>
 8013f22:	f1ba 0f00 	cmp.w	sl, #0
 8013f26:	4607      	mov	r7, r0
 8013f28:	f300 808e 	bgt.w	8014048 <_dtoa_r+0x8c8>
 8013f2c:	9b07      	ldr	r3, [sp, #28]
 8013f2e:	2b02      	cmp	r3, #2
 8013f30:	dc51      	bgt.n	8013fd6 <_dtoa_r+0x856>
 8013f32:	e089      	b.n	8014048 <_dtoa_r+0x8c8>
 8013f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013f36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013f3a:	e751      	b.n	8013de0 <_dtoa_r+0x660>
 8013f3c:	f109 34ff 	add.w	r4, r9, #4294967295
 8013f40:	42a3      	cmp	r3, r4
 8013f42:	bfbf      	itttt	lt
 8013f44:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8013f46:	1ae3      	sublt	r3, r4, r3
 8013f48:	18d2      	addlt	r2, r2, r3
 8013f4a:	4613      	movlt	r3, r2
 8013f4c:	bfb7      	itett	lt
 8013f4e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013f50:	1b1c      	subge	r4, r3, r4
 8013f52:	4623      	movlt	r3, r4
 8013f54:	2400      	movlt	r4, #0
 8013f56:	f1b9 0f00 	cmp.w	r9, #0
 8013f5a:	bfb5      	itete	lt
 8013f5c:	9a05      	ldrlt	r2, [sp, #20]
 8013f5e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8013f62:	eba2 0809 	sublt.w	r8, r2, r9
 8013f66:	464a      	movge	r2, r9
 8013f68:	bfb8      	it	lt
 8013f6a:	2200      	movlt	r2, #0
 8013f6c:	e73b      	b.n	8013de6 <_dtoa_r+0x666>
 8013f6e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013f72:	9f08      	ldr	r7, [sp, #32]
 8013f74:	461c      	mov	r4, r3
 8013f76:	e743      	b.n	8013e00 <_dtoa_r+0x680>
 8013f78:	461a      	mov	r2, r3
 8013f7a:	e76f      	b.n	8013e5c <_dtoa_r+0x6dc>
 8013f7c:	9b07      	ldr	r3, [sp, #28]
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	dc18      	bgt.n	8013fb4 <_dtoa_r+0x834>
 8013f82:	9b02      	ldr	r3, [sp, #8]
 8013f84:	b9b3      	cbnz	r3, 8013fb4 <_dtoa_r+0x834>
 8013f86:	9b03      	ldr	r3, [sp, #12]
 8013f88:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013f8c:	b9a2      	cbnz	r2, 8013fb8 <_dtoa_r+0x838>
 8013f8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013f92:	0d12      	lsrs	r2, r2, #20
 8013f94:	0512      	lsls	r2, r2, #20
 8013f96:	b18a      	cbz	r2, 8013fbc <_dtoa_r+0x83c>
 8013f98:	9b05      	ldr	r3, [sp, #20]
 8013f9a:	3301      	adds	r3, #1
 8013f9c:	9305      	str	r3, [sp, #20]
 8013f9e:	9b06      	ldr	r3, [sp, #24]
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	9306      	str	r3, [sp, #24]
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8013fa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	f47f af6f 	bne.w	8013e8e <_dtoa_r+0x70e>
 8013fb0:	2001      	movs	r0, #1
 8013fb2:	e774      	b.n	8013e9e <_dtoa_r+0x71e>
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	e7f6      	b.n	8013fa6 <_dtoa_r+0x826>
 8013fb8:	9b02      	ldr	r3, [sp, #8]
 8013fba:	e7f4      	b.n	8013fa6 <_dtoa_r+0x826>
 8013fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8013fbe:	e7f3      	b.n	8013fa8 <_dtoa_r+0x828>
 8013fc0:	d081      	beq.n	8013ec6 <_dtoa_r+0x746>
 8013fc2:	4610      	mov	r0, r2
 8013fc4:	301c      	adds	r0, #28
 8013fc6:	e777      	b.n	8013eb8 <_dtoa_r+0x738>
 8013fc8:	f1b9 0f00 	cmp.w	r9, #0
 8013fcc:	dc37      	bgt.n	801403e <_dtoa_r+0x8be>
 8013fce:	9b07      	ldr	r3, [sp, #28]
 8013fd0:	2b02      	cmp	r3, #2
 8013fd2:	dd34      	ble.n	801403e <_dtoa_r+0x8be>
 8013fd4:	46ca      	mov	sl, r9
 8013fd6:	f1ba 0f00 	cmp.w	sl, #0
 8013fda:	d10d      	bne.n	8013ff8 <_dtoa_r+0x878>
 8013fdc:	4621      	mov	r1, r4
 8013fde:	4653      	mov	r3, sl
 8013fe0:	2205      	movs	r2, #5
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f000 f9ce 	bl	8014384 <__multadd>
 8013fe8:	4601      	mov	r1, r0
 8013fea:	4604      	mov	r4, r0
 8013fec:	4628      	mov	r0, r5
 8013fee:	f000 fbe5 	bl	80147bc <__mcmp>
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	f73f adde 	bgt.w	8013bb4 <_dtoa_r+0x434>
 8013ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ffa:	f8dd 8000 	ldr.w	r8, [sp]
 8013ffe:	ea6f 0b03 	mvn.w	fp, r3
 8014002:	f04f 0900 	mov.w	r9, #0
 8014006:	4621      	mov	r1, r4
 8014008:	4630      	mov	r0, r6
 801400a:	f000 f999 	bl	8014340 <_Bfree>
 801400e:	2f00      	cmp	r7, #0
 8014010:	f43f aea7 	beq.w	8013d62 <_dtoa_r+0x5e2>
 8014014:	f1b9 0f00 	cmp.w	r9, #0
 8014018:	d005      	beq.n	8014026 <_dtoa_r+0x8a6>
 801401a:	45b9      	cmp	r9, r7
 801401c:	d003      	beq.n	8014026 <_dtoa_r+0x8a6>
 801401e:	4649      	mov	r1, r9
 8014020:	4630      	mov	r0, r6
 8014022:	f000 f98d 	bl	8014340 <_Bfree>
 8014026:	4639      	mov	r1, r7
 8014028:	4630      	mov	r0, r6
 801402a:	f000 f989 	bl	8014340 <_Bfree>
 801402e:	e698      	b.n	8013d62 <_dtoa_r+0x5e2>
 8014030:	2400      	movs	r4, #0
 8014032:	4627      	mov	r7, r4
 8014034:	e7e0      	b.n	8013ff8 <_dtoa_r+0x878>
 8014036:	46bb      	mov	fp, r7
 8014038:	4604      	mov	r4, r0
 801403a:	4607      	mov	r7, r0
 801403c:	e5ba      	b.n	8013bb4 <_dtoa_r+0x434>
 801403e:	9b08      	ldr	r3, [sp, #32]
 8014040:	46ca      	mov	sl, r9
 8014042:	2b00      	cmp	r3, #0
 8014044:	f000 8100 	beq.w	8014248 <_dtoa_r+0xac8>
 8014048:	f1b8 0f00 	cmp.w	r8, #0
 801404c:	dd05      	ble.n	801405a <_dtoa_r+0x8da>
 801404e:	4639      	mov	r1, r7
 8014050:	4642      	mov	r2, r8
 8014052:	4630      	mov	r0, r6
 8014054:	f000 fb46 	bl	80146e4 <__lshift>
 8014058:	4607      	mov	r7, r0
 801405a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801405c:	2b00      	cmp	r3, #0
 801405e:	d05d      	beq.n	801411c <_dtoa_r+0x99c>
 8014060:	6879      	ldr	r1, [r7, #4]
 8014062:	4630      	mov	r0, r6
 8014064:	f000 f92c 	bl	80142c0 <_Balloc>
 8014068:	4680      	mov	r8, r0
 801406a:	b928      	cbnz	r0, 8014078 <_dtoa_r+0x8f8>
 801406c:	4b82      	ldr	r3, [pc, #520]	; (8014278 <_dtoa_r+0xaf8>)
 801406e:	4602      	mov	r2, r0
 8014070:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014074:	f7ff bb9a 	b.w	80137ac <_dtoa_r+0x2c>
 8014078:	693a      	ldr	r2, [r7, #16]
 801407a:	3202      	adds	r2, #2
 801407c:	0092      	lsls	r2, r2, #2
 801407e:	f107 010c 	add.w	r1, r7, #12
 8014082:	300c      	adds	r0, #12
 8014084:	f000 f902 	bl	801428c <memcpy>
 8014088:	2201      	movs	r2, #1
 801408a:	4641      	mov	r1, r8
 801408c:	4630      	mov	r0, r6
 801408e:	f000 fb29 	bl	80146e4 <__lshift>
 8014092:	9b00      	ldr	r3, [sp, #0]
 8014094:	3301      	adds	r3, #1
 8014096:	9305      	str	r3, [sp, #20]
 8014098:	9b00      	ldr	r3, [sp, #0]
 801409a:	4453      	add	r3, sl
 801409c:	9309      	str	r3, [sp, #36]	; 0x24
 801409e:	9b02      	ldr	r3, [sp, #8]
 80140a0:	f003 0301 	and.w	r3, r3, #1
 80140a4:	46b9      	mov	r9, r7
 80140a6:	9308      	str	r3, [sp, #32]
 80140a8:	4607      	mov	r7, r0
 80140aa:	9b05      	ldr	r3, [sp, #20]
 80140ac:	4621      	mov	r1, r4
 80140ae:	3b01      	subs	r3, #1
 80140b0:	4628      	mov	r0, r5
 80140b2:	9302      	str	r3, [sp, #8]
 80140b4:	f7ff fad6 	bl	8013664 <quorem>
 80140b8:	4603      	mov	r3, r0
 80140ba:	3330      	adds	r3, #48	; 0x30
 80140bc:	9006      	str	r0, [sp, #24]
 80140be:	4649      	mov	r1, r9
 80140c0:	4628      	mov	r0, r5
 80140c2:	930a      	str	r3, [sp, #40]	; 0x28
 80140c4:	f000 fb7a 	bl	80147bc <__mcmp>
 80140c8:	463a      	mov	r2, r7
 80140ca:	4682      	mov	sl, r0
 80140cc:	4621      	mov	r1, r4
 80140ce:	4630      	mov	r0, r6
 80140d0:	f000 fb90 	bl	80147f4 <__mdiff>
 80140d4:	68c2      	ldr	r2, [r0, #12]
 80140d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140d8:	4680      	mov	r8, r0
 80140da:	bb0a      	cbnz	r2, 8014120 <_dtoa_r+0x9a0>
 80140dc:	4601      	mov	r1, r0
 80140de:	4628      	mov	r0, r5
 80140e0:	f000 fb6c 	bl	80147bc <__mcmp>
 80140e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140e6:	4602      	mov	r2, r0
 80140e8:	4641      	mov	r1, r8
 80140ea:	4630      	mov	r0, r6
 80140ec:	920e      	str	r2, [sp, #56]	; 0x38
 80140ee:	930a      	str	r3, [sp, #40]	; 0x28
 80140f0:	f000 f926 	bl	8014340 <_Bfree>
 80140f4:	9b07      	ldr	r3, [sp, #28]
 80140f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80140fc:	ea43 0102 	orr.w	r1, r3, r2
 8014100:	9b08      	ldr	r3, [sp, #32]
 8014102:	430b      	orrs	r3, r1
 8014104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014106:	d10d      	bne.n	8014124 <_dtoa_r+0x9a4>
 8014108:	2b39      	cmp	r3, #57	; 0x39
 801410a:	d029      	beq.n	8014160 <_dtoa_r+0x9e0>
 801410c:	f1ba 0f00 	cmp.w	sl, #0
 8014110:	dd01      	ble.n	8014116 <_dtoa_r+0x996>
 8014112:	9b06      	ldr	r3, [sp, #24]
 8014114:	3331      	adds	r3, #49	; 0x31
 8014116:	9a02      	ldr	r2, [sp, #8]
 8014118:	7013      	strb	r3, [r2, #0]
 801411a:	e774      	b.n	8014006 <_dtoa_r+0x886>
 801411c:	4638      	mov	r0, r7
 801411e:	e7b8      	b.n	8014092 <_dtoa_r+0x912>
 8014120:	2201      	movs	r2, #1
 8014122:	e7e1      	b.n	80140e8 <_dtoa_r+0x968>
 8014124:	f1ba 0f00 	cmp.w	sl, #0
 8014128:	db06      	blt.n	8014138 <_dtoa_r+0x9b8>
 801412a:	9907      	ldr	r1, [sp, #28]
 801412c:	ea41 0a0a 	orr.w	sl, r1, sl
 8014130:	9908      	ldr	r1, [sp, #32]
 8014132:	ea5a 0101 	orrs.w	r1, sl, r1
 8014136:	d120      	bne.n	801417a <_dtoa_r+0x9fa>
 8014138:	2a00      	cmp	r2, #0
 801413a:	ddec      	ble.n	8014116 <_dtoa_r+0x996>
 801413c:	4629      	mov	r1, r5
 801413e:	2201      	movs	r2, #1
 8014140:	4630      	mov	r0, r6
 8014142:	9305      	str	r3, [sp, #20]
 8014144:	f000 face 	bl	80146e4 <__lshift>
 8014148:	4621      	mov	r1, r4
 801414a:	4605      	mov	r5, r0
 801414c:	f000 fb36 	bl	80147bc <__mcmp>
 8014150:	2800      	cmp	r0, #0
 8014152:	9b05      	ldr	r3, [sp, #20]
 8014154:	dc02      	bgt.n	801415c <_dtoa_r+0x9dc>
 8014156:	d1de      	bne.n	8014116 <_dtoa_r+0x996>
 8014158:	07da      	lsls	r2, r3, #31
 801415a:	d5dc      	bpl.n	8014116 <_dtoa_r+0x996>
 801415c:	2b39      	cmp	r3, #57	; 0x39
 801415e:	d1d8      	bne.n	8014112 <_dtoa_r+0x992>
 8014160:	9a02      	ldr	r2, [sp, #8]
 8014162:	2339      	movs	r3, #57	; 0x39
 8014164:	7013      	strb	r3, [r2, #0]
 8014166:	4643      	mov	r3, r8
 8014168:	4698      	mov	r8, r3
 801416a:	3b01      	subs	r3, #1
 801416c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014170:	2a39      	cmp	r2, #57	; 0x39
 8014172:	d051      	beq.n	8014218 <_dtoa_r+0xa98>
 8014174:	3201      	adds	r2, #1
 8014176:	701a      	strb	r2, [r3, #0]
 8014178:	e745      	b.n	8014006 <_dtoa_r+0x886>
 801417a:	2a00      	cmp	r2, #0
 801417c:	dd03      	ble.n	8014186 <_dtoa_r+0xa06>
 801417e:	2b39      	cmp	r3, #57	; 0x39
 8014180:	d0ee      	beq.n	8014160 <_dtoa_r+0x9e0>
 8014182:	3301      	adds	r3, #1
 8014184:	e7c7      	b.n	8014116 <_dtoa_r+0x996>
 8014186:	9a05      	ldr	r2, [sp, #20]
 8014188:	9909      	ldr	r1, [sp, #36]	; 0x24
 801418a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801418e:	428a      	cmp	r2, r1
 8014190:	d02b      	beq.n	80141ea <_dtoa_r+0xa6a>
 8014192:	4629      	mov	r1, r5
 8014194:	2300      	movs	r3, #0
 8014196:	220a      	movs	r2, #10
 8014198:	4630      	mov	r0, r6
 801419a:	f000 f8f3 	bl	8014384 <__multadd>
 801419e:	45b9      	cmp	r9, r7
 80141a0:	4605      	mov	r5, r0
 80141a2:	f04f 0300 	mov.w	r3, #0
 80141a6:	f04f 020a 	mov.w	r2, #10
 80141aa:	4649      	mov	r1, r9
 80141ac:	4630      	mov	r0, r6
 80141ae:	d107      	bne.n	80141c0 <_dtoa_r+0xa40>
 80141b0:	f000 f8e8 	bl	8014384 <__multadd>
 80141b4:	4681      	mov	r9, r0
 80141b6:	4607      	mov	r7, r0
 80141b8:	9b05      	ldr	r3, [sp, #20]
 80141ba:	3301      	adds	r3, #1
 80141bc:	9305      	str	r3, [sp, #20]
 80141be:	e774      	b.n	80140aa <_dtoa_r+0x92a>
 80141c0:	f000 f8e0 	bl	8014384 <__multadd>
 80141c4:	4639      	mov	r1, r7
 80141c6:	4681      	mov	r9, r0
 80141c8:	2300      	movs	r3, #0
 80141ca:	220a      	movs	r2, #10
 80141cc:	4630      	mov	r0, r6
 80141ce:	f000 f8d9 	bl	8014384 <__multadd>
 80141d2:	4607      	mov	r7, r0
 80141d4:	e7f0      	b.n	80141b8 <_dtoa_r+0xa38>
 80141d6:	f1ba 0f00 	cmp.w	sl, #0
 80141da:	9a00      	ldr	r2, [sp, #0]
 80141dc:	bfcc      	ite	gt
 80141de:	46d0      	movgt	r8, sl
 80141e0:	f04f 0801 	movle.w	r8, #1
 80141e4:	4490      	add	r8, r2
 80141e6:	f04f 0900 	mov.w	r9, #0
 80141ea:	4629      	mov	r1, r5
 80141ec:	2201      	movs	r2, #1
 80141ee:	4630      	mov	r0, r6
 80141f0:	9302      	str	r3, [sp, #8]
 80141f2:	f000 fa77 	bl	80146e4 <__lshift>
 80141f6:	4621      	mov	r1, r4
 80141f8:	4605      	mov	r5, r0
 80141fa:	f000 fadf 	bl	80147bc <__mcmp>
 80141fe:	2800      	cmp	r0, #0
 8014200:	dcb1      	bgt.n	8014166 <_dtoa_r+0x9e6>
 8014202:	d102      	bne.n	801420a <_dtoa_r+0xa8a>
 8014204:	9b02      	ldr	r3, [sp, #8]
 8014206:	07db      	lsls	r3, r3, #31
 8014208:	d4ad      	bmi.n	8014166 <_dtoa_r+0x9e6>
 801420a:	4643      	mov	r3, r8
 801420c:	4698      	mov	r8, r3
 801420e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014212:	2a30      	cmp	r2, #48	; 0x30
 8014214:	d0fa      	beq.n	801420c <_dtoa_r+0xa8c>
 8014216:	e6f6      	b.n	8014006 <_dtoa_r+0x886>
 8014218:	9a00      	ldr	r2, [sp, #0]
 801421a:	429a      	cmp	r2, r3
 801421c:	d1a4      	bne.n	8014168 <_dtoa_r+0x9e8>
 801421e:	f10b 0b01 	add.w	fp, fp, #1
 8014222:	2331      	movs	r3, #49	; 0x31
 8014224:	e778      	b.n	8014118 <_dtoa_r+0x998>
 8014226:	4b15      	ldr	r3, [pc, #84]	; (801427c <_dtoa_r+0xafc>)
 8014228:	f7ff bb12 	b.w	8013850 <_dtoa_r+0xd0>
 801422c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801422e:	2b00      	cmp	r3, #0
 8014230:	f47f aaee 	bne.w	8013810 <_dtoa_r+0x90>
 8014234:	4b12      	ldr	r3, [pc, #72]	; (8014280 <_dtoa_r+0xb00>)
 8014236:	f7ff bb0b 	b.w	8013850 <_dtoa_r+0xd0>
 801423a:	f1ba 0f00 	cmp.w	sl, #0
 801423e:	dc03      	bgt.n	8014248 <_dtoa_r+0xac8>
 8014240:	9b07      	ldr	r3, [sp, #28]
 8014242:	2b02      	cmp	r3, #2
 8014244:	f73f aec7 	bgt.w	8013fd6 <_dtoa_r+0x856>
 8014248:	f8dd 8000 	ldr.w	r8, [sp]
 801424c:	4621      	mov	r1, r4
 801424e:	4628      	mov	r0, r5
 8014250:	f7ff fa08 	bl	8013664 <quorem>
 8014254:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014258:	f808 3b01 	strb.w	r3, [r8], #1
 801425c:	9a00      	ldr	r2, [sp, #0]
 801425e:	eba8 0202 	sub.w	r2, r8, r2
 8014262:	4592      	cmp	sl, r2
 8014264:	ddb7      	ble.n	80141d6 <_dtoa_r+0xa56>
 8014266:	4629      	mov	r1, r5
 8014268:	2300      	movs	r3, #0
 801426a:	220a      	movs	r2, #10
 801426c:	4630      	mov	r0, r6
 801426e:	f000 f889 	bl	8014384 <__multadd>
 8014272:	4605      	mov	r5, r0
 8014274:	e7ea      	b.n	801424c <_dtoa_r+0xacc>
 8014276:	bf00      	nop
 8014278:	0801599f 	.word	0x0801599f
 801427c:	080158f8 	.word	0x080158f8
 8014280:	0801591c 	.word	0x0801591c

08014284 <_localeconv_r>:
 8014284:	4800      	ldr	r0, [pc, #0]	; (8014288 <_localeconv_r+0x4>)
 8014286:	4770      	bx	lr
 8014288:	240003dc 	.word	0x240003dc

0801428c <memcpy>:
 801428c:	440a      	add	r2, r1
 801428e:	4291      	cmp	r1, r2
 8014290:	f100 33ff 	add.w	r3, r0, #4294967295
 8014294:	d100      	bne.n	8014298 <memcpy+0xc>
 8014296:	4770      	bx	lr
 8014298:	b510      	push	{r4, lr}
 801429a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801429e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142a2:	4291      	cmp	r1, r2
 80142a4:	d1f9      	bne.n	801429a <memcpy+0xe>
 80142a6:	bd10      	pop	{r4, pc}

080142a8 <__malloc_lock>:
 80142a8:	4801      	ldr	r0, [pc, #4]	; (80142b0 <__malloc_lock+0x8>)
 80142aa:	f000 bd22 	b.w	8014cf2 <__retarget_lock_acquire_recursive>
 80142ae:	bf00      	nop
 80142b0:	24004268 	.word	0x24004268

080142b4 <__malloc_unlock>:
 80142b4:	4801      	ldr	r0, [pc, #4]	; (80142bc <__malloc_unlock+0x8>)
 80142b6:	f000 bd1d 	b.w	8014cf4 <__retarget_lock_release_recursive>
 80142ba:	bf00      	nop
 80142bc:	24004268 	.word	0x24004268

080142c0 <_Balloc>:
 80142c0:	b570      	push	{r4, r5, r6, lr}
 80142c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80142c4:	4604      	mov	r4, r0
 80142c6:	460d      	mov	r5, r1
 80142c8:	b976      	cbnz	r6, 80142e8 <_Balloc+0x28>
 80142ca:	2010      	movs	r0, #16
 80142cc:	f7fe fc94 	bl	8012bf8 <malloc>
 80142d0:	4602      	mov	r2, r0
 80142d2:	6260      	str	r0, [r4, #36]	; 0x24
 80142d4:	b920      	cbnz	r0, 80142e0 <_Balloc+0x20>
 80142d6:	4b18      	ldr	r3, [pc, #96]	; (8014338 <_Balloc+0x78>)
 80142d8:	4818      	ldr	r0, [pc, #96]	; (801433c <_Balloc+0x7c>)
 80142da:	2166      	movs	r1, #102	; 0x66
 80142dc:	f000 fcd8 	bl	8014c90 <__assert_func>
 80142e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80142e4:	6006      	str	r6, [r0, #0]
 80142e6:	60c6      	str	r6, [r0, #12]
 80142e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80142ea:	68f3      	ldr	r3, [r6, #12]
 80142ec:	b183      	cbz	r3, 8014310 <_Balloc+0x50>
 80142ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80142f6:	b9b8      	cbnz	r0, 8014328 <_Balloc+0x68>
 80142f8:	2101      	movs	r1, #1
 80142fa:	fa01 f605 	lsl.w	r6, r1, r5
 80142fe:	1d72      	adds	r2, r6, #5
 8014300:	0092      	lsls	r2, r2, #2
 8014302:	4620      	mov	r0, r4
 8014304:	f000 fb5a 	bl	80149bc <_calloc_r>
 8014308:	b160      	cbz	r0, 8014324 <_Balloc+0x64>
 801430a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801430e:	e00e      	b.n	801432e <_Balloc+0x6e>
 8014310:	2221      	movs	r2, #33	; 0x21
 8014312:	2104      	movs	r1, #4
 8014314:	4620      	mov	r0, r4
 8014316:	f000 fb51 	bl	80149bc <_calloc_r>
 801431a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801431c:	60f0      	str	r0, [r6, #12]
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d1e4      	bne.n	80142ee <_Balloc+0x2e>
 8014324:	2000      	movs	r0, #0
 8014326:	bd70      	pop	{r4, r5, r6, pc}
 8014328:	6802      	ldr	r2, [r0, #0]
 801432a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801432e:	2300      	movs	r3, #0
 8014330:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014334:	e7f7      	b.n	8014326 <_Balloc+0x66>
 8014336:	bf00      	nop
 8014338:	08015929 	.word	0x08015929
 801433c:	080159b0 	.word	0x080159b0

08014340 <_Bfree>:
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014344:	4605      	mov	r5, r0
 8014346:	460c      	mov	r4, r1
 8014348:	b976      	cbnz	r6, 8014368 <_Bfree+0x28>
 801434a:	2010      	movs	r0, #16
 801434c:	f7fe fc54 	bl	8012bf8 <malloc>
 8014350:	4602      	mov	r2, r0
 8014352:	6268      	str	r0, [r5, #36]	; 0x24
 8014354:	b920      	cbnz	r0, 8014360 <_Bfree+0x20>
 8014356:	4b09      	ldr	r3, [pc, #36]	; (801437c <_Bfree+0x3c>)
 8014358:	4809      	ldr	r0, [pc, #36]	; (8014380 <_Bfree+0x40>)
 801435a:	218a      	movs	r1, #138	; 0x8a
 801435c:	f000 fc98 	bl	8014c90 <__assert_func>
 8014360:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014364:	6006      	str	r6, [r0, #0]
 8014366:	60c6      	str	r6, [r0, #12]
 8014368:	b13c      	cbz	r4, 801437a <_Bfree+0x3a>
 801436a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801436c:	6862      	ldr	r2, [r4, #4]
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014374:	6021      	str	r1, [r4, #0]
 8014376:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801437a:	bd70      	pop	{r4, r5, r6, pc}
 801437c:	08015929 	.word	0x08015929
 8014380:	080159b0 	.word	0x080159b0

08014384 <__multadd>:
 8014384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014388:	690e      	ldr	r6, [r1, #16]
 801438a:	4607      	mov	r7, r0
 801438c:	4698      	mov	r8, r3
 801438e:	460c      	mov	r4, r1
 8014390:	f101 0014 	add.w	r0, r1, #20
 8014394:	2300      	movs	r3, #0
 8014396:	6805      	ldr	r5, [r0, #0]
 8014398:	b2a9      	uxth	r1, r5
 801439a:	fb02 8101 	mla	r1, r2, r1, r8
 801439e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80143a2:	0c2d      	lsrs	r5, r5, #16
 80143a4:	fb02 c505 	mla	r5, r2, r5, ip
 80143a8:	b289      	uxth	r1, r1
 80143aa:	3301      	adds	r3, #1
 80143ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80143b0:	429e      	cmp	r6, r3
 80143b2:	f840 1b04 	str.w	r1, [r0], #4
 80143b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80143ba:	dcec      	bgt.n	8014396 <__multadd+0x12>
 80143bc:	f1b8 0f00 	cmp.w	r8, #0
 80143c0:	d022      	beq.n	8014408 <__multadd+0x84>
 80143c2:	68a3      	ldr	r3, [r4, #8]
 80143c4:	42b3      	cmp	r3, r6
 80143c6:	dc19      	bgt.n	80143fc <__multadd+0x78>
 80143c8:	6861      	ldr	r1, [r4, #4]
 80143ca:	4638      	mov	r0, r7
 80143cc:	3101      	adds	r1, #1
 80143ce:	f7ff ff77 	bl	80142c0 <_Balloc>
 80143d2:	4605      	mov	r5, r0
 80143d4:	b928      	cbnz	r0, 80143e2 <__multadd+0x5e>
 80143d6:	4602      	mov	r2, r0
 80143d8:	4b0d      	ldr	r3, [pc, #52]	; (8014410 <__multadd+0x8c>)
 80143da:	480e      	ldr	r0, [pc, #56]	; (8014414 <__multadd+0x90>)
 80143dc:	21b5      	movs	r1, #181	; 0xb5
 80143de:	f000 fc57 	bl	8014c90 <__assert_func>
 80143e2:	6922      	ldr	r2, [r4, #16]
 80143e4:	3202      	adds	r2, #2
 80143e6:	f104 010c 	add.w	r1, r4, #12
 80143ea:	0092      	lsls	r2, r2, #2
 80143ec:	300c      	adds	r0, #12
 80143ee:	f7ff ff4d 	bl	801428c <memcpy>
 80143f2:	4621      	mov	r1, r4
 80143f4:	4638      	mov	r0, r7
 80143f6:	f7ff ffa3 	bl	8014340 <_Bfree>
 80143fa:	462c      	mov	r4, r5
 80143fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014400:	3601      	adds	r6, #1
 8014402:	f8c3 8014 	str.w	r8, [r3, #20]
 8014406:	6126      	str	r6, [r4, #16]
 8014408:	4620      	mov	r0, r4
 801440a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801440e:	bf00      	nop
 8014410:	0801599f 	.word	0x0801599f
 8014414:	080159b0 	.word	0x080159b0

08014418 <__hi0bits>:
 8014418:	0c03      	lsrs	r3, r0, #16
 801441a:	041b      	lsls	r3, r3, #16
 801441c:	b9d3      	cbnz	r3, 8014454 <__hi0bits+0x3c>
 801441e:	0400      	lsls	r0, r0, #16
 8014420:	2310      	movs	r3, #16
 8014422:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014426:	bf04      	itt	eq
 8014428:	0200      	lsleq	r0, r0, #8
 801442a:	3308      	addeq	r3, #8
 801442c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014430:	bf04      	itt	eq
 8014432:	0100      	lsleq	r0, r0, #4
 8014434:	3304      	addeq	r3, #4
 8014436:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801443a:	bf04      	itt	eq
 801443c:	0080      	lsleq	r0, r0, #2
 801443e:	3302      	addeq	r3, #2
 8014440:	2800      	cmp	r0, #0
 8014442:	db05      	blt.n	8014450 <__hi0bits+0x38>
 8014444:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014448:	f103 0301 	add.w	r3, r3, #1
 801444c:	bf08      	it	eq
 801444e:	2320      	moveq	r3, #32
 8014450:	4618      	mov	r0, r3
 8014452:	4770      	bx	lr
 8014454:	2300      	movs	r3, #0
 8014456:	e7e4      	b.n	8014422 <__hi0bits+0xa>

08014458 <__lo0bits>:
 8014458:	6803      	ldr	r3, [r0, #0]
 801445a:	f013 0207 	ands.w	r2, r3, #7
 801445e:	4601      	mov	r1, r0
 8014460:	d00b      	beq.n	801447a <__lo0bits+0x22>
 8014462:	07da      	lsls	r2, r3, #31
 8014464:	d424      	bmi.n	80144b0 <__lo0bits+0x58>
 8014466:	0798      	lsls	r0, r3, #30
 8014468:	bf49      	itett	mi
 801446a:	085b      	lsrmi	r3, r3, #1
 801446c:	089b      	lsrpl	r3, r3, #2
 801446e:	2001      	movmi	r0, #1
 8014470:	600b      	strmi	r3, [r1, #0]
 8014472:	bf5c      	itt	pl
 8014474:	600b      	strpl	r3, [r1, #0]
 8014476:	2002      	movpl	r0, #2
 8014478:	4770      	bx	lr
 801447a:	b298      	uxth	r0, r3
 801447c:	b9b0      	cbnz	r0, 80144ac <__lo0bits+0x54>
 801447e:	0c1b      	lsrs	r3, r3, #16
 8014480:	2010      	movs	r0, #16
 8014482:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014486:	bf04      	itt	eq
 8014488:	0a1b      	lsreq	r3, r3, #8
 801448a:	3008      	addeq	r0, #8
 801448c:	071a      	lsls	r2, r3, #28
 801448e:	bf04      	itt	eq
 8014490:	091b      	lsreq	r3, r3, #4
 8014492:	3004      	addeq	r0, #4
 8014494:	079a      	lsls	r2, r3, #30
 8014496:	bf04      	itt	eq
 8014498:	089b      	lsreq	r3, r3, #2
 801449a:	3002      	addeq	r0, #2
 801449c:	07da      	lsls	r2, r3, #31
 801449e:	d403      	bmi.n	80144a8 <__lo0bits+0x50>
 80144a0:	085b      	lsrs	r3, r3, #1
 80144a2:	f100 0001 	add.w	r0, r0, #1
 80144a6:	d005      	beq.n	80144b4 <__lo0bits+0x5c>
 80144a8:	600b      	str	r3, [r1, #0]
 80144aa:	4770      	bx	lr
 80144ac:	4610      	mov	r0, r2
 80144ae:	e7e8      	b.n	8014482 <__lo0bits+0x2a>
 80144b0:	2000      	movs	r0, #0
 80144b2:	4770      	bx	lr
 80144b4:	2020      	movs	r0, #32
 80144b6:	4770      	bx	lr

080144b8 <__i2b>:
 80144b8:	b510      	push	{r4, lr}
 80144ba:	460c      	mov	r4, r1
 80144bc:	2101      	movs	r1, #1
 80144be:	f7ff feff 	bl	80142c0 <_Balloc>
 80144c2:	4602      	mov	r2, r0
 80144c4:	b928      	cbnz	r0, 80144d2 <__i2b+0x1a>
 80144c6:	4b05      	ldr	r3, [pc, #20]	; (80144dc <__i2b+0x24>)
 80144c8:	4805      	ldr	r0, [pc, #20]	; (80144e0 <__i2b+0x28>)
 80144ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80144ce:	f000 fbdf 	bl	8014c90 <__assert_func>
 80144d2:	2301      	movs	r3, #1
 80144d4:	6144      	str	r4, [r0, #20]
 80144d6:	6103      	str	r3, [r0, #16]
 80144d8:	bd10      	pop	{r4, pc}
 80144da:	bf00      	nop
 80144dc:	0801599f 	.word	0x0801599f
 80144e0:	080159b0 	.word	0x080159b0

080144e4 <__multiply>:
 80144e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e8:	4614      	mov	r4, r2
 80144ea:	690a      	ldr	r2, [r1, #16]
 80144ec:	6923      	ldr	r3, [r4, #16]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	bfb8      	it	lt
 80144f2:	460b      	movlt	r3, r1
 80144f4:	460d      	mov	r5, r1
 80144f6:	bfbc      	itt	lt
 80144f8:	4625      	movlt	r5, r4
 80144fa:	461c      	movlt	r4, r3
 80144fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014500:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014504:	68ab      	ldr	r3, [r5, #8]
 8014506:	6869      	ldr	r1, [r5, #4]
 8014508:	eb0a 0709 	add.w	r7, sl, r9
 801450c:	42bb      	cmp	r3, r7
 801450e:	b085      	sub	sp, #20
 8014510:	bfb8      	it	lt
 8014512:	3101      	addlt	r1, #1
 8014514:	f7ff fed4 	bl	80142c0 <_Balloc>
 8014518:	b930      	cbnz	r0, 8014528 <__multiply+0x44>
 801451a:	4602      	mov	r2, r0
 801451c:	4b42      	ldr	r3, [pc, #264]	; (8014628 <__multiply+0x144>)
 801451e:	4843      	ldr	r0, [pc, #268]	; (801462c <__multiply+0x148>)
 8014520:	f240 115d 	movw	r1, #349	; 0x15d
 8014524:	f000 fbb4 	bl	8014c90 <__assert_func>
 8014528:	f100 0614 	add.w	r6, r0, #20
 801452c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014530:	4633      	mov	r3, r6
 8014532:	2200      	movs	r2, #0
 8014534:	4543      	cmp	r3, r8
 8014536:	d31e      	bcc.n	8014576 <__multiply+0x92>
 8014538:	f105 0c14 	add.w	ip, r5, #20
 801453c:	f104 0314 	add.w	r3, r4, #20
 8014540:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014544:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014548:	9202      	str	r2, [sp, #8]
 801454a:	ebac 0205 	sub.w	r2, ip, r5
 801454e:	3a15      	subs	r2, #21
 8014550:	f022 0203 	bic.w	r2, r2, #3
 8014554:	3204      	adds	r2, #4
 8014556:	f105 0115 	add.w	r1, r5, #21
 801455a:	458c      	cmp	ip, r1
 801455c:	bf38      	it	cc
 801455e:	2204      	movcc	r2, #4
 8014560:	9201      	str	r2, [sp, #4]
 8014562:	9a02      	ldr	r2, [sp, #8]
 8014564:	9303      	str	r3, [sp, #12]
 8014566:	429a      	cmp	r2, r3
 8014568:	d808      	bhi.n	801457c <__multiply+0x98>
 801456a:	2f00      	cmp	r7, #0
 801456c:	dc55      	bgt.n	801461a <__multiply+0x136>
 801456e:	6107      	str	r7, [r0, #16]
 8014570:	b005      	add	sp, #20
 8014572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014576:	f843 2b04 	str.w	r2, [r3], #4
 801457a:	e7db      	b.n	8014534 <__multiply+0x50>
 801457c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014580:	f1ba 0f00 	cmp.w	sl, #0
 8014584:	d020      	beq.n	80145c8 <__multiply+0xe4>
 8014586:	f105 0e14 	add.w	lr, r5, #20
 801458a:	46b1      	mov	r9, r6
 801458c:	2200      	movs	r2, #0
 801458e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014592:	f8d9 b000 	ldr.w	fp, [r9]
 8014596:	b2a1      	uxth	r1, r4
 8014598:	fa1f fb8b 	uxth.w	fp, fp
 801459c:	fb0a b101 	mla	r1, sl, r1, fp
 80145a0:	4411      	add	r1, r2
 80145a2:	f8d9 2000 	ldr.w	r2, [r9]
 80145a6:	0c24      	lsrs	r4, r4, #16
 80145a8:	0c12      	lsrs	r2, r2, #16
 80145aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80145ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80145b2:	b289      	uxth	r1, r1
 80145b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80145b8:	45f4      	cmp	ip, lr
 80145ba:	f849 1b04 	str.w	r1, [r9], #4
 80145be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80145c2:	d8e4      	bhi.n	801458e <__multiply+0xaa>
 80145c4:	9901      	ldr	r1, [sp, #4]
 80145c6:	5072      	str	r2, [r6, r1]
 80145c8:	9a03      	ldr	r2, [sp, #12]
 80145ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80145ce:	3304      	adds	r3, #4
 80145d0:	f1b9 0f00 	cmp.w	r9, #0
 80145d4:	d01f      	beq.n	8014616 <__multiply+0x132>
 80145d6:	6834      	ldr	r4, [r6, #0]
 80145d8:	f105 0114 	add.w	r1, r5, #20
 80145dc:	46b6      	mov	lr, r6
 80145de:	f04f 0a00 	mov.w	sl, #0
 80145e2:	880a      	ldrh	r2, [r1, #0]
 80145e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80145e8:	fb09 b202 	mla	r2, r9, r2, fp
 80145ec:	4492      	add	sl, r2
 80145ee:	b2a4      	uxth	r4, r4
 80145f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80145f4:	f84e 4b04 	str.w	r4, [lr], #4
 80145f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80145fc:	f8be 2000 	ldrh.w	r2, [lr]
 8014600:	0c24      	lsrs	r4, r4, #16
 8014602:	fb09 2404 	mla	r4, r9, r4, r2
 8014606:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801460a:	458c      	cmp	ip, r1
 801460c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014610:	d8e7      	bhi.n	80145e2 <__multiply+0xfe>
 8014612:	9a01      	ldr	r2, [sp, #4]
 8014614:	50b4      	str	r4, [r6, r2]
 8014616:	3604      	adds	r6, #4
 8014618:	e7a3      	b.n	8014562 <__multiply+0x7e>
 801461a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801461e:	2b00      	cmp	r3, #0
 8014620:	d1a5      	bne.n	801456e <__multiply+0x8a>
 8014622:	3f01      	subs	r7, #1
 8014624:	e7a1      	b.n	801456a <__multiply+0x86>
 8014626:	bf00      	nop
 8014628:	0801599f 	.word	0x0801599f
 801462c:	080159b0 	.word	0x080159b0

08014630 <__pow5mult>:
 8014630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014634:	4615      	mov	r5, r2
 8014636:	f012 0203 	ands.w	r2, r2, #3
 801463a:	4606      	mov	r6, r0
 801463c:	460f      	mov	r7, r1
 801463e:	d007      	beq.n	8014650 <__pow5mult+0x20>
 8014640:	4c25      	ldr	r4, [pc, #148]	; (80146d8 <__pow5mult+0xa8>)
 8014642:	3a01      	subs	r2, #1
 8014644:	2300      	movs	r3, #0
 8014646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801464a:	f7ff fe9b 	bl	8014384 <__multadd>
 801464e:	4607      	mov	r7, r0
 8014650:	10ad      	asrs	r5, r5, #2
 8014652:	d03d      	beq.n	80146d0 <__pow5mult+0xa0>
 8014654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014656:	b97c      	cbnz	r4, 8014678 <__pow5mult+0x48>
 8014658:	2010      	movs	r0, #16
 801465a:	f7fe facd 	bl	8012bf8 <malloc>
 801465e:	4602      	mov	r2, r0
 8014660:	6270      	str	r0, [r6, #36]	; 0x24
 8014662:	b928      	cbnz	r0, 8014670 <__pow5mult+0x40>
 8014664:	4b1d      	ldr	r3, [pc, #116]	; (80146dc <__pow5mult+0xac>)
 8014666:	481e      	ldr	r0, [pc, #120]	; (80146e0 <__pow5mult+0xb0>)
 8014668:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801466c:	f000 fb10 	bl	8014c90 <__assert_func>
 8014670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014674:	6004      	str	r4, [r0, #0]
 8014676:	60c4      	str	r4, [r0, #12]
 8014678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801467c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014680:	b94c      	cbnz	r4, 8014696 <__pow5mult+0x66>
 8014682:	f240 2171 	movw	r1, #625	; 0x271
 8014686:	4630      	mov	r0, r6
 8014688:	f7ff ff16 	bl	80144b8 <__i2b>
 801468c:	2300      	movs	r3, #0
 801468e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014692:	4604      	mov	r4, r0
 8014694:	6003      	str	r3, [r0, #0]
 8014696:	f04f 0900 	mov.w	r9, #0
 801469a:	07eb      	lsls	r3, r5, #31
 801469c:	d50a      	bpl.n	80146b4 <__pow5mult+0x84>
 801469e:	4639      	mov	r1, r7
 80146a0:	4622      	mov	r2, r4
 80146a2:	4630      	mov	r0, r6
 80146a4:	f7ff ff1e 	bl	80144e4 <__multiply>
 80146a8:	4639      	mov	r1, r7
 80146aa:	4680      	mov	r8, r0
 80146ac:	4630      	mov	r0, r6
 80146ae:	f7ff fe47 	bl	8014340 <_Bfree>
 80146b2:	4647      	mov	r7, r8
 80146b4:	106d      	asrs	r5, r5, #1
 80146b6:	d00b      	beq.n	80146d0 <__pow5mult+0xa0>
 80146b8:	6820      	ldr	r0, [r4, #0]
 80146ba:	b938      	cbnz	r0, 80146cc <__pow5mult+0x9c>
 80146bc:	4622      	mov	r2, r4
 80146be:	4621      	mov	r1, r4
 80146c0:	4630      	mov	r0, r6
 80146c2:	f7ff ff0f 	bl	80144e4 <__multiply>
 80146c6:	6020      	str	r0, [r4, #0]
 80146c8:	f8c0 9000 	str.w	r9, [r0]
 80146cc:	4604      	mov	r4, r0
 80146ce:	e7e4      	b.n	801469a <__pow5mult+0x6a>
 80146d0:	4638      	mov	r0, r7
 80146d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146d6:	bf00      	nop
 80146d8:	08015b00 	.word	0x08015b00
 80146dc:	08015929 	.word	0x08015929
 80146e0:	080159b0 	.word	0x080159b0

080146e4 <__lshift>:
 80146e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146e8:	460c      	mov	r4, r1
 80146ea:	6849      	ldr	r1, [r1, #4]
 80146ec:	6923      	ldr	r3, [r4, #16]
 80146ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80146f2:	68a3      	ldr	r3, [r4, #8]
 80146f4:	4607      	mov	r7, r0
 80146f6:	4691      	mov	r9, r2
 80146f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80146fc:	f108 0601 	add.w	r6, r8, #1
 8014700:	42b3      	cmp	r3, r6
 8014702:	db0b      	blt.n	801471c <__lshift+0x38>
 8014704:	4638      	mov	r0, r7
 8014706:	f7ff fddb 	bl	80142c0 <_Balloc>
 801470a:	4605      	mov	r5, r0
 801470c:	b948      	cbnz	r0, 8014722 <__lshift+0x3e>
 801470e:	4602      	mov	r2, r0
 8014710:	4b28      	ldr	r3, [pc, #160]	; (80147b4 <__lshift+0xd0>)
 8014712:	4829      	ldr	r0, [pc, #164]	; (80147b8 <__lshift+0xd4>)
 8014714:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014718:	f000 faba 	bl	8014c90 <__assert_func>
 801471c:	3101      	adds	r1, #1
 801471e:	005b      	lsls	r3, r3, #1
 8014720:	e7ee      	b.n	8014700 <__lshift+0x1c>
 8014722:	2300      	movs	r3, #0
 8014724:	f100 0114 	add.w	r1, r0, #20
 8014728:	f100 0210 	add.w	r2, r0, #16
 801472c:	4618      	mov	r0, r3
 801472e:	4553      	cmp	r3, sl
 8014730:	db33      	blt.n	801479a <__lshift+0xb6>
 8014732:	6920      	ldr	r0, [r4, #16]
 8014734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014738:	f104 0314 	add.w	r3, r4, #20
 801473c:	f019 091f 	ands.w	r9, r9, #31
 8014740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014748:	d02b      	beq.n	80147a2 <__lshift+0xbe>
 801474a:	f1c9 0e20 	rsb	lr, r9, #32
 801474e:	468a      	mov	sl, r1
 8014750:	2200      	movs	r2, #0
 8014752:	6818      	ldr	r0, [r3, #0]
 8014754:	fa00 f009 	lsl.w	r0, r0, r9
 8014758:	4302      	orrs	r2, r0
 801475a:	f84a 2b04 	str.w	r2, [sl], #4
 801475e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014762:	459c      	cmp	ip, r3
 8014764:	fa22 f20e 	lsr.w	r2, r2, lr
 8014768:	d8f3      	bhi.n	8014752 <__lshift+0x6e>
 801476a:	ebac 0304 	sub.w	r3, ip, r4
 801476e:	3b15      	subs	r3, #21
 8014770:	f023 0303 	bic.w	r3, r3, #3
 8014774:	3304      	adds	r3, #4
 8014776:	f104 0015 	add.w	r0, r4, #21
 801477a:	4584      	cmp	ip, r0
 801477c:	bf38      	it	cc
 801477e:	2304      	movcc	r3, #4
 8014780:	50ca      	str	r2, [r1, r3]
 8014782:	b10a      	cbz	r2, 8014788 <__lshift+0xa4>
 8014784:	f108 0602 	add.w	r6, r8, #2
 8014788:	3e01      	subs	r6, #1
 801478a:	4638      	mov	r0, r7
 801478c:	612e      	str	r6, [r5, #16]
 801478e:	4621      	mov	r1, r4
 8014790:	f7ff fdd6 	bl	8014340 <_Bfree>
 8014794:	4628      	mov	r0, r5
 8014796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801479a:	f842 0f04 	str.w	r0, [r2, #4]!
 801479e:	3301      	adds	r3, #1
 80147a0:	e7c5      	b.n	801472e <__lshift+0x4a>
 80147a2:	3904      	subs	r1, #4
 80147a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80147ac:	459c      	cmp	ip, r3
 80147ae:	d8f9      	bhi.n	80147a4 <__lshift+0xc0>
 80147b0:	e7ea      	b.n	8014788 <__lshift+0xa4>
 80147b2:	bf00      	nop
 80147b4:	0801599f 	.word	0x0801599f
 80147b8:	080159b0 	.word	0x080159b0

080147bc <__mcmp>:
 80147bc:	b530      	push	{r4, r5, lr}
 80147be:	6902      	ldr	r2, [r0, #16]
 80147c0:	690c      	ldr	r4, [r1, #16]
 80147c2:	1b12      	subs	r2, r2, r4
 80147c4:	d10e      	bne.n	80147e4 <__mcmp+0x28>
 80147c6:	f100 0314 	add.w	r3, r0, #20
 80147ca:	3114      	adds	r1, #20
 80147cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80147d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80147d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80147d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80147dc:	42a5      	cmp	r5, r4
 80147de:	d003      	beq.n	80147e8 <__mcmp+0x2c>
 80147e0:	d305      	bcc.n	80147ee <__mcmp+0x32>
 80147e2:	2201      	movs	r2, #1
 80147e4:	4610      	mov	r0, r2
 80147e6:	bd30      	pop	{r4, r5, pc}
 80147e8:	4283      	cmp	r3, r0
 80147ea:	d3f3      	bcc.n	80147d4 <__mcmp+0x18>
 80147ec:	e7fa      	b.n	80147e4 <__mcmp+0x28>
 80147ee:	f04f 32ff 	mov.w	r2, #4294967295
 80147f2:	e7f7      	b.n	80147e4 <__mcmp+0x28>

080147f4 <__mdiff>:
 80147f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f8:	460c      	mov	r4, r1
 80147fa:	4606      	mov	r6, r0
 80147fc:	4611      	mov	r1, r2
 80147fe:	4620      	mov	r0, r4
 8014800:	4617      	mov	r7, r2
 8014802:	f7ff ffdb 	bl	80147bc <__mcmp>
 8014806:	1e05      	subs	r5, r0, #0
 8014808:	d110      	bne.n	801482c <__mdiff+0x38>
 801480a:	4629      	mov	r1, r5
 801480c:	4630      	mov	r0, r6
 801480e:	f7ff fd57 	bl	80142c0 <_Balloc>
 8014812:	b930      	cbnz	r0, 8014822 <__mdiff+0x2e>
 8014814:	4b39      	ldr	r3, [pc, #228]	; (80148fc <__mdiff+0x108>)
 8014816:	4602      	mov	r2, r0
 8014818:	f240 2132 	movw	r1, #562	; 0x232
 801481c:	4838      	ldr	r0, [pc, #224]	; (8014900 <__mdiff+0x10c>)
 801481e:	f000 fa37 	bl	8014c90 <__assert_func>
 8014822:	2301      	movs	r3, #1
 8014824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801482c:	bfa4      	itt	ge
 801482e:	463b      	movge	r3, r7
 8014830:	4627      	movge	r7, r4
 8014832:	4630      	mov	r0, r6
 8014834:	6879      	ldr	r1, [r7, #4]
 8014836:	bfa6      	itte	ge
 8014838:	461c      	movge	r4, r3
 801483a:	2500      	movge	r5, #0
 801483c:	2501      	movlt	r5, #1
 801483e:	f7ff fd3f 	bl	80142c0 <_Balloc>
 8014842:	b920      	cbnz	r0, 801484e <__mdiff+0x5a>
 8014844:	4b2d      	ldr	r3, [pc, #180]	; (80148fc <__mdiff+0x108>)
 8014846:	4602      	mov	r2, r0
 8014848:	f44f 7110 	mov.w	r1, #576	; 0x240
 801484c:	e7e6      	b.n	801481c <__mdiff+0x28>
 801484e:	693e      	ldr	r6, [r7, #16]
 8014850:	60c5      	str	r5, [r0, #12]
 8014852:	6925      	ldr	r5, [r4, #16]
 8014854:	f107 0114 	add.w	r1, r7, #20
 8014858:	f104 0914 	add.w	r9, r4, #20
 801485c:	f100 0e14 	add.w	lr, r0, #20
 8014860:	f107 0210 	add.w	r2, r7, #16
 8014864:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014868:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801486c:	46f2      	mov	sl, lr
 801486e:	2700      	movs	r7, #0
 8014870:	f859 3b04 	ldr.w	r3, [r9], #4
 8014874:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014878:	fa1f f883 	uxth.w	r8, r3
 801487c:	fa17 f78b 	uxtah	r7, r7, fp
 8014880:	0c1b      	lsrs	r3, r3, #16
 8014882:	eba7 0808 	sub.w	r8, r7, r8
 8014886:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801488a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801488e:	fa1f f888 	uxth.w	r8, r8
 8014892:	141f      	asrs	r7, r3, #16
 8014894:	454d      	cmp	r5, r9
 8014896:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801489a:	f84a 3b04 	str.w	r3, [sl], #4
 801489e:	d8e7      	bhi.n	8014870 <__mdiff+0x7c>
 80148a0:	1b2b      	subs	r3, r5, r4
 80148a2:	3b15      	subs	r3, #21
 80148a4:	f023 0303 	bic.w	r3, r3, #3
 80148a8:	3304      	adds	r3, #4
 80148aa:	3415      	adds	r4, #21
 80148ac:	42a5      	cmp	r5, r4
 80148ae:	bf38      	it	cc
 80148b0:	2304      	movcc	r3, #4
 80148b2:	4419      	add	r1, r3
 80148b4:	4473      	add	r3, lr
 80148b6:	469e      	mov	lr, r3
 80148b8:	460d      	mov	r5, r1
 80148ba:	4565      	cmp	r5, ip
 80148bc:	d30e      	bcc.n	80148dc <__mdiff+0xe8>
 80148be:	f10c 0203 	add.w	r2, ip, #3
 80148c2:	1a52      	subs	r2, r2, r1
 80148c4:	f022 0203 	bic.w	r2, r2, #3
 80148c8:	3903      	subs	r1, #3
 80148ca:	458c      	cmp	ip, r1
 80148cc:	bf38      	it	cc
 80148ce:	2200      	movcc	r2, #0
 80148d0:	441a      	add	r2, r3
 80148d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80148d6:	b17b      	cbz	r3, 80148f8 <__mdiff+0x104>
 80148d8:	6106      	str	r6, [r0, #16]
 80148da:	e7a5      	b.n	8014828 <__mdiff+0x34>
 80148dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80148e0:	fa17 f488 	uxtah	r4, r7, r8
 80148e4:	1422      	asrs	r2, r4, #16
 80148e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80148ea:	b2a4      	uxth	r4, r4
 80148ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80148f0:	f84e 4b04 	str.w	r4, [lr], #4
 80148f4:	1417      	asrs	r7, r2, #16
 80148f6:	e7e0      	b.n	80148ba <__mdiff+0xc6>
 80148f8:	3e01      	subs	r6, #1
 80148fa:	e7ea      	b.n	80148d2 <__mdiff+0xde>
 80148fc:	0801599f 	.word	0x0801599f
 8014900:	080159b0 	.word	0x080159b0

08014904 <__d2b>:
 8014904:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014908:	4689      	mov	r9, r1
 801490a:	2101      	movs	r1, #1
 801490c:	ec57 6b10 	vmov	r6, r7, d0
 8014910:	4690      	mov	r8, r2
 8014912:	f7ff fcd5 	bl	80142c0 <_Balloc>
 8014916:	4604      	mov	r4, r0
 8014918:	b930      	cbnz	r0, 8014928 <__d2b+0x24>
 801491a:	4602      	mov	r2, r0
 801491c:	4b25      	ldr	r3, [pc, #148]	; (80149b4 <__d2b+0xb0>)
 801491e:	4826      	ldr	r0, [pc, #152]	; (80149b8 <__d2b+0xb4>)
 8014920:	f240 310a 	movw	r1, #778	; 0x30a
 8014924:	f000 f9b4 	bl	8014c90 <__assert_func>
 8014928:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801492c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014930:	bb35      	cbnz	r5, 8014980 <__d2b+0x7c>
 8014932:	2e00      	cmp	r6, #0
 8014934:	9301      	str	r3, [sp, #4]
 8014936:	d028      	beq.n	801498a <__d2b+0x86>
 8014938:	4668      	mov	r0, sp
 801493a:	9600      	str	r6, [sp, #0]
 801493c:	f7ff fd8c 	bl	8014458 <__lo0bits>
 8014940:	9900      	ldr	r1, [sp, #0]
 8014942:	b300      	cbz	r0, 8014986 <__d2b+0x82>
 8014944:	9a01      	ldr	r2, [sp, #4]
 8014946:	f1c0 0320 	rsb	r3, r0, #32
 801494a:	fa02 f303 	lsl.w	r3, r2, r3
 801494e:	430b      	orrs	r3, r1
 8014950:	40c2      	lsrs	r2, r0
 8014952:	6163      	str	r3, [r4, #20]
 8014954:	9201      	str	r2, [sp, #4]
 8014956:	9b01      	ldr	r3, [sp, #4]
 8014958:	61a3      	str	r3, [r4, #24]
 801495a:	2b00      	cmp	r3, #0
 801495c:	bf14      	ite	ne
 801495e:	2202      	movne	r2, #2
 8014960:	2201      	moveq	r2, #1
 8014962:	6122      	str	r2, [r4, #16]
 8014964:	b1d5      	cbz	r5, 801499c <__d2b+0x98>
 8014966:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801496a:	4405      	add	r5, r0
 801496c:	f8c9 5000 	str.w	r5, [r9]
 8014970:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014974:	f8c8 0000 	str.w	r0, [r8]
 8014978:	4620      	mov	r0, r4
 801497a:	b003      	add	sp, #12
 801497c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014984:	e7d5      	b.n	8014932 <__d2b+0x2e>
 8014986:	6161      	str	r1, [r4, #20]
 8014988:	e7e5      	b.n	8014956 <__d2b+0x52>
 801498a:	a801      	add	r0, sp, #4
 801498c:	f7ff fd64 	bl	8014458 <__lo0bits>
 8014990:	9b01      	ldr	r3, [sp, #4]
 8014992:	6163      	str	r3, [r4, #20]
 8014994:	2201      	movs	r2, #1
 8014996:	6122      	str	r2, [r4, #16]
 8014998:	3020      	adds	r0, #32
 801499a:	e7e3      	b.n	8014964 <__d2b+0x60>
 801499c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80149a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80149a4:	f8c9 0000 	str.w	r0, [r9]
 80149a8:	6918      	ldr	r0, [r3, #16]
 80149aa:	f7ff fd35 	bl	8014418 <__hi0bits>
 80149ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80149b2:	e7df      	b.n	8014974 <__d2b+0x70>
 80149b4:	0801599f 	.word	0x0801599f
 80149b8:	080159b0 	.word	0x080159b0

080149bc <_calloc_r>:
 80149bc:	b513      	push	{r0, r1, r4, lr}
 80149be:	434a      	muls	r2, r1
 80149c0:	4611      	mov	r1, r2
 80149c2:	9201      	str	r2, [sp, #4]
 80149c4:	f7fe f980 	bl	8012cc8 <_malloc_r>
 80149c8:	4604      	mov	r4, r0
 80149ca:	b118      	cbz	r0, 80149d4 <_calloc_r+0x18>
 80149cc:	9a01      	ldr	r2, [sp, #4]
 80149ce:	2100      	movs	r1, #0
 80149d0:	f7fe f922 	bl	8012c18 <memset>
 80149d4:	4620      	mov	r0, r4
 80149d6:	b002      	add	sp, #8
 80149d8:	bd10      	pop	{r4, pc}

080149da <__ssputs_r>:
 80149da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149de:	688e      	ldr	r6, [r1, #8]
 80149e0:	429e      	cmp	r6, r3
 80149e2:	4682      	mov	sl, r0
 80149e4:	460c      	mov	r4, r1
 80149e6:	4690      	mov	r8, r2
 80149e8:	461f      	mov	r7, r3
 80149ea:	d838      	bhi.n	8014a5e <__ssputs_r+0x84>
 80149ec:	898a      	ldrh	r2, [r1, #12]
 80149ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80149f2:	d032      	beq.n	8014a5a <__ssputs_r+0x80>
 80149f4:	6825      	ldr	r5, [r4, #0]
 80149f6:	6909      	ldr	r1, [r1, #16]
 80149f8:	eba5 0901 	sub.w	r9, r5, r1
 80149fc:	6965      	ldr	r5, [r4, #20]
 80149fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a06:	3301      	adds	r3, #1
 8014a08:	444b      	add	r3, r9
 8014a0a:	106d      	asrs	r5, r5, #1
 8014a0c:	429d      	cmp	r5, r3
 8014a0e:	bf38      	it	cc
 8014a10:	461d      	movcc	r5, r3
 8014a12:	0553      	lsls	r3, r2, #21
 8014a14:	d531      	bpl.n	8014a7a <__ssputs_r+0xa0>
 8014a16:	4629      	mov	r1, r5
 8014a18:	f7fe f956 	bl	8012cc8 <_malloc_r>
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	b950      	cbnz	r0, 8014a36 <__ssputs_r+0x5c>
 8014a20:	230c      	movs	r3, #12
 8014a22:	f8ca 3000 	str.w	r3, [sl]
 8014a26:	89a3      	ldrh	r3, [r4, #12]
 8014a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a2c:	81a3      	strh	r3, [r4, #12]
 8014a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8014a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a36:	6921      	ldr	r1, [r4, #16]
 8014a38:	464a      	mov	r2, r9
 8014a3a:	f7ff fc27 	bl	801428c <memcpy>
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a48:	81a3      	strh	r3, [r4, #12]
 8014a4a:	6126      	str	r6, [r4, #16]
 8014a4c:	6165      	str	r5, [r4, #20]
 8014a4e:	444e      	add	r6, r9
 8014a50:	eba5 0509 	sub.w	r5, r5, r9
 8014a54:	6026      	str	r6, [r4, #0]
 8014a56:	60a5      	str	r5, [r4, #8]
 8014a58:	463e      	mov	r6, r7
 8014a5a:	42be      	cmp	r6, r7
 8014a5c:	d900      	bls.n	8014a60 <__ssputs_r+0x86>
 8014a5e:	463e      	mov	r6, r7
 8014a60:	4632      	mov	r2, r6
 8014a62:	6820      	ldr	r0, [r4, #0]
 8014a64:	4641      	mov	r1, r8
 8014a66:	f000 f958 	bl	8014d1a <memmove>
 8014a6a:	68a3      	ldr	r3, [r4, #8]
 8014a6c:	6822      	ldr	r2, [r4, #0]
 8014a6e:	1b9b      	subs	r3, r3, r6
 8014a70:	4432      	add	r2, r6
 8014a72:	60a3      	str	r3, [r4, #8]
 8014a74:	6022      	str	r2, [r4, #0]
 8014a76:	2000      	movs	r0, #0
 8014a78:	e7db      	b.n	8014a32 <__ssputs_r+0x58>
 8014a7a:	462a      	mov	r2, r5
 8014a7c:	f000 f967 	bl	8014d4e <_realloc_r>
 8014a80:	4606      	mov	r6, r0
 8014a82:	2800      	cmp	r0, #0
 8014a84:	d1e1      	bne.n	8014a4a <__ssputs_r+0x70>
 8014a86:	6921      	ldr	r1, [r4, #16]
 8014a88:	4650      	mov	r0, sl
 8014a8a:	f7fe f8cd 	bl	8012c28 <_free_r>
 8014a8e:	e7c7      	b.n	8014a20 <__ssputs_r+0x46>

08014a90 <_svfiprintf_r>:
 8014a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a94:	4698      	mov	r8, r3
 8014a96:	898b      	ldrh	r3, [r1, #12]
 8014a98:	061b      	lsls	r3, r3, #24
 8014a9a:	b09d      	sub	sp, #116	; 0x74
 8014a9c:	4607      	mov	r7, r0
 8014a9e:	460d      	mov	r5, r1
 8014aa0:	4614      	mov	r4, r2
 8014aa2:	d50e      	bpl.n	8014ac2 <_svfiprintf_r+0x32>
 8014aa4:	690b      	ldr	r3, [r1, #16]
 8014aa6:	b963      	cbnz	r3, 8014ac2 <_svfiprintf_r+0x32>
 8014aa8:	2140      	movs	r1, #64	; 0x40
 8014aaa:	f7fe f90d 	bl	8012cc8 <_malloc_r>
 8014aae:	6028      	str	r0, [r5, #0]
 8014ab0:	6128      	str	r0, [r5, #16]
 8014ab2:	b920      	cbnz	r0, 8014abe <_svfiprintf_r+0x2e>
 8014ab4:	230c      	movs	r3, #12
 8014ab6:	603b      	str	r3, [r7, #0]
 8014ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8014abc:	e0d1      	b.n	8014c62 <_svfiprintf_r+0x1d2>
 8014abe:	2340      	movs	r3, #64	; 0x40
 8014ac0:	616b      	str	r3, [r5, #20]
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ac6:	2320      	movs	r3, #32
 8014ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ad0:	2330      	movs	r3, #48	; 0x30
 8014ad2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014c7c <_svfiprintf_r+0x1ec>
 8014ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ada:	f04f 0901 	mov.w	r9, #1
 8014ade:	4623      	mov	r3, r4
 8014ae0:	469a      	mov	sl, r3
 8014ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ae6:	b10a      	cbz	r2, 8014aec <_svfiprintf_r+0x5c>
 8014ae8:	2a25      	cmp	r2, #37	; 0x25
 8014aea:	d1f9      	bne.n	8014ae0 <_svfiprintf_r+0x50>
 8014aec:	ebba 0b04 	subs.w	fp, sl, r4
 8014af0:	d00b      	beq.n	8014b0a <_svfiprintf_r+0x7a>
 8014af2:	465b      	mov	r3, fp
 8014af4:	4622      	mov	r2, r4
 8014af6:	4629      	mov	r1, r5
 8014af8:	4638      	mov	r0, r7
 8014afa:	f7ff ff6e 	bl	80149da <__ssputs_r>
 8014afe:	3001      	adds	r0, #1
 8014b00:	f000 80aa 	beq.w	8014c58 <_svfiprintf_r+0x1c8>
 8014b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b06:	445a      	add	r2, fp
 8014b08:	9209      	str	r2, [sp, #36]	; 0x24
 8014b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	f000 80a2 	beq.w	8014c58 <_svfiprintf_r+0x1c8>
 8014b14:	2300      	movs	r3, #0
 8014b16:	f04f 32ff 	mov.w	r2, #4294967295
 8014b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b1e:	f10a 0a01 	add.w	sl, sl, #1
 8014b22:	9304      	str	r3, [sp, #16]
 8014b24:	9307      	str	r3, [sp, #28]
 8014b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8014b2c:	4654      	mov	r4, sl
 8014b2e:	2205      	movs	r2, #5
 8014b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b34:	4851      	ldr	r0, [pc, #324]	; (8014c7c <_svfiprintf_r+0x1ec>)
 8014b36:	f7eb fbdb 	bl	80002f0 <memchr>
 8014b3a:	9a04      	ldr	r2, [sp, #16]
 8014b3c:	b9d8      	cbnz	r0, 8014b76 <_svfiprintf_r+0xe6>
 8014b3e:	06d0      	lsls	r0, r2, #27
 8014b40:	bf44      	itt	mi
 8014b42:	2320      	movmi	r3, #32
 8014b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b48:	0711      	lsls	r1, r2, #28
 8014b4a:	bf44      	itt	mi
 8014b4c:	232b      	movmi	r3, #43	; 0x2b
 8014b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b52:	f89a 3000 	ldrb.w	r3, [sl]
 8014b56:	2b2a      	cmp	r3, #42	; 0x2a
 8014b58:	d015      	beq.n	8014b86 <_svfiprintf_r+0xf6>
 8014b5a:	9a07      	ldr	r2, [sp, #28]
 8014b5c:	4654      	mov	r4, sl
 8014b5e:	2000      	movs	r0, #0
 8014b60:	f04f 0c0a 	mov.w	ip, #10
 8014b64:	4621      	mov	r1, r4
 8014b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b6a:	3b30      	subs	r3, #48	; 0x30
 8014b6c:	2b09      	cmp	r3, #9
 8014b6e:	d94e      	bls.n	8014c0e <_svfiprintf_r+0x17e>
 8014b70:	b1b0      	cbz	r0, 8014ba0 <_svfiprintf_r+0x110>
 8014b72:	9207      	str	r2, [sp, #28]
 8014b74:	e014      	b.n	8014ba0 <_svfiprintf_r+0x110>
 8014b76:	eba0 0308 	sub.w	r3, r0, r8
 8014b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8014b7e:	4313      	orrs	r3, r2
 8014b80:	9304      	str	r3, [sp, #16]
 8014b82:	46a2      	mov	sl, r4
 8014b84:	e7d2      	b.n	8014b2c <_svfiprintf_r+0x9c>
 8014b86:	9b03      	ldr	r3, [sp, #12]
 8014b88:	1d19      	adds	r1, r3, #4
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	9103      	str	r1, [sp, #12]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	bfbb      	ittet	lt
 8014b92:	425b      	neglt	r3, r3
 8014b94:	f042 0202 	orrlt.w	r2, r2, #2
 8014b98:	9307      	strge	r3, [sp, #28]
 8014b9a:	9307      	strlt	r3, [sp, #28]
 8014b9c:	bfb8      	it	lt
 8014b9e:	9204      	strlt	r2, [sp, #16]
 8014ba0:	7823      	ldrb	r3, [r4, #0]
 8014ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8014ba4:	d10c      	bne.n	8014bc0 <_svfiprintf_r+0x130>
 8014ba6:	7863      	ldrb	r3, [r4, #1]
 8014ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8014baa:	d135      	bne.n	8014c18 <_svfiprintf_r+0x188>
 8014bac:	9b03      	ldr	r3, [sp, #12]
 8014bae:	1d1a      	adds	r2, r3, #4
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	9203      	str	r2, [sp, #12]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	bfb8      	it	lt
 8014bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bbc:	3402      	adds	r4, #2
 8014bbe:	9305      	str	r3, [sp, #20]
 8014bc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014c8c <_svfiprintf_r+0x1fc>
 8014bc4:	7821      	ldrb	r1, [r4, #0]
 8014bc6:	2203      	movs	r2, #3
 8014bc8:	4650      	mov	r0, sl
 8014bca:	f7eb fb91 	bl	80002f0 <memchr>
 8014bce:	b140      	cbz	r0, 8014be2 <_svfiprintf_r+0x152>
 8014bd0:	2340      	movs	r3, #64	; 0x40
 8014bd2:	eba0 000a 	sub.w	r0, r0, sl
 8014bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8014bda:	9b04      	ldr	r3, [sp, #16]
 8014bdc:	4303      	orrs	r3, r0
 8014bde:	3401      	adds	r4, #1
 8014be0:	9304      	str	r3, [sp, #16]
 8014be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014be6:	4826      	ldr	r0, [pc, #152]	; (8014c80 <_svfiprintf_r+0x1f0>)
 8014be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014bec:	2206      	movs	r2, #6
 8014bee:	f7eb fb7f 	bl	80002f0 <memchr>
 8014bf2:	2800      	cmp	r0, #0
 8014bf4:	d038      	beq.n	8014c68 <_svfiprintf_r+0x1d8>
 8014bf6:	4b23      	ldr	r3, [pc, #140]	; (8014c84 <_svfiprintf_r+0x1f4>)
 8014bf8:	bb1b      	cbnz	r3, 8014c42 <_svfiprintf_r+0x1b2>
 8014bfa:	9b03      	ldr	r3, [sp, #12]
 8014bfc:	3307      	adds	r3, #7
 8014bfe:	f023 0307 	bic.w	r3, r3, #7
 8014c02:	3308      	adds	r3, #8
 8014c04:	9303      	str	r3, [sp, #12]
 8014c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c08:	4433      	add	r3, r6
 8014c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c0c:	e767      	b.n	8014ade <_svfiprintf_r+0x4e>
 8014c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c12:	460c      	mov	r4, r1
 8014c14:	2001      	movs	r0, #1
 8014c16:	e7a5      	b.n	8014b64 <_svfiprintf_r+0xd4>
 8014c18:	2300      	movs	r3, #0
 8014c1a:	3401      	adds	r4, #1
 8014c1c:	9305      	str	r3, [sp, #20]
 8014c1e:	4619      	mov	r1, r3
 8014c20:	f04f 0c0a 	mov.w	ip, #10
 8014c24:	4620      	mov	r0, r4
 8014c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c2a:	3a30      	subs	r2, #48	; 0x30
 8014c2c:	2a09      	cmp	r2, #9
 8014c2e:	d903      	bls.n	8014c38 <_svfiprintf_r+0x1a8>
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d0c5      	beq.n	8014bc0 <_svfiprintf_r+0x130>
 8014c34:	9105      	str	r1, [sp, #20]
 8014c36:	e7c3      	b.n	8014bc0 <_svfiprintf_r+0x130>
 8014c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c3c:	4604      	mov	r4, r0
 8014c3e:	2301      	movs	r3, #1
 8014c40:	e7f0      	b.n	8014c24 <_svfiprintf_r+0x194>
 8014c42:	ab03      	add	r3, sp, #12
 8014c44:	9300      	str	r3, [sp, #0]
 8014c46:	462a      	mov	r2, r5
 8014c48:	4b0f      	ldr	r3, [pc, #60]	; (8014c88 <_svfiprintf_r+0x1f8>)
 8014c4a:	a904      	add	r1, sp, #16
 8014c4c:	4638      	mov	r0, r7
 8014c4e:	f7fe f927 	bl	8012ea0 <_printf_float>
 8014c52:	1c42      	adds	r2, r0, #1
 8014c54:	4606      	mov	r6, r0
 8014c56:	d1d6      	bne.n	8014c06 <_svfiprintf_r+0x176>
 8014c58:	89ab      	ldrh	r3, [r5, #12]
 8014c5a:	065b      	lsls	r3, r3, #25
 8014c5c:	f53f af2c 	bmi.w	8014ab8 <_svfiprintf_r+0x28>
 8014c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c62:	b01d      	add	sp, #116	; 0x74
 8014c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c68:	ab03      	add	r3, sp, #12
 8014c6a:	9300      	str	r3, [sp, #0]
 8014c6c:	462a      	mov	r2, r5
 8014c6e:	4b06      	ldr	r3, [pc, #24]	; (8014c88 <_svfiprintf_r+0x1f8>)
 8014c70:	a904      	add	r1, sp, #16
 8014c72:	4638      	mov	r0, r7
 8014c74:	f7fe fba0 	bl	80133b8 <_printf_i>
 8014c78:	e7eb      	b.n	8014c52 <_svfiprintf_r+0x1c2>
 8014c7a:	bf00      	nop
 8014c7c:	08015b0c 	.word	0x08015b0c
 8014c80:	08015b16 	.word	0x08015b16
 8014c84:	08012ea1 	.word	0x08012ea1
 8014c88:	080149db 	.word	0x080149db
 8014c8c:	08015b12 	.word	0x08015b12

08014c90 <__assert_func>:
 8014c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014c92:	4614      	mov	r4, r2
 8014c94:	461a      	mov	r2, r3
 8014c96:	4b09      	ldr	r3, [pc, #36]	; (8014cbc <__assert_func+0x2c>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	4605      	mov	r5, r0
 8014c9c:	68d8      	ldr	r0, [r3, #12]
 8014c9e:	b14c      	cbz	r4, 8014cb4 <__assert_func+0x24>
 8014ca0:	4b07      	ldr	r3, [pc, #28]	; (8014cc0 <__assert_func+0x30>)
 8014ca2:	9100      	str	r1, [sp, #0]
 8014ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ca8:	4906      	ldr	r1, [pc, #24]	; (8014cc4 <__assert_func+0x34>)
 8014caa:	462b      	mov	r3, r5
 8014cac:	f000 f80e 	bl	8014ccc <fiprintf>
 8014cb0:	f000 fa9a 	bl	80151e8 <abort>
 8014cb4:	4b04      	ldr	r3, [pc, #16]	; (8014cc8 <__assert_func+0x38>)
 8014cb6:	461c      	mov	r4, r3
 8014cb8:	e7f3      	b.n	8014ca2 <__assert_func+0x12>
 8014cba:	bf00      	nop
 8014cbc:	24000288 	.word	0x24000288
 8014cc0:	08015b1d 	.word	0x08015b1d
 8014cc4:	08015b2a 	.word	0x08015b2a
 8014cc8:	08015b58 	.word	0x08015b58

08014ccc <fiprintf>:
 8014ccc:	b40e      	push	{r1, r2, r3}
 8014cce:	b503      	push	{r0, r1, lr}
 8014cd0:	4601      	mov	r1, r0
 8014cd2:	ab03      	add	r3, sp, #12
 8014cd4:	4805      	ldr	r0, [pc, #20]	; (8014cec <fiprintf+0x20>)
 8014cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cda:	6800      	ldr	r0, [r0, #0]
 8014cdc:	9301      	str	r3, [sp, #4]
 8014cde:	f000 f885 	bl	8014dec <_vfiprintf_r>
 8014ce2:	b002      	add	sp, #8
 8014ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ce8:	b003      	add	sp, #12
 8014cea:	4770      	bx	lr
 8014cec:	24000288 	.word	0x24000288

08014cf0 <__retarget_lock_init_recursive>:
 8014cf0:	4770      	bx	lr

08014cf2 <__retarget_lock_acquire_recursive>:
 8014cf2:	4770      	bx	lr

08014cf4 <__retarget_lock_release_recursive>:
 8014cf4:	4770      	bx	lr

08014cf6 <__ascii_mbtowc>:
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	b901      	cbnz	r1, 8014cfc <__ascii_mbtowc+0x6>
 8014cfa:	a901      	add	r1, sp, #4
 8014cfc:	b142      	cbz	r2, 8014d10 <__ascii_mbtowc+0x1a>
 8014cfe:	b14b      	cbz	r3, 8014d14 <__ascii_mbtowc+0x1e>
 8014d00:	7813      	ldrb	r3, [r2, #0]
 8014d02:	600b      	str	r3, [r1, #0]
 8014d04:	7812      	ldrb	r2, [r2, #0]
 8014d06:	1e10      	subs	r0, r2, #0
 8014d08:	bf18      	it	ne
 8014d0a:	2001      	movne	r0, #1
 8014d0c:	b002      	add	sp, #8
 8014d0e:	4770      	bx	lr
 8014d10:	4610      	mov	r0, r2
 8014d12:	e7fb      	b.n	8014d0c <__ascii_mbtowc+0x16>
 8014d14:	f06f 0001 	mvn.w	r0, #1
 8014d18:	e7f8      	b.n	8014d0c <__ascii_mbtowc+0x16>

08014d1a <memmove>:
 8014d1a:	4288      	cmp	r0, r1
 8014d1c:	b510      	push	{r4, lr}
 8014d1e:	eb01 0402 	add.w	r4, r1, r2
 8014d22:	d902      	bls.n	8014d2a <memmove+0x10>
 8014d24:	4284      	cmp	r4, r0
 8014d26:	4623      	mov	r3, r4
 8014d28:	d807      	bhi.n	8014d3a <memmove+0x20>
 8014d2a:	1e43      	subs	r3, r0, #1
 8014d2c:	42a1      	cmp	r1, r4
 8014d2e:	d008      	beq.n	8014d42 <memmove+0x28>
 8014d30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d38:	e7f8      	b.n	8014d2c <memmove+0x12>
 8014d3a:	4402      	add	r2, r0
 8014d3c:	4601      	mov	r1, r0
 8014d3e:	428a      	cmp	r2, r1
 8014d40:	d100      	bne.n	8014d44 <memmove+0x2a>
 8014d42:	bd10      	pop	{r4, pc}
 8014d44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d4c:	e7f7      	b.n	8014d3e <memmove+0x24>

08014d4e <_realloc_r>:
 8014d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d50:	4607      	mov	r7, r0
 8014d52:	4614      	mov	r4, r2
 8014d54:	460e      	mov	r6, r1
 8014d56:	b921      	cbnz	r1, 8014d62 <_realloc_r+0x14>
 8014d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014d5c:	4611      	mov	r1, r2
 8014d5e:	f7fd bfb3 	b.w	8012cc8 <_malloc_r>
 8014d62:	b922      	cbnz	r2, 8014d6e <_realloc_r+0x20>
 8014d64:	f7fd ff60 	bl	8012c28 <_free_r>
 8014d68:	4625      	mov	r5, r4
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d6e:	f000 fc5f 	bl	8015630 <_malloc_usable_size_r>
 8014d72:	42a0      	cmp	r0, r4
 8014d74:	d20f      	bcs.n	8014d96 <_realloc_r+0x48>
 8014d76:	4621      	mov	r1, r4
 8014d78:	4638      	mov	r0, r7
 8014d7a:	f7fd ffa5 	bl	8012cc8 <_malloc_r>
 8014d7e:	4605      	mov	r5, r0
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d0f2      	beq.n	8014d6a <_realloc_r+0x1c>
 8014d84:	4631      	mov	r1, r6
 8014d86:	4622      	mov	r2, r4
 8014d88:	f7ff fa80 	bl	801428c <memcpy>
 8014d8c:	4631      	mov	r1, r6
 8014d8e:	4638      	mov	r0, r7
 8014d90:	f7fd ff4a 	bl	8012c28 <_free_r>
 8014d94:	e7e9      	b.n	8014d6a <_realloc_r+0x1c>
 8014d96:	4635      	mov	r5, r6
 8014d98:	e7e7      	b.n	8014d6a <_realloc_r+0x1c>

08014d9a <__sfputc_r>:
 8014d9a:	6893      	ldr	r3, [r2, #8]
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	b410      	push	{r4}
 8014da2:	6093      	str	r3, [r2, #8]
 8014da4:	da08      	bge.n	8014db8 <__sfputc_r+0x1e>
 8014da6:	6994      	ldr	r4, [r2, #24]
 8014da8:	42a3      	cmp	r3, r4
 8014daa:	db01      	blt.n	8014db0 <__sfputc_r+0x16>
 8014dac:	290a      	cmp	r1, #10
 8014dae:	d103      	bne.n	8014db8 <__sfputc_r+0x1e>
 8014db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014db4:	f000 b94a 	b.w	801504c <__swbuf_r>
 8014db8:	6813      	ldr	r3, [r2, #0]
 8014dba:	1c58      	adds	r0, r3, #1
 8014dbc:	6010      	str	r0, [r2, #0]
 8014dbe:	7019      	strb	r1, [r3, #0]
 8014dc0:	4608      	mov	r0, r1
 8014dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dc6:	4770      	bx	lr

08014dc8 <__sfputs_r>:
 8014dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dca:	4606      	mov	r6, r0
 8014dcc:	460f      	mov	r7, r1
 8014dce:	4614      	mov	r4, r2
 8014dd0:	18d5      	adds	r5, r2, r3
 8014dd2:	42ac      	cmp	r4, r5
 8014dd4:	d101      	bne.n	8014dda <__sfputs_r+0x12>
 8014dd6:	2000      	movs	r0, #0
 8014dd8:	e007      	b.n	8014dea <__sfputs_r+0x22>
 8014dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dde:	463a      	mov	r2, r7
 8014de0:	4630      	mov	r0, r6
 8014de2:	f7ff ffda 	bl	8014d9a <__sfputc_r>
 8014de6:	1c43      	adds	r3, r0, #1
 8014de8:	d1f3      	bne.n	8014dd2 <__sfputs_r+0xa>
 8014dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014dec <_vfiprintf_r>:
 8014dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df0:	460d      	mov	r5, r1
 8014df2:	b09d      	sub	sp, #116	; 0x74
 8014df4:	4614      	mov	r4, r2
 8014df6:	4698      	mov	r8, r3
 8014df8:	4606      	mov	r6, r0
 8014dfa:	b118      	cbz	r0, 8014e04 <_vfiprintf_r+0x18>
 8014dfc:	6983      	ldr	r3, [r0, #24]
 8014dfe:	b90b      	cbnz	r3, 8014e04 <_vfiprintf_r+0x18>
 8014e00:	f000 fb14 	bl	801542c <__sinit>
 8014e04:	4b89      	ldr	r3, [pc, #548]	; (801502c <_vfiprintf_r+0x240>)
 8014e06:	429d      	cmp	r5, r3
 8014e08:	d11b      	bne.n	8014e42 <_vfiprintf_r+0x56>
 8014e0a:	6875      	ldr	r5, [r6, #4]
 8014e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e0e:	07d9      	lsls	r1, r3, #31
 8014e10:	d405      	bmi.n	8014e1e <_vfiprintf_r+0x32>
 8014e12:	89ab      	ldrh	r3, [r5, #12]
 8014e14:	059a      	lsls	r2, r3, #22
 8014e16:	d402      	bmi.n	8014e1e <_vfiprintf_r+0x32>
 8014e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e1a:	f7ff ff6a 	bl	8014cf2 <__retarget_lock_acquire_recursive>
 8014e1e:	89ab      	ldrh	r3, [r5, #12]
 8014e20:	071b      	lsls	r3, r3, #28
 8014e22:	d501      	bpl.n	8014e28 <_vfiprintf_r+0x3c>
 8014e24:	692b      	ldr	r3, [r5, #16]
 8014e26:	b9eb      	cbnz	r3, 8014e64 <_vfiprintf_r+0x78>
 8014e28:	4629      	mov	r1, r5
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f000 f96e 	bl	801510c <__swsetup_r>
 8014e30:	b1c0      	cbz	r0, 8014e64 <_vfiprintf_r+0x78>
 8014e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e34:	07dc      	lsls	r4, r3, #31
 8014e36:	d50e      	bpl.n	8014e56 <_vfiprintf_r+0x6a>
 8014e38:	f04f 30ff 	mov.w	r0, #4294967295
 8014e3c:	b01d      	add	sp, #116	; 0x74
 8014e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e42:	4b7b      	ldr	r3, [pc, #492]	; (8015030 <_vfiprintf_r+0x244>)
 8014e44:	429d      	cmp	r5, r3
 8014e46:	d101      	bne.n	8014e4c <_vfiprintf_r+0x60>
 8014e48:	68b5      	ldr	r5, [r6, #8]
 8014e4a:	e7df      	b.n	8014e0c <_vfiprintf_r+0x20>
 8014e4c:	4b79      	ldr	r3, [pc, #484]	; (8015034 <_vfiprintf_r+0x248>)
 8014e4e:	429d      	cmp	r5, r3
 8014e50:	bf08      	it	eq
 8014e52:	68f5      	ldreq	r5, [r6, #12]
 8014e54:	e7da      	b.n	8014e0c <_vfiprintf_r+0x20>
 8014e56:	89ab      	ldrh	r3, [r5, #12]
 8014e58:	0598      	lsls	r0, r3, #22
 8014e5a:	d4ed      	bmi.n	8014e38 <_vfiprintf_r+0x4c>
 8014e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e5e:	f7ff ff49 	bl	8014cf4 <__retarget_lock_release_recursive>
 8014e62:	e7e9      	b.n	8014e38 <_vfiprintf_r+0x4c>
 8014e64:	2300      	movs	r3, #0
 8014e66:	9309      	str	r3, [sp, #36]	; 0x24
 8014e68:	2320      	movs	r3, #32
 8014e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e72:	2330      	movs	r3, #48	; 0x30
 8014e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015038 <_vfiprintf_r+0x24c>
 8014e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e7c:	f04f 0901 	mov.w	r9, #1
 8014e80:	4623      	mov	r3, r4
 8014e82:	469a      	mov	sl, r3
 8014e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e88:	b10a      	cbz	r2, 8014e8e <_vfiprintf_r+0xa2>
 8014e8a:	2a25      	cmp	r2, #37	; 0x25
 8014e8c:	d1f9      	bne.n	8014e82 <_vfiprintf_r+0x96>
 8014e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8014e92:	d00b      	beq.n	8014eac <_vfiprintf_r+0xc0>
 8014e94:	465b      	mov	r3, fp
 8014e96:	4622      	mov	r2, r4
 8014e98:	4629      	mov	r1, r5
 8014e9a:	4630      	mov	r0, r6
 8014e9c:	f7ff ff94 	bl	8014dc8 <__sfputs_r>
 8014ea0:	3001      	adds	r0, #1
 8014ea2:	f000 80aa 	beq.w	8014ffa <_vfiprintf_r+0x20e>
 8014ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ea8:	445a      	add	r2, fp
 8014eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8014eac:	f89a 3000 	ldrb.w	r3, [sl]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	f000 80a2 	beq.w	8014ffa <_vfiprintf_r+0x20e>
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8014ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ec0:	f10a 0a01 	add.w	sl, sl, #1
 8014ec4:	9304      	str	r3, [sp, #16]
 8014ec6:	9307      	str	r3, [sp, #28]
 8014ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8014ece:	4654      	mov	r4, sl
 8014ed0:	2205      	movs	r2, #5
 8014ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed6:	4858      	ldr	r0, [pc, #352]	; (8015038 <_vfiprintf_r+0x24c>)
 8014ed8:	f7eb fa0a 	bl	80002f0 <memchr>
 8014edc:	9a04      	ldr	r2, [sp, #16]
 8014ede:	b9d8      	cbnz	r0, 8014f18 <_vfiprintf_r+0x12c>
 8014ee0:	06d1      	lsls	r1, r2, #27
 8014ee2:	bf44      	itt	mi
 8014ee4:	2320      	movmi	r3, #32
 8014ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014eea:	0713      	lsls	r3, r2, #28
 8014eec:	bf44      	itt	mi
 8014eee:	232b      	movmi	r3, #43	; 0x2b
 8014ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8014ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8014efa:	d015      	beq.n	8014f28 <_vfiprintf_r+0x13c>
 8014efc:	9a07      	ldr	r2, [sp, #28]
 8014efe:	4654      	mov	r4, sl
 8014f00:	2000      	movs	r0, #0
 8014f02:	f04f 0c0a 	mov.w	ip, #10
 8014f06:	4621      	mov	r1, r4
 8014f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f0c:	3b30      	subs	r3, #48	; 0x30
 8014f0e:	2b09      	cmp	r3, #9
 8014f10:	d94e      	bls.n	8014fb0 <_vfiprintf_r+0x1c4>
 8014f12:	b1b0      	cbz	r0, 8014f42 <_vfiprintf_r+0x156>
 8014f14:	9207      	str	r2, [sp, #28]
 8014f16:	e014      	b.n	8014f42 <_vfiprintf_r+0x156>
 8014f18:	eba0 0308 	sub.w	r3, r0, r8
 8014f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8014f20:	4313      	orrs	r3, r2
 8014f22:	9304      	str	r3, [sp, #16]
 8014f24:	46a2      	mov	sl, r4
 8014f26:	e7d2      	b.n	8014ece <_vfiprintf_r+0xe2>
 8014f28:	9b03      	ldr	r3, [sp, #12]
 8014f2a:	1d19      	adds	r1, r3, #4
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	9103      	str	r1, [sp, #12]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	bfbb      	ittet	lt
 8014f34:	425b      	neglt	r3, r3
 8014f36:	f042 0202 	orrlt.w	r2, r2, #2
 8014f3a:	9307      	strge	r3, [sp, #28]
 8014f3c:	9307      	strlt	r3, [sp, #28]
 8014f3e:	bfb8      	it	lt
 8014f40:	9204      	strlt	r2, [sp, #16]
 8014f42:	7823      	ldrb	r3, [r4, #0]
 8014f44:	2b2e      	cmp	r3, #46	; 0x2e
 8014f46:	d10c      	bne.n	8014f62 <_vfiprintf_r+0x176>
 8014f48:	7863      	ldrb	r3, [r4, #1]
 8014f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8014f4c:	d135      	bne.n	8014fba <_vfiprintf_r+0x1ce>
 8014f4e:	9b03      	ldr	r3, [sp, #12]
 8014f50:	1d1a      	adds	r2, r3, #4
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	9203      	str	r2, [sp, #12]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	bfb8      	it	lt
 8014f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f5e:	3402      	adds	r4, #2
 8014f60:	9305      	str	r3, [sp, #20]
 8014f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015048 <_vfiprintf_r+0x25c>
 8014f66:	7821      	ldrb	r1, [r4, #0]
 8014f68:	2203      	movs	r2, #3
 8014f6a:	4650      	mov	r0, sl
 8014f6c:	f7eb f9c0 	bl	80002f0 <memchr>
 8014f70:	b140      	cbz	r0, 8014f84 <_vfiprintf_r+0x198>
 8014f72:	2340      	movs	r3, #64	; 0x40
 8014f74:	eba0 000a 	sub.w	r0, r0, sl
 8014f78:	fa03 f000 	lsl.w	r0, r3, r0
 8014f7c:	9b04      	ldr	r3, [sp, #16]
 8014f7e:	4303      	orrs	r3, r0
 8014f80:	3401      	adds	r4, #1
 8014f82:	9304      	str	r3, [sp, #16]
 8014f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f88:	482c      	ldr	r0, [pc, #176]	; (801503c <_vfiprintf_r+0x250>)
 8014f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f8e:	2206      	movs	r2, #6
 8014f90:	f7eb f9ae 	bl	80002f0 <memchr>
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d03f      	beq.n	8015018 <_vfiprintf_r+0x22c>
 8014f98:	4b29      	ldr	r3, [pc, #164]	; (8015040 <_vfiprintf_r+0x254>)
 8014f9a:	bb1b      	cbnz	r3, 8014fe4 <_vfiprintf_r+0x1f8>
 8014f9c:	9b03      	ldr	r3, [sp, #12]
 8014f9e:	3307      	adds	r3, #7
 8014fa0:	f023 0307 	bic.w	r3, r3, #7
 8014fa4:	3308      	adds	r3, #8
 8014fa6:	9303      	str	r3, [sp, #12]
 8014fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014faa:	443b      	add	r3, r7
 8014fac:	9309      	str	r3, [sp, #36]	; 0x24
 8014fae:	e767      	b.n	8014e80 <_vfiprintf_r+0x94>
 8014fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8014fb4:	460c      	mov	r4, r1
 8014fb6:	2001      	movs	r0, #1
 8014fb8:	e7a5      	b.n	8014f06 <_vfiprintf_r+0x11a>
 8014fba:	2300      	movs	r3, #0
 8014fbc:	3401      	adds	r4, #1
 8014fbe:	9305      	str	r3, [sp, #20]
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	f04f 0c0a 	mov.w	ip, #10
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fcc:	3a30      	subs	r2, #48	; 0x30
 8014fce:	2a09      	cmp	r2, #9
 8014fd0:	d903      	bls.n	8014fda <_vfiprintf_r+0x1ee>
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d0c5      	beq.n	8014f62 <_vfiprintf_r+0x176>
 8014fd6:	9105      	str	r1, [sp, #20]
 8014fd8:	e7c3      	b.n	8014f62 <_vfiprintf_r+0x176>
 8014fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fde:	4604      	mov	r4, r0
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	e7f0      	b.n	8014fc6 <_vfiprintf_r+0x1da>
 8014fe4:	ab03      	add	r3, sp, #12
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	462a      	mov	r2, r5
 8014fea:	4b16      	ldr	r3, [pc, #88]	; (8015044 <_vfiprintf_r+0x258>)
 8014fec:	a904      	add	r1, sp, #16
 8014fee:	4630      	mov	r0, r6
 8014ff0:	f7fd ff56 	bl	8012ea0 <_printf_float>
 8014ff4:	4607      	mov	r7, r0
 8014ff6:	1c78      	adds	r0, r7, #1
 8014ff8:	d1d6      	bne.n	8014fa8 <_vfiprintf_r+0x1bc>
 8014ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ffc:	07d9      	lsls	r1, r3, #31
 8014ffe:	d405      	bmi.n	801500c <_vfiprintf_r+0x220>
 8015000:	89ab      	ldrh	r3, [r5, #12]
 8015002:	059a      	lsls	r2, r3, #22
 8015004:	d402      	bmi.n	801500c <_vfiprintf_r+0x220>
 8015006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015008:	f7ff fe74 	bl	8014cf4 <__retarget_lock_release_recursive>
 801500c:	89ab      	ldrh	r3, [r5, #12]
 801500e:	065b      	lsls	r3, r3, #25
 8015010:	f53f af12 	bmi.w	8014e38 <_vfiprintf_r+0x4c>
 8015014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015016:	e711      	b.n	8014e3c <_vfiprintf_r+0x50>
 8015018:	ab03      	add	r3, sp, #12
 801501a:	9300      	str	r3, [sp, #0]
 801501c:	462a      	mov	r2, r5
 801501e:	4b09      	ldr	r3, [pc, #36]	; (8015044 <_vfiprintf_r+0x258>)
 8015020:	a904      	add	r1, sp, #16
 8015022:	4630      	mov	r0, r6
 8015024:	f7fe f9c8 	bl	80133b8 <_printf_i>
 8015028:	e7e4      	b.n	8014ff4 <_vfiprintf_r+0x208>
 801502a:	bf00      	nop
 801502c:	08015c84 	.word	0x08015c84
 8015030:	08015ca4 	.word	0x08015ca4
 8015034:	08015c64 	.word	0x08015c64
 8015038:	08015b0c 	.word	0x08015b0c
 801503c:	08015b16 	.word	0x08015b16
 8015040:	08012ea1 	.word	0x08012ea1
 8015044:	08014dc9 	.word	0x08014dc9
 8015048:	08015b12 	.word	0x08015b12

0801504c <__swbuf_r>:
 801504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801504e:	460e      	mov	r6, r1
 8015050:	4614      	mov	r4, r2
 8015052:	4605      	mov	r5, r0
 8015054:	b118      	cbz	r0, 801505e <__swbuf_r+0x12>
 8015056:	6983      	ldr	r3, [r0, #24]
 8015058:	b90b      	cbnz	r3, 801505e <__swbuf_r+0x12>
 801505a:	f000 f9e7 	bl	801542c <__sinit>
 801505e:	4b21      	ldr	r3, [pc, #132]	; (80150e4 <__swbuf_r+0x98>)
 8015060:	429c      	cmp	r4, r3
 8015062:	d12b      	bne.n	80150bc <__swbuf_r+0x70>
 8015064:	686c      	ldr	r4, [r5, #4]
 8015066:	69a3      	ldr	r3, [r4, #24]
 8015068:	60a3      	str	r3, [r4, #8]
 801506a:	89a3      	ldrh	r3, [r4, #12]
 801506c:	071a      	lsls	r2, r3, #28
 801506e:	d52f      	bpl.n	80150d0 <__swbuf_r+0x84>
 8015070:	6923      	ldr	r3, [r4, #16]
 8015072:	b36b      	cbz	r3, 80150d0 <__swbuf_r+0x84>
 8015074:	6923      	ldr	r3, [r4, #16]
 8015076:	6820      	ldr	r0, [r4, #0]
 8015078:	1ac0      	subs	r0, r0, r3
 801507a:	6963      	ldr	r3, [r4, #20]
 801507c:	b2f6      	uxtb	r6, r6
 801507e:	4283      	cmp	r3, r0
 8015080:	4637      	mov	r7, r6
 8015082:	dc04      	bgt.n	801508e <__swbuf_r+0x42>
 8015084:	4621      	mov	r1, r4
 8015086:	4628      	mov	r0, r5
 8015088:	f000 f93c 	bl	8015304 <_fflush_r>
 801508c:	bb30      	cbnz	r0, 80150dc <__swbuf_r+0x90>
 801508e:	68a3      	ldr	r3, [r4, #8]
 8015090:	3b01      	subs	r3, #1
 8015092:	60a3      	str	r3, [r4, #8]
 8015094:	6823      	ldr	r3, [r4, #0]
 8015096:	1c5a      	adds	r2, r3, #1
 8015098:	6022      	str	r2, [r4, #0]
 801509a:	701e      	strb	r6, [r3, #0]
 801509c:	6963      	ldr	r3, [r4, #20]
 801509e:	3001      	adds	r0, #1
 80150a0:	4283      	cmp	r3, r0
 80150a2:	d004      	beq.n	80150ae <__swbuf_r+0x62>
 80150a4:	89a3      	ldrh	r3, [r4, #12]
 80150a6:	07db      	lsls	r3, r3, #31
 80150a8:	d506      	bpl.n	80150b8 <__swbuf_r+0x6c>
 80150aa:	2e0a      	cmp	r6, #10
 80150ac:	d104      	bne.n	80150b8 <__swbuf_r+0x6c>
 80150ae:	4621      	mov	r1, r4
 80150b0:	4628      	mov	r0, r5
 80150b2:	f000 f927 	bl	8015304 <_fflush_r>
 80150b6:	b988      	cbnz	r0, 80150dc <__swbuf_r+0x90>
 80150b8:	4638      	mov	r0, r7
 80150ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150bc:	4b0a      	ldr	r3, [pc, #40]	; (80150e8 <__swbuf_r+0x9c>)
 80150be:	429c      	cmp	r4, r3
 80150c0:	d101      	bne.n	80150c6 <__swbuf_r+0x7a>
 80150c2:	68ac      	ldr	r4, [r5, #8]
 80150c4:	e7cf      	b.n	8015066 <__swbuf_r+0x1a>
 80150c6:	4b09      	ldr	r3, [pc, #36]	; (80150ec <__swbuf_r+0xa0>)
 80150c8:	429c      	cmp	r4, r3
 80150ca:	bf08      	it	eq
 80150cc:	68ec      	ldreq	r4, [r5, #12]
 80150ce:	e7ca      	b.n	8015066 <__swbuf_r+0x1a>
 80150d0:	4621      	mov	r1, r4
 80150d2:	4628      	mov	r0, r5
 80150d4:	f000 f81a 	bl	801510c <__swsetup_r>
 80150d8:	2800      	cmp	r0, #0
 80150da:	d0cb      	beq.n	8015074 <__swbuf_r+0x28>
 80150dc:	f04f 37ff 	mov.w	r7, #4294967295
 80150e0:	e7ea      	b.n	80150b8 <__swbuf_r+0x6c>
 80150e2:	bf00      	nop
 80150e4:	08015c84 	.word	0x08015c84
 80150e8:	08015ca4 	.word	0x08015ca4
 80150ec:	08015c64 	.word	0x08015c64

080150f0 <__ascii_wctomb>:
 80150f0:	b149      	cbz	r1, 8015106 <__ascii_wctomb+0x16>
 80150f2:	2aff      	cmp	r2, #255	; 0xff
 80150f4:	bf85      	ittet	hi
 80150f6:	238a      	movhi	r3, #138	; 0x8a
 80150f8:	6003      	strhi	r3, [r0, #0]
 80150fa:	700a      	strbls	r2, [r1, #0]
 80150fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8015100:	bf98      	it	ls
 8015102:	2001      	movls	r0, #1
 8015104:	4770      	bx	lr
 8015106:	4608      	mov	r0, r1
 8015108:	4770      	bx	lr
	...

0801510c <__swsetup_r>:
 801510c:	4b32      	ldr	r3, [pc, #200]	; (80151d8 <__swsetup_r+0xcc>)
 801510e:	b570      	push	{r4, r5, r6, lr}
 8015110:	681d      	ldr	r5, [r3, #0]
 8015112:	4606      	mov	r6, r0
 8015114:	460c      	mov	r4, r1
 8015116:	b125      	cbz	r5, 8015122 <__swsetup_r+0x16>
 8015118:	69ab      	ldr	r3, [r5, #24]
 801511a:	b913      	cbnz	r3, 8015122 <__swsetup_r+0x16>
 801511c:	4628      	mov	r0, r5
 801511e:	f000 f985 	bl	801542c <__sinit>
 8015122:	4b2e      	ldr	r3, [pc, #184]	; (80151dc <__swsetup_r+0xd0>)
 8015124:	429c      	cmp	r4, r3
 8015126:	d10f      	bne.n	8015148 <__swsetup_r+0x3c>
 8015128:	686c      	ldr	r4, [r5, #4]
 801512a:	89a3      	ldrh	r3, [r4, #12]
 801512c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015130:	0719      	lsls	r1, r3, #28
 8015132:	d42c      	bmi.n	801518e <__swsetup_r+0x82>
 8015134:	06dd      	lsls	r5, r3, #27
 8015136:	d411      	bmi.n	801515c <__swsetup_r+0x50>
 8015138:	2309      	movs	r3, #9
 801513a:	6033      	str	r3, [r6, #0]
 801513c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015140:	81a3      	strh	r3, [r4, #12]
 8015142:	f04f 30ff 	mov.w	r0, #4294967295
 8015146:	e03e      	b.n	80151c6 <__swsetup_r+0xba>
 8015148:	4b25      	ldr	r3, [pc, #148]	; (80151e0 <__swsetup_r+0xd4>)
 801514a:	429c      	cmp	r4, r3
 801514c:	d101      	bne.n	8015152 <__swsetup_r+0x46>
 801514e:	68ac      	ldr	r4, [r5, #8]
 8015150:	e7eb      	b.n	801512a <__swsetup_r+0x1e>
 8015152:	4b24      	ldr	r3, [pc, #144]	; (80151e4 <__swsetup_r+0xd8>)
 8015154:	429c      	cmp	r4, r3
 8015156:	bf08      	it	eq
 8015158:	68ec      	ldreq	r4, [r5, #12]
 801515a:	e7e6      	b.n	801512a <__swsetup_r+0x1e>
 801515c:	0758      	lsls	r0, r3, #29
 801515e:	d512      	bpl.n	8015186 <__swsetup_r+0x7a>
 8015160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015162:	b141      	cbz	r1, 8015176 <__swsetup_r+0x6a>
 8015164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015168:	4299      	cmp	r1, r3
 801516a:	d002      	beq.n	8015172 <__swsetup_r+0x66>
 801516c:	4630      	mov	r0, r6
 801516e:	f7fd fd5b 	bl	8012c28 <_free_r>
 8015172:	2300      	movs	r3, #0
 8015174:	6363      	str	r3, [r4, #52]	; 0x34
 8015176:	89a3      	ldrh	r3, [r4, #12]
 8015178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801517c:	81a3      	strh	r3, [r4, #12]
 801517e:	2300      	movs	r3, #0
 8015180:	6063      	str	r3, [r4, #4]
 8015182:	6923      	ldr	r3, [r4, #16]
 8015184:	6023      	str	r3, [r4, #0]
 8015186:	89a3      	ldrh	r3, [r4, #12]
 8015188:	f043 0308 	orr.w	r3, r3, #8
 801518c:	81a3      	strh	r3, [r4, #12]
 801518e:	6923      	ldr	r3, [r4, #16]
 8015190:	b94b      	cbnz	r3, 80151a6 <__swsetup_r+0x9a>
 8015192:	89a3      	ldrh	r3, [r4, #12]
 8015194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801519c:	d003      	beq.n	80151a6 <__swsetup_r+0x9a>
 801519e:	4621      	mov	r1, r4
 80151a0:	4630      	mov	r0, r6
 80151a2:	f000 fa05 	bl	80155b0 <__smakebuf_r>
 80151a6:	89a0      	ldrh	r0, [r4, #12]
 80151a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151ac:	f010 0301 	ands.w	r3, r0, #1
 80151b0:	d00a      	beq.n	80151c8 <__swsetup_r+0xbc>
 80151b2:	2300      	movs	r3, #0
 80151b4:	60a3      	str	r3, [r4, #8]
 80151b6:	6963      	ldr	r3, [r4, #20]
 80151b8:	425b      	negs	r3, r3
 80151ba:	61a3      	str	r3, [r4, #24]
 80151bc:	6923      	ldr	r3, [r4, #16]
 80151be:	b943      	cbnz	r3, 80151d2 <__swsetup_r+0xc6>
 80151c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80151c4:	d1ba      	bne.n	801513c <__swsetup_r+0x30>
 80151c6:	bd70      	pop	{r4, r5, r6, pc}
 80151c8:	0781      	lsls	r1, r0, #30
 80151ca:	bf58      	it	pl
 80151cc:	6963      	ldrpl	r3, [r4, #20]
 80151ce:	60a3      	str	r3, [r4, #8]
 80151d0:	e7f4      	b.n	80151bc <__swsetup_r+0xb0>
 80151d2:	2000      	movs	r0, #0
 80151d4:	e7f7      	b.n	80151c6 <__swsetup_r+0xba>
 80151d6:	bf00      	nop
 80151d8:	24000288 	.word	0x24000288
 80151dc:	08015c84 	.word	0x08015c84
 80151e0:	08015ca4 	.word	0x08015ca4
 80151e4:	08015c64 	.word	0x08015c64

080151e8 <abort>:
 80151e8:	b508      	push	{r3, lr}
 80151ea:	2006      	movs	r0, #6
 80151ec:	f000 fa50 	bl	8015690 <raise>
 80151f0:	2001      	movs	r0, #1
 80151f2:	f7eb fff7 	bl	80011e4 <_exit>
	...

080151f8 <__sflush_r>:
 80151f8:	898a      	ldrh	r2, [r1, #12]
 80151fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151fe:	4605      	mov	r5, r0
 8015200:	0710      	lsls	r0, r2, #28
 8015202:	460c      	mov	r4, r1
 8015204:	d458      	bmi.n	80152b8 <__sflush_r+0xc0>
 8015206:	684b      	ldr	r3, [r1, #4]
 8015208:	2b00      	cmp	r3, #0
 801520a:	dc05      	bgt.n	8015218 <__sflush_r+0x20>
 801520c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801520e:	2b00      	cmp	r3, #0
 8015210:	dc02      	bgt.n	8015218 <__sflush_r+0x20>
 8015212:	2000      	movs	r0, #0
 8015214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801521a:	2e00      	cmp	r6, #0
 801521c:	d0f9      	beq.n	8015212 <__sflush_r+0x1a>
 801521e:	2300      	movs	r3, #0
 8015220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015224:	682f      	ldr	r7, [r5, #0]
 8015226:	602b      	str	r3, [r5, #0]
 8015228:	d032      	beq.n	8015290 <__sflush_r+0x98>
 801522a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801522c:	89a3      	ldrh	r3, [r4, #12]
 801522e:	075a      	lsls	r2, r3, #29
 8015230:	d505      	bpl.n	801523e <__sflush_r+0x46>
 8015232:	6863      	ldr	r3, [r4, #4]
 8015234:	1ac0      	subs	r0, r0, r3
 8015236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015238:	b10b      	cbz	r3, 801523e <__sflush_r+0x46>
 801523a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801523c:	1ac0      	subs	r0, r0, r3
 801523e:	2300      	movs	r3, #0
 8015240:	4602      	mov	r2, r0
 8015242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015244:	6a21      	ldr	r1, [r4, #32]
 8015246:	4628      	mov	r0, r5
 8015248:	47b0      	blx	r6
 801524a:	1c43      	adds	r3, r0, #1
 801524c:	89a3      	ldrh	r3, [r4, #12]
 801524e:	d106      	bne.n	801525e <__sflush_r+0x66>
 8015250:	6829      	ldr	r1, [r5, #0]
 8015252:	291d      	cmp	r1, #29
 8015254:	d82c      	bhi.n	80152b0 <__sflush_r+0xb8>
 8015256:	4a2a      	ldr	r2, [pc, #168]	; (8015300 <__sflush_r+0x108>)
 8015258:	40ca      	lsrs	r2, r1
 801525a:	07d6      	lsls	r6, r2, #31
 801525c:	d528      	bpl.n	80152b0 <__sflush_r+0xb8>
 801525e:	2200      	movs	r2, #0
 8015260:	6062      	str	r2, [r4, #4]
 8015262:	04d9      	lsls	r1, r3, #19
 8015264:	6922      	ldr	r2, [r4, #16]
 8015266:	6022      	str	r2, [r4, #0]
 8015268:	d504      	bpl.n	8015274 <__sflush_r+0x7c>
 801526a:	1c42      	adds	r2, r0, #1
 801526c:	d101      	bne.n	8015272 <__sflush_r+0x7a>
 801526e:	682b      	ldr	r3, [r5, #0]
 8015270:	b903      	cbnz	r3, 8015274 <__sflush_r+0x7c>
 8015272:	6560      	str	r0, [r4, #84]	; 0x54
 8015274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015276:	602f      	str	r7, [r5, #0]
 8015278:	2900      	cmp	r1, #0
 801527a:	d0ca      	beq.n	8015212 <__sflush_r+0x1a>
 801527c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015280:	4299      	cmp	r1, r3
 8015282:	d002      	beq.n	801528a <__sflush_r+0x92>
 8015284:	4628      	mov	r0, r5
 8015286:	f7fd fccf 	bl	8012c28 <_free_r>
 801528a:	2000      	movs	r0, #0
 801528c:	6360      	str	r0, [r4, #52]	; 0x34
 801528e:	e7c1      	b.n	8015214 <__sflush_r+0x1c>
 8015290:	6a21      	ldr	r1, [r4, #32]
 8015292:	2301      	movs	r3, #1
 8015294:	4628      	mov	r0, r5
 8015296:	47b0      	blx	r6
 8015298:	1c41      	adds	r1, r0, #1
 801529a:	d1c7      	bne.n	801522c <__sflush_r+0x34>
 801529c:	682b      	ldr	r3, [r5, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d0c4      	beq.n	801522c <__sflush_r+0x34>
 80152a2:	2b1d      	cmp	r3, #29
 80152a4:	d001      	beq.n	80152aa <__sflush_r+0xb2>
 80152a6:	2b16      	cmp	r3, #22
 80152a8:	d101      	bne.n	80152ae <__sflush_r+0xb6>
 80152aa:	602f      	str	r7, [r5, #0]
 80152ac:	e7b1      	b.n	8015212 <__sflush_r+0x1a>
 80152ae:	89a3      	ldrh	r3, [r4, #12]
 80152b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152b4:	81a3      	strh	r3, [r4, #12]
 80152b6:	e7ad      	b.n	8015214 <__sflush_r+0x1c>
 80152b8:	690f      	ldr	r7, [r1, #16]
 80152ba:	2f00      	cmp	r7, #0
 80152bc:	d0a9      	beq.n	8015212 <__sflush_r+0x1a>
 80152be:	0793      	lsls	r3, r2, #30
 80152c0:	680e      	ldr	r6, [r1, #0]
 80152c2:	bf08      	it	eq
 80152c4:	694b      	ldreq	r3, [r1, #20]
 80152c6:	600f      	str	r7, [r1, #0]
 80152c8:	bf18      	it	ne
 80152ca:	2300      	movne	r3, #0
 80152cc:	eba6 0807 	sub.w	r8, r6, r7
 80152d0:	608b      	str	r3, [r1, #8]
 80152d2:	f1b8 0f00 	cmp.w	r8, #0
 80152d6:	dd9c      	ble.n	8015212 <__sflush_r+0x1a>
 80152d8:	6a21      	ldr	r1, [r4, #32]
 80152da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80152dc:	4643      	mov	r3, r8
 80152de:	463a      	mov	r2, r7
 80152e0:	4628      	mov	r0, r5
 80152e2:	47b0      	blx	r6
 80152e4:	2800      	cmp	r0, #0
 80152e6:	dc06      	bgt.n	80152f6 <__sflush_r+0xfe>
 80152e8:	89a3      	ldrh	r3, [r4, #12]
 80152ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ee:	81a3      	strh	r3, [r4, #12]
 80152f0:	f04f 30ff 	mov.w	r0, #4294967295
 80152f4:	e78e      	b.n	8015214 <__sflush_r+0x1c>
 80152f6:	4407      	add	r7, r0
 80152f8:	eba8 0800 	sub.w	r8, r8, r0
 80152fc:	e7e9      	b.n	80152d2 <__sflush_r+0xda>
 80152fe:	bf00      	nop
 8015300:	20400001 	.word	0x20400001

08015304 <_fflush_r>:
 8015304:	b538      	push	{r3, r4, r5, lr}
 8015306:	690b      	ldr	r3, [r1, #16]
 8015308:	4605      	mov	r5, r0
 801530a:	460c      	mov	r4, r1
 801530c:	b913      	cbnz	r3, 8015314 <_fflush_r+0x10>
 801530e:	2500      	movs	r5, #0
 8015310:	4628      	mov	r0, r5
 8015312:	bd38      	pop	{r3, r4, r5, pc}
 8015314:	b118      	cbz	r0, 801531e <_fflush_r+0x1a>
 8015316:	6983      	ldr	r3, [r0, #24]
 8015318:	b90b      	cbnz	r3, 801531e <_fflush_r+0x1a>
 801531a:	f000 f887 	bl	801542c <__sinit>
 801531e:	4b14      	ldr	r3, [pc, #80]	; (8015370 <_fflush_r+0x6c>)
 8015320:	429c      	cmp	r4, r3
 8015322:	d11b      	bne.n	801535c <_fflush_r+0x58>
 8015324:	686c      	ldr	r4, [r5, #4]
 8015326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d0ef      	beq.n	801530e <_fflush_r+0xa>
 801532e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015330:	07d0      	lsls	r0, r2, #31
 8015332:	d404      	bmi.n	801533e <_fflush_r+0x3a>
 8015334:	0599      	lsls	r1, r3, #22
 8015336:	d402      	bmi.n	801533e <_fflush_r+0x3a>
 8015338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801533a:	f7ff fcda 	bl	8014cf2 <__retarget_lock_acquire_recursive>
 801533e:	4628      	mov	r0, r5
 8015340:	4621      	mov	r1, r4
 8015342:	f7ff ff59 	bl	80151f8 <__sflush_r>
 8015346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015348:	07da      	lsls	r2, r3, #31
 801534a:	4605      	mov	r5, r0
 801534c:	d4e0      	bmi.n	8015310 <_fflush_r+0xc>
 801534e:	89a3      	ldrh	r3, [r4, #12]
 8015350:	059b      	lsls	r3, r3, #22
 8015352:	d4dd      	bmi.n	8015310 <_fflush_r+0xc>
 8015354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015356:	f7ff fccd 	bl	8014cf4 <__retarget_lock_release_recursive>
 801535a:	e7d9      	b.n	8015310 <_fflush_r+0xc>
 801535c:	4b05      	ldr	r3, [pc, #20]	; (8015374 <_fflush_r+0x70>)
 801535e:	429c      	cmp	r4, r3
 8015360:	d101      	bne.n	8015366 <_fflush_r+0x62>
 8015362:	68ac      	ldr	r4, [r5, #8]
 8015364:	e7df      	b.n	8015326 <_fflush_r+0x22>
 8015366:	4b04      	ldr	r3, [pc, #16]	; (8015378 <_fflush_r+0x74>)
 8015368:	429c      	cmp	r4, r3
 801536a:	bf08      	it	eq
 801536c:	68ec      	ldreq	r4, [r5, #12]
 801536e:	e7da      	b.n	8015326 <_fflush_r+0x22>
 8015370:	08015c84 	.word	0x08015c84
 8015374:	08015ca4 	.word	0x08015ca4
 8015378:	08015c64 	.word	0x08015c64

0801537c <std>:
 801537c:	2300      	movs	r3, #0
 801537e:	b510      	push	{r4, lr}
 8015380:	4604      	mov	r4, r0
 8015382:	e9c0 3300 	strd	r3, r3, [r0]
 8015386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801538a:	6083      	str	r3, [r0, #8]
 801538c:	8181      	strh	r1, [r0, #12]
 801538e:	6643      	str	r3, [r0, #100]	; 0x64
 8015390:	81c2      	strh	r2, [r0, #14]
 8015392:	6183      	str	r3, [r0, #24]
 8015394:	4619      	mov	r1, r3
 8015396:	2208      	movs	r2, #8
 8015398:	305c      	adds	r0, #92	; 0x5c
 801539a:	f7fd fc3d 	bl	8012c18 <memset>
 801539e:	4b05      	ldr	r3, [pc, #20]	; (80153b4 <std+0x38>)
 80153a0:	6263      	str	r3, [r4, #36]	; 0x24
 80153a2:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <std+0x3c>)
 80153a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80153a6:	4b05      	ldr	r3, [pc, #20]	; (80153bc <std+0x40>)
 80153a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80153aa:	4b05      	ldr	r3, [pc, #20]	; (80153c0 <std+0x44>)
 80153ac:	6224      	str	r4, [r4, #32]
 80153ae:	6323      	str	r3, [r4, #48]	; 0x30
 80153b0:	bd10      	pop	{r4, pc}
 80153b2:	bf00      	nop
 80153b4:	080156c9 	.word	0x080156c9
 80153b8:	080156eb 	.word	0x080156eb
 80153bc:	08015723 	.word	0x08015723
 80153c0:	08015747 	.word	0x08015747

080153c4 <_cleanup_r>:
 80153c4:	4901      	ldr	r1, [pc, #4]	; (80153cc <_cleanup_r+0x8>)
 80153c6:	f000 b8af 	b.w	8015528 <_fwalk_reent>
 80153ca:	bf00      	nop
 80153cc:	08015305 	.word	0x08015305

080153d0 <__sfmoreglue>:
 80153d0:	b570      	push	{r4, r5, r6, lr}
 80153d2:	1e4a      	subs	r2, r1, #1
 80153d4:	2568      	movs	r5, #104	; 0x68
 80153d6:	4355      	muls	r5, r2
 80153d8:	460e      	mov	r6, r1
 80153da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80153de:	f7fd fc73 	bl	8012cc8 <_malloc_r>
 80153e2:	4604      	mov	r4, r0
 80153e4:	b140      	cbz	r0, 80153f8 <__sfmoreglue+0x28>
 80153e6:	2100      	movs	r1, #0
 80153e8:	e9c0 1600 	strd	r1, r6, [r0]
 80153ec:	300c      	adds	r0, #12
 80153ee:	60a0      	str	r0, [r4, #8]
 80153f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80153f4:	f7fd fc10 	bl	8012c18 <memset>
 80153f8:	4620      	mov	r0, r4
 80153fa:	bd70      	pop	{r4, r5, r6, pc}

080153fc <__sfp_lock_acquire>:
 80153fc:	4801      	ldr	r0, [pc, #4]	; (8015404 <__sfp_lock_acquire+0x8>)
 80153fe:	f7ff bc78 	b.w	8014cf2 <__retarget_lock_acquire_recursive>
 8015402:	bf00      	nop
 8015404:	2400426c 	.word	0x2400426c

08015408 <__sfp_lock_release>:
 8015408:	4801      	ldr	r0, [pc, #4]	; (8015410 <__sfp_lock_release+0x8>)
 801540a:	f7ff bc73 	b.w	8014cf4 <__retarget_lock_release_recursive>
 801540e:	bf00      	nop
 8015410:	2400426c 	.word	0x2400426c

08015414 <__sinit_lock_acquire>:
 8015414:	4801      	ldr	r0, [pc, #4]	; (801541c <__sinit_lock_acquire+0x8>)
 8015416:	f7ff bc6c 	b.w	8014cf2 <__retarget_lock_acquire_recursive>
 801541a:	bf00      	nop
 801541c:	24004267 	.word	0x24004267

08015420 <__sinit_lock_release>:
 8015420:	4801      	ldr	r0, [pc, #4]	; (8015428 <__sinit_lock_release+0x8>)
 8015422:	f7ff bc67 	b.w	8014cf4 <__retarget_lock_release_recursive>
 8015426:	bf00      	nop
 8015428:	24004267 	.word	0x24004267

0801542c <__sinit>:
 801542c:	b510      	push	{r4, lr}
 801542e:	4604      	mov	r4, r0
 8015430:	f7ff fff0 	bl	8015414 <__sinit_lock_acquire>
 8015434:	69a3      	ldr	r3, [r4, #24]
 8015436:	b11b      	cbz	r3, 8015440 <__sinit+0x14>
 8015438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801543c:	f7ff bff0 	b.w	8015420 <__sinit_lock_release>
 8015440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015444:	6523      	str	r3, [r4, #80]	; 0x50
 8015446:	4b13      	ldr	r3, [pc, #76]	; (8015494 <__sinit+0x68>)
 8015448:	4a13      	ldr	r2, [pc, #76]	; (8015498 <__sinit+0x6c>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	62a2      	str	r2, [r4, #40]	; 0x28
 801544e:	42a3      	cmp	r3, r4
 8015450:	bf04      	itt	eq
 8015452:	2301      	moveq	r3, #1
 8015454:	61a3      	streq	r3, [r4, #24]
 8015456:	4620      	mov	r0, r4
 8015458:	f000 f820 	bl	801549c <__sfp>
 801545c:	6060      	str	r0, [r4, #4]
 801545e:	4620      	mov	r0, r4
 8015460:	f000 f81c 	bl	801549c <__sfp>
 8015464:	60a0      	str	r0, [r4, #8]
 8015466:	4620      	mov	r0, r4
 8015468:	f000 f818 	bl	801549c <__sfp>
 801546c:	2200      	movs	r2, #0
 801546e:	60e0      	str	r0, [r4, #12]
 8015470:	2104      	movs	r1, #4
 8015472:	6860      	ldr	r0, [r4, #4]
 8015474:	f7ff ff82 	bl	801537c <std>
 8015478:	68a0      	ldr	r0, [r4, #8]
 801547a:	2201      	movs	r2, #1
 801547c:	2109      	movs	r1, #9
 801547e:	f7ff ff7d 	bl	801537c <std>
 8015482:	68e0      	ldr	r0, [r4, #12]
 8015484:	2202      	movs	r2, #2
 8015486:	2112      	movs	r1, #18
 8015488:	f7ff ff78 	bl	801537c <std>
 801548c:	2301      	movs	r3, #1
 801548e:	61a3      	str	r3, [r4, #24]
 8015490:	e7d2      	b.n	8015438 <__sinit+0xc>
 8015492:	bf00      	nop
 8015494:	080158e4 	.word	0x080158e4
 8015498:	080153c5 	.word	0x080153c5

0801549c <__sfp>:
 801549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801549e:	4607      	mov	r7, r0
 80154a0:	f7ff ffac 	bl	80153fc <__sfp_lock_acquire>
 80154a4:	4b1e      	ldr	r3, [pc, #120]	; (8015520 <__sfp+0x84>)
 80154a6:	681e      	ldr	r6, [r3, #0]
 80154a8:	69b3      	ldr	r3, [r6, #24]
 80154aa:	b913      	cbnz	r3, 80154b2 <__sfp+0x16>
 80154ac:	4630      	mov	r0, r6
 80154ae:	f7ff ffbd 	bl	801542c <__sinit>
 80154b2:	3648      	adds	r6, #72	; 0x48
 80154b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80154b8:	3b01      	subs	r3, #1
 80154ba:	d503      	bpl.n	80154c4 <__sfp+0x28>
 80154bc:	6833      	ldr	r3, [r6, #0]
 80154be:	b30b      	cbz	r3, 8015504 <__sfp+0x68>
 80154c0:	6836      	ldr	r6, [r6, #0]
 80154c2:	e7f7      	b.n	80154b4 <__sfp+0x18>
 80154c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80154c8:	b9d5      	cbnz	r5, 8015500 <__sfp+0x64>
 80154ca:	4b16      	ldr	r3, [pc, #88]	; (8015524 <__sfp+0x88>)
 80154cc:	60e3      	str	r3, [r4, #12]
 80154ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80154d2:	6665      	str	r5, [r4, #100]	; 0x64
 80154d4:	f7ff fc0c 	bl	8014cf0 <__retarget_lock_init_recursive>
 80154d8:	f7ff ff96 	bl	8015408 <__sfp_lock_release>
 80154dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80154e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80154e4:	6025      	str	r5, [r4, #0]
 80154e6:	61a5      	str	r5, [r4, #24]
 80154e8:	2208      	movs	r2, #8
 80154ea:	4629      	mov	r1, r5
 80154ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80154f0:	f7fd fb92 	bl	8012c18 <memset>
 80154f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80154f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80154fc:	4620      	mov	r0, r4
 80154fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015500:	3468      	adds	r4, #104	; 0x68
 8015502:	e7d9      	b.n	80154b8 <__sfp+0x1c>
 8015504:	2104      	movs	r1, #4
 8015506:	4638      	mov	r0, r7
 8015508:	f7ff ff62 	bl	80153d0 <__sfmoreglue>
 801550c:	4604      	mov	r4, r0
 801550e:	6030      	str	r0, [r6, #0]
 8015510:	2800      	cmp	r0, #0
 8015512:	d1d5      	bne.n	80154c0 <__sfp+0x24>
 8015514:	f7ff ff78 	bl	8015408 <__sfp_lock_release>
 8015518:	230c      	movs	r3, #12
 801551a:	603b      	str	r3, [r7, #0]
 801551c:	e7ee      	b.n	80154fc <__sfp+0x60>
 801551e:	bf00      	nop
 8015520:	080158e4 	.word	0x080158e4
 8015524:	ffff0001 	.word	0xffff0001

08015528 <_fwalk_reent>:
 8015528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801552c:	4606      	mov	r6, r0
 801552e:	4688      	mov	r8, r1
 8015530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015534:	2700      	movs	r7, #0
 8015536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801553a:	f1b9 0901 	subs.w	r9, r9, #1
 801553e:	d505      	bpl.n	801554c <_fwalk_reent+0x24>
 8015540:	6824      	ldr	r4, [r4, #0]
 8015542:	2c00      	cmp	r4, #0
 8015544:	d1f7      	bne.n	8015536 <_fwalk_reent+0xe>
 8015546:	4638      	mov	r0, r7
 8015548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801554c:	89ab      	ldrh	r3, [r5, #12]
 801554e:	2b01      	cmp	r3, #1
 8015550:	d907      	bls.n	8015562 <_fwalk_reent+0x3a>
 8015552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015556:	3301      	adds	r3, #1
 8015558:	d003      	beq.n	8015562 <_fwalk_reent+0x3a>
 801555a:	4629      	mov	r1, r5
 801555c:	4630      	mov	r0, r6
 801555e:	47c0      	blx	r8
 8015560:	4307      	orrs	r7, r0
 8015562:	3568      	adds	r5, #104	; 0x68
 8015564:	e7e9      	b.n	801553a <_fwalk_reent+0x12>

08015566 <__swhatbuf_r>:
 8015566:	b570      	push	{r4, r5, r6, lr}
 8015568:	460e      	mov	r6, r1
 801556a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801556e:	2900      	cmp	r1, #0
 8015570:	b096      	sub	sp, #88	; 0x58
 8015572:	4614      	mov	r4, r2
 8015574:	461d      	mov	r5, r3
 8015576:	da07      	bge.n	8015588 <__swhatbuf_r+0x22>
 8015578:	2300      	movs	r3, #0
 801557a:	602b      	str	r3, [r5, #0]
 801557c:	89b3      	ldrh	r3, [r6, #12]
 801557e:	061a      	lsls	r2, r3, #24
 8015580:	d410      	bmi.n	80155a4 <__swhatbuf_r+0x3e>
 8015582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015586:	e00e      	b.n	80155a6 <__swhatbuf_r+0x40>
 8015588:	466a      	mov	r2, sp
 801558a:	f000 f903 	bl	8015794 <_fstat_r>
 801558e:	2800      	cmp	r0, #0
 8015590:	dbf2      	blt.n	8015578 <__swhatbuf_r+0x12>
 8015592:	9a01      	ldr	r2, [sp, #4]
 8015594:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015598:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801559c:	425a      	negs	r2, r3
 801559e:	415a      	adcs	r2, r3
 80155a0:	602a      	str	r2, [r5, #0]
 80155a2:	e7ee      	b.n	8015582 <__swhatbuf_r+0x1c>
 80155a4:	2340      	movs	r3, #64	; 0x40
 80155a6:	2000      	movs	r0, #0
 80155a8:	6023      	str	r3, [r4, #0]
 80155aa:	b016      	add	sp, #88	; 0x58
 80155ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080155b0 <__smakebuf_r>:
 80155b0:	898b      	ldrh	r3, [r1, #12]
 80155b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80155b4:	079d      	lsls	r5, r3, #30
 80155b6:	4606      	mov	r6, r0
 80155b8:	460c      	mov	r4, r1
 80155ba:	d507      	bpl.n	80155cc <__smakebuf_r+0x1c>
 80155bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80155c0:	6023      	str	r3, [r4, #0]
 80155c2:	6123      	str	r3, [r4, #16]
 80155c4:	2301      	movs	r3, #1
 80155c6:	6163      	str	r3, [r4, #20]
 80155c8:	b002      	add	sp, #8
 80155ca:	bd70      	pop	{r4, r5, r6, pc}
 80155cc:	ab01      	add	r3, sp, #4
 80155ce:	466a      	mov	r2, sp
 80155d0:	f7ff ffc9 	bl	8015566 <__swhatbuf_r>
 80155d4:	9900      	ldr	r1, [sp, #0]
 80155d6:	4605      	mov	r5, r0
 80155d8:	4630      	mov	r0, r6
 80155da:	f7fd fb75 	bl	8012cc8 <_malloc_r>
 80155de:	b948      	cbnz	r0, 80155f4 <__smakebuf_r+0x44>
 80155e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155e4:	059a      	lsls	r2, r3, #22
 80155e6:	d4ef      	bmi.n	80155c8 <__smakebuf_r+0x18>
 80155e8:	f023 0303 	bic.w	r3, r3, #3
 80155ec:	f043 0302 	orr.w	r3, r3, #2
 80155f0:	81a3      	strh	r3, [r4, #12]
 80155f2:	e7e3      	b.n	80155bc <__smakebuf_r+0xc>
 80155f4:	4b0d      	ldr	r3, [pc, #52]	; (801562c <__smakebuf_r+0x7c>)
 80155f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80155f8:	89a3      	ldrh	r3, [r4, #12]
 80155fa:	6020      	str	r0, [r4, #0]
 80155fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015600:	81a3      	strh	r3, [r4, #12]
 8015602:	9b00      	ldr	r3, [sp, #0]
 8015604:	6163      	str	r3, [r4, #20]
 8015606:	9b01      	ldr	r3, [sp, #4]
 8015608:	6120      	str	r0, [r4, #16]
 801560a:	b15b      	cbz	r3, 8015624 <__smakebuf_r+0x74>
 801560c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015610:	4630      	mov	r0, r6
 8015612:	f000 f8d1 	bl	80157b8 <_isatty_r>
 8015616:	b128      	cbz	r0, 8015624 <__smakebuf_r+0x74>
 8015618:	89a3      	ldrh	r3, [r4, #12]
 801561a:	f023 0303 	bic.w	r3, r3, #3
 801561e:	f043 0301 	orr.w	r3, r3, #1
 8015622:	81a3      	strh	r3, [r4, #12]
 8015624:	89a0      	ldrh	r0, [r4, #12]
 8015626:	4305      	orrs	r5, r0
 8015628:	81a5      	strh	r5, [r4, #12]
 801562a:	e7cd      	b.n	80155c8 <__smakebuf_r+0x18>
 801562c:	080153c5 	.word	0x080153c5

08015630 <_malloc_usable_size_r>:
 8015630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015634:	1f18      	subs	r0, r3, #4
 8015636:	2b00      	cmp	r3, #0
 8015638:	bfbc      	itt	lt
 801563a:	580b      	ldrlt	r3, [r1, r0]
 801563c:	18c0      	addlt	r0, r0, r3
 801563e:	4770      	bx	lr

08015640 <_raise_r>:
 8015640:	291f      	cmp	r1, #31
 8015642:	b538      	push	{r3, r4, r5, lr}
 8015644:	4604      	mov	r4, r0
 8015646:	460d      	mov	r5, r1
 8015648:	d904      	bls.n	8015654 <_raise_r+0x14>
 801564a:	2316      	movs	r3, #22
 801564c:	6003      	str	r3, [r0, #0]
 801564e:	f04f 30ff 	mov.w	r0, #4294967295
 8015652:	bd38      	pop	{r3, r4, r5, pc}
 8015654:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015656:	b112      	cbz	r2, 801565e <_raise_r+0x1e>
 8015658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801565c:	b94b      	cbnz	r3, 8015672 <_raise_r+0x32>
 801565e:	4620      	mov	r0, r4
 8015660:	f000 f830 	bl	80156c4 <_getpid_r>
 8015664:	462a      	mov	r2, r5
 8015666:	4601      	mov	r1, r0
 8015668:	4620      	mov	r0, r4
 801566a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801566e:	f000 b817 	b.w	80156a0 <_kill_r>
 8015672:	2b01      	cmp	r3, #1
 8015674:	d00a      	beq.n	801568c <_raise_r+0x4c>
 8015676:	1c59      	adds	r1, r3, #1
 8015678:	d103      	bne.n	8015682 <_raise_r+0x42>
 801567a:	2316      	movs	r3, #22
 801567c:	6003      	str	r3, [r0, #0]
 801567e:	2001      	movs	r0, #1
 8015680:	e7e7      	b.n	8015652 <_raise_r+0x12>
 8015682:	2400      	movs	r4, #0
 8015684:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015688:	4628      	mov	r0, r5
 801568a:	4798      	blx	r3
 801568c:	2000      	movs	r0, #0
 801568e:	e7e0      	b.n	8015652 <_raise_r+0x12>

08015690 <raise>:
 8015690:	4b02      	ldr	r3, [pc, #8]	; (801569c <raise+0xc>)
 8015692:	4601      	mov	r1, r0
 8015694:	6818      	ldr	r0, [r3, #0]
 8015696:	f7ff bfd3 	b.w	8015640 <_raise_r>
 801569a:	bf00      	nop
 801569c:	24000288 	.word	0x24000288

080156a0 <_kill_r>:
 80156a0:	b538      	push	{r3, r4, r5, lr}
 80156a2:	4d07      	ldr	r5, [pc, #28]	; (80156c0 <_kill_r+0x20>)
 80156a4:	2300      	movs	r3, #0
 80156a6:	4604      	mov	r4, r0
 80156a8:	4608      	mov	r0, r1
 80156aa:	4611      	mov	r1, r2
 80156ac:	602b      	str	r3, [r5, #0]
 80156ae:	f7eb fd89 	bl	80011c4 <_kill>
 80156b2:	1c43      	adds	r3, r0, #1
 80156b4:	d102      	bne.n	80156bc <_kill_r+0x1c>
 80156b6:	682b      	ldr	r3, [r5, #0]
 80156b8:	b103      	cbz	r3, 80156bc <_kill_r+0x1c>
 80156ba:	6023      	str	r3, [r4, #0]
 80156bc:	bd38      	pop	{r3, r4, r5, pc}
 80156be:	bf00      	nop
 80156c0:	24004260 	.word	0x24004260

080156c4 <_getpid_r>:
 80156c4:	f7eb bd76 	b.w	80011b4 <_getpid>

080156c8 <__sread>:
 80156c8:	b510      	push	{r4, lr}
 80156ca:	460c      	mov	r4, r1
 80156cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156d0:	f000 f894 	bl	80157fc <_read_r>
 80156d4:	2800      	cmp	r0, #0
 80156d6:	bfab      	itete	ge
 80156d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156da:	89a3      	ldrhlt	r3, [r4, #12]
 80156dc:	181b      	addge	r3, r3, r0
 80156de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80156e2:	bfac      	ite	ge
 80156e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80156e6:	81a3      	strhlt	r3, [r4, #12]
 80156e8:	bd10      	pop	{r4, pc}

080156ea <__swrite>:
 80156ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156ee:	461f      	mov	r7, r3
 80156f0:	898b      	ldrh	r3, [r1, #12]
 80156f2:	05db      	lsls	r3, r3, #23
 80156f4:	4605      	mov	r5, r0
 80156f6:	460c      	mov	r4, r1
 80156f8:	4616      	mov	r6, r2
 80156fa:	d505      	bpl.n	8015708 <__swrite+0x1e>
 80156fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015700:	2302      	movs	r3, #2
 8015702:	2200      	movs	r2, #0
 8015704:	f000 f868 	bl	80157d8 <_lseek_r>
 8015708:	89a3      	ldrh	r3, [r4, #12]
 801570a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801570e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015712:	81a3      	strh	r3, [r4, #12]
 8015714:	4632      	mov	r2, r6
 8015716:	463b      	mov	r3, r7
 8015718:	4628      	mov	r0, r5
 801571a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801571e:	f000 b817 	b.w	8015750 <_write_r>

08015722 <__sseek>:
 8015722:	b510      	push	{r4, lr}
 8015724:	460c      	mov	r4, r1
 8015726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801572a:	f000 f855 	bl	80157d8 <_lseek_r>
 801572e:	1c43      	adds	r3, r0, #1
 8015730:	89a3      	ldrh	r3, [r4, #12]
 8015732:	bf15      	itete	ne
 8015734:	6560      	strne	r0, [r4, #84]	; 0x54
 8015736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801573a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801573e:	81a3      	strheq	r3, [r4, #12]
 8015740:	bf18      	it	ne
 8015742:	81a3      	strhne	r3, [r4, #12]
 8015744:	bd10      	pop	{r4, pc}

08015746 <__sclose>:
 8015746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801574a:	f000 b813 	b.w	8015774 <_close_r>
	...

08015750 <_write_r>:
 8015750:	b538      	push	{r3, r4, r5, lr}
 8015752:	4d07      	ldr	r5, [pc, #28]	; (8015770 <_write_r+0x20>)
 8015754:	4604      	mov	r4, r0
 8015756:	4608      	mov	r0, r1
 8015758:	4611      	mov	r1, r2
 801575a:	2200      	movs	r2, #0
 801575c:	602a      	str	r2, [r5, #0]
 801575e:	461a      	mov	r2, r3
 8015760:	f7eb fd67 	bl	8001232 <_write>
 8015764:	1c43      	adds	r3, r0, #1
 8015766:	d102      	bne.n	801576e <_write_r+0x1e>
 8015768:	682b      	ldr	r3, [r5, #0]
 801576a:	b103      	cbz	r3, 801576e <_write_r+0x1e>
 801576c:	6023      	str	r3, [r4, #0]
 801576e:	bd38      	pop	{r3, r4, r5, pc}
 8015770:	24004260 	.word	0x24004260

08015774 <_close_r>:
 8015774:	b538      	push	{r3, r4, r5, lr}
 8015776:	4d06      	ldr	r5, [pc, #24]	; (8015790 <_close_r+0x1c>)
 8015778:	2300      	movs	r3, #0
 801577a:	4604      	mov	r4, r0
 801577c:	4608      	mov	r0, r1
 801577e:	602b      	str	r3, [r5, #0]
 8015780:	f7eb fd73 	bl	800126a <_close>
 8015784:	1c43      	adds	r3, r0, #1
 8015786:	d102      	bne.n	801578e <_close_r+0x1a>
 8015788:	682b      	ldr	r3, [r5, #0]
 801578a:	b103      	cbz	r3, 801578e <_close_r+0x1a>
 801578c:	6023      	str	r3, [r4, #0]
 801578e:	bd38      	pop	{r3, r4, r5, pc}
 8015790:	24004260 	.word	0x24004260

08015794 <_fstat_r>:
 8015794:	b538      	push	{r3, r4, r5, lr}
 8015796:	4d07      	ldr	r5, [pc, #28]	; (80157b4 <_fstat_r+0x20>)
 8015798:	2300      	movs	r3, #0
 801579a:	4604      	mov	r4, r0
 801579c:	4608      	mov	r0, r1
 801579e:	4611      	mov	r1, r2
 80157a0:	602b      	str	r3, [r5, #0]
 80157a2:	f7eb fd6e 	bl	8001282 <_fstat>
 80157a6:	1c43      	adds	r3, r0, #1
 80157a8:	d102      	bne.n	80157b0 <_fstat_r+0x1c>
 80157aa:	682b      	ldr	r3, [r5, #0]
 80157ac:	b103      	cbz	r3, 80157b0 <_fstat_r+0x1c>
 80157ae:	6023      	str	r3, [r4, #0]
 80157b0:	bd38      	pop	{r3, r4, r5, pc}
 80157b2:	bf00      	nop
 80157b4:	24004260 	.word	0x24004260

080157b8 <_isatty_r>:
 80157b8:	b538      	push	{r3, r4, r5, lr}
 80157ba:	4d06      	ldr	r5, [pc, #24]	; (80157d4 <_isatty_r+0x1c>)
 80157bc:	2300      	movs	r3, #0
 80157be:	4604      	mov	r4, r0
 80157c0:	4608      	mov	r0, r1
 80157c2:	602b      	str	r3, [r5, #0]
 80157c4:	f7eb fd6d 	bl	80012a2 <_isatty>
 80157c8:	1c43      	adds	r3, r0, #1
 80157ca:	d102      	bne.n	80157d2 <_isatty_r+0x1a>
 80157cc:	682b      	ldr	r3, [r5, #0]
 80157ce:	b103      	cbz	r3, 80157d2 <_isatty_r+0x1a>
 80157d0:	6023      	str	r3, [r4, #0]
 80157d2:	bd38      	pop	{r3, r4, r5, pc}
 80157d4:	24004260 	.word	0x24004260

080157d8 <_lseek_r>:
 80157d8:	b538      	push	{r3, r4, r5, lr}
 80157da:	4d07      	ldr	r5, [pc, #28]	; (80157f8 <_lseek_r+0x20>)
 80157dc:	4604      	mov	r4, r0
 80157de:	4608      	mov	r0, r1
 80157e0:	4611      	mov	r1, r2
 80157e2:	2200      	movs	r2, #0
 80157e4:	602a      	str	r2, [r5, #0]
 80157e6:	461a      	mov	r2, r3
 80157e8:	f7eb fd66 	bl	80012b8 <_lseek>
 80157ec:	1c43      	adds	r3, r0, #1
 80157ee:	d102      	bne.n	80157f6 <_lseek_r+0x1e>
 80157f0:	682b      	ldr	r3, [r5, #0]
 80157f2:	b103      	cbz	r3, 80157f6 <_lseek_r+0x1e>
 80157f4:	6023      	str	r3, [r4, #0]
 80157f6:	bd38      	pop	{r3, r4, r5, pc}
 80157f8:	24004260 	.word	0x24004260

080157fc <_read_r>:
 80157fc:	b538      	push	{r3, r4, r5, lr}
 80157fe:	4d07      	ldr	r5, [pc, #28]	; (801581c <_read_r+0x20>)
 8015800:	4604      	mov	r4, r0
 8015802:	4608      	mov	r0, r1
 8015804:	4611      	mov	r1, r2
 8015806:	2200      	movs	r2, #0
 8015808:	602a      	str	r2, [r5, #0]
 801580a:	461a      	mov	r2, r3
 801580c:	f7eb fcf4 	bl	80011f8 <_read>
 8015810:	1c43      	adds	r3, r0, #1
 8015812:	d102      	bne.n	801581a <_read_r+0x1e>
 8015814:	682b      	ldr	r3, [r5, #0]
 8015816:	b103      	cbz	r3, 801581a <_read_r+0x1e>
 8015818:	6023      	str	r3, [r4, #0]
 801581a:	bd38      	pop	{r3, r4, r5, pc}
 801581c:	24004260 	.word	0x24004260

08015820 <_init>:
 8015820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015822:	bf00      	nop
 8015824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015826:	bc08      	pop	{r3}
 8015828:	469e      	mov	lr, r3
 801582a:	4770      	bx	lr

0801582c <_fini>:
 801582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582e:	bf00      	nop
 8015830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015832:	bc08      	pop	{r3}
 8015834:	469e      	mov	lr, r3
 8015836:	4770      	bx	lr
