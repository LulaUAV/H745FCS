
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b64  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08015e08  08015e08  00025e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016284  08016284  00030354  2**0
                  CONTENTS
  4 .ARM          00000008  08016284  08016284  00026284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801628c  0801628c  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801628c  0801628c  0002628c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016290  08016290  00026290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  24000000  08016294  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dcc  24000354  080165e8  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24004120  080165e8  00034120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000474b1  00000000  00000000  00030382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077ec  00000000  00000000  00077833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  0007f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f20  00000000  00000000  000811c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040f06  00000000  00000000  000830e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fcd3  00000000  00000000  000c3fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001904e8  00000000  00000000  000f3cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002841a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099ec  00000000  00000000  002841fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000354 	.word	0x24000354
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015dec 	.word	0x08015dec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000358 	.word	0x24000358
 80002dc:	08015dec 	.word	0x08015dec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_DMA_Init+0x7c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	4a1b      	ldr	r2, [pc, #108]	; (8000838 <MX_DMA_Init+0x7c>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_DMA_Init+0x7c>)
 80007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_DMA_Init+0x7c>)
 80007e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <MX_DMA_Init+0x7c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_DMA_Init+0x7c>)
 80007f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2010      	movs	r0, #16
 8000804:	f001 fc17 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000808:	2010      	movs	r0, #16
 800080a:	f001 fc2e 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2011      	movs	r0, #17
 8000814:	f001 fc0f 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000818:	2011      	movs	r0, #17
 800081a:	f001 fc26 	bl	800206a <HAL_NVIC_EnableIRQ>

  /* DMA2_Steam1 Interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2039      	movs	r0, #57	; 0x39
 8000824:	f001 fc07 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000828:	2039      	movs	r0, #57	; 0x39
 800082a:	f001 fc1e 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	58024400 	.word	0x58024400

0800083c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b37      	ldr	r3, [pc, #220]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	4a35      	ldr	r2, [pc, #212]	; (8000920 <MX_GPIO_Init+0xe4>)
 800084a:	f043 0320 	orr.w	r3, r3, #32
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000852:	4b33      	ldr	r3, [pc, #204]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	61fb      	str	r3, [r7, #28]
 800085e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000860:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b28      	ldr	r3, [pc, #160]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	4a26      	ldr	r2, [pc, #152]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089c:	4b20      	ldr	r3, [pc, #128]	; (8000920 <MX_GPIO_Init+0xe4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a17      	ldr	r2, [pc, #92]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008c2:	f043 0302 	orr.w	r3, r3, #2
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0302 	and.w	r3, r3, #2
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <MX_GPIO_Init+0xe4>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_GPIO_Init+0xe4>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  // Set LED Ports
  GPIO_Port_Config();
 8000914:	f000 f806 	bl	8000924 <GPIO_Port_Config>

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	58024400 	.word	0x58024400

08000924 <GPIO_Port_Config>:

/* USER CODE BEGIN 2 */
void GPIO_Port_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  // Configure GPIO Pin Output Level:
  //LEDS
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	4827      	ldr	r0, [pc, #156]	; (80009dc <GPIO_Port_Config+0xb8>)
 800093e:	f004 f80d 	bl	800495c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4821      	ldr	r0, [pc, #132]	; (80009dc <GPIO_Port_Config+0xb8>)
 8000958:	f003 fe50 	bl	80045fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <GPIO_Port_Config+0xb8>)
 8000964:	f003 fffa 	bl	800495c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4817      	ldr	r0, [pc, #92]	; (80009dc <GPIO_Port_Config+0xb8>)
 8000980:	f003 fe3c 	bl	80045fc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	4815      	ldr	r0, [pc, #84]	; (80009e0 <GPIO_Port_Config+0xbc>)
 800098c:	f003 ffe6 	bl	800495c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 8000990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <GPIO_Port_Config+0xbc>)
 80009a8:	f003 fe28 	bl	80045fc <HAL_GPIO_Init>


  HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <GPIO_Port_Config+0xbc>)
 80009b4:	f003 ffd2 	bl	800495c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 80009b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <GPIO_Port_Config+0xbc>)
 80009d0:	f003 fe14 	bl	80045fc <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58021000 	.word	0x58021000
 80009e0:	58021400 	.word	0x58021400

080009e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_I2C2_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009f0:	4a1b      	ldr	r2, [pc, #108]	; (8000a60 <MX_I2C2_Init+0x7c>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_I2C2_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a20:	f003 ffe4 	bl	80049ec <HAL_I2C_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a2a:	f000 fa17 	bl	8000e5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a32:	f004 fef0 	bl	8005816 <HAL_I2CEx_ConfigAnalogFilter>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a3c:	f000 fa0e 	bl	8000e5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_I2C2_Init+0x74>)
 8000a44:	f004 ff32 	bl	80058ac <HAL_I2CEx_ConfigDigitalFilter>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f000 fa05 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000394 	.word	0x24000394
 8000a5c:	40005800 	.word	0x40005800
 8000a60:	307075b1 	.word	0x307075b1

08000a64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0b8      	sub	sp, #224	; 0xe0
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	22bc      	movs	r2, #188	; 0xbc
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f012 fd71 	bl	801356c <memset>
  if(i2cHandle->Instance==I2C2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2d      	ldr	r2, [pc, #180]	; (8000b44 <HAL_I2C_MspInit+0xe0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d152      	bne.n	8000b3a <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a94:	2308      	movs	r3, #8
 8000a96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f007 f972 	bl	8007d8c <HAL_RCCEx_PeriphCLKConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aae:	f000 f9d5 	bl	8000e5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <HAL_I2C_MspInit+0xe4>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <HAL_I2C_MspInit+0xe4>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <HAL_I2C_MspInit+0xe4>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ad0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad8:	2312      	movs	r3, #18
 8000ada:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aea:	2304      	movs	r3, #4
 8000aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000af4:	4619      	mov	r1, r3
 8000af6:	4815      	ldr	r0, [pc, #84]	; (8000b4c <HAL_I2C_MspInit+0xe8>)
 8000af8:	f003 fd80 	bl	80045fc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_I2C_MspInit+0xe4>)
 8000afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b02:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_I2C_MspInit+0xe4>)
 8000b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_I2C_MspInit+0xe4>)
 8000b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2021      	movs	r0, #33	; 0x21
 8000b20:	f001 fa89 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b24:	2021      	movs	r0, #33	; 0x21
 8000b26:	f001 faa0 	bl	800206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2022      	movs	r0, #34	; 0x22
 8000b30:	f001 fa81 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000b34:	2022      	movs	r0, #34	; 0x22
 8000b36:	f001 fa98 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	37e0      	adds	r7, #224	; 0xe0
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40005800 	.word	0x40005800
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	58020400 	.word	0x58020400

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b56:	f000 f93b 	bl	8000dd0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b5a:	4b55      	ldr	r3, [pc, #340]	; (8000cb0 <main+0x160>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d11b      	bne.n	8000b9e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b66:	f3bf 8f4f 	dsb	sy
}
 8000b6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b6c:	f3bf 8f6f 	isb	sy
}
 8000b70:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b72:	4b4f      	ldr	r3, [pc, #316]	; (8000cb0 <main+0x160>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7a:	f3bf 8f4f 	dsb	sy
}
 8000b7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b80:	f3bf 8f6f 	isb	sy
}
 8000b84:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b86:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <main+0x160>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a49      	ldr	r2, [pc, #292]	; (8000cb0 <main+0x160>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b92:	f3bf 8f4f 	dsb	sy
}
 8000b96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b98:	f3bf 8f6f 	isb	sy
}
 8000b9c:	e000      	b.n	8000ba0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b9e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ba0:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <main+0x160>)
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d138      	bne.n	8000c1e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bac:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <main+0x160>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb4:	f3bf 8f4f 	dsb	sy
}
 8000bb8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <main+0x160>)
 8000bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bc0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	0b5b      	lsrs	r3, r3, #13
 8000bc6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bca:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bd4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	015a      	lsls	r2, r3, #5
 8000bda:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000bde:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000be4:	4932      	ldr	r1, [pc, #200]	; (8000cb0 <main+0x160>)
 8000be6:	4313      	orrs	r3, r2
 8000be8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1e5a      	subs	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1ef      	bne.n	8000bd6 <main+0x86>
    } while(sets-- != 0U);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	1e5a      	subs	r2, r3, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1e5      	bne.n	8000bcc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c00:	f3bf 8f4f 	dsb	sy
}
 8000c04:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <main+0x160>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <main+0x160>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c12:	f3bf 8f4f 	dsb	sy
}
 8000c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c18:	f3bf 8f6f 	isb	sy
}
 8000c1c:	e000      	b.n	8000c20 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c1e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c24:	617b      	str	r3, [r7, #20]
  //while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f001 f869 	bl	8001cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f849 	bl	8000cc0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <main+0x164>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <main+0x164>)
 8000c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <main+0x164>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f003 fe9f 	bl	8004990 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2000      	movs	r0, #0
 8000c56:	f003 feb5 	bl	80049c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000c60:	bf00      	nop
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <main+0x164>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d104      	bne.n	8000c78 <main+0x128>
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	1e5a      	subs	r2, r3, #1
 8000c72:	617a      	str	r2, [r7, #20]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dcf4      	bgt.n	8000c62 <main+0x112>
if ( timeout < 0 )
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	da01      	bge.n	8000c82 <main+0x132>
{
Error_Handler();
 8000c7e:	f000 f8ed 	bl	8000e5c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c82:	f7ff fddb 	bl	800083c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c86:	f7ff fd99 	bl	80007bc <MX_DMA_Init>
  MX_I2C2_Init();
 8000c8a:	f7ff feab 	bl	80009e4 <MX_I2C2_Init>
 // MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8000c8e:	f000 fc79 	bl	8001584 <MX_TIM1_Init>
  MX_UART4_Init();
 8000c92:	f000 fe1f 	bl	80018d4 <MX_UART4_Init>
  MX_FATFS_Init();
 8000c96:	f010 f809 	bl	8010cac <MX_FATFS_Init>
  MX_UART7_Init();
 8000c9a:	f000 fe63 	bl	8001964 <MX_UART7_Init>
  MX_USB_DEVICE_Init();
 8000c9e:	f011 febb 	bl	8012a18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //__HAL_UART_ENABLE_IT(&huart4, UART_IT_IDLE);
  //HAL_UART_Receive_DMA(&huart4, buf, 25);
  HAL_UART_Receive_IT(&huart4, buf, 25);
 8000ca2:	2219      	movs	r2, #25
 8000ca4:	4904      	ldr	r1, [pc, #16]	; (8000cb8 <main+0x168>)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <main+0x16c>)
 8000ca8:	f00b ffb8 	bl	800cc1c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */
// char txBuf[8];
// uint8_t count = 1;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <main+0x15c>
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	2400043c 	.word	0x2400043c
 8000cbc:	24000730 	.word	0x24000730

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b09c      	sub	sp, #112	; 0x70
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	224c      	movs	r2, #76	; 0x4c
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f012 fc4c 	bl	801356c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f012 fc46 	bl	801356c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f006 f80b 	bl	8006cfc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <SystemClock_Config+0x104>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a35      	ldr	r2, [pc, #212]	; (8000dc4 <SystemClock_Config+0x104>)
 8000cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <SystemClock_Config+0x104>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <SystemClock_Config+0x108>)
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	4a30      	ldr	r2, [pc, #192]	; (8000dc8 <SystemClock_Config+0x108>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <SystemClock_Config+0x108>)
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d18:	bf00      	nop
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <SystemClock_Config+0x104>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d26:	d1f8      	bne.n	8000d1a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <SystemClock_Config+0x10c>)
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	f023 0303 	bic.w	r3, r3, #3
 8000d30:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <SystemClock_Config+0x10c>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d38:	2321      	movs	r3, #33	; 0x21
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d42:	2301      	movs	r3, #1
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d46:	2302      	movs	r3, #2
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d52:	233c      	movs	r3, #60	; 0x3c
 8000d54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d62:	230c      	movs	r3, #12
 8000d64:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 f82c 	bl	8006dd0 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d7e:	f000 f86d 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	233f      	movs	r3, #63	; 0x3f
 8000d84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2303      	movs	r3, #3
 8000d88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d8e:	2308      	movs	r3, #8
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d92:	2340      	movs	r3, #64	; 0x40
 8000d94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000da0:	2340      	movs	r3, #64	; 0x40
 8000da2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2104      	movs	r1, #4
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fc21 	bl	80075f0 <HAL_RCC_ClockConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000db4:	f000 f852 	bl	8000e5c <Error_Handler>
  }

  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000db8:	f005 fffa 	bl	8006db0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000dbc:	bf00      	nop
 8000dbe:	3770      	adds	r7, #112	; 0x70
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024800 	.word	0x58024800
 8000dc8:	58000400 	.word	0x58000400
 8000dcc:	58024400 	.word	0x58024400

08000dd0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000de2:	f001 f95d 	bl	80020a0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x24000000;
 8000dee:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000df2:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000df4:	2312      	movs	r3, #18
 8000df6:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e00:	2303      	movs	r3, #3
 8000e02:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e14:	463b      	mov	r3, r7
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 f97a 	bl	8002110 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x38000000;
 8000e20:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000e24:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000e26:	230f      	movs	r3, #15
 8000e28:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e32:	2303      	movs	r3, #3
 8000e34:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e46:	463b      	mov	r3, r7
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 f961 	bl	8002110 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e4e:	2004      	movs	r0, #4
 8000e50:	f001 f93e 	bl	80020d0 <HAL_MPU_Enable>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  if (buf[0] == 0x0F)
 8000e70:	4b94      	ldr	r3, [pc, #592]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	f040 8158 	bne.w	800112a <HAL_UART_RxCpltCallback+0x2c2>
  {
    CH[0] = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 8000e7a:	4b92      	ldr	r3, [pc, #584]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000e7c:	785b      	ldrb	r3, [r3, #1]
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	4b90      	ldr	r3, [pc, #576]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b8c      	ldr	r3, [pc, #560]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000e96:	801a      	strh	r2, [r3, #0]
    CH[1] = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 8000e98:	4b8a      	ldr	r3, [pc, #552]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000e9a:	789b      	ldrb	r3, [r3, #2]
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000ea4:	78db      	ldrb	r3, [r3, #3]
 8000ea6:	015b      	lsls	r3, r3, #5
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b84      	ldr	r3, [pc, #528]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000eb8:	805a      	strh	r2, [r3, #2]
    CH[2] = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 8000eba:	4b82      	ldr	r3, [pc, #520]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000ebc:	78db      	ldrb	r3, [r3, #3]
 8000ebe:	099b      	lsrs	r3, r3, #6
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	4b7f      	ldr	r3, [pc, #508]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000ec6:	791b      	ldrb	r3, [r3, #4]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	4b7c      	ldr	r3, [pc, #496]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000ed2:	795b      	ldrb	r3, [r3, #5]
 8000ed4:	029b      	lsls	r3, r3, #10
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b78      	ldr	r3, [pc, #480]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000ee6:	809a      	strh	r2, [r3, #4]
    CH[3] = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 8000ee8:	4b76      	ldr	r3, [pc, #472]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000eea:	795b      	ldrb	r3, [r3, #5]
 8000eec:	085b      	lsrs	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b74      	ldr	r3, [pc, #464]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000ef4:	799b      	ldrb	r3, [r3, #6]
 8000ef6:	01db      	lsls	r3, r3, #7
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000f08:	80da      	strh	r2, [r3, #6]
    CH[4] = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 8000f0a:	4b6e      	ldr	r3, [pc, #440]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b6b      	ldr	r3, [pc, #428]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f16:	79db      	ldrb	r3, [r3, #7]
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000f2a:	811a      	strh	r2, [r3, #8]
    CH[5] = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 8000f2c:	4b65      	ldr	r3, [pc, #404]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f2e:	79db      	ldrb	r3, [r3, #7]
 8000f30:	09db      	lsrs	r3, r3, #7
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f38:	7a1b      	ldrb	r3, [r3, #8]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	4b60      	ldr	r3, [pc, #384]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f44:	7a5b      	ldrb	r3, [r3, #9]
 8000f46:	025b      	lsls	r3, r3, #9
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b5c      	ldr	r3, [pc, #368]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000f58:	815a      	strh	r2, [r3, #10]
    CH[6] = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f5c:	7a5b      	ldrb	r3, [r3, #9]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	4b57      	ldr	r3, [pc, #348]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f66:	7a9b      	ldrb	r3, [r3, #10]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000f7a:	819a      	strh	r2, [r3, #12]
    CH[7] = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 8000f7c:	4b51      	ldr	r3, [pc, #324]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f7e:	7a9b      	ldrb	r3, [r3, #10]
 8000f80:	095b      	lsrs	r3, r3, #5
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b4f      	ldr	r3, [pc, #316]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000f88:	7adb      	ldrb	r3, [r3, #11]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	b21b      	sxth	r3, r3
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b4b      	ldr	r3, [pc, #300]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000f9c:	81da      	strh	r2, [r3, #14]
    CH[8] = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 8000f9e:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000fa0:	7b1b      	ldrb	r3, [r3, #12]
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000fa6:	7b5b      	ldrb	r3, [r3, #13]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000fba:	821a      	strh	r2, [r3, #16]
    CH[9] = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 8000fbc:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000fbe:	7b5b      	ldrb	r3, [r3, #13]
 8000fc0:	08db      	lsrs	r3, r3, #3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000fc8:	7b9b      	ldrb	r3, [r3, #14]
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 8000fdc:	825a      	strh	r2, [r3, #18]
    CH[10] = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 8000fde:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000fe0:	7b9b      	ldrb	r3, [r3, #14]
 8000fe2:	099b      	lsrs	r3, r3, #6
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000fea:	7bdb      	ldrb	r3, [r3, #15]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8000ff6:	7c1b      	ldrb	r3, [r3, #16]
 8000ff8:	029b      	lsls	r3, r3, #10
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 800100a:	829a      	strh	r2, [r3, #20]
    CH[11] = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 800100e:	7c1b      	ldrb	r3, [r3, #16]
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8001018:	7c5b      	ldrb	r3, [r3, #17]
 800101a:	01db      	lsls	r3, r3, #7
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 800102c:	82da      	strh	r2, [r3, #22]
    CH[12] = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8001030:	7c5b      	ldrb	r3, [r3, #17]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	b2db      	uxtb	r3, r3
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 800103a:	7c9b      	ldrb	r3, [r3, #18]
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 800104e:	831a      	strh	r2, [r3, #24]
    CH[13] = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8001052:	7c9b      	ldrb	r3, [r3, #18]
 8001054:	09db      	lsrs	r3, r3, #7
 8001056:	b2db      	uxtb	r3, r3
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 800105c:	7cdb      	ldrb	r3, [r3, #19]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8001068:	7d1b      	ldrb	r3, [r3, #20]
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 800107c:	835a      	strh	r2, [r3, #26]
    CH[14] = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 8001080:	7d1b      	ldrb	r3, [r3, #20]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	b2db      	uxtb	r3, r3
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 800108a:	7d5b      	ldrb	r3, [r3, #21]
 800108c:	019b      	lsls	r3, r3, #6
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21b      	sxth	r3, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 800109e:	839a      	strh	r2, [r3, #28]
    CH[15] = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 80010a2:	7d5b      	ldrb	r3, [r3, #21]
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_UART_RxCpltCallback+0x25c>)
 80010ac:	7d9b      	ldrb	r3, [r3, #22]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <HAL_UART_RxCpltCallback+0x260>)
 80010c0:	83da      	strh	r2, [r3, #30]
 80010c2:	e003      	b.n	80010cc <HAL_UART_RxCpltCallback+0x264>
 80010c4:	2400043c 	.word	0x2400043c
 80010c8:	240003e0 	.word	0x240003e0

    if (buf[23] & (1 << 0))
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_UART_RxCpltCallback+0x2d0>)
 80010ce:	7ddb      	ldrb	r3, [r3, #23]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_UART_RxCpltCallback+0x278>
    {
      CH[16] = 1;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_UART_RxCpltCallback+0x2d4>)
 80010da:	2201      	movs	r2, #1
 80010dc:	841a      	strh	r2, [r3, #32]
 80010de:	e002      	b.n	80010e6 <HAL_UART_RxCpltCallback+0x27e>
    }
    else
    {
      CH[16] = 0;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_UART_RxCpltCallback+0x2d4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	841a      	strh	r2, [r3, #32]
    }

    if (buf[23] & (1 << 1))
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_UART_RxCpltCallback+0x2d0>)
 80010e8:	7ddb      	ldrb	r3, [r3, #23]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_UART_RxCpltCallback+0x292>
    {
      CH[17] = 1;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_UART_RxCpltCallback+0x2d4>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	845a      	strh	r2, [r3, #34]	; 0x22
 80010f8:	e002      	b.n	8001100 <HAL_UART_RxCpltCallback+0x298>
    }
    else
    {
      CH[17] = 0;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_UART_RxCpltCallback+0x2d4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	845a      	strh	r2, [r3, #34]	; 0x22
    }

    // Failsafe
    failsafe_status = SBUS_SIGNAL_OK;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_UART_RxCpltCallback+0x2d8>)
 8001102:	2200      	movs	r2, #0
 8001104:	801a      	strh	r2, [r3, #0]
    if (buf[23] & (1 << 2))
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_UART_RxCpltCallback+0x2d0>)
 8001108:	7ddb      	ldrb	r3, [r3, #23]
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <HAL_UART_RxCpltCallback+0x2b0>
    {
      failsafe_status = SBUS_SIGNAL_LOST;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_UART_RxCpltCallback+0x2d8>)
 8001114:	2201      	movs	r2, #1
 8001116:	801a      	strh	r2, [r3, #0]
    }

    if (buf[23] & (1 << 3))
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_UART_RxCpltCallback+0x2d0>)
 800111a:	7ddb      	ldrb	r3, [r3, #23]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_UART_RxCpltCallback+0x2c2>
    {
      failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_UART_RxCpltCallback+0x2d8>)
 8001126:	2203      	movs	r2, #3
 8001128:	801a      	strh	r2, [r3, #0]
    }

    //  SBUS_footer=buf[24];

  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2400043c 	.word	0x2400043c
 800113c:	240003e0 	.word	0x240003e0
 8001140:	24000404 	.word	0x24000404

08001144 <HAL_SD_MspInit>:
  /* USER CODE END SDMMC1_Init 2 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0ba      	sub	sp, #232	; 0xe8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f107 0318 	add.w	r3, r7, #24
 8001160:	22bc      	movs	r2, #188	; 0xbc
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f012 fa01 	bl	801356c <memset>
  if(sdHandle->Instance==SDMMC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a3b      	ldr	r2, [pc, #236]	; (800125c <HAL_SD_MspInit+0x118>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d16e      	bne.n	8001252 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001178:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800117a:	2300      	movs	r3, #0
 800117c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	4618      	mov	r0, r3
 8001184:	f006 fe02 	bl	8007d8c <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 800118e:	f7ff fe65 	bl	8000e5c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <HAL_SD_MspInit+0x11c>)
 8001194:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001198:	4a31      	ldr	r2, [pc, #196]	; (8001260 <HAL_SD_MspInit+0x11c>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_SD_MspInit+0x11c>)
 80011a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_SD_MspInit+0x11c>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <HAL_SD_MspInit+0x11c>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <HAL_SD_MspInit+0x11c>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_SD_MspInit+0x11c>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <HAL_SD_MspInit+0x11c>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_SD_MspInit+0x11c>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001206:	230c      	movs	r3, #12
 8001208:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001210:	4619      	mov	r1, r3
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <HAL_SD_MspInit+0x120>)
 8001214:	f003 f9f2 	bl	80045fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001218:	2304      	movs	r3, #4
 800121a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001230:	230c      	movs	r3, #12
 8001232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800123a:	4619      	mov	r1, r3
 800123c:	480a      	ldr	r0, [pc, #40]	; (8001268 <HAL_SD_MspInit+0x124>)
 800123e:	f003 f9dd 	bl	80045fc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2031      	movs	r0, #49	; 0x31
 8001248:	f000 fef5 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800124c:	2031      	movs	r0, #49	; 0x31
 800124e:	f000 ff0c 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	37e8      	adds	r7, #232	; 0xe8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	52007000 	.word	0x52007000
 8001260:	58024400 	.word	0x58024400
 8001264:	58020800 	.word	0x58020800
 8001268:	58020c00 	.word	0x58020c00

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_MspInit+0x30>)
 8001274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x30>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x30>)
 8001284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	58024400 	.word	0x58024400

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 fd78 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <DMA2_Stream1_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/

void DMA2_Stream1_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <DMA2_Stream1_IRQHandler+0x10>)
 80012fa:	f002 f80b 	bl	8003314 <HAL_DMA_IRQHandler>
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	24000538 	.word	0x24000538

08001308 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <DMA1_Stream5_IRQHandler+0x10>)
 800130e:	f002 f801 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	240006b8 	.word	0x240006b8

0800131c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <DMA1_Stream6_IRQHandler+0x10>)
 8001322:	f001 fff7 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	24000640 	.word	0x24000640

08001330 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM1_BRK_IRQHandler+0x10>)
 8001336:	f00a fba1 	bl	800ba7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	240004ec 	.word	0x240004ec

08001344 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM1_UP_IRQHandler+0x10>)
 800134a:	f00a fb97 	bl	800ba7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	240004ec 	.word	0x240004ec

08001358 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM1_TRG_COM_IRQHandler+0x10>)
 800135e:	f00a fb8d 	bl	800ba7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	240004ec 	.word	0x240004ec

0800136c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM1_CC_IRQHandler+0x10>)
 8001372:	f00a fb83 	bl	800ba7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	240004ec 	.word	0x240004ec

08001380 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <I2C2_EV_IRQHandler+0x10>)
 8001386:	f003 fbc1 	bl	8004b0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24000394 	.word	0x24000394

08001394 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <I2C2_ER_IRQHandler+0x10>)
 800139a:	f003 fbd1 	bl	8004b40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000394 	.word	0x24000394

080013a8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <SDMMC1_IRQHandler+0x10>)
 80013ae:	f009 f8db 	bl	800a568 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000470 	.word	0x24000470

080013bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <UART4_IRQHandler+0x10>)
 80013c2:	f00b fc71 	bl	800cca8 <HAL_UART_IRQHandler>
//
//      break;
//    }
//  }
  /* USER CODE END UART4_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000730 	.word	0x24000730

080013d0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <UART7_IRQHandler+0x10>)
 80013d6:	f00b fc67 	bl	800cca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	240005b0 	.word	0x240005b0

080013e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <OTG_FS_IRQHandler+0x10>)
 80013ea:	f004 fc02 	bl	8005bf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24003d08 	.word	0x24003d08

080013f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_kill>:

int _kill(int pid, int sig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001412:	f012 f871 	bl	80134f8 <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2216      	movs	r2, #22
 800141a:	601a      	str	r2, [r3, #0]
	return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_exit>:

void _exit (int status)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffe7 	bl	8001408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800143a:	e7fe      	b.n	800143a <_exit+0x12>

0800143c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	605a      	str	r2, [r3, #4]
	return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:

int _isatty(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f011 ffd6 	bl	80134f8 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	24040000 	.word	0x24040000
 8001578:	00004000 	.word	0x00004000
 800157c:	24000370 	.word	0x24000370
 8001580:	24004120 	.word	0x24004120

08001584 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0a4      	sub	sp, #144	; 0x90
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	222c      	movs	r2, #44	; 0x2c
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f011 ffd3 	bl	801356c <memset>
  RCC_ClkInitTypeDef clk_init_struct = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2220      	movs	r2, #32
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f011 ffcd 	bl	801356c <memset>


  /* USER CODE BEGIN TIM1_Init 1 */

  uint32_t latency = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  uint32_t timer_clock_frequency = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t timer_prescaler = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END TIM1_Init 1 */

  HAL_RCC_GetClockConfig(&clk_init_struct, &latency);
 80015e2:	463a      	mov	r2, r7
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 fb8d 	bl	8007d08 <HAL_RCC_GetClockConfig>

  if(clk_init_struct.APB1CLKDivider == RCC_HCLK_DIV1)
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d104      	bne.n	80015fe <MX_TIM1_Init+0x7a>
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq();
 80015f4:	f006 fb5c 	bl	8007cb0 <HAL_RCC_GetPCLK1Freq>
 80015f8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80015fc:	e005      	b.n	800160a <MX_TIM1_Init+0x86>
  }

  else
  {
    timer_clock_frequency = HAL_RCC_GetPCLK1Freq() * 2;
 80015fe:	f006 fb57 	bl	8007cb0 <HAL_RCC_GetPCLK1Freq>
 8001602:	4603      	mov	r3, r0
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  }

  timer_prescaler = (timer_clock_frequency / (TIMER_PRESCALER_MAX_VALUE * TIMER_FREQUENCY_RANGE_MIN)) +1;
 800160a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800160e:	4a5f      	ldr	r2, [pc, #380]	; (800178c <MX_TIM1_Init+0x208>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	0c9b      	lsrs	r3, r3, #18
 8001616:	3301      	adds	r3, #1
 8001618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  htim1.Instance = TIM1;
 800161c:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <MX_TIM1_Init+0x20c>)
 800161e:	4a5d      	ldr	r2, [pc, #372]	; (8001794 <MX_TIM1_Init+0x210>)
 8001620:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (timer_prescaler - 1);
 8001622:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001626:	3b01      	subs	r3, #1
 8001628:	4a59      	ldr	r2, [pc, #356]	; (8001790 <MX_TIM1_Init+0x20c>)
 800162a:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b58      	ldr	r3, [pc, #352]	; (8001790 <MX_TIM1_Init+0x20c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((timer_clock_frequency / (timer_prescaler * TIMER_FREQUENCY)) - 1);
 8001632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001636:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	3b01      	subs	r3, #1
 8001648:	4a51      	ldr	r2, [pc, #324]	; (8001790 <MX_TIM1_Init+0x20c>)
 800164a:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <MX_TIM1_Init+0x20c>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001652:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <MX_TIM1_Init+0x20c>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <MX_TIM1_Init+0x20c>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800165e:	484c      	ldr	r0, [pc, #304]	; (8001790 <MX_TIM1_Init+0x20c>)
 8001660:	f00a f954 	bl	800b90c <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800166a:	f7ff fbf7 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001674:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001678:	4619      	mov	r1, r3
 800167a:	4845      	ldr	r0, [pc, #276]	; (8001790 <MX_TIM1_Init+0x20c>)
 800167c:	f00a fc2e 	bl	800bedc <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001686:	f7ff fbe9 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800168a:	4841      	ldr	r0, [pc, #260]	; (8001790 <MX_TIM1_Init+0x20c>)
 800168c:	f00a f995 	bl	800b9ba <HAL_TIM_PWM_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001696:	f7ff fbe1 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	66fb      	str	r3, [r7, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	673b      	str	r3, [r7, #112]	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016aa:	4619      	mov	r1, r3
 80016ac:	4838      	ldr	r0, [pc, #224]	; (8001790 <MX_TIM1_Init+0x20c>)
 80016ae:	f00b f941 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80016b8:	f7ff fbd0 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016bc:	2360      	movs	r3, #96	; 0x60
 80016be:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.Pulse = 50;
 80016c0:	2332      	movs	r3, #50	; 0x32
 80016c2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c4:	2300      	movs	r3, #0
 80016c6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	663b      	str	r3, [r7, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	667b      	str	r3, [r7, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	482b      	ldr	r0, [pc, #172]	; (8001790 <MX_TIM1_Init+0x20c>)
 80016e2:	f00a faeb 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 80016ec:	f7ff fbb6 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016f4:	2204      	movs	r2, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4825      	ldr	r0, [pc, #148]	; (8001790 <MX_TIM1_Init+0x20c>)
 80016fa:	f00a fadf 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001704:	f7ff fbaa 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001708:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800170c:	2208      	movs	r2, #8
 800170e:	4619      	mov	r1, r3
 8001710:	481f      	ldr	r0, [pc, #124]	; (8001790 <MX_TIM1_Init+0x20c>)
 8001712:	f00a fad3 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM1_Init+0x19c>
  {
    Error_Handler();
 800171c:	f7ff fb9e 	bl	8000e5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001720:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001724:	220c      	movs	r2, #12
 8001726:	4619      	mov	r1, r3
 8001728:	4819      	ldr	r0, [pc, #100]	; (8001790 <MX_TIM1_Init+0x20c>)
 800172a:	f00a fac7 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM1_Init+0x1b4>
  {
    Error_Handler();
 8001734:	f7ff fb92 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800174c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800175a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175e:	647b      	str	r3, [r7, #68]	; 0x44
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4808      	ldr	r0, [pc, #32]	; (8001790 <MX_TIM1_Init+0x20c>)
 8001770:	f00b f968 	bl	800ca44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM1_Init+0x1fa>
  {
    Error_Handler();
 800177a:	f7ff fb6f 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <MX_TIM1_Init+0x20c>)
 8001780:	f000 f84a 	bl	8001818 <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3790      	adds	r7, #144	; 0x90
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	66673335 	.word	0x66673335
 8001790:	240004ec 	.word	0x240004ec
 8001794:	40010000 	.word	0x40010000

08001798 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <HAL_TIM_Base_MspInit+0x78>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12e      	bne.n	8001808 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_TIM_Base_MspInit+0x7c>)
 80017ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_TIM_Base_MspInit+0x7c>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_TIM_Base_MspInit+0x7c>)
 80017bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2018      	movs	r0, #24
 80017ce:	f000 fc32 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80017d2:	2018      	movs	r0, #24
 80017d4:	f000 fc49 	bl	800206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2019      	movs	r0, #25
 80017de:	f000 fc2a 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80017e2:	2019      	movs	r0, #25
 80017e4:	f000 fc41 	bl	800206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	201a      	movs	r0, #26
 80017ee:	f000 fc22 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80017f2:	201a      	movs	r0, #26
 80017f4:	f000 fc39 	bl	800206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	201b      	movs	r0, #27
 80017fe:	f000 fc1a 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001802:	201b      	movs	r0, #27
 8001804:	f000 fc31 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010000 	.word	0x40010000
 8001814:	58024400 	.word	0x58024400

08001818 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_TIM_MspPostInit+0xac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d13f      	bne.n	80018ba <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185e:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_TIM_MspPostInit+0xb0>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001876:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800187a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001888:	2301      	movs	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <HAL_TIM_MspPostInit+0xb4>)
 8001894:	f002 feb2 	bl	80045fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_TIM_MspPostInit+0xb8>)
 80018b6:	f002 fea1 	bl	80045fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40010000 	.word	0x40010000
 80018c8:	58024400 	.word	0x58024400
 80018cc:	58021000 	.word	0x58021000
 80018d0:	58020000 	.word	0x58020000

080018d4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;
DMA_HandleTypeDef hdma_uart4_rx;
/* UART4 init function */
void MX_UART4_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <MX_UART4_Init+0x84>)
 80018da:	4a20      	ldr	r2, [pc, #128]	; (800195c <MX_UART4_Init+0x88>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <MX_UART4_Init+0x84>)
 80018e0:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <MX_UART4_Init+0x8c>)
 80018e2:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80018e4:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <MX_UART4_Init+0x84>)
 80018e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <MX_UART4_Init+0x84>)
 80018ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <MX_UART4_Init+0x84>)
 80018f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_RX;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_UART4_Init+0x84>)
 80018fe:	2204      	movs	r2, #4
 8001900:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <MX_UART4_Init+0x84>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <MX_UART4_Init+0x84>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_UART4_Init+0x84>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <MX_UART4_Init+0x84>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_UART4_Init+0x84>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <MX_UART4_Init+0x84>)
 8001922:	f00b f92b 	bl	800cb7c <HAL_UART_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 800192c:	f7ff fa96 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <MX_UART4_Init+0x84>)
 8001934:	f00c fff1 	bl	800e91a <HAL_UARTEx_SetRxFifoThreshold>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800193e:	f7ff fa8d 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_UART4_Init+0x84>)
 8001944:	f00c ff72 	bl	800e82c <HAL_UARTEx_DisableFifoMode>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 800194e:	f7ff fa85 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	24000730 	.word	0x24000730
 800195c:	40004c00 	.word	0x40004c00
 8001960:	000186a0 	.word	0x000186a0

08001964 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <MX_UART7_Init+0x90>)
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <MX_UART7_Init+0x94>)
 800196c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <MX_UART7_Init+0x90>)
 8001970:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001974:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <MX_UART7_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <MX_UART7_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <MX_UART7_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <MX_UART7_Init+0x90>)
 800198a:	220c      	movs	r2, #12
 800198c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <MX_UART7_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_UART7_Init+0x90>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_UART7_Init+0x90>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_UART7_Init+0x90>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <MX_UART7_Init+0x90>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <MX_UART7_Init+0x90>)
 80019ae:	f00b f8e5 	bl	800cb7c <HAL_UART_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80019b8:	f7ff fa50 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <MX_UART7_Init+0x90>)
 80019c0:	f00c ff6d 	bl	800e89e <HAL_UARTEx_SetTxFifoThreshold>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80019ca:	f7ff fa47 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4808      	ldr	r0, [pc, #32]	; (80019f4 <MX_UART7_Init+0x90>)
 80019d2:	f00c ffa2 	bl	800e91a <HAL_UARTEx_SetRxFifoThreshold>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80019dc:	f7ff fa3e 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_UART7_Init+0x90>)
 80019e2:	f00c ff23 	bl	800e82c <HAL_UARTEx_DisableFifoMode>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80019ec:	f7ff fa36 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	240005b0 	.word	0x240005b0
 80019f8:	40007800 	.word	0x40007800

080019fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ba      	sub	sp, #232	; 0xe8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	22bc      	movs	r2, #188	; 0xbc
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f011 fda5 	bl	801356c <memset>
  if(uartHandle->Instance==UART4)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a95      	ldr	r2, [pc, #596]	; (8001c7c <HAL_UART_MspInit+0x280>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d179      	bne.n	8001b20 <HAL_UART_MspInit+0x124>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a36:	f107 0318 	add.w	r3, r7, #24
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 f9a6 	bl	8007d8c <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a46:	f7ff fa09 	bl	8000e5c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a4a:	4b8d      	ldr	r3, [pc, #564]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a50:	4a8b      	ldr	r2, [pc, #556]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001a52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a5a:	4b89      	ldr	r3, [pc, #548]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b85      	ldr	r3, [pc, #532]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	4a84      	ldr	r2, [pc, #528]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a78:	4b81      	ldr	r3, [pc, #516]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a86:	2303      	movs	r3, #3
 8001a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4876      	ldr	r0, [pc, #472]	; (8001c84 <HAL_UART_MspInit+0x288>)
 8001aac:	f002 fda6 	bl	80045fc <HAL_GPIO_Init>

    /*UART4 RX Init
     *
     */

    hdma_uart4_rx.Instance = DMA2_Stream1;
 8001ab0:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001ab2:	4a76      	ldr	r2, [pc, #472]	; (8001c8c <HAL_UART_MspInit+0x290>)
 8001ab4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001ab6:	4b74      	ldr	r3, [pc, #464]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001ab8:	223f      	movs	r2, #63	; 0x3f
 8001aba:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abc:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac2:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac8:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ace:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad0:	4b6d      	ldr	r3, [pc, #436]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad6:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001adc:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001af2:	4865      	ldr	r0, [pc, #404]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001af4:	f000 fb50 	bl	8002198 <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001afe:	f7ff f9ad 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle, hdmarx, hdma_uart4_rx);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001b06:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b08:	4a5f      	ldr	r2, [pc, #380]	; (8001c88 <HAL_UART_MspInit+0x28c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	; 0x38
    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2034      	movs	r0, #52	; 0x34
 8001b14:	f000 fa8f 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001b18:	2034      	movs	r0, #52	; 0x34
 8001b1a:	f000 faa6 	bl	800206a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8001b1e:	e0a9      	b.n	8001c74 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==UART7)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <HAL_UART_MspInit+0x294>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	f040 80a4 	bne.w	8001c74 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b36:	f107 0318 	add.w	r3, r7, #24
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f006 f926 	bl	8007d8c <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001b46:	f7ff f989 	bl	8000e5c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001b4a:	4b4d      	ldr	r3, [pc, #308]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b50:	4a4b      	ldr	r2, [pc, #300]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001b52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b5a:	4b49      	ldr	r3, [pc, #292]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b68:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	4a44      	ldr	r2, [pc, #272]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b78:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_UART_MspInit+0x284>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b86:	23c0      	movs	r3, #192	; 0xc0
 8001b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ba4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	483a      	ldr	r0, [pc, #232]	; (8001c94 <HAL_UART_MspInit+0x298>)
 8001bac:	f002 fd26 	bl	80045fc <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bb2:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_UART_MspInit+0x2a0>)
 8001bb4:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bb8:	224f      	movs	r2, #79	; 0x4f
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001bdc:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001bee:	482a      	ldr	r0, [pc, #168]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001bf0:	f000 fad2 	bl	8002198 <HAL_DMA_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_UART_MspInit+0x202>
      Error_Handler();
 8001bfa:	f7ff f92f 	bl	8000e5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001c02:	67da      	str	r2, [r3, #124]	; 0x7c
 8001c04:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <HAL_UART_MspInit+0x29c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <HAL_UART_MspInit+0x2a8>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c12:	2250      	movs	r2, #80	; 0x50
 8001c14:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c18:	2240      	movs	r2, #64	; 0x40
 8001c1a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c22:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c28:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001c48:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c4a:	f000 faa5 	bl	8002198 <HAL_DMA_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001c54:	f7ff f902 	bl	8000e5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c5c:	679a      	str	r2, [r3, #120]	; 0x78
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0x2a4>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2052      	movs	r0, #82	; 0x52
 8001c6a:	f000 f9e4 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001c6e:	2052      	movs	r0, #82	; 0x52
 8001c70:	f000 f9fb 	bl	800206a <HAL_NVIC_EnableIRQ>
}
 8001c74:	bf00      	nop
 8001c76:	37e8      	adds	r7, #232	; 0xe8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40004c00 	.word	0x40004c00
 8001c80:	58024400 	.word	0x58024400
 8001c84:	58020000 	.word	0x58020000
 8001c88:	24000538 	.word	0x24000538
 8001c8c:	40020428 	.word	0x40020428
 8001c90:	40007800 	.word	0x40007800
 8001c94:	58021400 	.word	0x58021400
 8001c98:	240006b8 	.word	0x240006b8
 8001c9c:	40020088 	.word	0x40020088
 8001ca0:	24000640 	.word	0x24000640
 8001ca4:	400200a0 	.word	0x400200a0

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cac:	f7fe fcec 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	; (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f011 fc15 	bl	8013504 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7fe ff39 	bl	8000b50 <main>
  bx  lr
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001ce4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ce8:	24000354 	.word	0x24000354
  ldr r2, =_sidata
 8001cec:	08016294 	.word	0x08016294
  ldr r2, =_sbss
 8001cf0:	24000354 	.word	0x24000354
  ldr r4, =_ebss
 8001cf4:	24004120 	.word	0x24004120

08001cf8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC3_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d02:	2003      	movs	r0, #3
 8001d04:	f000 f98c 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d08:	f005 fe28 	bl	800795c <HAL_RCC_GetSysClockFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_Init+0x68>)
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	4913      	ldr	r1, [pc, #76]	; (8001d68 <HAL_Init+0x6c>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_Init+0x68>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_Init+0x6c>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	f003 031f 	and.w	r3, r3, #31
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_Init+0x70>)
 8001d3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d40:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_Init+0x74>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d46:	2000      	movs	r0, #0
 8001d48:	f000 f814 	bl	8001d74 <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e002      	b.n	8001d5c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d56:	f7ff fa89 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	58024400 	.word	0x58024400
 8001d68:	08015e50 	.word	0x08015e50
 8001d6c:	24000004 	.word	0x24000004
 8001d70:	24000000 	.word	0x24000000

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_InitTick+0x60>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e021      	b.n	8001dcc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_InitTick+0x64>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_InitTick+0x60>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f971 	bl	8002086 <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 f93b 	bl	8002036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_InitTick+0x68>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	2400000c 	.word	0x2400000c
 8001dd8:	24000000 	.word	0x24000000
 8001ddc:	24000008 	.word	0x24000008

08001de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2400000c 	.word	0x2400000c
 8001e04:	240007c0 	.word	0x240007c0

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	240007c0 	.word	0x240007c0

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff ffee 	bl	8001e08 <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_Delay+0x44>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e46:	bf00      	nop
 8001e48:	f7ff ffde 	bl	8001e08 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2400000c 	.word	0x2400000c

08001e68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetREVID+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0c1b      	lsrs	r3, r3, #16
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	5c001000 	.word	0x5c001000

08001e80 <__NVIC_SetPriorityGrouping>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x40>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	05fa0000 	.word	0x05fa0000

08001ec8 <__NVIC_GetPriorityGrouping>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff29 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff40 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff90 	bl	8001f74 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5f 	bl	8001f20 <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff33 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa4 	bl	8001fdc <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80020a4:	f3bf 8f5f 	dmb	sy
}
 80020a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_MPU_Disable+0x28>)
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_MPU_Disable+0x28>)
 80020b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_MPU_Disable+0x2c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00
 80020cc:	e000ed90 	.word	0xe000ed90

080020d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80020d8:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <HAL_MPU_Enable+0x38>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_MPU_Enable+0x3c>)
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_MPU_Enable+0x3c>)
 80020e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80020ee:	f3bf 8f4f 	dsb	sy
}
 80020f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020f4:	f3bf 8f6f 	isb	sy
}
 80020f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed90 	.word	0xe000ed90
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	785a      	ldrb	r2, [r3, #1]
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_MPU_ConfigRegion+0x84>)
 800211e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d029      	beq.n	800217c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002128:	4a1a      	ldr	r2, [pc, #104]	; (8002194 <HAL_MPU_ConfigRegion+0x84>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7b1b      	ldrb	r3, [r3, #12]
 8002134:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7adb      	ldrb	r3, [r3, #11]
 800213a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800213c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	7a9b      	ldrb	r3, [r3, #10]
 8002142:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002144:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7b5b      	ldrb	r3, [r3, #13]
 800214a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800214c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7b9b      	ldrb	r3, [r3, #14]
 8002152:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002154:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	7bdb      	ldrb	r3, [r3, #15]
 800215a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800215c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7a5b      	ldrb	r3, [r3, #9]
 8002162:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002164:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7a1b      	ldrb	r3, [r3, #8]
 800216a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800216c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002176:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002178:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800217a:	e005      	b.n	8002188 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_MPU_ConfigRegion+0x84>)
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_MPU_ConfigRegion+0x84>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed90 	.word	0xe000ed90

08002198 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff fe32 	bl	8001e08 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e316      	b.n	80027de <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a66      	ldr	r2, [pc, #408]	; (8002350 <HAL_DMA_Init+0x1b8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d04a      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a65      	ldr	r2, [pc, #404]	; (8002354 <HAL_DMA_Init+0x1bc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d045      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a63      	ldr	r2, [pc, #396]	; (8002358 <HAL_DMA_Init+0x1c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d040      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a62      	ldr	r2, [pc, #392]	; (800235c <HAL_DMA_Init+0x1c4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d03b      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a60      	ldr	r2, [pc, #384]	; (8002360 <HAL_DMA_Init+0x1c8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d036      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5f      	ldr	r2, [pc, #380]	; (8002364 <HAL_DMA_Init+0x1cc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d031      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a5d      	ldr	r2, [pc, #372]	; (8002368 <HAL_DMA_Init+0x1d0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d02c      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_DMA_Init+0x1d4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d027      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5a      	ldr	r2, [pc, #360]	; (8002370 <HAL_DMA_Init+0x1d8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d022      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a59      	ldr	r2, [pc, #356]	; (8002374 <HAL_DMA_Init+0x1dc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d01d      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a57      	ldr	r2, [pc, #348]	; (8002378 <HAL_DMA_Init+0x1e0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d018      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a56      	ldr	r2, [pc, #344]	; (800237c <HAL_DMA_Init+0x1e4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d013      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <HAL_DMA_Init+0x1e8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00e      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a53      	ldr	r2, [pc, #332]	; (8002384 <HAL_DMA_Init+0x1ec>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a51      	ldr	r2, [pc, #324]	; (8002388 <HAL_DMA_Init+0x1f0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d004      	beq.n	8002250 <HAL_DMA_Init+0xb8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a50      	ldr	r2, [pc, #320]	; (800238c <HAL_DMA_Init+0x1f4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Init+0xbc>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_DMA_Init+0xbe>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 813b 	beq.w	80024d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a37      	ldr	r2, [pc, #220]	; (8002350 <HAL_DMA_Init+0x1b8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04a      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a36      	ldr	r2, [pc, #216]	; (8002354 <HAL_DMA_Init+0x1bc>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d045      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a34      	ldr	r2, [pc, #208]	; (8002358 <HAL_DMA_Init+0x1c0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_DMA_Init+0x174>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a33      	ldr	r2, [pc, #204]	; (800235c <HAL_DMA_Init+0x1c4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d03b      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_DMA_Init+0x1c8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d036      	beq.n	800230c <HAL_DMA_Init+0x174>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_DMA_Init+0x1cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d031      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2e      	ldr	r2, [pc, #184]	; (8002368 <HAL_DMA_Init+0x1d0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02c      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_DMA_Init+0x1d4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <HAL_DMA_Init+0x1d8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_DMA_Init+0x1dc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <HAL_DMA_Init+0x1e0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_DMA_Init+0x1e4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a25      	ldr	r2, [pc, #148]	; (8002380 <HAL_DMA_Init+0x1e8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a24      	ldr	r2, [pc, #144]	; (8002384 <HAL_DMA_Init+0x1ec>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_DMA_Init+0x174>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <HAL_DMA_Init+0x1f0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Init+0x174>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a21      	ldr	r2, [pc, #132]	; (800238c <HAL_DMA_Init+0x1f4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <HAL_DMA_Init+0x186>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e007      	b.n	800232e <HAL_DMA_Init+0x196>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800232e:	e02f      	b.n	8002390 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002330:	f7ff fd6a 	bl	8001e08 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b05      	cmp	r3, #5
 800233c:	d928      	bls.n	8002390 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2220      	movs	r2, #32
 8002342:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2203      	movs	r2, #3
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e246      	b.n	80027de <HAL_DMA_Init+0x646>
 8002350:	40020010 	.word	0x40020010
 8002354:	40020028 	.word	0x40020028
 8002358:	40020040 	.word	0x40020040
 800235c:	40020058 	.word	0x40020058
 8002360:	40020070 	.word	0x40020070
 8002364:	40020088 	.word	0x40020088
 8002368:	400200a0 	.word	0x400200a0
 800236c:	400200b8 	.word	0x400200b8
 8002370:	40020410 	.word	0x40020410
 8002374:	40020428 	.word	0x40020428
 8002378:	40020440 	.word	0x40020440
 800237c:	40020458 	.word	0x40020458
 8002380:	40020470 	.word	0x40020470
 8002384:	40020488 	.word	0x40020488
 8002388:	400204a0 	.word	0x400204a0
 800238c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1c8      	bne.n	8002330 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <HAL_DMA_Init+0x420>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d107      	bne.n	80023f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4313      	orrs	r3, r2
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80023f4:	4b71      	ldr	r3, [pc, #452]	; (80025bc <HAL_DMA_Init+0x424>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b71      	ldr	r3, [pc, #452]	; (80025c0 <HAL_DMA_Init+0x428>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002400:	d328      	bcc.n	8002454 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b28      	cmp	r3, #40	; 0x28
 8002408:	d903      	bls.n	8002412 <HAL_DMA_Init+0x27a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b2e      	cmp	r3, #46	; 0x2e
 8002410:	d917      	bls.n	8002442 <HAL_DMA_Init+0x2aa>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b3e      	cmp	r3, #62	; 0x3e
 8002418:	d903      	bls.n	8002422 <HAL_DMA_Init+0x28a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b42      	cmp	r3, #66	; 0x42
 8002420:	d90f      	bls.n	8002442 <HAL_DMA_Init+0x2aa>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b46      	cmp	r3, #70	; 0x46
 8002428:	d903      	bls.n	8002432 <HAL_DMA_Init+0x29a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b48      	cmp	r3, #72	; 0x48
 8002430:	d907      	bls.n	8002442 <HAL_DMA_Init+0x2aa>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b4e      	cmp	r3, #78	; 0x4e
 8002438:	d905      	bls.n	8002446 <HAL_DMA_Init+0x2ae>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b52      	cmp	r3, #82	; 0x52
 8002440:	d801      	bhi.n	8002446 <HAL_DMA_Init+0x2ae>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_DMA_Init+0x2b0>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002452:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f023 0307 	bic.w	r3, r3, #7
 800246a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b04      	cmp	r3, #4
 800247c:	d117      	bne.n	80024ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f001 ff29 	bl	80042e8 <DMA_CheckFifoParam>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e197      	b.n	80027de <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f001 fe64 	bl	8004184 <DMA_CalcBaseAndBitshift>
 80024bc:	4603      	mov	r3, r0
 80024be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	223f      	movs	r2, #63	; 0x3f
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e0cd      	b.n	800266e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_DMA_Init+0x42c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a39      	ldr	r2, [pc, #228]	; (80025c8 <HAL_DMA_Init+0x430>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01d      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a38      	ldr	r2, [pc, #224]	; (80025cc <HAL_DMA_Init+0x434>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a36      	ldr	r2, [pc, #216]	; (80025d0 <HAL_DMA_Init+0x438>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a35      	ldr	r2, [pc, #212]	; (80025d4 <HAL_DMA_Init+0x43c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <HAL_DMA_Init+0x440>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a32      	ldr	r2, [pc, #200]	; (80025dc <HAL_DMA_Init+0x444>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_DMA_Init+0x38a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <HAL_DMA_Init+0x448>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Init+0x38e>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_DMA_Init+0x390>
 8002526:	2300      	movs	r3, #0
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8097 	beq.w	800265c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_DMA_Init+0x42c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d021      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_DMA_Init+0x430>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01c      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_DMA_Init+0x434>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d017      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_DMA_Init+0x438>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d012      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_DMA_Init+0x43c>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00d      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_DMA_Init+0x440>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d008      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_DMA_Init+0x444>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <HAL_DMA_Init+0x3e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_DMA_Init+0x448>)
 800257a:	4293      	cmp	r3, r2
 800257c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_DMA_Init+0x44c>)
 800259a:	4013      	ands	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d020      	beq.n	80025e8 <HAL_DMA_Init+0x450>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d102      	bne.n	80025b4 <HAL_DMA_Init+0x41c>
 80025ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025b2:	e01a      	b.n	80025ea <HAL_DMA_Init+0x452>
 80025b4:	2300      	movs	r3, #0
 80025b6:	e018      	b.n	80025ea <HAL_DMA_Init+0x452>
 80025b8:	fe10803f 	.word	0xfe10803f
 80025bc:	5c001000 	.word	0x5c001000
 80025c0:	ffff0000 	.word	0xffff0000
 80025c4:	58025408 	.word	0x58025408
 80025c8:	5802541c 	.word	0x5802541c
 80025cc:	58025430 	.word	0x58025430
 80025d0:	58025444 	.word	0x58025444
 80025d4:	58025458 	.word	0x58025458
 80025d8:	5802546c 	.word	0x5802546c
 80025dc:	58025480 	.word	0x58025480
 80025e0:	58025494 	.word	0x58025494
 80025e4:	fffe000f 	.word	0xfffe000f
 80025e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68d2      	ldr	r2, [r2, #12]
 80025ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002608:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002610:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002618:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	4b6e      	ldr	r3, [pc, #440]	; (80027e8 <HAL_DMA_Init+0x650>)
 8002630:	4413      	add	r3, r2
 8002632:	4a6e      	ldr	r2, [pc, #440]	; (80027ec <HAL_DMA_Init+0x654>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	009a      	lsls	r2, r3, #2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f001 fd9f 	bl	8004184 <DMA_CalcBaseAndBitshift>
 8002646:	4603      	mov	r3, r0
 8002648:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2201      	movs	r2, #1
 8002654:	409a      	lsls	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	e008      	b.n	800266e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0b7      	b.n	80027de <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a5f      	ldr	r2, [pc, #380]	; (80027f0 <HAL_DMA_Init+0x658>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d072      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a5d      	ldr	r2, [pc, #372]	; (80027f4 <HAL_DMA_Init+0x65c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d06d      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5c      	ldr	r2, [pc, #368]	; (80027f8 <HAL_DMA_Init+0x660>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d068      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5a      	ldr	r2, [pc, #360]	; (80027fc <HAL_DMA_Init+0x664>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d063      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a59      	ldr	r2, [pc, #356]	; (8002800 <HAL_DMA_Init+0x668>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d05e      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a57      	ldr	r2, [pc, #348]	; (8002804 <HAL_DMA_Init+0x66c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d059      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a56      	ldr	r2, [pc, #344]	; (8002808 <HAL_DMA_Init+0x670>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d054      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a54      	ldr	r2, [pc, #336]	; (800280c <HAL_DMA_Init+0x674>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d04f      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a53      	ldr	r2, [pc, #332]	; (8002810 <HAL_DMA_Init+0x678>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d04a      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a51      	ldr	r2, [pc, #324]	; (8002814 <HAL_DMA_Init+0x67c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d045      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a50      	ldr	r2, [pc, #320]	; (8002818 <HAL_DMA_Init+0x680>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d040      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a4e      	ldr	r2, [pc, #312]	; (800281c <HAL_DMA_Init+0x684>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d03b      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a4d      	ldr	r2, [pc, #308]	; (8002820 <HAL_DMA_Init+0x688>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d036      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4b      	ldr	r2, [pc, #300]	; (8002824 <HAL_DMA_Init+0x68c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d031      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a4a      	ldr	r2, [pc, #296]	; (8002828 <HAL_DMA_Init+0x690>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d02c      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_DMA_Init+0x694>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d027      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_DMA_Init+0x698>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d022      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a45      	ldr	r2, [pc, #276]	; (8002834 <HAL_DMA_Init+0x69c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d01d      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a44      	ldr	r2, [pc, #272]	; (8002838 <HAL_DMA_Init+0x6a0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d018      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a42      	ldr	r2, [pc, #264]	; (800283c <HAL_DMA_Init+0x6a4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a41      	ldr	r2, [pc, #260]	; (8002840 <HAL_DMA_Init+0x6a8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3f      	ldr	r2, [pc, #252]	; (8002844 <HAL_DMA_Init+0x6ac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d009      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3e      	ldr	r2, [pc, #248]	; (8002848 <HAL_DMA_Init+0x6b0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d004      	beq.n	800275e <HAL_DMA_Init+0x5c6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3c      	ldr	r2, [pc, #240]	; (800284c <HAL_DMA_Init+0x6b4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_DMA_Init+0x5ca>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_DMA_Init+0x5cc>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d032      	beq.n	80027ce <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f001 fe39 	bl	80043e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d102      	bne.n	800277c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002790:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d010      	beq.n	80027bc <HAL_DMA_Init+0x624>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d80c      	bhi.n	80027bc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f001 feb6 	bl	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	e008      	b.n	80027ce <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	a7fdabf8 	.word	0xa7fdabf8
 80027ec:	cccccccd 	.word	0xcccccccd
 80027f0:	40020010 	.word	0x40020010
 80027f4:	40020028 	.word	0x40020028
 80027f8:	40020040 	.word	0x40020040
 80027fc:	40020058 	.word	0x40020058
 8002800:	40020070 	.word	0x40020070
 8002804:	40020088 	.word	0x40020088
 8002808:	400200a0 	.word	0x400200a0
 800280c:	400200b8 	.word	0x400200b8
 8002810:	40020410 	.word	0x40020410
 8002814:	40020428 	.word	0x40020428
 8002818:	40020440 	.word	0x40020440
 800281c:	40020458 	.word	0x40020458
 8002820:	40020470 	.word	0x40020470
 8002824:	40020488 	.word	0x40020488
 8002828:	400204a0 	.word	0x400204a0
 800282c:	400204b8 	.word	0x400204b8
 8002830:	58025408 	.word	0x58025408
 8002834:	5802541c 	.word	0x5802541c
 8002838:	58025430 	.word	0x58025430
 800283c:	58025444 	.word	0x58025444
 8002840:	58025458 	.word	0x58025458
 8002844:	5802546c 	.word	0x5802546c
 8002848:	58025480 	.word	0x58025480
 800284c:	58025494 	.word	0x58025494

08002850 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff fad6 	bl	8001e08 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e2dc      	b.n	8002e22 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d008      	beq.n	8002886 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	; 0x80
 8002878:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e2cd      	b.n	8002e22 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_DMA_Abort+0x214>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d04a      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a74      	ldr	r2, [pc, #464]	; (8002a68 <HAL_DMA_Abort+0x218>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d045      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_DMA_Abort+0x21c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d040      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a71      	ldr	r2, [pc, #452]	; (8002a70 <HAL_DMA_Abort+0x220>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d03b      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a70      	ldr	r2, [pc, #448]	; (8002a74 <HAL_DMA_Abort+0x224>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d036      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_DMA_Abort+0x228>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d031      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6d      	ldr	r2, [pc, #436]	; (8002a7c <HAL_DMA_Abort+0x22c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d02c      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6b      	ldr	r2, [pc, #428]	; (8002a80 <HAL_DMA_Abort+0x230>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d027      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <HAL_DMA_Abort+0x234>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	; (8002a88 <HAL_DMA_Abort+0x238>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01d      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a67      	ldr	r2, [pc, #412]	; (8002a8c <HAL_DMA_Abort+0x23c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a65      	ldr	r2, [pc, #404]	; (8002a90 <HAL_DMA_Abort+0x240>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a64      	ldr	r2, [pc, #400]	; (8002a94 <HAL_DMA_Abort+0x244>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a62      	ldr	r2, [pc, #392]	; (8002a98 <HAL_DMA_Abort+0x248>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a61      	ldr	r2, [pc, #388]	; (8002a9c <HAL_DMA_Abort+0x24c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_DMA_Abort+0xd6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <HAL_DMA_Abort+0x250>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_DMA_Abort+0xda>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_DMA_Abort+0xdc>
 800292a:	2300      	movs	r3, #0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 021e 	bic.w	r2, r2, #30
 800293e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e00a      	b.n	800296e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 020e 	bic.w	r2, r2, #14
 8002966:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a3c      	ldr	r2, [pc, #240]	; (8002a64 <HAL_DMA_Abort+0x214>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d072      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a3a      	ldr	r2, [pc, #232]	; (8002a68 <HAL_DMA_Abort+0x218>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d06d      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a39      	ldr	r2, [pc, #228]	; (8002a6c <HAL_DMA_Abort+0x21c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d068      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a37      	ldr	r2, [pc, #220]	; (8002a70 <HAL_DMA_Abort+0x220>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d063      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a36      	ldr	r2, [pc, #216]	; (8002a74 <HAL_DMA_Abort+0x224>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d05e      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a34      	ldr	r2, [pc, #208]	; (8002a78 <HAL_DMA_Abort+0x228>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d059      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a33      	ldr	r2, [pc, #204]	; (8002a7c <HAL_DMA_Abort+0x22c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d054      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <HAL_DMA_Abort+0x230>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d04f      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a30      	ldr	r2, [pc, #192]	; (8002a84 <HAL_DMA_Abort+0x234>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d04a      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <HAL_DMA_Abort+0x238>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d045      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2d      	ldr	r2, [pc, #180]	; (8002a8c <HAL_DMA_Abort+0x23c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d040      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2b      	ldr	r2, [pc, #172]	; (8002a90 <HAL_DMA_Abort+0x240>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d03b      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <HAL_DMA_Abort+0x244>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d036      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <HAL_DMA_Abort+0x248>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <HAL_DMA_Abort+0x24c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d02c      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <HAL_DMA_Abort+0x250>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d027      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_DMA_Abort+0x254>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_DMA_Abort+0x258>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a21      	ldr	r2, [pc, #132]	; (8002aac <HAL_DMA_Abort+0x25c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <HAL_DMA_Abort+0x260>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_DMA_Abort+0x264>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_DMA_Abort+0x268>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <HAL_DMA_Abort+0x26c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Abort+0x20e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_DMA_Abort+0x270>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d132      	bne.n	8002ac4 <HAL_DMA_Abort+0x274>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e031      	b.n	8002ac6 <HAL_DMA_Abort+0x276>
 8002a62:	bf00      	nop
 8002a64:	40020010 	.word	0x40020010
 8002a68:	40020028 	.word	0x40020028
 8002a6c:	40020040 	.word	0x40020040
 8002a70:	40020058 	.word	0x40020058
 8002a74:	40020070 	.word	0x40020070
 8002a78:	40020088 	.word	0x40020088
 8002a7c:	400200a0 	.word	0x400200a0
 8002a80:	400200b8 	.word	0x400200b8
 8002a84:	40020410 	.word	0x40020410
 8002a88:	40020428 	.word	0x40020428
 8002a8c:	40020440 	.word	0x40020440
 8002a90:	40020458 	.word	0x40020458
 8002a94:	40020470 	.word	0x40020470
 8002a98:	40020488 	.word	0x40020488
 8002a9c:	400204a0 	.word	0x400204a0
 8002aa0:	400204b8 	.word	0x400204b8
 8002aa4:	58025408 	.word	0x58025408
 8002aa8:	5802541c 	.word	0x5802541c
 8002aac:	58025430 	.word	0x58025430
 8002ab0:	58025444 	.word	0x58025444
 8002ab4:	58025458 	.word	0x58025458
 8002ab8:	5802546c 	.word	0x5802546c
 8002abc:	58025480 	.word	0x58025480
 8002ac0:	58025494 	.word	0x58025494
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6d      	ldr	r2, [pc, #436]	; (8002c94 <HAL_DMA_Abort+0x444>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d04a      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a6b      	ldr	r2, [pc, #428]	; (8002c98 <HAL_DMA_Abort+0x448>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d045      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6a      	ldr	r2, [pc, #424]	; (8002c9c <HAL_DMA_Abort+0x44c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d040      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a68      	ldr	r2, [pc, #416]	; (8002ca0 <HAL_DMA_Abort+0x450>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d03b      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_DMA_Abort+0x454>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d036      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_DMA_Abort+0x458>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d031      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a64      	ldr	r2, [pc, #400]	; (8002cac <HAL_DMA_Abort+0x45c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d02c      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a62      	ldr	r2, [pc, #392]	; (8002cb0 <HAL_DMA_Abort+0x460>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d027      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a61      	ldr	r2, [pc, #388]	; (8002cb4 <HAL_DMA_Abort+0x464>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a5f      	ldr	r2, [pc, #380]	; (8002cb8 <HAL_DMA_Abort+0x468>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01d      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5e      	ldr	r2, [pc, #376]	; (8002cbc <HAL_DMA_Abort+0x46c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a5c      	ldr	r2, [pc, #368]	; (8002cc0 <HAL_DMA_Abort+0x470>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a5b      	ldr	r2, [pc, #364]	; (8002cc4 <HAL_DMA_Abort+0x474>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a59      	ldr	r2, [pc, #356]	; (8002cc8 <HAL_DMA_Abort+0x478>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_DMA_Abort+0x47c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_DMA_Abort+0x32a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <HAL_DMA_Abort+0x480>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d108      	bne.n	8002b8c <HAL_DMA_Abort+0x33c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e007      	b.n	8002b9c <HAL_DMA_Abort+0x34c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b9c:	e013      	b.n	8002bc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9e:	f7ff f933 	bl	8001e08 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d90c      	bls.n	8002bc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e12d      	b.n	8002e22 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e5      	bne.n	8002b9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <HAL_DMA_Abort+0x444>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04a      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2d      	ldr	r2, [pc, #180]	; (8002c98 <HAL_DMA_Abort+0x448>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d045      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <HAL_DMA_Abort+0x44c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d040      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <HAL_DMA_Abort+0x450>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d03b      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <HAL_DMA_Abort+0x454>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d036      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <HAL_DMA_Abort+0x458>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d031      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_DMA_Abort+0x45c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d02c      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a24      	ldr	r2, [pc, #144]	; (8002cb0 <HAL_DMA_Abort+0x460>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d027      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_DMA_Abort+0x464>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_DMA_Abort+0x468>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01d      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <HAL_DMA_Abort+0x46c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_DMA_Abort+0x470>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_DMA_Abort+0x474>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <HAL_DMA_Abort+0x478>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_DMA_Abort+0x47c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_DMA_Abort+0x422>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_DMA_Abort+0x480>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_DMA_Abort+0x426>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_DMA_Abort+0x428>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02b      	beq.n	8002cd4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	223f      	movs	r2, #63	; 0x3f
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	e02a      	b.n	8002cea <HAL_DMA_Abort+0x49a>
 8002c94:	40020010 	.word	0x40020010
 8002c98:	40020028 	.word	0x40020028
 8002c9c:	40020040 	.word	0x40020040
 8002ca0:	40020058 	.word	0x40020058
 8002ca4:	40020070 	.word	0x40020070
 8002ca8:	40020088 	.word	0x40020088
 8002cac:	400200a0 	.word	0x400200a0
 8002cb0:	400200b8 	.word	0x400200b8
 8002cb4:	40020410 	.word	0x40020410
 8002cb8:	40020428 	.word	0x40020428
 8002cbc:	40020440 	.word	0x40020440
 8002cc0:	40020458 	.word	0x40020458
 8002cc4:	40020470 	.word	0x40020470
 8002cc8:	40020488 	.word	0x40020488
 8002ccc:	400204a0 	.word	0x400204a0
 8002cd0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a4f      	ldr	r2, [pc, #316]	; (8002e2c <HAL_DMA_Abort+0x5dc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d072      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a4d      	ldr	r2, [pc, #308]	; (8002e30 <HAL_DMA_Abort+0x5e0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d06d      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a4c      	ldr	r2, [pc, #304]	; (8002e34 <HAL_DMA_Abort+0x5e4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d068      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a4a      	ldr	r2, [pc, #296]	; (8002e38 <HAL_DMA_Abort+0x5e8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d063      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a49      	ldr	r2, [pc, #292]	; (8002e3c <HAL_DMA_Abort+0x5ec>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d05e      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a47      	ldr	r2, [pc, #284]	; (8002e40 <HAL_DMA_Abort+0x5f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d059      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a46      	ldr	r2, [pc, #280]	; (8002e44 <HAL_DMA_Abort+0x5f4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d054      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a44      	ldr	r2, [pc, #272]	; (8002e48 <HAL_DMA_Abort+0x5f8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d04f      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_DMA_Abort+0x5fc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04a      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a41      	ldr	r2, [pc, #260]	; (8002e50 <HAL_DMA_Abort+0x600>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d045      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <HAL_DMA_Abort+0x604>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d040      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3e      	ldr	r2, [pc, #248]	; (8002e58 <HAL_DMA_Abort+0x608>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d03b      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3d      	ldr	r2, [pc, #244]	; (8002e5c <HAL_DMA_Abort+0x60c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d036      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a3b      	ldr	r2, [pc, #236]	; (8002e60 <HAL_DMA_Abort+0x610>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3a      	ldr	r2, [pc, #232]	; (8002e64 <HAL_DMA_Abort+0x614>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d02c      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <HAL_DMA_Abort+0x618>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d027      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a37      	ldr	r2, [pc, #220]	; (8002e6c <HAL_DMA_Abort+0x61c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <HAL_DMA_Abort+0x620>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_DMA_Abort+0x624>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d018      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <HAL_DMA_Abort+0x628>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a31      	ldr	r2, [pc, #196]	; (8002e7c <HAL_DMA_Abort+0x62c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <HAL_DMA_Abort+0x630>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2e      	ldr	r2, [pc, #184]	; (8002e84 <HAL_DMA_Abort+0x634>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_DMA_Abort+0x58a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <HAL_DMA_Abort+0x638>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_DMA_Abort+0x58e>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_DMA_Abort+0x590>
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00c      	beq.n	8002e10 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e04:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e0e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40020010 	.word	0x40020010
 8002e30:	40020028 	.word	0x40020028
 8002e34:	40020040 	.word	0x40020040
 8002e38:	40020058 	.word	0x40020058
 8002e3c:	40020070 	.word	0x40020070
 8002e40:	40020088 	.word	0x40020088
 8002e44:	400200a0 	.word	0x400200a0
 8002e48:	400200b8 	.word	0x400200b8
 8002e4c:	40020410 	.word	0x40020410
 8002e50:	40020428 	.word	0x40020428
 8002e54:	40020440 	.word	0x40020440
 8002e58:	40020458 	.word	0x40020458
 8002e5c:	40020470 	.word	0x40020470
 8002e60:	40020488 	.word	0x40020488
 8002e64:	400204a0 	.word	0x400204a0
 8002e68:	400204b8 	.word	0x400204b8
 8002e6c:	58025408 	.word	0x58025408
 8002e70:	5802541c 	.word	0x5802541c
 8002e74:	58025430 	.word	0x58025430
 8002e78:	58025444 	.word	0x58025444
 8002e7c:	58025458 	.word	0x58025458
 8002e80:	5802546c 	.word	0x5802546c
 8002e84:	58025480 	.word	0x58025480
 8002e88:	58025494 	.word	0x58025494

08002e8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e205      	b.n	80032aa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e1fa      	b.n	80032aa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a8c      	ldr	r2, [pc, #560]	; (80030ec <HAL_DMA_Abort_IT+0x260>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d04a      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a8b      	ldr	r2, [pc, #556]	; (80030f0 <HAL_DMA_Abort_IT+0x264>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d045      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a89      	ldr	r2, [pc, #548]	; (80030f4 <HAL_DMA_Abort_IT+0x268>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d040      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a88      	ldr	r2, [pc, #544]	; (80030f8 <HAL_DMA_Abort_IT+0x26c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d03b      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a86      	ldr	r2, [pc, #536]	; (80030fc <HAL_DMA_Abort_IT+0x270>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d036      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a85      	ldr	r2, [pc, #532]	; (8003100 <HAL_DMA_Abort_IT+0x274>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d031      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a83      	ldr	r2, [pc, #524]	; (8003104 <HAL_DMA_Abort_IT+0x278>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d02c      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a82      	ldr	r2, [pc, #520]	; (8003108 <HAL_DMA_Abort_IT+0x27c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d027      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_DMA_Abort_IT+0x280>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d022      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7f      	ldr	r2, [pc, #508]	; (8003110 <HAL_DMA_Abort_IT+0x284>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d01d      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7d      	ldr	r2, [pc, #500]	; (8003114 <HAL_DMA_Abort_IT+0x288>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d018      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7c      	ldr	r2, [pc, #496]	; (8003118 <HAL_DMA_Abort_IT+0x28c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7a      	ldr	r2, [pc, #488]	; (800311c <HAL_DMA_Abort_IT+0x290>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00e      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a79      	ldr	r2, [pc, #484]	; (8003120 <HAL_DMA_Abort_IT+0x294>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d009      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_DMA_Abort_IT+0x298>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_DMA_Abort_IT+0xc8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a76      	ldr	r2, [pc, #472]	; (8003128 <HAL_DMA_Abort_IT+0x29c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA_Abort_IT+0xcc>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_DMA_Abort_IT+0xce>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d065      	beq.n	800302a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2204      	movs	r2, #4
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a60      	ldr	r2, [pc, #384]	; (80030ec <HAL_DMA_Abort_IT+0x260>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d04a      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_DMA_Abort_IT+0x264>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d045      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5d      	ldr	r2, [pc, #372]	; (80030f4 <HAL_DMA_Abort_IT+0x268>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d040      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5b      	ldr	r2, [pc, #364]	; (80030f8 <HAL_DMA_Abort_IT+0x26c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d03b      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5a      	ldr	r2, [pc, #360]	; (80030fc <HAL_DMA_Abort_IT+0x270>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d036      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_DMA_Abort_IT+0x274>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d031      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a57      	ldr	r2, [pc, #348]	; (8003104 <HAL_DMA_Abort_IT+0x278>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d02c      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a55      	ldr	r2, [pc, #340]	; (8003108 <HAL_DMA_Abort_IT+0x27c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d027      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a54      	ldr	r2, [pc, #336]	; (800310c <HAL_DMA_Abort_IT+0x280>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d022      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_DMA_Abort_IT+0x284>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d01d      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a51      	ldr	r2, [pc, #324]	; (8003114 <HAL_DMA_Abort_IT+0x288>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d018      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_DMA_Abort_IT+0x28c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d013      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4e      	ldr	r2, [pc, #312]	; (800311c <HAL_DMA_Abort_IT+0x290>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a4c      	ldr	r2, [pc, #304]	; (8003120 <HAL_DMA_Abort_IT+0x294>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d009      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a4b      	ldr	r2, [pc, #300]	; (8003124 <HAL_DMA_Abort_IT+0x298>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_DMA_Abort_IT+0x17a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a49      	ldr	r2, [pc, #292]	; (8003128 <HAL_DMA_Abort_IT+0x29c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d108      	bne.n	8003018 <HAL_DMA_Abort_IT+0x18c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0201 	bic.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e147      	b.n	80032a8 <HAL_DMA_Abort_IT+0x41c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e13e      	b.n	80032a8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 020e 	bic.w	r2, r2, #14
 8003038:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <HAL_DMA_Abort_IT+0x260>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d04a      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a29      	ldr	r2, [pc, #164]	; (80030f0 <HAL_DMA_Abort_IT+0x264>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d045      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <HAL_DMA_Abort_IT+0x268>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d040      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <HAL_DMA_Abort_IT+0x26c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d03b      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_DMA_Abort_IT+0x270>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d036      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a23      	ldr	r2, [pc, #140]	; (8003100 <HAL_DMA_Abort_IT+0x274>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d031      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a22      	ldr	r2, [pc, #136]	; (8003104 <HAL_DMA_Abort_IT+0x278>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d02c      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_DMA_Abort_IT+0x27c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d027      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1f      	ldr	r2, [pc, #124]	; (800310c <HAL_DMA_Abort_IT+0x280>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <HAL_DMA_Abort_IT+0x284>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01d      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <HAL_DMA_Abort_IT+0x288>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d018      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <HAL_DMA_Abort_IT+0x28c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_DMA_Abort_IT+0x290>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00e      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_DMA_Abort_IT+0x294>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a16      	ldr	r2, [pc, #88]	; (8003124 <HAL_DMA_Abort_IT+0x298>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_DMA_Abort_IT+0x24e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_DMA_Abort_IT+0x29c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d128      	bne.n	800312c <HAL_DMA_Abort_IT+0x2a0>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e027      	b.n	800313c <HAL_DMA_Abort_IT+0x2b0>
 80030ec:	40020010 	.word	0x40020010
 80030f0:	40020028 	.word	0x40020028
 80030f4:	40020040 	.word	0x40020040
 80030f8:	40020058 	.word	0x40020058
 80030fc:	40020070 	.word	0x40020070
 8003100:	40020088 	.word	0x40020088
 8003104:	400200a0 	.word	0x400200a0
 8003108:	400200b8 	.word	0x400200b8
 800310c:	40020410 	.word	0x40020410
 8003110:	40020428 	.word	0x40020428
 8003114:	40020440 	.word	0x40020440
 8003118:	40020458 	.word	0x40020458
 800311c:	40020470 	.word	0x40020470
 8003120:	40020488 	.word	0x40020488
 8003124:	400204a0 	.word	0x400204a0
 8003128:	400204b8 	.word	0x400204b8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a5c      	ldr	r2, [pc, #368]	; (80032b4 <HAL_DMA_Abort_IT+0x428>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d072      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a5b      	ldr	r2, [pc, #364]	; (80032b8 <HAL_DMA_Abort_IT+0x42c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d06d      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a59      	ldr	r2, [pc, #356]	; (80032bc <HAL_DMA_Abort_IT+0x430>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d068      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_DMA_Abort_IT+0x434>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d063      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_DMA_Abort_IT+0x438>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d05e      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a55      	ldr	r2, [pc, #340]	; (80032c8 <HAL_DMA_Abort_IT+0x43c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d059      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a53      	ldr	r2, [pc, #332]	; (80032cc <HAL_DMA_Abort_IT+0x440>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d054      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a52      	ldr	r2, [pc, #328]	; (80032d0 <HAL_DMA_Abort_IT+0x444>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d04f      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a50      	ldr	r2, [pc, #320]	; (80032d4 <HAL_DMA_Abort_IT+0x448>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a4f      	ldr	r2, [pc, #316]	; (80032d8 <HAL_DMA_Abort_IT+0x44c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a4d      	ldr	r2, [pc, #308]	; (80032dc <HAL_DMA_Abort_IT+0x450>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a4c      	ldr	r2, [pc, #304]	; (80032e0 <HAL_DMA_Abort_IT+0x454>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a4a      	ldr	r2, [pc, #296]	; (80032e4 <HAL_DMA_Abort_IT+0x458>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a49      	ldr	r2, [pc, #292]	; (80032e8 <HAL_DMA_Abort_IT+0x45c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a47      	ldr	r2, [pc, #284]	; (80032ec <HAL_DMA_Abort_IT+0x460>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a46      	ldr	r2, [pc, #280]	; (80032f0 <HAL_DMA_Abort_IT+0x464>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a44      	ldr	r2, [pc, #272]	; (80032f4 <HAL_DMA_Abort_IT+0x468>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a43      	ldr	r2, [pc, #268]	; (80032f8 <HAL_DMA_Abort_IT+0x46c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a41      	ldr	r2, [pc, #260]	; (80032fc <HAL_DMA_Abort_IT+0x470>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a40      	ldr	r2, [pc, #256]	; (8003300 <HAL_DMA_Abort_IT+0x474>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3e      	ldr	r2, [pc, #248]	; (8003304 <HAL_DMA_Abort_IT+0x478>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <HAL_DMA_Abort_IT+0x47c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3b      	ldr	r2, [pc, #236]	; (800330c <HAL_DMA_Abort_IT+0x480>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_Abort_IT+0x3a0>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_DMA_Abort_IT+0x484>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Abort_IT+0x3a4>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_DMA_Abort_IT+0x3a6>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003244:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003264:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00c      	beq.n	8003288 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003286:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40020010 	.word	0x40020010
 80032b8:	40020028 	.word	0x40020028
 80032bc:	40020040 	.word	0x40020040
 80032c0:	40020058 	.word	0x40020058
 80032c4:	40020070 	.word	0x40020070
 80032c8:	40020088 	.word	0x40020088
 80032cc:	400200a0 	.word	0x400200a0
 80032d0:	400200b8 	.word	0x400200b8
 80032d4:	40020410 	.word	0x40020410
 80032d8:	40020428 	.word	0x40020428
 80032dc:	40020440 	.word	0x40020440
 80032e0:	40020458 	.word	0x40020458
 80032e4:	40020470 	.word	0x40020470
 80032e8:	40020488 	.word	0x40020488
 80032ec:	400204a0 	.word	0x400204a0
 80032f0:	400204b8 	.word	0x400204b8
 80032f4:	58025408 	.word	0x58025408
 80032f8:	5802541c 	.word	0x5802541c
 80032fc:	58025430 	.word	0x58025430
 8003300:	58025444 	.word	0x58025444
 8003304:	58025458 	.word	0x58025458
 8003308:	5802546c 	.word	0x5802546c
 800330c:	58025480 	.word	0x58025480
 8003310:	58025494 	.word	0x58025494

08003314 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003320:	4b67      	ldr	r3, [pc, #412]	; (80034c0 <HAL_DMA_IRQHandler+0x1ac>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a67      	ldr	r2, [pc, #412]	; (80034c4 <HAL_DMA_IRQHandler+0x1b0>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0a9b      	lsrs	r3, r3, #10
 800332c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5f      	ldr	r2, [pc, #380]	; (80034c8 <HAL_DMA_IRQHandler+0x1b4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d04a      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a5d      	ldr	r2, [pc, #372]	; (80034cc <HAL_DMA_IRQHandler+0x1b8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d045      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a5c      	ldr	r2, [pc, #368]	; (80034d0 <HAL_DMA_IRQHandler+0x1bc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d040      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a5a      	ldr	r2, [pc, #360]	; (80034d4 <HAL_DMA_IRQHandler+0x1c0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d03b      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a59      	ldr	r2, [pc, #356]	; (80034d8 <HAL_DMA_IRQHandler+0x1c4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d036      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a57      	ldr	r2, [pc, #348]	; (80034dc <HAL_DMA_IRQHandler+0x1c8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a56      	ldr	r2, [pc, #344]	; (80034e0 <HAL_DMA_IRQHandler+0x1cc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d02c      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a54      	ldr	r2, [pc, #336]	; (80034e4 <HAL_DMA_IRQHandler+0x1d0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d027      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a53      	ldr	r2, [pc, #332]	; (80034e8 <HAL_DMA_IRQHandler+0x1d4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a51      	ldr	r2, [pc, #324]	; (80034ec <HAL_DMA_IRQHandler+0x1d8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <HAL_DMA_IRQHandler+0x1dc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a4e      	ldr	r2, [pc, #312]	; (80034f4 <HAL_DMA_IRQHandler+0x1e0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a4d      	ldr	r2, [pc, #308]	; (80034f8 <HAL_DMA_IRQHandler+0x1e4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a4b      	ldr	r2, [pc, #300]	; (80034fc <HAL_DMA_IRQHandler+0x1e8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a4a      	ldr	r2, [pc, #296]	; (8003500 <HAL_DMA_IRQHandler+0x1ec>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xd2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a48      	ldr	r2, [pc, #288]	; (8003504 <HAL_DMA_IRQHandler+0x1f0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_IRQHandler+0xd6>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_DMA_IRQHandler+0xd8>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 842b 	beq.w	8003c48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	2208      	movs	r2, #8
 80033fc:	409a      	lsls	r2, r3
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a2 	beq.w	800354c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2e      	ldr	r2, [pc, #184]	; (80034c8 <HAL_DMA_IRQHandler+0x1b4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d04a      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2d      	ldr	r2, [pc, #180]	; (80034cc <HAL_DMA_IRQHandler+0x1b8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d045      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <HAL_DMA_IRQHandler+0x1bc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d040      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <HAL_DMA_IRQHandler+0x1c0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d03b      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <HAL_DMA_IRQHandler+0x1c4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d036      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a27      	ldr	r2, [pc, #156]	; (80034dc <HAL_DMA_IRQHandler+0x1c8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d031      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <HAL_DMA_IRQHandler+0x1cc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02c      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <HAL_DMA_IRQHandler+0x1d0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d027      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <HAL_DMA_IRQHandler+0x1d4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d022      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a21      	ldr	r2, [pc, #132]	; (80034ec <HAL_DMA_IRQHandler+0x1d8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d01d      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1f      	ldr	r2, [pc, #124]	; (80034f0 <HAL_DMA_IRQHandler+0x1dc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d018      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <HAL_DMA_IRQHandler+0x1e0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <HAL_DMA_IRQHandler+0x1e4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00e      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <HAL_DMA_IRQHandler+0x1e8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d009      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <HAL_DMA_IRQHandler+0x1ec>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x194>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_DMA_IRQHandler+0x1f0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d12f      	bne.n	8003508 <HAL_DMA_IRQHandler+0x1f4>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e02e      	b.n	800351c <HAL_DMA_IRQHandler+0x208>
 80034be:	bf00      	nop
 80034c0:	24000000 	.word	0x24000000
 80034c4:	1b4e81b5 	.word	0x1b4e81b5
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf14      	ite	ne
 8003516:	2301      	movne	r3, #1
 8003518:	2300      	moveq	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0204 	bic.w	r2, r2, #4
 800352e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2208      	movs	r2, #8
 800353a:	409a      	lsls	r2, r3
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d06e      	beq.n	8003640 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a69      	ldr	r2, [pc, #420]	; (800370c <HAL_DMA_IRQHandler+0x3f8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d04a      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a67      	ldr	r2, [pc, #412]	; (8003710 <HAL_DMA_IRQHandler+0x3fc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d045      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a66      	ldr	r2, [pc, #408]	; (8003714 <HAL_DMA_IRQHandler+0x400>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d040      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a64      	ldr	r2, [pc, #400]	; (8003718 <HAL_DMA_IRQHandler+0x404>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d03b      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a63      	ldr	r2, [pc, #396]	; (800371c <HAL_DMA_IRQHandler+0x408>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d036      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a61      	ldr	r2, [pc, #388]	; (8003720 <HAL_DMA_IRQHandler+0x40c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d031      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a60      	ldr	r2, [pc, #384]	; (8003724 <HAL_DMA_IRQHandler+0x410>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d02c      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a5e      	ldr	r2, [pc, #376]	; (8003728 <HAL_DMA_IRQHandler+0x414>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d027      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5d      	ldr	r2, [pc, #372]	; (800372c <HAL_DMA_IRQHandler+0x418>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d022      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_DMA_IRQHandler+0x41c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01d      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	; (8003734 <HAL_DMA_IRQHandler+0x420>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d018      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_DMA_IRQHandler+0x424>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a57      	ldr	r2, [pc, #348]	; (800373c <HAL_DMA_IRQHandler+0x428>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a55      	ldr	r2, [pc, #340]	; (8003740 <HAL_DMA_IRQHandler+0x42c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a54      	ldr	r2, [pc, #336]	; (8003744 <HAL_DMA_IRQHandler+0x430>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_IRQHandler+0x2ee>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_DMA_IRQHandler+0x434>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10a      	bne.n	8003618 <HAL_DMA_IRQHandler+0x304>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e003      	b.n	8003620 <HAL_DMA_IRQHandler+0x30c>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2201      	movs	r2, #1
 800362e:	409a      	lsls	r2, r3
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0202 	orr.w	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2204      	movs	r2, #4
 800364a:	409a      	lsls	r2, r3
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 808f 	beq.w	8003774 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2c      	ldr	r2, [pc, #176]	; (800370c <HAL_DMA_IRQHandler+0x3f8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d04a      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <HAL_DMA_IRQHandler+0x3fc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d045      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a29      	ldr	r2, [pc, #164]	; (8003714 <HAL_DMA_IRQHandler+0x400>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d040      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <HAL_DMA_IRQHandler+0x404>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d03b      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a26      	ldr	r2, [pc, #152]	; (800371c <HAL_DMA_IRQHandler+0x408>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d036      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_DMA_IRQHandler+0x40c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d031      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a23      	ldr	r2, [pc, #140]	; (8003724 <HAL_DMA_IRQHandler+0x410>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d02c      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_DMA_IRQHandler+0x414>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d027      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_DMA_IRQHandler+0x418>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <HAL_DMA_IRQHandler+0x41c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_DMA_IRQHandler+0x420>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <HAL_DMA_IRQHandler+0x424>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_DMA_IRQHandler+0x428>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_DMA_IRQHandler+0x42c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a17      	ldr	r2, [pc, #92]	; (8003744 <HAL_DMA_IRQHandler+0x430>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x3e2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a15      	ldr	r2, [pc, #84]	; (8003748 <HAL_DMA_IRQHandler+0x434>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d12a      	bne.n	800374c <HAL_DMA_IRQHandler+0x438>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e023      	b.n	8003754 <HAL_DMA_IRQHandler+0x440>
 800370c:	40020010 	.word	0x40020010
 8003710:	40020028 	.word	0x40020028
 8003714:	40020040 	.word	0x40020040
 8003718:	40020058 	.word	0x40020058
 800371c:	40020070 	.word	0x40020070
 8003720:	40020088 	.word	0x40020088
 8003724:	400200a0 	.word	0x400200a0
 8003728:	400200b8 	.word	0x400200b8
 800372c:	40020410 	.word	0x40020410
 8003730:	40020428 	.word	0x40020428
 8003734:	40020440 	.word	0x40020440
 8003738:	40020458 	.word	0x40020458
 800373c:	40020470 	.word	0x40020470
 8003740:	40020488 	.word	0x40020488
 8003744:	400204a0 	.word	0x400204a0
 8003748:	400204b8 	.word	0x400204b8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2204      	movs	r2, #4
 8003762:	409a      	lsls	r2, r3
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2210      	movs	r2, #16
 800377e:	409a      	lsls	r2, r3
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80a6 	beq.w	80038d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a85      	ldr	r2, [pc, #532]	; (80039a4 <HAL_DMA_IRQHandler+0x690>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d04a      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	; (80039a8 <HAL_DMA_IRQHandler+0x694>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d045      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a82      	ldr	r2, [pc, #520]	; (80039ac <HAL_DMA_IRQHandler+0x698>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d040      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a80      	ldr	r2, [pc, #512]	; (80039b0 <HAL_DMA_IRQHandler+0x69c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d03b      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7f      	ldr	r2, [pc, #508]	; (80039b4 <HAL_DMA_IRQHandler+0x6a0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d036      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7d      	ldr	r2, [pc, #500]	; (80039b8 <HAL_DMA_IRQHandler+0x6a4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d031      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7c      	ldr	r2, [pc, #496]	; (80039bc <HAL_DMA_IRQHandler+0x6a8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d02c      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7a      	ldr	r2, [pc, #488]	; (80039c0 <HAL_DMA_IRQHandler+0x6ac>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d027      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a79      	ldr	r2, [pc, #484]	; (80039c4 <HAL_DMA_IRQHandler+0x6b0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d022      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <HAL_DMA_IRQHandler+0x6b4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01d      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a76      	ldr	r2, [pc, #472]	; (80039cc <HAL_DMA_IRQHandler+0x6b8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d018      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a74      	ldr	r2, [pc, #464]	; (80039d0 <HAL_DMA_IRQHandler+0x6bc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d013      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a73      	ldr	r2, [pc, #460]	; (80039d4 <HAL_DMA_IRQHandler+0x6c0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00e      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a71      	ldr	r2, [pc, #452]	; (80039d8 <HAL_DMA_IRQHandler+0x6c4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a70      	ldr	r2, [pc, #448]	; (80039dc <HAL_DMA_IRQHandler+0x6c8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_DMA_IRQHandler+0x516>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6e      	ldr	r2, [pc, #440]	; (80039e0 <HAL_DMA_IRQHandler+0x6cc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10a      	bne.n	8003840 <HAL_DMA_IRQHandler+0x52c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf14      	ite	ne
 8003838:	2301      	movne	r3, #1
 800383a:	2300      	moveq	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e009      	b.n	8003854 <HAL_DMA_IRQHandler+0x540>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf14      	ite	ne
 800384e:	2301      	movne	r3, #1
 8003850:	2300      	moveq	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d03e      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	2210      	movs	r2, #16
 8003862:	409a      	lsls	r2, r3
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d018      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	2b00      	cmp	r3, #0
 800388a:	d024      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
 8003894:	e01f      	b.n	80038d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	2b00      	cmp	r3, #0
 800389c:	d01b      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
 80038a6:	e016      	b.n	80038d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d107      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0208 	bic.w	r2, r2, #8
 80038c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	f003 031f 	and.w	r3, r3, #31
 80038de:	2220      	movs	r2, #32
 80038e0:	409a      	lsls	r2, r3
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8110 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <HAL_DMA_IRQHandler+0x690>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d04a      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2b      	ldr	r2, [pc, #172]	; (80039a8 <HAL_DMA_IRQHandler+0x694>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d045      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a29      	ldr	r2, [pc, #164]	; (80039ac <HAL_DMA_IRQHandler+0x698>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d040      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a28      	ldr	r2, [pc, #160]	; (80039b0 <HAL_DMA_IRQHandler+0x69c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d03b      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <HAL_DMA_IRQHandler+0x6a0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d036      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <HAL_DMA_IRQHandler+0x6a4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d031      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_DMA_IRQHandler+0x6a8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d02c      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <HAL_DMA_IRQHandler+0x6ac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d027      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_DMA_IRQHandler+0x6b0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_DMA_IRQHandler+0x6b4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d01d      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_DMA_IRQHandler+0x6b8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <HAL_DMA_IRQHandler+0x6bc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_DMA_IRQHandler+0x6c0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_DMA_IRQHandler+0x6c4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_DMA_IRQHandler+0x6c8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_DMA_IRQHandler+0x678>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_DMA_IRQHandler+0x6cc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d12b      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x6d0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf14      	ite	ne
 800399a:	2301      	movne	r3, #1
 800399c:	2300      	moveq	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	e02a      	b.n	80039f8 <HAL_DMA_IRQHandler+0x6e4>
 80039a2:	bf00      	nop
 80039a4:	40020010 	.word	0x40020010
 80039a8:	40020028 	.word	0x40020028
 80039ac:	40020040 	.word	0x40020040
 80039b0:	40020058 	.word	0x40020058
 80039b4:	40020070 	.word	0x40020070
 80039b8:	40020088 	.word	0x40020088
 80039bc:	400200a0 	.word	0x400200a0
 80039c0:	400200b8 	.word	0x400200b8
 80039c4:	40020410 	.word	0x40020410
 80039c8:	40020428 	.word	0x40020428
 80039cc:	40020440 	.word	0x40020440
 80039d0:	40020458 	.word	0x40020458
 80039d4:	40020470 	.word	0x40020470
 80039d8:	40020488 	.word	0x40020488
 80039dc:	400204a0 	.word	0x400204a0
 80039e0:	400204b8 	.word	0x400204b8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bf14      	ite	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	2300      	moveq	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8087 	beq.w	8003b0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2220      	movs	r2, #32
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d139      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0216 	bic.w	r2, r2, #22
 8003a28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_DMA_IRQHandler+0x736>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0208 	bic.w	r2, r2, #8
 8003a58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	223f      	movs	r2, #63	; 0x3f
 8003a64:	409a      	lsls	r2, r3
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 834a 	beq.w	8004118 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
          }
          return;
 8003a8c:	e344      	b.n	8004118 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d108      	bne.n	8003abc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d02c      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
 8003aba:	e027      	b.n	8003b0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
 8003acc:	e01e      	b.n	8003b0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0210 	bic.w	r2, r2, #16
 8003aea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8306 	beq.w	8004122 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8088 	beq.w	8003c34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2204      	movs	r2, #4
 8003b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a7a      	ldr	r2, [pc, #488]	; (8003d1c <HAL_DMA_IRQHandler+0xa08>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d04a      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a79      	ldr	r2, [pc, #484]	; (8003d20 <HAL_DMA_IRQHandler+0xa0c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d045      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a77      	ldr	r2, [pc, #476]	; (8003d24 <HAL_DMA_IRQHandler+0xa10>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a76      	ldr	r2, [pc, #472]	; (8003d28 <HAL_DMA_IRQHandler+0xa14>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d03b      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a74      	ldr	r2, [pc, #464]	; (8003d2c <HAL_DMA_IRQHandler+0xa18>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d036      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a73      	ldr	r2, [pc, #460]	; (8003d30 <HAL_DMA_IRQHandler+0xa1c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d031      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a71      	ldr	r2, [pc, #452]	; (8003d34 <HAL_DMA_IRQHandler+0xa20>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d02c      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a70      	ldr	r2, [pc, #448]	; (8003d38 <HAL_DMA_IRQHandler+0xa24>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d027      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6e      	ldr	r2, [pc, #440]	; (8003d3c <HAL_DMA_IRQHandler+0xa28>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6d      	ldr	r2, [pc, #436]	; (8003d40 <HAL_DMA_IRQHandler+0xa2c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d01d      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a6b      	ldr	r2, [pc, #428]	; (8003d44 <HAL_DMA_IRQHandler+0xa30>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6a      	ldr	r2, [pc, #424]	; (8003d48 <HAL_DMA_IRQHandler+0xa34>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a68      	ldr	r2, [pc, #416]	; (8003d4c <HAL_DMA_IRQHandler+0xa38>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a67      	ldr	r2, [pc, #412]	; (8003d50 <HAL_DMA_IRQHandler+0xa3c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a65      	ldr	r2, [pc, #404]	; (8003d54 <HAL_DMA_IRQHandler+0xa40>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x8b8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a64      	ldr	r2, [pc, #400]	; (8003d58 <HAL_DMA_IRQHandler+0xa44>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d108      	bne.n	8003bde <HAL_DMA_IRQHandler+0x8ca>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e007      	b.n	8003bee <HAL_DMA_IRQHandler+0x8da>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d307      	bcc.n	8003c0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f2      	bne.n	8003bee <HAL_DMA_IRQHandler+0x8da>
 8003c08:	e000      	b.n	8003c0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c0a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2203      	movs	r2, #3
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c2a:	e003      	b.n	8003c34 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8272 	beq.w	8004122 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
 8003c46:	e26c      	b.n	8004122 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a43      	ldr	r2, [pc, #268]	; (8003d5c <HAL_DMA_IRQHandler+0xa48>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d022      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x984>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a42      	ldr	r2, [pc, #264]	; (8003d60 <HAL_DMA_IRQHandler+0xa4c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d01d      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x984>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a40      	ldr	r2, [pc, #256]	; (8003d64 <HAL_DMA_IRQHandler+0xa50>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d018      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x984>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <HAL_DMA_IRQHandler+0xa54>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x984>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a3d      	ldr	r2, [pc, #244]	; (8003d6c <HAL_DMA_IRQHandler+0xa58>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00e      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x984>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3c      	ldr	r2, [pc, #240]	; (8003d70 <HAL_DMA_IRQHandler+0xa5c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d009      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x984>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a3a      	ldr	r2, [pc, #232]	; (8003d74 <HAL_DMA_IRQHandler+0xa60>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x984>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a39      	ldr	r2, [pc, #228]	; (8003d78 <HAL_DMA_IRQHandler+0xa64>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d101      	bne.n	8003c9c <HAL_DMA_IRQHandler+0x988>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_DMA_IRQHandler+0x98a>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 823f 	beq.w	8004122 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80cd 	beq.w	8003e5c <HAL_DMA_IRQHandler+0xb48>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80c7 	beq.w	8003e5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d049      	beq.n	8003d7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8210 	beq.w	800411c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d04:	e20a      	b.n	800411c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8206 	beq.w	800411c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d18:	e200      	b.n	800411c <HAL_DMA_IRQHandler+0xe08>
 8003d1a:	bf00      	nop
 8003d1c:	40020010 	.word	0x40020010
 8003d20:	40020028 	.word	0x40020028
 8003d24:	40020040 	.word	0x40020040
 8003d28:	40020058 	.word	0x40020058
 8003d2c:	40020070 	.word	0x40020070
 8003d30:	40020088 	.word	0x40020088
 8003d34:	400200a0 	.word	0x400200a0
 8003d38:	400200b8 	.word	0x400200b8
 8003d3c:	40020410 	.word	0x40020410
 8003d40:	40020428 	.word	0x40020428
 8003d44:	40020440 	.word	0x40020440
 8003d48:	40020458 	.word	0x40020458
 8003d4c:	40020470 	.word	0x40020470
 8003d50:	40020488 	.word	0x40020488
 8003d54:	400204a0 	.word	0x400204a0
 8003d58:	400204b8 	.word	0x400204b8
 8003d5c:	58025408 	.word	0x58025408
 8003d60:	5802541c 	.word	0x5802541c
 8003d64:	58025430 	.word	0x58025430
 8003d68:	58025444 	.word	0x58025444
 8003d6c:	58025458 	.word	0x58025458
 8003d70:	5802546c 	.word	0x5802546c
 8003d74:	58025480 	.word	0x58025480
 8003d78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d160      	bne.n	8003e48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a8c      	ldr	r2, [pc, #560]	; (8003fbc <HAL_DMA_IRQHandler+0xca8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04a      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a8a      	ldr	r2, [pc, #552]	; (8003fc0 <HAL_DMA_IRQHandler+0xcac>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d045      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a89      	ldr	r2, [pc, #548]	; (8003fc4 <HAL_DMA_IRQHandler+0xcb0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d040      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a87      	ldr	r2, [pc, #540]	; (8003fc8 <HAL_DMA_IRQHandler+0xcb4>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d03b      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a86      	ldr	r2, [pc, #536]	; (8003fcc <HAL_DMA_IRQHandler+0xcb8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d036      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a84      	ldr	r2, [pc, #528]	; (8003fd0 <HAL_DMA_IRQHandler+0xcbc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d031      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a83      	ldr	r2, [pc, #524]	; (8003fd4 <HAL_DMA_IRQHandler+0xcc0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d02c      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a81      	ldr	r2, [pc, #516]	; (8003fd8 <HAL_DMA_IRQHandler+0xcc4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d027      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a80      	ldr	r2, [pc, #512]	; (8003fdc <HAL_DMA_IRQHandler+0xcc8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7e      	ldr	r2, [pc, #504]	; (8003fe0 <HAL_DMA_IRQHandler+0xccc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7d      	ldr	r2, [pc, #500]	; (8003fe4 <HAL_DMA_IRQHandler+0xcd0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a7b      	ldr	r2, [pc, #492]	; (8003fe8 <HAL_DMA_IRQHandler+0xcd4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a7a      	ldr	r2, [pc, #488]	; (8003fec <HAL_DMA_IRQHandler+0xcd8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a78      	ldr	r2, [pc, #480]	; (8003ff0 <HAL_DMA_IRQHandler+0xcdc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a77      	ldr	r2, [pc, #476]	; (8003ff4 <HAL_DMA_IRQHandler+0xce0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xb12>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a75      	ldr	r2, [pc, #468]	; (8003ff8 <HAL_DMA_IRQHandler+0xce4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <HAL_DMA_IRQHandler+0xb24>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e007      	b.n	8003e48 <HAL_DMA_IRQHandler+0xb34>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0204 	bic.w	r2, r2, #4
 8003e46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8165 	beq.w	800411c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e5a:	e15f      	b.n	800411c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2202      	movs	r2, #2
 8003e66:	409a      	lsls	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80c5 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xce8>
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80bf 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f003 031f 	and.w	r3, r3, #31
 8003e86:	2202      	movs	r2, #2
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d018      	beq.n	8003eca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 813a 	beq.w	8004120 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eb4:	e134      	b.n	8004120 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8130 	beq.w	8004120 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec8:	e12a      	b.n	8004120 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d168      	bne.n	8003fa6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a38      	ldr	r2, [pc, #224]	; (8003fbc <HAL_DMA_IRQHandler+0xca8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04a      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a37      	ldr	r2, [pc, #220]	; (8003fc0 <HAL_DMA_IRQHandler+0xcac>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d045      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a35      	ldr	r2, [pc, #212]	; (8003fc4 <HAL_DMA_IRQHandler+0xcb0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d040      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a34      	ldr	r2, [pc, #208]	; (8003fc8 <HAL_DMA_IRQHandler+0xcb4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d03b      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a32      	ldr	r2, [pc, #200]	; (8003fcc <HAL_DMA_IRQHandler+0xcb8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d036      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a31      	ldr	r2, [pc, #196]	; (8003fd0 <HAL_DMA_IRQHandler+0xcbc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d031      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <HAL_DMA_IRQHandler+0xcc0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02c      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <HAL_DMA_IRQHandler+0xcc4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d027      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2c      	ldr	r2, [pc, #176]	; (8003fdc <HAL_DMA_IRQHandler+0xcc8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2b      	ldr	r2, [pc, #172]	; (8003fe0 <HAL_DMA_IRQHandler+0xccc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d01d      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <HAL_DMA_IRQHandler+0xcd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <HAL_DMA_IRQHandler+0xcd4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_DMA_IRQHandler+0xcd8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a25      	ldr	r2, [pc, #148]	; (8003ff0 <HAL_DMA_IRQHandler+0xcdc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_DMA_IRQHandler+0xce0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_DMA_IRQHandler+0xc60>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <HAL_DMA_IRQHandler+0xce4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d108      	bne.n	8003f86 <HAL_DMA_IRQHandler+0xc72>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0214 	bic.w	r2, r2, #20
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	e007      	b.n	8003f96 <HAL_DMA_IRQHandler+0xc82>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 020a 	bic.w	r2, r2, #10
 8003f94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80b8 	beq.w	8004120 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb8:	e0b2      	b.n	8004120 <HAL_DMA_IRQHandler+0xe0c>
 8003fba:	bf00      	nop
 8003fbc:	40020010 	.word	0x40020010
 8003fc0:	40020028 	.word	0x40020028
 8003fc4:	40020040 	.word	0x40020040
 8003fc8:	40020058 	.word	0x40020058
 8003fcc:	40020070 	.word	0x40020070
 8003fd0:	40020088 	.word	0x40020088
 8003fd4:	400200a0 	.word	0x400200a0
 8003fd8:	400200b8 	.word	0x400200b8
 8003fdc:	40020410 	.word	0x40020410
 8003fe0:	40020428 	.word	0x40020428
 8003fe4:	40020440 	.word	0x40020440
 8003fe8:	40020458 	.word	0x40020458
 8003fec:	40020470 	.word	0x40020470
 8003ff0:	40020488 	.word	0x40020488
 8003ff4:	400204a0 	.word	0x400204a0
 8003ff8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2208      	movs	r2, #8
 8004006:	409a      	lsls	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8088 	beq.w	8004122 <HAL_DMA_IRQHandler+0xe0e>
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8082 	beq.w	8004122 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a41      	ldr	r2, [pc, #260]	; (8004128 <HAL_DMA_IRQHandler+0xe14>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d04a      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a3f      	ldr	r2, [pc, #252]	; (800412c <HAL_DMA_IRQHandler+0xe18>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d045      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a3e      	ldr	r2, [pc, #248]	; (8004130 <HAL_DMA_IRQHandler+0xe1c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d040      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <HAL_DMA_IRQHandler+0xe20>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d03b      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3b      	ldr	r2, [pc, #236]	; (8004138 <HAL_DMA_IRQHandler+0xe24>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d036      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a39      	ldr	r2, [pc, #228]	; (800413c <HAL_DMA_IRQHandler+0xe28>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d031      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a38      	ldr	r2, [pc, #224]	; (8004140 <HAL_DMA_IRQHandler+0xe2c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d02c      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a36      	ldr	r2, [pc, #216]	; (8004144 <HAL_DMA_IRQHandler+0xe30>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d027      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a35      	ldr	r2, [pc, #212]	; (8004148 <HAL_DMA_IRQHandler+0xe34>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d022      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a33      	ldr	r2, [pc, #204]	; (800414c <HAL_DMA_IRQHandler+0xe38>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01d      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a32      	ldr	r2, [pc, #200]	; (8004150 <HAL_DMA_IRQHandler+0xe3c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d018      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a30      	ldr	r2, [pc, #192]	; (8004154 <HAL_DMA_IRQHandler+0xe40>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2f      	ldr	r2, [pc, #188]	; (8004158 <HAL_DMA_IRQHandler+0xe44>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d00e      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2d      	ldr	r2, [pc, #180]	; (800415c <HAL_DMA_IRQHandler+0xe48>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2c      	ldr	r2, [pc, #176]	; (8004160 <HAL_DMA_IRQHandler+0xe4c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d004      	beq.n	80040be <HAL_DMA_IRQHandler+0xdaa>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2a      	ldr	r2, [pc, #168]	; (8004164 <HAL_DMA_IRQHandler+0xe50>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <HAL_DMA_IRQHandler+0xdbc>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 021c 	bic.w	r2, r2, #28
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e007      	b.n	80040e0 <HAL_DMA_IRQHandler+0xdcc>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 020e 	bic.w	r2, r2, #14
 80040de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2201      	movs	r2, #1
 80040ea:	409a      	lsls	r2, r3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d009      	beq.n	8004122 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
 8004116:	e004      	b.n	8004122 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004118:	bf00      	nop
 800411a:	e002      	b.n	8004122 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800411c:	bf00      	nop
 800411e:	e000      	b.n	8004122 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004120:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40020010 	.word	0x40020010
 800412c:	40020028 	.word	0x40020028
 8004130:	40020040 	.word	0x40020040
 8004134:	40020058 	.word	0x40020058
 8004138:	40020070 	.word	0x40020070
 800413c:	40020088 	.word	0x40020088
 8004140:	400200a0 	.word	0x400200a0
 8004144:	400200b8 	.word	0x400200b8
 8004148:	40020410 	.word	0x40020410
 800414c:	40020428 	.word	0x40020428
 8004150:	40020440 	.word	0x40020440
 8004154:	40020458 	.word	0x40020458
 8004158:	40020470 	.word	0x40020470
 800415c:	40020488 	.word	0x40020488
 8004160:	400204a0 	.word	0x400204a0
 8004164:	400204b8 	.word	0x400204b8

08004168 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004176:	b2db      	uxtb	r3, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a42      	ldr	r2, [pc, #264]	; (800429c <DMA_CalcBaseAndBitshift+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d04a      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a41      	ldr	r2, [pc, #260]	; (80042a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d045      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3f      	ldr	r2, [pc, #252]	; (80042a4 <DMA_CalcBaseAndBitshift+0x120>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d040      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3e      	ldr	r2, [pc, #248]	; (80042a8 <DMA_CalcBaseAndBitshift+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d03b      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3c      	ldr	r2, [pc, #240]	; (80042ac <DMA_CalcBaseAndBitshift+0x128>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d036      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a3b      	ldr	r2, [pc, #236]	; (80042b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d031      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a39      	ldr	r2, [pc, #228]	; (80042b4 <DMA_CalcBaseAndBitshift+0x130>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02c      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a38      	ldr	r2, [pc, #224]	; (80042b8 <DMA_CalcBaseAndBitshift+0x134>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d027      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a36      	ldr	r2, [pc, #216]	; (80042bc <DMA_CalcBaseAndBitshift+0x138>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d022      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a35      	ldr	r2, [pc, #212]	; (80042c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d01d      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a33      	ldr	r2, [pc, #204]	; (80042c4 <DMA_CalcBaseAndBitshift+0x140>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d018      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <DMA_CalcBaseAndBitshift+0x144>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a30      	ldr	r2, [pc, #192]	; (80042cc <DMA_CalcBaseAndBitshift+0x148>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00e      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d009      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2d      	ldr	r2, [pc, #180]	; (80042d4 <DMA_CalcBaseAndBitshift+0x150>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d004      	beq.n	800422c <DMA_CalcBaseAndBitshift+0xa8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <DMA_CalcBaseAndBitshift+0x154>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <DMA_CalcBaseAndBitshift+0xac>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <DMA_CalcBaseAndBitshift+0xae>
 8004230:	2300      	movs	r3, #0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d024      	beq.n	8004280 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	3b10      	subs	r3, #16
 800423e:	4a27      	ldr	r2, [pc, #156]	; (80042dc <DMA_CalcBaseAndBitshift+0x158>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	4a24      	ldr	r2, [pc, #144]	; (80042e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
 8004252:	461a      	mov	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d908      	bls.n	8004270 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004266:	4013      	ands	r3, r2
 8004268:	1d1a      	adds	r2, r3, #4
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	659a      	str	r2, [r3, #88]	; 0x58
 800426e:	e00d      	b.n	800428c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6593      	str	r3, [r2, #88]	; 0x58
 800427e:	e005      	b.n	800428c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40020010 	.word	0x40020010
 80042a0:	40020028 	.word	0x40020028
 80042a4:	40020040 	.word	0x40020040
 80042a8:	40020058 	.word	0x40020058
 80042ac:	40020070 	.word	0x40020070
 80042b0:	40020088 	.word	0x40020088
 80042b4:	400200a0 	.word	0x400200a0
 80042b8:	400200b8 	.word	0x400200b8
 80042bc:	40020410 	.word	0x40020410
 80042c0:	40020428 	.word	0x40020428
 80042c4:	40020440 	.word	0x40020440
 80042c8:	40020458 	.word	0x40020458
 80042cc:	40020470 	.word	0x40020470
 80042d0:	40020488 	.word	0x40020488
 80042d4:	400204a0 	.word	0x400204a0
 80042d8:	400204b8 	.word	0x400204b8
 80042dc:	aaaaaaab 	.word	0xaaaaaaab
 80042e0:	08015e60 	.word	0x08015e60
 80042e4:	fffffc00 	.word	0xfffffc00

080042e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d120      	bne.n	800433e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	2b03      	cmp	r3, #3
 8004302:	d858      	bhi.n	80043b6 <DMA_CheckFifoParam+0xce>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <DMA_CheckFifoParam+0x24>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	0800431d 	.word	0x0800431d
 8004310:	0800432f 	.word	0x0800432f
 8004314:	0800431d 	.word	0x0800431d
 8004318:	080043b7 	.word	0x080043b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d048      	beq.n	80043ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800432c:	e045      	b.n	80043ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004332:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004336:	d142      	bne.n	80043be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800433c:	e03f      	b.n	80043be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004346:	d123      	bne.n	8004390 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	2b03      	cmp	r3, #3
 800434e:	d838      	bhi.n	80043c2 <DMA_CheckFifoParam+0xda>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <DMA_CheckFifoParam+0x70>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004369 	.word	0x08004369
 800435c:	0800436f 	.word	0x0800436f
 8004360:	08004369 	.word	0x08004369
 8004364:	08004381 	.word	0x08004381
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
        break;
 800436c:	e030      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d025      	beq.n	80043c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800437e:	e022      	b.n	80043c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004388:	d11f      	bne.n	80043ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800438e:	e01c      	b.n	80043ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	2b02      	cmp	r3, #2
 8004396:	d902      	bls.n	800439e <DMA_CheckFifoParam+0xb6>
 8004398:	2b03      	cmp	r3, #3
 800439a:	d003      	beq.n	80043a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800439c:	e018      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
        break;
 80043a2:	e015      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
    break;
 80043b4:	e00b      	b.n	80043ce <DMA_CheckFifoParam+0xe6>
        break;
 80043b6:	bf00      	nop
 80043b8:	e00a      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043ba:	bf00      	nop
 80043bc:	e008      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043be:	bf00      	nop
 80043c0:	e006      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
        break;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <DMA_CheckFifoParam+0xe8>
    break;
 80043ce:	bf00      	nop
    }
  }

  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a38      	ldr	r2, [pc, #224]	; (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a36      	ldr	r2, [pc, #216]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a35      	ldr	r2, [pc, #212]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a32      	ldr	r2, [pc, #200]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01a      	beq.n	800447e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3b08      	subs	r3, #8
 8004450:	4a28      	ldr	r2, [pc, #160]	; (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a24      	ldr	r2, [pc, #144]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800446c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	2201      	movs	r2, #1
 8004476:	409a      	lsls	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800447c:	e024      	b.n	80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	3b10      	subs	r3, #16
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d806      	bhi.n	80044a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d902      	bls.n	80044a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3308      	adds	r3, #8
 80044a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4b18      	ldr	r3, [pc, #96]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a16      	ldr	r2, [pc, #88]	; (8004510 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80044b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	58025408 	.word	0x58025408
 80044d8:	5802541c 	.word	0x5802541c
 80044dc:	58025430 	.word	0x58025430
 80044e0:	58025444 	.word	0x58025444
 80044e4:	58025458 	.word	0x58025458
 80044e8:	5802546c 	.word	0x5802546c
 80044ec:	58025480 	.word	0x58025480
 80044f0:	58025494 	.word	0x58025494
 80044f4:	cccccccd 	.word	0xcccccccd
 80044f8:	16009600 	.word	0x16009600
 80044fc:	58025880 	.word	0x58025880
 8004500:	aaaaaaab 	.word	0xaaaaaaab
 8004504:	400204b8 	.word	0x400204b8
 8004508:	4002040f 	.word	0x4002040f
 800450c:	10008200 	.word	0x10008200
 8004510:	40020880 	.word	0x40020880

08004514 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d04a      	beq.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d847      	bhi.n	80045c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a25      	ldr	r2, [pc, #148]	; (80045cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d022      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a24      	ldr	r2, [pc, #144]	; (80045d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d01d      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d018      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d009      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4b17      	ldr	r3, [pc, #92]	; (80045ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800459c:	671a      	str	r2, [r3, #112]	; 0x70
 800459e:	e009      	b.n	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80045b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	58025408 	.word	0x58025408
 80045d0:	5802541c 	.word	0x5802541c
 80045d4:	58025430 	.word	0x58025430
 80045d8:	58025444 	.word	0x58025444
 80045dc:	58025458 	.word	0x58025458
 80045e0:	5802546c 	.word	0x5802546c
 80045e4:	58025480 	.word	0x58025480
 80045e8:	58025494 	.word	0x58025494
 80045ec:	1600963f 	.word	0x1600963f
 80045f0:	58025940 	.word	0x58025940
 80045f4:	1000823f 	.word	0x1000823f
 80045f8:	40020940 	.word	0x40020940

080045fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800460a:	4b89      	ldr	r3, [pc, #548]	; (8004830 <HAL_GPIO_Init+0x234>)
 800460c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800460e:	e194      	b.n	800493a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2101      	movs	r1, #1
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8186 	beq.w	8004934 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d00b      	beq.n	8004648 <HAL_GPIO_Init+0x4c>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d007      	beq.n	8004648 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800463c:	2b11      	cmp	r3, #17
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b12      	cmp	r3, #18
 8004646:	d130      	bne.n	80046aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800467e:	2201      	movs	r2, #1
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0201 	and.w	r2, r3, #1
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4013      	ands	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0xee>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b12      	cmp	r3, #18
 80046e8:	d123      	bne.n	8004732 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	08da      	lsrs	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3208      	adds	r2, #8
 80046f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	08da      	lsrs	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3208      	adds	r2, #8
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	2203      	movs	r2, #3
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80e0 	beq.w	8004934 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_GPIO_Init+0x238>)
 8004776:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800477a:	4a2e      	ldr	r2, [pc, #184]	; (8004834 <HAL_GPIO_Init+0x238>)
 800477c:	f043 0302 	orr.w	r3, r3, #2
 8004780:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <HAL_GPIO_Init+0x238>)
 8004786:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <HAL_GPIO_Init+0x23c>)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	220f      	movs	r2, #15
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a20      	ldr	r2, [pc, #128]	; (800483c <HAL_GPIO_Init+0x240>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d052      	beq.n	8004864 <HAL_GPIO_Init+0x268>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_GPIO_Init+0x244>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d031      	beq.n	800482a <HAL_GPIO_Init+0x22e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <HAL_GPIO_Init+0x248>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d02b      	beq.n	8004826 <HAL_GPIO_Init+0x22a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1d      	ldr	r2, [pc, #116]	; (8004848 <HAL_GPIO_Init+0x24c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d025      	beq.n	8004822 <HAL_GPIO_Init+0x226>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_GPIO_Init+0x250>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01f      	beq.n	800481e <HAL_GPIO_Init+0x222>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <HAL_GPIO_Init+0x254>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d019      	beq.n	800481a <HAL_GPIO_Init+0x21e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_GPIO_Init+0x258>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_GPIO_Init+0x21a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a19      	ldr	r2, [pc, #100]	; (8004858 <HAL_GPIO_Init+0x25c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_GPIO_Init+0x216>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_GPIO_Init+0x260>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d007      	beq.n	800480e <HAL_GPIO_Init+0x212>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a17      	ldr	r2, [pc, #92]	; (8004860 <HAL_GPIO_Init+0x264>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <HAL_GPIO_Init+0x20e>
 8004806:	2309      	movs	r3, #9
 8004808:	e02d      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800480a:	230a      	movs	r3, #10
 800480c:	e02b      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800480e:	2308      	movs	r3, #8
 8004810:	e029      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004812:	2307      	movs	r3, #7
 8004814:	e027      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004816:	2306      	movs	r3, #6
 8004818:	e025      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800481a:	2305      	movs	r3, #5
 800481c:	e023      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800481e:	2304      	movs	r3, #4
 8004820:	e021      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004822:	2303      	movs	r3, #3
 8004824:	e01f      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 8004826:	2302      	movs	r3, #2
 8004828:	e01d      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800482a:	2301      	movs	r3, #1
 800482c:	e01b      	b.n	8004866 <HAL_GPIO_Init+0x26a>
 800482e:	bf00      	nop
 8004830:	58000080 	.word	0x58000080
 8004834:	58024400 	.word	0x58024400
 8004838:	58000400 	.word	0x58000400
 800483c:	58020000 	.word	0x58020000
 8004840:	58020400 	.word	0x58020400
 8004844:	58020800 	.word	0x58020800
 8004848:	58020c00 	.word	0x58020c00
 800484c:	58021000 	.word	0x58021000
 8004850:	58021400 	.word	0x58021400
 8004854:	58021800 	.word	0x58021800
 8004858:	58021c00 	.word	0x58021c00
 800485c:	58022000 	.word	0x58022000
 8004860:	58022400 	.word	0x58022400
 8004864:	2300      	movs	r3, #0
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	f002 0203 	and.w	r2, r2, #3
 800486c:	0092      	lsls	r2, r2, #2
 800486e:	4093      	lsls	r3, r2
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004876:	4938      	ldr	r1, [pc, #224]	; (8004958 <HAL_GPIO_Init+0x35c>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80048fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800492c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	f47f ae63 	bne.w	8004610 <HAL_GPIO_Init+0x14>
  }
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	3724      	adds	r7, #36	; 0x24
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	58000400 	.word	0x58000400

0800495c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
 8004968:	4613      	mov	r3, r2
 800496a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800496c:	787b      	ldrb	r3, [r7, #1]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004972:	887a      	ldrh	r2, [r7, #2]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004978:	e003      	b.n	8004982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	041a      	lsls	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	619a      	str	r2, [r3, #24]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <HAL_HSEM_FastTake+0x2c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3320      	adds	r3, #32
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <HAL_HSEM_FastTake+0x30>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	58026400 	.word	0x58026400
 80049c0:	80000300 	.word	0x80000300

080049c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80049ce:	4906      	ldr	r1, [pc, #24]	; (80049e8 <HAL_HSEM_Release+0x24>)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	58026400 	.word	0x58026400

080049ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e07f      	b.n	8004afe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc f826 	bl	8000a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2224      	movs	r2, #36	; 0x24
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d107      	bne.n	8004a66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a62:	609a      	str	r2, [r3, #8]
 8004a64:	e006      	b.n	8004a74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d104      	bne.n	8004a86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_I2C_Init+0x11c>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	ea42 0103 	orr.w	r1, r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	021a      	lsls	r2, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69d9      	ldr	r1, [r3, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	02008000 	.word	0x02008000

08004b0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
  }
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d010      	beq.n	8004b86 <HAL_I2C_ER_IRQHandler+0x46>
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	09db      	lsrs	r3, r3, #7
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b74:	f043 0201 	orr.w	r2, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b84:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	0a9b      	lsrs	r3, r3, #10
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d010      	beq.n	8004bb4 <HAL_I2C_ER_IRQHandler+0x74>
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	f043 0208 	orr.w	r2, r3, #8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bb2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	0a5b      	lsrs	r3, r3, #9
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <HAL_I2C_ER_IRQHandler+0xa2>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	09db      	lsrs	r3, r3, #7
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	f043 0202 	orr.w	r2, r3, #2
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 030b 	and.w	r3, r3, #11
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fc77 	bl	80054e8 <I2C_ITError>
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
 8004c36:	4613      	mov	r3, r2
 8004c38:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <I2C_Slave_ISR_IT+0x24>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0ec      	b.n	8004e80 <I2C_Slave_ISR_IT+0x1fe>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <I2C_Slave_ISR_IT+0x4c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004cc6:	6939      	ldr	r1, [r7, #16]
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f9bf 	bl	800504c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d04d      	beq.n	8004d76 <I2C_Slave_ISR_IT+0xf4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d047      	beq.n	8004d76 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d128      	bne.n	8004d42 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b28      	cmp	r3, #40	; 0x28
 8004cfa:	d108      	bne.n	8004d0e <I2C_Slave_ISR_IT+0x8c>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d02:	d104      	bne.n	8004d0e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d04:	6939      	ldr	r1, [r7, #16]
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fb98 	bl	800543c <I2C_ITListenCplt>
 8004d0c:	e032      	b.n	8004d74 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b29      	cmp	r3, #41	; 0x29
 8004d18:	d10e      	bne.n	8004d38 <I2C_Slave_ISR_IT+0xb6>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d20:	d00a      	beq.n	8004d38 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2210      	movs	r2, #16
 8004d28:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fcd3 	bl	80056d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f92d 	bl	8004f90 <I2C_ITSlaveSeqCplt>
 8004d36:	e01d      	b.n	8004d74 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004d40:	e096      	b.n	8004e70 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2210      	movs	r2, #16
 8004d48:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f043 0204 	orr.w	r2, r3, #4
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <I2C_Slave_ISR_IT+0xe4>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d62:	f040 8085 	bne.w	8004e70 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 fbbb 	bl	80054e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004d72:	e07d      	b.n	8004e70 <I2C_Slave_ISR_IT+0x1ee>
 8004d74:	e07c      	b.n	8004e70 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	089b      	lsrs	r3, r3, #2
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d030      	beq.n	8004de4 <I2C_Slave_ISR_IT+0x162>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	089b      	lsrs	r3, r3, #2
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02a      	beq.n	8004de4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d018      	beq.n	8004dca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d14f      	bne.n	8004e74 <I2C_Slave_ISR_IT+0x1f2>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dda:	d04b      	beq.n	8004e74 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f8d7 	bl	8004f90 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004de2:	e047      	b.n	8004e74 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	08db      	lsrs	r3, r3, #3
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004dfc:	6939      	ldr	r1, [r7, #16]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f842 	bl	8004e88 <I2C_ITAddrCplt>
 8004e04:	e037      	b.n	8004e76 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d031      	beq.n	8004e76 <I2C_Slave_ISR_IT+0x1f4>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02b      	beq.n	8004e76 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d018      	beq.n	8004e5a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e58:	e00d      	b.n	8004e76 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e60:	d002      	beq.n	8004e68 <I2C_Slave_ISR_IT+0x1e6>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f891 	bl	8004f90 <I2C_ITSlaveSeqCplt>
 8004e6e:	e002      	b.n	8004e76 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004e74:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e9e:	2b28      	cmp	r3, #40	; 0x28
 8004ea0:	d16a      	bne.n	8004f78 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ec0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ece:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004edc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d138      	bne.n	8004f58 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	09db      	lsrs	r3, r3, #7
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	89bb      	ldrh	r3, [r7, #12]
 8004eee:	4053      	eors	r3, r2
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f003 0306 	and.w	r3, r3, #6
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11c      	bne.n	8004f34 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004efa:	897b      	ldrh	r3, [r7, #10]
 8004efc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d13b      	bne.n	8004f88 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f26:	89ba      	ldrh	r2, [r7, #12]
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fe7c 	bl	8004c2a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f32:	e029      	b.n	8004f88 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004f34:	893b      	ldrh	r3, [r7, #8]
 8004f36:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fc0c 	bl	800575a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f4a:	89ba      	ldrh	r2, [r7, #12]
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff fe6a 	bl	8004c2a <HAL_I2C_AddrCallback>
}
 8004f56:	e017      	b.n	8004f88 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fbfc 	bl	800575a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004f6a:	89ba      	ldrh	r2, [r7, #12]
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff fe5a 	bl	8004c2a <HAL_I2C_AddrCallback>
}
 8004f76:	e007      	b.n	8004f88 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	0b9b      	lsrs	r3, r3, #14
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e00d      	b.n	8004fe2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	0bdb      	lsrs	r3, r3, #15
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fe0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b29      	cmp	r3, #41	; 0x29
 8004fec:	d112      	bne.n	8005014 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2228      	movs	r2, #40	; 0x28
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2221      	movs	r2, #33	; 0x21
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fbab 	bl	800575a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fdf8 	bl	8004c02 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005012:	e017      	b.n	8005044 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b2a      	cmp	r3, #42	; 0x2a
 800501e:	d111      	bne.n	8005044 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2228      	movs	r2, #40	; 0x28
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2222      	movs	r2, #34	; 0x22
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800502e:	2102      	movs	r1, #2
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fb92 	bl	800575a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fde9 	bl	8004c16 <HAL_I2C_SlaveRxCpltCallback>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005068:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2220      	movs	r2, #32
 8005070:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b21      	cmp	r3, #33	; 0x21
 8005076:	d002      	beq.n	800507e <I2C_ITSlaveCplt+0x32>
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b29      	cmp	r3, #41	; 0x29
 800507c:	d108      	bne.n	8005090 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800507e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fb69 	bl	800575a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2221      	movs	r2, #33	; 0x21
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
 800508e:	e00d      	b.n	80050ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b22      	cmp	r3, #34	; 0x22
 8005094:	d002      	beq.n	800509c <I2C_ITSlaveCplt+0x50>
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b2a      	cmp	r3, #42	; 0x2a
 800509a:	d107      	bne.n	80050ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800509c:	f248 0102 	movw	r1, #32770	; 0x8002
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb5a 	bl	800575a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2222      	movs	r2, #34	; 0x22
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4b80      	ldr	r3, [pc, #512]	; (80052c8 <I2C_ITSlaveCplt+0x27c>)
 80050c8:	400b      	ands	r3, r1
 80050ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fb02 	bl	80056d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	0b9b      	lsrs	r3, r3, #14
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d07a      	beq.n	80051d4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8111 	beq.w	800531a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a73      	ldr	r2, [pc, #460]	; (80052cc <I2C_ITSlaveCplt+0x280>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d059      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a71      	ldr	r2, [pc, #452]	; (80052d0 <I2C_ITSlaveCplt+0x284>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d053      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a6f      	ldr	r2, [pc, #444]	; (80052d4 <I2C_ITSlaveCplt+0x288>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d04d      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6d      	ldr	r2, [pc, #436]	; (80052d8 <I2C_ITSlaveCplt+0x28c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d047      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6b      	ldr	r2, [pc, #428]	; (80052dc <I2C_ITSlaveCplt+0x290>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d041      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a69      	ldr	r2, [pc, #420]	; (80052e0 <I2C_ITSlaveCplt+0x294>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d03b      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a67      	ldr	r2, [pc, #412]	; (80052e4 <I2C_ITSlaveCplt+0x298>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d035      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a65      	ldr	r2, [pc, #404]	; (80052e8 <I2C_ITSlaveCplt+0x29c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d02f      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a63      	ldr	r2, [pc, #396]	; (80052ec <I2C_ITSlaveCplt+0x2a0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d029      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a61      	ldr	r2, [pc, #388]	; (80052f0 <I2C_ITSlaveCplt+0x2a4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d023      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a5f      	ldr	r2, [pc, #380]	; (80052f4 <I2C_ITSlaveCplt+0x2a8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d01d      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a5d      	ldr	r2, [pc, #372]	; (80052f8 <I2C_ITSlaveCplt+0x2ac>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d017      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a5b      	ldr	r2, [pc, #364]	; (80052fc <I2C_ITSlaveCplt+0x2b0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d011      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a59      	ldr	r2, [pc, #356]	; (8005300 <I2C_ITSlaveCplt+0x2b4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00b      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a57      	ldr	r2, [pc, #348]	; (8005304 <I2C_ITSlaveCplt+0x2b8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d005      	beq.n	80051b8 <I2C_ITSlaveCplt+0x16c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a55      	ldr	r2, [pc, #340]	; (8005308 <I2C_ITSlaveCplt+0x2bc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d105      	bne.n	80051c4 <I2C_ITSlaveCplt+0x178>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	e004      	b.n	80051ce <I2C_ITSlaveCplt+0x182>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	8553      	strh	r3, [r2, #42]	; 0x2a
 80051d2:	e0a2      	b.n	800531a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	0bdb      	lsrs	r3, r3, #15
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 809c 	beq.w	800531a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 808f 	beq.w	800531a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a32      	ldr	r2, [pc, #200]	; (80052cc <I2C_ITSlaveCplt+0x280>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d059      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a30      	ldr	r2, [pc, #192]	; (80052d0 <I2C_ITSlaveCplt+0x284>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d053      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2e      	ldr	r2, [pc, #184]	; (80052d4 <I2C_ITSlaveCplt+0x288>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d04d      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2c      	ldr	r2, [pc, #176]	; (80052d8 <I2C_ITSlaveCplt+0x28c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d047      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <I2C_ITSlaveCplt+0x290>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d041      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <I2C_ITSlaveCplt+0x294>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d03b      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <I2C_ITSlaveCplt+0x298>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d035      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a24      	ldr	r2, [pc, #144]	; (80052e8 <I2C_ITSlaveCplt+0x29c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d02f      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a22      	ldr	r2, [pc, #136]	; (80052ec <I2C_ITSlaveCplt+0x2a0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d029      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <I2C_ITSlaveCplt+0x2a4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d023      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <I2C_ITSlaveCplt+0x2a8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d01d      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <I2C_ITSlaveCplt+0x2ac>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d017      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <I2C_ITSlaveCplt+0x2b0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d011      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <I2C_ITSlaveCplt+0x2b4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a16      	ldr	r2, [pc, #88]	; (8005304 <I2C_ITSlaveCplt+0x2b8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d005      	beq.n	80052bc <I2C_ITSlaveCplt+0x270>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a14      	ldr	r2, [pc, #80]	; (8005308 <I2C_ITSlaveCplt+0x2bc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d127      	bne.n	800530c <I2C_ITSlaveCplt+0x2c0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	e026      	b.n	8005316 <I2C_ITSlaveCplt+0x2ca>
 80052c8:	fe00e800 	.word	0xfe00e800
 80052cc:	40020010 	.word	0x40020010
 80052d0:	40020028 	.word	0x40020028
 80052d4:	40020040 	.word	0x40020040
 80052d8:	40020058 	.word	0x40020058
 80052dc:	40020070 	.word	0x40020070
 80052e0:	40020088 	.word	0x40020088
 80052e4:	400200a0 	.word	0x400200a0
 80052e8:	400200b8 	.word	0x400200b8
 80052ec:	40020410 	.word	0x40020410
 80052f0:	40020428 	.word	0x40020428
 80052f4:	40020440 	.word	0x40020440
 80052f8:	40020458 	.word	0x40020458
 80052fc:	40020470 	.word	0x40020470
 8005300:	40020488 	.word	0x40020488
 8005304:	400204a0 	.word	0x400204a0
 8005308:	400204b8 	.word	0x400204b8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	b29b      	uxth	r3, r3
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	089b      	lsrs	r3, r3, #2
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d020      	beq.n	8005368 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00c      	beq.n	8005368 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	2b00      	cmp	r3, #0
 8005392:	d010      	beq.n	80053b6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8a4 	bl	80054e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b28      	cmp	r3, #40	; 0x28
 80053aa:	d141      	bne.n	8005430 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f844 	bl	800543c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053b4:	e03c      	b.n	8005430 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053be:	d014      	beq.n	80053ea <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff fde5 	bl	8004f90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	; (8005438 <I2C_ITSlaveCplt+0x3ec>)
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff fc2f 	bl	8004c46 <HAL_I2C_ListenCpltCallback>
}
 80053e8:	e022      	b.n	8005430 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b22      	cmp	r3, #34	; 0x22
 80053f4:	d10e      	bne.n	8005414 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fc02 	bl	8004c16 <HAL_I2C_SlaveRxCpltCallback>
}
 8005412:	e00d      	b.n	8005430 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fbe9 	bl	8004c02 <HAL_I2C_SlaveTxCpltCallback>
}
 8005430:	bf00      	nop
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	ffff0000 	.word	0xffff0000

0800543c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <I2C_ITListenCplt+0xa8>)
 800544a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	089b      	lsrs	r3, r3, #2
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d022      	beq.n	80054ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b2:	f043 0204 	orr.w	r2, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80054ba:	f248 0103 	movw	r1, #32771	; 0x8003
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f94b 	bl	800575a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fbb6 	bl	8004c46 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	ffff0000 	.word	0xffff0000

080054e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a5d      	ldr	r2, [pc, #372]	; (800567c <I2C_ITError+0x194>)
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b28      	cmp	r3, #40	; 0x28
 800551e:	d005      	beq.n	800552c <I2C_ITError+0x44>
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b29      	cmp	r3, #41	; 0x29
 8005524:	d002      	beq.n	800552c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b2a      	cmp	r3, #42	; 0x2a
 800552a:	d10b      	bne.n	8005544 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800552c:	2103      	movs	r1, #3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f913 	bl	800575a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2228      	movs	r2, #40	; 0x28
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a50      	ldr	r2, [pc, #320]	; (8005680 <I2C_ITError+0x198>)
 8005540:	635a      	str	r2, [r3, #52]	; 0x34
 8005542:	e011      	b.n	8005568 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005544:	f248 0103 	movw	r1, #32771	; 0x8003
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f906 	bl	800575a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b60      	cmp	r3, #96	; 0x60
 8005558:	d003      	beq.n	8005562 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	2b00      	cmp	r3, #0
 8005574:	d039      	beq.n	80055ea <I2C_ITError+0x102>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b11      	cmp	r3, #17
 800557a:	d002      	beq.n	8005582 <I2C_ITError+0x9a>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b21      	cmp	r3, #33	; 0x21
 8005580:	d133      	bne.n	80055ea <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005590:	d107      	bne.n	80055a2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fdde 	bl	8004168 <HAL_DMA_GetState>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d017      	beq.n	80055e2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	4a33      	ldr	r2, [pc, #204]	; (8005684 <I2C_ITError+0x19c>)
 80055b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd fc60 	bl	8002e8c <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04d      	beq.n	800566e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055e0:	e045      	b.n	800566e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f850 	bl	8005688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055e8:	e041      	b.n	800566e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d039      	beq.n	8005666 <I2C_ITError+0x17e>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2b12      	cmp	r3, #18
 80055f6:	d002      	beq.n	80055fe <I2C_ITError+0x116>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b22      	cmp	r3, #34	; 0x22
 80055fc:	d133      	bne.n	8005666 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800560c:	d107      	bne.n	800561e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800561c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	4618      	mov	r0, r3
 8005624:	f7fe fda0 	bl	8004168 <HAL_DMA_GetState>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d017      	beq.n	800565e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	4a14      	ldr	r2, [pc, #80]	; (8005684 <I2C_ITError+0x19c>)
 8005634:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	4618      	mov	r0, r3
 8005644:	f7fd fc22 	bl	8002e8c <HAL_DMA_Abort_IT>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d011      	beq.n	8005672 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005658:	4610      	mov	r0, r2
 800565a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800565c:	e009      	b.n	8005672 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f812 	bl	8005688 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005664:	e005      	b.n	8005672 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f80e 	bl	8005688 <I2C_TreatErrorCallback>
  }
}
 800566c:	e002      	b.n	8005674 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800566e:	bf00      	nop
 8005670:	e000      	b.n	8005674 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005672:	bf00      	nop
}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	ffff0000 	.word	0xffff0000
 8005680:	08004c83 	.word	0x08004c83
 8005684:	0800571f 	.word	0x0800571f

08005688 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b60      	cmp	r3, #96	; 0x60
 800569a:	d10e      	bne.n	80056ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fadb 	bl	8004c6e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056b8:	e009      	b.n	80056ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fac6 	bl	8004c5a <HAL_I2C_ErrorCallback>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d103      	bne.n	80056f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2200      	movs	r2, #0
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d007      	beq.n	8005712 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	619a      	str	r2, [r3, #24]
  }
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	2200      	movs	r2, #0
 800573a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	2200      	movs	r2, #0
 800574a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f7ff ff9b 	bl	8005688 <I2C_TreatErrorCallback>
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800576a:	887b      	ldrh	r3, [r7, #2]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00f      	beq.n	8005794 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800577a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005788:	2b28      	cmp	r3, #40	; 0x28
 800578a:	d003      	beq.n	8005794 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005792:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00f      	beq.n	80057be <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80057a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057b2:	2b28      	cmp	r3, #40	; 0x28
 80057b4:	d003      	beq.n	80057be <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80057bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80057be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	da03      	bge.n	80057ce <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80057cc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	2b10      	cmp	r3, #16
 80057d2:	d103      	bne.n	80057dc <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80057da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d103      	bne.n	80057ea <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f043 0320 	orr.w	r3, r3, #32
 80057e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d103      	bne.n	80057f8 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6819      	ldr	r1, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	43da      	mvns	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	400a      	ands	r2, r1
 8005808:	601a      	str	r2, [r3, #0]
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b20      	cmp	r3, #32
 800582a:	d138      	bne.n	800589e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005836:	2302      	movs	r3, #2
 8005838:	e032      	b.n	80058a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2224      	movs	r2, #36	; 0x24
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005868:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6819      	ldr	r1, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e000      	b.n	80058a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800589e:	2302      	movs	r3, #2
  }
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d139      	bne.n	8005936 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e033      	b.n	8005938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005946:	b08f      	sub	sp, #60	; 0x3c
 8005948:	af0a      	add	r7, sp, #40	; 0x28
 800594a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e116      	b.n	8005b84 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d106      	bne.n	8005976 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f00d faa5 	bl	8012ec0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2203      	movs	r2, #3
 800597a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f009 ff38 	bl	800f80a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	687e      	ldr	r6, [r7, #4]
 80059a2:	466d      	mov	r5, sp
 80059a4:	f106 0410 	add.w	r4, r6, #16
 80059a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80059b8:	1d33      	adds	r3, r6, #4
 80059ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059bc:	6838      	ldr	r0, [r7, #0]
 80059be:	f009 fe03 	bl	800f5c8 <USB_CoreInit>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0d7      	b.n	8005b84 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f009 ff26 	bl	800f82c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e04a      	b.n	8005a7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	333d      	adds	r3, #61	; 0x3d
 80059f6:	2201      	movs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	333c      	adds	r3, #60	; 0x3c
 8005a0a:	7bfa      	ldrb	r2, [r7, #15]
 8005a0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a0e:	7bfa      	ldrb	r2, [r7, #15]
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	b298      	uxth	r0, r3
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3342      	adds	r3, #66	; 0x42
 8005a22:	4602      	mov	r2, r0
 8005a24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	333f      	adds	r3, #63	; 0x3f
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a3a:	7bfa      	ldrb	r2, [r7, #15]
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	3344      	adds	r3, #68	; 0x44
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a4e:	7bfa      	ldrb	r2, [r7, #15]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3348      	adds	r3, #72	; 0x48
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a62:	7bfa      	ldrb	r2, [r7, #15]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	3350      	adds	r3, #80	; 0x50
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
 8005a7c:	7bfa      	ldrb	r2, [r7, #15]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d3af      	bcc.n	80059e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
 8005a8a:	e044      	b.n	8005b16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005aa2:	7bfa      	ldrb	r2, [r7, #15]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ab8:	7bfa      	ldrb	r2, [r7, #15]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ace:	7bfa      	ldrb	r2, [r7, #15]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ae4:	7bfa      	ldrb	r2, [r7, #15]
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	1a9b      	subs	r3, r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	3301      	adds	r3, #1
 8005b14:	73fb      	strb	r3, [r7, #15]
 8005b16:	7bfa      	ldrb	r2, [r7, #15]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d3b5      	bcc.n	8005a8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	687e      	ldr	r6, [r7, #4]
 8005b28:	466d      	mov	r5, sp
 8005b2a:	f106 0410 	add.w	r4, r6, #16
 8005b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b3e:	1d33      	adds	r3, r6, #4
 8005b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b42:	6838      	ldr	r0, [r7, #0]
 8005b44:	f009 fe9c 	bl	800f880 <USB_DevInit>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e014      	b.n	8005b84 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d102      	bne.n	8005b78 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 f892 	bl	8006c9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f00a ff1c 	bl	80109ba <USB_DevDisconnect>

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_PCD_Start+0x1c>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e020      	b.n	8005bea <HAL_PCD_Start+0x5e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d109      	bne.n	8005bcc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d005      	beq.n	8005bcc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f009 fe09 	bl	800f7e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f00a fecc 	bl	8010978 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bf2:	b590      	push	{r4, r7, lr}
 8005bf4:	b08d      	sub	sp, #52	; 0x34
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f00a ff8a 	bl	8010b22 <USB_GetMode>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 83ca 	bne.w	80063aa <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f00a feee 	bl	80109fc <USB_ReadInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 83c0 	beq.w	80063a8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f00a fee5 	bl	80109fc <USB_ReadInterrupts>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d107      	bne.n	8005c4c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f002 0202 	and.w	r2, r2, #2
 8005c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f00a fed3 	bl	80109fc <USB_ReadInterrupts>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d161      	bne.n	8005d24 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0210 	bic.w	r2, r2, #16
 8005c6e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	0c5b      	lsrs	r3, r3, #17
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d124      	bne.n	8005ce6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d035      	beq.n	8005d14 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6a38      	ldr	r0, [r7, #32]
 8005cbc:	f00a fd0a 	bl	80106d4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	091b      	lsrs	r3, r3, #4
 8005cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ccc:	441a      	add	r2, r3
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cde:	441a      	add	r2, r3
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	619a      	str	r2, [r3, #24]
 8005ce4:	e016      	b.n	8005d14 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	0c5b      	lsrs	r3, r3, #17
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d110      	bne.n	8005d14 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6a38      	ldr	r0, [r7, #32]
 8005cfe:	f00a fce9 	bl	80106d4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d0e:	441a      	add	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0210 	orr.w	r2, r2, #16
 8005d22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f00a fe67 	bl	80109fc <USB_ReadInterrupts>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d38:	d16e      	bne.n	8005e18 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f00a fe6d 	bl	8010a22 <USB_ReadDevAllOutEpInterrupt>
 8005d48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005d4a:	e062      	b.n	8005e12 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d057      	beq.n	8005e06 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f00a fe92 	bl	8010a8a <USB_ReadDevOutEPInterrupt>
 8005d66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2301      	movs	r3, #1
 8005d82:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fdde 	bl	8006948 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f003 0308 	and.w	r3, r3, #8
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00c      	beq.n	8005db0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	2308      	movs	r3, #8
 8005da6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fed8 	bl	8006b60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2310      	movs	r3, #16
 8005dca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	461a      	mov	r2, r3
 8005de4:	2320      	movs	r3, #32
 8005de6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d009      	beq.n	8005e06 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e04:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	3301      	adds	r3, #1
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d199      	bne.n	8005d4c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f00a fded 	bl	80109fc <USB_ReadInterrupts>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e2c:	f040 80c0 	bne.w	8005fb0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f00a fe0e 	bl	8010a56 <USB_ReadDevAllInEpInterrupt>
 8005e3a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005e40:	e0b2      	b.n	8005fa8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80a7 	beq.w	8005f9c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f00a fe34 	bl	8010ac6 <USB_ReadDevInEPInterrupt>
 8005e5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d057      	beq.n	8005f1a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	2201      	movs	r2, #1
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d132      	bne.n	8005f0e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	1a9b      	subs	r3, r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3348      	adds	r3, #72	; 0x48
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	1a9b      	subs	r3, r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4403      	add	r3, r0
 8005ec8:	3344      	adds	r3, #68	; 0x44
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4419      	add	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4403      	add	r3, r0
 8005edc:	3348      	adds	r3, #72	; 0x48
 8005ede:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d113      	bne.n	8005f0e <HAL_PCD_IRQHandler+0x31c>
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3350      	adds	r3, #80	; 0x50
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d108      	bne.n	8005f0e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f06:	461a      	mov	r2, r3
 8005f08:	2101      	movs	r1, #1
 8005f0a:	f00a fe3d 	bl	8010b88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	4619      	mov	r1, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f00d f870 	bl	8012ffa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	461a      	mov	r2, r3
 8005f32:	2308      	movs	r3, #8
 8005f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2310      	movs	r3, #16
 8005f50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f84:	461a      	mov	r2, r3
 8005f86:	2302      	movs	r3, #2
 8005f88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fc48 	bl	800682c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f47f af49 	bne.w	8005e42 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f00a fd21 	bl	80109fc <USB_ReadInterrupts>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc4:	d122      	bne.n	800600c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d108      	bne.n	8005ff6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fec:	2100      	movs	r1, #0
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fe78 	bl	8006ce4 <HAL_PCDEx_LPM_Callback>
 8005ff4:	e002      	b.n	8005ffc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f00d f876 	bl	80130e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695a      	ldr	r2, [r3, #20]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800600a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f00a fcf3 	bl	80109fc <USB_ReadInterrupts>
 8006016:	4603      	mov	r3, r0
 8006018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006020:	d112      	bne.n	8006048 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b01      	cmp	r3, #1
 8006030:	d102      	bne.n	8006038 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f00d f832 	bl	801309c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006046:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f00a fcd5 	bl	80109fc <USB_ReadInterrupts>
 8006052:	4603      	mov	r3, r0
 8006054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800605c:	d121      	bne.n	80060a2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695a      	ldr	r2, [r3, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800606c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d111      	bne.n	800609c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006092:	2101      	movs	r1, #1
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fe25 	bl	8006ce4 <HAL_PCDEx_LPM_Callback>
 800609a:	e002      	b.n	80060a2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f00c fffd 	bl	801309c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f00a fca8 	bl	80109fc <USB_ReadInterrupts>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	f040 80c7 	bne.w	8006248 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2110      	movs	r1, #16
 80060d4:	4618      	mov	r0, r3
 80060d6:	f009 fd31 	bl	800fb3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060de:	e056      	b.n	800618e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	461a      	mov	r2, r3
 80060ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006112:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006132:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	461a      	mov	r2, r3
 8006142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006146:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006166:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006178:	0151      	lsls	r1, r2, #5
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	440a      	add	r2, r1
 800617e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006186:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	3301      	adds	r3, #1
 800618c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006194:	429a      	cmp	r2, r3
 8006196:	d3a3      	bcc.n	80060e0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80061aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d016      	beq.n	80061e2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c4:	f043 030b 	orr.w	r3, r3, #11
 80061c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061da:	f043 030b 	orr.w	r3, r3, #11
 80061de:	6453      	str	r3, [r2, #68]	; 0x44
 80061e0:	e015      	b.n	800620e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f0:	4619      	mov	r1, r3
 80061f2:	f242 032b 	movw	r3, #8235	; 0x202b
 80061f6:	4313      	orrs	r3, r2
 80061f8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006208:	f043 030b 	orr.w	r3, r3, #11
 800620c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006220:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006232:	461a      	mov	r2, r3
 8006234:	f00a fca8 	bl	8010b88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4618      	mov	r0, r3
 800624e:	f00a fbd5 	bl	80109fc <USB_ReadInterrupts>
 8006252:	4603      	mov	r3, r0
 8006254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625c:	d124      	bne.n	80062a8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f00a fc6c 	bl	8010b40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f009 fcc6 	bl	800fbfe <USB_GetDevSpeed>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681c      	ldr	r4, [r3, #0]
 800627e:	f001 fce7 	bl	8007c50 <HAL_RCC_GetHCLKFreq>
 8006282:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	4620      	mov	r0, r4
 800628e:	f009 fa09 	bl	800f6a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f00c fed9 	bl	801304a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80062a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f00a fba5 	bl	80109fc <USB_ReadInterrupts>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d10a      	bne.n	80062d2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f00c feb6 	bl	801302e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f002 0208 	and.w	r2, r2, #8
 80062d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00a fb90 	bl	80109fc <USB_ReadInterrupts>
 80062dc:	4603      	mov	r3, r0
 80062de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062e6:	d10f      	bne.n	8006308 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f00c ff18 	bl	8013128 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4618      	mov	r0, r3
 800630e:	f00a fb75 	bl	80109fc <USB_ReadInterrupts>
 8006312:	4603      	mov	r3, r0
 8006314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800631c:	d10f      	bne.n	800633e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	b2db      	uxtb	r3, r3
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f00c feeb 	bl	8013104 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800633c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f00a fb5a 	bl	80109fc <USB_ReadInterrupts>
 8006348:	4603      	mov	r3, r0
 800634a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800634e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006352:	d10a      	bne.n	800636a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f00c fef9 	bl	801314c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f00a fb44 	bl	80109fc <USB_ReadInterrupts>
 8006374:	4603      	mov	r3, r0
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b04      	cmp	r3, #4
 800637c:	d115      	bne.n	80063aa <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f00c fee9 	bl	8013168 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6859      	ldr	r1, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	e000      	b.n	80063aa <HAL_PCD_IRQHandler+0x7b8>
      return;
 80063a8:	bf00      	nop
    }
  }
}
 80063aa:	3734      	adds	r7, #52	; 0x34
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd90      	pop	{r4, r7, pc}

080063b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_PCD_SetAddress+0x1a>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e013      	b.n	80063f2 <HAL_PCD_SetAddress+0x42>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	4611      	mov	r1, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f00a faa2 	bl	801092c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	4608      	mov	r0, r1
 8006404:	4611      	mov	r1, r2
 8006406:	461a      	mov	r2, r3
 8006408:	4603      	mov	r3, r0
 800640a:	70fb      	strb	r3, [r7, #3]
 800640c:	460b      	mov	r3, r1
 800640e:	803b      	strh	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800641c:	2b00      	cmp	r3, #0
 800641e:	da0f      	bge.n	8006440 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	f003 020f 	and.w	r2, r3, #15
 8006426:	4613      	mov	r3, r2
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	3338      	adds	r3, #56	; 0x38
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	705a      	strb	r2, [r3, #1]
 800643e:	e00f      	b.n	8006460 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	f003 020f 	and.w	r2, r3, #15
 8006446:	4613      	mov	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	3304      	adds	r3, #4
 8006458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	b2da      	uxtb	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800646c:	883a      	ldrh	r2, [r7, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	78ba      	ldrb	r2, [r7, #2]
 8006476:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800648a:	78bb      	ldrb	r3, [r7, #2]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d102      	bne.n	8006496 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_PCD_EP_Open+0xaa>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e00e      	b.n	80064c2 <HAL_PCD_EP_Open+0xc8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f009 fbc8 	bl	800fc48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80064c0:	7afb      	ldrb	r3, [r7, #11]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da0f      	bge.n	80064fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	f003 020f 	and.w	r2, r3, #15
 80064e4:	4613      	mov	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	1a9b      	subs	r3, r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	3338      	adds	r3, #56	; 0x38
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4413      	add	r3, r2
 80064f2:	3304      	adds	r3, #4
 80064f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	705a      	strb	r2, [r3, #1]
 80064fc:	e00f      	b.n	800651e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	3304      	adds	r3, #4
 8006516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800651e:	78fb      	ldrb	r3, [r7, #3]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	b2da      	uxtb	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_PCD_EP_Close+0x6e>
 8006534:	2302      	movs	r3, #2
 8006536:	e00e      	b.n	8006556 <HAL_PCD_EP_Close+0x8c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68f9      	ldr	r1, [r7, #12]
 8006546:	4618      	mov	r0, r3
 8006548:	f009 fc06 	bl	800fd58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	460b      	mov	r3, r1
 800656c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800656e:	7afb      	ldrb	r3, [r7, #11]
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2200      	movs	r2, #0
 8006598:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d102      	bne.n	80065ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065ba:	7afb      	ldrb	r3, [r7, #11]
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d109      	bne.n	80065d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	6979      	ldr	r1, [r7, #20]
 80065d2:	f009 fee9 	bl	80103a8 <USB_EP0StartXfer>
 80065d6:	e008      	b.n	80065ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	6979      	ldr	r1, [r7, #20]
 80065e6:	f009 fc93 	bl	800ff10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	f003 020f 	and.w	r2, r3, #15
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006616:	681b      	ldr	r3, [r3, #0]
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	460b      	mov	r3, r1
 8006632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	f003 020f 	and.w	r2, r3, #15
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	3338      	adds	r3, #56	; 0x38
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	3304      	adds	r3, #4
 800664a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2200      	movs	r2, #0
 800665c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2201      	movs	r2, #1
 8006662:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006664:	7afb      	ldrb	r3, [r7, #11]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	b2da      	uxtb	r2, r3
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	6979      	ldr	r1, [r7, #20]
 8006696:	f009 fe87 	bl	80103a8 <USB_EP0StartXfer>
 800669a:	e008      	b.n	80066ae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6818      	ldr	r0, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	6979      	ldr	r1, [r7, #20]
 80066aa:	f009 fc31 	bl	800ff10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d901      	bls.n	80066d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e050      	b.n	8006778 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80066d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	da0f      	bge.n	80066fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	f003 020f 	and.w	r2, r3, #15
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	3338      	adds	r3, #56	; 0x38
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	3304      	adds	r3, #4
 80066f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	705a      	strb	r2, [r3, #1]
 80066fc:	e00d      	b.n	800671a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	b2da      	uxtb	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HAL_PCD_EP_SetStall+0x82>
 8006736:	2302      	movs	r3, #2
 8006738:	e01e      	b.n	8006778 <HAL_PCD_EP_SetStall+0xc0>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	4618      	mov	r0, r3
 800674a:	f00a f81b 	bl	8010784 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	b2d9      	uxtb	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006768:	461a      	mov	r2, r3
 800676a:	f00a fa0d 	bl	8010b88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	429a      	cmp	r2, r3
 8006798:	d901      	bls.n	800679e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e042      	b.n	8006824 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800679e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	da0f      	bge.n	80067c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	f003 020f 	and.w	r2, r3, #15
 80067ac:	4613      	mov	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	3338      	adds	r3, #56	; 0x38
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	3304      	adds	r3, #4
 80067bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	705a      	strb	r2, [r3, #1]
 80067c4:	e00f      	b.n	80067e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 020f 	and.w	r2, r3, #15
 80067cc:	4613      	mov	r3, r2
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	1a9b      	subs	r3, r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4413      	add	r3, r2
 80067dc:	3304      	adds	r3, #4
 80067de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_PCD_EP_ClrStall+0x86>
 8006802:	2302      	movs	r3, #2
 8006804:	e00e      	b.n	8006824 <HAL_PCD_EP_ClrStall+0xa4>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	4618      	mov	r0, r3
 8006816:	f00a f823 	bl	8010860 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	; 0x28
 8006830:	af02      	add	r7, sp, #8
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	3338      	adds	r3, #56	; 0x38
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	3304      	adds	r3, #4
 8006852:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	429a      	cmp	r2, r3
 800685e:	d901      	bls.n	8006864 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e06c      	b.n	800693e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	695a      	ldr	r2, [r3, #20]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	429a      	cmp	r2, r3
 8006878:	d902      	bls.n	8006880 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	3303      	adds	r3, #3
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006888:	e02b      	b.n	80068e2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	695a      	ldr	r2, [r3, #20]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	429a      	cmp	r2, r3
 800689e:	d902      	bls.n	80068a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	3303      	adds	r3, #3
 80068aa:	089b      	lsrs	r3, r3, #2
 80068ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68d9      	ldr	r1, [r3, #12]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	4603      	mov	r3, r0
 80068c4:	6978      	ldr	r0, [r7, #20]
 80068c6:	f009 fec7 	bl	8010658 <USB_WritePacket>

    ep->xfer_buff  += len;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	441a      	add	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d809      	bhi.n	800690c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	699a      	ldr	r2, [r3, #24]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006900:	429a      	cmp	r2, r3
 8006902:	d203      	bcs.n	800690c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1be      	bne.n	800688a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	429a      	cmp	r2, r3
 8006916:	d811      	bhi.n	800693c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	2201      	movs	r2, #1
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	43db      	mvns	r3, r3
 8006932:	6939      	ldr	r1, [r7, #16]
 8006934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006938:	4013      	ands	r3, r2
 800693a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	333c      	adds	r3, #60	; 0x3c
 8006960:	3304      	adds	r3, #4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b01      	cmp	r3, #1
 800697c:	f040 80a0 	bne.w	8006ac0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d015      	beq.n	80069b6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a72      	ldr	r2, [pc, #456]	; (8006b58 <PCD_EP_OutXfrComplete_int+0x210>)
 800698e:	4293      	cmp	r3, r2
 8006990:	f240 80dd 	bls.w	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80d7 	beq.w	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	461a      	mov	r2, r3
 80069ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069b2:	6093      	str	r3, [r2, #8]
 80069b4:	e0cb      	b.n	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d009      	beq.n	80069d4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069cc:	461a      	mov	r2, r3
 80069ce:	2320      	movs	r3, #32
 80069d0:	6093      	str	r3, [r2, #8]
 80069d2:	e0bc      	b.n	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 80b7 	bne.w	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a5d      	ldr	r2, [pc, #372]	; (8006b58 <PCD_EP_OutXfrComplete_int+0x210>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d90f      	bls.n	8006a08 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	461a      	mov	r2, r3
 8006a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a04:	6093      	str	r3, [r2, #8]
 8006a06:	e0a2      	b.n	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a1a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	0159      	lsls	r1, r3, #5
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	440b      	add	r3, r1
 8006a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006a2e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4613      	mov	r3, r2
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	1a9b      	subs	r3, r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4403      	add	r3, r0
 8006a3e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006a42:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a56:	6819      	ldr	r1, [r3, #0]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4403      	add	r3, r0
 8006a66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4419      	add	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4403      	add	r3, r0
 8006a7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006a80:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d114      	bne.n	8006ab2 <PCD_EP_OutXfrComplete_int+0x16a>
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	1a9b      	subs	r3, r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	440b      	add	r3, r1
 8006a96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d108      	bne.n	8006ab2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2101      	movs	r1, #1
 8006aae:	f00a f86b 	bl	8010b88 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f00c fa83 	bl	8012fc4 <HAL_PCD_DataOutStageCallback>
 8006abe:	e046      	b.n	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <PCD_EP_OutXfrComplete_int+0x214>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d124      	bne.n	8006b12 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ae4:	6093      	str	r3, [r2, #8]
 8006ae6:	e032      	b.n	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afe:	461a      	mov	r2, r3
 8006b00:	2320      	movs	r3, #32
 8006b02:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f00c fa5a 	bl	8012fc4 <HAL_PCD_DataOutStageCallback>
 8006b10:	e01d      	b.n	8006b4e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d114      	bne.n	8006b42 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d108      	bne.n	8006b42 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	f00a f823 	bl	8010b88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f00c fa3b 	bl	8012fc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	4f54300a 	.word	0x4f54300a
 8006b5c:	4f54310a 	.word	0x4f54310a

08006b60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	333c      	adds	r3, #60	; 0x3c
 8006b78:	3304      	adds	r3, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d90e      	bls.n	8006bb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bac:	461a      	mov	r2, r3
 8006bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f00c f9f3 	bl	8012fa0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a0a      	ldr	r2, [pc, #40]	; (8006be8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d90c      	bls.n	8006bdc <PCD_EP_OutSetupPacket_int+0x7c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d108      	bne.n	8006bdc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	f009 ffd6 	bl	8010b88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	4f54300a 	.word	0x4f54300a

08006bec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d107      	bne.n	8006c1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c0a:	883b      	ldrh	r3, [r7, #0]
 8006c0c:	0419      	lsls	r1, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	629a      	str	r2, [r3, #40]	; 0x28
 8006c18:	e028      	b.n	8006c6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	0c1b      	lsrs	r3, r3, #16
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	4413      	add	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	e00d      	b.n	8006c4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	3340      	adds	r3, #64	; 0x40
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	4413      	add	r3, r2
 8006c42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	3301      	adds	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
 8006c4a:	7bfa      	ldrb	r2, [r7, #15]
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d3ec      	bcc.n	8006c2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006c54:	883b      	ldrh	r3, [r7, #0]
 8006c56:	0418      	lsls	r0, r3, #16
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6819      	ldr	r1, [r3, #0]
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	4302      	orrs	r2, r0
 8006c64:	3340      	adds	r3, #64	; 0x40
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	887a      	ldrh	r2, [r7, #2]
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cca:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	10000003 	.word	0x10000003

08006ce4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006d04:	4b29      	ldr	r3, [pc, #164]	; (8006dac <HAL_PWREx_ConfigSupply+0xb0>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	2b06      	cmp	r3, #6
 8006d0e:	d00a      	beq.n	8006d26 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d10:	4b26      	ldr	r3, [pc, #152]	; (8006dac <HAL_PWREx_ConfigSupply+0xb0>)
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d001      	beq.n	8006d22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e040      	b.n	8006da4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e03e      	b.n	8006da4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d26:	4b21      	ldr	r3, [pc, #132]	; (8006dac <HAL_PWREx_ConfigSupply+0xb0>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006d2e:	491f      	ldr	r1, [pc, #124]	; (8006dac <HAL_PWREx_ConfigSupply+0xb0>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d36:	f7fb f867 	bl	8001e08 <HAL_GetTick>
 8006d3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d3c:	e009      	b.n	8006d52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d3e:	f7fb f863 	bl	8001e08 <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d4c:	d901      	bls.n	8006d52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e028      	b.n	8006da4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d52:	4b16      	ldr	r3, [pc, #88]	; (8006dac <HAL_PWREx_ConfigSupply+0xb0>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d5e:	d1ee      	bne.n	8006d3e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b1e      	cmp	r3, #30
 8006d64:	d008      	beq.n	8006d78 <HAL_PWREx_ConfigSupply+0x7c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b2e      	cmp	r3, #46	; 0x2e
 8006d6a:	d005      	beq.n	8006d78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b1d      	cmp	r3, #29
 8006d70:	d002      	beq.n	8006d78 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b2d      	cmp	r3, #45	; 0x2d
 8006d76:	d114      	bne.n	8006da2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006d78:	f7fb f846 	bl	8001e08 <HAL_GetTick>
 8006d7c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d7e:	e009      	b.n	8006d94 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d80:	f7fb f842 	bl	8001e08 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d8e:	d901      	bls.n	8006d94 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e007      	b.n	8006da4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <HAL_PWREx_ConfigSupply+0xb0>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da0:	d1ee      	bne.n	8006d80 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	58024800 	.word	0x58024800

08006db0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4a04      	ldr	r2, [pc, #16]	; (8006dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dbe:	60d3      	str	r3, [r2, #12]
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	58024800 	.word	0x58024800

08006dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	; 0x30
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e3ff      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 8087 	beq.w	8006efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006df0:	4b99      	ldr	r3, [pc, #612]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dfa:	4b97      	ldr	r3, [pc, #604]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d007      	beq.n	8006e16 <HAL_RCC_OscConfig+0x46>
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	2b18      	cmp	r3, #24
 8006e0a:	d110      	bne.n	8006e2e <HAL_RCC_OscConfig+0x5e>
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d10b      	bne.n	8006e2e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e16:	4b90      	ldr	r3, [pc, #576]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d06c      	beq.n	8006efc <HAL_RCC_OscConfig+0x12c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d168      	bne.n	8006efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e3d9      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e36:	d106      	bne.n	8006e46 <HAL_RCC_OscConfig+0x76>
 8006e38:	4b87      	ldr	r3, [pc, #540]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a86      	ldr	r2, [pc, #536]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	e02e      	b.n	8006ea4 <HAL_RCC_OscConfig+0xd4>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10c      	bne.n	8006e68 <HAL_RCC_OscConfig+0x98>
 8006e4e:	4b82      	ldr	r3, [pc, #520]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a81      	ldr	r2, [pc, #516]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	4b7f      	ldr	r3, [pc, #508]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a7e      	ldr	r2, [pc, #504]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	e01d      	b.n	8006ea4 <HAL_RCC_OscConfig+0xd4>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e70:	d10c      	bne.n	8006e8c <HAL_RCC_OscConfig+0xbc>
 8006e72:	4b79      	ldr	r3, [pc, #484]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a78      	ldr	r2, [pc, #480]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	4b76      	ldr	r3, [pc, #472]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a75      	ldr	r2, [pc, #468]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	e00b      	b.n	8006ea4 <HAL_RCC_OscConfig+0xd4>
 8006e8c:	4b72      	ldr	r3, [pc, #456]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a71      	ldr	r2, [pc, #452]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	4b6f      	ldr	r3, [pc, #444]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6e      	ldr	r2, [pc, #440]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d013      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fa ffac 	bl	8001e08 <HAL_GetTick>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eb4:	f7fa ffa8 	bl	8001e08 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b64      	cmp	r3, #100	; 0x64
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e38d      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ec6:	4b64      	ldr	r3, [pc, #400]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCC_OscConfig+0xe4>
 8006ed2:	e014      	b.n	8006efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed4:	f7fa ff98 	bl	8001e08 <HAL_GetTick>
 8006ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006edc:	f7fa ff94 	bl	8001e08 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b64      	cmp	r3, #100	; 0x64
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e379      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006eee:	4b5a      	ldr	r3, [pc, #360]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f0      	bne.n	8006edc <HAL_RCC_OscConfig+0x10c>
 8006efa:	e000      	b.n	8006efe <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80ae 	beq.w	8007068 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f0c:	4b52      	ldr	r3, [pc, #328]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f16:	4b50      	ldr	r3, [pc, #320]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d007      	beq.n	8006f32 <HAL_RCC_OscConfig+0x162>
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	2b18      	cmp	r3, #24
 8006f26:	d13a      	bne.n	8006f9e <HAL_RCC_OscConfig+0x1ce>
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d135      	bne.n	8006f9e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f32:	4b49      	ldr	r3, [pc, #292]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <HAL_RCC_OscConfig+0x17a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e34b      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4a:	f7fa ff8d 	bl	8001e68 <HAL_GetREVID>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d817      	bhi.n	8006f88 <HAL_RCC_OscConfig+0x1b8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d108      	bne.n	8006f72 <HAL_RCC_OscConfig+0x1a2>
 8006f60:	4b3d      	ldr	r3, [pc, #244]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f68:	4a3b      	ldr	r2, [pc, #236]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f6e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f70:	e07a      	b.n	8007068 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f72:	4b39      	ldr	r3, [pc, #228]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	031b      	lsls	r3, r3, #12
 8006f80:	4935      	ldr	r1, [pc, #212]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f86:	e06f      	b.n	8007068 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f88:	4b33      	ldr	r3, [pc, #204]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	061b      	lsls	r3, r3, #24
 8006f96:	4930      	ldr	r1, [pc, #192]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f9c:	e064      	b.n	8007068 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d045      	beq.n	8007032 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f023 0219 	bic.w	r2, r3, #25
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4929      	ldr	r1, [pc, #164]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb8:	f7fa ff26 	bl	8001e08 <HAL_GetTick>
 8006fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fc0:	f7fa ff22 	bl	8001e08 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e307      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fd2:	4b21      	ldr	r3, [pc, #132]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fde:	f7fa ff43 	bl	8001e68 <HAL_GetREVID>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d817      	bhi.n	800701c <HAL_RCC_OscConfig+0x24c>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	2b40      	cmp	r3, #64	; 0x40
 8006ff2:	d108      	bne.n	8007006 <HAL_RCC_OscConfig+0x236>
 8006ff4:	4b18      	ldr	r3, [pc, #96]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ffc:	4a16      	ldr	r2, [pc, #88]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8006ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007002:	6053      	str	r3, [r2, #4]
 8007004:	e030      	b.n	8007068 <HAL_RCC_OscConfig+0x298>
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	031b      	lsls	r3, r3, #12
 8007014:	4910      	ldr	r1, [pc, #64]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8007016:	4313      	orrs	r3, r2
 8007018:	604b      	str	r3, [r1, #4]
 800701a:	e025      	b.n	8007068 <HAL_RCC_OscConfig+0x298>
 800701c:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	061b      	lsls	r3, r3, #24
 800702a:	490b      	ldr	r1, [pc, #44]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 800702c:	4313      	orrs	r3, r2
 800702e:	604b      	str	r3, [r1, #4]
 8007030:	e01a      	b.n	8007068 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a08      	ldr	r2, [pc, #32]	; (8007058 <HAL_RCC_OscConfig+0x288>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703e:	f7fa fee3 	bl	8001e08 <HAL_GetTick>
 8007042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007044:	e00a      	b.n	800705c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007046:	f7fa fedf 	bl	8001e08 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d903      	bls.n	800705c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e2c4      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
 8007058:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800705c:	4ba4      	ldr	r3, [pc, #656]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1ee      	bne.n	8007046 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a9 	beq.w	80071c8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007076:	4b9e      	ldr	r3, [pc, #632]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800707e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007080:	4b9b      	ldr	r3, [pc, #620]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d007      	beq.n	800709c <HAL_RCC_OscConfig+0x2cc>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b18      	cmp	r3, #24
 8007090:	d13a      	bne.n	8007108 <HAL_RCC_OscConfig+0x338>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f003 0303 	and.w	r3, r3, #3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d135      	bne.n	8007108 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800709c:	4b94      	ldr	r3, [pc, #592]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_RCC_OscConfig+0x2e4>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	2b80      	cmp	r3, #128	; 0x80
 80070ae:	d001      	beq.n	80070b4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e296      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070b4:	f7fa fed8 	bl	8001e68 <HAL_GetREVID>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80070be:	4293      	cmp	r3, r2
 80070c0:	d817      	bhi.n	80070f2 <HAL_RCC_OscConfig+0x322>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d108      	bne.n	80070dc <HAL_RCC_OscConfig+0x30c>
 80070ca:	4b89      	ldr	r3, [pc, #548]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070d2:	4a87      	ldr	r2, [pc, #540]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80070d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070da:	e075      	b.n	80071c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070dc:	4b84      	ldr	r3, [pc, #528]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a1b      	ldr	r3, [r3, #32]
 80070e8:	069b      	lsls	r3, r3, #26
 80070ea:	4981      	ldr	r1, [pc, #516]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070f0:	e06a      	b.n	80071c8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070f2:	4b7f      	ldr	r3, [pc, #508]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	061b      	lsls	r3, r3, #24
 8007100:	497b      	ldr	r1, [pc, #492]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007102:	4313      	orrs	r3, r2
 8007104:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007106:	e05f      	b.n	80071c8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d042      	beq.n	8007196 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007110:	4b77      	ldr	r3, [pc, #476]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a76      	ldr	r2, [pc, #472]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711c:	f7fa fe74 	bl	8001e08 <HAL_GetTick>
 8007120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007124:	f7fa fe70 	bl	8001e08 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e255      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007136:	4b6e      	ldr	r3, [pc, #440]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007142:	f7fa fe91 	bl	8001e68 <HAL_GetREVID>
 8007146:	4603      	mov	r3, r0
 8007148:	f241 0203 	movw	r2, #4099	; 0x1003
 800714c:	4293      	cmp	r3, r2
 800714e:	d817      	bhi.n	8007180 <HAL_RCC_OscConfig+0x3b0>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	2b20      	cmp	r3, #32
 8007156:	d108      	bne.n	800716a <HAL_RCC_OscConfig+0x39a>
 8007158:	4b65      	ldr	r3, [pc, #404]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007160:	4a63      	ldr	r2, [pc, #396]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007166:	6053      	str	r3, [r2, #4]
 8007168:	e02e      	b.n	80071c8 <HAL_RCC_OscConfig+0x3f8>
 800716a:	4b61      	ldr	r3, [pc, #388]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	069b      	lsls	r3, r3, #26
 8007178:	495d      	ldr	r1, [pc, #372]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800717a:	4313      	orrs	r3, r2
 800717c:	604b      	str	r3, [r1, #4]
 800717e:	e023      	b.n	80071c8 <HAL_RCC_OscConfig+0x3f8>
 8007180:	4b5b      	ldr	r3, [pc, #364]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	4958      	ldr	r1, [pc, #352]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007190:	4313      	orrs	r3, r2
 8007192:	60cb      	str	r3, [r1, #12]
 8007194:	e018      	b.n	80071c8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007196:	4b56      	ldr	r3, [pc, #344]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a55      	ldr	r2, [pc, #340]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800719c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fa fe31 	bl	8001e08 <HAL_GetTick>
 80071a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071aa:	f7fa fe2d 	bl	8001e08 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e212      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071bc:	4b4c      	ldr	r3, [pc, #304]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f0      	bne.n	80071aa <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d036      	beq.n	8007242 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d019      	beq.n	8007210 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071dc:	4b44      	ldr	r3, [pc, #272]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80071de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e0:	4a43      	ldr	r2, [pc, #268]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e8:	f7fa fe0e 	bl	8001e08 <HAL_GetTick>
 80071ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071f0:	f7fa fe0a 	bl	8001e08 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e1ef      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007202:	4b3b      	ldr	r3, [pc, #236]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007206:	f003 0302 	and.w	r3, r3, #2
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f0      	beq.n	80071f0 <HAL_RCC_OscConfig+0x420>
 800720e:	e018      	b.n	8007242 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007210:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007214:	4a36      	ldr	r2, [pc, #216]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007216:	f023 0301 	bic.w	r3, r3, #1
 800721a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800721c:	f7fa fdf4 	bl	8001e08 <HAL_GetTick>
 8007220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007224:	f7fa fdf0 	bl	8001e08 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e1d5      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007236:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1f0      	bne.n	8007224 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d036      	beq.n	80072bc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d019      	beq.n	800728a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007256:	4b26      	ldr	r3, [pc, #152]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a25      	ldr	r2, [pc, #148]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800725c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007262:	f7fa fdd1 	bl	8001e08 <HAL_GetTick>
 8007266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007268:	e008      	b.n	800727c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800726a:	f7fa fdcd 	bl	8001e08 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d901      	bls.n	800727c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	e1b2      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800727c:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0f0      	beq.n	800726a <HAL_RCC_OscConfig+0x49a>
 8007288:	e018      	b.n	80072bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800728a:	4b19      	ldr	r3, [pc, #100]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 8007290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007296:	f7fa fdb7 	bl	8001e08 <HAL_GetTick>
 800729a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800729e:	f7fa fdb3 	bl	8001e08 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e198      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <HAL_RCC_OscConfig+0x520>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f0      	bne.n	800729e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8085 	beq.w	80073d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072ca:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <HAL_RCC_OscConfig+0x524>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <HAL_RCC_OscConfig+0x524>)
 80072d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072d6:	f7fa fd97 	bl	8001e08 <HAL_GetTick>
 80072da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072dc:	e00c      	b.n	80072f8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072de:	f7fa fd93 	bl	8001e08 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b64      	cmp	r3, #100	; 0x64
 80072ea:	d905      	bls.n	80072f8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e178      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
 80072f0:	58024400 	.word	0x58024400
 80072f4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072f8:	4b96      	ldr	r3, [pc, #600]	; (8007554 <HAL_RCC_OscConfig+0x784>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0ec      	beq.n	80072de <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d106      	bne.n	800731a <HAL_RCC_OscConfig+0x54a>
 800730c:	4b92      	ldr	r3, [pc, #584]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	4a91      	ldr	r2, [pc, #580]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	6713      	str	r3, [r2, #112]	; 0x70
 8007318:	e02d      	b.n	8007376 <HAL_RCC_OscConfig+0x5a6>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10c      	bne.n	800733c <HAL_RCC_OscConfig+0x56c>
 8007322:	4b8d      	ldr	r3, [pc, #564]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	4a8c      	ldr	r2, [pc, #560]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	6713      	str	r3, [r2, #112]	; 0x70
 800732e:	4b8a      	ldr	r3, [pc, #552]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	4a89      	ldr	r2, [pc, #548]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007334:	f023 0304 	bic.w	r3, r3, #4
 8007338:	6713      	str	r3, [r2, #112]	; 0x70
 800733a:	e01c      	b.n	8007376 <HAL_RCC_OscConfig+0x5a6>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b05      	cmp	r3, #5
 8007342:	d10c      	bne.n	800735e <HAL_RCC_OscConfig+0x58e>
 8007344:	4b84      	ldr	r3, [pc, #528]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007348:	4a83      	ldr	r2, [pc, #524]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800734a:	f043 0304 	orr.w	r3, r3, #4
 800734e:	6713      	str	r3, [r2, #112]	; 0x70
 8007350:	4b81      	ldr	r3, [pc, #516]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007354:	4a80      	ldr	r2, [pc, #512]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	6713      	str	r3, [r2, #112]	; 0x70
 800735c:	e00b      	b.n	8007376 <HAL_RCC_OscConfig+0x5a6>
 800735e:	4b7e      	ldr	r3, [pc, #504]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	4a7d      	ldr	r2, [pc, #500]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	6713      	str	r3, [r2, #112]	; 0x70
 800736a:	4b7b      	ldr	r3, [pc, #492]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736e:	4a7a      	ldr	r2, [pc, #488]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007370:	f023 0304 	bic.w	r3, r3, #4
 8007374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d015      	beq.n	80073aa <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737e:	f7fa fd43 	bl	8001e08 <HAL_GetTick>
 8007382:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007384:	e00a      	b.n	800739c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007386:	f7fa fd3f 	bl	8001e08 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	f241 3288 	movw	r2, #5000	; 0x1388
 8007394:	4293      	cmp	r3, r2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e122      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800739c:	4b6e      	ldr	r3, [pc, #440]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0ee      	beq.n	8007386 <HAL_RCC_OscConfig+0x5b6>
 80073a8:	e014      	b.n	80073d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073aa:	f7fa fd2d 	bl	8001e08 <HAL_GetTick>
 80073ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073b0:	e00a      	b.n	80073c8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073b2:	f7fa fd29 	bl	8001e08 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e10c      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073c8:	4b63      	ldr	r3, [pc, #396]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1ee      	bne.n	80073b2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8101 	beq.w	80075e0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073de:	4b5e      	ldr	r3, [pc, #376]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073e6:	2b18      	cmp	r3, #24
 80073e8:	f000 80bc 	beq.w	8007564 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	f040 8095 	bne.w	8007520 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073f6:	4b58      	ldr	r3, [pc, #352]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a57      	ldr	r2, [pc, #348]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80073fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007402:	f7fa fd01 	bl	8001e08 <HAL_GetTick>
 8007406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800740a:	f7fa fcfd 	bl	8001e08 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e0e2      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800741c:	4b4e      	ldr	r3, [pc, #312]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f0      	bne.n	800740a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007428:	4b4b      	ldr	r3, [pc, #300]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800742a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800742c:	4b4b      	ldr	r3, [pc, #300]	; (800755c <HAL_RCC_OscConfig+0x78c>)
 800742e:	4013      	ands	r3, r2
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007438:	0112      	lsls	r2, r2, #4
 800743a:	430a      	orrs	r2, r1
 800743c:	4946      	ldr	r1, [pc, #280]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800743e:	4313      	orrs	r3, r2
 8007440:	628b      	str	r3, [r1, #40]	; 0x28
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007446:	3b01      	subs	r3, #1
 8007448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	3b01      	subs	r3, #1
 8007452:	025b      	lsls	r3, r3, #9
 8007454:	b29b      	uxth	r3, r3
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	3b01      	subs	r3, #1
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	3b01      	subs	r3, #1
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007472:	4939      	ldr	r1, [pc, #228]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007474:	4313      	orrs	r3, r2
 8007476:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007478:	4b37      	ldr	r3, [pc, #220]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a36      	ldr	r2, [pc, #216]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007484:	4b34      	ldr	r3, [pc, #208]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007488:	4b35      	ldr	r3, [pc, #212]	; (8007560 <HAL_RCC_OscConfig+0x790>)
 800748a:	4013      	ands	r3, r2
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007490:	00d2      	lsls	r2, r2, #3
 8007492:	4931      	ldr	r1, [pc, #196]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007494:	4313      	orrs	r3, r2
 8007496:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007498:	4b2f      	ldr	r3, [pc, #188]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	f023 020c 	bic.w	r2, r3, #12
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a4:	492c      	ldr	r1, [pc, #176]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074aa:	4b2b      	ldr	r3, [pc, #172]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f023 0202 	bic.w	r2, r3, #2
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b6:	4928      	ldr	r1, [pc, #160]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074bc:	4b26      	ldr	r3, [pc, #152]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	4a25      	ldr	r2, [pc, #148]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b23      	ldr	r3, [pc, #140]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a22      	ldr	r2, [pc, #136]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074d4:	4b20      	ldr	r3, [pc, #128]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	4a1c      	ldr	r2, [pc, #112]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074e6:	f043 0301 	orr.w	r3, r3, #1
 80074ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074ec:	4b1a      	ldr	r3, [pc, #104]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a19      	ldr	r2, [pc, #100]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 80074f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f8:	f7fa fc86 	bl	8001e08 <HAL_GetTick>
 80074fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074fe:	e008      	b.n	8007512 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007500:	f7fa fc82 	bl	8001e08 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e067      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007512:	4b11      	ldr	r3, [pc, #68]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0f0      	beq.n	8007500 <HAL_RCC_OscConfig+0x730>
 800751e:	e05f      	b.n	80075e0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007520:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a0c      	ldr	r2, [pc, #48]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800752a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800752c:	f7fa fc6c 	bl	8001e08 <HAL_GetTick>
 8007530:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007532:	e008      	b.n	8007546 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007534:	f7fa fc68 	bl	8001e08 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d901      	bls.n	8007546 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e04d      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007546:	4b04      	ldr	r3, [pc, #16]	; (8007558 <HAL_RCC_OscConfig+0x788>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f0      	bne.n	8007534 <HAL_RCC_OscConfig+0x764>
 8007552:	e045      	b.n	80075e0 <HAL_RCC_OscConfig+0x810>
 8007554:	58024800 	.word	0x58024800
 8007558:	58024400 	.word	0x58024400
 800755c:	fffffc0c 	.word	0xfffffc0c
 8007560:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007564:	4b21      	ldr	r3, [pc, #132]	; (80075ec <HAL_RCC_OscConfig+0x81c>)
 8007566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007568:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800756a:	4b20      	ldr	r3, [pc, #128]	; (80075ec <HAL_RCC_OscConfig+0x81c>)
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	2b01      	cmp	r3, #1
 8007576:	d031      	beq.n	80075dc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f003 0203 	and.w	r2, r3, #3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007582:	429a      	cmp	r2, r3
 8007584:	d12a      	bne.n	80075dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007592:	429a      	cmp	r2, r3
 8007594:	d122      	bne.n	80075dc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d11a      	bne.n	80075dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	0a5b      	lsrs	r3, r3, #9
 80075aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d111      	bne.n	80075dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	0c1b      	lsrs	r3, r3, #16
 80075bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d108      	bne.n	80075dc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	0e1b      	lsrs	r3, r3, #24
 80075ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075d8:	429a      	cmp	r2, r3
 80075da:	d001      	beq.n	80075e0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e000      	b.n	80075e2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	58024400 	.word	0x58024400

080075f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e19c      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007604:	4b8a      	ldr	r3, [pc, #552]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d910      	bls.n	8007634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007612:	4b87      	ldr	r3, [pc, #540]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 020f 	bic.w	r2, r3, #15
 800761a:	4985      	ldr	r1, [pc, #532]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	4313      	orrs	r3, r2
 8007620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007622:	4b83      	ldr	r3, [pc, #524]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 030f 	and.w	r3, r3, #15
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	d001      	beq.n	8007634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e184      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d010      	beq.n	8007662 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	4b7b      	ldr	r3, [pc, #492]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800764c:	429a      	cmp	r2, r3
 800764e:	d908      	bls.n	8007662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007650:	4b78      	ldr	r3, [pc, #480]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	4975      	ldr	r1, [pc, #468]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 800765e:	4313      	orrs	r3, r2
 8007660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d010      	beq.n	8007690 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695a      	ldr	r2, [r3, #20]
 8007672:	4b70      	ldr	r3, [pc, #448]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800767a:	429a      	cmp	r2, r3
 800767c:	d908      	bls.n	8007690 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800767e:	4b6d      	ldr	r3, [pc, #436]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	496a      	ldr	r1, [pc, #424]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 800768c:	4313      	orrs	r3, r2
 800768e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0310 	and.w	r3, r3, #16
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	4b64      	ldr	r3, [pc, #400]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d908      	bls.n	80076be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076ac:	4b61      	ldr	r3, [pc, #388]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	495e      	ldr	r1, [pc, #376]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d010      	beq.n	80076ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69da      	ldr	r2, [r3, #28]
 80076ce:	4b59      	ldr	r3, [pc, #356]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d908      	bls.n	80076ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80076da:	4b56      	ldr	r3, [pc, #344]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	4953      	ldr	r1, [pc, #332]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d010      	beq.n	800771a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	4b4d      	ldr	r3, [pc, #308]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	429a      	cmp	r2, r3
 8007706:	d908      	bls.n	800771a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007708:	4b4a      	ldr	r3, [pc, #296]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f023 020f 	bic.w	r2, r3, #15
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	4947      	ldr	r1, [pc, #284]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007716:	4313      	orrs	r3, r2
 8007718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d055      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007726:	4b43      	ldr	r3, [pc, #268]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	4940      	ldr	r1, [pc, #256]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007734:	4313      	orrs	r3, r2
 8007736:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2b02      	cmp	r3, #2
 800773e:	d107      	bne.n	8007750 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007740:	4b3c      	ldr	r3, [pc, #240]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d121      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e0f6      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2b03      	cmp	r3, #3
 8007756:	d107      	bne.n	8007768 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007758:	4b36      	ldr	r3, [pc, #216]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d115      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0ea      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d107      	bne.n	8007780 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007770:	4b30      	ldr	r3, [pc, #192]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e0de      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007780:	4b2c      	ldr	r3, [pc, #176]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e0d6      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007790:	4b28      	ldr	r3, [pc, #160]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f023 0207 	bic.w	r2, r3, #7
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4925      	ldr	r1, [pc, #148]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a2:	f7fa fb31 	bl	8001e08 <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a8:	e00a      	b.n	80077c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077aa:	f7fa fb2d 	bl	8001e08 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d901      	bls.n	80077c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e0be      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c0:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	00db      	lsls	r3, r3, #3
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d1eb      	bne.n	80077aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d208      	bcs.n	8007800 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ee:	4b11      	ldr	r3, [pc, #68]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	f023 020f 	bic.w	r2, r3, #15
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	490e      	ldr	r1, [pc, #56]	; (8007834 <HAL_RCC_ClockConfig+0x244>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007800:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d214      	bcs.n	8007838 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800780e:	4b08      	ldr	r3, [pc, #32]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f023 020f 	bic.w	r2, r3, #15
 8007816:	4906      	ldr	r1, [pc, #24]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	4313      	orrs	r3, r2
 800781c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800781e:	4b04      	ldr	r3, [pc, #16]	; (8007830 <HAL_RCC_ClockConfig+0x240>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	429a      	cmp	r2, r3
 800782a:	d005      	beq.n	8007838 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e086      	b.n	800793e <HAL_RCC_ClockConfig+0x34e>
 8007830:	52002000 	.word	0x52002000
 8007834:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d010      	beq.n	8007866 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	4b3f      	ldr	r3, [pc, #252]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007850:	429a      	cmp	r2, r3
 8007852:	d208      	bcs.n	8007866 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007854:	4b3c      	ldr	r3, [pc, #240]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	4939      	ldr	r1, [pc, #228]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 8007862:	4313      	orrs	r3, r2
 8007864:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d010      	beq.n	8007894 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695a      	ldr	r2, [r3, #20]
 8007876:	4b34      	ldr	r3, [pc, #208]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800787e:	429a      	cmp	r2, r3
 8007880:	d208      	bcs.n	8007894 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007882:	4b31      	ldr	r3, [pc, #196]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	492e      	ldr	r1, [pc, #184]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 8007890:	4313      	orrs	r3, r2
 8007892:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	d010      	beq.n	80078c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699a      	ldr	r2, [r3, #24]
 80078a4:	4b28      	ldr	r3, [pc, #160]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d208      	bcs.n	80078c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078b0:	4b25      	ldr	r3, [pc, #148]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	4922      	ldr	r1, [pc, #136]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d010      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	69da      	ldr	r2, [r3, #28]
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078da:	429a      	cmp	r2, r3
 80078dc:	d208      	bcs.n	80078f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	4917      	ldr	r1, [pc, #92]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078f0:	f000 f834 	bl	800795c <HAL_RCC_GetSysClockFreq>
 80078f4:	4602      	mov	r2, r0
 80078f6:	4b14      	ldr	r3, [pc, #80]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	f003 030f 	and.w	r3, r3, #15
 8007900:	4912      	ldr	r1, [pc, #72]	; (800794c <HAL_RCC_ClockConfig+0x35c>)
 8007902:	5ccb      	ldrb	r3, [r1, r3]
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	fa22 f303 	lsr.w	r3, r2, r3
 800790c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800790e:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <HAL_RCC_ClockConfig+0x358>)
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	4a0d      	ldr	r2, [pc, #52]	; (800794c <HAL_RCC_ClockConfig+0x35c>)
 8007918:	5cd3      	ldrb	r3, [r2, r3]
 800791a:	f003 031f 	and.w	r3, r3, #31
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
 8007924:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <HAL_RCC_ClockConfig+0x360>)
 8007926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007928:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <HAL_RCC_ClockConfig+0x364>)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800792e:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <HAL_RCC_ClockConfig+0x368>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fa fa1e 	bl	8001d74 <HAL_InitTick>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	58024400 	.word	0x58024400
 800794c:	08015e50 	.word	0x08015e50
 8007950:	24000004 	.word	0x24000004
 8007954:	24000000 	.word	0x24000000
 8007958:	24000008 	.word	0x24000008

0800795c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800795c:	b480      	push	{r7}
 800795e:	b089      	sub	sp, #36	; 0x24
 8007960:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007962:	4bb3      	ldr	r3, [pc, #716]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800796a:	2b18      	cmp	r3, #24
 800796c:	f200 8155 	bhi.w	8007c1a <HAL_RCC_GetSysClockFreq+0x2be>
 8007970:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007976:	bf00      	nop
 8007978:	080079dd 	.word	0x080079dd
 800797c:	08007c1b 	.word	0x08007c1b
 8007980:	08007c1b 	.word	0x08007c1b
 8007984:	08007c1b 	.word	0x08007c1b
 8007988:	08007c1b 	.word	0x08007c1b
 800798c:	08007c1b 	.word	0x08007c1b
 8007990:	08007c1b 	.word	0x08007c1b
 8007994:	08007c1b 	.word	0x08007c1b
 8007998:	08007a03 	.word	0x08007a03
 800799c:	08007c1b 	.word	0x08007c1b
 80079a0:	08007c1b 	.word	0x08007c1b
 80079a4:	08007c1b 	.word	0x08007c1b
 80079a8:	08007c1b 	.word	0x08007c1b
 80079ac:	08007c1b 	.word	0x08007c1b
 80079b0:	08007c1b 	.word	0x08007c1b
 80079b4:	08007c1b 	.word	0x08007c1b
 80079b8:	08007a09 	.word	0x08007a09
 80079bc:	08007c1b 	.word	0x08007c1b
 80079c0:	08007c1b 	.word	0x08007c1b
 80079c4:	08007c1b 	.word	0x08007c1b
 80079c8:	08007c1b 	.word	0x08007c1b
 80079cc:	08007c1b 	.word	0x08007c1b
 80079d0:	08007c1b 	.word	0x08007c1b
 80079d4:	08007c1b 	.word	0x08007c1b
 80079d8:	08007a0f 	.word	0x08007a0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079dc:	4b94      	ldr	r3, [pc, #592]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0320 	and.w	r3, r3, #32
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079e8:	4b91      	ldr	r3, [pc, #580]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	08db      	lsrs	r3, r3, #3
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	4a90      	ldr	r2, [pc, #576]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
 80079f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80079fa:	e111      	b.n	8007c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079fc:	4b8d      	ldr	r3, [pc, #564]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079fe:	61bb      	str	r3, [r7, #24]
    break;
 8007a00:	e10e      	b.n	8007c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a02:	4b8d      	ldr	r3, [pc, #564]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a04:	61bb      	str	r3, [r7, #24]
    break;
 8007a06:	e10b      	b.n	8007c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a08:	4b8c      	ldr	r3, [pc, #560]	; (8007c3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a0a:	61bb      	str	r3, [r7, #24]
    break;
 8007a0c:	e108      	b.n	8007c20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a0e:	4b88      	ldr	r3, [pc, #544]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a18:	4b85      	ldr	r3, [pc, #532]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	091b      	lsrs	r3, r3, #4
 8007a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a24:	4b82      	ldr	r3, [pc, #520]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a2e:	4b80      	ldr	r3, [pc, #512]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a32:	08db      	lsrs	r3, r3, #3
 8007a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	fb02 f303 	mul.w	r3, r2, r3
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 80e1 	beq.w	8007c14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	f000 8083 	beq.w	8007b60 <HAL_RCC_GetSysClockFreq+0x204>
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	f200 80a1 	bhi.w	8007ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_RCC_GetSysClockFreq+0x114>
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d056      	beq.n	8007b1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a6e:	e099      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a70:	4b6f      	ldr	r3, [pc, #444]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0320 	and.w	r3, r3, #32
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d02d      	beq.n	8007ad8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a7c:	4b6c      	ldr	r3, [pc, #432]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	08db      	lsrs	r3, r3, #3
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	4a6b      	ldr	r2, [pc, #428]	; (8007c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a88:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	ee07 3a90 	vmov	s15, r3
 8007a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	ee07 3a90 	vmov	s15, r3
 8007a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aa6:	4b62      	ldr	r3, [pc, #392]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007ad6:	e087      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aea:	4b51      	ldr	r3, [pc, #324]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007afe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b1a:	e065      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2e:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b5e:	e043      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b72:	4b2f      	ldr	r3, [pc, #188]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba2:	e021      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb6:	4b1e      	ldr	r3, [pc, #120]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007be6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	0a5b      	lsrs	r3, r3, #9
 8007bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c0c:	ee17 3a90 	vmov	r3, s15
 8007c10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c12:	e005      	b.n	8007c20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61bb      	str	r3, [r7, #24]
    break;
 8007c18:	e002      	b.n	8007c20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007c1a:	4b07      	ldr	r3, [pc, #28]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c1c:	61bb      	str	r3, [r7, #24]
    break;
 8007c1e:	bf00      	nop
  }

  return sysclockfreq;
 8007c20:	69bb      	ldr	r3, [r7, #24]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3724      	adds	r7, #36	; 0x24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	58024400 	.word	0x58024400
 8007c34:	03d09000 	.word	0x03d09000
 8007c38:	003d0900 	.word	0x003d0900
 8007c3c:	00f42400 	.word	0x00f42400
 8007c40:	46000000 	.word	0x46000000
 8007c44:	4c742400 	.word	0x4c742400
 8007c48:	4a742400 	.word	0x4a742400
 8007c4c:	4b742400 	.word	0x4b742400

08007c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c56:	f7ff fe81 	bl	800795c <HAL_RCC_GetSysClockFreq>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	0a1b      	lsrs	r3, r3, #8
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	490f      	ldr	r1, [pc, #60]	; (8007ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c68:	5ccb      	ldrb	r3, [r1, r3]
 8007c6a:	f003 031f 	and.w	r3, r3, #31
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c74:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c7e:	5cd3      	ldrb	r3, [r2, r3]
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8a:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c8e:	4a07      	ldr	r2, [pc, #28]	; (8007cac <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c96:	681b      	ldr	r3, [r3, #0]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	58024400 	.word	0x58024400
 8007ca4:	08015e50 	.word	0x08015e50
 8007ca8:	24000004 	.word	0x24000004
 8007cac:	24000000 	.word	0x24000000

08007cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cb4:	f7ff ffcc 	bl	8007c50 <HAL_RCC_GetHCLKFreq>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	4b06      	ldr	r3, [pc, #24]	; (8007cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	091b      	lsrs	r3, r3, #4
 8007cc0:	f003 0307 	and.w	r3, r3, #7
 8007cc4:	4904      	ldr	r1, [pc, #16]	; (8007cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cc6:	5ccb      	ldrb	r3, [r1, r3]
 8007cc8:	f003 031f 	and.w	r3, r3, #31
 8007ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	58024400 	.word	0x58024400
 8007cd8:	08015e50 	.word	0x08015e50

08007cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ce0:	f7ff ffb6 	bl	8007c50 <HAL_RCC_GetHCLKFreq>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	4904      	ldr	r1, [pc, #16]	; (8007d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cf2:	5ccb      	ldrb	r3, [r1, r3]
 8007cf4:	f003 031f 	and.w	r3, r3, #31
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	58024400 	.word	0x58024400
 8007d04:	08015e50 	.word	0x08015e50

08007d08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	223f      	movs	r2, #63	; 0x3f
 8007d16:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d18:	4b1a      	ldr	r3, [pc, #104]	; (8007d84 <HAL_RCC_GetClockConfig+0x7c>)
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0207 	and.w	r2, r3, #7
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007d24:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <HAL_RCC_GetClockConfig+0x7c>)
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007d30:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <HAL_RCC_GetClockConfig+0x7c>)
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f003 020f 	and.w	r2, r3, #15
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <HAL_RCC_GetClockConfig+0x7c>)
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <HAL_RCC_GetClockConfig+0x7c>)
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d54:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <HAL_RCC_GetClockConfig+0x7c>)
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d60:	4b08      	ldr	r3, [pc, #32]	; (8007d84 <HAL_RCC_GetClockConfig+0x7c>)
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <HAL_RCC_GetClockConfig+0x80>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 020f 	and.w	r2, r3, #15
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	601a      	str	r2, [r3, #0]
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	58024400 	.word	0x58024400
 8007d88:	52002000 	.word	0x52002000

08007d8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d94:	2300      	movs	r3, #0
 8007d96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d03f      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007db0:	d02a      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007db2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007db6:	d824      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dbc:	d018      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dc2:	d81e      	bhi.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007dc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dcc:	d007      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007dce:	e018      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd0:	4bab      	ldr	r3, [pc, #684]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	4aaa      	ldr	r2, [pc, #680]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ddc:	e015      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	2102      	movs	r1, #2
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 fff3 	bl	8009dd0 <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dee:	e00c      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3324      	adds	r3, #36	; 0x24
 8007df4:	2102      	movs	r1, #2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f002 f89c 	bl	8009f34 <RCCEx_PLL3_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e00:	e003      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	75fb      	strb	r3, [r7, #23]
      break;
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d109      	bne.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e10:	4b9b      	ldr	r3, [pc, #620]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e1c:	4998      	ldr	r1, [pc, #608]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	650b      	str	r3, [r1, #80]	; 0x50
 8007e22:	e001      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d03d      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d826      	bhi.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e3c:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e42:	bf00      	nop
 8007e44:	08007e59 	.word	0x08007e59
 8007e48:	08007e67 	.word	0x08007e67
 8007e4c:	08007e79 	.word	0x08007e79
 8007e50:	08007e91 	.word	0x08007e91
 8007e54:	08007e91 	.word	0x08007e91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e58:	4b89      	ldr	r3, [pc, #548]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a88      	ldr	r2, [pc, #544]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e64:	e015      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3304      	adds	r3, #4
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 ffaf 	bl	8009dd0 <RCCEx_PLL2_Config>
 8007e72:	4603      	mov	r3, r0
 8007e74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e76:	e00c      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3324      	adds	r3, #36	; 0x24
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f002 f858 	bl	8009f34 <RCCEx_PLL3_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e88:	e003      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8e:	e000      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d109      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e98:	4b79      	ldr	r3, [pc, #484]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9c:	f023 0207 	bic.w	r2, r3, #7
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea4:	4976      	ldr	r1, [pc, #472]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	650b      	str	r3, [r1, #80]	; 0x50
 8007eaa:	e001      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d042      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec4:	d02b      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eca:	d825      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8007ece:	d028      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ed0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ed2:	d821      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007ed4:	2b80      	cmp	r3, #128	; 0x80
 8007ed6:	d016      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007ed8:	2b80      	cmp	r3, #128	; 0x80
 8007eda:	d81d      	bhi.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d007      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007ee4:	e018      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee6:	4b66      	ldr	r3, [pc, #408]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	4a65      	ldr	r2, [pc, #404]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007ef2:	e017      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 ff68 	bl	8009dd0 <RCCEx_PLL2_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f04:	e00e      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3324      	adds	r3, #36	; 0x24
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f002 f811 	bl	8009f34 <RCCEx_PLL3_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f16:	e005      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1c:	e002      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e000      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d109      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f2a:	4b55      	ldr	r3, [pc, #340]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f36:	4952      	ldr	r1, [pc, #328]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	650b      	str	r3, [r1, #80]	; 0x50
 8007f3c:	e001      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d049      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f58:	d030      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007f5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f5e:	d82a      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f64:	d02c      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007f66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f6a:	d824      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f70:	d018      	beq.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f76:	d81e      	bhi.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f80:	d007      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007f82:	e018      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f84:	4b3e      	ldr	r3, [pc, #248]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	4a3d      	ldr	r2, [pc, #244]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f90:	e017      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3304      	adds	r3, #4
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 ff19 	bl	8009dd0 <RCCEx_PLL2_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007fa2:	e00e      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3324      	adds	r3, #36	; 0x24
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 ffc2 	bl	8009f34 <RCCEx_PLL3_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fb4:	e005      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fba:	e002      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e000      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007fc8:	4b2d      	ldr	r3, [pc, #180]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fcc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fd6:	492a      	ldr	r1, [pc, #168]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	658b      	str	r3, [r1, #88]	; 0x58
 8007fdc:	e001      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d04c      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ff4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ff8:	d030      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ffe:	d82a      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008004:	d02c      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800800a:	d824      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800800c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008010:	d018      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008016:	d81e      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800801c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008020:	d007      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008022:	e018      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008024:	4b16      	ldr	r3, [pc, #88]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4a15      	ldr	r2, [pc, #84]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800802a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008030:	e017      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3304      	adds	r3, #4
 8008036:	2100      	movs	r1, #0
 8008038:	4618      	mov	r0, r3
 800803a:	f001 fec9 	bl	8009dd0 <RCCEx_PLL2_Config>
 800803e:	4603      	mov	r3, r0
 8008040:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008042:	e00e      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3324      	adds	r3, #36	; 0x24
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f001 ff72 	bl	8009f34 <RCCEx_PLL3_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008054:	e005      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
      break;
 800805a:	e002      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800806a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008076:	4902      	ldr	r1, [pc, #8]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008078:	4313      	orrs	r3, r2
 800807a:	658b      	str	r3, [r1, #88]	; 0x58
 800807c:	e004      	b.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800807e:	bf00      	nop
 8008080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d032      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008098:	2b30      	cmp	r3, #48	; 0x30
 800809a:	d01c      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800809c:	2b30      	cmp	r3, #48	; 0x30
 800809e:	d817      	bhi.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80080a0:	2b20      	cmp	r3, #32
 80080a2:	d00c      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d813      	bhi.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d016      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d10f      	bne.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4baf      	ldr	r3, [pc, #700]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	4aae      	ldr	r2, [pc, #696]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80080bc:	e00e      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2102      	movs	r1, #2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fe83 	bl	8009dd0 <RCCEx_PLL2_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80080ce:	e005      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	75fb      	strb	r3, [r7, #23]
      break;
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80080d6:	bf00      	nop
 80080d8:	e000      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80080da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d109      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80080e2:	4ba3      	ldr	r3, [pc, #652]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ee:	49a0      	ldr	r1, [pc, #640]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080f4:	e001      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d047      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800810e:	d030      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008114:	d82a      	bhi.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800811a:	d02c      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800811c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008120:	d824      	bhi.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008126:	d018      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812c:	d81e      	bhi.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008136:	d007      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008138:	e018      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813a:	4b8d      	ldr	r3, [pc, #564]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	4a8c      	ldr	r2, [pc, #560]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008144:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008146:	e017      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3304      	adds	r3, #4
 800814c:	2100      	movs	r1, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f001 fe3e 	bl	8009dd0 <RCCEx_PLL2_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008158:	e00e      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3324      	adds	r3, #36	; 0x24
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f001 fee7 	bl	8009f34 <RCCEx_PLL3_Config>
 8008166:	4603      	mov	r3, r0
 8008168:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800816a:	e005      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	75fb      	strb	r3, [r7, #23]
      break;
 8008170:	e002      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008172:	bf00      	nop
 8008174:	e000      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800817e:	4b7c      	ldr	r3, [pc, #496]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008182:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818a:	4979      	ldr	r1, [pc, #484]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800818c:	4313      	orrs	r3, r2
 800818e:	650b      	str	r3, [r1, #80]	; 0x50
 8008190:	e001      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d049      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081aa:	d02e      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80081ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081b0:	d828      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80081b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081b6:	d02a      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80081b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081bc:	d822      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80081be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081c2:	d026      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80081c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081c8:	d81c      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80081ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ce:	d010      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80081d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081d4:	d816      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01d      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80081da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081de:	d111      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	2101      	movs	r1, #1
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fdf2 	bl	8009dd0 <RCCEx_PLL2_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081f0:	e012      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3324      	adds	r3, #36	; 0x24
 80081f6:	2101      	movs	r1, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 fe9b 	bl	8009f34 <RCCEx_PLL3_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008202:	e009      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
      break;
 8008208:	e006      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800820a:	bf00      	nop
 800820c:	e004      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800820e:	bf00      	nop
 8008210:	e002      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800821e:	4b54      	ldr	r3, [pc, #336]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008222:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822a:	4951      	ldr	r1, [pc, #324]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800822c:	4313      	orrs	r3, r2
 800822e:	650b      	str	r3, [r1, #80]	; 0x50
 8008230:	e001      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d04b      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800824c:	d02e      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 800824e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008252:	d828      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008258:	d02a      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825e:	d822      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008260:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008264:	d026      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008266:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800826a:	d81c      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800826c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008270:	d010      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008276:	d816      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d01d      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800827c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008280:	d111      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3304      	adds	r3, #4
 8008286:	2101      	movs	r1, #1
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fda1 	bl	8009dd0 <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008292:	e012      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3324      	adds	r3, #36	; 0x24
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fe4a 	bl	8009f34 <RCCEx_PLL3_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80082a4:	e009      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
      break;
 80082aa:	e006      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80082ac:	bf00      	nop
 80082ae:	e004      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80082b0:	bf00      	nop
 80082b2:	e002      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80082b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80082c0:	4b2b      	ldr	r3, [pc, #172]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082ce:	4928      	ldr	r1, [pc, #160]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	658b      	str	r3, [r1, #88]	; 0x58
 80082d4:	e001      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d02f      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082ee:	d00e      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80082f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f4:	d814      	bhi.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d015      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80082fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082fe:	d10f      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008300:	4b1b      	ldr	r3, [pc, #108]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	4a1a      	ldr	r2, [pc, #104]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800830a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800830c:	e00c      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3304      	adds	r3, #4
 8008312:	2101      	movs	r1, #1
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fd5b 	bl	8009dd0 <RCCEx_PLL2_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800831e:	e003      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]
      break;
 8008324:	e000      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008332:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800833a:	490d      	ldr	r1, [pc, #52]	; (8008370 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800833c:	4313      	orrs	r3, r2
 800833e:	650b      	str	r3, [r1, #80]	; 0x50
 8008340:	e001      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
 8008344:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d033      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008356:	2b03      	cmp	r3, #3
 8008358:	d81c      	bhi.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800835a:	a201      	add	r2, pc, #4	; (adr r2, 8008360 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	0800839b 	.word	0x0800839b
 8008364:	08008375 	.word	0x08008375
 8008368:	08008383 	.word	0x08008383
 800836c:	0800839b 	.word	0x0800839b
 8008370:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008374:	4bb8      	ldr	r3, [pc, #736]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4ab7      	ldr	r2, [pc, #732]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800837a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800837e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008380:	e00c      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3304      	adds	r3, #4
 8008386:	2102      	movs	r1, #2
 8008388:	4618      	mov	r0, r3
 800838a:	f001 fd21 	bl	8009dd0 <RCCEx_PLL2_Config>
 800838e:	4603      	mov	r3, r0
 8008390:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008392:	e003      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	75fb      	strb	r3, [r7, #23]
      break;
 8008398:	e000      	b.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800839a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d109      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80083a2:	4bad      	ldr	r3, [pc, #692]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a6:	f023 0203 	bic.w	r2, r3, #3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	49aa      	ldr	r1, [pc, #680]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80083b4:	e001      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 8086 	beq.w	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083c8:	4ba4      	ldr	r3, [pc, #656]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4aa3      	ldr	r2, [pc, #652]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80083ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083d4:	f7f9 fd18 	bl	8001e08 <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083da:	e009      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083dc:	f7f9 fd14 	bl	8001e08 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b64      	cmp	r3, #100	; 0x64
 80083e8:	d902      	bls.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	75fb      	strb	r3, [r7, #23]
        break;
 80083ee:	e005      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083f0:	4b9a      	ldr	r3, [pc, #616]	; (800865c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0ef      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80083fc:	7dfb      	ldrb	r3, [r7, #23]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d166      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008402:	4b95      	ldr	r3, [pc, #596]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008404:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800840c:	4053      	eors	r3, r2
 800840e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008412:	2b00      	cmp	r3, #0
 8008414:	d013      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008416:	4b90      	ldr	r3, [pc, #576]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800841e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008420:	4b8d      	ldr	r3, [pc, #564]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008424:	4a8c      	ldr	r2, [pc, #560]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800842c:	4b8a      	ldr	r3, [pc, #552]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800842e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008430:	4a89      	ldr	r2, [pc, #548]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008436:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008438:	4a87      	ldr	r2, [pc, #540]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008448:	d115      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844a:	f7f9 fcdd 	bl	8001e08 <HAL_GetTick>
 800844e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008450:	e00b      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008452:	f7f9 fcd9 	bl	8001e08 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008460:	4293      	cmp	r3, r2
 8008462:	d902      	bls.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	75fb      	strb	r3, [r7, #23]
            break;
 8008468:	e005      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800846a:	4b7b      	ldr	r3, [pc, #492]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0ed      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d126      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800848a:	d10d      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800848c:	4b72      	ldr	r3, [pc, #456]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800849a:	0919      	lsrs	r1, r3, #4
 800849c:	4b70      	ldr	r3, [pc, #448]	; (8008660 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800849e:	400b      	ands	r3, r1
 80084a0:	496d      	ldr	r1, [pc, #436]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	610b      	str	r3, [r1, #16]
 80084a6:	e005      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80084a8:	4b6b      	ldr	r3, [pc, #428]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	4a6a      	ldr	r2, [pc, #424]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80084b2:	6113      	str	r3, [r2, #16]
 80084b4:	4b68      	ldr	r3, [pc, #416]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084c2:	4965      	ldr	r1, [pc, #404]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	670b      	str	r3, [r1, #112]	; 0x70
 80084c8:	e004      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	75bb      	strb	r3, [r7, #22]
 80084ce:	e001      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d07e      	beq.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e4:	2b28      	cmp	r3, #40	; 0x28
 80084e6:	d867      	bhi.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	080085bf 	.word	0x080085bf
 80084f4:	080085b9 	.word	0x080085b9
 80084f8:	080085b9 	.word	0x080085b9
 80084fc:	080085b9 	.word	0x080085b9
 8008500:	080085b9 	.word	0x080085b9
 8008504:	080085b9 	.word	0x080085b9
 8008508:	080085b9 	.word	0x080085b9
 800850c:	080085b9 	.word	0x080085b9
 8008510:	08008595 	.word	0x08008595
 8008514:	080085b9 	.word	0x080085b9
 8008518:	080085b9 	.word	0x080085b9
 800851c:	080085b9 	.word	0x080085b9
 8008520:	080085b9 	.word	0x080085b9
 8008524:	080085b9 	.word	0x080085b9
 8008528:	080085b9 	.word	0x080085b9
 800852c:	080085b9 	.word	0x080085b9
 8008530:	080085a7 	.word	0x080085a7
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080085b9 	.word	0x080085b9
 800853c:	080085b9 	.word	0x080085b9
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085b9 	.word	0x080085b9
 8008548:	080085b9 	.word	0x080085b9
 800854c:	080085b9 	.word	0x080085b9
 8008550:	080085bf 	.word	0x080085bf
 8008554:	080085b9 	.word	0x080085b9
 8008558:	080085b9 	.word	0x080085b9
 800855c:	080085b9 	.word	0x080085b9
 8008560:	080085b9 	.word	0x080085b9
 8008564:	080085b9 	.word	0x080085b9
 8008568:	080085b9 	.word	0x080085b9
 800856c:	080085b9 	.word	0x080085b9
 8008570:	080085bf 	.word	0x080085bf
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085b9 	.word	0x080085b9
 800857c:	080085b9 	.word	0x080085b9
 8008580:	080085b9 	.word	0x080085b9
 8008584:	080085b9 	.word	0x080085b9
 8008588:	080085b9 	.word	0x080085b9
 800858c:	080085b9 	.word	0x080085b9
 8008590:	080085bf 	.word	0x080085bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3304      	adds	r3, #4
 8008598:	2101      	movs	r1, #1
 800859a:	4618      	mov	r0, r3
 800859c:	f001 fc18 	bl	8009dd0 <RCCEx_PLL2_Config>
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80085a4:	e00c      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3324      	adds	r3, #36	; 0x24
 80085aa:	2101      	movs	r1, #1
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fcc1 	bl	8009f34 <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80085b6:	e003      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	75fb      	strb	r3, [r7, #23]
      break;
 80085bc:	e000      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80085be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80085c6:	4b24      	ldr	r3, [pc, #144]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085d2:	4921      	ldr	r1, [pc, #132]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	654b      	str	r3, [r1, #84]	; 0x54
 80085d8:	e001      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d03e      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d820      	bhi.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	0800863b 	.word	0x0800863b
 80085fc:	08008611 	.word	0x08008611
 8008600:	08008623 	.word	0x08008623
 8008604:	0800863b 	.word	0x0800863b
 8008608:	0800863b 	.word	0x0800863b
 800860c:	0800863b 	.word	0x0800863b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3304      	adds	r3, #4
 8008614:	2101      	movs	r1, #1
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fbda 	bl	8009dd0 <RCCEx_PLL2_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008620:	e00c      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	3324      	adds	r3, #36	; 0x24
 8008626:	2101      	movs	r1, #1
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fc83 	bl	8009f34 <RCCEx_PLL3_Config>
 800862e:	4603      	mov	r3, r0
 8008630:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008632:	e003      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	75fb      	strb	r3, [r7, #23]
      break;
 8008638:	e000      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800863a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d110      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008646:	f023 0207 	bic.w	r2, r3, #7
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800864e:	4902      	ldr	r1, [pc, #8]	; (8008658 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008650:	4313      	orrs	r3, r2
 8008652:	654b      	str	r3, [r1, #84]	; 0x54
 8008654:	e008      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008656:	bf00      	nop
 8008658:	58024400 	.word	0x58024400
 800865c:	58024800 	.word	0x58024800
 8008660:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
 8008666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d039      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867a:	2b05      	cmp	r3, #5
 800867c:	d820      	bhi.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	080086c7 	.word	0x080086c7
 8008688:	0800869d 	.word	0x0800869d
 800868c:	080086af 	.word	0x080086af
 8008690:	080086c7 	.word	0x080086c7
 8008694:	080086c7 	.word	0x080086c7
 8008698:	080086c7 	.word	0x080086c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3304      	adds	r3, #4
 80086a0:	2101      	movs	r1, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 fb94 	bl	8009dd0 <RCCEx_PLL2_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80086ac:	e00c      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3324      	adds	r3, #36	; 0x24
 80086b2:	2101      	movs	r1, #1
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fc3d 	bl	8009f34 <RCCEx_PLL3_Config>
 80086ba:	4603      	mov	r3, r0
 80086bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80086be:	e003      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	75fb      	strb	r3, [r7, #23]
      break;
 80086c4:	e000      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80086c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10a      	bne.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086ce:	4bb7      	ldr	r3, [pc, #732]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d2:	f023 0207 	bic.w	r2, r3, #7
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086dc:	49b3      	ldr	r1, [pc, #716]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	658b      	str	r3, [r1, #88]	; 0x58
 80086e2:	e001      	b.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d04b      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086fe:	d02e      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008704:	d828      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870a:	d02a      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008710:	d822      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008712:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008716:	d026      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800871c:	d81c      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800871e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008722:	d010      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008728:	d816      	bhi.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01d      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800872e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008732:	d111      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	2100      	movs	r1, #0
 800873a:	4618      	mov	r0, r3
 800873c:	f001 fb48 	bl	8009dd0 <RCCEx_PLL2_Config>
 8008740:	4603      	mov	r3, r0
 8008742:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008744:	e012      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3324      	adds	r3, #36	; 0x24
 800874a:	2102      	movs	r1, #2
 800874c:	4618      	mov	r0, r3
 800874e:	f001 fbf1 	bl	8009f34 <RCCEx_PLL3_Config>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008756:	e009      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	75fb      	strb	r3, [r7, #23]
      break;
 800875c:	e006      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800875e:	bf00      	nop
 8008760:	e004      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008762:	bf00      	nop
 8008764:	e002      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800876a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008772:	4b8e      	ldr	r3, [pc, #568]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008776:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008780:	498a      	ldr	r1, [pc, #552]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008782:	4313      	orrs	r3, r2
 8008784:	654b      	str	r3, [r1, #84]	; 0x54
 8008786:	e001      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d04b      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800879e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087a2:	d02e      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80087a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80087a8:	d828      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80087aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ae:	d02a      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80087b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087b4:	d822      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80087b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087ba:	d026      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80087bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087c0:	d81c      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80087c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c6:	d010      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80087c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087cc:	d816      	bhi.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01d      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80087d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087d6:	d111      	bne.n	80087fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	3304      	adds	r3, #4
 80087dc:	2100      	movs	r1, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 faf6 	bl	8009dd0 <RCCEx_PLL2_Config>
 80087e4:	4603      	mov	r3, r0
 80087e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087e8:	e012      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3324      	adds	r3, #36	; 0x24
 80087ee:	2102      	movs	r1, #2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 fb9f 	bl	8009f34 <RCCEx_PLL3_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087fa:	e009      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008800:	e006      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008802:	bf00      	nop
 8008804:	e004      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008806:	bf00      	nop
 8008808:	e002      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800880a:	bf00      	nop
 800880c:	e000      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800880e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008816:	4b65      	ldr	r3, [pc, #404]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008824:	4961      	ldr	r1, [pc, #388]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008826:	4313      	orrs	r3, r2
 8008828:	658b      	str	r3, [r1, #88]	; 0x58
 800882a:	e001      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008838:	2b00      	cmp	r3, #0
 800883a:	d04b      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008842:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008846:	d02e      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008848:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800884c:	d828      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800884e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008852:	d02a      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008858:	d822      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800885a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800885e:	d026      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008860:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008864:	d81c      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800886a:	d010      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800886c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008870:	d816      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008872:	2b00      	cmp	r3, #0
 8008874:	d01d      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887a:	d111      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f001 faa4 	bl	8009dd0 <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800888c:	e012      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3324      	adds	r3, #36	; 0x24
 8008892:	2102      	movs	r1, #2
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fb4d 	bl	8009f34 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800889e:	e009      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e006      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80088a6:	bf00      	nop
 80088a8:	e004      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80088aa:	bf00      	nop
 80088ac:	e002      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80088ae:	bf00      	nop
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80088b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80088ba:	4b3c      	ldr	r3, [pc, #240]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088c8:	4938      	ldr	r1, [pc, #224]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	658b      	str	r3, [r1, #88]	; 0x58
 80088ce:	e001      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01a      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ea:	d10a      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3324      	adds	r3, #36	; 0x24
 80088f0:	2102      	movs	r1, #2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 fb1e 	bl	8009f34 <RCCEx_PLL3_Config>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d001      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008902:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008910:	4926      	ldr	r1, [pc, #152]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008912:	4313      	orrs	r3, r2
 8008914:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01a      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800892c:	d10a      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3324      	adds	r3, #36	; 0x24
 8008932:	2102      	movs	r1, #2
 8008934:	4618      	mov	r0, r3
 8008936:	f001 fafd 	bl	8009f34 <RCCEx_PLL3_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008944:	4b19      	ldr	r3, [pc, #100]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008952:	4916      	ldr	r1, [pc, #88]	; (80089ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008954:	4313      	orrs	r3, r2
 8008956:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d036      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800896a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800896e:	d01f      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008974:	d817      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d003      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800897a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800897e:	d009      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008980:	e011      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3304      	adds	r3, #4
 8008986:	2100      	movs	r1, #0
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fa21 	bl	8009dd0 <RCCEx_PLL2_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008992:	e00e      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3324      	adds	r3, #36	; 0x24
 8008998:	2102      	movs	r1, #2
 800899a:	4618      	mov	r0, r3
 800899c:	f001 faca 	bl	8009f34 <RCCEx_PLL3_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80089a4:	e005      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
      break;
 80089aa:	e002      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80089ac:	58024400 	.word	0x58024400
      break;
 80089b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089b8:	4b93      	ldr	r3, [pc, #588]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089c6:	4990      	ldr	r1, [pc, #576]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	658b      	str	r3, [r1, #88]	; 0x58
 80089cc:	e001      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d033      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089e8:	d01c      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80089ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089ee:	d816      	bhi.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80089f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089f4:	d003      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80089f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089fa:	d007      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80089fc:	e00f      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089fe:	4b82      	ldr	r3, [pc, #520]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	4a81      	ldr	r2, [pc, #516]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a0a:	e00c      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3324      	adds	r3, #36	; 0x24
 8008a10:	2101      	movs	r1, #1
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 fa8e 	bl	8009f34 <RCCEx_PLL3_Config>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a1c:	e003      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	75fb      	strb	r3, [r7, #23]
      break;
 8008a22:	e000      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008a24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a2c:	4b76      	ldr	r3, [pc, #472]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a3a:	4973      	ldr	r1, [pc, #460]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8008a40:	e001      	b.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d029      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5e:	d007      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008a60:	e00f      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a62:	4b69      	ldr	r3, [pc, #420]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	4a68      	ldr	r2, [pc, #416]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a6e:	e00b      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3304      	adds	r3, #4
 8008a74:	2102      	movs	r1, #2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 f9aa 	bl	8009dd0 <RCCEx_PLL2_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a80:	e002      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	75fb      	strb	r3, [r7, #23]
      break;
 8008a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a8e:	4b5e      	ldr	r3, [pc, #376]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a9a:	495b      	ldr	r1, [pc, #364]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008aa0:	e001      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3324      	adds	r3, #36	; 0x24
 8008ab6:	2102      	movs	r1, #2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 fa3b 	bl	8009f34 <RCCEx_PLL3_Config>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d030      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008adc:	d017      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ae2:	d811      	bhi.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ae8:	d013      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aee:	d80b      	bhi.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d010      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af8:	d106      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008afa:	4b43      	ldr	r3, [pc, #268]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	4a42      	ldr	r2, [pc, #264]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008b06:	e007      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0c:	e004      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008b0e:	bf00      	nop
 8008b10:	e002      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008b12:	bf00      	nop
 8008b14:	e000      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d109      	bne.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b1e:	4b3a      	ldr	r3, [pc, #232]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b2a:	4937      	ldr	r1, [pc, #220]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	654b      	str	r3, [r1, #84]	; 0x54
 8008b30:	e001      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
 8008b34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d008      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b42:	4b31      	ldr	r3, [pc, #196]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	492e      	ldr	r1, [pc, #184]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d009      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008b60:	4b29      	ldr	r3, [pc, #164]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b6e:	4926      	ldr	r1, [pc, #152]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d008      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b80:	4b21      	ldr	r3, [pc, #132]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b8c:	491e      	ldr	r1, [pc, #120]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00d      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b9e:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	4a19      	ldr	r2, [pc, #100]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ba8:	6113      	str	r3, [r2, #16]
 8008baa:	4b17      	ldr	r3, [pc, #92]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bac:	691a      	ldr	r2, [r3, #16]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008bb4:	4914      	ldr	r1, [pc, #80]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	da08      	bge.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008bc2:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bce:	490e      	ldr	r1, [pc, #56]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008be0:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bee:	4906      	ldr	r1, [pc, #24]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008bf4:	7dbb      	ldrb	r3, [r7, #22]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e000      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3718      	adds	r7, #24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	58024400 	.word	0x58024400

08008c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b090      	sub	sp, #64	; 0x40
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c1a:	f040 8095 	bne.w	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008c1e:	4bae      	ldr	r3, [pc, #696]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	633b      	str	r3, [r7, #48]	; 0x30
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	f200 8088 	bhi.w	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008c4d 	.word	0x08008c4d
 8008c3c:	08008c75 	.word	0x08008c75
 8008c40:	08008c9d 	.word	0x08008c9d
 8008c44:	08008d39 	.word	0x08008d39
 8008c48:	08008cc5 	.word	0x08008cc5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c4c:	4ba2      	ldr	r3, [pc, #648]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c58:	d108      	bne.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 ff64 	bl	8009b2c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c68:	f000 bc95 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c70:	f000 bc91 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c74:	4b98      	ldr	r3, [pc, #608]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c80:	d108      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c82:	f107 0318 	add.w	r3, r7, #24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fca8 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c90:	f000 bc81 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c98:	f000 bc7d 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c9c:	4b8e      	ldr	r3, [pc, #568]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca8:	d108      	bne.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008caa:	f107 030c 	add.w	r3, r7, #12
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fde8 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cb8:	f000 bc6d 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc0:	f000 bc69 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cc4:	4b84      	ldr	r3, [pc, #528]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ccc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cce:	4b82      	ldr	r3, [pc, #520]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d10c      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ce0:	4b7d      	ldr	r3, [pc, #500]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	08db      	lsrs	r3, r3, #3
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	4a7c      	ldr	r2, [pc, #496]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf2:	e01f      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cf4:	4b78      	ldr	r3, [pc, #480]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d00:	d106      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8008d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d08:	d102      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d0a:	4b75      	ldr	r3, [pc, #468]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d0e:	e011      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d10:	4b71      	ldr	r3, [pc, #452]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d1c:	d106      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d24:	d102      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d26:	4b6f      	ldr	r3, [pc, #444]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d2a:	e003      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d30:	f000 bc31 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008d34:	f000 bc2f 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d38:	4b6b      	ldr	r3, [pc, #428]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d3c:	f000 bc2b 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d44:	f000 bc27 	b.w	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d4e:	f040 8095 	bne.w	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008d52:	4b61      	ldr	r3, [pc, #388]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d56:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008d5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	d04d      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6a:	f200 8084 	bhi.w	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	2bc0      	cmp	r3, #192	; 0xc0
 8008d72:	d07d      	beq.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	2bc0      	cmp	r3, #192	; 0xc0
 8008d78:	d87d      	bhi.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	2b80      	cmp	r3, #128	; 0x80
 8008d7e:	d02d      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	2b80      	cmp	r3, #128	; 0x80
 8008d84:	d877      	bhi.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d012      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008d92:	e070      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d94:	4b50      	ldr	r3, [pc, #320]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008da0:	d107      	bne.n	8008db2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fec0 	bl	8009b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008db0:	e3f1      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db6:	e3ee      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008db8:	4b47      	ldr	r3, [pc, #284]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc4:	d107      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dc6:	f107 0318 	add.w	r3, r7, #24
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fc06 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dd4:	e3df      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dda:	e3dc      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ddc:	4b3e      	ldr	r3, [pc, #248]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008de8:	d107      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dea:	f107 030c 	add.w	r3, r7, #12
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 fd48 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008df8:	e3cd      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dfe:	e3ca      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e00:	4b35      	ldr	r3, [pc, #212]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e0a:	4b33      	ldr	r3, [pc, #204]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0304 	and.w	r3, r3, #4
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d10c      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d109      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e1c:	4b2e      	ldr	r3, [pc, #184]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	08db      	lsrs	r3, r3, #3
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	4a2d      	ldr	r2, [pc, #180]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008e28:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e2e:	e01e      	b.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e30:	4b29      	ldr	r3, [pc, #164]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3c:	d106      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e44:	d102      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e46:	4b26      	ldr	r3, [pc, #152]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e4a:	e010      	b.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e4c:	4b22      	ldr	r3, [pc, #136]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e58:	d106      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e60:	d102      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e62:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e66:	e002      	b.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e6c:	e393      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008e6e:	e392      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e70:	4b1d      	ldr	r3, [pc, #116]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e74:	e38f      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e7a:	e38c      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e82:	f040 80a7 	bne.w	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008e86:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e8e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e96:	d05f      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e9e:	f200 8096 	bhi.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ea8:	f000 808e 	beq.w	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008eb2:	f200 808c 	bhi.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ebc:	d03a      	beq.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ec4:	f200 8083 	bhi.w	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ed4:	d01c      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8008ed6:	e07a      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008ed8:	58024400 	.word	0x58024400
 8008edc:	03d09000 	.word	0x03d09000
 8008ee0:	003d0900 	.word	0x003d0900
 8008ee4:	00f42400 	.word	0x00f42400
 8008ee8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eec:	4baa      	ldr	r3, [pc, #680]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ef8:	d107      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fe14 	bl	8009b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f08:	e345      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0e:	e342      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f10:	4ba1      	ldr	r3, [pc, #644]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f1c:	d107      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1e:	f107 0318 	add.w	r3, r7, #24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fb5a 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f2c:	e333      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f32:	e330      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f34:	4b98      	ldr	r3, [pc, #608]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f40:	d107      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f42:	f107 030c 	add.w	r3, r7, #12
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fc9c 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f50:	e321      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f56:	e31e      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f58:	4b8f      	ldr	r3, [pc, #572]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f60:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f62:	4b8d      	ldr	r3, [pc, #564]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0304 	and.w	r3, r3, #4
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d10c      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d109      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f74:	4b88      	ldr	r3, [pc, #544]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	08db      	lsrs	r3, r3, #3
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	4a87      	ldr	r2, [pc, #540]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008f80:	fa22 f303 	lsr.w	r3, r2, r3
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f86:	e01e      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f88:	4b83      	ldr	r3, [pc, #524]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f94:	d106      	bne.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f9c:	d102      	bne.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f9e:	4b80      	ldr	r3, [pc, #512]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa2:	e010      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fa4:	4b7c      	ldr	r3, [pc, #496]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fb0:	d106      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fb8:	d102      	bne.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008fba:	4b7a      	ldr	r3, [pc, #488]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fbe:	e002      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fc4:	e2e7      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008fc6:	e2e6      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fc8:	4b77      	ldr	r3, [pc, #476]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fcc:	e2e3      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd2:	e2e0      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fda:	f040 809c 	bne.w	8009116 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008fde:	4b6e      	ldr	r3, [pc, #440]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008fe6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fee:	d054      	beq.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ff6:	f200 808b 	bhi.w	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009000:	f000 8083 	beq.w	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800900a:	f200 8081 	bhi.w	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009014:	d02f      	beq.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800901c:	d878      	bhi.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800902a:	d012      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800902c:	e070      	b.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800902e:	4b5a      	ldr	r3, [pc, #360]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800903a:	d107      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800903c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fd73 	bl	8009b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800904a:	e2a4      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009050:	e2a1      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009052:	4b51      	ldr	r3, [pc, #324]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800905a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800905e:	d107      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009060:	f107 0318 	add.w	r3, r7, #24
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fab9 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800906e:	e292      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009074:	e28f      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009076:	4b48      	ldr	r3, [pc, #288]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800907e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009082:	d107      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009084:	f107 030c 	add.w	r3, r7, #12
 8009088:	4618      	mov	r0, r3
 800908a:	f000 fbfb 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009092:	e280      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009098:	e27d      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800909a:	4b3f      	ldr	r3, [pc, #252]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800909c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090a4:	4b3c      	ldr	r3, [pc, #240]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d10c      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80090b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090b6:	4b38      	ldr	r3, [pc, #224]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	08db      	lsrs	r3, r3, #3
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	4a36      	ldr	r2, [pc, #216]	; (800919c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80090c2:	fa22 f303 	lsr.w	r3, r2, r3
 80090c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090c8:	e01e      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090ca:	4b33      	ldr	r3, [pc, #204]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d6:	d106      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80090d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090de:	d102      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80090e0:	4b2f      	ldr	r3, [pc, #188]	; (80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e4:	e010      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090e6:	4b2c      	ldr	r3, [pc, #176]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f2:	d106      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80090f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090fa:	d102      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80090fc:	4b29      	ldr	r3, [pc, #164]	; (80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80090fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009100:	e002      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009106:	e246      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009108:	e245      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800910a:	4b27      	ldr	r3, [pc, #156]	; (80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800910e:	e242      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009114:	e23f      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800911c:	f040 80a8 	bne.w	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009120:	4b1d      	ldr	r3, [pc, #116]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009124:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009128:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009130:	d060      	beq.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009138:	f200 8097 	bhi.w	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009142:	f000 808f 	beq.w	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800914c:	f200 808d 	bhi.w	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009156:	d03b      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800915e:	f200 8084 	bhi.w	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	2b00      	cmp	r3, #0
 8009166:	d004      	beq.n	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916e:	d01d      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8009170:	e07b      	b.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800917e:	d107      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fcd1 	bl	8009b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800918e:	e202      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009194:	e1ff      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009196:	bf00      	nop
 8009198:	58024400 	.word	0x58024400
 800919c:	03d09000 	.word	0x03d09000
 80091a0:	003d0900 	.word	0x003d0900
 80091a4:	00f42400 	.word	0x00f42400
 80091a8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091ac:	4ba3      	ldr	r3, [pc, #652]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091b8:	d107      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ba:	f107 0318 	add.w	r3, r7, #24
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fa0c 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091c8:	e1e5      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ce:	e1e2      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091d0:	4b9a      	ldr	r3, [pc, #616]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091dc:	d107      	bne.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fb4e 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091ec:	e1d3      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f2:	e1d0      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091f4:	4b91      	ldr	r3, [pc, #580]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80091f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091fe:	4b8f      	ldr	r3, [pc, #572]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 0304 	and.w	r3, r3, #4
 8009206:	2b04      	cmp	r3, #4
 8009208:	d10c      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800920a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920c:	2b00      	cmp	r3, #0
 800920e:	d109      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009210:	4b8a      	ldr	r3, [pc, #552]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	08db      	lsrs	r3, r3, #3
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	4a89      	ldr	r2, [pc, #548]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800921c:	fa22 f303 	lsr.w	r3, r2, r3
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009222:	e01e      	b.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009224:	4b85      	ldr	r3, [pc, #532]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009230:	d106      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009238:	d102      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800923a:	4b82      	ldr	r3, [pc, #520]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800923e:	e010      	b.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009240:	4b7e      	ldr	r3, [pc, #504]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800924c:	d106      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800924e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009254:	d102      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009256:	4b7c      	ldr	r3, [pc, #496]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800925a:	e002      	b.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009260:	e199      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009262:	e198      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009264:	4b79      	ldr	r3, [pc, #484]	; (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009268:	e195      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800926e:	e192      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009276:	d173      	bne.n	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009278:	4b70      	ldr	r3, [pc, #448]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800927a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009280:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009288:	d02f      	beq.n	80092ea <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009290:	d863      	bhi.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	2b00      	cmp	r3, #0
 8009296:	d004      	beq.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800929e:	d012      	beq.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80092a0:	e05b      	b.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092a2:	4b66      	ldr	r3, [pc, #408]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092ae:	d107      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092b0:	f107 0318 	add.w	r3, r7, #24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f991 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092be:	e16a      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c4:	e167      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092c6:	4b5d      	ldr	r3, [pc, #372]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092d2:	d107      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 fad3 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092e2:	e158      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092e4:	2300      	movs	r3, #0
 80092e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092e8:	e155      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092ea:	4b54      	ldr	r3, [pc, #336]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092f2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092f4:	4b51      	ldr	r3, [pc, #324]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d10c      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009306:	4b4d      	ldr	r3, [pc, #308]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	08db      	lsrs	r3, r3, #3
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	4a4b      	ldr	r2, [pc, #300]	; (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009312:	fa22 f303 	lsr.w	r3, r2, r3
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009318:	e01e      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800931a:	4b48      	ldr	r3, [pc, #288]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009326:	d106      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800932e:	d102      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009330:	4b44      	ldr	r3, [pc, #272]	; (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009334:	e010      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009336:	4b41      	ldr	r3, [pc, #260]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800933e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009342:	d106      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800934a:	d102      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800934c:	4b3e      	ldr	r3, [pc, #248]	; (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800934e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009350:	e002      	b.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009352:	2300      	movs	r3, #0
 8009354:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009356:	e11e      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009358:	e11d      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800935e:	e11a      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009366:	d133      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009368:	4b34      	ldr	r3, [pc, #208]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800936a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009370:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	2b00      	cmp	r3, #0
 8009376:	d004      	beq.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800937e:	d012      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009380:	e023      	b.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009382:	4b2e      	ldr	r3, [pc, #184]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800938a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800938e:	d107      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fbc9 	bl	8009b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800939e:	e0fa      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093a4:	e0f7      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093a6:	4b25      	ldr	r3, [pc, #148]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093b2:	d107      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b4:	f107 0318 	add.w	r3, r7, #24
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f90f 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093c2:	e0e8      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093c8:	e0e5      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ce:	e0e2      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093d6:	f040 808f 	bne.w	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80093da:	4b18      	ldr	r3, [pc, #96]	; (800943c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80093dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80093e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ea:	d075      	beq.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093f2:	d87e      	bhi.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fa:	d060      	beq.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009402:	d876      	bhi.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800940a:	d045      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009412:	d86e      	bhi.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800941a:	d02b      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800941c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009422:	d866      	bhi.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	2b00      	cmp	r3, #0
 8009428:	d004      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800942a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009430:	d00e      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009432:	e05e      	b.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009434:	f000 f8bc 	bl	80095b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009438:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800943a:	e0ac      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800943c:	58024400 	.word	0x58024400
 8009440:	03d09000 	.word	0x03d09000
 8009444:	003d0900 	.word	0x003d0900
 8009448:	00f42400 	.word	0x00f42400
 800944c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009450:	4b53      	ldr	r3, [pc, #332]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800945e:	f107 0318 	add.w	r3, r7, #24
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f8ba 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800946c:	e093      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009472:	e090      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009474:	4b4a      	ldr	r3, [pc, #296]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800947c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009480:	d107      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009482:	f107 030c 	add.w	r3, r7, #12
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f9fc 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009490:	e081      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009496:	e07e      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009498:	4b41      	ldr	r3, [pc, #260]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d109      	bne.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094a4:	4b3e      	ldr	r3, [pc, #248]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	08db      	lsrs	r3, r3, #3
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	4a3d      	ldr	r2, [pc, #244]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80094b0:	fa22 f303 	lsr.w	r3, r2, r3
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094b6:	e06e      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094bc:	e06b      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80094be:	4b38      	ldr	r3, [pc, #224]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ca:	d102      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 80094cc:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094d0:	e061      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d6:	e05e      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094d8:	4b31      	ldr	r3, [pc, #196]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094e4:	d102      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 80094e6:	4b31      	ldr	r3, [pc, #196]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094ea:	e054      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094f0:	e051      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094f6:	e04e      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094fe:	d148      	bne.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009500:	4b27      	ldr	r3, [pc, #156]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009508:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009510:	d02a      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009518:	d838      	bhi.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009526:	d00d      	beq.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009528:	e030      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800952a:	4b1d      	ldr	r3, [pc, #116]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009536:	d102      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009538:	4b1c      	ldr	r3, [pc, #112]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800953c:	e02b      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009542:	e028      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009544:	4b16      	ldr	r3, [pc, #88]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009550:	d107      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fae8 	bl	8009b2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009560:	e019      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009566:	e016      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009574:	d107      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009576:	f107 0318 	add.w	r3, r7, #24
 800957a:	4618      	mov	r0, r3
 800957c:	f000 f82e 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009584:	e007      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800958a:	e004      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009590:	e001      	b.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009598:	4618      	mov	r0, r3
 800959a:	3740      	adds	r7, #64	; 0x40
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	58024400 	.word	0x58024400
 80095a4:	03d09000 	.word	0x03d09000
 80095a8:	003d0900 	.word	0x003d0900
 80095ac:	00f42400 	.word	0x00f42400

080095b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80095b4:	f7fe fb4c 	bl	8007c50 <HAL_RCC_GetHCLKFreq>
 80095b8:	4602      	mov	r2, r0
 80095ba:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	091b      	lsrs	r3, r3, #4
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	4904      	ldr	r1, [pc, #16]	; (80095d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095c6:	5ccb      	ldrb	r3, [r1, r3]
 80095c8:	f003 031f 	and.w	r3, r3, #31
 80095cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	58024400 	.word	0x58024400
 80095d8:	08015e50 	.word	0x08015e50

080095dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095dc:	b480      	push	{r7}
 80095de:	b089      	sub	sp, #36	; 0x24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095e4:	4ba1      	ldr	r3, [pc, #644]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e8:	f003 0303 	and.w	r3, r3, #3
 80095ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095ee:	4b9f      	ldr	r3, [pc, #636]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	0b1b      	lsrs	r3, r3, #12
 80095f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095fa:	4b9c      	ldr	r3, [pc, #624]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fe:	091b      	lsrs	r3, r3, #4
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009606:	4b99      	ldr	r3, [pc, #612]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960a:	08db      	lsrs	r3, r3, #3
 800960c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	fb02 f303 	mul.w	r3, r2, r3
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 8111 	beq.w	800984c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b02      	cmp	r3, #2
 800962e:	f000 8083 	beq.w	8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b02      	cmp	r3, #2
 8009636:	f200 80a1 	bhi.w	800977c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d056      	beq.n	80096f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009646:	e099      	b.n	800977c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009648:	4b88      	ldr	r3, [pc, #544]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b00      	cmp	r3, #0
 8009652:	d02d      	beq.n	80096b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009654:	4b85      	ldr	r3, [pc, #532]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	08db      	lsrs	r3, r3, #3
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	4a84      	ldr	r2, [pc, #528]	; (8009870 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009660:	fa22 f303 	lsr.w	r3, r2, r3
 8009664:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	ee07 3a90 	vmov	s15, r3
 800966c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967e:	4b7b      	ldr	r3, [pc, #492]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009692:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096ae:	e087      	b.n	80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009878 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c2:	4b6a      	ldr	r3, [pc, #424]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096f2:	e065      	b.n	80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009706:	4b59      	ldr	r3, [pc, #356]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009716:	ed97 6a03 	vldr	s12, [r7, #12]
 800971a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800971e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800972a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009736:	e043      	b.n	80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009742:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800974a:	4b48      	ldr	r3, [pc, #288]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800974c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800975a:	ed97 6a03 	vldr	s12, [r7, #12]
 800975e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800976a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800976e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800977a:	e021      	b.n	80097c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009786:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800987c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800978a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978e:	4b37      	ldr	r3, [pc, #220]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979e:	ed97 6a03 	vldr	s12, [r7, #12]
 80097a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097c0:	4b2a      	ldr	r3, [pc, #168]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c4:	0a5b      	lsrs	r3, r3, #9
 80097c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097da:	edd7 6a07 	vldr	s13, [r7, #28]
 80097de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e6:	ee17 2a90 	vmov	r2, s15
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097ee:	4b1f      	ldr	r3, [pc, #124]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	0c1b      	lsrs	r3, r3, #16
 80097f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f8:	ee07 3a90 	vmov	s15, r3
 80097fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009804:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009808:	edd7 6a07 	vldr	s13, [r7, #28]
 800980c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009814:	ee17 2a90 	vmov	r2, s15
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800981c:	4b13      	ldr	r3, [pc, #76]	; (800986c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	0e1b      	lsrs	r3, r3, #24
 8009822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800982e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009836:	edd7 6a07 	vldr	s13, [r7, #28]
 800983a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800983e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009842:	ee17 2a90 	vmov	r2, s15
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800984a:	e008      	b.n	800985e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	609a      	str	r2, [r3, #8]
}
 800985e:	bf00      	nop
 8009860:	3724      	adds	r7, #36	; 0x24
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	58024400 	.word	0x58024400
 8009870:	03d09000 	.word	0x03d09000
 8009874:	46000000 	.word	0x46000000
 8009878:	4c742400 	.word	0x4c742400
 800987c:	4a742400 	.word	0x4a742400
 8009880:	4b742400 	.word	0x4b742400

08009884 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009884:	b480      	push	{r7}
 8009886:	b089      	sub	sp, #36	; 0x24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800988c:	4ba1      	ldr	r3, [pc, #644]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	f003 0303 	and.w	r3, r3, #3
 8009894:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009896:	4b9f      	ldr	r3, [pc, #636]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989a:	0d1b      	lsrs	r3, r3, #20
 800989c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098a2:	4b9c      	ldr	r3, [pc, #624]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	0a1b      	lsrs	r3, r3, #8
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098ae:	4b99      	ldr	r3, [pc, #612]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b2:	08db      	lsrs	r3, r3, #3
 80098b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	fb02 f303 	mul.w	r3, r2, r3
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8111 	beq.w	8009af4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	f000 8083 	beq.w	80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b02      	cmp	r3, #2
 80098de:	f200 80a1 	bhi.w	8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d056      	beq.n	800999c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098ee:	e099      	b.n	8009a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098f0:	4b88      	ldr	r3, [pc, #544]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d02d      	beq.n	8009958 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098fc:	4b85      	ldr	r3, [pc, #532]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	08db      	lsrs	r3, r3, #3
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	4a84      	ldr	r2, [pc, #528]	; (8009b18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009908:	fa22 f303 	lsr.w	r3, r2, r3
 800990c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	ee07 3a90 	vmov	s15, r3
 8009914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	ee07 3a90 	vmov	s15, r3
 800991e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009926:	4b7b      	ldr	r3, [pc, #492]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009936:	ed97 6a03 	vldr	s12, [r7, #12]
 800993a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800993e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800994a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800994e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009952:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009956:	e087      	b.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009962:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800996a:	4b6a      	ldr	r3, [pc, #424]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800996c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800997a:	ed97 6a03 	vldr	s12, [r7, #12]
 800997e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800998a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800998e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800999a:	e065      	b.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	ee07 3a90 	vmov	s15, r3
 80099a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ae:	4b59      	ldr	r3, [pc, #356]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099be:	ed97 6a03 	vldr	s12, [r7, #12]
 80099c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099de:	e043      	b.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f2:	4b48      	ldr	r3, [pc, #288]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a22:	e021      	b.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a36:	4b37      	ldr	r3, [pc, #220]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a68:	4b2a      	ldr	r3, [pc, #168]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6c:	0a5b      	lsrs	r3, r3, #9
 8009a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a82:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a8e:	ee17 2a90 	vmov	r2, s15
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a96:	4b1f      	ldr	r3, [pc, #124]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	0c1b      	lsrs	r3, r3, #16
 8009a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009aa0:	ee07 3a90 	vmov	s15, r3
 8009aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009abc:	ee17 2a90 	vmov	r2, s15
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ac4:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac8:	0e1b      	lsrs	r3, r3, #24
 8009aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aea:	ee17 2a90 	vmov	r2, s15
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009af2:	e008      	b.n	8009b06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	609a      	str	r2, [r3, #8]
}
 8009b06:	bf00      	nop
 8009b08:	3724      	adds	r7, #36	; 0x24
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	58024400 	.word	0x58024400
 8009b18:	03d09000 	.word	0x03d09000
 8009b1c:	46000000 	.word	0x46000000
 8009b20:	4c742400 	.word	0x4c742400
 8009b24:	4a742400 	.word	0x4a742400
 8009b28:	4b742400 	.word	0x4b742400

08009b2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b089      	sub	sp, #36	; 0x24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b34:	4ba0      	ldr	r3, [pc, #640]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009b3e:	4b9e      	ldr	r3, [pc, #632]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	091b      	lsrs	r3, r3, #4
 8009b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b48:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b4a:	4b9b      	ldr	r3, [pc, #620]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b54:	4b98      	ldr	r3, [pc, #608]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b58:	08db      	lsrs	r3, r3, #3
 8009b5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	fb02 f303 	mul.w	r3, r2, r3
 8009b64:	ee07 3a90 	vmov	s15, r3
 8009b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 8111 	beq.w	8009d9a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	f000 8083 	beq.w	8009c86 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	f200 80a1 	bhi.w	8009cca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d056      	beq.n	8009c42 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b94:	e099      	b.n	8009cca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b96:	4b88      	ldr	r3, [pc, #544]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d02d      	beq.n	8009bfe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ba2:	4b85      	ldr	r3, [pc, #532]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	08db      	lsrs	r3, r3, #3
 8009ba8:	f003 0303 	and.w	r3, r3, #3
 8009bac:	4a83      	ldr	r2, [pc, #524]	; (8009dbc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009bae:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	ee07 3a90 	vmov	s15, r3
 8009bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bcc:	4b7a      	ldr	r3, [pc, #488]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd4:	ee07 3a90 	vmov	s15, r3
 8009bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009be4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bfc:	e087      	b.n	8009d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c08:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c10:	4b69      	ldr	r3, [pc, #420]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c18:	ee07 3a90 	vmov	s15, r3
 8009c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c20:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c24:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c40:	e065      	b.n	8009d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	ee07 3a90 	vmov	s15, r3
 8009c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c54:	4b58      	ldr	r3, [pc, #352]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c64:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c68:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c84:	e043      	b.n	8009d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	ee07 3a90 	vmov	s15, r3
 8009c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009dcc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c98:	4b47      	ldr	r3, [pc, #284]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cac:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cc8:	e021      	b.n	8009d0e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	ee07 3a90 	vmov	s15, r3
 8009cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cdc:	4b36      	ldr	r3, [pc, #216]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce4:	ee07 3a90 	vmov	s15, r3
 8009ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009dc0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d0c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009d0e:	4b2a      	ldr	r3, [pc, #168]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d12:	0a5b      	lsrs	r3, r3, #9
 8009d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d18:	ee07 3a90 	vmov	s15, r3
 8009d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d34:	ee17 2a90 	vmov	r2, s15
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009d3c:	4b1e      	ldr	r3, [pc, #120]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	0c1b      	lsrs	r3, r3, #16
 8009d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d62:	ee17 2a90 	vmov	r2, s15
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009d6a:	4b13      	ldr	r3, [pc, #76]	; (8009db8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6e:	0e1b      	lsrs	r3, r3, #24
 8009d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d74:	ee07 3a90 	vmov	s15, r3
 8009d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d90:	ee17 2a90 	vmov	r2, s15
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d98:	e008      	b.n	8009dac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	609a      	str	r2, [r3, #8]
}
 8009dac:	bf00      	nop
 8009dae:	3724      	adds	r7, #36	; 0x24
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	58024400 	.word	0x58024400
 8009dbc:	03d09000 	.word	0x03d09000
 8009dc0:	46000000 	.word	0x46000000
 8009dc4:	4c742400 	.word	0x4c742400
 8009dc8:	4a742400 	.word	0x4a742400
 8009dcc:	4b742400 	.word	0x4b742400

08009dd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dde:	4b53      	ldr	r3, [pc, #332]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d101      	bne.n	8009dee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e099      	b.n	8009f22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dee:	4b4f      	ldr	r3, [pc, #316]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a4e      	ldr	r2, [pc, #312]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009df4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dfa:	f7f8 f805 	bl	8001e08 <HAL_GetTick>
 8009dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e00:	e008      	b.n	8009e14 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e02:	f7f8 f801 	bl	8001e08 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e086      	b.n	8009f22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e14:	4b45      	ldr	r3, [pc, #276]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1f0      	bne.n	8009e02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e20:	4b42      	ldr	r3, [pc, #264]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	031b      	lsls	r3, r3, #12
 8009e2e:	493f      	ldr	r1, [pc, #252]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	628b      	str	r3, [r1, #40]	; 0x28
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	025b      	lsls	r3, r3, #9
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e56:	431a      	orrs	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	061b      	lsls	r3, r3, #24
 8009e60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e64:	4931      	ldr	r1, [pc, #196]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e6a:	4b30      	ldr	r3, [pc, #192]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	492d      	ldr	r1, [pc, #180]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e7c:	4b2b      	ldr	r3, [pc, #172]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	f023 0220 	bic.w	r2, r3, #32
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	4928      	ldr	r1, [pc, #160]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e8e:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e92:	4a26      	ldr	r2, [pc, #152]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e94:	f023 0310 	bic.w	r3, r3, #16
 8009e98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e9a:	4b24      	ldr	r3, [pc, #144]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e9e:	4b24      	ldr	r3, [pc, #144]	; (8009f30 <RCCEx_PLL2_Config+0x160>)
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	69d2      	ldr	r2, [r2, #28]
 8009ea6:	00d2      	lsls	r2, r2, #3
 8009ea8:	4920      	ldr	r1, [pc, #128]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009eae:	4b1f      	ldr	r3, [pc, #124]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb2:	4a1e      	ldr	r2, [pc, #120]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009eb4:	f043 0310 	orr.w	r3, r3, #16
 8009eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ec0:	4b1a      	ldr	r3, [pc, #104]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec4:	4a19      	ldr	r2, [pc, #100]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ecc:	e00f      	b.n	8009eee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d106      	bne.n	8009ee2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ed4:	4b15      	ldr	r3, [pc, #84]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	4a14      	ldr	r2, [pc, #80]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ede:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ee0:	e005      	b.n	8009eee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ee2:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee6:	4a11      	ldr	r2, [pc, #68]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009eec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a0e      	ldr	r2, [pc, #56]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009efa:	f7f7 ff85 	bl	8001e08 <HAL_GetTick>
 8009efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f00:	e008      	b.n	8009f14 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f02:	f7f7 ff81 	bl	8001e08 <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d901      	bls.n	8009f14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e006      	b.n	8009f22 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <RCCEx_PLL2_Config+0x15c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0f0      	beq.n	8009f02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	58024400 	.word	0x58024400
 8009f30:	ffff0007 	.word	0xffff0007

08009f34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f42:	4b53      	ldr	r3, [pc, #332]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d101      	bne.n	8009f52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e099      	b.n	800a086 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f52:	4b4f      	ldr	r3, [pc, #316]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a4e      	ldr	r2, [pc, #312]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f5e:	f7f7 ff53 	bl	8001e08 <HAL_GetTick>
 8009f62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f64:	e008      	b.n	8009f78 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f66:	f7f7 ff4f 	bl	8001e08 <HAL_GetTick>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d901      	bls.n	8009f78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e086      	b.n	800a086 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f78:	4b45      	ldr	r3, [pc, #276]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1f0      	bne.n	8009f66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f84:	4b42      	ldr	r3, [pc, #264]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	051b      	lsls	r3, r3, #20
 8009f92:	493f      	ldr	r1, [pc, #252]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	628b      	str	r3, [r1, #40]	; 0x28
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	025b      	lsls	r3, r3, #9
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	041b      	lsls	r3, r3, #16
 8009fb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	061b      	lsls	r3, r3, #24
 8009fc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fc8:	4931      	ldr	r1, [pc, #196]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fce:	4b30      	ldr	r3, [pc, #192]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	492d      	ldr	r1, [pc, #180]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fe0:	4b2b      	ldr	r3, [pc, #172]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	4928      	ldr	r1, [pc, #160]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ff2:	4b27      	ldr	r3, [pc, #156]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	4a26      	ldr	r2, [pc, #152]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 8009ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ffe:	4b24      	ldr	r3, [pc, #144]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a002:	4b24      	ldr	r3, [pc, #144]	; (800a094 <RCCEx_PLL3_Config+0x160>)
 800a004:	4013      	ands	r3, r2
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	69d2      	ldr	r2, [r2, #28]
 800a00a:	00d2      	lsls	r2, r2, #3
 800a00c:	4920      	ldr	r1, [pc, #128]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a012:	4b1f      	ldr	r3, [pc, #124]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4a1e      	ldr	r2, [pc, #120]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a01c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d106      	bne.n	800a032 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a024:	4b1a      	ldr	r3, [pc, #104]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	4a19      	ldr	r2, [pc, #100]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a02a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a02e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a030:	e00f      	b.n	800a052 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d106      	bne.n	800a046 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a038:	4b15      	ldr	r3, [pc, #84]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	4a14      	ldr	r2, [pc, #80]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a03e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a042:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a044:	e005      	b.n	800a052 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a046:	4b12      	ldr	r3, [pc, #72]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	4a11      	ldr	r2, [pc, #68]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a04c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a050:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a052:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a0e      	ldr	r2, [pc, #56]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a05c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a05e:	f7f7 fed3 	bl	8001e08 <HAL_GetTick>
 800a062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a064:	e008      	b.n	800a078 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a066:	f7f7 fecf 	bl	8001e08 <HAL_GetTick>
 800a06a:	4602      	mov	r2, r0
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	2b02      	cmp	r3, #2
 800a072:	d901      	bls.n	800a078 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a074:	2303      	movs	r3, #3
 800a076:	e006      	b.n	800a086 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <RCCEx_PLL3_Config+0x15c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0f0      	beq.n	800a066 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a084:	7bfb      	ldrb	r3, [r7, #15]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	58024400 	.word	0x58024400
 800a094:	ffff0007 	.word	0xffff0007

0800a098 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	; 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e075      	b.n	800a196 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d105      	bne.n	800a0c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7f7 f841 	bl	8001144 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2203      	movs	r2, #3
 800a0c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f868 	bl	800a1a0 <HAL_SD_InitCard>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e05d      	b.n	800a196 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a0da:	f107 0308 	add.w	r3, r7, #8
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fda5 	bl	800ac30 <HAL_SD_GetCardStatus>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e052      	b.n	800a196 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800a0f0:	7e3b      	ldrb	r3, [r7, #24]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a0f6:	7e7b      	ldrb	r3, [r7, #25]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10a      	bne.n	800a11a <HAL_SD_Init+0x82>
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <HAL_SD_Init+0x78>
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d004      	beq.n	800a11a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a116:	659a      	str	r2, [r3, #88]	; 0x58
 800a118:	e00b      	b.n	800a132 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d104      	bne.n	800a12c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a128:	659a      	str	r2, [r3, #88]	; 0x58
 800a12a:	e002      	b.n	800a132 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fe5b 	bl	800adf4 <HAL_SD_ConfigWideBusOperation>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d001      	beq.n	800a148 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e026      	b.n	800a196 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800a148:	f7f7 fe5e 	bl	8001e08 <HAL_GetTick>
 800a14c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a14e:	e011      	b.n	800a174 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a150:	f7f7 fe5a 	bl	8001e08 <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15e:	d109      	bne.n	800a174 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a166:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e010      	b.n	800a196 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 ff4d 	bl	800b014 <HAL_SD_GetCardState>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d1e7      	bne.n	800a150 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3728      	adds	r7, #40	; 0x28
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b08d      	sub	sp, #52	; 0x34
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a1b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a1bc:	f7fe fd26 	bl	8008c0c <HAL_RCCEx_GetPeriphCLKFreq>
 800a1c0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d109      	bne.n	800a1dc <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a1d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e06a      	b.n	800a2b2 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	0a1b      	lsrs	r3, r3, #8
 800a1e0:	4a36      	ldr	r2, [pc, #216]	; (800a2bc <HAL_SD_InitCard+0x11c>)
 800a1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e6:	091b      	lsrs	r3, r3, #4
 800a1e8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681c      	ldr	r4, [r3, #0]
 800a1ee:	466a      	mov	r2, sp
 800a1f0:	f107 0318 	add.w	r3, r7, #24
 800a1f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800a1fc:	f107 030c 	add.w	r3, r7, #12
 800a200:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a202:	4620      	mov	r0, r4
 800a204:	f004 fc16 	bl	800ea34 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f004 fc59 	bl	800eac4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a218:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a21e:	4a28      	ldr	r2, [pc, #160]	; (800a2c0 <HAL_SD_InitCard+0x120>)
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	fbb2 f3f3 	udiv	r3, r2, r3
 800a226:	3301      	adds	r3, #1
 800a228:	4618      	mov	r0, r3
 800a22a:	f7f7 fdf9 	bl	8001e20 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 ffcc 	bl	800b1cc <SD_PowerON>
 800a234:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	431a      	orrs	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e02e      	b.n	800a2b2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fefd 	bl	800b054 <SD_InitCard>
 800a25a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00b      	beq.n	800a27a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	431a      	orrs	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e01b      	b.n	800a2b2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a282:	4618      	mov	r0, r3
 800a284:	f004 fcb4 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800a288:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00f      	beq.n	800a2b0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a0b      	ldr	r2, [pc, #44]	; (800a2c4 <HAL_SD_InitCard+0x124>)
 800a296:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	372c      	adds	r7, #44	; 0x2c
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd90      	pop	{r4, r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	014f8b59 	.word	0x014f8b59
 800a2c0:	00012110 	.word	0x00012110
 800a2c4:	1fe00fff 	.word	0x1fe00fff

0800a2c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b08c      	sub	sp, #48	; 0x30
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d107      	bne.n	800a2f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e08d      	b.n	800a40c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	f040 8086 	bne.w	800a40a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	441a      	add	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30e:	429a      	cmp	r2, r3
 800a310:	d907      	bls.n	800a322 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a316:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e074      	b.n	800a40c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2203      	movs	r2, #3
 800a326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2200      	movs	r2, #0
 800a330:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	025a      	lsls	r2, r3, #9
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a344:	2b01      	cmp	r3, #1
 800a346:	d002      	beq.n	800a34e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	025b      	lsls	r3, r3, #9
 800a34c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a34e:	f04f 33ff 	mov.w	r3, #4294967295
 800a352:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	025b      	lsls	r3, r3, #9
 800a358:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a35a:	2390      	movs	r3, #144	; 0x90
 800a35c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a35e:	2302      	movs	r3, #2
 800a360:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a362:	2300      	movs	r3, #0
 800a364:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a366:	2300      	movs	r3, #0
 800a368:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f107 0210 	add.w	r2, r7, #16
 800a372:	4611      	mov	r1, r2
 800a374:	4618      	mov	r0, r3
 800a376:	f004 fc0f 	bl	800eb98 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a388:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	2201      	movs	r2, #1
 800a398:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d90a      	bls.n	800a3b6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2282      	movs	r2, #130	; 0x82
 800a3a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f004 fc65 	bl	800ec7c <SDMMC_CmdReadMultiBlock>
 800a3b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a3b4:	e009      	b.n	800a3ca <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2281      	movs	r2, #129	; 0x81
 800a3ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f004 fc37 	bl	800ec36 <SDMMC_CmdReadSingleBlock>
 800a3c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d012      	beq.n	800a3f6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a0f      	ldr	r2, [pc, #60]	; (800a414 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e00a      	b.n	800a40c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a404:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	e000      	b.n	800a40c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a40a:	2302      	movs	r3, #2
  }
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3730      	adds	r7, #48	; 0x30
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	1fe00fff 	.word	0x1fe00fff

0800a418 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08c      	sub	sp, #48	; 0x30
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
 800a424:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d107      	bne.n	800a440 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e08d      	b.n	800a55c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b01      	cmp	r3, #1
 800a44a:	f040 8086 	bne.w	800a55a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	441a      	add	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a45e:	429a      	cmp	r2, r3
 800a460:	d907      	bls.n	800a472 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a466:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e074      	b.n	800a55c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2203      	movs	r2, #3
 800a476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2200      	movs	r2, #0
 800a480:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	025a      	lsls	r2, r3, #9
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a494:	2b01      	cmp	r3, #1
 800a496:	d002      	beq.n	800a49e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	025b      	lsls	r3, r3, #9
 800a49c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a49e:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	025b      	lsls	r3, r3, #9
 800a4a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a4aa:	2390      	movs	r3, #144	; 0x90
 800a4ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f107 0210 	add.w	r2, r7, #16
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f004 fb67 	bl	800eb98 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4d8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d90a      	bls.n	800a506 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	22a0      	movs	r2, #160	; 0xa0
 800a4f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f004 fc03 	bl	800ed08 <SDMMC_CmdWriteMultiBlock>
 800a502:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a504:	e009      	b.n	800a51a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2290      	movs	r2, #144	; 0x90
 800a50a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a512:	4618      	mov	r0, r3
 800a514:	f004 fbd5 	bl	800ecc2 <SDMMC_CmdWriteSingleBlock>
 800a518:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d012      	beq.n	800a546 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a0f      	ldr	r2, [pc, #60]	; (800a564 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a526:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	431a      	orrs	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e00a      	b.n	800a55c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800a554:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	e000      	b.n	800a55c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a55a:	2302      	movs	r3, #2
  }
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3730      	adds	r7, #48	; 0x30
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	1fe00fff 	.word	0x1fe00fff

0800a568 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a574:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <HAL_SD_IRQHandler+0x2e>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f003 0308 	and.w	r3, r3, #8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f001 f904 	bl	800b79c <SD_Read_IT>
 800a594:	e19a      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80ac 	beq.w	800a6fe <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	4b9d      	ldr	r3, [pc, #628]	; (800a830 <HAL_SD_IRQHandler+0x2c8>)
 800a5bc:	400b      	ands	r3, r1
 800a5be:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a5ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5de:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f003 0308 	and.w	r3, r3, #8
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d038      	beq.n	800a65c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d104      	bne.n	800a5fe <HAL_SD_IRQHandler+0x96>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f003 0320 	and.w	r3, r3, #32
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d011      	beq.n	800a622 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f004 fba4 	bl	800ed50 <SDMMC_CmdStopTransfer>
 800a608:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d008      	beq.n	800a622 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	431a      	orrs	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f959 	bl	800a8d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a83      	ldr	r2, [pc, #524]	; (800a834 <HAL_SD_IRQHandler+0x2cc>)
 800a628:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d104      	bne.n	800a64c <HAL_SD_IRQHandler+0xe4>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f006 fbc1 	bl	8010dd4 <HAL_SD_RxCpltCallback>
 800a652:	e13b      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f006 fbb3 	bl	8010dc0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a65a:	e137      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 8132 	beq.w	800a8cc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2200      	movs	r2, #0
 800a66e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2200      	movs	r2, #0
 800a676:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2200      	movs	r2, #0
 800a67e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f003 0302 	and.w	r3, r3, #2
 800a686:	2b00      	cmp	r3, #0
 800a688:	d104      	bne.n	800a694 <HAL_SD_IRQHandler+0x12c>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d011      	beq.n	800a6b8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f004 fb59 	bl	800ed50 <SDMMC_CmdStopTransfer>
 800a69e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d008      	beq.n	800a6b8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f90e 	bl	800a8d4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d104      	bne.n	800a6da <HAL_SD_IRQHandler+0x172>
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f003 0320 	and.w	r3, r3, #32
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f006 fb70 	bl	8010dc0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d105      	bne.n	800a6f6 <HAL_SD_IRQHandler+0x18e>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 80eb 	beq.w	800a8cc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f006 fb6c 	bl	8010dd4 <HAL_SD_RxCpltCallback>
}
 800a6fc:	e0e6      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d008      	beq.n	800a71e <HAL_SD_IRQHandler+0x1b6>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f003 0308 	and.w	r3, r3, #8
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f001 f886 	bl	800b828 <SD_Write_IT>
 800a71c:	e0d6      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a724:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 80a2 	beq.w	800a872 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a734:	f003 0302 	and.w	r3, r3, #2
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d005      	beq.n	800a748 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a740:	f043 0202 	orr.w	r2, r3, #2
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74e:	f003 0308 	and.w	r3, r3, #8
 800a752:	2b00      	cmp	r3, #0
 800a754:	d005      	beq.n	800a762 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a75a:	f043 0208 	orr.w	r2, r3, #8
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a774:	f043 0220 	orr.w	r2, r3, #32
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a782:	f003 0310 	and.w	r3, r3, #16
 800a786:	2b00      	cmp	r3, #0
 800a788:	d005      	beq.n	800a796 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78e:	f043 0210 	orr.w	r2, r3, #16
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a26      	ldr	r2, [pc, #152]	; (800a834 <HAL_SD_IRQHandler+0x2cc>)
 800a79c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a7ac:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7bc:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a7cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68da      	ldr	r2, [r3, #12]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7dc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f004 fab4 	bl	800ed50 <SDMMC_CmdStopTransfer>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a802:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a80c:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f003 0308 	and.w	r3, r3, #8
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00f      	beq.n	800a838 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 f854 	bl	800a8d4 <HAL_SD_ErrorCallback>
}
 800a82c:	e04e      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
 800a82e:	bf00      	nop
 800a830:	ffff3ec5 	.word	0xffff3ec5
 800a834:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d044      	beq.n	800a8cc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a846:	2b00      	cmp	r3, #0
 800a848:	d040      	beq.n	800a8cc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a858:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f832 	bl	800a8d4 <HAL_SD_ErrorCallback>
}
 800a870:	e02c      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d025      	beq.n	800a8cc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a888:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10c      	bne.n	800a8b2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 f828 	bl	800b8f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a8a8:	e010      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 f810 	bl	800b8d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a8b0:	e00c      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f003 0320 	and.w	r3, r3, #32
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f001 f811 	bl	800b8e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a8c2:	e003      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fff9 	bl	800b8bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a8ca:	e7ff      	b.n	800a8cc <HAL_SD_IRQHandler+0x364>
 800a8cc:	bf00      	nop
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8f6:	0f9b      	lsrs	r3, r3, #30
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a902:	0e9b      	lsrs	r3, r3, #26
 800a904:	b2db      	uxtb	r3, r3
 800a906:	f003 030f 	and.w	r3, r3, #15
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a914:	0e1b      	lsrs	r3, r3, #24
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 0303 	and.w	r3, r3, #3
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a926:	0c1b      	lsrs	r3, r3, #16
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a932:	0a1b      	lsrs	r3, r3, #8
 800a934:	b2da      	uxtb	r2, r3
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a948:	0d1b      	lsrs	r3, r3, #20
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a954:	0c1b      	lsrs	r3, r3, #16
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a966:	0bdb      	lsrs	r3, r3, #15
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	b2da      	uxtb	r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a978:	0b9b      	lsrs	r3, r3, #14
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a98a:	0b5b      	lsrs	r3, r3, #13
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	b2da      	uxtb	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a99c:	0b1b      	lsrs	r3, r3, #12
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d163      	bne.n	800aa80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9bc:	009a      	lsls	r2, r3, #2
 800a9be:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a9c8:	0f92      	lsrs	r2, r2, #30
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9d4:	0edb      	lsrs	r3, r3, #27
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9e6:	0e1b      	lsrs	r3, r3, #24
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0307 	and.w	r3, r3, #7
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f8:	0d5b      	lsrs	r3, r3, #21
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0307 	and.w	r3, r3, #7
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa0a:	0c9b      	lsrs	r3, r3, #18
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	f003 0307 	and.w	r3, r3, #7
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa1c:	0bdb      	lsrs	r3, r3, #15
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	f003 0307 	and.w	r3, r3, #7
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	1c5a      	adds	r2, r3, #1
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	7e1b      	ldrb	r3, [r3, #24]
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	f003 0307 	and.w	r3, r3, #7
 800aa3e:	3302      	adds	r3, #2
 800aa40:	2201      	movs	r2, #1
 800aa42:	fa02 f303 	lsl.w	r3, r2, r3
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa4a:	fb02 f203 	mul.w	r2, r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	7a1b      	ldrb	r3, [r3, #8]
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	f003 030f 	and.w	r3, r3, #15
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	409a      	lsls	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800aa6c:	0a52      	lsrs	r2, r2, #9
 800aa6e:	fb02 f203 	mul.w	r2, r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa7c:	655a      	str	r2, [r3, #84]	; 0x54
 800aa7e:	e031      	b.n	800aae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d11d      	bne.n	800aac4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa96:	0c1b      	lsrs	r3, r3, #16
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	029a      	lsls	r2, r3, #10
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aab8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	655a      	str	r2, [r3, #84]	; 0x54
 800aac2:	e00f      	b.n	800aae4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a58      	ldr	r2, [pc, #352]	; (800ac2c <HAL_SD_GetCardCSD+0x344>)
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800aae0:	2301      	movs	r3, #1
 800aae2:	e09d      	b.n	800ac20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aae8:	0b9b      	lsrs	r3, r3, #14
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aafa:	09db      	lsrs	r3, r3, #7
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab1c:	0fdb      	lsrs	r3, r3, #31
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab28:	0f5b      	lsrs	r3, r3, #29
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	f003 0303 	and.w	r3, r3, #3
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab3a:	0e9b      	lsrs	r3, r3, #26
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 0307 	and.w	r3, r3, #7
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab4c:	0d9b      	lsrs	r3, r3, #22
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 030f 	and.w	r3, r3, #15
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5e:	0d5b      	lsrs	r3, r3, #21
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab7a:	0c1b      	lsrs	r3, r3, #16
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab8e:	0bdb      	lsrs	r3, r3, #15
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	f003 0301 	and.w	r3, r3, #1
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aba2:	0b9b      	lsrs	r3, r3, #14
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abb6:	0b5b      	lsrs	r3, r3, #13
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abca:	0b1b      	lsrs	r3, r3, #12
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abde:	0a9b      	lsrs	r3, r3, #10
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	b2da      	uxtb	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abf2:	0a1b      	lsrs	r3, r3, #8
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	b2da      	uxtb	r2, r3
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac06:	085b      	lsrs	r3, r3, #1
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	1fe00fff 	.word	0x1fe00fff

0800ac30 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b094      	sub	sp, #80	; 0x50
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ac40:	f107 0308 	add.w	r3, r7, #8
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb4a 	bl	800b2e0 <SD_SendSDStatus>
 800ac4c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d011      	beq.n	800ac78 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a4f      	ldr	r2, [pc, #316]	; (800ad98 <HAL_SD_GetCardStatus+0x168>)
 800ac5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac62:	431a      	orrs	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ac76:	e070      	b.n	800ad5a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	099b      	lsrs	r3, r3, #6
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	f003 0303 	and.w	r3, r3, #3
 800ac82:	b2da      	uxtb	r2, r3
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	095b      	lsrs	r3, r3, #5
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	0a1b      	lsrs	r3, r3, #8
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	0e1b      	lsrs	r3, r3, #24
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	4313      	orrs	r3, r2
 800acac:	b29a      	uxth	r2, r3
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	061a      	lsls	r2, r3, #24
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	021b      	lsls	r3, r3, #8
 800acba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acbe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	0a1b      	lsrs	r3, r3, #8
 800acc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acc8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	0e1b      	lsrs	r3, r3, #24
 800acce:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	0a1b      	lsrs	r3, r3, #8
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	0d1b      	lsrs	r3, r3, #20
 800acea:	b2db      	uxtb	r3, r3
 800acec:	f003 030f 	and.w	r3, r3, #15
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	0c1b      	lsrs	r3, r3, #16
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	0a9b      	lsrs	r3, r3, #10
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	0a1b      	lsrs	r3, r3, #8
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 0303 	and.w	r3, r3, #3
 800ad2c:	b2da      	uxtb	r2, r3
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	091b      	lsrs	r3, r3, #4
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	0e1b      	lsrs	r3, r3, #24
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad62:	4618      	mov	r0, r3
 800ad64:	f003 ff44 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800ad68:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00d      	beq.n	800ad8c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a08      	ldr	r2, [pc, #32]	; (800ad98 <HAL_SD_GetCardStatus+0x168>)
 800ad76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad7c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ad8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3750      	adds	r7, #80	; 0x50
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	1fe00fff 	.word	0x1fe00fff

0800ad9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b08d      	sub	sp, #52	; 0x34
 800adf8:	af02      	add	r7, sp, #8
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2203      	movs	r2, #3
 800ae08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d02e      	beq.n	800ae72 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae1a:	d106      	bne.n	800ae2a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	635a      	str	r2, [r3, #52]	; 0x34
 800ae28:	e029      	b.n	800ae7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae30:	d10a      	bne.n	800ae48 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fb4c 	bl	800b4d0 <SD_WideBus_Enable>
 800ae38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	431a      	orrs	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	635a      	str	r2, [r3, #52]	; 0x34
 800ae46:	e01a      	b.n	800ae7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10a      	bne.n	800ae64 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fb89 	bl	800b566 <SD_WideBus_Disable>
 800ae54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	431a      	orrs	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	635a      	str	r2, [r3, #52]	; 0x34
 800ae62:	e00c      	b.n	800ae7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	635a      	str	r2, [r3, #52]	; 0x34
 800ae70:	e005      	b.n	800ae7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d007      	beq.n	800ae96 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a5e      	ldr	r2, [pc, #376]	; (800b004 <HAL_SD_ConfigWideBusOperation+0x210>)
 800ae8c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ae94:	e094      	b.n	800afc0 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ae96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ae9a:	f7fd feb7 	bl	8008c0c <HAL_RCCEx_GetPeriphCLKFreq>
 800ae9e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8083 	beq.w	800afae <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	695a      	ldr	r2, [r3, #20]
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	4950      	ldr	r1, [pc, #320]	; (800b008 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aec6:	fba1 1303 	umull	r1, r3, r1, r3
 800aeca:	0e1b      	lsrs	r3, r3, #24
 800aecc:	429a      	cmp	r2, r3
 800aece:	d303      	bcc.n	800aed8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	61bb      	str	r3, [r7, #24]
 800aed6:	e05a      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aedc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aee0:	d103      	bne.n	800aeea <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	61bb      	str	r3, [r7, #24]
 800aee8:	e051      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aef2:	d126      	bne.n	800af42 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10e      	bne.n	800af1a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	4a43      	ldr	r2, [pc, #268]	; (800b00c <HAL_SD_ConfigWideBusOperation+0x218>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d906      	bls.n	800af12 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4a40      	ldr	r2, [pc, #256]	; (800b008 <HAL_SD_ConfigWideBusOperation+0x214>)
 800af08:	fba2 2303 	umull	r2, r3, r2, r3
 800af0c:	0e5b      	lsrs	r3, r3, #25
 800af0e:	61bb      	str	r3, [r7, #24]
 800af10:	e03d      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	61bb      	str	r3, [r7, #24]
 800af18:	e039      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	69fa      	ldr	r2, [r7, #28]
 800af22:	fbb2 f3f3 	udiv	r3, r2, r3
 800af26:	4a39      	ldr	r2, [pc, #228]	; (800b00c <HAL_SD_ConfigWideBusOperation+0x218>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d906      	bls.n	800af3a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	4a36      	ldr	r2, [pc, #216]	; (800b008 <HAL_SD_ConfigWideBusOperation+0x214>)
 800af30:	fba2 2303 	umull	r2, r3, r2, r3
 800af34:	0e5b      	lsrs	r3, r3, #25
 800af36:	61bb      	str	r3, [r7, #24]
 800af38:	e029      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	61bb      	str	r3, [r7, #24]
 800af40:	e025      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10e      	bne.n	800af68 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	4a30      	ldr	r2, [pc, #192]	; (800b010 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d906      	bls.n	800af60 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4a2c      	ldr	r2, [pc, #176]	; (800b008 <HAL_SD_ConfigWideBusOperation+0x214>)
 800af56:	fba2 2303 	umull	r2, r3, r2, r3
 800af5a:	0e1b      	lsrs	r3, r3, #24
 800af5c:	61bb      	str	r3, [r7, #24]
 800af5e:	e016      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	61bb      	str	r3, [r7, #24]
 800af66:	e012      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	fbb2 f3f3 	udiv	r3, r2, r3
 800af74:	4a26      	ldr	r2, [pc, #152]	; (800b010 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d906      	bls.n	800af88 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	4a22      	ldr	r2, [pc, #136]	; (800b008 <HAL_SD_ConfigWideBusOperation+0x214>)
 800af7e:	fba2 2303 	umull	r2, r3, r2, r3
 800af82:	0e1b      	lsrs	r3, r3, #24
 800af84:	61bb      	str	r3, [r7, #24]
 800af86:	e002      	b.n	800af8e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681c      	ldr	r4, [r3, #0]
 800af92:	466a      	mov	r2, sp
 800af94:	f107 0314 	add.w	r3, r7, #20
 800af98:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af9c:	e882 0003 	stmia.w	r2, {r0, r1}
 800afa0:	f107 0308 	add.w	r3, r7, #8
 800afa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afa6:	4620      	mov	r0, r4
 800afa8:	f003 fd44 	bl	800ea34 <SDMMC_Init>
 800afac:	e008      	b.n	800afc0 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afc8:	4618      	mov	r0, r3
 800afca:	f003 fe11 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800afce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800afd0:	6a3b      	ldr	r3, [r7, #32]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00c      	beq.n	800aff0 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a0a      	ldr	r2, [pc, #40]	; (800b004 <HAL_SD_ConfigWideBusOperation+0x210>)
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	431a      	orrs	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800aff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800affc:	4618      	mov	r0, r3
 800affe:	372c      	adds	r7, #44	; 0x2c
 800b000:	46bd      	mov	sp, r7
 800b002:	bd90      	pop	{r4, r7, pc}
 800b004:	1fe00fff 	.word	0x1fe00fff
 800b008:	55e63b89 	.word	0x55e63b89
 800b00c:	02faf080 	.word	0x02faf080
 800b010:	017d7840 	.word	0x017d7840

0800b014 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b020:	f107 030c 	add.w	r3, r7, #12
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fa2a 	bl	800b480 <SD_SendStatus>
 800b02c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	431a      	orrs	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	0a5b      	lsrs	r3, r3, #9
 800b044:	f003 030f 	and.w	r3, r3, #15
 800b048:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b04a:	693b      	ldr	r3, [r7, #16]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b090      	sub	sp, #64	; 0x40
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b05c:	2301      	movs	r3, #1
 800b05e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4618      	mov	r0, r3
 800b066:	f003 fd3e 	bl	800eae6 <SDMMC_GetPowerState>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d102      	bne.n	800b076 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b070:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b074:	e0a5      	b.n	800b1c2 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d02e      	beq.n	800b0dc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f003 ff89 	bl	800ef9a <SDMMC_CmdSendCID>
 800b088:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <SD_InitCard+0x40>
    {
      return errorstate;
 800b090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b092:	e096      	b.n	800b1c2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f003 fd69 	bl	800eb72 <SDMMC_GetResponse>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2104      	movs	r1, #4
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f003 fd60 	bl	800eb72 <SDMMC_GetResponse>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2108      	movs	r1, #8
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f003 fd57 	bl	800eb72 <SDMMC_GetResponse>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	210c      	movs	r1, #12
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f003 fd4e 	bl	800eb72 <SDMMC_GetResponse>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d00d      	beq.n	800b100 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f107 020e 	add.w	r2, r7, #14
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f003 ff92 	bl	800f018 <SDMMC_CmdSetRelAdd>
 800b0f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <SD_InitCard+0xac>
    {
      return errorstate;
 800b0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0fe:	e060      	b.n	800b1c2 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b104:	2b03      	cmp	r3, #3
 800b106:	d036      	beq.n	800b176 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b108:	89fb      	ldrh	r3, [r7, #14]
 800b10a:	461a      	mov	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b118:	041b      	lsls	r3, r3, #16
 800b11a:	4619      	mov	r1, r3
 800b11c:	4610      	mov	r0, r2
 800b11e:	f003 ff5b 	bl	800efd8 <SDMMC_CmdSendCSD>
 800b122:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <SD_InitCard+0xda>
    {
      return errorstate;
 800b12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b12c:	e049      	b.n	800b1c2 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2100      	movs	r1, #0
 800b134:	4618      	mov	r0, r3
 800b136:	f003 fd1c 	bl	800eb72 <SDMMC_GetResponse>
 800b13a:	4602      	mov	r2, r0
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2104      	movs	r1, #4
 800b146:	4618      	mov	r0, r3
 800b148:	f003 fd13 	bl	800eb72 <SDMMC_GetResponse>
 800b14c:	4602      	mov	r2, r0
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2108      	movs	r1, #8
 800b158:	4618      	mov	r0, r3
 800b15a:	f003 fd0a 	bl	800eb72 <SDMMC_GetResponse>
 800b15e:	4602      	mov	r2, r0
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	210c      	movs	r1, #12
 800b16a:	4618      	mov	r0, r3
 800b16c:	f003 fd01 	bl	800eb72 <SDMMC_GetResponse>
 800b170:	4602      	mov	r2, r0
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2104      	movs	r1, #4
 800b17c:	4618      	mov	r0, r3
 800b17e:	f003 fcf8 	bl	800eb72 <SDMMC_GetResponse>
 800b182:	4603      	mov	r3, r0
 800b184:	0d1a      	lsrs	r2, r3, #20
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b18a:	f107 0310 	add.w	r3, r7, #16
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f7ff fba9 	bl	800a8e8 <HAL_SD_GetCardCSD>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b19c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1a0:	e00f      	b.n	800b1c2 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1aa:	041b      	lsls	r3, r3, #16
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f003 fe0a 	bl	800edc8 <SDMMC_CmdSelDesel>
 800b1b4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d001      	beq.n	800b1c0 <SD_InitCard+0x16c>
  {
    return errorstate;
 800b1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1be:	e000      	b.n	800b1c2 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3740      	adds	r7, #64	; 0x40
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f003 fe12 	bl	800ee0e <SDMMC_CmdGoIdleState>
 800b1ea:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	e06e      	b.n	800b2d4 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f003 fe25 	bl	800ee4a <SDMMC_CmdOperCond>
 800b200:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00d      	beq.n	800b224 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4618      	mov	r0, r3
 800b214:	f003 fdfb 	bl	800ee0e <SDMMC_CmdGoIdleState>
 800b218:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <SD_PowerON+0x5e>
    {
      return errorstate;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	e057      	b.n	800b2d4 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d137      	bne.n	800b2a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f003 fe26 	bl	800ee8a <SDMMC_CmdAppCommand>
 800b23e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d02d      	beq.n	800b2a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b24a:	e043      	b.n	800b2d4 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2100      	movs	r1, #0
 800b252:	4618      	mov	r0, r3
 800b254:	f003 fe19 	bl	800ee8a <SDMMC_CmdAppCommand>
 800b258:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <SD_PowerON+0x98>
    {
      return errorstate;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	e037      	b.n	800b2d4 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	491c      	ldr	r1, [pc, #112]	; (800b2dc <SD_PowerON+0x110>)
 800b26a:	4618      	mov	r0, r3
 800b26c:	f003 fe30 	bl	800eed0 <SDMMC_CmdAppOperCommand>
 800b270:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b278:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b27c:	e02a      	b.n	800b2d4 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f003 fc74 	bl	800eb72 <SDMMC_GetResponse>
 800b28a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	0fdb      	lsrs	r3, r3, #31
 800b290:	2b01      	cmp	r3, #1
 800b292:	d101      	bne.n	800b298 <SD_PowerON+0xcc>
 800b294:	2301      	movs	r3, #1
 800b296:	e000      	b.n	800b29a <SD_PowerON+0xce>
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]

    count++;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d802      	bhi.n	800b2b2 <SD_PowerON+0xe6>
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0cc      	beq.n	800b24c <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d902      	bls.n	800b2c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b2bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2c0:	e008      	b.n	800b2d4 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3718      	adds	r7, #24
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	c1100000 	.word	0xc1100000

0800b2e0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08c      	sub	sp, #48	; 0x30
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2ea:	f7f6 fd8d 	bl	8001e08 <HAL_GetTick>
 800b2ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f003 fc39 	bl	800eb72 <SDMMC_GetResponse>
 800b300:	4603      	mov	r3, r0
 800b302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b30a:	d102      	bne.n	800b312 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b30c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b310:	e0b0      	b.n	800b474 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2140      	movs	r1, #64	; 0x40
 800b318:	4618      	mov	r0, r3
 800b31a:	f003 fc69 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800b31e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b320:	6a3b      	ldr	r3, [r7, #32]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d005      	beq.n	800b332 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	e0a0      	b.n	800b474 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b33a:	041b      	lsls	r3, r3, #16
 800b33c:	4619      	mov	r1, r3
 800b33e:	4610      	mov	r0, r2
 800b340:	f003 fda3 	bl	800ee8a <SDMMC_CmdAppCommand>
 800b344:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d005      	beq.n	800b358 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	e08d      	b.n	800b474 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b358:	f04f 33ff 	mov.w	r3, #4294967295
 800b35c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b35e:	2340      	movs	r3, #64	; 0x40
 800b360:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b362:	2360      	movs	r3, #96	; 0x60
 800b364:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b366:	2302      	movs	r3, #2
 800b368:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b36e:	2301      	movs	r3, #1
 800b370:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f107 0208 	add.w	r2, r7, #8
 800b37a:	4611      	mov	r1, r2
 800b37c:	4618      	mov	r0, r3
 800b37e:	f003 fc0b 	bl	800eb98 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4618      	mov	r0, r3
 800b388:	f003 fe8b 	bl	800f0a2 <SDMMC_CmdStatusRegister>
 800b38c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d02b      	beq.n	800b3ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	e069      	b.n	800b474 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d013      	beq.n	800b3d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3b2:	e00d      	b.n	800b3d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f003 fb65 	bl	800ea88 <SDMMC_ReadFIFO>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	601a      	str	r2, [r3, #0]
        pData++;
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	2b07      	cmp	r3, #7
 800b3d4:	d9ee      	bls.n	800b3b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3d6:	f7f6 fd17 	bl	8001e08 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e4:	d102      	bne.n	800b3ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3ea:	e043      	b.n	800b474 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0d2      	beq.n	800b3a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b400:	f003 0308 	and.w	r3, r3, #8
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b408:	2308      	movs	r3, #8
 800b40a:	e033      	b.n	800b474 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b41a:	2302      	movs	r3, #2
 800b41c:	e02a      	b.n	800b474 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b424:	f003 0320 	and.w	r3, r3, #32
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d017      	beq.n	800b45c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b42c:	2320      	movs	r3, #32
 800b42e:	e021      	b.n	800b474 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4618      	mov	r0, r3
 800b436:	f003 fb27 	bl	800ea88 <SDMMC_ReadFIFO>
 800b43a:	4602      	mov	r2, r0
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	601a      	str	r2, [r3, #0]
    pData++;
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	3304      	adds	r3, #4
 800b444:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b446:	f7f6 fcdf 	bl	8001e08 <HAL_GetTick>
 800b44a:	4602      	mov	r2, r0
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b454:	d102      	bne.n	800b45c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b456:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b45a:	e00b      	b.n	800b474 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e2      	bne.n	800b430 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a03      	ldr	r2, [pc, #12]	; (800b47c <SD_SendSDStatus+0x19c>)
 800b470:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3730      	adds	r7, #48	; 0x30
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	18000f3a 	.word	0x18000f3a

0800b480 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d102      	bne.n	800b496 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b490:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b494:	e018      	b.n	800b4c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b49e:	041b      	lsls	r3, r3, #16
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	f003 fdda 	bl	800f05c <SDMMC_CmdSendStatus>
 800b4a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	e009      	b.n	800b4c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f003 fb59 	bl	800eb72 <SDMMC_GetResponse>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f003 fb43 	bl	800eb72 <SDMMC_GetResponse>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4f6:	d102      	bne.n	800b4fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b4f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b4fc:	e02f      	b.n	800b55e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b4fe:	f107 030c 	add.w	r3, r7, #12
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f879 	bl	800b5fc <SD_FindSCR>
 800b50a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	e023      	b.n	800b55e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d01c      	beq.n	800b55a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b528:	041b      	lsls	r3, r3, #16
 800b52a:	4619      	mov	r1, r3
 800b52c:	4610      	mov	r0, r2
 800b52e:	f003 fcac 	bl	800ee8a <SDMMC_CmdAppCommand>
 800b532:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	e00f      	b.n	800b55e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2102      	movs	r1, #2
 800b544:	4618      	mov	r0, r3
 800b546:	f003 fce3 	bl	800ef10 <SDMMC_CmdBusWidth>
 800b54a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	e003      	b.n	800b55e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b556:	2300      	movs	r3, #0
 800b558:	e001      	b.n	800b55e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b55a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b086      	sub	sp, #24
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b56e:	2300      	movs	r3, #0
 800b570:	60fb      	str	r3, [r7, #12]
 800b572:	2300      	movs	r3, #0
 800b574:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f003 faf8 	bl	800eb72 <SDMMC_GetResponse>
 800b582:	4603      	mov	r3, r0
 800b584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b58c:	d102      	bne.n	800b594 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b58e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b592:	e02f      	b.n	800b5f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b594:	f107 030c 	add.w	r3, r7, #12
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f82e 	bl	800b5fc <SD_FindSCR>
 800b5a0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	e023      	b.n	800b5f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d01c      	beq.n	800b5f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5be:	041b      	lsls	r3, r3, #16
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	f003 fc61 	bl	800ee8a <SDMMC_CmdAppCommand>
 800b5c8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	e00f      	b.n	800b5f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2100      	movs	r1, #0
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f003 fc98 	bl	800ef10 <SDMMC_CmdBusWidth>
 800b5e0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	e003      	b.n	800b5f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e001      	b.n	800b5f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b5f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b08e      	sub	sp, #56	; 0x38
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b606:	f7f6 fbff 	bl	8001e08 <HAL_GetTick>
 800b60a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b60c:	2300      	movs	r3, #0
 800b60e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b610:	2300      	movs	r3, #0
 800b612:	60bb      	str	r3, [r7, #8]
 800b614:	2300      	movs	r3, #0
 800b616:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2108      	movs	r1, #8
 800b622:	4618      	mov	r0, r3
 800b624:	f003 fae4 	bl	800ebf0 <SDMMC_CmdBlockLength>
 800b628:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d001      	beq.n	800b634 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b632:	e0ad      	b.n	800b790 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63c:	041b      	lsls	r3, r3, #16
 800b63e:	4619      	mov	r1, r3
 800b640:	4610      	mov	r0, r2
 800b642:	f003 fc22 	bl	800ee8a <SDMMC_CmdAppCommand>
 800b646:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d001      	beq.n	800b652 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b650:	e09e      	b.n	800b790 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b652:	f04f 33ff 	mov.w	r3, #4294967295
 800b656:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b658:	2308      	movs	r3, #8
 800b65a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b65c:	2330      	movs	r3, #48	; 0x30
 800b65e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b660:	2302      	movs	r3, #2
 800b662:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b664:	2300      	movs	r3, #0
 800b666:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b668:	2301      	movs	r3, #1
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f107 0210 	add.w	r2, r7, #16
 800b674:	4611      	mov	r1, r2
 800b676:	4618      	mov	r0, r3
 800b678:	f003 fa8e 	bl	800eb98 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	f003 fc68 	bl	800ef56 <SDMMC_CmdSendSCR>
 800b686:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d027      	beq.n	800b6de <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	e07e      	b.n	800b790 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d113      	bne.n	800b6c8 <SD_FindSCR+0xcc>
 800b6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d110      	bne.n	800b6c8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f003 f9ec 	bl	800ea88 <SDMMC_ReadFIFO>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f003 f9e5 	bl	800ea88 <SDMMC_ReadFIFO>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	60fb      	str	r3, [r7, #12]
      index++;
 800b6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b6c8:	f7f6 fb9e 	bl	8001e08 <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d102      	bne.n	800b6de <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b6d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6dc:	e058      	b.n	800b790 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6e4:	f240 532a 	movw	r3, #1322	; 0x52a
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d0d1      	beq.n	800b692 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f4:	f003 0308 	and.w	r3, r3, #8
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d005      	beq.n	800b708 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2208      	movs	r2, #8
 800b702:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b704:	2308      	movs	r3, #8
 800b706:	e043      	b.n	800b790 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70e:	f003 0302 	and.w	r3, r3, #2
 800b712:	2b00      	cmp	r3, #0
 800b714:	d005      	beq.n	800b722 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2202      	movs	r2, #2
 800b71c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b71e:	2302      	movs	r3, #2
 800b720:	e036      	b.n	800b790 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b728:	f003 0320 	and.w	r3, r3, #32
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2220      	movs	r2, #32
 800b736:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b738:	2320      	movs	r3, #32
 800b73a:	e029      	b.n	800b790 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a15      	ldr	r2, [pc, #84]	; (800b798 <SD_FindSCR+0x19c>)
 800b742:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	061a      	lsls	r2, r3, #24
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	021b      	lsls	r3, r3, #8
 800b74c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b750:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	0a1b      	lsrs	r3, r3, #8
 800b756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b75a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	0e1b      	lsrs	r3, r3, #24
 800b760:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b764:	601a      	str	r2, [r3, #0]
    scr++;
 800b766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b768:	3304      	adds	r3, #4
 800b76a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	061a      	lsls	r2, r3, #24
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	021b      	lsls	r3, r3, #8
 800b774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b778:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	0a1b      	lsrs	r3, r3, #8
 800b77e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b782:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	0e1b      	lsrs	r3, r3, #24
 800b788:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3738      	adds	r7, #56	; 0x38
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	18000f3a 	.word	0x18000f3a

0800b79c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ae:	2b1f      	cmp	r3, #31
 800b7b0:	d936      	bls.n	800b820 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e027      	b.n	800b808 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f003 f963 	bl	800ea88 <SDMMC_ReadFIFO>
 800b7c2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	0a1b      	lsrs	r3, r3, #8
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	0c1b      	lsrs	r3, r3, #16
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	0e1b      	lsrs	r3, r3, #24
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	3301      	adds	r3, #1
 800b800:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	3301      	adds	r3, #1
 800b806:	617b      	str	r3, [r7, #20]
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	2b07      	cmp	r3, #7
 800b80c:	d9d4      	bls.n	800b7b8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b818:	f1a3 0220 	sub.w	r2, r3, #32
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b820:	bf00      	nop
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	2b1f      	cmp	r3, #31
 800b83c:	d93a      	bls.n	800b8b4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b83e:	2300      	movs	r3, #0
 800b840:	617b      	str	r3, [r7, #20]
 800b842:	e02b      	b.n	800b89c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	3301      	adds	r3, #1
 800b84e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	021a      	lsls	r2, r3, #8
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4313      	orrs	r3, r2
 800b85a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	3301      	adds	r3, #1
 800b860:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	041a      	lsls	r2, r3, #16
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	3301      	adds	r3, #1
 800b872:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	061a      	lsls	r2, r3, #24
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	3301      	adds	r3, #1
 800b884:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f107 020c 	add.w	r2, r7, #12
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f003 f906 	bl	800eaa2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	3301      	adds	r3, #1
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2b07      	cmp	r3, #7
 800b8a0:	d9d0      	bls.n	800b844 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	f1a3 0220 	sub.w	r2, r3, #32
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	621a      	str	r2, [r3, #32]
  }
}
 800b8b4:	bf00      	nop
 800b8b6:	3718      	adds	r7, #24
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b8d8:	bf00      	nop
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	e049      	b.n	800b9b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b924:	b2db      	uxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7f5 ff30 	bl	8001798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	4610      	mov	r0, r2
 800b94c:	f000 fbec 	bl	800c128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b082      	sub	sp, #8
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e049      	b.n	800ba60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d106      	bne.n	800b9e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f841 	bl	800ba68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	f000 fb95 	bl	800c128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0302 	and.w	r3, r3, #2
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d122      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f003 0302 	and.w	r3, r3, #2
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d11b      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f06f 0202 	mvn.w	r2, #2
 800baa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	699b      	ldr	r3, [r3, #24]
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fb14 	bl	800c0ec <HAL_TIM_IC_CaptureCallback>
 800bac4:	e005      	b.n	800bad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 fb06 	bl	800c0d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fb17 	bl	800c100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f003 0304 	and.w	r3, r3, #4
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d122      	bne.n	800bb2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f003 0304 	and.w	r3, r3, #4
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d11b      	bne.n	800bb2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f06f 0204 	mvn.w	r2, #4
 800bafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2202      	movs	r2, #2
 800bb02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 faea 	bl	800c0ec <HAL_TIM_IC_CaptureCallback>
 800bb18:	e005      	b.n	800bb26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fadc 	bl	800c0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 faed 	bl	800c100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f003 0308 	and.w	r3, r3, #8
 800bb36:	2b08      	cmp	r3, #8
 800bb38:	d122      	bne.n	800bb80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f003 0308 	and.w	r3, r3, #8
 800bb44:	2b08      	cmp	r3, #8
 800bb46:	d11b      	bne.n	800bb80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f06f 0208 	mvn.w	r2, #8
 800bb50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2204      	movs	r2, #4
 800bb56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	f003 0303 	and.w	r3, r3, #3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fac0 	bl	800c0ec <HAL_TIM_IC_CaptureCallback>
 800bb6c:	e005      	b.n	800bb7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fab2 	bl	800c0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fac3 	bl	800c100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	f003 0310 	and.w	r3, r3, #16
 800bb8a:	2b10      	cmp	r3, #16
 800bb8c:	d122      	bne.n	800bbd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	f003 0310 	and.w	r3, r3, #16
 800bb98:	2b10      	cmp	r3, #16
 800bb9a:	d11b      	bne.n	800bbd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f06f 0210 	mvn.w	r2, #16
 800bba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2208      	movs	r2, #8
 800bbaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa96 	bl	800c0ec <HAL_TIM_IC_CaptureCallback>
 800bbc0:	e005      	b.n	800bbce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fa88 	bl	800c0d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fa99 	bl	800c100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d10e      	bne.n	800bc00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d107      	bne.n	800bc00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f06f 0201 	mvn.w	r2, #1
 800bbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fa62 	bl	800c0c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0a:	2b80      	cmp	r3, #128	; 0x80
 800bc0c:	d10e      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc18:	2b80      	cmp	r3, #128	; 0x80
 800bc1a:	d107      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 ff94 	bl	800cb54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc3a:	d10e      	bne.n	800bc5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc46:	2b80      	cmp	r3, #128	; 0x80
 800bc48:	d107      	bne.n	800bc5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 ff87 	bl	800cb68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc64:	2b40      	cmp	r3, #64	; 0x40
 800bc66:	d10e      	bne.n	800bc86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc72:	2b40      	cmp	r3, #64	; 0x40
 800bc74:	d107      	bne.n	800bc86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa47 	bl	800c114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	f003 0320 	and.w	r3, r3, #32
 800bc90:	2b20      	cmp	r3, #32
 800bc92:	d10e      	bne.n	800bcb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f003 0320 	and.w	r3, r3, #32
 800bc9e:	2b20      	cmp	r3, #32
 800bca0:	d107      	bne.n	800bcb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f06f 0220 	mvn.w	r2, #32
 800bcaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 ff47 	bl	800cb40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
	...

0800bcbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d101      	bne.n	800bcd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	e0fd      	b.n	800bed2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2201      	movs	r2, #1
 800bcda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b14      	cmp	r3, #20
 800bce2:	f200 80f0 	bhi.w	800bec6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800bce6:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <HAL_TIM_PWM_ConfigChannel+0x30>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd41 	.word	0x0800bd41
 800bcf0:	0800bec7 	.word	0x0800bec7
 800bcf4:	0800bec7 	.word	0x0800bec7
 800bcf8:	0800bec7 	.word	0x0800bec7
 800bcfc:	0800bd81 	.word	0x0800bd81
 800bd00:	0800bec7 	.word	0x0800bec7
 800bd04:	0800bec7 	.word	0x0800bec7
 800bd08:	0800bec7 	.word	0x0800bec7
 800bd0c:	0800bdc3 	.word	0x0800bdc3
 800bd10:	0800bec7 	.word	0x0800bec7
 800bd14:	0800bec7 	.word	0x0800bec7
 800bd18:	0800bec7 	.word	0x0800bec7
 800bd1c:	0800be03 	.word	0x0800be03
 800bd20:	0800bec7 	.word	0x0800bec7
 800bd24:	0800bec7 	.word	0x0800bec7
 800bd28:	0800bec7 	.word	0x0800bec7
 800bd2c:	0800be45 	.word	0x0800be45
 800bd30:	0800bec7 	.word	0x0800bec7
 800bd34:	0800bec7 	.word	0x0800bec7
 800bd38:	0800bec7 	.word	0x0800bec7
 800bd3c:	0800be85 	.word	0x0800be85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68b9      	ldr	r1, [r7, #8]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 fa88 	bl	800c25c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	699a      	ldr	r2, [r3, #24]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f042 0208 	orr.w	r2, r2, #8
 800bd5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	699a      	ldr	r2, [r3, #24]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f022 0204 	bic.w	r2, r2, #4
 800bd6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6999      	ldr	r1, [r3, #24]
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	691a      	ldr	r2, [r3, #16]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	619a      	str	r2, [r3, #24]
      break;
 800bd7e:	e0a3      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 faf8 	bl	800c37c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699a      	ldr	r2, [r3, #24]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	699a      	ldr	r2, [r3, #24]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	6999      	ldr	r1, [r3, #24]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	021a      	lsls	r2, r3, #8
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	430a      	orrs	r2, r1
 800bdbe:	619a      	str	r2, [r3, #24]
      break;
 800bdc0:	e082      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 fb61 	bl	800c490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	69da      	ldr	r2, [r3, #28]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f042 0208 	orr.w	r2, r2, #8
 800bddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	69da      	ldr	r2, [r3, #28]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f022 0204 	bic.w	r2, r2, #4
 800bdec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	69d9      	ldr	r1, [r3, #28]
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	691a      	ldr	r2, [r3, #16]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	430a      	orrs	r2, r1
 800bdfe:	61da      	str	r2, [r3, #28]
      break;
 800be00:	e062      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68b9      	ldr	r1, [r7, #8]
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fbc7 	bl	800c59c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	69da      	ldr	r2, [r3, #28]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	69da      	ldr	r2, [r3, #28]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	69d9      	ldr	r1, [r3, #28]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	021a      	lsls	r2, r3, #8
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	61da      	str	r2, [r3, #28]
      break;
 800be42:	e041      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68b9      	ldr	r1, [r7, #8]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 fc0e 	bl	800c66c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f042 0208 	orr.w	r2, r2, #8
 800be5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f022 0204 	bic.w	r2, r2, #4
 800be6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be82:	e021      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68b9      	ldr	r1, [r7, #8]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 fc50 	bl	800c730 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800beae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	021a      	lsls	r2, r3, #8
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bec4:	e000      	b.n	800bec8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800bec6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bed0:	2300      	movs	r3, #0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop

0800bedc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beec:	2b01      	cmp	r3, #1
 800beee:	d101      	bne.n	800bef4 <HAL_TIM_ConfigClockSource+0x18>
 800bef0:	2302      	movs	r3, #2
 800bef2:	e0db      	b.n	800c0ac <HAL_TIM_ConfigClockSource+0x1d0>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2202      	movs	r2, #2
 800bf00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	4b69      	ldr	r3, [pc, #420]	; (800c0b4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800bf10:	4013      	ands	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a63      	ldr	r2, [pc, #396]	; (800c0b8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	f000 80a9 	beq.w	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf30:	4a61      	ldr	r2, [pc, #388]	; (800c0b8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	f200 80ae 	bhi.w	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf38:	4a60      	ldr	r2, [pc, #384]	; (800c0bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	f000 80a1 	beq.w	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf40:	4a5e      	ldr	r2, [pc, #376]	; (800c0bc <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	f200 80a6 	bhi.w	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf48:	4a5d      	ldr	r2, [pc, #372]	; (800c0c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	f000 8099 	beq.w	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf50:	4a5b      	ldr	r2, [pc, #364]	; (800c0c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	f200 809e 	bhi.w	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf5c:	f000 8091 	beq.w	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf64:	f200 8096 	bhi.w	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf6c:	f000 8089 	beq.w	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bf70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf74:	f200 808e 	bhi.w	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf7c:	d03e      	beq.n	800bffc <HAL_TIM_ConfigClockSource+0x120>
 800bf7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf82:	f200 8087 	bhi.w	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf8a:	f000 8085 	beq.w	800c098 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf92:	d87f      	bhi.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf94:	2b70      	cmp	r3, #112	; 0x70
 800bf96:	d01a      	beq.n	800bfce <HAL_TIM_ConfigClockSource+0xf2>
 800bf98:	2b70      	cmp	r3, #112	; 0x70
 800bf9a:	d87b      	bhi.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bf9c:	2b60      	cmp	r3, #96	; 0x60
 800bf9e:	d050      	beq.n	800c042 <HAL_TIM_ConfigClockSource+0x166>
 800bfa0:	2b60      	cmp	r3, #96	; 0x60
 800bfa2:	d877      	bhi.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfa4:	2b50      	cmp	r3, #80	; 0x50
 800bfa6:	d03c      	beq.n	800c022 <HAL_TIM_ConfigClockSource+0x146>
 800bfa8:	2b50      	cmp	r3, #80	; 0x50
 800bfaa:	d873      	bhi.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfac:	2b40      	cmp	r3, #64	; 0x40
 800bfae:	d058      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0x186>
 800bfb0:	2b40      	cmp	r3, #64	; 0x40
 800bfb2:	d86f      	bhi.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfb4:	2b30      	cmp	r3, #48	; 0x30
 800bfb6:	d064      	beq.n	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bfb8:	2b30      	cmp	r3, #48	; 0x30
 800bfba:	d86b      	bhi.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfbc:	2b20      	cmp	r3, #32
 800bfbe:	d060      	beq.n	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bfc0:	2b20      	cmp	r3, #32
 800bfc2:	d867      	bhi.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d05c      	beq.n	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
 800bfc8:	2b10      	cmp	r3, #16
 800bfca:	d05a      	beq.n	800c082 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bfcc:	e062      	b.n	800c094 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	6899      	ldr	r1, [r3, #8]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	685a      	ldr	r2, [r3, #4]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	68db      	ldr	r3, [r3, #12]
 800bfde:	f000 fc89 	bl	800c8f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bff0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	609a      	str	r2, [r3, #8]
      break;
 800bffa:	e04e      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6818      	ldr	r0, [r3, #0]
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	6899      	ldr	r1, [r3, #8]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	685a      	ldr	r2, [r3, #4]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f000 fc72 	bl	800c8f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689a      	ldr	r2, [r3, #8]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c01e:	609a      	str	r2, [r3, #8]
      break;
 800c020:	e03b      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6818      	ldr	r0, [r3, #0]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	6859      	ldr	r1, [r3, #4]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	461a      	mov	r2, r3
 800c030:	f000 fbe2 	bl	800c7f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2150      	movs	r1, #80	; 0x50
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 fc3c 	bl	800c8b8 <TIM_ITRx_SetConfig>
      break;
 800c040:	e02b      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	6859      	ldr	r1, [r3, #4]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	461a      	mov	r2, r3
 800c050:	f000 fc01 	bl	800c856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2160      	movs	r1, #96	; 0x60
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fc2c 	bl	800c8b8 <TIM_ITRx_SetConfig>
      break;
 800c060:	e01b      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6818      	ldr	r0, [r3, #0]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	6859      	ldr	r1, [r3, #4]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	461a      	mov	r2, r3
 800c070:	f000 fbc2 	bl	800c7f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2140      	movs	r1, #64	; 0x40
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fc1c 	bl	800c8b8 <TIM_ITRx_SetConfig>
      break;
 800c080:	e00b      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4619      	mov	r1, r3
 800c08c:	4610      	mov	r0, r2
 800c08e:	f000 fc13 	bl	800c8b8 <TIM_ITRx_SetConfig>
        break;
 800c092:	e002      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c094:	bf00      	nop
 800c096:	e000      	b.n	800c09a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800c098:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	ffceff88 	.word	0xffceff88
 800c0b8:	00100040 	.word	0x00100040
 800c0bc:	00100030 	.word	0x00100030
 800c0c0:	00100020 	.word	0x00100020

0800c0c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c0cc:	bf00      	nop
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0e0:	bf00      	nop
 800c0e2:	370c      	adds	r7, #12
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr

0800c114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c128:	b480      	push	{r7}
 800c12a:	b085      	sub	sp, #20
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a40      	ldr	r2, [pc, #256]	; (800c23c <TIM_Base_SetConfig+0x114>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d013      	beq.n	800c168 <TIM_Base_SetConfig+0x40>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c146:	d00f      	beq.n	800c168 <TIM_Base_SetConfig+0x40>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a3d      	ldr	r2, [pc, #244]	; (800c240 <TIM_Base_SetConfig+0x118>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d00b      	beq.n	800c168 <TIM_Base_SetConfig+0x40>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a3c      	ldr	r2, [pc, #240]	; (800c244 <TIM_Base_SetConfig+0x11c>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d007      	beq.n	800c168 <TIM_Base_SetConfig+0x40>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a3b      	ldr	r2, [pc, #236]	; (800c248 <TIM_Base_SetConfig+0x120>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d003      	beq.n	800c168 <TIM_Base_SetConfig+0x40>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a3a      	ldr	r2, [pc, #232]	; (800c24c <TIM_Base_SetConfig+0x124>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d108      	bne.n	800c17a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c16e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4313      	orrs	r3, r2
 800c178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a2f      	ldr	r2, [pc, #188]	; (800c23c <TIM_Base_SetConfig+0x114>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d01f      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c188:	d01b      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a2c      	ldr	r2, [pc, #176]	; (800c240 <TIM_Base_SetConfig+0x118>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d017      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a2b      	ldr	r2, [pc, #172]	; (800c244 <TIM_Base_SetConfig+0x11c>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d013      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a2a      	ldr	r2, [pc, #168]	; (800c248 <TIM_Base_SetConfig+0x120>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d00f      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a29      	ldr	r2, [pc, #164]	; (800c24c <TIM_Base_SetConfig+0x124>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d00b      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a28      	ldr	r2, [pc, #160]	; (800c250 <TIM_Base_SetConfig+0x128>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d007      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a27      	ldr	r2, [pc, #156]	; (800c254 <TIM_Base_SetConfig+0x12c>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d003      	beq.n	800c1c2 <TIM_Base_SetConfig+0x9a>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a26      	ldr	r2, [pc, #152]	; (800c258 <TIM_Base_SetConfig+0x130>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d108      	bne.n	800c1d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a10      	ldr	r2, [pc, #64]	; (800c23c <TIM_Base_SetConfig+0x114>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d00f      	beq.n	800c220 <TIM_Base_SetConfig+0xf8>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a12      	ldr	r2, [pc, #72]	; (800c24c <TIM_Base_SetConfig+0x124>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d00b      	beq.n	800c220 <TIM_Base_SetConfig+0xf8>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a11      	ldr	r2, [pc, #68]	; (800c250 <TIM_Base_SetConfig+0x128>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d007      	beq.n	800c220 <TIM_Base_SetConfig+0xf8>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a10      	ldr	r2, [pc, #64]	; (800c254 <TIM_Base_SetConfig+0x12c>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d003      	beq.n	800c220 <TIM_Base_SetConfig+0xf8>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a0f      	ldr	r2, [pc, #60]	; (800c258 <TIM_Base_SetConfig+0x130>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d103      	bne.n	800c228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	691a      	ldr	r2, [r3, #16]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	615a      	str	r2, [r3, #20]
}
 800c22e:	bf00      	nop
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	40010000 	.word	0x40010000
 800c240:	40000400 	.word	0x40000400
 800c244:	40000800 	.word	0x40000800
 800c248:	40000c00 	.word	0x40000c00
 800c24c:	40010400 	.word	0x40010400
 800c250:	40014000 	.word	0x40014000
 800c254:	40014400 	.word	0x40014400
 800c258:	40014800 	.word	0x40014800

0800c25c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b087      	sub	sp, #28
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	f023 0201 	bic.w	r2, r3, #1
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	4b37      	ldr	r3, [pc, #220]	; (800c364 <TIM_OC1_SetConfig+0x108>)
 800c288:	4013      	ands	r3, r2
 800c28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f023 0303 	bic.w	r3, r3, #3
 800c292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f023 0302 	bic.w	r3, r3, #2
 800c2a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a2d      	ldr	r2, [pc, #180]	; (800c368 <TIM_OC1_SetConfig+0x10c>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d00f      	beq.n	800c2d8 <TIM_OC1_SetConfig+0x7c>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a2c      	ldr	r2, [pc, #176]	; (800c36c <TIM_OC1_SetConfig+0x110>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d00b      	beq.n	800c2d8 <TIM_OC1_SetConfig+0x7c>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a2b      	ldr	r2, [pc, #172]	; (800c370 <TIM_OC1_SetConfig+0x114>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d007      	beq.n	800c2d8 <TIM_OC1_SetConfig+0x7c>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a2a      	ldr	r2, [pc, #168]	; (800c374 <TIM_OC1_SetConfig+0x118>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d003      	beq.n	800c2d8 <TIM_OC1_SetConfig+0x7c>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a29      	ldr	r2, [pc, #164]	; (800c378 <TIM_OC1_SetConfig+0x11c>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d10c      	bne.n	800c2f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f023 0308 	bic.w	r3, r3, #8
 800c2de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	f023 0304 	bic.w	r3, r3, #4
 800c2f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a1c      	ldr	r2, [pc, #112]	; (800c368 <TIM_OC1_SetConfig+0x10c>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d00f      	beq.n	800c31a <TIM_OC1_SetConfig+0xbe>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a1b      	ldr	r2, [pc, #108]	; (800c36c <TIM_OC1_SetConfig+0x110>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d00b      	beq.n	800c31a <TIM_OC1_SetConfig+0xbe>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a1a      	ldr	r2, [pc, #104]	; (800c370 <TIM_OC1_SetConfig+0x114>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d007      	beq.n	800c31a <TIM_OC1_SetConfig+0xbe>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a19      	ldr	r2, [pc, #100]	; (800c374 <TIM_OC1_SetConfig+0x118>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d003      	beq.n	800c31a <TIM_OC1_SetConfig+0xbe>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a18      	ldr	r2, [pc, #96]	; (800c378 <TIM_OC1_SetConfig+0x11c>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d111      	bne.n	800c33e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	693a      	ldr	r2, [r7, #16]
 800c330:	4313      	orrs	r3, r2
 800c332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	621a      	str	r2, [r3, #32]
}
 800c358:	bf00      	nop
 800c35a:	371c      	adds	r7, #28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	fffeff8f 	.word	0xfffeff8f
 800c368:	40010000 	.word	0x40010000
 800c36c:	40010400 	.word	0x40010400
 800c370:	40014000 	.word	0x40014000
 800c374:	40014400 	.word	0x40014400
 800c378:	40014800 	.word	0x40014800

0800c37c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a1b      	ldr	r3, [r3, #32]
 800c38a:	f023 0210 	bic.w	r2, r3, #16
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6a1b      	ldr	r3, [r3, #32]
 800c396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	4b34      	ldr	r3, [pc, #208]	; (800c478 <TIM_OC2_SetConfig+0xfc>)
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	021b      	lsls	r3, r3, #8
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f023 0320 	bic.w	r3, r3, #32
 800c3c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	011b      	lsls	r3, r3, #4
 800c3ce:	697a      	ldr	r2, [r7, #20]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a29      	ldr	r2, [pc, #164]	; (800c47c <TIM_OC2_SetConfig+0x100>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d003      	beq.n	800c3e4 <TIM_OC2_SetConfig+0x68>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a28      	ldr	r2, [pc, #160]	; (800c480 <TIM_OC2_SetConfig+0x104>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d10d      	bne.n	800c400 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	011b      	lsls	r3, r3, #4
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	4a1e      	ldr	r2, [pc, #120]	; (800c47c <TIM_OC2_SetConfig+0x100>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d00f      	beq.n	800c428 <TIM_OC2_SetConfig+0xac>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a1d      	ldr	r2, [pc, #116]	; (800c480 <TIM_OC2_SetConfig+0x104>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d00b      	beq.n	800c428 <TIM_OC2_SetConfig+0xac>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a1c      	ldr	r2, [pc, #112]	; (800c484 <TIM_OC2_SetConfig+0x108>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d007      	beq.n	800c428 <TIM_OC2_SetConfig+0xac>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a1b      	ldr	r2, [pc, #108]	; (800c488 <TIM_OC2_SetConfig+0x10c>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d003      	beq.n	800c428 <TIM_OC2_SetConfig+0xac>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a1a      	ldr	r2, [pc, #104]	; (800c48c <TIM_OC2_SetConfig+0x110>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d113      	bne.n	800c450 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c42e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	693a      	ldr	r2, [r7, #16]
 800c440:	4313      	orrs	r3, r2
 800c442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	685a      	ldr	r2, [r3, #4]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	621a      	str	r2, [r3, #32]
}
 800c46a:	bf00      	nop
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	feff8fff 	.word	0xfeff8fff
 800c47c:	40010000 	.word	0x40010000
 800c480:	40010400 	.word	0x40010400
 800c484:	40014000 	.word	0x40014000
 800c488:	40014400 	.word	0x40014400
 800c48c:	40014800 	.word	0x40014800

0800c490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a1b      	ldr	r3, [r3, #32]
 800c49e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a27      	ldr	r2, [pc, #156]	; (800c588 <TIM_OC3_SetConfig+0xf8>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d003      	beq.n	800c4f6 <TIM_OC3_SetConfig+0x66>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a26      	ldr	r2, [pc, #152]	; (800c58c <TIM_OC3_SetConfig+0xfc>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d10d      	bne.n	800c512 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	021b      	lsls	r3, r3, #8
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	4313      	orrs	r3, r2
 800c508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	4a1c      	ldr	r2, [pc, #112]	; (800c588 <TIM_OC3_SetConfig+0xf8>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d00f      	beq.n	800c53a <TIM_OC3_SetConfig+0xaa>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a1b      	ldr	r2, [pc, #108]	; (800c58c <TIM_OC3_SetConfig+0xfc>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d00b      	beq.n	800c53a <TIM_OC3_SetConfig+0xaa>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a1a      	ldr	r2, [pc, #104]	; (800c590 <TIM_OC3_SetConfig+0x100>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d007      	beq.n	800c53a <TIM_OC3_SetConfig+0xaa>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a19      	ldr	r2, [pc, #100]	; (800c594 <TIM_OC3_SetConfig+0x104>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d003      	beq.n	800c53a <TIM_OC3_SetConfig+0xaa>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a18      	ldr	r2, [pc, #96]	; (800c598 <TIM_OC3_SetConfig+0x108>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d113      	bne.n	800c562 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	011b      	lsls	r3, r3, #4
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	4313      	orrs	r3, r2
 800c554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	011b      	lsls	r3, r3, #4
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	4313      	orrs	r3, r2
 800c560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	685a      	ldr	r2, [r3, #4]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	621a      	str	r2, [r3, #32]
}
 800c57c:	bf00      	nop
 800c57e:	371c      	adds	r7, #28
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr
 800c588:	40010000 	.word	0x40010000
 800c58c:	40010400 	.word	0x40010400
 800c590:	40014000 	.word	0x40014000
 800c594:	40014400 	.word	0x40014400
 800c598:	40014800 	.word	0x40014800

0800c59c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b087      	sub	sp, #28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	69db      	ldr	r3, [r3, #28]
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	021b      	lsls	r3, r3, #8
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	689b      	ldr	r3, [r3, #8]
 800c5ec:	031b      	lsls	r3, r3, #12
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4a18      	ldr	r2, [pc, #96]	; (800c658 <TIM_OC4_SetConfig+0xbc>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d00f      	beq.n	800c61c <TIM_OC4_SetConfig+0x80>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a17      	ldr	r2, [pc, #92]	; (800c65c <TIM_OC4_SetConfig+0xc0>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d00b      	beq.n	800c61c <TIM_OC4_SetConfig+0x80>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a16      	ldr	r2, [pc, #88]	; (800c660 <TIM_OC4_SetConfig+0xc4>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d007      	beq.n	800c61c <TIM_OC4_SetConfig+0x80>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a15      	ldr	r2, [pc, #84]	; (800c664 <TIM_OC4_SetConfig+0xc8>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d003      	beq.n	800c61c <TIM_OC4_SetConfig+0x80>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a14      	ldr	r2, [pc, #80]	; (800c668 <TIM_OC4_SetConfig+0xcc>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d109      	bne.n	800c630 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	695b      	ldr	r3, [r3, #20]
 800c628:	019b      	lsls	r3, r3, #6
 800c62a:	697a      	ldr	r2, [r7, #20]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	693a      	ldr	r2, [r7, #16]
 800c648:	621a      	str	r2, [r3, #32]
}
 800c64a:	bf00      	nop
 800c64c:	371c      	adds	r7, #28
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	40010000 	.word	0x40010000
 800c65c:	40010400 	.word	0x40010400
 800c660:	40014000 	.word	0x40014000
 800c664:	40014400 	.word	0x40014400
 800c668:	40014800 	.word	0x40014800

0800c66c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c69a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c6ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	041b      	lsls	r3, r3, #16
 800c6b4:	693a      	ldr	r2, [r7, #16]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a17      	ldr	r2, [pc, #92]	; (800c71c <TIM_OC5_SetConfig+0xb0>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d00f      	beq.n	800c6e2 <TIM_OC5_SetConfig+0x76>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a16      	ldr	r2, [pc, #88]	; (800c720 <TIM_OC5_SetConfig+0xb4>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d00b      	beq.n	800c6e2 <TIM_OC5_SetConfig+0x76>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a15      	ldr	r2, [pc, #84]	; (800c724 <TIM_OC5_SetConfig+0xb8>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d007      	beq.n	800c6e2 <TIM_OC5_SetConfig+0x76>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a14      	ldr	r2, [pc, #80]	; (800c728 <TIM_OC5_SetConfig+0xbc>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d003      	beq.n	800c6e2 <TIM_OC5_SetConfig+0x76>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a13      	ldr	r2, [pc, #76]	; (800c72c <TIM_OC5_SetConfig+0xc0>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d109      	bne.n	800c6f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	021b      	lsls	r3, r3, #8
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	621a      	str	r2, [r3, #32]
}
 800c710:	bf00      	nop
 800c712:	371c      	adds	r7, #28
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	40010000 	.word	0x40010000
 800c720:	40010400 	.word	0x40010400
 800c724:	40014000 	.word	0x40014000
 800c728:	40014400 	.word	0x40014400
 800c72c:	40014800 	.word	0x40014800

0800c730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c75e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	021b      	lsls	r3, r3, #8
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	4313      	orrs	r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	051b      	lsls	r3, r3, #20
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a18      	ldr	r2, [pc, #96]	; (800c7e4 <TIM_OC6_SetConfig+0xb4>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d00f      	beq.n	800c7a8 <TIM_OC6_SetConfig+0x78>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a17      	ldr	r2, [pc, #92]	; (800c7e8 <TIM_OC6_SetConfig+0xb8>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d00b      	beq.n	800c7a8 <TIM_OC6_SetConfig+0x78>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a16      	ldr	r2, [pc, #88]	; (800c7ec <TIM_OC6_SetConfig+0xbc>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d007      	beq.n	800c7a8 <TIM_OC6_SetConfig+0x78>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a15      	ldr	r2, [pc, #84]	; (800c7f0 <TIM_OC6_SetConfig+0xc0>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d003      	beq.n	800c7a8 <TIM_OC6_SetConfig+0x78>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a14      	ldr	r2, [pc, #80]	; (800c7f4 <TIM_OC6_SetConfig+0xc4>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d109      	bne.n	800c7bc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c7ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	695b      	ldr	r3, [r3, #20]
 800c7b4:	029b      	lsls	r3, r3, #10
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	4313      	orrs	r3, r2
 800c7ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	697a      	ldr	r2, [r7, #20]
 800c7c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	693a      	ldr	r2, [r7, #16]
 800c7d4:	621a      	str	r2, [r3, #32]
}
 800c7d6:	bf00      	nop
 800c7d8:	371c      	adds	r7, #28
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	40010000 	.word	0x40010000
 800c7e8:	40010400 	.word	0x40010400
 800c7ec:	40014000 	.word	0x40014000
 800c7f0:	40014400 	.word	0x40014400
 800c7f4:	40014800 	.word	0x40014800

0800c7f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6a1b      	ldr	r3, [r3, #32]
 800c808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6a1b      	ldr	r3, [r3, #32]
 800c80e:	f023 0201 	bic.w	r2, r3, #1
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	699b      	ldr	r3, [r3, #24]
 800c81a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	011b      	lsls	r3, r3, #4
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f023 030a 	bic.w	r3, r3, #10
 800c834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	621a      	str	r2, [r3, #32]
}
 800c84a:	bf00      	nop
 800c84c:	371c      	adds	r7, #28
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c856:	b480      	push	{r7}
 800c858:	b087      	sub	sp, #28
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	60f8      	str	r0, [r7, #12]
 800c85e:	60b9      	str	r1, [r7, #8]
 800c860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	f023 0210 	bic.w	r2, r3, #16
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6a1b      	ldr	r3, [r3, #32]
 800c878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	031b      	lsls	r3, r3, #12
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	4313      	orrs	r3, r2
 800c88a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	011b      	lsls	r3, r3, #4
 800c898:	693a      	ldr	r2, [r7, #16]
 800c89a:	4313      	orrs	r3, r2
 800c89c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	621a      	str	r2, [r3, #32]
}
 800c8aa:	bf00      	nop
 800c8ac:	371c      	adds	r7, #28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
	...

0800c8b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	4b09      	ldr	r3, [pc, #36]	; (800c8f0 <TIM_ITRx_SetConfig+0x38>)
 800c8cc:	4013      	ands	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	f043 0307 	orr.w	r3, r3, #7
 800c8da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	609a      	str	r2, [r3, #8]
}
 800c8e2:	bf00      	nop
 800c8e4:	3714      	adds	r7, #20
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	ffcfff8f 	.word	0xffcfff8f

0800c8f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
 800c900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c90e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	021a      	lsls	r2, r3, #8
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	431a      	orrs	r2, r3
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	4313      	orrs	r3, r2
 800c920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	609a      	str	r2, [r3, #8]
}
 800c928:	bf00      	nop
 800c92a:	371c      	adds	r7, #28
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c944:	2b01      	cmp	r3, #1
 800c946:	d101      	bne.n	800c94c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c948:	2302      	movs	r3, #2
 800c94a:	e068      	b.n	800ca1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a2e      	ldr	r2, [pc, #184]	; (800ca2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d004      	beq.n	800c980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a2d      	ldr	r2, [pc, #180]	; (800ca30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d108      	bne.n	800c992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a1e      	ldr	r2, [pc, #120]	; (800ca2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d01d      	beq.n	800c9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9be:	d018      	beq.n	800c9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a1b      	ldr	r2, [pc, #108]	; (800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d013      	beq.n	800c9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a1a      	ldr	r2, [pc, #104]	; (800ca38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d00e      	beq.n	800c9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a18      	ldr	r2, [pc, #96]	; (800ca3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d009      	beq.n	800c9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a13      	ldr	r2, [pc, #76]	; (800ca30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d004      	beq.n	800c9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a14      	ldr	r2, [pc, #80]	; (800ca40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d10c      	bne.n	800ca0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	689b      	ldr	r3, [r3, #8]
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	40010000 	.word	0x40010000
 800ca30:	40010400 	.word	0x40010400
 800ca34:	40000400 	.word	0x40000400
 800ca38:	40000800 	.word	0x40000800
 800ca3c:	40000c00 	.word	0x40000c00
 800ca40:	40001800 	.word	0x40001800

0800ca44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d101      	bne.n	800ca60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	e065      	b.n	800cb2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	4313      	orrs	r3, r2
 800ca82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	4313      	orrs	r3, r2
 800caac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	4313      	orrs	r3, r2
 800caba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac6:	4313      	orrs	r3, r2
 800cac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	041b      	lsls	r3, r3, #16
 800cad6:	4313      	orrs	r3, r2
 800cad8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a16      	ldr	r2, [pc, #88]	; (800cb38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d004      	beq.n	800caee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a14      	ldr	r2, [pc, #80]	; (800cb3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d115      	bne.n	800cb1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf8:	051b      	lsls	r3, r3, #20
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	40010000 	.word	0x40010000
 800cb3c:	40010400 	.word	0x40010400

0800cb40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b083      	sub	sp, #12
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e042      	b.n	800cc14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d106      	bne.n	800cba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f7f4 ff2b 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2224      	movs	r2, #36	; 0x24
 800cbaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0201 	bic.w	r2, r2, #1
 800cbbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fb4c 	bl	800d25c <UART_SetConfig>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d101      	bne.n	800cbce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e022      	b.n	800cc14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d002      	beq.n	800cbdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f001 f8a0 	bl	800dd1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cbea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689a      	ldr	r2, [r3, #8]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cbfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0201 	orr.w	r2, r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f001 f927 	bl	800de60 <UART_CheckIdleState>
 800cc12:	4603      	mov	r3, r0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc30:	2b20      	cmp	r3, #32
 800cc32:	d131      	bne.n	800cc98 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d002      	beq.n	800cc40 <HAL_UART_Receive_IT+0x24>
 800cc3a:	88fb      	ldrh	r3, [r7, #6]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e02a      	b.n	800cc9a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d101      	bne.n	800cc52 <HAL_UART_Receive_IT+0x36>
 800cc4e:	2302      	movs	r3, #2
 800cc50:	e023      	b.n	800cc9a <HAL_UART_Receive_IT+0x7e>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a0f      	ldr	r2, [pc, #60]	; (800cca4 <HAL_UART_Receive_IT+0x88>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d00e      	beq.n	800cc88 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d007      	beq.n	800cc88 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800cc86:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cc88:	88fb      	ldrh	r3, [r7, #6]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	68b9      	ldr	r1, [r7, #8]
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f001 f9b2 	bl	800dff8 <UART_Start_Receive_IT>
 800cc94:	4603      	mov	r3, r0
 800cc96:	e000      	b.n	800cc9a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800cc98:	2302      	movs	r3, #2
  }
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	58000c00 	.word	0x58000c00

0800cca8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b088      	sub	sp, #32
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	69db      	ldr	r3, [r3, #28]
 800ccb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ccc8:	69fa      	ldr	r2, [r7, #28]
 800ccca:	f640 030f 	movw	r3, #2063	; 0x80f
 800ccce:	4013      	ands	r3, r2
 800ccd0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d118      	bne.n	800cd0a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d013      	beq.n	800cd0a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	f003 0320 	and.w	r3, r3, #32
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d104      	bne.n	800ccf6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d009      	beq.n	800cd0a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	f000 8282 	beq.w	800d204 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	4798      	blx	r3
      }
      return;
 800cd08:	e27c      	b.n	800d204 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f000 80ef 	beq.w	800cef0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	4b73      	ldr	r3, [pc, #460]	; (800cee4 <HAL_UART_IRQHandler+0x23c>)
 800cd16:	4013      	ands	r3, r2
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d105      	bne.n	800cd28 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cd1c:	69ba      	ldr	r2, [r7, #24]
 800cd1e:	4b72      	ldr	r3, [pc, #456]	; (800cee8 <HAL_UART_IRQHandler+0x240>)
 800cd20:	4013      	ands	r3, r2
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 80e4 	beq.w	800cef0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	f003 0301 	and.w	r3, r3, #1
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d010      	beq.n	800cd54 <HAL_UART_IRQHandler+0xac>
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00b      	beq.n	800cd54 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2201      	movs	r2, #1
 800cd42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd4a:	f043 0201 	orr.w	r2, r3, #1
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	f003 0302 	and.w	r3, r3, #2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d010      	beq.n	800cd80 <HAL_UART_IRQHandler+0xd8>
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f003 0301 	and.w	r3, r3, #1
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00b      	beq.n	800cd80 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd76:	f043 0204 	orr.w	r2, r3, #4
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	f003 0304 	and.w	r3, r3, #4
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d010      	beq.n	800cdac <HAL_UART_IRQHandler+0x104>
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00b      	beq.n	800cdac <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2204      	movs	r2, #4
 800cd9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cda2:	f043 0202 	orr.w	r2, r3, #2
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	f003 0308 	and.w	r3, r3, #8
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d015      	beq.n	800cde2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	f003 0320 	and.w	r3, r3, #32
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d104      	bne.n	800cdca <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	4b48      	ldr	r3, [pc, #288]	; (800cee4 <HAL_UART_IRQHandler+0x23c>)
 800cdc4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00b      	beq.n	800cde2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2208      	movs	r2, #8
 800cdd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdd8:	f043 0208 	orr.w	r2, r3, #8
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d011      	beq.n	800ce10 <HAL_UART_IRQHandler+0x168>
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00c      	beq.n	800ce10 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce06:	f043 0220 	orr.w	r2, r3, #32
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 81f6 	beq.w	800d208 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	f003 0320 	and.w	r3, r3, #32
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d011      	beq.n	800ce4a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	f003 0320 	and.w	r3, r3, #32
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d104      	bne.n	800ce3a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d007      	beq.n	800ce4a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce50:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce5c:	2b40      	cmp	r3, #64	; 0x40
 800ce5e:	d004      	beq.n	800ce6a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d031      	beq.n	800cece <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 f982 	bl	800e174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce7a:	2b40      	cmp	r3, #64	; 0x40
 800ce7c:	d123      	bne.n	800cec6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	689a      	ldr	r2, [r3, #8]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d013      	beq.n	800cebe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce9a:	4a14      	ldr	r2, [pc, #80]	; (800ceec <HAL_UART_IRQHandler+0x244>)
 800ce9c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7f5 fff2 	bl	8002e8c <HAL_DMA_Abort_IT>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d017      	beq.n	800cede <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ceb8:	4610      	mov	r0, r2
 800ceba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cebc:	e00f      	b.n	800cede <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f9b6 	bl	800d230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cec4:	e00b      	b.n	800cede <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f9b2 	bl	800d230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cecc:	e007      	b.n	800cede <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 f9ae 	bl	800d230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cedc:	e194      	b.n	800d208 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cede:	bf00      	nop
    return;
 800cee0:	e192      	b.n	800d208 <HAL_UART_IRQHandler+0x560>
 800cee2:	bf00      	nop
 800cee4:	10000001 	.word	0x10000001
 800cee8:	04000120 	.word	0x04000120
 800ceec:	0800e1d9 	.word	0x0800e1d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	f040 810f 	bne.w	800d118 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	f003 0310 	and.w	r3, r3, #16
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 8109 	beq.w	800d118 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	f003 0310 	and.w	r3, r3, #16
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 8103 	beq.w	800d118 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2210      	movs	r2, #16
 800cf18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf24:	2b40      	cmp	r3, #64	; 0x40
 800cf26:	f040 80bb 	bne.w	800d0a0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a96      	ldr	r2, [pc, #600]	; (800d18c <HAL_UART_IRQHandler+0x4e4>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d059      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a94      	ldr	r2, [pc, #592]	; (800d190 <HAL_UART_IRQHandler+0x4e8>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d053      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a92      	ldr	r2, [pc, #584]	; (800d194 <HAL_UART_IRQHandler+0x4ec>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d04d      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a90      	ldr	r2, [pc, #576]	; (800d198 <HAL_UART_IRQHandler+0x4f0>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d047      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a8e      	ldr	r2, [pc, #568]	; (800d19c <HAL_UART_IRQHandler+0x4f4>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d041      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a8c      	ldr	r2, [pc, #560]	; (800d1a0 <HAL_UART_IRQHandler+0x4f8>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d03b      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a8a      	ldr	r2, [pc, #552]	; (800d1a4 <HAL_UART_IRQHandler+0x4fc>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d035      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a88      	ldr	r2, [pc, #544]	; (800d1a8 <HAL_UART_IRQHandler+0x500>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d02f      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a86      	ldr	r2, [pc, #536]	; (800d1ac <HAL_UART_IRQHandler+0x504>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d029      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a84      	ldr	r2, [pc, #528]	; (800d1b0 <HAL_UART_IRQHandler+0x508>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d023      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a82      	ldr	r2, [pc, #520]	; (800d1b4 <HAL_UART_IRQHandler+0x50c>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d01d      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a80      	ldr	r2, [pc, #512]	; (800d1b8 <HAL_UART_IRQHandler+0x510>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d017      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a7e      	ldr	r2, [pc, #504]	; (800d1bc <HAL_UART_IRQHandler+0x514>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d011      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a7c      	ldr	r2, [pc, #496]	; (800d1c0 <HAL_UART_IRQHandler+0x518>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d00b      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a7a      	ldr	r2, [pc, #488]	; (800d1c4 <HAL_UART_IRQHandler+0x51c>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d005      	beq.n	800cfea <HAL_UART_IRQHandler+0x342>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	4a78      	ldr	r2, [pc, #480]	; (800d1c8 <HAL_UART_IRQHandler+0x520>)
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d105      	bne.n	800cff6 <HAL_UART_IRQHandler+0x34e>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	e004      	b.n	800d000 <HAL_UART_IRQHandler+0x358>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	b29b      	uxth	r3, r3
 800d000:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800d002:	893b      	ldrh	r3, [r7, #8]
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 8101 	beq.w	800d20c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d010:	893a      	ldrh	r2, [r7, #8]
 800d012:	429a      	cmp	r2, r3
 800d014:	f080 80fa 	bcs.w	800d20c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	893a      	ldrh	r2, [r7, #8]
 800d01c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d024:	69db      	ldr	r3, [r3, #28]
 800d026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d02a:	d02b      	beq.n	800d084 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d03a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f022 0201 	bic.w	r2, r2, #1
 800d04a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	689a      	ldr	r2, [r3, #8]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d05a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2220      	movs	r2, #32
 800d060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f022 0210 	bic.w	r2, r2, #16
 800d078:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d07e:	4618      	mov	r0, r3
 800d080:	f7f5 fbe6 	bl	8002850 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d090:	b29b      	uxth	r3, r3
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	b29b      	uxth	r3, r3
 800d096:	4619      	mov	r1, r3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f8d3 	bl	800d244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d09e:	e0b5      	b.n	800d20c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	1ad3      	subs	r3, r2, r3
 800d0b0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f000 80a8 	beq.w	800d210 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800d0c0:	897b      	ldrh	r3, [r7, #10]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f000 80a4 	beq.w	800d210 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d0d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6899      	ldr	r1, [r3, #8]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	4b3a      	ldr	r3, [pc, #232]	; (800d1cc <HAL_UART_IRQHandler+0x524>)
 800d0e4:	400b      	ands	r3, r1
 800d0e6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2220      	movs	r2, #32
 800d0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f022 0210 	bic.w	r2, r2, #16
 800d10a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d10c:	897b      	ldrh	r3, [r7, #10]
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f897 	bl	800d244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d116:	e07b      	b.n	800d210 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00d      	beq.n	800d13e <HAL_UART_IRQHandler+0x496>
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d008      	beq.n	800d13e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f001 fb5a 	bl	800e7f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d13c:	e06b      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d144:	2b00      	cmp	r3, #0
 800d146:	d012      	beq.n	800d16e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d104      	bne.n	800d15c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d008      	beq.n	800d16e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d160:	2b00      	cmp	r3, #0
 800d162:	d057      	beq.n	800d214 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	4798      	blx	r3
    }
    return;
 800d16c:	e052      	b.n	800d214 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d174:	2b00      	cmp	r3, #0
 800d176:	d02b      	beq.n	800d1d0 <HAL_UART_IRQHandler+0x528>
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d026      	beq.n	800d1d0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f001 f83e 	bl	800e204 <UART_EndTransmit_IT>
    return;
 800d188:	e045      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
 800d18a:	bf00      	nop
 800d18c:	40020010 	.word	0x40020010
 800d190:	40020028 	.word	0x40020028
 800d194:	40020040 	.word	0x40020040
 800d198:	40020058 	.word	0x40020058
 800d19c:	40020070 	.word	0x40020070
 800d1a0:	40020088 	.word	0x40020088
 800d1a4:	400200a0 	.word	0x400200a0
 800d1a8:	400200b8 	.word	0x400200b8
 800d1ac:	40020410 	.word	0x40020410
 800d1b0:	40020428 	.word	0x40020428
 800d1b4:	40020440 	.word	0x40020440
 800d1b8:	40020458 	.word	0x40020458
 800d1bc:	40020470 	.word	0x40020470
 800d1c0:	40020488 	.word	0x40020488
 800d1c4:	400204a0 	.word	0x400204a0
 800d1c8:	400204b8 	.word	0x400204b8
 800d1cc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d008      	beq.n	800d1ec <HAL_UART_IRQHandler+0x544>
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f001 fb17 	bl	800e818 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1ea:	e014      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00f      	beq.n	800d216 <HAL_UART_IRQHandler+0x56e>
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	da0c      	bge.n	800d216 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f001 fb01 	bl	800e804 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d202:	e008      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
      return;
 800d204:	bf00      	nop
 800d206:	e006      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
    return;
 800d208:	bf00      	nop
 800d20a:	e004      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
      return;
 800d20c:	bf00      	nop
 800d20e:	e002      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
      return;
 800d210:	bf00      	nop
 800d212:	e000      	b.n	800d216 <HAL_UART_IRQHandler+0x56e>
    return;
 800d214:	bf00      	nop
  }
}
 800d216:	3720      	adds	r7, #32
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d224:	bf00      	nop
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d25c:	b5b0      	push	{r4, r5, r7, lr}
 800d25e:	b08e      	sub	sp, #56	; 0x38
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	689a      	ldr	r2, [r3, #8]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	431a      	orrs	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	695b      	ldr	r3, [r3, #20]
 800d278:	431a      	orrs	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	4313      	orrs	r3, r2
 800d280:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	4bbf      	ldr	r3, [pc, #764]	; (800d588 <UART_SetConfig+0x32c>)
 800d28a:	4013      	ands	r3, r2
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	6812      	ldr	r2, [r2, #0]
 800d290:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d292:	430b      	orrs	r3, r1
 800d294:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	68da      	ldr	r2, [r3, #12]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4ab5      	ldr	r2, [pc, #724]	; (800d58c <UART_SetConfig+0x330>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d004      	beq.n	800d2c6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a1b      	ldr	r3, [r3, #32]
 800d2c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	689a      	ldr	r2, [r3, #8]
 800d2cc:	4bb0      	ldr	r3, [pc, #704]	; (800d590 <UART_SetConfig+0x334>)
 800d2ce:	4013      	ands	r3, r2
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	6812      	ldr	r2, [r2, #0]
 800d2d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d2d6:	430b      	orrs	r3, r1
 800d2d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e0:	f023 010f 	bic.w	r1, r3, #15
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	430a      	orrs	r2, r1
 800d2ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4aa7      	ldr	r2, [pc, #668]	; (800d594 <UART_SetConfig+0x338>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d176      	bne.n	800d3e8 <UART_SetConfig+0x18c>
 800d2fa:	4ba7      	ldr	r3, [pc, #668]	; (800d598 <UART_SetConfig+0x33c>)
 800d2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d302:	2b28      	cmp	r3, #40	; 0x28
 800d304:	d86c      	bhi.n	800d3e0 <UART_SetConfig+0x184>
 800d306:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <UART_SetConfig+0xb0>)
 800d308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30c:	0800d3b1 	.word	0x0800d3b1
 800d310:	0800d3e1 	.word	0x0800d3e1
 800d314:	0800d3e1 	.word	0x0800d3e1
 800d318:	0800d3e1 	.word	0x0800d3e1
 800d31c:	0800d3e1 	.word	0x0800d3e1
 800d320:	0800d3e1 	.word	0x0800d3e1
 800d324:	0800d3e1 	.word	0x0800d3e1
 800d328:	0800d3e1 	.word	0x0800d3e1
 800d32c:	0800d3b9 	.word	0x0800d3b9
 800d330:	0800d3e1 	.word	0x0800d3e1
 800d334:	0800d3e1 	.word	0x0800d3e1
 800d338:	0800d3e1 	.word	0x0800d3e1
 800d33c:	0800d3e1 	.word	0x0800d3e1
 800d340:	0800d3e1 	.word	0x0800d3e1
 800d344:	0800d3e1 	.word	0x0800d3e1
 800d348:	0800d3e1 	.word	0x0800d3e1
 800d34c:	0800d3c1 	.word	0x0800d3c1
 800d350:	0800d3e1 	.word	0x0800d3e1
 800d354:	0800d3e1 	.word	0x0800d3e1
 800d358:	0800d3e1 	.word	0x0800d3e1
 800d35c:	0800d3e1 	.word	0x0800d3e1
 800d360:	0800d3e1 	.word	0x0800d3e1
 800d364:	0800d3e1 	.word	0x0800d3e1
 800d368:	0800d3e1 	.word	0x0800d3e1
 800d36c:	0800d3c9 	.word	0x0800d3c9
 800d370:	0800d3e1 	.word	0x0800d3e1
 800d374:	0800d3e1 	.word	0x0800d3e1
 800d378:	0800d3e1 	.word	0x0800d3e1
 800d37c:	0800d3e1 	.word	0x0800d3e1
 800d380:	0800d3e1 	.word	0x0800d3e1
 800d384:	0800d3e1 	.word	0x0800d3e1
 800d388:	0800d3e1 	.word	0x0800d3e1
 800d38c:	0800d3d1 	.word	0x0800d3d1
 800d390:	0800d3e1 	.word	0x0800d3e1
 800d394:	0800d3e1 	.word	0x0800d3e1
 800d398:	0800d3e1 	.word	0x0800d3e1
 800d39c:	0800d3e1 	.word	0x0800d3e1
 800d3a0:	0800d3e1 	.word	0x0800d3e1
 800d3a4:	0800d3e1 	.word	0x0800d3e1
 800d3a8:	0800d3e1 	.word	0x0800d3e1
 800d3ac:	0800d3d9 	.word	0x0800d3d9
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3b6:	e222      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d3b8:	2304      	movs	r3, #4
 800d3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3be:	e21e      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d3c0:	2308      	movs	r3, #8
 800d3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3c6:	e21a      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d3c8:	2310      	movs	r3, #16
 800d3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3ce:	e216      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d3d0:	2320      	movs	r3, #32
 800d3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3d6:	e212      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d3d8:	2340      	movs	r3, #64	; 0x40
 800d3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3de:	e20e      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d3e0:	2380      	movs	r3, #128	; 0x80
 800d3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d3e6:	e20a      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a6b      	ldr	r2, [pc, #428]	; (800d59c <UART_SetConfig+0x340>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d130      	bne.n	800d454 <UART_SetConfig+0x1f8>
 800d3f2:	4b69      	ldr	r3, [pc, #420]	; (800d598 <UART_SetConfig+0x33c>)
 800d3f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f6:	f003 0307 	and.w	r3, r3, #7
 800d3fa:	2b05      	cmp	r3, #5
 800d3fc:	d826      	bhi.n	800d44c <UART_SetConfig+0x1f0>
 800d3fe:	a201      	add	r2, pc, #4	; (adr r2, 800d404 <UART_SetConfig+0x1a8>)
 800d400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d404:	0800d41d 	.word	0x0800d41d
 800d408:	0800d425 	.word	0x0800d425
 800d40c:	0800d42d 	.word	0x0800d42d
 800d410:	0800d435 	.word	0x0800d435
 800d414:	0800d43d 	.word	0x0800d43d
 800d418:	0800d445 	.word	0x0800d445
 800d41c:	2300      	movs	r3, #0
 800d41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d422:	e1ec      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d424:	2304      	movs	r3, #4
 800d426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d42a:	e1e8      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d42c:	2308      	movs	r3, #8
 800d42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d432:	e1e4      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d434:	2310      	movs	r3, #16
 800d436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d43a:	e1e0      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d43c:	2320      	movs	r3, #32
 800d43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d442:	e1dc      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d444:	2340      	movs	r3, #64	; 0x40
 800d446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d44a:	e1d8      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d44c:	2380      	movs	r3, #128	; 0x80
 800d44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d452:	e1d4      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4a51      	ldr	r2, [pc, #324]	; (800d5a0 <UART_SetConfig+0x344>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d130      	bne.n	800d4c0 <UART_SetConfig+0x264>
 800d45e:	4b4e      	ldr	r3, [pc, #312]	; (800d598 <UART_SetConfig+0x33c>)
 800d460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	2b05      	cmp	r3, #5
 800d468:	d826      	bhi.n	800d4b8 <UART_SetConfig+0x25c>
 800d46a:	a201      	add	r2, pc, #4	; (adr r2, 800d470 <UART_SetConfig+0x214>)
 800d46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d470:	0800d489 	.word	0x0800d489
 800d474:	0800d491 	.word	0x0800d491
 800d478:	0800d499 	.word	0x0800d499
 800d47c:	0800d4a1 	.word	0x0800d4a1
 800d480:	0800d4a9 	.word	0x0800d4a9
 800d484:	0800d4b1 	.word	0x0800d4b1
 800d488:	2300      	movs	r3, #0
 800d48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d48e:	e1b6      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d490:	2304      	movs	r3, #4
 800d492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d496:	e1b2      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d498:	2308      	movs	r3, #8
 800d49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d49e:	e1ae      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d4a0:	2310      	movs	r3, #16
 800d4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4a6:	e1aa      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d4a8:	2320      	movs	r3, #32
 800d4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4ae:	e1a6      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d4b0:	2340      	movs	r3, #64	; 0x40
 800d4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4b6:	e1a2      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d4b8:	2380      	movs	r3, #128	; 0x80
 800d4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4be:	e19e      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a37      	ldr	r2, [pc, #220]	; (800d5a4 <UART_SetConfig+0x348>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d130      	bne.n	800d52c <UART_SetConfig+0x2d0>
 800d4ca:	4b33      	ldr	r3, [pc, #204]	; (800d598 <UART_SetConfig+0x33c>)
 800d4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ce:	f003 0307 	and.w	r3, r3, #7
 800d4d2:	2b05      	cmp	r3, #5
 800d4d4:	d826      	bhi.n	800d524 <UART_SetConfig+0x2c8>
 800d4d6:	a201      	add	r2, pc, #4	; (adr r2, 800d4dc <UART_SetConfig+0x280>)
 800d4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4dc:	0800d4f5 	.word	0x0800d4f5
 800d4e0:	0800d4fd 	.word	0x0800d4fd
 800d4e4:	0800d505 	.word	0x0800d505
 800d4e8:	0800d50d 	.word	0x0800d50d
 800d4ec:	0800d515 	.word	0x0800d515
 800d4f0:	0800d51d 	.word	0x0800d51d
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4fa:	e180      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d502:	e17c      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d504:	2308      	movs	r3, #8
 800d506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d50a:	e178      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d50c:	2310      	movs	r3, #16
 800d50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d512:	e174      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d514:	2320      	movs	r3, #32
 800d516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d51a:	e170      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d522:	e16c      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d524:	2380      	movs	r3, #128	; 0x80
 800d526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d52a:	e168      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a1d      	ldr	r2, [pc, #116]	; (800d5a8 <UART_SetConfig+0x34c>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d142      	bne.n	800d5bc <UART_SetConfig+0x360>
 800d536:	4b18      	ldr	r3, [pc, #96]	; (800d598 <UART_SetConfig+0x33c>)
 800d538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	2b05      	cmp	r3, #5
 800d540:	d838      	bhi.n	800d5b4 <UART_SetConfig+0x358>
 800d542:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <UART_SetConfig+0x2ec>)
 800d544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d548:	0800d561 	.word	0x0800d561
 800d54c:	0800d569 	.word	0x0800d569
 800d550:	0800d571 	.word	0x0800d571
 800d554:	0800d579 	.word	0x0800d579
 800d558:	0800d581 	.word	0x0800d581
 800d55c:	0800d5ad 	.word	0x0800d5ad
 800d560:	2300      	movs	r3, #0
 800d562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d566:	e14a      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d568:	2304      	movs	r3, #4
 800d56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d56e:	e146      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d570:	2308      	movs	r3, #8
 800d572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d576:	e142      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d578:	2310      	movs	r3, #16
 800d57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d57e:	e13e      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d580:	2320      	movs	r3, #32
 800d582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d586:	e13a      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d588:	cfff69f3 	.word	0xcfff69f3
 800d58c:	58000c00 	.word	0x58000c00
 800d590:	11fff4ff 	.word	0x11fff4ff
 800d594:	40011000 	.word	0x40011000
 800d598:	58024400 	.word	0x58024400
 800d59c:	40004400 	.word	0x40004400
 800d5a0:	40004800 	.word	0x40004800
 800d5a4:	40004c00 	.word	0x40004c00
 800d5a8:	40005000 	.word	0x40005000
 800d5ac:	2340      	movs	r3, #64	; 0x40
 800d5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5b2:	e124      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d5b4:	2380      	movs	r3, #128	; 0x80
 800d5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5ba:	e120      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4acc      	ldr	r2, [pc, #816]	; (800d8f4 <UART_SetConfig+0x698>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d176      	bne.n	800d6b4 <UART_SetConfig+0x458>
 800d5c6:	4bcc      	ldr	r3, [pc, #816]	; (800d8f8 <UART_SetConfig+0x69c>)
 800d5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5ce:	2b28      	cmp	r3, #40	; 0x28
 800d5d0:	d86c      	bhi.n	800d6ac <UART_SetConfig+0x450>
 800d5d2:	a201      	add	r2, pc, #4	; (adr r2, 800d5d8 <UART_SetConfig+0x37c>)
 800d5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d8:	0800d67d 	.word	0x0800d67d
 800d5dc:	0800d6ad 	.word	0x0800d6ad
 800d5e0:	0800d6ad 	.word	0x0800d6ad
 800d5e4:	0800d6ad 	.word	0x0800d6ad
 800d5e8:	0800d6ad 	.word	0x0800d6ad
 800d5ec:	0800d6ad 	.word	0x0800d6ad
 800d5f0:	0800d6ad 	.word	0x0800d6ad
 800d5f4:	0800d6ad 	.word	0x0800d6ad
 800d5f8:	0800d685 	.word	0x0800d685
 800d5fc:	0800d6ad 	.word	0x0800d6ad
 800d600:	0800d6ad 	.word	0x0800d6ad
 800d604:	0800d6ad 	.word	0x0800d6ad
 800d608:	0800d6ad 	.word	0x0800d6ad
 800d60c:	0800d6ad 	.word	0x0800d6ad
 800d610:	0800d6ad 	.word	0x0800d6ad
 800d614:	0800d6ad 	.word	0x0800d6ad
 800d618:	0800d68d 	.word	0x0800d68d
 800d61c:	0800d6ad 	.word	0x0800d6ad
 800d620:	0800d6ad 	.word	0x0800d6ad
 800d624:	0800d6ad 	.word	0x0800d6ad
 800d628:	0800d6ad 	.word	0x0800d6ad
 800d62c:	0800d6ad 	.word	0x0800d6ad
 800d630:	0800d6ad 	.word	0x0800d6ad
 800d634:	0800d6ad 	.word	0x0800d6ad
 800d638:	0800d695 	.word	0x0800d695
 800d63c:	0800d6ad 	.word	0x0800d6ad
 800d640:	0800d6ad 	.word	0x0800d6ad
 800d644:	0800d6ad 	.word	0x0800d6ad
 800d648:	0800d6ad 	.word	0x0800d6ad
 800d64c:	0800d6ad 	.word	0x0800d6ad
 800d650:	0800d6ad 	.word	0x0800d6ad
 800d654:	0800d6ad 	.word	0x0800d6ad
 800d658:	0800d69d 	.word	0x0800d69d
 800d65c:	0800d6ad 	.word	0x0800d6ad
 800d660:	0800d6ad 	.word	0x0800d6ad
 800d664:	0800d6ad 	.word	0x0800d6ad
 800d668:	0800d6ad 	.word	0x0800d6ad
 800d66c:	0800d6ad 	.word	0x0800d6ad
 800d670:	0800d6ad 	.word	0x0800d6ad
 800d674:	0800d6ad 	.word	0x0800d6ad
 800d678:	0800d6a5 	.word	0x0800d6a5
 800d67c:	2301      	movs	r3, #1
 800d67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d682:	e0bc      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d684:	2304      	movs	r3, #4
 800d686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d68a:	e0b8      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d68c:	2308      	movs	r3, #8
 800d68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d692:	e0b4      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d694:	2310      	movs	r3, #16
 800d696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d69a:	e0b0      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d69c:	2320      	movs	r3, #32
 800d69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6a2:	e0ac      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d6a4:	2340      	movs	r3, #64	; 0x40
 800d6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6aa:	e0a8      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d6ac:	2380      	movs	r3, #128	; 0x80
 800d6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6b2:	e0a4      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a90      	ldr	r2, [pc, #576]	; (800d8fc <UART_SetConfig+0x6a0>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d130      	bne.n	800d720 <UART_SetConfig+0x4c4>
 800d6be:	4b8e      	ldr	r3, [pc, #568]	; (800d8f8 <UART_SetConfig+0x69c>)
 800d6c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	2b05      	cmp	r3, #5
 800d6c8:	d826      	bhi.n	800d718 <UART_SetConfig+0x4bc>
 800d6ca:	a201      	add	r2, pc, #4	; (adr r2, 800d6d0 <UART_SetConfig+0x474>)
 800d6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d0:	0800d6e9 	.word	0x0800d6e9
 800d6d4:	0800d6f1 	.word	0x0800d6f1
 800d6d8:	0800d6f9 	.word	0x0800d6f9
 800d6dc:	0800d701 	.word	0x0800d701
 800d6e0:	0800d709 	.word	0x0800d709
 800d6e4:	0800d711 	.word	0x0800d711
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6ee:	e086      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d6f0:	2304      	movs	r3, #4
 800d6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6f6:	e082      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d6f8:	2308      	movs	r3, #8
 800d6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d6fe:	e07e      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d700:	2310      	movs	r3, #16
 800d702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d706:	e07a      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d708:	2320      	movs	r3, #32
 800d70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d70e:	e076      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d710:	2340      	movs	r3, #64	; 0x40
 800d712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d716:	e072      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d718:	2380      	movs	r3, #128	; 0x80
 800d71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d71e:	e06e      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a76      	ldr	r2, [pc, #472]	; (800d900 <UART_SetConfig+0x6a4>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d130      	bne.n	800d78c <UART_SetConfig+0x530>
 800d72a:	4b73      	ldr	r3, [pc, #460]	; (800d8f8 <UART_SetConfig+0x69c>)
 800d72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d72e:	f003 0307 	and.w	r3, r3, #7
 800d732:	2b05      	cmp	r3, #5
 800d734:	d826      	bhi.n	800d784 <UART_SetConfig+0x528>
 800d736:	a201      	add	r2, pc, #4	; (adr r2, 800d73c <UART_SetConfig+0x4e0>)
 800d738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d73c:	0800d755 	.word	0x0800d755
 800d740:	0800d75d 	.word	0x0800d75d
 800d744:	0800d765 	.word	0x0800d765
 800d748:	0800d76d 	.word	0x0800d76d
 800d74c:	0800d775 	.word	0x0800d775
 800d750:	0800d77d 	.word	0x0800d77d
 800d754:	2300      	movs	r3, #0
 800d756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d75a:	e050      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d75c:	2304      	movs	r3, #4
 800d75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d762:	e04c      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d764:	2308      	movs	r3, #8
 800d766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d76a:	e048      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d76c:	2310      	movs	r3, #16
 800d76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d772:	e044      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d774:	2320      	movs	r3, #32
 800d776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d77a:	e040      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d77c:	2340      	movs	r3, #64	; 0x40
 800d77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d782:	e03c      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d784:	2380      	movs	r3, #128	; 0x80
 800d786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d78a:	e038      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a5c      	ldr	r2, [pc, #368]	; (800d904 <UART_SetConfig+0x6a8>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d130      	bne.n	800d7f8 <UART_SetConfig+0x59c>
 800d796:	4b58      	ldr	r3, [pc, #352]	; (800d8f8 <UART_SetConfig+0x69c>)
 800d798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d79a:	f003 0307 	and.w	r3, r3, #7
 800d79e:	2b05      	cmp	r3, #5
 800d7a0:	d826      	bhi.n	800d7f0 <UART_SetConfig+0x594>
 800d7a2:	a201      	add	r2, pc, #4	; (adr r2, 800d7a8 <UART_SetConfig+0x54c>)
 800d7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a8:	0800d7c1 	.word	0x0800d7c1
 800d7ac:	0800d7c9 	.word	0x0800d7c9
 800d7b0:	0800d7d1 	.word	0x0800d7d1
 800d7b4:	0800d7d9 	.word	0x0800d7d9
 800d7b8:	0800d7e1 	.word	0x0800d7e1
 800d7bc:	0800d7e9 	.word	0x0800d7e9
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7c6:	e01a      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d7c8:	2304      	movs	r3, #4
 800d7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ce:	e016      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d7d0:	2308      	movs	r3, #8
 800d7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7d6:	e012      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d7d8:	2310      	movs	r3, #16
 800d7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7de:	e00e      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d7e0:	2320      	movs	r3, #32
 800d7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7e6:	e00a      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d7e8:	2340      	movs	r3, #64	; 0x40
 800d7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ee:	e006      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d7f0:	2380      	movs	r3, #128	; 0x80
 800d7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7f6:	e002      	b.n	800d7fe <UART_SetConfig+0x5a2>
 800d7f8:	2380      	movs	r3, #128	; 0x80
 800d7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a40      	ldr	r2, [pc, #256]	; (800d904 <UART_SetConfig+0x6a8>)
 800d804:	4293      	cmp	r3, r2
 800d806:	f040 80ef 	bne.w	800d9e8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d80a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d80e:	2b20      	cmp	r3, #32
 800d810:	dc46      	bgt.n	800d8a0 <UART_SetConfig+0x644>
 800d812:	2b02      	cmp	r3, #2
 800d814:	f2c0 8081 	blt.w	800d91a <UART_SetConfig+0x6be>
 800d818:	3b02      	subs	r3, #2
 800d81a:	2b1e      	cmp	r3, #30
 800d81c:	d87d      	bhi.n	800d91a <UART_SetConfig+0x6be>
 800d81e:	a201      	add	r2, pc, #4	; (adr r2, 800d824 <UART_SetConfig+0x5c8>)
 800d820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d824:	0800d8a7 	.word	0x0800d8a7
 800d828:	0800d91b 	.word	0x0800d91b
 800d82c:	0800d8af 	.word	0x0800d8af
 800d830:	0800d91b 	.word	0x0800d91b
 800d834:	0800d91b 	.word	0x0800d91b
 800d838:	0800d91b 	.word	0x0800d91b
 800d83c:	0800d8bf 	.word	0x0800d8bf
 800d840:	0800d91b 	.word	0x0800d91b
 800d844:	0800d91b 	.word	0x0800d91b
 800d848:	0800d91b 	.word	0x0800d91b
 800d84c:	0800d91b 	.word	0x0800d91b
 800d850:	0800d91b 	.word	0x0800d91b
 800d854:	0800d91b 	.word	0x0800d91b
 800d858:	0800d91b 	.word	0x0800d91b
 800d85c:	0800d8cf 	.word	0x0800d8cf
 800d860:	0800d91b 	.word	0x0800d91b
 800d864:	0800d91b 	.word	0x0800d91b
 800d868:	0800d91b 	.word	0x0800d91b
 800d86c:	0800d91b 	.word	0x0800d91b
 800d870:	0800d91b 	.word	0x0800d91b
 800d874:	0800d91b 	.word	0x0800d91b
 800d878:	0800d91b 	.word	0x0800d91b
 800d87c:	0800d91b 	.word	0x0800d91b
 800d880:	0800d91b 	.word	0x0800d91b
 800d884:	0800d91b 	.word	0x0800d91b
 800d888:	0800d91b 	.word	0x0800d91b
 800d88c:	0800d91b 	.word	0x0800d91b
 800d890:	0800d91b 	.word	0x0800d91b
 800d894:	0800d91b 	.word	0x0800d91b
 800d898:	0800d91b 	.word	0x0800d91b
 800d89c:	0800d90d 	.word	0x0800d90d
 800d8a0:	2b40      	cmp	r3, #64	; 0x40
 800d8a2:	d036      	beq.n	800d912 <UART_SetConfig+0x6b6>
 800d8a4:	e039      	b.n	800d91a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d8a6:	f7fb fe83 	bl	80095b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d8aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d8ac:	e03b      	b.n	800d926 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8ae:	f107 0314 	add.w	r3, r7, #20
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fb fe92 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d8bc:	e033      	b.n	800d926 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8be:	f107 0308 	add.w	r3, r7, #8
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fb ffde 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d8cc:	e02b      	b.n	800d926 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8ce:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <UART_SetConfig+0x69c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 0320 	and.w	r3, r3, #32
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d009      	beq.n	800d8ee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8da:	4b07      	ldr	r3, [pc, #28]	; (800d8f8 <UART_SetConfig+0x69c>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	08db      	lsrs	r3, r3, #3
 800d8e0:	f003 0303 	and.w	r3, r3, #3
 800d8e4:	4a08      	ldr	r2, [pc, #32]	; (800d908 <UART_SetConfig+0x6ac>)
 800d8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d8ec:	e01b      	b.n	800d926 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d8ee:	4b06      	ldr	r3, [pc, #24]	; (800d908 <UART_SetConfig+0x6ac>)
 800d8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d8f2:	e018      	b.n	800d926 <UART_SetConfig+0x6ca>
 800d8f4:	40011400 	.word	0x40011400
 800d8f8:	58024400 	.word	0x58024400
 800d8fc:	40007800 	.word	0x40007800
 800d900:	40007c00 	.word	0x40007c00
 800d904:	58000c00 	.word	0x58000c00
 800d908:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d90c:	4bc4      	ldr	r3, [pc, #784]	; (800dc20 <UART_SetConfig+0x9c4>)
 800d90e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d910:	e009      	b.n	800d926 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d916:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d918:	e005      	b.n	800d926 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d91a:	2300      	movs	r3, #0
 800d91c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d91e:	2301      	movs	r3, #1
 800d920:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f000 81da 	beq.w	800dce2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d932:	4abc      	ldr	r2, [pc, #752]	; (800dc24 <UART_SetConfig+0x9c8>)
 800d934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d938:	461a      	mov	r2, r3
 800d93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d940:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685a      	ldr	r2, [r3, #4]
 800d946:	4613      	mov	r3, r2
 800d948:	005b      	lsls	r3, r3, #1
 800d94a:	4413      	add	r3, r2
 800d94c:	6a3a      	ldr	r2, [r7, #32]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d305      	bcc.n	800d95e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d958:	6a3a      	ldr	r2, [r7, #32]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d903      	bls.n	800d966 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d964:	e1bd      	b.n	800dce2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d968:	4618      	mov	r0, r3
 800d96a:	f04f 0100 	mov.w	r1, #0
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d972:	4aac      	ldr	r2, [pc, #688]	; (800dc24 <UART_SetConfig+0x9c8>)
 800d974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d978:	b29a      	uxth	r2, r3
 800d97a:	f04f 0300 	mov.w	r3, #0
 800d97e:	f7f2 fd07 	bl	8000390 <__aeabi_uldivmod>
 800d982:	4602      	mov	r2, r0
 800d984:	460b      	mov	r3, r1
 800d986:	4610      	mov	r0, r2
 800d988:	4619      	mov	r1, r3
 800d98a:	f04f 0200 	mov.w	r2, #0
 800d98e:	f04f 0300 	mov.w	r3, #0
 800d992:	020b      	lsls	r3, r1, #8
 800d994:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d998:	0202      	lsls	r2, r0, #8
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	6849      	ldr	r1, [r1, #4]
 800d99e:	0849      	lsrs	r1, r1, #1
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	f04f 0100 	mov.w	r1, #0
 800d9a6:	1814      	adds	r4, r2, r0
 800d9a8:	eb43 0501 	adc.w	r5, r3, r1
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	f04f 0300 	mov.w	r3, #0
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f2 fce9 	bl	8000390 <__aeabi_uldivmod>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d9cc:	d308      	bcc.n	800d9e0 <UART_SetConfig+0x784>
 800d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9d4:	d204      	bcs.n	800d9e0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9dc:	60da      	str	r2, [r3, #12]
 800d9de:	e180      	b.n	800dce2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d9e6:	e17c      	b.n	800dce2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	69db      	ldr	r3, [r3, #28]
 800d9ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9f0:	f040 80bf 	bne.w	800db72 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d9f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d9f8:	2b20      	cmp	r3, #32
 800d9fa:	dc49      	bgt.n	800da90 <UART_SetConfig+0x834>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	db7c      	blt.n	800dafa <UART_SetConfig+0x89e>
 800da00:	2b20      	cmp	r3, #32
 800da02:	d87a      	bhi.n	800dafa <UART_SetConfig+0x89e>
 800da04:	a201      	add	r2, pc, #4	; (adr r2, 800da0c <UART_SetConfig+0x7b0>)
 800da06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da0a:	bf00      	nop
 800da0c:	0800da97 	.word	0x0800da97
 800da10:	0800da9f 	.word	0x0800da9f
 800da14:	0800dafb 	.word	0x0800dafb
 800da18:	0800dafb 	.word	0x0800dafb
 800da1c:	0800daa7 	.word	0x0800daa7
 800da20:	0800dafb 	.word	0x0800dafb
 800da24:	0800dafb 	.word	0x0800dafb
 800da28:	0800dafb 	.word	0x0800dafb
 800da2c:	0800dab7 	.word	0x0800dab7
 800da30:	0800dafb 	.word	0x0800dafb
 800da34:	0800dafb 	.word	0x0800dafb
 800da38:	0800dafb 	.word	0x0800dafb
 800da3c:	0800dafb 	.word	0x0800dafb
 800da40:	0800dafb 	.word	0x0800dafb
 800da44:	0800dafb 	.word	0x0800dafb
 800da48:	0800dafb 	.word	0x0800dafb
 800da4c:	0800dac7 	.word	0x0800dac7
 800da50:	0800dafb 	.word	0x0800dafb
 800da54:	0800dafb 	.word	0x0800dafb
 800da58:	0800dafb 	.word	0x0800dafb
 800da5c:	0800dafb 	.word	0x0800dafb
 800da60:	0800dafb 	.word	0x0800dafb
 800da64:	0800dafb 	.word	0x0800dafb
 800da68:	0800dafb 	.word	0x0800dafb
 800da6c:	0800dafb 	.word	0x0800dafb
 800da70:	0800dafb 	.word	0x0800dafb
 800da74:	0800dafb 	.word	0x0800dafb
 800da78:	0800dafb 	.word	0x0800dafb
 800da7c:	0800dafb 	.word	0x0800dafb
 800da80:	0800dafb 	.word	0x0800dafb
 800da84:	0800dafb 	.word	0x0800dafb
 800da88:	0800dafb 	.word	0x0800dafb
 800da8c:	0800daed 	.word	0x0800daed
 800da90:	2b40      	cmp	r3, #64	; 0x40
 800da92:	d02e      	beq.n	800daf2 <UART_SetConfig+0x896>
 800da94:	e031      	b.n	800dafa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da96:	f7fa f90b 	bl	8007cb0 <HAL_RCC_GetPCLK1Freq>
 800da9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800da9c:	e033      	b.n	800db06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da9e:	f7fa f91d 	bl	8007cdc <HAL_RCC_GetPCLK2Freq>
 800daa2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800daa4:	e02f      	b.n	800db06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800daa6:	f107 0314 	add.w	r3, r7, #20
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fb fd96 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dab4:	e027      	b.n	800db06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dab6:	f107 0308 	add.w	r3, r7, #8
 800daba:	4618      	mov	r0, r3
 800dabc:	f7fb fee2 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dac4:	e01f      	b.n	800db06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dac6:	4b58      	ldr	r3, [pc, #352]	; (800dc28 <UART_SetConfig+0x9cc>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f003 0320 	and.w	r3, r3, #32
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d009      	beq.n	800dae6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dad2:	4b55      	ldr	r3, [pc, #340]	; (800dc28 <UART_SetConfig+0x9cc>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	08db      	lsrs	r3, r3, #3
 800dad8:	f003 0303 	and.w	r3, r3, #3
 800dadc:	4a53      	ldr	r2, [pc, #332]	; (800dc2c <UART_SetConfig+0x9d0>)
 800dade:	fa22 f303 	lsr.w	r3, r2, r3
 800dae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dae4:	e00f      	b.n	800db06 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800dae6:	4b51      	ldr	r3, [pc, #324]	; (800dc2c <UART_SetConfig+0x9d0>)
 800dae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800daea:	e00c      	b.n	800db06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800daec:	4b4c      	ldr	r3, [pc, #304]	; (800dc20 <UART_SetConfig+0x9c4>)
 800daee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800daf0:	e009      	b.n	800db06 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800daf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800daf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800daf8:	e005      	b.n	800db06 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800dafa:	2300      	movs	r3, #0
 800dafc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800db04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	2b00      	cmp	r3, #0
 800db0a:	f000 80ea 	beq.w	800dce2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db12:	4a44      	ldr	r2, [pc, #272]	; (800dc24 <UART_SetConfig+0x9c8>)
 800db14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db18:	461a      	mov	r2, r3
 800db1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800db20:	005a      	lsls	r2, r3, #1
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	085b      	lsrs	r3, r3, #1
 800db28:	441a      	add	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db32:	b29b      	uxth	r3, r3
 800db34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db38:	2b0f      	cmp	r3, #15
 800db3a:	d916      	bls.n	800db6a <UART_SetConfig+0x90e>
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db42:	d212      	bcs.n	800db6a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	b29b      	uxth	r3, r3
 800db48:	f023 030f 	bic.w	r3, r3, #15
 800db4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	085b      	lsrs	r3, r3, #1
 800db52:	b29b      	uxth	r3, r3
 800db54:	f003 0307 	and.w	r3, r3, #7
 800db58:	b29a      	uxth	r2, r3
 800db5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db5c:	4313      	orrs	r3, r2
 800db5e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db66:	60da      	str	r2, [r3, #12]
 800db68:	e0bb      	b.n	800dce2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800db70:	e0b7      	b.n	800dce2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800db72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db76:	2b20      	cmp	r3, #32
 800db78:	dc4a      	bgt.n	800dc10 <UART_SetConfig+0x9b4>
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f2c0 8086 	blt.w	800dc8c <UART_SetConfig+0xa30>
 800db80:	2b20      	cmp	r3, #32
 800db82:	f200 8083 	bhi.w	800dc8c <UART_SetConfig+0xa30>
 800db86:	a201      	add	r2, pc, #4	; (adr r2, 800db8c <UART_SetConfig+0x930>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800dc17 	.word	0x0800dc17
 800db90:	0800dc31 	.word	0x0800dc31
 800db94:	0800dc8d 	.word	0x0800dc8d
 800db98:	0800dc8d 	.word	0x0800dc8d
 800db9c:	0800dc39 	.word	0x0800dc39
 800dba0:	0800dc8d 	.word	0x0800dc8d
 800dba4:	0800dc8d 	.word	0x0800dc8d
 800dba8:	0800dc8d 	.word	0x0800dc8d
 800dbac:	0800dc49 	.word	0x0800dc49
 800dbb0:	0800dc8d 	.word	0x0800dc8d
 800dbb4:	0800dc8d 	.word	0x0800dc8d
 800dbb8:	0800dc8d 	.word	0x0800dc8d
 800dbbc:	0800dc8d 	.word	0x0800dc8d
 800dbc0:	0800dc8d 	.word	0x0800dc8d
 800dbc4:	0800dc8d 	.word	0x0800dc8d
 800dbc8:	0800dc8d 	.word	0x0800dc8d
 800dbcc:	0800dc59 	.word	0x0800dc59
 800dbd0:	0800dc8d 	.word	0x0800dc8d
 800dbd4:	0800dc8d 	.word	0x0800dc8d
 800dbd8:	0800dc8d 	.word	0x0800dc8d
 800dbdc:	0800dc8d 	.word	0x0800dc8d
 800dbe0:	0800dc8d 	.word	0x0800dc8d
 800dbe4:	0800dc8d 	.word	0x0800dc8d
 800dbe8:	0800dc8d 	.word	0x0800dc8d
 800dbec:	0800dc8d 	.word	0x0800dc8d
 800dbf0:	0800dc8d 	.word	0x0800dc8d
 800dbf4:	0800dc8d 	.word	0x0800dc8d
 800dbf8:	0800dc8d 	.word	0x0800dc8d
 800dbfc:	0800dc8d 	.word	0x0800dc8d
 800dc00:	0800dc8d 	.word	0x0800dc8d
 800dc04:	0800dc8d 	.word	0x0800dc8d
 800dc08:	0800dc8d 	.word	0x0800dc8d
 800dc0c:	0800dc7f 	.word	0x0800dc7f
 800dc10:	2b40      	cmp	r3, #64	; 0x40
 800dc12:	d037      	beq.n	800dc84 <UART_SetConfig+0xa28>
 800dc14:	e03a      	b.n	800dc8c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc16:	f7fa f84b 	bl	8007cb0 <HAL_RCC_GetPCLK1Freq>
 800dc1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dc1c:	e03c      	b.n	800dc98 <UART_SetConfig+0xa3c>
 800dc1e:	bf00      	nop
 800dc20:	003d0900 	.word	0x003d0900
 800dc24:	08015e68 	.word	0x08015e68
 800dc28:	58024400 	.word	0x58024400
 800dc2c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc30:	f7fa f854 	bl	8007cdc <HAL_RCC_GetPCLK2Freq>
 800dc34:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dc36:	e02f      	b.n	800dc98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc38:	f107 0314 	add.w	r3, r7, #20
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fb fccd 	bl	80095dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc42:	69bb      	ldr	r3, [r7, #24]
 800dc44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc46:	e027      	b.n	800dc98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc48:	f107 0308 	add.w	r3, r7, #8
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fb fe19 	bl	8009884 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc56:	e01f      	b.n	800dc98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc58:	4b2c      	ldr	r3, [pc, #176]	; (800dd0c <UART_SetConfig+0xab0>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 0320 	and.w	r3, r3, #32
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d009      	beq.n	800dc78 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc64:	4b29      	ldr	r3, [pc, #164]	; (800dd0c <UART_SetConfig+0xab0>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	08db      	lsrs	r3, r3, #3
 800dc6a:	f003 0303 	and.w	r3, r3, #3
 800dc6e:	4a28      	ldr	r2, [pc, #160]	; (800dd10 <UART_SetConfig+0xab4>)
 800dc70:	fa22 f303 	lsr.w	r3, r2, r3
 800dc74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc76:	e00f      	b.n	800dc98 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800dc78:	4b25      	ldr	r3, [pc, #148]	; (800dd10 <UART_SetConfig+0xab4>)
 800dc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc7c:	e00c      	b.n	800dc98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc7e:	4b25      	ldr	r3, [pc, #148]	; (800dd14 <UART_SetConfig+0xab8>)
 800dc80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc82:	e009      	b.n	800dc98 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc8a:	e005      	b.n	800dc98 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dc96:	bf00      	nop
    }

    if (pclk != 0U)
 800dc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d021      	beq.n	800dce2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca2:	4a1d      	ldr	r2, [pc, #116]	; (800dd18 <UART_SetConfig+0xabc>)
 800dca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcac:	fbb3 f2f2 	udiv	r2, r3, r2
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	085b      	lsrs	r3, r3, #1
 800dcb6:	441a      	add	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	2b0f      	cmp	r3, #15
 800dcc8:	d908      	bls.n	800dcdc <UART_SetConfig+0xa80>
 800dcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcd0:	d204      	bcs.n	800dcdc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcd8:	60da      	str	r2, [r3, #12]
 800dcda:	e002      	b.n	800dce2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dcfe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3738      	adds	r7, #56	; 0x38
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bdb0      	pop	{r4, r5, r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	58024400 	.word	0x58024400
 800dd10:	03d09000 	.word	0x03d09000
 800dd14:	003d0900 	.word	0x003d0900
 800dd18:	08015e68 	.word	0x08015e68

0800dd1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00a      	beq.n	800dd46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	430a      	orrs	r2, r1
 800dd44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd4a:	f003 0302 	and.w	r3, r3, #2
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00a      	beq.n	800dd68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	430a      	orrs	r2, r1
 800dd66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd6c:	f003 0304 	and.w	r3, r3, #4
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00a      	beq.n	800dd8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	430a      	orrs	r2, r1
 800dd88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd8e:	f003 0308 	and.w	r3, r3, #8
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00a      	beq.n	800ddac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	430a      	orrs	r2, r1
 800ddaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb0:	f003 0310 	and.w	r3, r3, #16
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00a      	beq.n	800ddce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	430a      	orrs	r2, r1
 800ddcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd2:	f003 0320 	and.w	r3, r3, #32
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	430a      	orrs	r2, r1
 800ddee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d01a      	beq.n	800de32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	430a      	orrs	r2, r1
 800de10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de1a:	d10a      	bne.n	800de32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	430a      	orrs	r2, r1
 800de30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00a      	beq.n	800de54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	430a      	orrs	r2, r1
 800de52:	605a      	str	r2, [r3, #4]
  }
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af02      	add	r7, sp, #8
 800de66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de70:	f7f3 ffca 	bl	8001e08 <HAL_GetTick>
 800de74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 0308 	and.w	r3, r3, #8
 800de80:	2b08      	cmp	r3, #8
 800de82:	d10e      	bne.n	800dea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f82f 	bl	800def6 <UART_WaitOnFlagUntilTimeout>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d001      	beq.n	800dea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de9e:	2303      	movs	r3, #3
 800dea0:	e025      	b.n	800deee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f003 0304 	and.w	r3, r3, #4
 800deac:	2b04      	cmp	r3, #4
 800deae:	d10e      	bne.n	800dece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800deb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 f819 	bl	800def6 <UART_WaitOnFlagUntilTimeout>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e00f      	b.n	800deee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2220      	movs	r2, #32
 800ded2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2220      	movs	r2, #32
 800deda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800def6:	b580      	push	{r7, lr}
 800def8:	b084      	sub	sp, #16
 800defa:	af00      	add	r7, sp, #0
 800defc:	60f8      	str	r0, [r7, #12]
 800defe:	60b9      	str	r1, [r7, #8]
 800df00:	603b      	str	r3, [r7, #0]
 800df02:	4613      	mov	r3, r2
 800df04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df06:	e062      	b.n	800dfce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d05e      	beq.n	800dfce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df10:	f7f3 ff7a 	bl	8001e08 <HAL_GetTick>
 800df14:	4602      	mov	r2, r0
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	69ba      	ldr	r2, [r7, #24]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d302      	bcc.n	800df26 <UART_WaitOnFlagUntilTimeout+0x30>
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d11d      	bne.n	800df62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800df34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	689a      	ldr	r2, [r3, #8]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f022 0201 	bic.w	r2, r2, #1
 800df44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2220      	movs	r2, #32
 800df4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2220      	movs	r2, #32
 800df52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2200      	movs	r2, #0
 800df5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800df5e:	2303      	movs	r3, #3
 800df60:	e045      	b.n	800dfee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f003 0304 	and.w	r3, r3, #4
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d02e      	beq.n	800dfce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	69db      	ldr	r3, [r3, #28]
 800df76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df7e:	d126      	bne.n	800dfce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800df98:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f022 0201 	bic.w	r2, r2, #1
 800dfa8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2220      	movs	r2, #32
 800dfae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2220      	movs	r2, #32
 800dfb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2220      	movs	r2, #32
 800dfbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dfca:	2303      	movs	r3, #3
 800dfcc:	e00f      	b.n	800dfee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	69da      	ldr	r2, [r3, #28]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	4013      	ands	r3, r2
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	bf0c      	ite	eq
 800dfde:	2301      	moveq	r3, #1
 800dfe0:	2300      	movne	r3, #0
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	79fb      	ldrb	r3, [r7, #7]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d08d      	beq.n	800df08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dfec:	2300      	movs	r3, #0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3710      	adds	r7, #16
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
	...

0800dff8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4613      	mov	r3, r2
 800e004:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	68ba      	ldr	r2, [r7, #8]
 800e00a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	88fa      	ldrh	r2, [r7, #6]
 800e010:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	88fa      	ldrh	r2, [r7, #6]
 800e018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2200      	movs	r2, #0
 800e020:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e02a:	d10e      	bne.n	800e04a <UART_Start_Receive_IT+0x52>
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	691b      	ldr	r3, [r3, #16]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d105      	bne.n	800e040 <UART_Start_Receive_IT+0x48>
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e03a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e03e:	e02d      	b.n	800e09c <UART_Start_Receive_IT+0xa4>
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	22ff      	movs	r2, #255	; 0xff
 800e044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e048:	e028      	b.n	800e09c <UART_Start_Receive_IT+0xa4>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10d      	bne.n	800e06e <UART_Start_Receive_IT+0x76>
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d104      	bne.n	800e064 <UART_Start_Receive_IT+0x6c>
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	22ff      	movs	r2, #255	; 0xff
 800e05e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e062:	e01b      	b.n	800e09c <UART_Start_Receive_IT+0xa4>
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	227f      	movs	r2, #127	; 0x7f
 800e068:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e06c:	e016      	b.n	800e09c <UART_Start_Receive_IT+0xa4>
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e076:	d10d      	bne.n	800e094 <UART_Start_Receive_IT+0x9c>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d104      	bne.n	800e08a <UART_Start_Receive_IT+0x92>
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	227f      	movs	r2, #127	; 0x7f
 800e084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e088:	e008      	b.n	800e09c <UART_Start_Receive_IT+0xa4>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	223f      	movs	r2, #63	; 0x3f
 800e08e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e092:	e003      	b.n	800e09c <UART_Start_Receive_IT+0xa4>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2222      	movs	r2, #34	; 0x22
 800e0a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	689a      	ldr	r2, [r3, #8]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f042 0201 	orr.w	r2, r2, #1
 800e0ba:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0c4:	d12a      	bne.n	800e11c <UART_Start_Receive_IT+0x124>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e0cc:	88fa      	ldrh	r2, [r7, #6]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d324      	bcc.n	800e11c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	689b      	ldr	r3, [r3, #8]
 800e0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0da:	d107      	bne.n	800e0ec <UART_Start_Receive_IT+0xf4>
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d103      	bne.n	800e0ec <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	4a1f      	ldr	r2, [pc, #124]	; (800e164 <UART_Start_Receive_IT+0x16c>)
 800e0e8:	671a      	str	r2, [r3, #112]	; 0x70
 800e0ea:	e002      	b.n	800e0f2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	4a1e      	ldr	r2, [pc, #120]	; (800e168 <UART_Start_Receive_IT+0x170>)
 800e0f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e108:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	689a      	ldr	r2, [r3, #8]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e118:	609a      	str	r2, [r3, #8]
 800e11a:	e01b      	b.n	800e154 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e124:	d107      	bne.n	800e136 <UART_Start_Receive_IT+0x13e>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	691b      	ldr	r3, [r3, #16]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d103      	bne.n	800e136 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	4a0e      	ldr	r2, [pc, #56]	; (800e16c <UART_Start_Receive_IT+0x174>)
 800e132:	671a      	str	r2, [r3, #112]	; 0x70
 800e134:	e002      	b.n	800e13c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	4a0d      	ldr	r2, [pc, #52]	; (800e170 <UART_Start_Receive_IT+0x178>)
 800e13a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800e152:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop
 800e164:	0800e5ed 	.word	0x0800e5ed
 800e168:	0800e3e9 	.word	0x0800e3e9
 800e16c:	0800e311 	.word	0x0800e311
 800e170:	0800e239 	.word	0x0800e239

0800e174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e18a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	6899      	ldr	r1, [r3, #8]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <UART_EndRxTransfer+0x60>)
 800e198:	400b      	ands	r3, r1
 800e19a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d107      	bne.n	800e1b4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f022 0210 	bic.w	r2, r2, #16
 800e1b2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2220      	movs	r2, #32
 800e1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	effffffe 	.word	0xeffffffe

0800e1d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7ff f81a 	bl	800d230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1fc:	bf00      	nop
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e21a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2220      	movs	r2, #32
 800e220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2200      	movs	r2, #0
 800e228:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7fe fff6 	bl	800d21c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e246:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e24e:	2b22      	cmp	r3, #34	; 0x22
 800e250:	d152      	bne.n	800e2f8 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e258:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e25a:	89bb      	ldrh	r3, [r7, #12]
 800e25c:	b2d9      	uxtb	r1, r3
 800e25e:	89fb      	ldrh	r3, [r7, #14]
 800e260:	b2da      	uxtb	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e266:	400a      	ands	r2, r1
 800e268:	b2d2      	uxtb	r2, r2
 800e26a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e270:	1c5a      	adds	r2, r3, #1
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	3b01      	subs	r3, #1
 800e280:	b29a      	uxth	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e28e:	b29b      	uxth	r3, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	d139      	bne.n	800e308 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e2a2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	689a      	ldr	r2, [r3, #8]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f022 0201 	bic.w	r2, r2, #1
 800e2b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2220      	movs	r2, #32
 800e2b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d10f      	bne.n	800e2ea <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f022 0210 	bic.w	r2, r2, #16
 800e2d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7fe ffae 	bl	800d244 <HAL_UARTEx_RxEventCallback>
 800e2e8:	e002      	b.n	800e2f0 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7f2 fdbc 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2f6:	e007      	b.n	800e308 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	699a      	ldr	r2, [r3, #24]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f042 0208 	orr.w	r2, r2, #8
 800e306:	619a      	str	r2, [r3, #24]
}
 800e308:	bf00      	nop
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e31e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e326:	2b22      	cmp	r3, #34	; 0x22
 800e328:	d152      	bne.n	800e3d0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e330:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e336:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800e338:	89ba      	ldrh	r2, [r7, #12]
 800e33a:	89fb      	ldrh	r3, [r7, #14]
 800e33c:	4013      	ands	r3, r2
 800e33e:	b29a      	uxth	r2, r3
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e348:	1c9a      	adds	r2, r3, #2
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e354:	b29b      	uxth	r3, r3
 800e356:	3b01      	subs	r3, #1
 800e358:	b29a      	uxth	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e366:	b29b      	uxth	r3, r3
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d139      	bne.n	800e3e0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e37a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	689a      	ldr	r2, [r3, #8]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f022 0201 	bic.w	r2, r2, #1
 800e38a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2220      	movs	r2, #32
 800e390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d10f      	bne.n	800e3c2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f022 0210 	bic.w	r2, r2, #16
 800e3b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f7fe ff42 	bl	800d244 <HAL_UARTEx_RxEventCallback>
 800e3c0:	e002      	b.n	800e3c8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7f2 fd50 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3ce:	e007      	b.n	800e3e0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	699a      	ldr	r2, [r3, #24]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f042 0208 	orr.w	r2, r2, #8
 800e3de:	619a      	str	r2, [r3, #24]
}
 800e3e0:	bf00      	nop
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b088      	sub	sp, #32
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e3f6:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	69db      	ldr	r3, [r3, #28]
 800e3fe:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e416:	2b22      	cmp	r3, #34	; 0x22
 800e418:	f040 80d8 	bne.w	800e5cc <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e422:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e424:	e0a8      	b.n	800e578 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e42c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e42e:	89bb      	ldrh	r3, [r7, #12]
 800e430:	b2d9      	uxtb	r1, r3
 800e432:	8b7b      	ldrh	r3, [r7, #26]
 800e434:	b2da      	uxtb	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e43a:	400a      	ands	r2, r1
 800e43c:	b2d2      	uxtb	r2, r2
 800e43e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e450:	b29b      	uxth	r3, r3
 800e452:	3b01      	subs	r3, #1
 800e454:	b29a      	uxth	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	f003 0307 	and.w	r3, r3, #7
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d04d      	beq.n	800e50a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	f003 0301 	and.w	r3, r3, #1
 800e474:	2b00      	cmp	r3, #0
 800e476:	d010      	beq.n	800e49a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00b      	beq.n	800e49a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2201      	movs	r2, #1
 800e488:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e490:	f043 0201 	orr.w	r2, r3, #1
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	f003 0302 	and.w	r3, r3, #2
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d010      	beq.n	800e4c6 <UART_RxISR_8BIT_FIFOEN+0xde>
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	f003 0301 	and.w	r3, r3, #1
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2202      	movs	r2, #2
 800e4b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4bc:	f043 0204 	orr.w	r2, r3, #4
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	f003 0304 	and.w	r3, r3, #4
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d010      	beq.n	800e4f2 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00b      	beq.n	800e4f2 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2204      	movs	r2, #4
 800e4e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4e8:	f043 0202 	orr.w	r2, r3, #2
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d006      	beq.n	800e50a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f7fe fe97 	bl	800d230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e510:	b29b      	uxth	r3, r3
 800e512:	2b00      	cmp	r3, #0
 800e514:	d130      	bne.n	800e578 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e524:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6899      	ldr	r1, [r3, #8]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	4b2c      	ldr	r3, [pc, #176]	; (800e5e4 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800e532:	400b      	ands	r3, r1
 800e534:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2220      	movs	r2, #32
 800e53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d10f      	bne.n	800e56c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681a      	ldr	r2, [r3, #0]
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f022 0210 	bic.w	r2, r2, #16
 800e55a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e562:	4619      	mov	r1, r3
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f7fe fe6d 	bl	800d244 <HAL_UARTEx_RxEventCallback>
 800e56a:	e002      	b.n	800e572 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7f2 fc7b 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e578:	89fb      	ldrh	r3, [r7, #14]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d005      	beq.n	800e58a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800e57e:	69fb      	ldr	r3, [r7, #28]
 800e580:	f003 0320 	and.w	r3, r3, #32
 800e584:	2b00      	cmp	r3, #0
 800e586:	f47f af4e 	bne.w	800e426 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e590:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e592:	897b      	ldrh	r3, [r7, #10]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d021      	beq.n	800e5dc <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e59e:	897a      	ldrh	r2, [r7, #10]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d21b      	bcs.n	800e5dc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	689a      	ldr	r2, [r3, #8]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e5b2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4a0c      	ldr	r2, [pc, #48]	; (800e5e8 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800e5b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f042 0220 	orr.w	r2, r2, #32
 800e5c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e5ca:	e007      	b.n	800e5dc <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	699a      	ldr	r2, [r3, #24]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f042 0208 	orr.w	r2, r2, #8
 800e5da:	619a      	str	r2, [r3, #24]
}
 800e5dc:	bf00      	nop
 800e5de:	3720      	adds	r7, #32
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	effffffe 	.word	0xeffffffe
 800e5e8:	0800e239 	.word	0x0800e239

0800e5ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08a      	sub	sp, #40	; 0x28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5fa:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	69db      	ldr	r3, [r3, #28]
 800e602:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	689b      	ldr	r3, [r3, #8]
 800e612:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e61a:	2b22      	cmp	r3, #34	; 0x22
 800e61c:	f040 80d8 	bne.w	800e7d0 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e626:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e628:	e0a8      	b.n	800e77c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e630:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e636:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800e638:	8aba      	ldrh	r2, [r7, #20]
 800e63a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e63c:	4013      	ands	r3, r2
 800e63e:	b29a      	uxth	r2, r3
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e648:	1c9a      	adds	r2, r3, #2
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e654:	b29b      	uxth	r3, r3
 800e656:	3b01      	subs	r3, #1
 800e658:	b29a      	uxth	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	69db      	ldr	r3, [r3, #28]
 800e666:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66a:	f003 0307 	and.w	r3, r3, #7
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d04d      	beq.n	800e70e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e674:	f003 0301 	and.w	r3, r3, #1
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d010      	beq.n	800e69e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e682:	2b00      	cmp	r3, #0
 800e684:	d00b      	beq.n	800e69e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	2201      	movs	r2, #1
 800e68c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e694:	f043 0201 	orr.w	r2, r3, #1
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	f003 0302 	and.w	r3, r3, #2
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d010      	beq.n	800e6ca <UART_RxISR_16BIT_FIFOEN+0xde>
 800e6a8:	69bb      	ldr	r3, [r7, #24]
 800e6aa:	f003 0301 	and.w	r3, r3, #1
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00b      	beq.n	800e6ca <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6c0:	f043 0204 	orr.w	r2, r3, #4
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	f003 0304 	and.w	r3, r3, #4
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d010      	beq.n	800e6f6 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00b      	beq.n	800e6f6 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2204      	movs	r2, #4
 800e6e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6ec:	f043 0202 	orr.w	r2, r3, #2
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d006      	beq.n	800e70e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f7fe fd95 	bl	800d230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e714:	b29b      	uxth	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d130      	bne.n	800e77c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e728:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	6899      	ldr	r1, [r3, #8]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	4b2c      	ldr	r3, [pc, #176]	; (800e7e8 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800e736:	400b      	ands	r3, r1
 800e738:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2220      	movs	r2, #32
 800e73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d10f      	bne.n	800e770 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f022 0210 	bic.w	r2, r2, #16
 800e75e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e766:	4619      	mov	r1, r3
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7fe fd6b 	bl	800d244 <HAL_UARTEx_RxEventCallback>
 800e76e:	e002      	b.n	800e776 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f7f2 fb79 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2200      	movs	r2, #0
 800e77a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e77c:	8afb      	ldrh	r3, [r7, #22]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d005      	beq.n	800e78e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	f003 0320 	and.w	r3, r3, #32
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f47f af4e 	bne.w	800e62a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e794:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e796:	89fb      	ldrh	r3, [r7, #14]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d021      	beq.n	800e7e0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e7a2:	89fa      	ldrh	r2, [r7, #14]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d21b      	bcs.n	800e7e0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	689a      	ldr	r2, [r3, #8]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e7b6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	4a0c      	ldr	r2, [pc, #48]	; (800e7ec <UART_RxISR_16BIT_FIFOEN+0x200>)
 800e7bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f042 0220 	orr.w	r2, r2, #32
 800e7cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e7ce:	e007      	b.n	800e7e0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	699a      	ldr	r2, [r3, #24]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f042 0208 	orr.w	r2, r2, #8
 800e7de:	619a      	str	r2, [r3, #24]
}
 800e7e0:	bf00      	nop
 800e7e2:	3728      	adds	r7, #40	; 0x28
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	effffffe 	.word	0xeffffffe
 800e7ec:	0800e311 	.word	0x0800e311

0800e7f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e80c:	bf00      	nop
 800e80e:	370c      	adds	r7, #12
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e820:	bf00      	nop
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d101      	bne.n	800e842 <HAL_UARTEx_DisableFifoMode+0x16>
 800e83e:	2302      	movs	r3, #2
 800e840:	e027      	b.n	800e892 <HAL_UARTEx_DisableFifoMode+0x66>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2201      	movs	r2, #1
 800e846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2224      	movs	r2, #36	; 0x24
 800e84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f022 0201 	bic.w	r2, r2, #1
 800e868:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e870:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2200      	movs	r2, #0
 800e876:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68fa      	ldr	r2, [r7, #12]
 800e87e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2220      	movs	r2, #32
 800e884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e890:	2300      	movs	r3, #0
}
 800e892:	4618      	mov	r0, r3
 800e894:	3714      	adds	r7, #20
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr

0800e89e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b084      	sub	sp, #16
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d101      	bne.n	800e8b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	e02d      	b.n	800e912 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2224      	movs	r2, #36	; 0x24
 800e8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f022 0201 	bic.w	r2, r2, #1
 800e8dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	683a      	ldr	r2, [r7, #0]
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 f850 	bl	800e998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2220      	movs	r2, #32
 800e904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b084      	sub	sp, #16
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d101      	bne.n	800e932 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e92e:	2302      	movs	r3, #2
 800e930:	e02d      	b.n	800e98e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2201      	movs	r2, #1
 800e936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2224      	movs	r2, #36	; 0x24
 800e93e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	681a      	ldr	r2, [r3, #0]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f022 0201 	bic.w	r2, r2, #1
 800e958:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	430a      	orrs	r2, r1
 800e96c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f812 	bl	800e998 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2220      	movs	r2, #32
 800e980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d108      	bne.n	800e9ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e9b8:	e031      	b.n	800ea1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e9ba:	2310      	movs	r3, #16
 800e9bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e9be:	2310      	movs	r3, #16
 800e9c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	0e5b      	lsrs	r3, r3, #25
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	f003 0307 	and.w	r3, r3, #7
 800e9d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	0f5b      	lsrs	r3, r3, #29
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	f003 0307 	and.w	r3, r3, #7
 800e9e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9e2:	7bbb      	ldrb	r3, [r7, #14]
 800e9e4:	7b3a      	ldrb	r2, [r7, #12]
 800e9e6:	4911      	ldr	r1, [pc, #68]	; (800ea2c <UARTEx_SetNbDataToProcess+0x94>)
 800e9e8:	5c8a      	ldrb	r2, [r1, r2]
 800e9ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e9ee:	7b3a      	ldrb	r2, [r7, #12]
 800e9f0:	490f      	ldr	r1, [pc, #60]	; (800ea30 <UARTEx_SetNbDataToProcess+0x98>)
 800e9f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e9f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea00:	7bfb      	ldrb	r3, [r7, #15]
 800ea02:	7b7a      	ldrb	r2, [r7, #13]
 800ea04:	4909      	ldr	r1, [pc, #36]	; (800ea2c <UARTEx_SetNbDataToProcess+0x94>)
 800ea06:	5c8a      	ldrb	r2, [r1, r2]
 800ea08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea0c:	7b7a      	ldrb	r2, [r7, #13]
 800ea0e:	4908      	ldr	r1, [pc, #32]	; (800ea30 <UARTEx_SetNbDataToProcess+0x98>)
 800ea10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea12:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea16:	b29a      	uxth	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea1e:	bf00      	nop
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	08015e80 	.word	0x08015e80
 800ea30:	08015e88 	.word	0x08015e88

0800ea34 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ea34:	b084      	sub	sp, #16
 800ea36:	b480      	push	{r7}
 800ea38:	b085      	sub	sp, #20
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	f107 001c 	add.w	r0, r7, #28
 800ea42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ea4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ea4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ea4e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800ea52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ea54:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800ea56:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800ea5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	685a      	ldr	r2, [r3, #4]
 800ea66:	4b07      	ldr	r3, [pc, #28]	; (800ea84 <SDMMC_Init+0x50>)
 800ea68:	4013      	ands	r3, r2
 800ea6a:	68fa      	ldr	r2, [r7, #12]
 800ea6c:	431a      	orrs	r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ea72:	2300      	movs	r3, #0
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3714      	adds	r7, #20
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	b004      	add	sp, #16
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	ffc02c00 	.word	0xffc02c00

0800ea88 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b083      	sub	sp, #12
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	6078      	str	r0, [r7, #4]
 800eaaa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eab6:	2300      	movs	r3, #0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f043 0203 	orr.w	r2, r3, #3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800eae6:	b480      	push	{r7}
 800eae8:	b083      	sub	sp, #12
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f003 0303 	and.w	r3, r3, #3
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
	...

0800eb04 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800eb22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800eb28:	431a      	orrs	r2, r3
                       Command->CPSM);
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800eb2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	4313      	orrs	r3, r2
 800eb34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	4b06      	ldr	r3, [pc, #24]	; (800eb54 <SDMMC_SendCommand+0x50>)
 800eb3c:	4013      	ands	r3, r2
 800eb3e:	68fa      	ldr	r2, [r7, #12]
 800eb40:	431a      	orrs	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	fffee0c0 	.word	0xfffee0c0

0800eb58 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	b2db      	uxtb	r3, r3
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b085      	sub	sp, #20
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3314      	adds	r3, #20
 800eb80:	461a      	mov	r2, r3
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	4413      	add	r3, r2
 800eb86:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3714      	adds	r7, #20
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ebbe:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ebc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ebca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	431a      	orrs	r2, r3
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ebe2:	2300      	movs	r3, #0

}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b088      	sub	sp, #32
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ebfe:	2310      	movs	r3, #16
 800ec00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec12:	f107 0308 	add.w	r3, r7, #8
 800ec16:	4619      	mov	r1, r3
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff ff73 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ec1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec22:	2110      	movs	r1, #16
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f000 fa5f 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ec2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec2c:	69fb      	ldr	r3, [r7, #28]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3720      	adds	r7, #32
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b088      	sub	sp, #32
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ec44:	2311      	movs	r3, #17
 800ec46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec58:	f107 0308 	add.w	r3, r7, #8
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7ff ff50 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ec64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec68:	2111      	movs	r1, #17
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 fa3c 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ec70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec72:	69fb      	ldr	r3, [r7, #28]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3720      	adds	r7, #32
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b088      	sub	sp, #32
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ec8a:	2312      	movs	r3, #18
 800ec8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec94:	2300      	movs	r3, #0
 800ec96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec9e:	f107 0308 	add.w	r3, r7, #8
 800eca2:	4619      	mov	r1, r3
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f7ff ff2d 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ecaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecae:	2112      	movs	r1, #18
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fa19 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ecb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecb8:	69fb      	ldr	r3, [r7, #28]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3720      	adds	r7, #32
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b088      	sub	sp, #32
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ecd0:	2318      	movs	r3, #24
 800ecd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ecde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ece2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ece4:	f107 0308 	add.w	r3, r7, #8
 800ece8:	4619      	mov	r1, r3
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f7ff ff0a 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ecf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecf4:	2118      	movs	r1, #24
 800ecf6:	6878      	ldr	r0, [r7, #4]
 800ecf8:	f000 f9f6 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ecfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecfe:	69fb      	ldr	r3, [r7, #28]
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3720      	adds	r7, #32
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b088      	sub	sp, #32
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ed16:	2319      	movs	r3, #25
 800ed18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed20:	2300      	movs	r3, #0
 800ed22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed2a:	f107 0308 	add.w	r3, r7, #8
 800ed2e:	4619      	mov	r1, r3
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7ff fee7 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ed36:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed3a:	2119      	movs	r1, #25
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 f9d3 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ed42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed44:	69fb      	ldr	r3, [r7, #28]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3720      	adds	r7, #32
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ed5c:	230c      	movs	r3, #12
 800ed5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed60:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed66:	2300      	movs	r3, #0
 800ed68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed6e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed88:	f107 0308 	add.w	r3, r7, #8
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f7ff feb8 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ed94:	4a0b      	ldr	r2, [pc, #44]	; (800edc4 <SDMMC_CmdStopTransfer+0x74>)
 800ed96:	210c      	movs	r1, #12
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 f9a5 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ed9e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800edb2:	d101      	bne.n	800edb8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800edb4:	2300      	movs	r3, #0
 800edb6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800edb8:	69fb      	ldr	r3, [r7, #28]
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3720      	adds	r7, #32
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	05f5e100 	.word	0x05f5e100

0800edc8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800edd6:	2307      	movs	r3, #7
 800edd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ede0:	2300      	movs	r3, #0
 800ede2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ede4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ede8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edea:	f107 0308 	add.w	r3, r7, #8
 800edee:	4619      	mov	r1, r3
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7ff fe87 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800edf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800edfa:	2107      	movs	r1, #7
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f973 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ee02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee04:	69fb      	ldr	r3, [r7, #28]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3720      	adds	r7, #32
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ee0e:	b580      	push	{r7, lr}
 800ee10:	b088      	sub	sp, #32
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ee16:	2300      	movs	r3, #0
 800ee18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee22:	2300      	movs	r3, #0
 800ee24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee2c:	f107 0308 	add.w	r3, r7, #8
 800ee30:	4619      	mov	r1, r3
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff fe66 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 fb97 	bl	800f56c <SDMMC_GetCmdError>
 800ee3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee40:	69fb      	ldr	r3, [r7, #28]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3720      	adds	r7, #32
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b088      	sub	sp, #32
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ee52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ee56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ee58:	2308      	movs	r3, #8
 800ee5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee62:	2300      	movs	r3, #0
 800ee64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee6c:	f107 0308 	add.w	r3, r7, #8
 800ee70:	4619      	mov	r1, r3
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7ff fe46 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f000 fb29 	bl	800f4d0 <SDMMC_GetCmdResp7>
 800ee7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee80:	69fb      	ldr	r3, [r7, #28]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3720      	adds	r7, #32
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b088      	sub	sp, #32
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	6078      	str	r0, [r7, #4]
 800ee92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ee98:	2337      	movs	r3, #55	; 0x37
 800ee9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eea2:	2300      	movs	r3, #0
 800eea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeac:	f107 0308 	add.w	r3, r7, #8
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7ff fe26 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800eeb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eebc:	2137      	movs	r1, #55	; 0x37
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f912 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800eec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eec6:	69fb      	ldr	r3, [r7, #28]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3720      	adds	r7, #32
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b088      	sub	sp, #32
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800eede:	2329      	movs	r3, #41	; 0x29
 800eee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eee8:	2300      	movs	r3, #0
 800eeea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eef0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eef2:	f107 0308 	add.w	r3, r7, #8
 800eef6:	4619      	mov	r1, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f7ff fe03 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 fa2e 	bl	800f360 <SDMMC_GetCmdResp3>
 800ef04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef06:	69fb      	ldr	r3, [r7, #28]
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3720      	adds	r7, #32
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ef1e:	2306      	movs	r3, #6
 800ef20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef32:	f107 0308 	add.w	r3, r7, #8
 800ef36:	4619      	mov	r1, r3
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f7ff fde3 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ef3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef42:	2106      	movs	r1, #6
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 f8cf 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ef4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef4c:	69fb      	ldr	r3, [r7, #28]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3720      	adds	r7, #32
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b088      	sub	sp, #32
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ef62:	2333      	movs	r3, #51	; 0x33
 800ef64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef76:	f107 0308 	add.w	r3, r7, #8
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f7ff fdc1 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ef82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef86:	2133      	movs	r1, #51	; 0x33
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f8ad 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800ef8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef90:	69fb      	ldr	r3, [r7, #28]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3720      	adds	r7, #32
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b088      	sub	sp, #32
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800efa2:	2300      	movs	r3, #0
 800efa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800efa6:	2302      	movs	r3, #2
 800efa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800efaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800efae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efb0:	2300      	movs	r3, #0
 800efb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efba:	f107 0308 	add.w	r3, r7, #8
 800efbe:	4619      	mov	r1, r3
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff fd9f 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f980 	bl	800f2cc <SDMMC_GetCmdResp2>
 800efcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efce:	69fb      	ldr	r3, [r7, #28]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3720      	adds	r7, #32
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800efe6:	2309      	movs	r3, #9
 800efe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800efea:	f44f 7340 	mov.w	r3, #768	; 0x300
 800efee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eff0:	2300      	movs	r3, #0
 800eff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800effa:	f107 0308 	add.w	r3, r7, #8
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff fd7f 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 f960 	bl	800f2cc <SDMMC_GetCmdResp2>
 800f00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f00e:	69fb      	ldr	r3, [r7, #28]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3720      	adds	r7, #32
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b088      	sub	sp, #32
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f022:	2300      	movs	r3, #0
 800f024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f026:	2303      	movs	r3, #3
 800f028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f02a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f02e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f030:	2300      	movs	r3, #0
 800f032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f03a:	f107 0308 	add.w	r3, r7, #8
 800f03e:	4619      	mov	r1, r3
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7ff fd5f 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	2103      	movs	r1, #3
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 f9c8 	bl	800f3e0 <SDMMC_GetCmdResp6>
 800f050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f052:	69fb      	ldr	r3, [r7, #28]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3720      	adds	r7, #32
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f06a:	230d      	movs	r3, #13
 800f06c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f06e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f072:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f074:	2300      	movs	r3, #0
 800f076:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f07c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f07e:	f107 0308 	add.w	r3, r7, #8
 800f082:	4619      	mov	r1, r3
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff fd3d 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f08a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f08e:	210d      	movs	r1, #13
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 f829 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800f096:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f098:	69fb      	ldr	r3, [r7, #28]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3720      	adds	r7, #32
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b088      	sub	sp, #32
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f0ae:	230d      	movs	r3, #13
 800f0b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f0c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0c2:	f107 0308 	add.w	r3, r7, #8
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7ff fd1b 	bl	800eb04 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f0ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0d2:	210d      	movs	r1, #13
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f807 	bl	800f0e8 <SDMMC_GetCmdResp1>
 800f0da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0dc:	69fb      	ldr	r3, [r7, #28]
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3720      	adds	r7, #32
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
	...

0800f0e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b088      	sub	sp, #32
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f0f6:	4b70      	ldr	r3, [pc, #448]	; (800f2b8 <SDMMC_GetCmdResp1+0x1d0>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a70      	ldr	r2, [pc, #448]	; (800f2bc <SDMMC_GetCmdResp1+0x1d4>)
 800f0fc:	fba2 2303 	umull	r2, r3, r2, r3
 800f100:	0a5a      	lsrs	r2, r3, #9
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	fb02 f303 	mul.w	r3, r2, r3
 800f108:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	1e5a      	subs	r2, r3, #1
 800f10e:	61fa      	str	r2, [r7, #28]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d102      	bne.n	800f11a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f118:	e0c9      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f11e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f120:	69ba      	ldr	r2, [r7, #24]
 800f122:	4b67      	ldr	r3, [pc, #412]	; (800f2c0 <SDMMC_GetCmdResp1+0x1d8>)
 800f124:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f126:	2b00      	cmp	r3, #0
 800f128:	d0ef      	beq.n	800f10a <SDMMC_GetCmdResp1+0x22>
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1ea      	bne.n	800f10a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f138:	f003 0304 	and.w	r3, r3, #4
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d004      	beq.n	800f14a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2204      	movs	r2, #4
 800f144:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f146:	2304      	movs	r3, #4
 800f148:	e0b1      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f14e:	f003 0301 	and.w	r3, r3, #1
 800f152:	2b00      	cmp	r3, #0
 800f154:	d004      	beq.n	800f160 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2201      	movs	r2, #1
 800f15a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f15c:	2301      	movs	r3, #1
 800f15e:	e0a6      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	4a58      	ldr	r2, [pc, #352]	; (800f2c4 <SDMMC_GetCmdResp1+0x1dc>)
 800f164:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f7ff fcf6 	bl	800eb58 <SDMMC_GetCommandResponse>
 800f16c:	4603      	mov	r3, r0
 800f16e:	461a      	mov	r2, r3
 800f170:	7afb      	ldrb	r3, [r7, #11]
 800f172:	4293      	cmp	r3, r2
 800f174:	d001      	beq.n	800f17a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f176:	2301      	movs	r3, #1
 800f178:	e099      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f17a:	2100      	movs	r1, #0
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f7ff fcf8 	bl	800eb72 <SDMMC_GetResponse>
 800f182:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	4b50      	ldr	r3, [pc, #320]	; (800f2c8 <SDMMC_GetCmdResp1+0x1e0>)
 800f188:	4013      	ands	r3, r2
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d101      	bne.n	800f192 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f18e:	2300      	movs	r3, #0
 800f190:	e08d      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	2b00      	cmp	r3, #0
 800f196:	da02      	bge.n	800f19e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f19c:	e087      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d001      	beq.n	800f1ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f1a8:	2340      	movs	r3, #64	; 0x40
 800f1aa:	e080      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d001      	beq.n	800f1ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f1b6:	2380      	movs	r3, #128	; 0x80
 800f1b8:	e079      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f1c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1c8:	e071      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d002      	beq.n	800f1da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f1d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1d8:	e069      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d002      	beq.n	800f1ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f1e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1e8:	e061      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d002      	beq.n	800f1fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f1f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f1f8:	e059      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f200:	2b00      	cmp	r3, #0
 800f202:	d002      	beq.n	800f20a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f208:	e051      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f210:	2b00      	cmp	r3, #0
 800f212:	d002      	beq.n	800f21a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f218:	e049      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f220:	2b00      	cmp	r3, #0
 800f222:	d002      	beq.n	800f22a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f228:	e041      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f238:	e039      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f240:	2b00      	cmp	r3, #0
 800f242:	d002      	beq.n	800f24a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f244:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f248:	e031      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f250:	2b00      	cmp	r3, #0
 800f252:	d002      	beq.n	800f25a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f258:	e029      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f260:	2b00      	cmp	r3, #0
 800f262:	d002      	beq.n	800f26a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f264:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f268:	e021      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f274:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f278:	e019      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f284:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f288:	e011      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f290:	2b00      	cmp	r3, #0
 800f292:	d002      	beq.n	800f29a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f298:	e009      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f003 0308 	and.w	r3, r3, #8
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d002      	beq.n	800f2aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f2a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f2a8:	e001      	b.n	800f2ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f2aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3720      	adds	r7, #32
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	24000000 	.word	0x24000000
 800f2bc:	10624dd3 	.word	0x10624dd3
 800f2c0:	00200045 	.word	0x00200045
 800f2c4:	002000c5 	.word	0x002000c5
 800f2c8:	fdffe008 	.word	0xfdffe008

0800f2cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f2d4:	4b1f      	ldr	r3, [pc, #124]	; (800f354 <SDMMC_GetCmdResp2+0x88>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4a1f      	ldr	r2, [pc, #124]	; (800f358 <SDMMC_GetCmdResp2+0x8c>)
 800f2da:	fba2 2303 	umull	r2, r3, r2, r3
 800f2de:	0a5b      	lsrs	r3, r3, #9
 800f2e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2e4:	fb02 f303 	mul.w	r3, r2, r3
 800f2e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	1e5a      	subs	r2, r3, #1
 800f2ee:	60fa      	str	r2, [r7, #12]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d102      	bne.n	800f2fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2f8:	e026      	b.n	800f348 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2fe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f306:	2b00      	cmp	r3, #0
 800f308:	d0ef      	beq.n	800f2ea <SDMMC_GetCmdResp2+0x1e>
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f310:	2b00      	cmp	r3, #0
 800f312:	d1ea      	bne.n	800f2ea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f318:	f003 0304 	and.w	r3, r3, #4
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d004      	beq.n	800f32a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2204      	movs	r2, #4
 800f324:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f326:	2304      	movs	r3, #4
 800f328:	e00e      	b.n	800f348 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32e:	f003 0301 	and.w	r3, r3, #1
 800f332:	2b00      	cmp	r3, #0
 800f334:	d004      	beq.n	800f340 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f33c:	2301      	movs	r3, #1
 800f33e:	e003      	b.n	800f348 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a06      	ldr	r2, [pc, #24]	; (800f35c <SDMMC_GetCmdResp2+0x90>)
 800f344:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3714      	adds	r7, #20
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	24000000 	.word	0x24000000
 800f358:	10624dd3 	.word	0x10624dd3
 800f35c:	002000c5 	.word	0x002000c5

0800f360 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f368:	4b1a      	ldr	r3, [pc, #104]	; (800f3d4 <SDMMC_GetCmdResp3+0x74>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	4a1a      	ldr	r2, [pc, #104]	; (800f3d8 <SDMMC_GetCmdResp3+0x78>)
 800f36e:	fba2 2303 	umull	r2, r3, r2, r3
 800f372:	0a5b      	lsrs	r3, r3, #9
 800f374:	f241 3288 	movw	r2, #5000	; 0x1388
 800f378:	fb02 f303 	mul.w	r3, r2, r3
 800f37c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	1e5a      	subs	r2, r3, #1
 800f382:	60fa      	str	r2, [r7, #12]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d102      	bne.n	800f38e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f38c:	e01b      	b.n	800f3c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f392:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d0ef      	beq.n	800f37e <SDMMC_GetCmdResp3+0x1e>
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1ea      	bne.n	800f37e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ac:	f003 0304 	and.w	r3, r3, #4
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d004      	beq.n	800f3be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2204      	movs	r2, #4
 800f3b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3ba:	2304      	movs	r3, #4
 800f3bc:	e003      	b.n	800f3c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a06      	ldr	r2, [pc, #24]	; (800f3dc <SDMMC_GetCmdResp3+0x7c>)
 800f3c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f3c4:	2300      	movs	r3, #0
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3714      	adds	r7, #20
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	24000000 	.word	0x24000000
 800f3d8:	10624dd3 	.word	0x10624dd3
 800f3dc:	002000c5 	.word	0x002000c5

0800f3e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	607a      	str	r2, [r7, #4]
 800f3ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f3ee:	4b35      	ldr	r3, [pc, #212]	; (800f4c4 <SDMMC_GetCmdResp6+0xe4>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4a35      	ldr	r2, [pc, #212]	; (800f4c8 <SDMMC_GetCmdResp6+0xe8>)
 800f3f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f3f8:	0a5b      	lsrs	r3, r3, #9
 800f3fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3fe:	fb02 f303 	mul.w	r3, r2, r3
 800f402:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	1e5a      	subs	r2, r3, #1
 800f408:	61fa      	str	r2, [r7, #28]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d102      	bne.n	800f414 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f40e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f412:	e052      	b.n	800f4ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f418:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f420:	2b00      	cmp	r3, #0
 800f422:	d0ef      	beq.n	800f404 <SDMMC_GetCmdResp6+0x24>
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1ea      	bne.n	800f404 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f432:	f003 0304 	and.w	r3, r3, #4
 800f436:	2b00      	cmp	r3, #0
 800f438:	d004      	beq.n	800f444 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2204      	movs	r2, #4
 800f43e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f440:	2304      	movs	r3, #4
 800f442:	e03a      	b.n	800f4ba <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f448:	f003 0301 	and.w	r3, r3, #1
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d004      	beq.n	800f45a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2201      	movs	r2, #1
 800f454:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f456:	2301      	movs	r3, #1
 800f458:	e02f      	b.n	800f4ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f7ff fb7c 	bl	800eb58 <SDMMC_GetCommandResponse>
 800f460:	4603      	mov	r3, r0
 800f462:	461a      	mov	r2, r3
 800f464:	7afb      	ldrb	r3, [r7, #11]
 800f466:	4293      	cmp	r3, r2
 800f468:	d001      	beq.n	800f46e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f46a:	2301      	movs	r3, #1
 800f46c:	e025      	b.n	800f4ba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	4a16      	ldr	r2, [pc, #88]	; (800f4cc <SDMMC_GetCmdResp6+0xec>)
 800f472:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f474:	2100      	movs	r1, #0
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f7ff fb7b 	bl	800eb72 <SDMMC_GetResponse>
 800f47c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f484:	2b00      	cmp	r3, #0
 800f486:	d106      	bne.n	800f496 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	0c1b      	lsrs	r3, r3, #16
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f492:	2300      	movs	r3, #0
 800f494:	e011      	b.n	800f4ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d002      	beq.n	800f4a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f4a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4a4:	e009      	b.n	800f4ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d002      	beq.n	800f4b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f4b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4b4:	e001      	b.n	800f4ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f4b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3720      	adds	r7, #32
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	24000000 	.word	0x24000000
 800f4c8:	10624dd3 	.word	0x10624dd3
 800f4cc:	002000c5 	.word	0x002000c5

0800f4d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f4d8:	4b22      	ldr	r3, [pc, #136]	; (800f564 <SDMMC_GetCmdResp7+0x94>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a22      	ldr	r2, [pc, #136]	; (800f568 <SDMMC_GetCmdResp7+0x98>)
 800f4de:	fba2 2303 	umull	r2, r3, r2, r3
 800f4e2:	0a5b      	lsrs	r3, r3, #9
 800f4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4e8:	fb02 f303 	mul.w	r3, r2, r3
 800f4ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	1e5a      	subs	r2, r3, #1
 800f4f2:	60fa      	str	r2, [r7, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d102      	bne.n	800f4fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4fc:	e02c      	b.n	800f558 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f502:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d0ef      	beq.n	800f4ee <SDMMC_GetCmdResp7+0x1e>
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f514:	2b00      	cmp	r3, #0
 800f516:	d1ea      	bne.n	800f4ee <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51c:	f003 0304 	and.w	r3, r3, #4
 800f520:	2b00      	cmp	r3, #0
 800f522:	d004      	beq.n	800f52e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2204      	movs	r2, #4
 800f528:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f52a:	2304      	movs	r3, #4
 800f52c:	e014      	b.n	800f558 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f532:	f003 0301 	and.w	r3, r3, #1
 800f536:	2b00      	cmp	r3, #0
 800f538:	d004      	beq.n	800f544 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2201      	movs	r2, #1
 800f53e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f540:	2301      	movs	r3, #1
 800f542:	e009      	b.n	800f558 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d002      	beq.n	800f556 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2240      	movs	r2, #64	; 0x40
 800f554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f556:	2300      	movs	r3, #0

}
 800f558:	4618      	mov	r0, r3
 800f55a:	3714      	adds	r7, #20
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr
 800f564:	24000000 	.word	0x24000000
 800f568:	10624dd3 	.word	0x10624dd3

0800f56c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b085      	sub	sp, #20
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f574:	4b11      	ldr	r3, [pc, #68]	; (800f5bc <SDMMC_GetCmdError+0x50>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a11      	ldr	r2, [pc, #68]	; (800f5c0 <SDMMC_GetCmdError+0x54>)
 800f57a:	fba2 2303 	umull	r2, r3, r2, r3
 800f57e:	0a5b      	lsrs	r3, r3, #9
 800f580:	f241 3288 	movw	r2, #5000	; 0x1388
 800f584:	fb02 f303 	mul.w	r3, r2, r3
 800f588:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	1e5a      	subs	r2, r3, #1
 800f58e:	60fa      	str	r2, [r7, #12]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f594:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f598:	e009      	b.n	800f5ae <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0f1      	beq.n	800f58a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	4a06      	ldr	r2, [pc, #24]	; (800f5c4 <SDMMC_GetCmdError+0x58>)
 800f5aa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3714      	adds	r7, #20
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	24000000 	.word	0x24000000
 800f5c0:	10624dd3 	.word	0x10624dd3
 800f5c4:	002000c5 	.word	0x002000c5

0800f5c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f5c8:	b084      	sub	sp, #16
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b084      	sub	sp, #16
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
 800f5d2:	f107 001c 	add.w	r0, r7, #28
 800f5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d120      	bne.n	800f622 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68da      	ldr	r2, [r3, #12]
 800f5f0:	4b2a      	ldr	r3, [pc, #168]	; (800f69c <USB_CoreInit+0xd4>)
 800f5f2:	4013      	ands	r3, r2
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f606:	2b01      	cmp	r3, #1
 800f608:	d105      	bne.n	800f616 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f001 fb14 	bl	8010c44 <USB_CoreReset>
 800f61c:	4603      	mov	r3, r0
 800f61e:	73fb      	strb	r3, [r7, #15]
 800f620:	e01a      	b.n	800f658 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f001 fb08 	bl	8010c44 <USB_CoreReset>
 800f634:	4603      	mov	r3, r0
 800f636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d106      	bne.n	800f64c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	639a      	str	r2, [r3, #56]	; 0x38
 800f64a:	e005      	b.n	800f658 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d116      	bne.n	800f68c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f662:	b29a      	uxth	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f66c:	4b0c      	ldr	r3, [pc, #48]	; (800f6a0 <USB_CoreInit+0xd8>)
 800f66e:	4313      	orrs	r3, r2
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	689b      	ldr	r3, [r3, #8]
 800f678:	f043 0206 	orr.w	r2, r3, #6
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	f043 0220 	orr.w	r2, r3, #32
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f698:	b004      	add	sp, #16
 800f69a:	4770      	bx	lr
 800f69c:	ffbdffbf 	.word	0xffbdffbf
 800f6a0:	03ee0000 	.word	0x03ee0000

0800f6a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	60f8      	str	r0, [r7, #12]
 800f6ac:	60b9      	str	r1, [r7, #8]
 800f6ae:	4613      	mov	r3, r2
 800f6b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d165      	bne.n	800f784 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	4a41      	ldr	r2, [pc, #260]	; (800f7c0 <USB_SetTurnaroundTime+0x11c>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d906      	bls.n	800f6ce <USB_SetTurnaroundTime+0x2a>
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	4a40      	ldr	r2, [pc, #256]	; (800f7c4 <USB_SetTurnaroundTime+0x120>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d202      	bcs.n	800f6ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f6c8:	230f      	movs	r3, #15
 800f6ca:	617b      	str	r3, [r7, #20]
 800f6cc:	e062      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	4a3c      	ldr	r2, [pc, #240]	; (800f7c4 <USB_SetTurnaroundTime+0x120>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d306      	bcc.n	800f6e4 <USB_SetTurnaroundTime+0x40>
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	4a3b      	ldr	r2, [pc, #236]	; (800f7c8 <USB_SetTurnaroundTime+0x124>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d202      	bcs.n	800f6e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f6de:	230e      	movs	r3, #14
 800f6e0:	617b      	str	r3, [r7, #20]
 800f6e2:	e057      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	4a38      	ldr	r2, [pc, #224]	; (800f7c8 <USB_SetTurnaroundTime+0x124>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d306      	bcc.n	800f6fa <USB_SetTurnaroundTime+0x56>
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	4a37      	ldr	r2, [pc, #220]	; (800f7cc <USB_SetTurnaroundTime+0x128>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d202      	bcs.n	800f6fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f6f4:	230d      	movs	r3, #13
 800f6f6:	617b      	str	r3, [r7, #20]
 800f6f8:	e04c      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	4a33      	ldr	r2, [pc, #204]	; (800f7cc <USB_SetTurnaroundTime+0x128>)
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d306      	bcc.n	800f710 <USB_SetTurnaroundTime+0x6c>
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	4a32      	ldr	r2, [pc, #200]	; (800f7d0 <USB_SetTurnaroundTime+0x12c>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d802      	bhi.n	800f710 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f70a:	230c      	movs	r3, #12
 800f70c:	617b      	str	r3, [r7, #20]
 800f70e:	e041      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	4a2f      	ldr	r2, [pc, #188]	; (800f7d0 <USB_SetTurnaroundTime+0x12c>)
 800f714:	4293      	cmp	r3, r2
 800f716:	d906      	bls.n	800f726 <USB_SetTurnaroundTime+0x82>
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	4a2e      	ldr	r2, [pc, #184]	; (800f7d4 <USB_SetTurnaroundTime+0x130>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d802      	bhi.n	800f726 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f720:	230b      	movs	r3, #11
 800f722:	617b      	str	r3, [r7, #20]
 800f724:	e036      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	4a2a      	ldr	r2, [pc, #168]	; (800f7d4 <USB_SetTurnaroundTime+0x130>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d906      	bls.n	800f73c <USB_SetTurnaroundTime+0x98>
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	4a29      	ldr	r2, [pc, #164]	; (800f7d8 <USB_SetTurnaroundTime+0x134>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d802      	bhi.n	800f73c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f736:	230a      	movs	r3, #10
 800f738:	617b      	str	r3, [r7, #20]
 800f73a:	e02b      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4a26      	ldr	r2, [pc, #152]	; (800f7d8 <USB_SetTurnaroundTime+0x134>)
 800f740:	4293      	cmp	r3, r2
 800f742:	d906      	bls.n	800f752 <USB_SetTurnaroundTime+0xae>
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	4a25      	ldr	r2, [pc, #148]	; (800f7dc <USB_SetTurnaroundTime+0x138>)
 800f748:	4293      	cmp	r3, r2
 800f74a:	d202      	bcs.n	800f752 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f74c:	2309      	movs	r3, #9
 800f74e:	617b      	str	r3, [r7, #20]
 800f750:	e020      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	4a21      	ldr	r2, [pc, #132]	; (800f7dc <USB_SetTurnaroundTime+0x138>)
 800f756:	4293      	cmp	r3, r2
 800f758:	d306      	bcc.n	800f768 <USB_SetTurnaroundTime+0xc4>
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	4a20      	ldr	r2, [pc, #128]	; (800f7e0 <USB_SetTurnaroundTime+0x13c>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d802      	bhi.n	800f768 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f762:	2308      	movs	r3, #8
 800f764:	617b      	str	r3, [r7, #20]
 800f766:	e015      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	4a1d      	ldr	r2, [pc, #116]	; (800f7e0 <USB_SetTurnaroundTime+0x13c>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d906      	bls.n	800f77e <USB_SetTurnaroundTime+0xda>
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	4a1c      	ldr	r2, [pc, #112]	; (800f7e4 <USB_SetTurnaroundTime+0x140>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d202      	bcs.n	800f77e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f778:	2307      	movs	r3, #7
 800f77a:	617b      	str	r3, [r7, #20]
 800f77c:	e00a      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f77e:	2306      	movs	r3, #6
 800f780:	617b      	str	r3, [r7, #20]
 800f782:	e007      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f784:	79fb      	ldrb	r3, [r7, #7]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d102      	bne.n	800f790 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f78a:	2309      	movs	r3, #9
 800f78c:	617b      	str	r3, [r7, #20]
 800f78e:	e001      	b.n	800f794 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f790:	2309      	movs	r3, #9
 800f792:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	68da      	ldr	r2, [r3, #12]
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	029b      	lsls	r3, r3, #10
 800f7a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f7ac:	431a      	orrs	r2, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f7b2:	2300      	movs	r3, #0
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	371c      	adds	r7, #28
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7be:	4770      	bx	lr
 800f7c0:	00d8acbf 	.word	0x00d8acbf
 800f7c4:	00e4e1c0 	.word	0x00e4e1c0
 800f7c8:	00f42400 	.word	0x00f42400
 800f7cc:	01067380 	.word	0x01067380
 800f7d0:	011a499f 	.word	0x011a499f
 800f7d4:	01312cff 	.word	0x01312cff
 800f7d8:	014ca43f 	.word	0x014ca43f
 800f7dc:	016e3600 	.word	0x016e3600
 800f7e0:	01a6ab1f 	.word	0x01a6ab1f
 800f7e4:	01e84800 	.word	0x01e84800

0800f7e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	f043 0201 	orr.w	r2, r3, #1
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	370c      	adds	r7, #12
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr

0800f80a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f80a:	b480      	push	{r7}
 800f80c:	b083      	sub	sp, #12
 800f80e:	af00      	add	r7, sp, #0
 800f810:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	f023 0201 	bic.w	r2, r3, #1
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f81e:	2300      	movs	r3, #0
}
 800f820:	4618      	mov	r0, r3
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	460b      	mov	r3, r1
 800f836:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f844:	78fb      	ldrb	r3, [r7, #3]
 800f846:	2b01      	cmp	r3, #1
 800f848:	d106      	bne.n	800f858 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	60da      	str	r2, [r3, #12]
 800f856:	e00b      	b.n	800f870 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800f858:	78fb      	ldrb	r3, [r7, #3]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d106      	bne.n	800f86c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	60da      	str	r2, [r3, #12]
 800f86a:	e001      	b.n	800f870 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800f86c:	2301      	movs	r3, #1
 800f86e:	e003      	b.n	800f878 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800f870:	2032      	movs	r0, #50	; 0x32
 800f872:	f7f2 fad5 	bl	8001e20 <HAL_Delay>

  return HAL_OK;
 800f876:	2300      	movs	r3, #0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f880:	b084      	sub	sp, #16
 800f882:	b580      	push	{r7, lr}
 800f884:	b086      	sub	sp, #24
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f88e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f89a:	2300      	movs	r3, #0
 800f89c:	613b      	str	r3, [r7, #16]
 800f89e:	e009      	b.n	800f8b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	3340      	adds	r3, #64	; 0x40
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	4413      	add	r3, r2
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	613b      	str	r3, [r7, #16]
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	2b0e      	cmp	r3, #14
 800f8b8:	d9f2      	bls.n	800f8a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f8ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d11c      	bne.n	800f8fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8ce:	f043 0302 	orr.w	r3, r3, #2
 800f8d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	601a      	str	r2, [r3, #0]
 800f8f8:	e005      	b.n	800f906 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f90c:	461a      	mov	r2, r3
 800f90e:	2300      	movs	r3, #0
 800f910:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f918:	4619      	mov	r1, r3
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f920:	461a      	mov	r2, r3
 800f922:	680b      	ldr	r3, [r1, #0]
 800f924:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d10c      	bne.n	800f946 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d104      	bne.n	800f93c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f932:	2100      	movs	r1, #0
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 f949 	bl	800fbcc <USB_SetDevSpeed>
 800f93a:	e008      	b.n	800f94e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f93c:	2101      	movs	r1, #1
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f944 	bl	800fbcc <USB_SetDevSpeed>
 800f944:	e003      	b.n	800f94e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f946:	2103      	movs	r1, #3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 f93f 	bl	800fbcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f94e:	2110      	movs	r1, #16
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 f8f3 	bl	800fb3c <USB_FlushTxFifo>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d001      	beq.n	800f960 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f95c:	2301      	movs	r3, #1
 800f95e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f911 	bl	800fb88 <USB_FlushRxFifo>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d001      	beq.n	800f970 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f96c:	2301      	movs	r3, #1
 800f96e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f976:	461a      	mov	r2, r3
 800f978:	2300      	movs	r3, #0
 800f97a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f982:	461a      	mov	r2, r3
 800f984:	2300      	movs	r3, #0
 800f986:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f98e:	461a      	mov	r2, r3
 800f990:	2300      	movs	r3, #0
 800f992:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f994:	2300      	movs	r3, #0
 800f996:	613b      	str	r3, [r7, #16]
 800f998:	e043      	b.n	800fa22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	015a      	lsls	r2, r3, #5
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9b0:	d118      	bne.n	800f9e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d10a      	bne.n	800f9ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	015a      	lsls	r2, r3, #5
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	4413      	add	r3, r2
 800f9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f9ca:	6013      	str	r3, [r2, #0]
 800f9cc:	e013      	b.n	800f9f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	015a      	lsls	r2, r3, #5
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9da:	461a      	mov	r2, r3
 800f9dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f9e0:	6013      	str	r3, [r2, #0]
 800f9e2:	e008      	b.n	800f9f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	015a      	lsls	r2, r3, #5
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	015a      	lsls	r2, r3, #5
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa02:	461a      	mov	r2, r3
 800fa04:	2300      	movs	r3, #0
 800fa06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	015a      	lsls	r2, r3, #5
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	4413      	add	r3, r2
 800fa10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa14:	461a      	mov	r2, r3
 800fa16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fa1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	3301      	adds	r3, #1
 800fa20:	613b      	str	r3, [r7, #16]
 800fa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa24:	693a      	ldr	r2, [r7, #16]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	d3b7      	bcc.n	800f99a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	613b      	str	r3, [r7, #16]
 800fa2e:	e043      	b.n	800fab8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	015a      	lsls	r2, r3, #5
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	4413      	add	r3, r2
 800fa38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa46:	d118      	bne.n	800fa7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10a      	bne.n	800fa64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	015a      	lsls	r2, r3, #5
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	4413      	add	r3, r2
 800fa56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa60:	6013      	str	r3, [r2, #0]
 800fa62:	e013      	b.n	800fa8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	015a      	lsls	r2, r3, #5
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa70:	461a      	mov	r2, r3
 800fa72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	e008      	b.n	800fa8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa86:	461a      	mov	r2, r3
 800fa88:	2300      	movs	r3, #0
 800fa8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa98:	461a      	mov	r2, r3
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	015a      	lsls	r2, r3, #5
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	4413      	add	r3, r2
 800faa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faaa:	461a      	mov	r2, r3
 800faac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fab0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	3301      	adds	r3, #1
 800fab6:	613b      	str	r3, [r7, #16]
 800fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d3b7      	bcc.n	800fa30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fac6:	691b      	ldr	r3, [r3, #16]
 800fac8:	68fa      	ldr	r2, [r7, #12]
 800faca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800face:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fad2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fae0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d105      	bne.n	800faf4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	699b      	ldr	r3, [r3, #24]
 800faec:	f043 0210 	orr.w	r2, r3, #16
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	699a      	ldr	r2, [r3, #24]
 800faf8:	4b0e      	ldr	r3, [pc, #56]	; (800fb34 <USB_DevInit+0x2b4>)
 800fafa:	4313      	orrs	r3, r2
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d005      	beq.n	800fb12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	699b      	ldr	r3, [r3, #24]
 800fb0a:	f043 0208 	orr.w	r2, r3, #8
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fb12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d105      	bne.n	800fb24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	699a      	ldr	r2, [r3, #24]
 800fb1c:	4b06      	ldr	r3, [pc, #24]	; (800fb38 <USB_DevInit+0x2b8>)
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3718      	adds	r7, #24
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb30:	b004      	add	sp, #16
 800fb32:	4770      	bx	lr
 800fb34:	803c3800 	.word	0x803c3800
 800fb38:	40000004 	.word	0x40000004

0800fb3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fb46:	2300      	movs	r3, #0
 800fb48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	019b      	lsls	r3, r3, #6
 800fb4e:	f043 0220 	orr.w	r2, r3, #32
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	60fb      	str	r3, [r7, #12]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	4a09      	ldr	r2, [pc, #36]	; (800fb84 <USB_FlushTxFifo+0x48>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d901      	bls.n	800fb68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fb64:	2303      	movs	r3, #3
 800fb66:	e006      	b.n	800fb76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	691b      	ldr	r3, [r3, #16]
 800fb6c:	f003 0320 	and.w	r3, r3, #32
 800fb70:	2b20      	cmp	r3, #32
 800fb72:	d0f0      	beq.n	800fb56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3714      	adds	r7, #20
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	00030d40 	.word	0x00030d40

0800fb88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fb90:	2300      	movs	r3, #0
 800fb92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2210      	movs	r2, #16
 800fb98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	4a09      	ldr	r2, [pc, #36]	; (800fbc8 <USB_FlushRxFifo+0x40>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d901      	bls.n	800fbac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fba8:	2303      	movs	r3, #3
 800fbaa:	e006      	b.n	800fbba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	f003 0310 	and.w	r3, r3, #16
 800fbb4:	2b10      	cmp	r3, #16
 800fbb6:	d0f0      	beq.n	800fb9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fbb8:	2300      	movs	r3, #0
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop
 800fbc8:	00030d40 	.word	0x00030d40

0800fbcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	78fb      	ldrb	r3, [r7, #3]
 800fbe6:	68f9      	ldr	r1, [r7, #12]
 800fbe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbec:	4313      	orrs	r3, r2
 800fbee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fbf0:	2300      	movs	r3, #0
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3714      	adds	r7, #20
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr

0800fbfe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b087      	sub	sp, #28
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	f003 0306 	and.w	r3, r3, #6
 800fc16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d102      	bne.n	800fc24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	75fb      	strb	r3, [r7, #23]
 800fc22:	e00a      	b.n	800fc3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d002      	beq.n	800fc30 <USB_GetDevSpeed+0x32>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2b06      	cmp	r3, #6
 800fc2e:	d102      	bne.n	800fc36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fc30:	2302      	movs	r3, #2
 800fc32:	75fb      	strb	r3, [r7, #23]
 800fc34:	e001      	b.n	800fc3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fc36:	230f      	movs	r3, #15
 800fc38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fc3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	371c      	adds	r7, #28
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	785b      	ldrb	r3, [r3, #1]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d139      	bne.n	800fcd8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc6a:	69da      	ldr	r2, [r3, #28]
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	f003 030f 	and.w	r3, r3, #15
 800fc74:	2101      	movs	r1, #1
 800fc76:	fa01 f303 	lsl.w	r3, r1, r3
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	68f9      	ldr	r1, [r7, #12]
 800fc7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc82:	4313      	orrs	r3, r2
 800fc84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	015a      	lsls	r2, r3, #5
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d153      	bne.n	800fd44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	4413      	add	r3, r2
 800fca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	689b      	ldr	r3, [r3, #8]
 800fcae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	78db      	ldrb	r3, [r3, #3]
 800fcb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	059b      	lsls	r3, r3, #22
 800fcbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fcc0:	431a      	orrs	r2, r3
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	0159      	lsls	r1, r3, #5
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	440b      	add	r3, r1
 800fcca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcce:	4619      	mov	r1, r3
 800fcd0:	4b20      	ldr	r3, [pc, #128]	; (800fd54 <USB_ActivateEndpoint+0x10c>)
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	600b      	str	r3, [r1, #0]
 800fcd6:	e035      	b.n	800fd44 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcde:	69da      	ldr	r2, [r3, #28]
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	f003 030f 	and.w	r3, r3, #15
 800fce8:	2101      	movs	r1, #1
 800fcea:	fa01 f303 	lsl.w	r3, r1, r3
 800fcee:	041b      	lsls	r3, r3, #16
 800fcf0:	68f9      	ldr	r1, [r7, #12]
 800fcf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	015a      	lsls	r2, r3, #5
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	4413      	add	r3, r2
 800fd02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d119      	bne.n	800fd44 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	015a      	lsls	r2, r3, #5
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	4413      	add	r3, r2
 800fd18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	78db      	ldrb	r3, [r3, #3]
 800fd2a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fd2c:	430b      	orrs	r3, r1
 800fd2e:	431a      	orrs	r2, r3
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	0159      	lsls	r1, r3, #5
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	440b      	add	r3, r1
 800fd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	4b05      	ldr	r3, [pc, #20]	; (800fd54 <USB_ActivateEndpoint+0x10c>)
 800fd40:	4313      	orrs	r3, r2
 800fd42:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3714      	adds	r7, #20
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	10008000 	.word	0x10008000

0800fd58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	785b      	ldrb	r3, [r3, #1]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d161      	bne.n	800fe38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	015a      	lsls	r2, r3, #5
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	4413      	add	r3, r2
 800fd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd8a:	d11f      	bne.n	800fdcc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	015a      	lsls	r2, r3, #5
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	4413      	add	r3, r2
 800fd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	0151      	lsls	r1, r2, #5
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	440a      	add	r2, r1
 800fda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fda6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fdaa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	015a      	lsls	r2, r3, #5
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	0151      	lsls	r1, r2, #5
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	440a      	add	r2, r1
 800fdc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fdca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	f003 030f 	and.w	r3, r3, #15
 800fddc:	2101      	movs	r1, #1
 800fdde:	fa01 f303 	lsl.w	r3, r1, r3
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	43db      	mvns	r3, r3
 800fde6:	68f9      	ldr	r1, [r7, #12]
 800fde8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdec:	4013      	ands	r3, r2
 800fdee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdf6:	69da      	ldr	r2, [r3, #28]
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	f003 030f 	and.w	r3, r3, #15
 800fe00:	2101      	movs	r1, #1
 800fe02:	fa01 f303 	lsl.w	r3, r1, r3
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	43db      	mvns	r3, r3
 800fe0a:	68f9      	ldr	r1, [r7, #12]
 800fe0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe10:	4013      	ands	r3, r2
 800fe12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	015a      	lsls	r2, r3, #5
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	0159      	lsls	r1, r3, #5
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	440b      	add	r3, r1
 800fe2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe2e:	4619      	mov	r1, r3
 800fe30:	4b35      	ldr	r3, [pc, #212]	; (800ff08 <USB_DeactivateEndpoint+0x1b0>)
 800fe32:	4013      	ands	r3, r2
 800fe34:	600b      	str	r3, [r1, #0]
 800fe36:	e060      	b.n	800fefa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	015a      	lsls	r2, r3, #5
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	4413      	add	r3, r2
 800fe40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe4e:	d11f      	bne.n	800fe90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	015a      	lsls	r2, r3, #5
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	4413      	add	r3, r2
 800fe58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	0151      	lsls	r1, r2, #5
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	440a      	add	r2, r1
 800fe66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	015a      	lsls	r2, r3, #5
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	4413      	add	r3, r2
 800fe78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	0151      	lsls	r1, r2, #5
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	440a      	add	r2, r1
 800fe86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	f003 030f 	and.w	r3, r3, #15
 800fea0:	2101      	movs	r1, #1
 800fea2:	fa01 f303 	lsl.w	r3, r1, r3
 800fea6:	041b      	lsls	r3, r3, #16
 800fea8:	43db      	mvns	r3, r3
 800feaa:	68f9      	ldr	r1, [r7, #12]
 800feac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800feb0:	4013      	ands	r3, r2
 800feb2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feba:	69da      	ldr	r2, [r3, #28]
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	f003 030f 	and.w	r3, r3, #15
 800fec4:	2101      	movs	r1, #1
 800fec6:	fa01 f303 	lsl.w	r3, r1, r3
 800feca:	041b      	lsls	r3, r3, #16
 800fecc:	43db      	mvns	r3, r3
 800fece:	68f9      	ldr	r1, [r7, #12]
 800fed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fed4:	4013      	ands	r3, r2
 800fed6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	015a      	lsls	r2, r3, #5
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4413      	add	r3, r2
 800fee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee4:	681a      	ldr	r2, [r3, #0]
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	0159      	lsls	r1, r3, #5
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	440b      	add	r3, r1
 800feee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef2:	4619      	mov	r1, r3
 800fef4:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <USB_DeactivateEndpoint+0x1b4>)
 800fef6:	4013      	ands	r3, r2
 800fef8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr
 800ff08:	ec337800 	.word	0xec337800
 800ff0c:	eff37800 	.word	0xeff37800

0800ff10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b08a      	sub	sp, #40	; 0x28
 800ff14:	af02      	add	r7, sp, #8
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	785b      	ldrb	r3, [r3, #1]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	f040 8163 	bne.w	80101f8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	695b      	ldr	r3, [r3, #20]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d132      	bne.n	800ffa0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	015a      	lsls	r2, r3, #5
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	4413      	add	r3, r2
 800ff42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff46:	691a      	ldr	r2, [r3, #16]
 800ff48:	69bb      	ldr	r3, [r7, #24]
 800ff4a:	0159      	lsls	r1, r3, #5
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	440b      	add	r3, r1
 800ff50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff54:	4619      	mov	r1, r3
 800ff56:	4ba5      	ldr	r3, [pc, #660]	; (80101ec <USB_EPStartXfer+0x2dc>)
 800ff58:	4013      	ands	r3, r2
 800ff5a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	015a      	lsls	r2, r3, #5
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	4413      	add	r3, r2
 800ff64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff68:	691b      	ldr	r3, [r3, #16]
 800ff6a:	69ba      	ldr	r2, [r7, #24]
 800ff6c:	0151      	lsls	r1, r2, #5
 800ff6e:	69fa      	ldr	r2, [r7, #28]
 800ff70:	440a      	add	r2, r1
 800ff72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	015a      	lsls	r2, r3, #5
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	4413      	add	r3, r2
 800ff84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff88:	691a      	ldr	r2, [r3, #16]
 800ff8a:	69bb      	ldr	r3, [r7, #24]
 800ff8c:	0159      	lsls	r1, r3, #5
 800ff8e:	69fb      	ldr	r3, [r7, #28]
 800ff90:	440b      	add	r3, r1
 800ff92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff96:	4619      	mov	r1, r3
 800ff98:	4b95      	ldr	r3, [pc, #596]	; (80101f0 <USB_EPStartXfer+0x2e0>)
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	610b      	str	r3, [r1, #16]
 800ff9e:	e074      	b.n	801008a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	015a      	lsls	r2, r3, #5
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffac:	691a      	ldr	r2, [r3, #16]
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	0159      	lsls	r1, r3, #5
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	440b      	add	r3, r1
 800ffb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4b8c      	ldr	r3, [pc, #560]	; (80101f0 <USB_EPStartXfer+0x2e0>)
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	015a      	lsls	r2, r3, #5
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffce:	691a      	ldr	r2, [r3, #16]
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	0159      	lsls	r1, r3, #5
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	440b      	add	r3, r1
 800ffd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4b83      	ldr	r3, [pc, #524]	; (80101ec <USB_EPStartXfer+0x2dc>)
 800ffe0:	4013      	ands	r3, r2
 800ffe2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	015a      	lsls	r2, r3, #5
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	4413      	add	r3, r2
 800ffec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff0:	691a      	ldr	r2, [r3, #16]
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	6959      	ldr	r1, [r3, #20]
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	440b      	add	r3, r1
 800fffc:	1e59      	subs	r1, r3, #1
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	fbb1 f3f3 	udiv	r3, r1, r3
 8010006:	04d9      	lsls	r1, r3, #19
 8010008:	4b7a      	ldr	r3, [pc, #488]	; (80101f4 <USB_EPStartXfer+0x2e4>)
 801000a:	400b      	ands	r3, r1
 801000c:	69b9      	ldr	r1, [r7, #24]
 801000e:	0148      	lsls	r0, r1, #5
 8010010:	69f9      	ldr	r1, [r7, #28]
 8010012:	4401      	add	r1, r0
 8010014:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010018:	4313      	orrs	r3, r2
 801001a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010028:	691a      	ldr	r2, [r3, #16]
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	695b      	ldr	r3, [r3, #20]
 801002e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010032:	69b9      	ldr	r1, [r7, #24]
 8010034:	0148      	lsls	r0, r1, #5
 8010036:	69f9      	ldr	r1, [r7, #28]
 8010038:	4401      	add	r1, r0
 801003a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801003e:	4313      	orrs	r3, r2
 8010040:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	78db      	ldrb	r3, [r3, #3]
 8010046:	2b01      	cmp	r3, #1
 8010048:	d11f      	bne.n	801008a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	015a      	lsls	r2, r3, #5
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	4413      	add	r3, r2
 8010052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	69ba      	ldr	r2, [r7, #24]
 801005a:	0151      	lsls	r1, r2, #5
 801005c:	69fa      	ldr	r2, [r7, #28]
 801005e:	440a      	add	r2, r1
 8010060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010064:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010068:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	015a      	lsls	r2, r3, #5
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	4413      	add	r3, r2
 8010072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	69ba      	ldr	r2, [r7, #24]
 801007a:	0151      	lsls	r1, r2, #5
 801007c:	69fa      	ldr	r2, [r7, #28]
 801007e:	440a      	add	r2, r1
 8010080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010084:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010088:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801008a:	79fb      	ldrb	r3, [r7, #7]
 801008c:	2b01      	cmp	r3, #1
 801008e:	d14b      	bne.n	8010128 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d009      	beq.n	80100ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	015a      	lsls	r2, r3, #5
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	4413      	add	r3, r2
 80100a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a4:	461a      	mov	r2, r3
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	78db      	ldrb	r3, [r3, #3]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d128      	bne.n	8010106 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ba:	689b      	ldr	r3, [r3, #8]
 80100bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d110      	bne.n	80100e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	015a      	lsls	r2, r3, #5
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	4413      	add	r3, r2
 80100cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	69ba      	ldr	r2, [r7, #24]
 80100d4:	0151      	lsls	r1, r2, #5
 80100d6:	69fa      	ldr	r2, [r7, #28]
 80100d8:	440a      	add	r2, r1
 80100da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80100e2:	6013      	str	r3, [r2, #0]
 80100e4:	e00f      	b.n	8010106 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80100e6:	69bb      	ldr	r3, [r7, #24]
 80100e8:	015a      	lsls	r2, r3, #5
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	4413      	add	r3, r2
 80100ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	69ba      	ldr	r2, [r7, #24]
 80100f6:	0151      	lsls	r1, r2, #5
 80100f8:	69fa      	ldr	r2, [r7, #28]
 80100fa:	440a      	add	r2, r1
 80100fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010104:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	015a      	lsls	r2, r3, #5
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	4413      	add	r3, r2
 801010e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	69ba      	ldr	r2, [r7, #24]
 8010116:	0151      	lsls	r1, r2, #5
 8010118:	69fa      	ldr	r2, [r7, #28]
 801011a:	440a      	add	r2, r1
 801011c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010120:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	e133      	b.n	8010390 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	015a      	lsls	r2, r3, #5
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	4413      	add	r3, r2
 8010130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	69ba      	ldr	r2, [r7, #24]
 8010138:	0151      	lsls	r1, r2, #5
 801013a:	69fa      	ldr	r2, [r7, #28]
 801013c:	440a      	add	r2, r1
 801013e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010142:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010146:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	78db      	ldrb	r3, [r3, #3]
 801014c:	2b01      	cmp	r3, #1
 801014e:	d015      	beq.n	801017c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	695b      	ldr	r3, [r3, #20]
 8010154:	2b00      	cmp	r3, #0
 8010156:	f000 811b 	beq.w	8010390 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	f003 030f 	and.w	r3, r3, #15
 801016a:	2101      	movs	r1, #1
 801016c:	fa01 f303 	lsl.w	r3, r1, r3
 8010170:	69f9      	ldr	r1, [r7, #28]
 8010172:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010176:	4313      	orrs	r3, r2
 8010178:	634b      	str	r3, [r1, #52]	; 0x34
 801017a:	e109      	b.n	8010390 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010188:	2b00      	cmp	r3, #0
 801018a:	d110      	bne.n	80101ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	015a      	lsls	r2, r3, #5
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	4413      	add	r3, r2
 8010194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	69ba      	ldr	r2, [r7, #24]
 801019c:	0151      	lsls	r1, r2, #5
 801019e:	69fa      	ldr	r2, [r7, #28]
 80101a0:	440a      	add	r2, r1
 80101a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80101aa:	6013      	str	r3, [r2, #0]
 80101ac:	e00f      	b.n	80101ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	015a      	lsls	r2, r3, #5
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	4413      	add	r3, r2
 80101b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	69ba      	ldr	r2, [r7, #24]
 80101be:	0151      	lsls	r1, r2, #5
 80101c0:	69fa      	ldr	r2, [r7, #28]
 80101c2:	440a      	add	r2, r1
 80101c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	68d9      	ldr	r1, [r3, #12]
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	781a      	ldrb	r2, [r3, #0]
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	695b      	ldr	r3, [r3, #20]
 80101da:	b298      	uxth	r0, r3
 80101dc:	79fb      	ldrb	r3, [r7, #7]
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	4603      	mov	r3, r0
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f000 fa38 	bl	8010658 <USB_WritePacket>
 80101e8:	e0d2      	b.n	8010390 <USB_EPStartXfer+0x480>
 80101ea:	bf00      	nop
 80101ec:	e007ffff 	.word	0xe007ffff
 80101f0:	fff80000 	.word	0xfff80000
 80101f4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	015a      	lsls	r2, r3, #5
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	4413      	add	r3, r2
 8010200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010204:	691a      	ldr	r2, [r3, #16]
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	0159      	lsls	r1, r3, #5
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	440b      	add	r3, r1
 801020e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010212:	4619      	mov	r1, r3
 8010214:	4b61      	ldr	r3, [pc, #388]	; (801039c <USB_EPStartXfer+0x48c>)
 8010216:	4013      	ands	r3, r2
 8010218:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801021a:	69bb      	ldr	r3, [r7, #24]
 801021c:	015a      	lsls	r2, r3, #5
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	4413      	add	r3, r2
 8010222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010226:	691a      	ldr	r2, [r3, #16]
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	0159      	lsls	r1, r3, #5
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	440b      	add	r3, r1
 8010230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010234:	4619      	mov	r1, r3
 8010236:	4b5a      	ldr	r3, [pc, #360]	; (80103a0 <USB_EPStartXfer+0x490>)
 8010238:	4013      	ands	r3, r2
 801023a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	695b      	ldr	r3, [r3, #20]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d123      	bne.n	801028c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	015a      	lsls	r2, r3, #5
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	4413      	add	r3, r2
 801024c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010250:	691a      	ldr	r2, [r3, #16]
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801025a:	69b9      	ldr	r1, [r7, #24]
 801025c:	0148      	lsls	r0, r1, #5
 801025e:	69f9      	ldr	r1, [r7, #28]
 8010260:	4401      	add	r1, r0
 8010262:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010266:	4313      	orrs	r3, r2
 8010268:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	015a      	lsls	r2, r3, #5
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	4413      	add	r3, r2
 8010272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010276:	691b      	ldr	r3, [r3, #16]
 8010278:	69ba      	ldr	r2, [r7, #24]
 801027a:	0151      	lsls	r1, r2, #5
 801027c:	69fa      	ldr	r2, [r7, #28]
 801027e:	440a      	add	r2, r1
 8010280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010288:	6113      	str	r3, [r2, #16]
 801028a:	e033      	b.n	80102f4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	695a      	ldr	r2, [r3, #20]
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	4413      	add	r3, r2
 8010296:	1e5a      	subs	r2, r3, #1
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	fbb2 f3f3 	udiv	r3, r2, r3
 80102a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	015a      	lsls	r2, r3, #5
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	4413      	add	r3, r2
 80102aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ae:	691a      	ldr	r2, [r3, #16]
 80102b0:	8afb      	ldrh	r3, [r7, #22]
 80102b2:	04d9      	lsls	r1, r3, #19
 80102b4:	4b3b      	ldr	r3, [pc, #236]	; (80103a4 <USB_EPStartXfer+0x494>)
 80102b6:	400b      	ands	r3, r1
 80102b8:	69b9      	ldr	r1, [r7, #24]
 80102ba:	0148      	lsls	r0, r1, #5
 80102bc:	69f9      	ldr	r1, [r7, #28]
 80102be:	4401      	add	r1, r0
 80102c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80102c4:	4313      	orrs	r3, r2
 80102c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	015a      	lsls	r2, r3, #5
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	4413      	add	r3, r2
 80102d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d4:	691a      	ldr	r2, [r3, #16]
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	8af9      	ldrh	r1, [r7, #22]
 80102dc:	fb01 f303 	mul.w	r3, r1, r3
 80102e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102e4:	69b9      	ldr	r1, [r7, #24]
 80102e6:	0148      	lsls	r0, r1, #5
 80102e8:	69f9      	ldr	r1, [r7, #28]
 80102ea:	4401      	add	r1, r0
 80102ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80102f0:	4313      	orrs	r3, r2
 80102f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80102f4:	79fb      	ldrb	r3, [r7, #7]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d10d      	bne.n	8010316 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	68db      	ldr	r3, [r3, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d009      	beq.n	8010316 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	68d9      	ldr	r1, [r3, #12]
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	015a      	lsls	r2, r3, #5
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	4413      	add	r3, r2
 801030e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010312:	460a      	mov	r2, r1
 8010314:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	78db      	ldrb	r3, [r3, #3]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d128      	bne.n	8010370 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801032a:	2b00      	cmp	r3, #0
 801032c:	d110      	bne.n	8010350 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	015a      	lsls	r2, r3, #5
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	4413      	add	r3, r2
 8010336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	69ba      	ldr	r2, [r7, #24]
 801033e:	0151      	lsls	r1, r2, #5
 8010340:	69fa      	ldr	r2, [r7, #28]
 8010342:	440a      	add	r2, r1
 8010344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801034c:	6013      	str	r3, [r2, #0]
 801034e:	e00f      	b.n	8010370 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	015a      	lsls	r2, r3, #5
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	4413      	add	r3, r2
 8010358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	69ba      	ldr	r2, [r7, #24]
 8010360:	0151      	lsls	r1, r2, #5
 8010362:	69fa      	ldr	r2, [r7, #28]
 8010364:	440a      	add	r2, r1
 8010366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801036a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801036e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	015a      	lsls	r2, r3, #5
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	4413      	add	r3, r2
 8010378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	69ba      	ldr	r2, [r7, #24]
 8010380:	0151      	lsls	r1, r2, #5
 8010382:	69fa      	ldr	r2, [r7, #28]
 8010384:	440a      	add	r2, r1
 8010386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801038a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801038e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010390:	2300      	movs	r3, #0
}
 8010392:	4618      	mov	r0, r3
 8010394:	3720      	adds	r7, #32
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	fff80000 	.word	0xfff80000
 80103a0:	e007ffff 	.word	0xe007ffff
 80103a4:	1ff80000 	.word	0x1ff80000

080103a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b087      	sub	sp, #28
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	4613      	mov	r3, r2
 80103b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80103c0:	68bb      	ldr	r3, [r7, #8]
 80103c2:	785b      	ldrb	r3, [r3, #1]
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	f040 80cd 	bne.w	8010564 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	695b      	ldr	r3, [r3, #20]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d132      	bne.n	8010438 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	015a      	lsls	r2, r3, #5
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	4413      	add	r3, r2
 80103da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103de:	691a      	ldr	r2, [r3, #16]
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	0159      	lsls	r1, r3, #5
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	440b      	add	r3, r1
 80103e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ec:	4619      	mov	r1, r3
 80103ee:	4b98      	ldr	r3, [pc, #608]	; (8010650 <USB_EP0StartXfer+0x2a8>)
 80103f0:	4013      	ands	r3, r2
 80103f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80103f4:	693b      	ldr	r3, [r7, #16]
 80103f6:	015a      	lsls	r2, r3, #5
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	4413      	add	r3, r2
 80103fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010400:	691b      	ldr	r3, [r3, #16]
 8010402:	693a      	ldr	r2, [r7, #16]
 8010404:	0151      	lsls	r1, r2, #5
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	440a      	add	r2, r1
 801040a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801040e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010412:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	015a      	lsls	r2, r3, #5
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	4413      	add	r3, r2
 801041c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010420:	691a      	ldr	r2, [r3, #16]
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	0159      	lsls	r1, r3, #5
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	440b      	add	r3, r1
 801042a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801042e:	4619      	mov	r1, r3
 8010430:	4b88      	ldr	r3, [pc, #544]	; (8010654 <USB_EP0StartXfer+0x2ac>)
 8010432:	4013      	ands	r3, r2
 8010434:	610b      	str	r3, [r1, #16]
 8010436:	e04e      	b.n	80104d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	015a      	lsls	r2, r3, #5
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	4413      	add	r3, r2
 8010440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010444:	691a      	ldr	r2, [r3, #16]
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	0159      	lsls	r1, r3, #5
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	440b      	add	r3, r1
 801044e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010452:	4619      	mov	r1, r3
 8010454:	4b7f      	ldr	r3, [pc, #508]	; (8010654 <USB_EP0StartXfer+0x2ac>)
 8010456:	4013      	ands	r3, r2
 8010458:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	015a      	lsls	r2, r3, #5
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	4413      	add	r3, r2
 8010462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010466:	691a      	ldr	r2, [r3, #16]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	0159      	lsls	r1, r3, #5
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	440b      	add	r3, r1
 8010470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010474:	4619      	mov	r1, r3
 8010476:	4b76      	ldr	r3, [pc, #472]	; (8010650 <USB_EP0StartXfer+0x2a8>)
 8010478:	4013      	ands	r3, r2
 801047a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	695a      	ldr	r2, [r3, #20]
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	429a      	cmp	r2, r3
 8010486:	d903      	bls.n	8010490 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	689a      	ldr	r2, [r3, #8]
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	015a      	lsls	r2, r3, #5
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	4413      	add	r3, r2
 8010498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801049c:	691b      	ldr	r3, [r3, #16]
 801049e:	693a      	ldr	r2, [r7, #16]
 80104a0:	0151      	lsls	r1, r2, #5
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	440a      	add	r2, r1
 80104a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80104ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	015a      	lsls	r2, r3, #5
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	4413      	add	r3, r2
 80104b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104bc:	691a      	ldr	r2, [r3, #16]
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	695b      	ldr	r3, [r3, #20]
 80104c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104c6:	6939      	ldr	r1, [r7, #16]
 80104c8:	0148      	lsls	r0, r1, #5
 80104ca:	6979      	ldr	r1, [r7, #20]
 80104cc:	4401      	add	r1, r0
 80104ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80104d2:	4313      	orrs	r3, r2
 80104d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d11e      	bne.n	801051a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	691b      	ldr	r3, [r3, #16]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d009      	beq.n	80104f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	015a      	lsls	r2, r3, #5
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	4413      	add	r3, r2
 80104ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104f0:	461a      	mov	r2, r3
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	015a      	lsls	r2, r3, #5
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	4413      	add	r3, r2
 8010500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	693a      	ldr	r2, [r7, #16]
 8010508:	0151      	lsls	r1, r2, #5
 801050a:	697a      	ldr	r2, [r7, #20]
 801050c:	440a      	add	r2, r1
 801050e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010516:	6013      	str	r3, [r2, #0]
 8010518:	e092      	b.n	8010640 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	015a      	lsls	r2, r3, #5
 801051e:	697b      	ldr	r3, [r7, #20]
 8010520:	4413      	add	r3, r2
 8010522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	693a      	ldr	r2, [r7, #16]
 801052a:	0151      	lsls	r1, r2, #5
 801052c:	697a      	ldr	r2, [r7, #20]
 801052e:	440a      	add	r2, r1
 8010530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010534:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010538:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	695b      	ldr	r3, [r3, #20]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d07e      	beq.n	8010640 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	f003 030f 	and.w	r3, r3, #15
 8010552:	2101      	movs	r1, #1
 8010554:	fa01 f303 	lsl.w	r3, r1, r3
 8010558:	6979      	ldr	r1, [r7, #20]
 801055a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801055e:	4313      	orrs	r3, r2
 8010560:	634b      	str	r3, [r1, #52]	; 0x34
 8010562:	e06d      	b.n	8010640 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	015a      	lsls	r2, r3, #5
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	4413      	add	r3, r2
 801056c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010570:	691a      	ldr	r2, [r3, #16]
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	0159      	lsls	r1, r3, #5
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	440b      	add	r3, r1
 801057a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801057e:	4619      	mov	r1, r3
 8010580:	4b34      	ldr	r3, [pc, #208]	; (8010654 <USB_EP0StartXfer+0x2ac>)
 8010582:	4013      	ands	r3, r2
 8010584:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	015a      	lsls	r2, r3, #5
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	4413      	add	r3, r2
 801058e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010592:	691a      	ldr	r2, [r3, #16]
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	0159      	lsls	r1, r3, #5
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	440b      	add	r3, r1
 801059c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105a0:	4619      	mov	r1, r3
 80105a2:	4b2b      	ldr	r3, [pc, #172]	; (8010650 <USB_EP0StartXfer+0x2a8>)
 80105a4:	4013      	ands	r3, r2
 80105a6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	695b      	ldr	r3, [r3, #20]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d003      	beq.n	80105b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	689a      	ldr	r2, [r3, #8]
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	015a      	lsls	r2, r3, #5
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	4413      	add	r3, r2
 80105c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105c4:	691b      	ldr	r3, [r3, #16]
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	0151      	lsls	r1, r2, #5
 80105ca:	697a      	ldr	r2, [r7, #20]
 80105cc:	440a      	add	r2, r1
 80105ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80105d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	015a      	lsls	r2, r3, #5
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	4413      	add	r3, r2
 80105e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e4:	691a      	ldr	r2, [r3, #16]
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105ee:	6939      	ldr	r1, [r7, #16]
 80105f0:	0148      	lsls	r0, r1, #5
 80105f2:	6979      	ldr	r1, [r7, #20]
 80105f4:	4401      	add	r1, r0
 80105f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105fa:	4313      	orrs	r3, r2
 80105fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80105fe:	79fb      	ldrb	r3, [r7, #7]
 8010600:	2b01      	cmp	r3, #1
 8010602:	d10d      	bne.n	8010620 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d009      	beq.n	8010620 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	68d9      	ldr	r1, [r3, #12]
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	015a      	lsls	r2, r3, #5
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	4413      	add	r3, r2
 8010618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801061c:	460a      	mov	r2, r1
 801061e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	015a      	lsls	r2, r3, #5
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	4413      	add	r3, r2
 8010628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	693a      	ldr	r2, [r7, #16]
 8010630:	0151      	lsls	r1, r2, #5
 8010632:	697a      	ldr	r2, [r7, #20]
 8010634:	440a      	add	r2, r1
 8010636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801063a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801063e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	371c      	adds	r7, #28
 8010646:	46bd      	mov	sp, r7
 8010648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064c:	4770      	bx	lr
 801064e:	bf00      	nop
 8010650:	e007ffff 	.word	0xe007ffff
 8010654:	fff80000 	.word	0xfff80000

08010658 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010658:	b480      	push	{r7}
 801065a:	b089      	sub	sp, #36	; 0x24
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	4611      	mov	r1, r2
 8010664:	461a      	mov	r2, r3
 8010666:	460b      	mov	r3, r1
 8010668:	71fb      	strb	r3, [r7, #7]
 801066a:	4613      	mov	r3, r2
 801066c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010676:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801067a:	2b00      	cmp	r3, #0
 801067c:	d123      	bne.n	80106c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801067e:	88bb      	ldrh	r3, [r7, #4]
 8010680:	3303      	adds	r3, #3
 8010682:	089b      	lsrs	r3, r3, #2
 8010684:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010686:	2300      	movs	r3, #0
 8010688:	61bb      	str	r3, [r7, #24]
 801068a:	e018      	b.n	80106be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801068c:	79fb      	ldrb	r3, [r7, #7]
 801068e:	031a      	lsls	r2, r3, #12
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	4413      	add	r3, r2
 8010694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010698:	461a      	mov	r2, r3
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	3301      	adds	r3, #1
 80106a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	3301      	adds	r3, #1
 80106aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	3301      	adds	r3, #1
 80106b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	3301      	adds	r3, #1
 80106b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	3301      	adds	r3, #1
 80106bc:	61bb      	str	r3, [r7, #24]
 80106be:	69ba      	ldr	r2, [r7, #24]
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d3e2      	bcc.n	801068c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	3724      	adds	r7, #36	; 0x24
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b08b      	sub	sp, #44	; 0x2c
 80106d8:	af00      	add	r7, sp, #0
 80106da:	60f8      	str	r0, [r7, #12]
 80106dc:	60b9      	str	r1, [r7, #8]
 80106de:	4613      	mov	r3, r2
 80106e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80106ea:	88fb      	ldrh	r3, [r7, #6]
 80106ec:	089b      	lsrs	r3, r3, #2
 80106ee:	b29b      	uxth	r3, r3
 80106f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80106f2:	88fb      	ldrh	r3, [r7, #6]
 80106f4:	f003 0303 	and.w	r3, r3, #3
 80106f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80106fa:	2300      	movs	r3, #0
 80106fc:	623b      	str	r3, [r7, #32]
 80106fe:	e014      	b.n	801072a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010700:	69bb      	ldr	r3, [r7, #24]
 8010702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070a:	601a      	str	r2, [r3, #0]
    pDest++;
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	3301      	adds	r3, #1
 8010710:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010714:	3301      	adds	r3, #1
 8010716:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	3301      	adds	r3, #1
 801071c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010720:	3301      	adds	r3, #1
 8010722:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010724:	6a3b      	ldr	r3, [r7, #32]
 8010726:	3301      	adds	r3, #1
 8010728:	623b      	str	r3, [r7, #32]
 801072a:	6a3a      	ldr	r2, [r7, #32]
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	429a      	cmp	r2, r3
 8010730:	d3e6      	bcc.n	8010700 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010732:	8bfb      	ldrh	r3, [r7, #30]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d01e      	beq.n	8010776 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010738:	2300      	movs	r3, #0
 801073a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801073c:	69bb      	ldr	r3, [r7, #24]
 801073e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010742:	461a      	mov	r2, r3
 8010744:	f107 0310 	add.w	r3, r7, #16
 8010748:	6812      	ldr	r2, [r2, #0]
 801074a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	6a3b      	ldr	r3, [r7, #32]
 8010750:	b2db      	uxtb	r3, r3
 8010752:	00db      	lsls	r3, r3, #3
 8010754:	fa22 f303 	lsr.w	r3, r2, r3
 8010758:	b2da      	uxtb	r2, r3
 801075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075c:	701a      	strb	r2, [r3, #0]
      i++;
 801075e:	6a3b      	ldr	r3, [r7, #32]
 8010760:	3301      	adds	r3, #1
 8010762:	623b      	str	r3, [r7, #32]
      pDest++;
 8010764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010766:	3301      	adds	r3, #1
 8010768:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801076a:	8bfb      	ldrh	r3, [r7, #30]
 801076c:	3b01      	subs	r3, #1
 801076e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010770:	8bfb      	ldrh	r3, [r7, #30]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1ea      	bne.n	801074c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010778:	4618      	mov	r0, r3
 801077a:	372c      	adds	r7, #44	; 0x2c
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	785b      	ldrb	r3, [r3, #1]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d12c      	bne.n	80107fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	015a      	lsls	r2, r3, #5
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	4413      	add	r3, r2
 80107a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	db12      	blt.n	80107d8 <USB_EPSetStall+0x54>
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00f      	beq.n	80107d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	015a      	lsls	r2, r3, #5
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	4413      	add	r3, r2
 80107c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	68ba      	ldr	r2, [r7, #8]
 80107c8:	0151      	lsls	r1, r2, #5
 80107ca:	68fa      	ldr	r2, [r7, #12]
 80107cc:	440a      	add	r2, r1
 80107ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80107d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	015a      	lsls	r2, r3, #5
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	4413      	add	r3, r2
 80107e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	68ba      	ldr	r2, [r7, #8]
 80107e8:	0151      	lsls	r1, r2, #5
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	440a      	add	r2, r1
 80107ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107f6:	6013      	str	r3, [r2, #0]
 80107f8:	e02b      	b.n	8010852 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	015a      	lsls	r2, r3, #5
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	4413      	add	r3, r2
 8010802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	db12      	blt.n	8010832 <USB_EPSetStall+0xae>
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d00f      	beq.n	8010832 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	015a      	lsls	r2, r3, #5
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	4413      	add	r3, r2
 801081a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	0151      	lsls	r1, r2, #5
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	440a      	add	r2, r1
 8010828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801082c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010830:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	015a      	lsls	r2, r3, #5
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	4413      	add	r3, r2
 801083a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	68ba      	ldr	r2, [r7, #8]
 8010842:	0151      	lsls	r1, r2, #5
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	440a      	add	r2, r1
 8010848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801084c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010850:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010852:	2300      	movs	r3, #0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3714      	adds	r7, #20
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010860:	b480      	push	{r7}
 8010862:	b085      	sub	sp, #20
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	785b      	ldrb	r3, [r3, #1]
 8010878:	2b01      	cmp	r3, #1
 801087a:	d128      	bne.n	80108ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	015a      	lsls	r2, r3, #5
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	4413      	add	r3, r2
 8010884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	68ba      	ldr	r2, [r7, #8]
 801088c:	0151      	lsls	r1, r2, #5
 801088e:	68fa      	ldr	r2, [r7, #12]
 8010890:	440a      	add	r2, r1
 8010892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010896:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801089a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	78db      	ldrb	r3, [r3, #3]
 80108a0:	2b03      	cmp	r3, #3
 80108a2:	d003      	beq.n	80108ac <USB_EPClearStall+0x4c>
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	78db      	ldrb	r3, [r3, #3]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d138      	bne.n	801091e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	015a      	lsls	r2, r3, #5
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	4413      	add	r3, r2
 80108b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	0151      	lsls	r1, r2, #5
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	440a      	add	r2, r1
 80108c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	e027      	b.n	801091e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	015a      	lsls	r2, r3, #5
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	4413      	add	r3, r2
 80108d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	0151      	lsls	r1, r2, #5
 80108e0:	68fa      	ldr	r2, [r7, #12]
 80108e2:	440a      	add	r2, r1
 80108e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	78db      	ldrb	r3, [r3, #3]
 80108f2:	2b03      	cmp	r3, #3
 80108f4:	d003      	beq.n	80108fe <USB_EPClearStall+0x9e>
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	78db      	ldrb	r3, [r3, #3]
 80108fa:	2b02      	cmp	r3, #2
 80108fc:	d10f      	bne.n	801091e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	015a      	lsls	r2, r3, #5
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	4413      	add	r3, r2
 8010906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	68ba      	ldr	r2, [r7, #8]
 801090e:	0151      	lsls	r1, r2, #5
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	440a      	add	r2, r1
 8010914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801091c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3714      	adds	r7, #20
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr

0801092c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801092c:	b480      	push	{r7}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	460b      	mov	r3, r1
 8010936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801094a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801094e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	78fb      	ldrb	r3, [r7, #3]
 801095a:	011b      	lsls	r3, r3, #4
 801095c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010960:	68f9      	ldr	r1, [r7, #12]
 8010962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010966:	4313      	orrs	r3, r2
 8010968:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010992:	f023 0303 	bic.w	r3, r3, #3
 8010996:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	68fa      	ldr	r2, [r7, #12]
 80109a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109a6:	f023 0302 	bic.w	r3, r3, #2
 80109aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109ac:	2300      	movs	r3, #0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3714      	adds	r7, #20
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr

080109ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80109ba:	b480      	push	{r7}
 80109bc:	b085      	sub	sp, #20
 80109be:	af00      	add	r7, sp, #0
 80109c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80109d4:	f023 0303 	bic.w	r3, r3, #3
 80109d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80109e8:	f043 0302 	orr.w	r3, r3, #2
 80109ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80109ee:	2300      	movs	r3, #0
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr

080109fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	695b      	ldr	r3, [r3, #20]
 8010a08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	4013      	ands	r3, r2
 8010a12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010a14:	68fb      	ldr	r3, [r7, #12]
}
 8010a16:	4618      	mov	r0, r3
 8010a18:	3714      	adds	r7, #20
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a22:	b480      	push	{r7}
 8010a24:	b085      	sub	sp, #20
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a3e:	69db      	ldr	r3, [r3, #28]
 8010a40:	68ba      	ldr	r2, [r7, #8]
 8010a42:	4013      	ands	r3, r2
 8010a44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	0c1b      	lsrs	r3, r3, #16
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3714      	adds	r7, #20
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr

08010a56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a56:	b480      	push	{r7}
 8010a58:	b085      	sub	sp, #20
 8010a5a:	af00      	add	r7, sp, #0
 8010a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a68:	699b      	ldr	r3, [r3, #24]
 8010a6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a72:	69db      	ldr	r3, [r3, #28]
 8010a74:	68ba      	ldr	r2, [r7, #8]
 8010a76:	4013      	ands	r3, r2
 8010a78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	b29b      	uxth	r3, r3
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	3714      	adds	r7, #20
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr

08010a8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010a8a:	b480      	push	{r7}
 8010a8c:	b085      	sub	sp, #20
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	460b      	mov	r3, r1
 8010a94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010a9a:	78fb      	ldrb	r3, [r7, #3]
 8010a9c:	015a      	lsls	r2, r3, #5
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	4413      	add	r3, r2
 8010aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aa6:	689b      	ldr	r3, [r3, #8]
 8010aa8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ab0:	695b      	ldr	r3, [r3, #20]
 8010ab2:	68ba      	ldr	r2, [r7, #8]
 8010ab4:	4013      	ands	r3, r2
 8010ab6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ab8:	68bb      	ldr	r3, [r7, #8]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3714      	adds	r7, #20
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr

08010ac6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ac6:	b480      	push	{r7}
 8010ac8:	b087      	sub	sp, #28
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	460b      	mov	r3, r1
 8010ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010adc:	691b      	ldr	r3, [r3, #16]
 8010ade:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ae8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010aea:	78fb      	ldrb	r3, [r7, #3]
 8010aec:	f003 030f 	and.w	r3, r3, #15
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	fa22 f303 	lsr.w	r3, r2, r3
 8010af6:	01db      	lsls	r3, r3, #7
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	693a      	ldr	r2, [r7, #16]
 8010afc:	4313      	orrs	r3, r2
 8010afe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010b00:	78fb      	ldrb	r3, [r7, #3]
 8010b02:	015a      	lsls	r2, r3, #5
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	4413      	add	r3, r2
 8010b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b0c:	689b      	ldr	r3, [r3, #8]
 8010b0e:	693a      	ldr	r2, [r7, #16]
 8010b10:	4013      	ands	r3, r2
 8010b12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010b14:	68bb      	ldr	r3, [r7, #8]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	371c      	adds	r7, #28
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr

08010b22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010b22:	b480      	push	{r7}
 8010b24:	b083      	sub	sp, #12
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	695b      	ldr	r3, [r3, #20]
 8010b2e:	f003 0301 	and.w	r3, r3, #1
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	370c      	adds	r7, #12
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr
	...

08010b40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	4b09      	ldr	r3, [pc, #36]	; (8010b84 <USB_ActivateSetup+0x44>)
 8010b5e:	4013      	ands	r3, r2
 8010b60:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b76:	2300      	movs	r3, #0
}
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3714      	adds	r7, #20
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr
 8010b84:	fffff800 	.word	0xfffff800

08010b88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b087      	sub	sp, #28
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	460b      	mov	r3, r1
 8010b92:	607a      	str	r2, [r7, #4]
 8010b94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	333c      	adds	r3, #60	; 0x3c
 8010b9e:	3304      	adds	r3, #4
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	4a26      	ldr	r2, [pc, #152]	; (8010c40 <USB_EP0_OutStart+0xb8>)
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d90a      	bls.n	8010bc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010bbc:	d101      	bne.n	8010bc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	e037      	b.n	8010c32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc8:	461a      	mov	r2, r3
 8010bca:	2300      	movs	r3, #0
 8010bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	697a      	ldr	r2, [r7, #20]
 8010bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010be8:	691b      	ldr	r3, [r3, #16]
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bf0:	f043 0318 	orr.w	r3, r3, #24
 8010bf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bfc:	691b      	ldr	r3, [r3, #16]
 8010bfe:	697a      	ldr	r2, [r7, #20]
 8010c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010c08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010c0a:	7afb      	ldrb	r3, [r7, #11]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d10f      	bne.n	8010c30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c16:	461a      	mov	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	697a      	ldr	r2, [r7, #20]
 8010c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c30:	2300      	movs	r3, #0
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	371c      	adds	r7, #28
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	4f54300a 	.word	0x4f54300a

08010c44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b085      	sub	sp, #20
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	3301      	adds	r3, #1
 8010c54:	60fb      	str	r3, [r7, #12]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	4a13      	ldr	r2, [pc, #76]	; (8010ca8 <USB_CoreReset+0x64>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d901      	bls.n	8010c62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010c5e:	2303      	movs	r3, #3
 8010c60:	e01b      	b.n	8010c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	daf2      	bge.n	8010c50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	691b      	ldr	r3, [r3, #16]
 8010c72:	f043 0201 	orr.w	r2, r3, #1
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	3301      	adds	r3, #1
 8010c7e:	60fb      	str	r3, [r7, #12]
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	4a09      	ldr	r2, [pc, #36]	; (8010ca8 <USB_CoreReset+0x64>)
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d901      	bls.n	8010c8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010c88:	2303      	movs	r3, #3
 8010c8a:	e006      	b.n	8010c9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	691b      	ldr	r3, [r3, #16]
 8010c90:	f003 0301 	and.w	r3, r3, #1
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d0f0      	beq.n	8010c7a <USB_CoreReset+0x36>

  return HAL_OK;
 8010c98:	2300      	movs	r3, #0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3714      	adds	r7, #20
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca4:	4770      	bx	lr
 8010ca6:	bf00      	nop
 8010ca8:	00030d40 	.word	0x00030d40

08010cac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010cb0:	4904      	ldr	r1, [pc, #16]	; (8010cc4 <MX_FATFS_Init+0x18>)
 8010cb2:	4805      	ldr	r0, [pc, #20]	; (8010cc8 <MX_FATFS_Init+0x1c>)
 8010cb4:	f001 fea0 	bl	80129f8 <FATFS_LinkDriver>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	461a      	mov	r2, r3
 8010cbc:	4b03      	ldr	r3, [pc, #12]	; (8010ccc <MX_FATFS_Init+0x20>)
 8010cbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010cc0:	bf00      	nop
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	240007c8 	.word	0x240007c8
 8010cc8:	08015e90 	.word	0x08015e90
 8010ccc:	240007c4 	.word	0x240007c4

08010cd0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010cda:	f000 f885 	bl	8010de8 <BSP_SD_IsDetected>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	d001      	beq.n	8010ce8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	e012      	b.n	8010d0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010ce8:	480b      	ldr	r0, [pc, #44]	; (8010d18 <BSP_SD_Init+0x48>)
 8010cea:	f7f9 f9d5 	bl	800a098 <HAL_SD_Init>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010cf2:	79fb      	ldrb	r3, [r7, #7]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d109      	bne.n	8010d0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010cfc:	4806      	ldr	r0, [pc, #24]	; (8010d18 <BSP_SD_Init+0x48>)
 8010cfe:	f7fa f879 	bl	800adf4 <HAL_SD_ConfigWideBusOperation>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d001      	beq.n	8010d0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010d08:	2301      	movs	r3, #1
 8010d0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	24000470 	.word	0x24000470

08010d1c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b086      	sub	sp, #24
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	60b9      	str	r1, [r7, #8]
 8010d26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	68f9      	ldr	r1, [r7, #12]
 8010d32:	4806      	ldr	r0, [pc, #24]	; (8010d4c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010d34:	f7f9 fac8 	bl	800a2c8 <HAL_SD_ReadBlocks_DMA>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3718      	adds	r7, #24
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	24000470 	.word	0x24000470

08010d50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	68ba      	ldr	r2, [r7, #8]
 8010d64:	68f9      	ldr	r1, [r7, #12]
 8010d66:	4806      	ldr	r0, [pc, #24]	; (8010d80 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d68:	f7f9 fb56 	bl	800a418 <HAL_SD_WriteBlocks_DMA>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d001      	beq.n	8010d76 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d72:	2301      	movs	r3, #1
 8010d74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3718      	adds	r7, #24
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}
 8010d80:	24000470 	.word	0x24000470

08010d84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d88:	4805      	ldr	r0, [pc, #20]	; (8010da0 <BSP_SD_GetCardState+0x1c>)
 8010d8a:	f7fa f943 	bl	800b014 <HAL_SD_GetCardState>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b04      	cmp	r3, #4
 8010d92:	bf14      	ite	ne
 8010d94:	2301      	movne	r3, #1
 8010d96:	2300      	moveq	r3, #0
 8010d98:	b2db      	uxtb	r3, r3
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	24000470 	.word	0x24000470

08010da4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010dac:	6879      	ldr	r1, [r7, #4]
 8010dae:	4803      	ldr	r0, [pc, #12]	; (8010dbc <BSP_SD_GetCardInfo+0x18>)
 8010db0:	f7f9 fff4 	bl	800ad9c <HAL_SD_GetCardInfo>
}
 8010db4:	bf00      	nop
 8010db6:	3708      	adds	r7, #8
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	24000470 	.word	0x24000470

08010dc0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010dc8:	f000 f984 	bl	80110d4 <BSP_SD_WriteCpltCallback>
}
 8010dcc:	bf00      	nop
 8010dce:	3708      	adds	r7, #8
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010ddc:	f000 f986 	bl	80110ec <BSP_SD_ReadCpltCallback>
}
 8010de0:	bf00      	nop
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010dee:	2301      	movs	r3, #1
 8010df0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8010df2:	79fb      	ldrb	r3, [r7, #7]
 8010df4:	b2db      	uxtb	r3, r3
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	370c      	adds	r7, #12
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr

08010e02 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b084      	sub	sp, #16
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e0a:	f7f0 fffd 	bl	8001e08 <HAL_GetTick>
 8010e0e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e10:	e006      	b.n	8010e20 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e12:	f7ff ffb7 	bl	8010d84 <BSP_SD_GetCardState>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d101      	bne.n	8010e20 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	e009      	b.n	8010e34 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e20:	f7f0 fff2 	bl	8001e08 <HAL_GetTick>
 8010e24:	4602      	mov	r2, r0
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d8f0      	bhi.n	8010e12 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e34:	4618      	mov	r0, r3
 8010e36:	3710      	adds	r7, #16
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}

08010e3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	4603      	mov	r3, r0
 8010e44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e46:	4b0b      	ldr	r3, [pc, #44]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e48:	2201      	movs	r2, #1
 8010e4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e4c:	f7ff ff9a 	bl	8010d84 <BSP_SD_GetCardState>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d107      	bne.n	8010e66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e56:	4b07      	ldr	r3, [pc, #28]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	f023 0301 	bic.w	r3, r3, #1
 8010e60:	b2da      	uxtb	r2, r3
 8010e62:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e66:	4b03      	ldr	r3, [pc, #12]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	b2db      	uxtb	r3, r3
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	2400000d 	.word	0x2400000d

08010e78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	4603      	mov	r3, r0
 8010e80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e82:	f7ff ff25 	bl	8010cd0 <BSP_SD_Init>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d107      	bne.n	8010e9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010e8c:	79fb      	ldrb	r3, [r7, #7]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ff ffd4 	bl	8010e3c <SD_CheckStatus>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
 8010e98:	4b04      	ldr	r3, [pc, #16]	; (8010eac <SD_initialize+0x34>)
 8010e9a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e9c:	4b03      	ldr	r3, [pc, #12]	; (8010eac <SD_initialize+0x34>)
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	b2db      	uxtb	r3, r3
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	2400000d 	.word	0x2400000d

08010eb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010eba:	79fb      	ldrb	r3, [r7, #7]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff ffbd 	bl	8010e3c <SD_CheckStatus>
 8010ec2:	4603      	mov	r3, r0
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b086      	sub	sp, #24
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60b9      	str	r1, [r7, #8]
 8010ed4:	607a      	str	r2, [r7, #4]
 8010ed6:	603b      	str	r3, [r7, #0]
 8010ed8:	4603      	mov	r3, r0
 8010eda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010edc:	2301      	movs	r3, #1
 8010ede:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010ee0:	f247 5030 	movw	r0, #30000	; 0x7530
 8010ee4:	f7ff ff8d 	bl	8010e02 <SD_CheckStatusWithTimeout>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	da01      	bge.n	8010ef2 <SD_read+0x26>
  {
    return res;
 8010eee:	7dfb      	ldrb	r3, [r7, #23]
 8010ef0:	e03b      	b.n	8010f6a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	6879      	ldr	r1, [r7, #4]
 8010ef6:	68b8      	ldr	r0, [r7, #8]
 8010ef8:	f7ff ff10 	bl	8010d1c <BSP_SD_ReadBlocks_DMA>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d132      	bne.n	8010f68 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010f02:	4b1c      	ldr	r3, [pc, #112]	; (8010f74 <SD_read+0xa8>)
 8010f04:	2200      	movs	r2, #0
 8010f06:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f08:	f7f0 ff7e 	bl	8001e08 <HAL_GetTick>
 8010f0c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f0e:	bf00      	nop
 8010f10:	4b18      	ldr	r3, [pc, #96]	; (8010f74 <SD_read+0xa8>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d108      	bne.n	8010f2a <SD_read+0x5e>
 8010f18:	f7f0 ff76 	bl	8001e08 <HAL_GetTick>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d9f2      	bls.n	8010f10 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010f2a:	4b12      	ldr	r3, [pc, #72]	; (8010f74 <SD_read+0xa8>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d102      	bne.n	8010f38 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f32:	2301      	movs	r3, #1
 8010f34:	75fb      	strb	r3, [r7, #23]
 8010f36:	e017      	b.n	8010f68 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f38:	4b0e      	ldr	r3, [pc, #56]	; (8010f74 <SD_read+0xa8>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f3e:	f7f0 ff63 	bl	8001e08 <HAL_GetTick>
 8010f42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f44:	e007      	b.n	8010f56 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f46:	f7ff ff1d 	bl	8010d84 <BSP_SD_GetCardState>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <SD_read+0x8a>
          {
            res = RES_OK;
 8010f50:	2300      	movs	r3, #0
 8010f52:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f54:	e008      	b.n	8010f68 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f56:	f7f0 ff57 	bl	8001e08 <HAL_GetTick>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d9ee      	bls.n	8010f46 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3718      	adds	r7, #24
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	24000378 	.word	0x24000378

08010f78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
 8010f82:	603b      	str	r3, [r7, #0]
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010f8c:	4b24      	ldr	r3, [pc, #144]	; (8011020 <SD_write+0xa8>)
 8010f8e:	2200      	movs	r2, #0
 8010f90:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f92:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f96:	f7ff ff34 	bl	8010e02 <SD_CheckStatusWithTimeout>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	da01      	bge.n	8010fa4 <SD_write+0x2c>
  {
    return res;
 8010fa0:	7dfb      	ldrb	r3, [r7, #23]
 8010fa2:	e038      	b.n	8011016 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	6879      	ldr	r1, [r7, #4]
 8010fa8:	68b8      	ldr	r0, [r7, #8]
 8010faa:	f7ff fed1 	bl	8010d50 <BSP_SD_WriteBlocks_DMA>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d12f      	bne.n	8011014 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010fb4:	f7f0 ff28 	bl	8001e08 <HAL_GetTick>
 8010fb8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010fba:	bf00      	nop
 8010fbc:	4b18      	ldr	r3, [pc, #96]	; (8011020 <SD_write+0xa8>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d108      	bne.n	8010fd6 <SD_write+0x5e>
 8010fc4:	f7f0 ff20 	bl	8001e08 <HAL_GetTick>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d9f2      	bls.n	8010fbc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010fd6:	4b12      	ldr	r3, [pc, #72]	; (8011020 <SD_write+0xa8>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	75fb      	strb	r3, [r7, #23]
 8010fe2:	e017      	b.n	8011014 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010fe4:	4b0e      	ldr	r3, [pc, #56]	; (8011020 <SD_write+0xa8>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010fea:	f7f0 ff0d 	bl	8001e08 <HAL_GetTick>
 8010fee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ff0:	e007      	b.n	8011002 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ff2:	f7ff fec7 	bl	8010d84 <BSP_SD_GetCardState>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <SD_write+0x8a>
          {
            res = RES_OK;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8011000:	e008      	b.n	8011014 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011002:	f7f0 ff01 	bl	8001e08 <HAL_GetTick>
 8011006:	4602      	mov	r2, r0
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011010:	4293      	cmp	r3, r2
 8011012:	d9ee      	bls.n	8010ff2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011014:	7dfb      	ldrb	r3, [r7, #23]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	24000374 	.word	0x24000374

08011024 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b08c      	sub	sp, #48	; 0x30
 8011028:	af00      	add	r7, sp, #0
 801102a:	4603      	mov	r3, r0
 801102c:	603a      	str	r2, [r7, #0]
 801102e:	71fb      	strb	r3, [r7, #7]
 8011030:	460b      	mov	r3, r1
 8011032:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011034:	2301      	movs	r3, #1
 8011036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801103a:	4b25      	ldr	r3, [pc, #148]	; (80110d0 <SD_ioctl+0xac>)
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	b2db      	uxtb	r3, r3
 8011040:	f003 0301 	and.w	r3, r3, #1
 8011044:	2b00      	cmp	r3, #0
 8011046:	d001      	beq.n	801104c <SD_ioctl+0x28>
 8011048:	2303      	movs	r3, #3
 801104a:	e03c      	b.n	80110c6 <SD_ioctl+0xa2>

  switch (cmd)
 801104c:	79bb      	ldrb	r3, [r7, #6]
 801104e:	2b03      	cmp	r3, #3
 8011050:	d834      	bhi.n	80110bc <SD_ioctl+0x98>
 8011052:	a201      	add	r2, pc, #4	; (adr r2, 8011058 <SD_ioctl+0x34>)
 8011054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011058:	08011069 	.word	0x08011069
 801105c:	08011071 	.word	0x08011071
 8011060:	08011089 	.word	0x08011089
 8011064:	080110a3 	.word	0x080110a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011068:	2300      	movs	r3, #0
 801106a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801106e:	e028      	b.n	80110c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011070:	f107 0308 	add.w	r3, r7, #8
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff fe95 	bl	8010da4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801107a:	6a3a      	ldr	r2, [r7, #32]
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011080:	2300      	movs	r3, #0
 8011082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011086:	e01c      	b.n	80110c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011088:	f107 0308 	add.w	r3, r7, #8
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff fe89 	bl	8010da4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011094:	b29a      	uxth	r2, r3
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801109a:	2300      	movs	r3, #0
 801109c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110a0:	e00f      	b.n	80110c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110a2:	f107 0308 	add.w	r3, r7, #8
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff fe7c 	bl	8010da4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ae:	0a5a      	lsrs	r2, r3, #9
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110ba:	e002      	b.n	80110c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80110bc:	2304      	movs	r3, #4
 80110be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80110c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3730      	adds	r7, #48	; 0x30
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	2400000d 	.word	0x2400000d

080110d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80110d4:	b480      	push	{r7}
 80110d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80110d8:	4b03      	ldr	r3, [pc, #12]	; (80110e8 <BSP_SD_WriteCpltCallback+0x14>)
 80110da:	2201      	movs	r2, #1
 80110dc:	601a      	str	r2, [r3, #0]
}
 80110de:	bf00      	nop
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr
 80110e8:	24000374 	.word	0x24000374

080110ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80110f0:	4b03      	ldr	r3, [pc, #12]	; (8011100 <BSP_SD_ReadCpltCallback+0x14>)
 80110f2:	2201      	movs	r2, #1
 80110f4:	601a      	str	r2, [r3, #0]
}
 80110f6:	bf00      	nop
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	24000378 	.word	0x24000378

08011104 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	460b      	mov	r3, r1
 801110e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011110:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011114:	f002 fa1a 	bl	801354c <malloc>
 8011118:	4603      	mov	r3, r0
 801111a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d105      	bne.n	801112e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2200      	movs	r2, #0
 8011126:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801112a:	2302      	movs	r3, #2
 801112c:	e066      	b.n	80111fc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	7c1b      	ldrb	r3, [r3, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d119      	bne.n	8011172 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801113e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011142:	2202      	movs	r2, #2
 8011144:	2181      	movs	r1, #129	; 0x81
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f002 f887 	bl	801325a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	2201      	movs	r2, #1
 8011150:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011156:	2202      	movs	r2, #2
 8011158:	2101      	movs	r1, #1
 801115a:	6878      	ldr	r0, [r7, #4]
 801115c:	f002 f87d 	bl	801325a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2201      	movs	r2, #1
 8011164:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2210      	movs	r2, #16
 801116c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011170:	e016      	b.n	80111a0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011172:	2340      	movs	r3, #64	; 0x40
 8011174:	2202      	movs	r2, #2
 8011176:	2181      	movs	r1, #129	; 0x81
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f002 f86e 	bl	801325a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2201      	movs	r2, #1
 8011182:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011184:	2340      	movs	r3, #64	; 0x40
 8011186:	2202      	movs	r2, #2
 8011188:	2101      	movs	r1, #1
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f002 f865 	bl	801325a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2201      	movs	r2, #1
 8011194:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2210      	movs	r2, #16
 801119c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80111a0:	2308      	movs	r3, #8
 80111a2:	2203      	movs	r2, #3
 80111a4:	2182      	movs	r1, #130	; 0x82
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f002 f857 	bl	801325a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2201      	movs	r2, #1
 80111b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2200      	movs	r2, #0
 80111c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2200      	movs	r2, #0
 80111ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	7c1b      	ldrb	r3, [r3, #16]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d109      	bne.n	80111ea <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80111dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111e0:	2101      	movs	r1, #1
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f002 f928 	bl	8013438 <USBD_LL_PrepareReceive>
 80111e8:	e007      	b.n	80111fa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80111f0:	2340      	movs	r3, #64	; 0x40
 80111f2:	2101      	movs	r1, #1
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f002 f91f 	bl	8013438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3710      	adds	r7, #16
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	460b      	mov	r3, r1
 801120e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011210:	2300      	movs	r3, #0
 8011212:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011214:	2181      	movs	r1, #129	; 0x81
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f002 f845 	bl	80132a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011222:	2101      	movs	r1, #1
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f002 f83e 	bl	80132a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2200      	movs	r2, #0
 801122e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011232:	2182      	movs	r1, #130	; 0x82
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f002 f836 	bl	80132a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2200      	movs	r2, #0
 801123e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00e      	beq.n	8011272 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011264:	4618      	mov	r0, r3
 8011266:	f002 f979 	bl	801355c <free>
    pdev->pClassData = NULL;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8011272:	7bfb      	ldrb	r3, [r7, #15]
}
 8011274:	4618      	mov	r0, r3
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801128c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801128e:	2300      	movs	r3, #0
 8011290:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011292:	2300      	movs	r3, #0
 8011294:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8011296:	2300      	movs	r3, #0
 8011298:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d03a      	beq.n	801131c <USBD_CDC_Setup+0xa0>
 80112a6:	2b20      	cmp	r3, #32
 80112a8:	f040 809a 	bne.w	80113e0 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	88db      	ldrh	r3, [r3, #6]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d029      	beq.n	8011308 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	b25b      	sxtb	r3, r3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	da11      	bge.n	80112e2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80112c4:	689b      	ldr	r3, [r3, #8]
 80112c6:	683a      	ldr	r2, [r7, #0]
 80112c8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80112ca:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80112cc:	683a      	ldr	r2, [r7, #0]
 80112ce:	88d2      	ldrh	r2, [r2, #6]
 80112d0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80112d2:	6939      	ldr	r1, [r7, #16]
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	88db      	ldrh	r3, [r3, #6]
 80112d8:	461a      	mov	r2, r3
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f001 fabf 	bl	801285e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80112e0:	e085      	b.n	80113ee <USBD_CDC_Setup+0x172>
        hcdc->CmdOpCode = req->bRequest;
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	785a      	ldrb	r2, [r3, #1]
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	88db      	ldrh	r3, [r3, #6]
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80112f8:	6939      	ldr	r1, [r7, #16]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	88db      	ldrh	r3, [r3, #6]
 80112fe:	461a      	mov	r2, r3
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f001 fad8 	bl	80128b6 <USBD_CtlPrepareRx>
    break;
 8011306:	e072      	b.n	80113ee <USBD_CDC_Setup+0x172>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	683a      	ldr	r2, [r7, #0]
 8011312:	7850      	ldrb	r0, [r2, #1]
 8011314:	2200      	movs	r2, #0
 8011316:	6839      	ldr	r1, [r7, #0]
 8011318:	4798      	blx	r3
    break;
 801131a:	e068      	b.n	80113ee <USBD_CDC_Setup+0x172>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	785b      	ldrb	r3, [r3, #1]
 8011320:	2b0b      	cmp	r3, #11
 8011322:	d852      	bhi.n	80113ca <USBD_CDC_Setup+0x14e>
 8011324:	a201      	add	r2, pc, #4	; (adr r2, 801132c <USBD_CDC_Setup+0xb0>)
 8011326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132a:	bf00      	nop
 801132c:	0801135d 	.word	0x0801135d
 8011330:	080113d9 	.word	0x080113d9
 8011334:	080113cb 	.word	0x080113cb
 8011338:	080113cb 	.word	0x080113cb
 801133c:	080113cb 	.word	0x080113cb
 8011340:	080113cb 	.word	0x080113cb
 8011344:	080113cb 	.word	0x080113cb
 8011348:	080113cb 	.word	0x080113cb
 801134c:	080113cb 	.word	0x080113cb
 8011350:	080113cb 	.word	0x080113cb
 8011354:	08011387 	.word	0x08011387
 8011358:	080113b1 	.word	0x080113b1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011362:	b2db      	uxtb	r3, r3
 8011364:	2b03      	cmp	r3, #3
 8011366:	d107      	bne.n	8011378 <USBD_CDC_Setup+0xfc>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011368:	f107 030c 	add.w	r3, r7, #12
 801136c:	2202      	movs	r2, #2
 801136e:	4619      	mov	r1, r3
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f001 fa74 	bl	801285e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011376:	e032      	b.n	80113de <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 8011378:	6839      	ldr	r1, [r7, #0]
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f001 f9fe 	bl	801277c <USBD_CtlError>
        ret = USBD_FAIL;
 8011380:	2303      	movs	r3, #3
 8011382:	75fb      	strb	r3, [r7, #23]
      break;
 8011384:	e02b      	b.n	80113de <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801138c:	b2db      	uxtb	r3, r3
 801138e:	2b03      	cmp	r3, #3
 8011390:	d107      	bne.n	80113a2 <USBD_CDC_Setup+0x126>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011392:	f107 030f 	add.w	r3, r7, #15
 8011396:	2201      	movs	r2, #1
 8011398:	4619      	mov	r1, r3
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f001 fa5f 	bl	801285e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80113a0:	e01d      	b.n	80113de <USBD_CDC_Setup+0x162>
        USBD_CtlError(pdev, req);
 80113a2:	6839      	ldr	r1, [r7, #0]
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f001 f9e9 	bl	801277c <USBD_CtlError>
        ret = USBD_FAIL;
 80113aa:	2303      	movs	r3, #3
 80113ac:	75fb      	strb	r3, [r7, #23]
      break;
 80113ae:	e016      	b.n	80113de <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	2b03      	cmp	r3, #3
 80113ba:	d00f      	beq.n	80113dc <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError(pdev, req);
 80113bc:	6839      	ldr	r1, [r7, #0]
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f001 f9dc 	bl	801277c <USBD_CtlError>
        ret = USBD_FAIL;
 80113c4:	2303      	movs	r3, #3
 80113c6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80113c8:	e008      	b.n	80113dc <USBD_CDC_Setup+0x160>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80113ca:	6839      	ldr	r1, [r7, #0]
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f001 f9d5 	bl	801277c <USBD_CtlError>
      ret = USBD_FAIL;
 80113d2:	2303      	movs	r3, #3
 80113d4:	75fb      	strb	r3, [r7, #23]
      break;
 80113d6:	e002      	b.n	80113de <USBD_CDC_Setup+0x162>
      break;
 80113d8:	bf00      	nop
 80113da:	e008      	b.n	80113ee <USBD_CDC_Setup+0x172>
      break;
 80113dc:	bf00      	nop
    }
    break;
 80113de:	e006      	b.n	80113ee <USBD_CDC_Setup+0x172>

  default:
    USBD_CtlError(pdev, req);
 80113e0:	6839      	ldr	r1, [r7, #0]
 80113e2:	6878      	ldr	r0, [r7, #4]
 80113e4:	f001 f9ca 	bl	801277c <USBD_CtlError>
    ret = USBD_FAIL;
 80113e8:	2303      	movs	r3, #3
 80113ea:	75fb      	strb	r3, [r7, #23]
    break;
 80113ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80113ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3718      	adds	r7, #24
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	460b      	mov	r3, r1
 8011402:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801140a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011412:	2b00      	cmp	r3, #0
 8011414:	d101      	bne.n	801141a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011416:	2303      	movs	r3, #3
 8011418:	e049      	b.n	80114ae <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011420:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011422:	78fa      	ldrb	r2, [r7, #3]
 8011424:	6879      	ldr	r1, [r7, #4]
 8011426:	4613      	mov	r3, r2
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	4413      	add	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	440b      	add	r3, r1
 8011430:	3318      	adds	r3, #24
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d029      	beq.n	801148c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011438:	78fa      	ldrb	r2, [r7, #3]
 801143a:	6879      	ldr	r1, [r7, #4]
 801143c:	4613      	mov	r3, r2
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	4413      	add	r3, r2
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	440b      	add	r3, r1
 8011446:	3318      	adds	r3, #24
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	78f9      	ldrb	r1, [r7, #3]
 801144c:	68f8      	ldr	r0, [r7, #12]
 801144e:	460b      	mov	r3, r1
 8011450:	00db      	lsls	r3, r3, #3
 8011452:	1a5b      	subs	r3, r3, r1
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	4403      	add	r3, r0
 8011458:	3344      	adds	r3, #68	; 0x44
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011460:	fb03 f301 	mul.w	r3, r3, r1
 8011464:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011466:	2b00      	cmp	r3, #0
 8011468:	d110      	bne.n	801148c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801146a:	78fa      	ldrb	r2, [r7, #3]
 801146c:	6879      	ldr	r1, [r7, #4]
 801146e:	4613      	mov	r3, r2
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	4413      	add	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	440b      	add	r3, r1
 8011478:	3318      	adds	r3, #24
 801147a:	2200      	movs	r2, #0
 801147c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801147e:	78f9      	ldrb	r1, [r7, #3]
 8011480:	2300      	movs	r3, #0
 8011482:	2200      	movs	r2, #0
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f001 ffb6 	bl	80133f6 <USBD_LL_Transmit>
 801148a:	e00f      	b.n	80114ac <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	2200      	movs	r2, #0
 8011490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801149a:	691b      	ldr	r3, [r3, #16]
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80114a2:	68ba      	ldr	r2, [r7, #8]
 80114a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80114a8:	78fa      	ldrb	r2, [r7, #3]
 80114aa:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3710      	adds	r7, #16
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b084      	sub	sp, #16
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
 80114be:	460b      	mov	r3, r1
 80114c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d101      	bne.n	80114d8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80114d4:	2303      	movs	r3, #3
 80114d6:	e015      	b.n	8011504 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80114d8:	78fb      	ldrb	r3, [r7, #3]
 80114da:	4619      	mov	r1, r3
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f001 ffcc 	bl	801347a <USBD_LL_GetRxDataSize>
 80114e2:	4602      	mov	r2, r0
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	68fa      	ldr	r2, [r7, #12]
 80114f4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80114f8:	68fa      	ldr	r2, [r7, #12]
 80114fa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80114fe:	4611      	mov	r1, r2
 8011500:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011502:	2300      	movs	r3, #0
}
 8011504:	4618      	mov	r0, r3
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801151a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d015      	beq.n	8011552 <USBD_CDC_EP0_RxReady+0x46>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801152c:	2bff      	cmp	r3, #255	; 0xff
 801152e:	d010      	beq.n	8011552 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801153e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011540:	68fa      	ldr	r2, [r7, #12]
 8011542:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011546:	b292      	uxth	r2, r2
 8011548:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	22ff      	movs	r2, #255	; 0xff
 801154e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011552:	2300      	movs	r3, #0
}
 8011554:	4618      	mov	r0, r3
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2243      	movs	r2, #67	; 0x43
 8011568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801156a:	4b03      	ldr	r3, [pc, #12]	; (8011578 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801156c:	4618      	mov	r0, r3
 801156e:	370c      	adds	r7, #12
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr
 8011578:	24000098 	.word	0x24000098

0801157c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2243      	movs	r2, #67	; 0x43
 8011588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801158a:	4b03      	ldr	r3, [pc, #12]	; (8011598 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801158c:	4618      	mov	r0, r3
 801158e:	370c      	adds	r7, #12
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr
 8011598:	24000054 	.word	0x24000054

0801159c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801159c:	b480      	push	{r7}
 801159e:	b083      	sub	sp, #12
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2243      	movs	r2, #67	; 0x43
 80115a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80115aa:	4b03      	ldr	r3, [pc, #12]	; (80115b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr
 80115b8:	240000dc 	.word	0x240000dc

080115bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	220a      	movs	r2, #10
 80115c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80115ca:	4b03      	ldr	r3, [pc, #12]	; (80115d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr
 80115d8:	24000010 	.word	0x24000010

080115dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80115dc:	b480      	push	{r7}
 80115de:	b083      	sub	sp, #12
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d101      	bne.n	80115f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80115ec:	2303      	movs	r3, #3
 80115ee:	e004      	b.n	80115fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	370c      	adds	r7, #12
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr

08011606 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011606:	b480      	push	{r7}
 8011608:	b087      	sub	sp, #28
 801160a:	af00      	add	r7, sp, #0
 801160c:	60f8      	str	r0, [r7, #12]
 801160e:	60b9      	str	r1, [r7, #8]
 8011610:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011618:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	371c      	adds	r7, #28
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr

08011638 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011638:	b480      	push	{r7}
 801163a:	b085      	sub	sp, #20
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
 8011640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011648:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	683a      	ldr	r2, [r7, #0]
 801164e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3714      	adds	r7, #20
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801166e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011670:	2301      	movs	r3, #1
 8011672:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801167a:	2b00      	cmp	r3, #0
 801167c:	d101      	bne.n	8011682 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801167e:	2303      	movs	r3, #3
 8011680:	e01a      	b.n	80116b8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011688:	2b00      	cmp	r3, #0
 801168a:	d114      	bne.n	80116b6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	2201      	movs	r2, #1
 8011690:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80116aa:	2181      	movs	r1, #129	; 0x81
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f001 fea2 	bl	80133f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80116b2:	2300      	movs	r3, #0
 80116b4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80116b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3710      	adds	r7, #16
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d101      	bne.n	80116de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80116da:	2303      	movs	r3, #3
 80116dc:	e016      	b.n	801170c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	7c1b      	ldrb	r3, [r3, #16]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d109      	bne.n	80116fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116f0:	2101      	movs	r1, #1
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f001 fea0 	bl	8013438 <USBD_LL_PrepareReceive>
 80116f8:	e007      	b.n	801170a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011700:	2340      	movs	r3, #64	; 0x40
 8011702:	2101      	movs	r1, #1
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f001 fe97 	bl	8013438 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}

08011714 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	4613      	mov	r3, r2
 8011720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d101      	bne.n	801172c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011728:	2303      	movs	r3, #3
 801172a:	e025      	b.n	8011778 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011732:	2b00      	cmp	r3, #0
 8011734:	d003      	beq.n	801173e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	2200      	movs	r2, #0
 801173a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011744:	2b00      	cmp	r3, #0
 8011746:	d003      	beq.n	8011750 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2200      	movs	r2, #0
 801174c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d003      	beq.n	801175e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	68ba      	ldr	r2, [r7, #8]
 801175a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2201      	movs	r2, #1
 8011762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	79fa      	ldrb	r2, [r7, #7]
 801176a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801176c:	68f8      	ldr	r0, [r7, #12]
 801176e:	f001 fd09 	bl	8013184 <USBD_LL_Init>
 8011772:	4603      	mov	r3, r0
 8011774:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011776:	7dfb      	ldrb	r3, [r7, #23]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3718      	adds	r7, #24
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801178a:	2300      	movs	r3, #0
 801178c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d101      	bne.n	8011798 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011794:	2303      	movs	r3, #3
 8011796:	e010      	b.n	80117ba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	683a      	ldr	r2, [r7, #0]
 801179c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117a8:	f107 020e 	add.w	r2, r7, #14
 80117ac:	4610      	mov	r0, r2
 80117ae:	4798      	blx	r3
 80117b0:	4602      	mov	r2, r0
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b082      	sub	sp, #8
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f001 fd2a 	bl	8013224 <USBD_LL_Start>
 80117d0:	4603      	mov	r3, r0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3708      	adds	r7, #8
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}

080117da <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80117da:	b480      	push	{r7}
 80117dc:	b083      	sub	sp, #12
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	370c      	adds	r7, #12
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80117fc:	2303      	movs	r3, #3
 80117fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011806:	2b00      	cmp	r3, #0
 8011808:	d009      	beq.n	801181e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	78fa      	ldrb	r2, [r7, #3]
 8011814:	4611      	mov	r1, r2
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	4798      	blx	r3
 801181a:	4603      	mov	r3, r0
 801181c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	460b      	mov	r3, r1
 8011832:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801183a:	2b00      	cmp	r3, #0
 801183c:	d007      	beq.n	801184e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	78fa      	ldrb	r2, [r7, #3]
 8011848:	4611      	mov	r1, r2
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	4798      	blx	r3
  }

  return USBD_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}

08011858 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011868:	6839      	ldr	r1, [r7, #0]
 801186a:	4618      	mov	r0, r3
 801186c:	f000 ff4c 	bl	8012708 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2201      	movs	r2, #1
 8011874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801187e:	461a      	mov	r2, r3
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801188c:	f003 031f 	and.w	r3, r3, #31
 8011890:	2b02      	cmp	r3, #2
 8011892:	d01a      	beq.n	80118ca <USBD_LL_SetupStage+0x72>
 8011894:	2b02      	cmp	r3, #2
 8011896:	d822      	bhi.n	80118de <USBD_LL_SetupStage+0x86>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <USBD_LL_SetupStage+0x4a>
 801189c:	2b01      	cmp	r3, #1
 801189e:	d00a      	beq.n	80118b6 <USBD_LL_SetupStage+0x5e>
 80118a0:	e01d      	b.n	80118de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118a8:	4619      	mov	r1, r3
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 fa20 	bl	8011cf0 <USBD_StdDevReq>
 80118b0:	4603      	mov	r3, r0
 80118b2:	73fb      	strb	r3, [r7, #15]
      break;
 80118b4:	e020      	b.n	80118f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118bc:	4619      	mov	r1, r3
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 fa84 	bl	8011dcc <USBD_StdItfReq>
 80118c4:	4603      	mov	r3, r0
 80118c6:	73fb      	strb	r3, [r7, #15]
      break;
 80118c8:	e016      	b.n	80118f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118d0:	4619      	mov	r1, r3
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f000 fac3 	bl	8011e5e <USBD_StdEPReq>
 80118d8:	4603      	mov	r3, r0
 80118da:	73fb      	strb	r3, [r7, #15]
      break;
 80118dc:	e00c      	b.n	80118f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80118e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	4619      	mov	r1, r3
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f001 fcf9 	bl	80132e4 <USBD_LL_StallEP>
 80118f2:	4603      	mov	r3, r0
 80118f4:	73fb      	strb	r3, [r7, #15]
      break;
 80118f6:	bf00      	nop
  }

  return ret;
 80118f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3710      	adds	r7, #16
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011902:	b580      	push	{r7, lr}
 8011904:	b086      	sub	sp, #24
 8011906:	af00      	add	r7, sp, #0
 8011908:	60f8      	str	r0, [r7, #12]
 801190a:	460b      	mov	r3, r1
 801190c:	607a      	str	r2, [r7, #4]
 801190e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011910:	7afb      	ldrb	r3, [r7, #11]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d138      	bne.n	8011988 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801191c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011924:	2b03      	cmp	r3, #3
 8011926:	d14c      	bne.n	80119c2 <USBD_LL_DataOutStage+0xc0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	689a      	ldr	r2, [r3, #8]
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	429a      	cmp	r2, r3
 8011932:	d913      	bls.n	801195c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	689a      	ldr	r2, [r3, #8]
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	1ad2      	subs	r2, r2, r3
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	68da      	ldr	r2, [r3, #12]
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	689b      	ldr	r3, [r3, #8]
 801194a:	4293      	cmp	r3, r2
 801194c:	bf28      	it	cs
 801194e:	4613      	movcs	r3, r2
 8011950:	461a      	mov	r2, r3
 8011952:	6879      	ldr	r1, [r7, #4]
 8011954:	68f8      	ldr	r0, [r7, #12]
 8011956:	f000 ffcb 	bl	80128f0 <USBD_CtlContinueRx>
 801195a:	e032      	b.n	80119c2 <USBD_LL_DataOutStage+0xc0>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d00b      	beq.n	8011980 <USBD_LL_DataOutStage+0x7e>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801196e:	b2db      	uxtb	r3, r3
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011970:	2b03      	cmp	r3, #3
 8011972:	d105      	bne.n	8011980 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801197a:	691b      	ldr	r3, [r3, #16]
 801197c:	68f8      	ldr	r0, [r7, #12]
 801197e:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011980:	68f8      	ldr	r0, [r7, #12]
 8011982:	f000 ffc6 	bl	8012912 <USBD_CtlSendStatus>
 8011986:	e01c      	b.n	80119c2 <USBD_LL_DataOutStage+0xc0>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801198e:	699b      	ldr	r3, [r3, #24]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d014      	beq.n	80119be <USBD_LL_DataOutStage+0xbc>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801199a:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataOut != NULL) &&
 801199c:	2b03      	cmp	r3, #3
 801199e:	d10e      	bne.n	80119be <USBD_LL_DataOutStage+0xbc>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a6:	699b      	ldr	r3, [r3, #24]
 80119a8:	7afa      	ldrb	r2, [r7, #11]
 80119aa:	4611      	mov	r1, r2
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	4798      	blx	r3
 80119b0:	4603      	mov	r3, r0
 80119b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80119b4:	7dfb      	ldrb	r3, [r7, #23]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d003      	beq.n	80119c2 <USBD_LL_DataOutStage+0xc0>
    {
      return ret;
 80119ba:	7dfb      	ldrb	r3, [r7, #23]
 80119bc:	e002      	b.n	80119c4 <USBD_LL_DataOutStage+0xc2>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80119be:	2303      	movs	r3, #3
 80119c0:	e000      	b.n	80119c4 <USBD_LL_DataOutStage+0xc2>
  }

  return USBD_OK;
 80119c2:	2300      	movs	r3, #0
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3718      	adds	r7, #24
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b086      	sub	sp, #24
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60f8      	str	r0, [r7, #12]
 80119d4:	460b      	mov	r3, r1
 80119d6:	607a      	str	r2, [r7, #4]
 80119d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80119da:	7afb      	ldrb	r3, [r7, #11]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d16b      	bne.n	8011ab8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	3314      	adds	r3, #20
 80119e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80119ec:	2b02      	cmp	r3, #2
 80119ee:	d156      	bne.n	8011a9e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	689a      	ldr	r2, [r3, #8]
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d914      	bls.n	8011a26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	689a      	ldr	r2, [r3, #8]
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	1ad2      	subs	r2, r2, r3
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	689b      	ldr	r3, [r3, #8]
 8011a0e:	461a      	mov	r2, r3
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	68f8      	ldr	r0, [r7, #12]
 8011a14:	f000 ff3e 	bl	8012894 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a18:	2300      	movs	r3, #0
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f001 fd0a 	bl	8013438 <USBD_LL_PrepareReceive>
 8011a24:	e03b      	b.n	8011a9e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	68da      	ldr	r2, [r3, #12]
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d11c      	bne.n	8011a6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	685a      	ldr	r2, [r3, #4]
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d316      	bcc.n	8011a6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	685a      	ldr	r2, [r3, #4]
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d20f      	bcs.n	8011a6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	2100      	movs	r1, #0
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f000 ff1f 	bl	8012894 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2200      	movs	r2, #0
 8011a5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011a5e:	2300      	movs	r3, #0
 8011a60:	2200      	movs	r2, #0
 8011a62:	2100      	movs	r1, #0
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f001 fce7 	bl	8013438 <USBD_LL_PrepareReceive>
 8011a6a:	e018      	b.n	8011a9e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00b      	beq.n	8011a90 <USBD_LL_DataInStage+0xc4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a7e:	b2db      	uxtb	r3, r3
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011a80:	2b03      	cmp	r3, #3
 8011a82:	d105      	bne.n	8011a90 <USBD_LL_DataInStage+0xc4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	68f8      	ldr	r0, [r7, #12]
 8011a8e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a90:	2180      	movs	r1, #128	; 0x80
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f001 fc26 	bl	80132e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f000 ff4d 	bl	8012938 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011aa4:	2b01      	cmp	r3, #1
 8011aa6:	d124      	bne.n	8011af2 <USBD_LL_DataInStage+0x126>
    {
      (void)USBD_RunTestMode(pdev);
 8011aa8:	68f8      	ldr	r0, [r7, #12]
 8011aaa:	f7ff fe96 	bl	80117da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011ab6:	e01c      	b.n	8011af2 <USBD_LL_DataInStage+0x126>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011abe:	695b      	ldr	r3, [r3, #20]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d014      	beq.n	8011aee <USBD_LL_DataInStage+0x122>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011aca:	b2db      	uxtb	r3, r3
  else if ((pdev->pClass->DataIn != NULL) &&
 8011acc:	2b03      	cmp	r3, #3
 8011ace:	d10e      	bne.n	8011aee <USBD_LL_DataInStage+0x122>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ad6:	695b      	ldr	r3, [r3, #20]
 8011ad8:	7afa      	ldrb	r2, [r7, #11]
 8011ada:	4611      	mov	r1, r2
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	4798      	blx	r3
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011ae4:	7dfb      	ldrb	r3, [r7, #23]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d003      	beq.n	8011af2 <USBD_LL_DataInStage+0x126>
    {
      return ret;
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
 8011aec:	e002      	b.n	8011af4 <USBD_LL_DataInStage+0x128>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011aee:	2303      	movs	r3, #3
 8011af0:	e000      	b.n	8011af4 <USBD_LL_DataInStage+0x128>
  }

  return USBD_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	3718      	adds	r7, #24
 8011af8:	46bd      	mov	sp, r7
 8011afa:	bd80      	pop	{r7, pc}

08011afc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b082      	sub	sp, #8
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2201      	movs	r2, #1
 8011b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d009      	beq.n	8011b40 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	6852      	ldr	r2, [r2, #4]
 8011b38:	b2d2      	uxtb	r2, r2
 8011b3a:	4611      	mov	r1, r2
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b40:	2340      	movs	r3, #64	; 0x40
 8011b42:	2200      	movs	r2, #0
 8011b44:	2100      	movs	r1, #0
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f001 fb87 	bl	801325a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2201      	movs	r2, #1
 8011b50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2240      	movs	r2, #64	; 0x40
 8011b58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011b5c:	2340      	movs	r3, #64	; 0x40
 8011b5e:	2200      	movs	r2, #0
 8011b60:	2180      	movs	r1, #128	; 0x80
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f001 fb79 	bl	801325a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2240      	movs	r2, #64	; 0x40
 8011b72:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011b74:	2300      	movs	r3, #0
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011b7e:	b480      	push	{r7}
 8011b80:	b083      	sub	sp, #12
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	6078      	str	r0, [r7, #4]
 8011b86:	460b      	mov	r3, r1
 8011b88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	78fa      	ldrb	r2, [r7, #3]
 8011b8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011b90:	2300      	movs	r3, #0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr

08011b9e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011b9e:	b480      	push	{r7}
 8011ba0:	b083      	sub	sp, #12
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bac:	b2da      	uxtb	r2, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2204      	movs	r2, #4
 8011bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	370c      	adds	r7, #12
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr

08011bca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011bca:	b480      	push	{r7}
 8011bcc:	b083      	sub	sp, #12
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	2b04      	cmp	r3, #4
 8011bdc:	d106      	bne.n	8011bec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	370c      	adds	r7, #12
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf8:	4770      	bx	lr

08011bfa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b082      	sub	sp, #8
 8011bfe:	af00      	add	r7, sp, #0
 8011c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	2b03      	cmp	r3, #3
 8011c0c:	d10b      	bne.n	8011c26 <USBD_LL_SOF+0x2c>
  {
    if (pdev->pClass->SOF != NULL)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c14:	69db      	ldr	r3, [r3, #28]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d005      	beq.n	8011c26 <USBD_LL_SOF+0x2c>
    {
      pdev->pClass->SOF(pdev);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c20:	69db      	ldr	r3, [r3, #28]
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011c26:	2300      	movs	r3, #0
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011c30:	b480      	push	{r7}
 8011c32:	b083      	sub	sp, #12
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	370c      	adds	r7, #12
 8011c42:	46bd      	mov	sp, r7
 8011c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c48:	4770      	bx	lr

08011c4a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011c4a:	b480      	push	{r7}
 8011c4c:	b083      	sub	sp, #12
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	460b      	mov	r3, r1
 8011c54:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011c56:	2300      	movs	r3, #0
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c62:	4770      	bx	lr

08011c64 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c6c:	2300      	movs	r3, #0
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	370c      	adds	r7, #12
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr

08011c7a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b082      	sub	sp, #8
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2201      	movs	r2, #1
 8011c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d009      	beq.n	8011ca8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c9a:	685b      	ldr	r3, [r3, #4]
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	6852      	ldr	r2, [r2, #4]
 8011ca0:	b2d2      	uxtb	r2, r2
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	4798      	blx	r3
  }

  return USBD_OK;
 8011ca8:	2300      	movs	r3, #0
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3708      	adds	r7, #8
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bd80      	pop	{r7, pc}

08011cb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011cb2:	b480      	push	{r7}
 8011cb4:	b087      	sub	sp, #28
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011cd0:	8a3b      	ldrh	r3, [r7, #16]
 8011cd2:	021b      	lsls	r3, r3, #8
 8011cd4:	b21a      	sxth	r2, r3
 8011cd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011cda:	4313      	orrs	r3, r2
 8011cdc:	b21b      	sxth	r3, r3
 8011cde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011ce0:	89fb      	ldrh	r3, [r7, #14]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	371c      	adds	r7, #28
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr
	...

08011cf0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d06:	2b40      	cmp	r3, #64	; 0x40
 8011d08:	d005      	beq.n	8011d16 <USBD_StdDevReq+0x26>
 8011d0a:	2b40      	cmp	r3, #64	; 0x40
 8011d0c:	d853      	bhi.n	8011db6 <USBD_StdDevReq+0xc6>
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d00b      	beq.n	8011d2a <USBD_StdDevReq+0x3a>
 8011d12:	2b20      	cmp	r3, #32
 8011d14:	d14f      	bne.n	8011db6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	6839      	ldr	r1, [r7, #0]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	4798      	blx	r3
 8011d24:	4603      	mov	r3, r0
 8011d26:	73fb      	strb	r3, [r7, #15]
    break;
 8011d28:	e04a      	b.n	8011dc0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	785b      	ldrb	r3, [r3, #1]
 8011d2e:	2b09      	cmp	r3, #9
 8011d30:	d83b      	bhi.n	8011daa <USBD_StdDevReq+0xba>
 8011d32:	a201      	add	r2, pc, #4	; (adr r2, 8011d38 <USBD_StdDevReq+0x48>)
 8011d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d38:	08011d8d 	.word	0x08011d8d
 8011d3c:	08011da1 	.word	0x08011da1
 8011d40:	08011dab 	.word	0x08011dab
 8011d44:	08011d97 	.word	0x08011d97
 8011d48:	08011dab 	.word	0x08011dab
 8011d4c:	08011d6b 	.word	0x08011d6b
 8011d50:	08011d61 	.word	0x08011d61
 8011d54:	08011dab 	.word	0x08011dab
 8011d58:	08011d83 	.word	0x08011d83
 8011d5c:	08011d75 	.word	0x08011d75
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011d60:	6839      	ldr	r1, [r7, #0]
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 f9dc 	bl	8012120 <USBD_GetDescriptor>
      break;
 8011d68:	e024      	b.n	8011db4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011d6a:	6839      	ldr	r1, [r7, #0]
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 fb41 	bl	80123f4 <USBD_SetAddress>
      break;
 8011d72:	e01f      	b.n	8011db4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 fb80 	bl	801247c <USBD_SetConfig>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d80:	e018      	b.n	8011db4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011d82:	6839      	ldr	r1, [r7, #0]
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f000 fc1f 	bl	80125c8 <USBD_GetConfig>
      break;
 8011d8a:	e013      	b.n	8011db4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011d8c:	6839      	ldr	r1, [r7, #0]
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f000 fc50 	bl	8012634 <USBD_GetStatus>
      break;
 8011d94:	e00e      	b.n	8011db4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f000 fc7f 	bl	801269c <USBD_SetFeature>
      break;
 8011d9e:	e009      	b.n	8011db4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011da0:	6839      	ldr	r1, [r7, #0]
 8011da2:	6878      	ldr	r0, [r7, #4]
 8011da4:	f000 fc8e 	bl	80126c4 <USBD_ClrFeature>
      break;
 8011da8:	e004      	b.n	8011db4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011daa:	6839      	ldr	r1, [r7, #0]
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	f000 fce5 	bl	801277c <USBD_CtlError>
      break;
 8011db2:	bf00      	nop
    }
    break;
 8011db4:	e004      	b.n	8011dc0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011db6:	6839      	ldr	r1, [r7, #0]
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f000 fcdf 	bl	801277c <USBD_CtlError>
    break;
 8011dbe:	bf00      	nop
  }

  return ret;
 8011dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop

08011dcc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011de2:	2b40      	cmp	r3, #64	; 0x40
 8011de4:	d005      	beq.n	8011df2 <USBD_StdItfReq+0x26>
 8011de6:	2b40      	cmp	r3, #64	; 0x40
 8011de8:	d82f      	bhi.n	8011e4a <USBD_StdItfReq+0x7e>
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d001      	beq.n	8011df2 <USBD_StdItfReq+0x26>
 8011dee:	2b20      	cmp	r3, #32
 8011df0:	d12b      	bne.n	8011e4a <USBD_StdItfReq+0x7e>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011df8:	b2db      	uxtb	r3, r3
 8011dfa:	3b01      	subs	r3, #1
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	d81d      	bhi.n	8011e3c <USBD_StdItfReq+0x70>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	889b      	ldrh	r3, [r3, #4]
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d813      	bhi.n	8011e32 <USBD_StdItfReq+0x66>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	4798      	blx	r3
 8011e18:	4603      	mov	r3, r0
 8011e1a:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	88db      	ldrh	r3, [r3, #6]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d110      	bne.n	8011e46 <USBD_StdItfReq+0x7a>
 8011e24:	7bfb      	ldrb	r3, [r7, #15]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d10d      	bne.n	8011e46 <USBD_StdItfReq+0x7a>
        {
          (void)USBD_CtlSendStatus(pdev);
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f000 fd71 	bl	8012912 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8011e30:	e009      	b.n	8011e46 <USBD_StdItfReq+0x7a>
        USBD_CtlError(pdev, req);
 8011e32:	6839      	ldr	r1, [r7, #0]
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 fca1 	bl	801277c <USBD_CtlError>
      break;
 8011e3a:	e004      	b.n	8011e46 <USBD_StdItfReq+0x7a>

    default:
      USBD_CtlError(pdev, req);
 8011e3c:	6839      	ldr	r1, [r7, #0]
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 fc9c 	bl	801277c <USBD_CtlError>
      break;
 8011e44:	e000      	b.n	8011e48 <USBD_StdItfReq+0x7c>
      break;
 8011e46:	bf00      	nop
    }
    break;
 8011e48:	e004      	b.n	8011e54 <USBD_StdItfReq+0x88>

  default:
    USBD_CtlError(pdev, req);
 8011e4a:	6839      	ldr	r1, [r7, #0]
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f000 fc95 	bl	801277c <USBD_CtlError>
    break;
 8011e52:	bf00      	nop
  }

  return ret;
 8011e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b084      	sub	sp, #16
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
 8011e66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	889b      	ldrh	r3, [r3, #4]
 8011e70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e7a:	2b40      	cmp	r3, #64	; 0x40
 8011e7c:	d007      	beq.n	8011e8e <USBD_StdEPReq+0x30>
 8011e7e:	2b40      	cmp	r3, #64	; 0x40
 8011e80:	f200 8143 	bhi.w	801210a <USBD_StdEPReq+0x2ac>
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d00c      	beq.n	8011ea2 <USBD_StdEPReq+0x44>
 8011e88:	2b20      	cmp	r3, #32
 8011e8a:	f040 813e 	bne.w	801210a <USBD_StdEPReq+0x2ac>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e94:	689b      	ldr	r3, [r3, #8]
 8011e96:	6839      	ldr	r1, [r7, #0]
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	4798      	blx	r3
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8011ea0:	e138      	b.n	8012114 <USBD_StdEPReq+0x2b6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	785b      	ldrb	r3, [r3, #1]
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d007      	beq.n	8011eba <USBD_StdEPReq+0x5c>
 8011eaa:	2b03      	cmp	r3, #3
 8011eac:	f300 8127 	bgt.w	80120fe <USBD_StdEPReq+0x2a0>
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d07d      	beq.n	8011fb0 <USBD_StdEPReq+0x152>
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d03c      	beq.n	8011f32 <USBD_StdEPReq+0xd4>
 8011eb8:	e121      	b.n	80120fe <USBD_StdEPReq+0x2a0>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	2b02      	cmp	r3, #2
 8011ec4:	d002      	beq.n	8011ecc <USBD_StdEPReq+0x6e>
 8011ec6:	2b03      	cmp	r3, #3
 8011ec8:	d016      	beq.n	8011ef8 <USBD_StdEPReq+0x9a>
 8011eca:	e02c      	b.n	8011f26 <USBD_StdEPReq+0xc8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ecc:	7bbb      	ldrb	r3, [r7, #14]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00d      	beq.n	8011eee <USBD_StdEPReq+0x90>
 8011ed2:	7bbb      	ldrb	r3, [r7, #14]
 8011ed4:	2b80      	cmp	r3, #128	; 0x80
 8011ed6:	d00a      	beq.n	8011eee <USBD_StdEPReq+0x90>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ed8:	7bbb      	ldrb	r3, [r7, #14]
 8011eda:	4619      	mov	r1, r3
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f001 fa01 	bl	80132e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ee2:	2180      	movs	r1, #128	; 0x80
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f001 f9fd 	bl	80132e4 <USBD_LL_StallEP>
 8011eea:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011eec:	e020      	b.n	8011f30 <USBD_StdEPReq+0xd2>
          USBD_CtlError(pdev, req);
 8011eee:	6839      	ldr	r1, [r7, #0]
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f000 fc43 	bl	801277c <USBD_CtlError>
        break;
 8011ef6:	e01b      	b.n	8011f30 <USBD_StdEPReq+0xd2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	885b      	ldrh	r3, [r3, #2]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d10e      	bne.n	8011f1e <USBD_StdEPReq+0xc0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011f00:	7bbb      	ldrb	r3, [r7, #14]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d00b      	beq.n	8011f1e <USBD_StdEPReq+0xc0>
 8011f06:	7bbb      	ldrb	r3, [r7, #14]
 8011f08:	2b80      	cmp	r3, #128	; 0x80
 8011f0a:	d008      	beq.n	8011f1e <USBD_StdEPReq+0xc0>
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	88db      	ldrh	r3, [r3, #6]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d104      	bne.n	8011f1e <USBD_StdEPReq+0xc0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f14:	7bbb      	ldrb	r3, [r7, #14]
 8011f16:	4619      	mov	r1, r3
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f001 f9e3 	bl	80132e4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 fcf7 	bl	8012912 <USBD_CtlSendStatus>

        break;
 8011f24:	e004      	b.n	8011f30 <USBD_StdEPReq+0xd2>

      default:
        USBD_CtlError(pdev, req);
 8011f26:	6839      	ldr	r1, [r7, #0]
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 fc27 	bl	801277c <USBD_CtlError>
        break;
 8011f2e:	bf00      	nop
      }
      break;
 8011f30:	e0ea      	b.n	8012108 <USBD_StdEPReq+0x2aa>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d002      	beq.n	8011f44 <USBD_StdEPReq+0xe6>
 8011f3e:	2b03      	cmp	r3, #3
 8011f40:	d016      	beq.n	8011f70 <USBD_StdEPReq+0x112>
 8011f42:	e02e      	b.n	8011fa2 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f44:	7bbb      	ldrb	r3, [r7, #14]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00d      	beq.n	8011f66 <USBD_StdEPReq+0x108>
 8011f4a:	7bbb      	ldrb	r3, [r7, #14]
 8011f4c:	2b80      	cmp	r3, #128	; 0x80
 8011f4e:	d00a      	beq.n	8011f66 <USBD_StdEPReq+0x108>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f50:	7bbb      	ldrb	r3, [r7, #14]
 8011f52:	4619      	mov	r1, r3
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f001 f9c5 	bl	80132e4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f5a:	2180      	movs	r1, #128	; 0x80
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f001 f9c1 	bl	80132e4 <USBD_LL_StallEP>
 8011f62:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8011f64:	e023      	b.n	8011fae <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8011f66:	6839      	ldr	r1, [r7, #0]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 fc07 	bl	801277c <USBD_CtlError>
        break;
 8011f6e:	e01e      	b.n	8011fae <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	885b      	ldrh	r3, [r3, #2]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d119      	bne.n	8011fac <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011f78:	7bbb      	ldrb	r3, [r7, #14]
 8011f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d004      	beq.n	8011f8c <USBD_StdEPReq+0x12e>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f82:	7bbb      	ldrb	r3, [r7, #14]
 8011f84:	4619      	mov	r1, r3
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f001 f9cb 	bl	8013322 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f000 fcc0 	bl	8012912 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f98:	689b      	ldr	r3, [r3, #8]
 8011f9a:	6839      	ldr	r1, [r7, #0]
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	4798      	blx	r3
        }
        break;
 8011fa0:	e004      	b.n	8011fac <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8011fa2:	6839      	ldr	r1, [r7, #0]
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f000 fbe9 	bl	801277c <USBD_CtlError>
        break;
 8011faa:	e000      	b.n	8011fae <USBD_StdEPReq+0x150>
        break;
 8011fac:	bf00      	nop
      }
      break;
 8011fae:	e0ab      	b.n	8012108 <USBD_StdEPReq+0x2aa>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	2b02      	cmp	r3, #2
 8011fba:	d002      	beq.n	8011fc2 <USBD_StdEPReq+0x164>
 8011fbc:	2b03      	cmp	r3, #3
 8011fbe:	d032      	beq.n	8012026 <USBD_StdEPReq+0x1c8>
 8011fc0:	e097      	b.n	80120f2 <USBD_StdEPReq+0x294>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fc2:	7bbb      	ldrb	r3, [r7, #14]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d007      	beq.n	8011fd8 <USBD_StdEPReq+0x17a>
 8011fc8:	7bbb      	ldrb	r3, [r7, #14]
 8011fca:	2b80      	cmp	r3, #128	; 0x80
 8011fcc:	d004      	beq.n	8011fd8 <USBD_StdEPReq+0x17a>
        {
          USBD_CtlError(pdev, req);
 8011fce:	6839      	ldr	r1, [r7, #0]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 fbd3 	bl	801277c <USBD_CtlError>
          break;
 8011fd6:	e091      	b.n	80120fc <USBD_StdEPReq+0x29e>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da0b      	bge.n	8011ff8 <USBD_StdEPReq+0x19a>
 8011fe0:	7bbb      	ldrb	r3, [r7, #14]
 8011fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	4413      	add	r3, r2
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	3310      	adds	r3, #16
 8011ff0:	687a      	ldr	r2, [r7, #4]
 8011ff2:	4413      	add	r3, r2
 8011ff4:	3304      	adds	r3, #4
 8011ff6:	e00b      	b.n	8012010 <USBD_StdEPReq+0x1b2>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011ff8:	7bbb      	ldrb	r3, [r7, #14]
 8011ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ffe:	4613      	mov	r3, r2
 8012000:	009b      	lsls	r3, r3, #2
 8012002:	4413      	add	r3, r2
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	4413      	add	r3, r2
 801200e:	3304      	adds	r3, #4
 8012010:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	2200      	movs	r2, #0
 8012016:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	2202      	movs	r2, #2
 801201c:	4619      	mov	r1, r3
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f000 fc1d 	bl	801285e <USBD_CtlSendData>
        break;
 8012024:	e06a      	b.n	80120fc <USBD_StdEPReq+0x29e>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012026:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801202a:	2b00      	cmp	r3, #0
 801202c:	da11      	bge.n	8012052 <USBD_StdEPReq+0x1f4>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801202e:	7bbb      	ldrb	r3, [r7, #14]
 8012030:	f003 020f 	and.w	r2, r3, #15
 8012034:	6879      	ldr	r1, [r7, #4]
 8012036:	4613      	mov	r3, r2
 8012038:	009b      	lsls	r3, r3, #2
 801203a:	4413      	add	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	440b      	add	r3, r1
 8012040:	3324      	adds	r3, #36	; 0x24
 8012042:	881b      	ldrh	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d117      	bne.n	8012078 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 8012048:	6839      	ldr	r1, [r7, #0]
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f000 fb96 	bl	801277c <USBD_CtlError>
            break;
 8012050:	e054      	b.n	80120fc <USBD_StdEPReq+0x29e>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012052:	7bbb      	ldrb	r3, [r7, #14]
 8012054:	f003 020f 	and.w	r2, r3, #15
 8012058:	6879      	ldr	r1, [r7, #4]
 801205a:	4613      	mov	r3, r2
 801205c:	009b      	lsls	r3, r3, #2
 801205e:	4413      	add	r3, r2
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	440b      	add	r3, r1
 8012064:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012068:	881b      	ldrh	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d104      	bne.n	8012078 <USBD_StdEPReq+0x21a>
          {
            USBD_CtlError(pdev, req);
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fb83 	bl	801277c <USBD_CtlError>
            break;
 8012076:	e041      	b.n	80120fc <USBD_StdEPReq+0x29e>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801207c:	2b00      	cmp	r3, #0
 801207e:	da0b      	bge.n	8012098 <USBD_StdEPReq+0x23a>
 8012080:	7bbb      	ldrb	r3, [r7, #14]
 8012082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012086:	4613      	mov	r3, r2
 8012088:	009b      	lsls	r3, r3, #2
 801208a:	4413      	add	r3, r2
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	3310      	adds	r3, #16
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	4413      	add	r3, r2
 8012094:	3304      	adds	r3, #4
 8012096:	e00b      	b.n	80120b0 <USBD_StdEPReq+0x252>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012098:	7bbb      	ldrb	r3, [r7, #14]
 801209a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801209e:	4613      	mov	r3, r2
 80120a0:	009b      	lsls	r3, r3, #2
 80120a2:	4413      	add	r3, r2
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	4413      	add	r3, r2
 80120ae:	3304      	adds	r3, #4
 80120b0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80120b2:	7bbb      	ldrb	r3, [r7, #14]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d002      	beq.n	80120be <USBD_StdEPReq+0x260>
 80120b8:	7bbb      	ldrb	r3, [r7, #14]
 80120ba:	2b80      	cmp	r3, #128	; 0x80
 80120bc:	d103      	bne.n	80120c6 <USBD_StdEPReq+0x268>
          {
            pep->status = 0x0000U;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	2200      	movs	r2, #0
 80120c2:	601a      	str	r2, [r3, #0]
 80120c4:	e00e      	b.n	80120e4 <USBD_StdEPReq+0x286>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120c6:	7bbb      	ldrb	r3, [r7, #14]
 80120c8:	4619      	mov	r1, r3
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f001 f948 	bl	8013360 <USBD_LL_IsStallEP>
 80120d0:	4603      	mov	r3, r0
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d003      	beq.n	80120de <USBD_StdEPReq+0x280>
          {
            pep->status = 0x0001U;
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	2201      	movs	r2, #1
 80120da:	601a      	str	r2, [r3, #0]
 80120dc:	e002      	b.n	80120e4 <USBD_StdEPReq+0x286>
          }
          else
          {
            pep->status = 0x0000U;
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	2200      	movs	r2, #0
 80120e2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	2202      	movs	r2, #2
 80120e8:	4619      	mov	r1, r3
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f000 fbb7 	bl	801285e <USBD_CtlSendData>
          break;
 80120f0:	e004      	b.n	80120fc <USBD_StdEPReq+0x29e>

      default:
        USBD_CtlError(pdev, req);
 80120f2:	6839      	ldr	r1, [r7, #0]
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f000 fb41 	bl	801277c <USBD_CtlError>
        break;
 80120fa:	bf00      	nop
      }
      break;
 80120fc:	e004      	b.n	8012108 <USBD_StdEPReq+0x2aa>

    default:
      USBD_CtlError(pdev, req);
 80120fe:	6839      	ldr	r1, [r7, #0]
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f000 fb3b 	bl	801277c <USBD_CtlError>
      break;
 8012106:	bf00      	nop
    }
    break;
 8012108:	e004      	b.n	8012114 <USBD_StdEPReq+0x2b6>

  default:
    USBD_CtlError(pdev, req);
 801210a:	6839      	ldr	r1, [r7, #0]
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 fb35 	bl	801277c <USBD_CtlError>
    break;
 8012112:	bf00      	nop
  }

  return ret;
 8012114:	7bfb      	ldrb	r3, [r7, #15]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801212a:	2300      	movs	r3, #0
 801212c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801212e:	2300      	movs	r3, #0
 8012130:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012132:	2300      	movs	r3, #0
 8012134:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	885b      	ldrh	r3, [r3, #2]
 801213a:	0a1b      	lsrs	r3, r3, #8
 801213c:	b29b      	uxth	r3, r3
 801213e:	3b01      	subs	r3, #1
 8012140:	2b06      	cmp	r3, #6
 8012142:	f200 8128 	bhi.w	8012396 <USBD_GetDescriptor+0x276>
 8012146:	a201      	add	r2, pc, #4	; (adr r2, 801214c <USBD_GetDescriptor+0x2c>)
 8012148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801214c:	08012169 	.word	0x08012169
 8012150:	08012181 	.word	0x08012181
 8012154:	080121c1 	.word	0x080121c1
 8012158:	08012397 	.word	0x08012397
 801215c:	08012397 	.word	0x08012397
 8012160:	08012337 	.word	0x08012337
 8012164:	08012363 	.word	0x08012363
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	7c12      	ldrb	r2, [r2, #16]
 8012174:	f107 0108 	add.w	r1, r7, #8
 8012178:	4610      	mov	r0, r2
 801217a:	4798      	blx	r3
 801217c:	60f8      	str	r0, [r7, #12]
    break;
 801217e:	e112      	b.n	80123a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	7c1b      	ldrb	r3, [r3, #16]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d10d      	bne.n	80121a4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012190:	f107 0208 	add.w	r2, r7, #8
 8012194:	4610      	mov	r0, r2
 8012196:	4798      	blx	r3
 8012198:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3301      	adds	r3, #1
 801219e:	2202      	movs	r2, #2
 80121a0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80121a2:	e100      	b.n	80123a6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ac:	f107 0208 	add.w	r2, r7, #8
 80121b0:	4610      	mov	r0, r2
 80121b2:	4798      	blx	r3
 80121b4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	3301      	adds	r3, #1
 80121ba:	2202      	movs	r2, #2
 80121bc:	701a      	strb	r2, [r3, #0]
    break;
 80121be:	e0f2      	b.n	80123a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	885b      	ldrh	r3, [r3, #2]
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	2b05      	cmp	r3, #5
 80121c8:	f200 80ac 	bhi.w	8012324 <USBD_GetDescriptor+0x204>
 80121cc:	a201      	add	r2, pc, #4	; (adr r2, 80121d4 <USBD_GetDescriptor+0xb4>)
 80121ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121d2:	bf00      	nop
 80121d4:	080121ed 	.word	0x080121ed
 80121d8:	08012221 	.word	0x08012221
 80121dc:	08012255 	.word	0x08012255
 80121e0:	08012289 	.word	0x08012289
 80121e4:	080122bd 	.word	0x080122bd
 80121e8:	080122f1 	.word	0x080122f1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00b      	beq.n	8012210 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	7c12      	ldrb	r2, [r2, #16]
 8012204:	f107 0108 	add.w	r1, r7, #8
 8012208:	4610      	mov	r0, r2
 801220a:	4798      	blx	r3
 801220c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801220e:	e091      	b.n	8012334 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012210:	6839      	ldr	r1, [r7, #0]
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 fab2 	bl	801277c <USBD_CtlError>
        err++;
 8012218:	7afb      	ldrb	r3, [r7, #11]
 801221a:	3301      	adds	r3, #1
 801221c:	72fb      	strb	r3, [r7, #11]
      break;
 801221e:	e089      	b.n	8012334 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d00b      	beq.n	8012244 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012232:	689b      	ldr	r3, [r3, #8]
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	7c12      	ldrb	r2, [r2, #16]
 8012238:	f107 0108 	add.w	r1, r7, #8
 801223c:	4610      	mov	r0, r2
 801223e:	4798      	blx	r3
 8012240:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012242:	e077      	b.n	8012334 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012244:	6839      	ldr	r1, [r7, #0]
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 fa98 	bl	801277c <USBD_CtlError>
        err++;
 801224c:	7afb      	ldrb	r3, [r7, #11]
 801224e:	3301      	adds	r3, #1
 8012250:	72fb      	strb	r3, [r7, #11]
      break;
 8012252:	e06f      	b.n	8012334 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00b      	beq.n	8012278 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	687a      	ldr	r2, [r7, #4]
 801226a:	7c12      	ldrb	r2, [r2, #16]
 801226c:	f107 0108 	add.w	r1, r7, #8
 8012270:	4610      	mov	r0, r2
 8012272:	4798      	blx	r3
 8012274:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012276:	e05d      	b.n	8012334 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f000 fa7e 	bl	801277c <USBD_CtlError>
        err++;
 8012280:	7afb      	ldrb	r3, [r7, #11]
 8012282:	3301      	adds	r3, #1
 8012284:	72fb      	strb	r3, [r7, #11]
      break;
 8012286:	e055      	b.n	8012334 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801228e:	691b      	ldr	r3, [r3, #16]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d00b      	beq.n	80122ac <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801229a:	691b      	ldr	r3, [r3, #16]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	7c12      	ldrb	r2, [r2, #16]
 80122a0:	f107 0108 	add.w	r1, r7, #8
 80122a4:	4610      	mov	r0, r2
 80122a6:	4798      	blx	r3
 80122a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122aa:	e043      	b.n	8012334 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80122ac:	6839      	ldr	r1, [r7, #0]
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fa64 	bl	801277c <USBD_CtlError>
        err++;
 80122b4:	7afb      	ldrb	r3, [r7, #11]
 80122b6:	3301      	adds	r3, #1
 80122b8:	72fb      	strb	r3, [r7, #11]
      break;
 80122ba:	e03b      	b.n	8012334 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122c2:	695b      	ldr	r3, [r3, #20]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00b      	beq.n	80122e0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122ce:	695b      	ldr	r3, [r3, #20]
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	7c12      	ldrb	r2, [r2, #16]
 80122d4:	f107 0108 	add.w	r1, r7, #8
 80122d8:	4610      	mov	r0, r2
 80122da:	4798      	blx	r3
 80122dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80122de:	e029      	b.n	8012334 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80122e0:	6839      	ldr	r1, [r7, #0]
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f000 fa4a 	bl	801277c <USBD_CtlError>
        err++;
 80122e8:	7afb      	ldrb	r3, [r7, #11]
 80122ea:	3301      	adds	r3, #1
 80122ec:	72fb      	strb	r3, [r7, #11]
      break;
 80122ee:	e021      	b.n	8012334 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122f6:	699b      	ldr	r3, [r3, #24]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d00b      	beq.n	8012314 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012302:	699b      	ldr	r3, [r3, #24]
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	7c12      	ldrb	r2, [r2, #16]
 8012308:	f107 0108 	add.w	r1, r7, #8
 801230c:	4610      	mov	r0, r2
 801230e:	4798      	blx	r3
 8012310:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012312:	e00f      	b.n	8012334 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8012314:	6839      	ldr	r1, [r7, #0]
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f000 fa30 	bl	801277c <USBD_CtlError>
        err++;
 801231c:	7afb      	ldrb	r3, [r7, #11]
 801231e:	3301      	adds	r3, #1
 8012320:	72fb      	strb	r3, [r7, #11]
      break;
 8012322:	e007      	b.n	8012334 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012324:	6839      	ldr	r1, [r7, #0]
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 fa28 	bl	801277c <USBD_CtlError>
      err++;
 801232c:	7afb      	ldrb	r3, [r7, #11]
 801232e:	3301      	adds	r3, #1
 8012330:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8012332:	bf00      	nop
    }
    break;
 8012334:	e037      	b.n	80123a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	7c1b      	ldrb	r3, [r3, #16]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d109      	bne.n	8012352 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012346:	f107 0208 	add.w	r2, r7, #8
 801234a:	4610      	mov	r0, r2
 801234c:	4798      	blx	r3
 801234e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012350:	e029      	b.n	80123a6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012352:	6839      	ldr	r1, [r7, #0]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	f000 fa11 	bl	801277c <USBD_CtlError>
      err++;
 801235a:	7afb      	ldrb	r3, [r7, #11]
 801235c:	3301      	adds	r3, #1
 801235e:	72fb      	strb	r3, [r7, #11]
    break;
 8012360:	e021      	b.n	80123a6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	7c1b      	ldrb	r3, [r3, #16]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d10d      	bne.n	8012386 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012372:	f107 0208 	add.w	r2, r7, #8
 8012376:	4610      	mov	r0, r2
 8012378:	4798      	blx	r3
 801237a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3301      	adds	r3, #1
 8012380:	2207      	movs	r2, #7
 8012382:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012384:	e00f      	b.n	80123a6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8012386:	6839      	ldr	r1, [r7, #0]
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f9f7 	bl	801277c <USBD_CtlError>
      err++;
 801238e:	7afb      	ldrb	r3, [r7, #11]
 8012390:	3301      	adds	r3, #1
 8012392:	72fb      	strb	r3, [r7, #11]
    break;
 8012394:	e007      	b.n	80123a6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8012396:	6839      	ldr	r1, [r7, #0]
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f000 f9ef 	bl	801277c <USBD_CtlError>
    err++;
 801239e:	7afb      	ldrb	r3, [r7, #11]
 80123a0:	3301      	adds	r3, #1
 80123a2:	72fb      	strb	r3, [r7, #11]
    break;
 80123a4:	bf00      	nop
  }

  if (err != 0U)
 80123a6:	7afb      	ldrb	r3, [r7, #11]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d11e      	bne.n	80123ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	88db      	ldrh	r3, [r3, #6]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d016      	beq.n	80123e2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80123b4:	893b      	ldrh	r3, [r7, #8]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00e      	beq.n	80123d8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	88da      	ldrh	r2, [r3, #6]
 80123be:	893b      	ldrh	r3, [r7, #8]
 80123c0:	4293      	cmp	r3, r2
 80123c2:	bf28      	it	cs
 80123c4:	4613      	movcs	r3, r2
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80123ca:	893b      	ldrh	r3, [r7, #8]
 80123cc:	461a      	mov	r2, r3
 80123ce:	68f9      	ldr	r1, [r7, #12]
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 fa44 	bl	801285e <USBD_CtlSendData>
 80123d6:	e009      	b.n	80123ec <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80123d8:	6839      	ldr	r1, [r7, #0]
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f000 f9ce 	bl	801277c <USBD_CtlError>
 80123e0:	e004      	b.n	80123ec <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 fa95 	bl	8012912 <USBD_CtlSendStatus>
 80123e8:	e000      	b.n	80123ec <USBD_GetDescriptor+0x2cc>
    return;
 80123ea:	bf00      	nop
    }
  }
}
 80123ec:	3710      	adds	r7, #16
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop

080123f4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	889b      	ldrh	r3, [r3, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d131      	bne.n	801246a <USBD_SetAddress+0x76>
 8012406:	683b      	ldr	r3, [r7, #0]
 8012408:	88db      	ldrh	r3, [r3, #6]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d12d      	bne.n	801246a <USBD_SetAddress+0x76>
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	885b      	ldrh	r3, [r3, #2]
 8012412:	2b7f      	cmp	r3, #127	; 0x7f
 8012414:	d829      	bhi.n	801246a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	885b      	ldrh	r3, [r3, #2]
 801241a:	b2db      	uxtb	r3, r3
 801241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012420:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012428:	b2db      	uxtb	r3, r3
 801242a:	2b03      	cmp	r3, #3
 801242c:	d104      	bne.n	8012438 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801242e:	6839      	ldr	r1, [r7, #0]
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f000 f9a3 	bl	801277c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012436:	e01d      	b.n	8012474 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	7bfa      	ldrb	r2, [r7, #15]
 801243c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012440:	7bfb      	ldrb	r3, [r7, #15]
 8012442:	4619      	mov	r1, r3
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 ffb7 	bl	80133b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 fa61 	bl	8012912 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012450:	7bfb      	ldrb	r3, [r7, #15]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d004      	beq.n	8012460 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2202      	movs	r2, #2
 801245a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801245e:	e009      	b.n	8012474 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2201      	movs	r2, #1
 8012464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012468:	e004      	b.n	8012474 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801246a:	6839      	ldr	r1, [r7, #0]
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f000 f985 	bl	801277c <USBD_CtlError>
  }
}
 8012472:	bf00      	nop
 8012474:	bf00      	nop
 8012476:	3710      	adds	r7, #16
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
 8012484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012486:	2300      	movs	r3, #0
 8012488:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	885b      	ldrh	r3, [r3, #2]
 801248e:	b2da      	uxtb	r2, r3
 8012490:	4b4c      	ldr	r3, [pc, #304]	; (80125c4 <USBD_SetConfig+0x148>)
 8012492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012494:	4b4b      	ldr	r3, [pc, #300]	; (80125c4 <USBD_SetConfig+0x148>)
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	2b01      	cmp	r3, #1
 801249a:	d905      	bls.n	80124a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801249c:	6839      	ldr	r1, [r7, #0]
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f000 f96c 	bl	801277c <USBD_CtlError>
    return USBD_FAIL;
 80124a4:	2303      	movs	r3, #3
 80124a6:	e088      	b.n	80125ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2b02      	cmp	r3, #2
 80124b2:	d002      	beq.n	80124ba <USBD_SetConfig+0x3e>
 80124b4:	2b03      	cmp	r3, #3
 80124b6:	d025      	beq.n	8012504 <USBD_SetConfig+0x88>
 80124b8:	e071      	b.n	801259e <USBD_SetConfig+0x122>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80124ba:	4b42      	ldr	r3, [pc, #264]	; (80125c4 <USBD_SetConfig+0x148>)
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d01c      	beq.n	80124fc <USBD_SetConfig+0x80>
    {
      pdev->dev_config = cfgidx;
 80124c2:	4b40      	ldr	r3, [pc, #256]	; (80125c4 <USBD_SetConfig+0x148>)
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	461a      	mov	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80124cc:	4b3d      	ldr	r3, [pc, #244]	; (80125c4 <USBD_SetConfig+0x148>)
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	4619      	mov	r1, r3
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f7ff f98c 	bl	80117f0 <USBD_SetClassConfig>
 80124d8:	4603      	mov	r3, r0
 80124da:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80124dc:	7bfb      	ldrb	r3, [r7, #15]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d004      	beq.n	80124ec <USBD_SetConfig+0x70>
      {
        USBD_CtlError(pdev, req);
 80124e2:	6839      	ldr	r1, [r7, #0]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f000 f949 	bl	801277c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80124ea:	e065      	b.n	80125b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 fa10 	bl	8012912 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2203      	movs	r2, #3
 80124f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80124fa:	e05d      	b.n	80125b8 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f000 fa08 	bl	8012912 <USBD_CtlSendStatus>
    break;
 8012502:	e059      	b.n	80125b8 <USBD_SetConfig+0x13c>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012504:	4b2f      	ldr	r3, [pc, #188]	; (80125c4 <USBD_SetConfig+0x148>)
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d112      	bne.n	8012532 <USBD_SetConfig+0xb6>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2202      	movs	r2, #2
 8012510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012514:	4b2b      	ldr	r3, [pc, #172]	; (80125c4 <USBD_SetConfig+0x148>)
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	461a      	mov	r2, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801251e:	4b29      	ldr	r3, [pc, #164]	; (80125c4 <USBD_SetConfig+0x148>)
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	4619      	mov	r1, r3
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff f97f 	bl	8011828 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 f9f1 	bl	8012912 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012530:	e042      	b.n	80125b8 <USBD_SetConfig+0x13c>
    else if (cfgidx != pdev->dev_config)
 8012532:	4b24      	ldr	r3, [pc, #144]	; (80125c4 <USBD_SetConfig+0x148>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	461a      	mov	r2, r3
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	429a      	cmp	r2, r3
 801253e:	d02a      	beq.n	8012596 <USBD_SetConfig+0x11a>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	b2db      	uxtb	r3, r3
 8012546:	4619      	mov	r1, r3
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7ff f96d 	bl	8011828 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801254e:	4b1d      	ldr	r3, [pc, #116]	; (80125c4 <USBD_SetConfig+0x148>)
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	461a      	mov	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012558:	4b1a      	ldr	r3, [pc, #104]	; (80125c4 <USBD_SetConfig+0x148>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	4619      	mov	r1, r3
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f7ff f946 	bl	80117f0 <USBD_SetClassConfig>
 8012564:	4603      	mov	r3, r0
 8012566:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012568:	7bfb      	ldrb	r3, [r7, #15]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d00f      	beq.n	801258e <USBD_SetConfig+0x112>
        USBD_CtlError(pdev, req);
 801256e:	6839      	ldr	r1, [r7, #0]
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 f903 	bl	801277c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	b2db      	uxtb	r3, r3
 801257c:	4619      	mov	r1, r3
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff f952 	bl	8011828 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2202      	movs	r2, #2
 8012588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801258c:	e014      	b.n	80125b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 f9bf 	bl	8012912 <USBD_CtlSendStatus>
    break;
 8012594:	e010      	b.n	80125b8 <USBD_SetConfig+0x13c>
      (void)USBD_CtlSendStatus(pdev);
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 f9bb 	bl	8012912 <USBD_CtlSendStatus>
    break;
 801259c:	e00c      	b.n	80125b8 <USBD_SetConfig+0x13c>

  default:
    USBD_CtlError(pdev, req);
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 f8eb 	bl	801277c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80125a6:	4b07      	ldr	r3, [pc, #28]	; (80125c4 <USBD_SetConfig+0x148>)
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	4619      	mov	r1, r3
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff f93b 	bl	8011828 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80125b2:	2303      	movs	r3, #3
 80125b4:	73fb      	strb	r3, [r7, #15]
    break;
 80125b6:	bf00      	nop
  }

  return ret;
 80125b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80125ba:	4618      	mov	r0, r3
 80125bc:	3710      	adds	r7, #16
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
 80125c2:	bf00      	nop
 80125c4:	2400037c 	.word	0x2400037c

080125c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
 80125d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	88db      	ldrh	r3, [r3, #6]
 80125d6:	2b01      	cmp	r3, #1
 80125d8:	d004      	beq.n	80125e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80125da:	6839      	ldr	r1, [r7, #0]
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f000 f8cd 	bl	801277c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80125e2:	e023      	b.n	801262c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	2b02      	cmp	r3, #2
 80125ee:	dc02      	bgt.n	80125f6 <USBD_GetConfig+0x2e>
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	dc03      	bgt.n	80125fc <USBD_GetConfig+0x34>
 80125f4:	e015      	b.n	8012622 <USBD_GetConfig+0x5a>
 80125f6:	2b03      	cmp	r3, #3
 80125f8:	d00b      	beq.n	8012612 <USBD_GetConfig+0x4a>
 80125fa:	e012      	b.n	8012622 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0U;
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2200      	movs	r2, #0
 8012600:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	3308      	adds	r3, #8
 8012606:	2201      	movs	r2, #1
 8012608:	4619      	mov	r1, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 f927 	bl	801285e <USBD_CtlSendData>
      break;
 8012610:	e00c      	b.n	801262c <USBD_GetConfig+0x64>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3304      	adds	r3, #4
 8012616:	2201      	movs	r2, #1
 8012618:	4619      	mov	r1, r3
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f000 f91f 	bl	801285e <USBD_CtlSendData>
      break;
 8012620:	e004      	b.n	801262c <USBD_GetConfig+0x64>
      USBD_CtlError(pdev, req);
 8012622:	6839      	ldr	r1, [r7, #0]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 f8a9 	bl	801277c <USBD_CtlError>
      break;
 801262a:	bf00      	nop
}
 801262c:	bf00      	nop
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b082      	sub	sp, #8
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012644:	b2db      	uxtb	r3, r3
 8012646:	3b01      	subs	r3, #1
 8012648:	2b02      	cmp	r3, #2
 801264a:	d81e      	bhi.n	801268a <USBD_GetStatus+0x56>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	88db      	ldrh	r3, [r3, #6]
 8012650:	2b02      	cmp	r3, #2
 8012652:	d004      	beq.n	801265e <USBD_GetStatus+0x2a>
    {
      USBD_CtlError(pdev, req);
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f000 f890 	bl	801277c <USBD_CtlError>
      break;
 801265c:	e01a      	b.n	8012694 <USBD_GetStatus+0x60>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2201      	movs	r2, #1
 8012662:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801266a:	2b00      	cmp	r3, #0
 801266c:	d005      	beq.n	801267a <USBD_GetStatus+0x46>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	f043 0202 	orr.w	r2, r3, #2
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	330c      	adds	r3, #12
 801267e:	2202      	movs	r2, #2
 8012680:	4619      	mov	r1, r3
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f000 f8eb 	bl	801285e <USBD_CtlSendData>
    break;
 8012688:	e004      	b.n	8012694 <USBD_GetStatus+0x60>

  default:
    USBD_CtlError(pdev, req);
 801268a:	6839      	ldr	r1, [r7, #0]
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f000 f875 	bl	801277c <USBD_CtlError>
    break;
 8012692:	bf00      	nop
  }
}
 8012694:	bf00      	nop
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	885b      	ldrh	r3, [r3, #2]
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d106      	bne.n	80126bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2201      	movs	r2, #1
 80126b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 f92b 	bl	8012912 <USBD_CtlSendStatus>
  }
}
 80126bc:	bf00      	nop
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	3b01      	subs	r3, #1
 80126d8:	2b02      	cmp	r3, #2
 80126da:	d80b      	bhi.n	80126f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	885b      	ldrh	r3, [r3, #2]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	d10c      	bne.n	80126fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2200      	movs	r2, #0
 80126e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80126ec:	6878      	ldr	r0, [r7, #4]
 80126ee:	f000 f910 	bl	8012912 <USBD_CtlSendStatus>
      }
      break;
 80126f2:	e004      	b.n	80126fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80126f4:	6839      	ldr	r1, [r7, #0]
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f000 f840 	bl	801277c <USBD_CtlError>
      break;
 80126fc:	e000      	b.n	8012700 <USBD_ClrFeature+0x3c>
      break;
 80126fe:	bf00      	nop
  }
}
 8012700:	bf00      	nop
 8012702:	3708      	adds	r7, #8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	781a      	ldrb	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	3301      	adds	r3, #1
 8012722:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	781a      	ldrb	r2, [r3, #0]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	3301      	adds	r3, #1
 8012730:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012732:	68f8      	ldr	r0, [r7, #12]
 8012734:	f7ff fabd 	bl	8011cb2 <SWAPBYTE>
 8012738:	4603      	mov	r3, r0
 801273a:	461a      	mov	r2, r3
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	3301      	adds	r3, #1
 8012744:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	3301      	adds	r3, #1
 801274a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801274c:	68f8      	ldr	r0, [r7, #12]
 801274e:	f7ff fab0 	bl	8011cb2 <SWAPBYTE>
 8012752:	4603      	mov	r3, r0
 8012754:	461a      	mov	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3301      	adds	r3, #1
 801275e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	3301      	adds	r3, #1
 8012764:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f7ff faa3 	bl	8011cb2 <SWAPBYTE>
 801276c:	4603      	mov	r3, r0
 801276e:	461a      	mov	r2, r3
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	80da      	strh	r2, [r3, #6]
}
 8012774:	bf00      	nop
 8012776:	3710      	adds	r7, #16
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}

0801277c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012786:	2180      	movs	r1, #128	; 0x80
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 fdab 	bl	80132e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801278e:	2100      	movs	r1, #0
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 fda7 	bl	80132e4 <USBD_LL_StallEP>
}
 8012796:	bf00      	nop
 8012798:	3708      	adds	r7, #8
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}

0801279e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801279e:	b580      	push	{r7, lr}
 80127a0:	b086      	sub	sp, #24
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	60f8      	str	r0, [r7, #12]
 80127a6:	60b9      	str	r1, [r7, #8]
 80127a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80127aa:	2300      	movs	r3, #0
 80127ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d036      	beq.n	8012822 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80127b8:	6938      	ldr	r0, [r7, #16]
 80127ba:	f000 f836 	bl	801282a <USBD_GetLen>
 80127be:	4603      	mov	r3, r0
 80127c0:	3301      	adds	r3, #1
 80127c2:	b29b      	uxth	r3, r3
 80127c4:	005b      	lsls	r3, r3, #1
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80127cc:	7dfb      	ldrb	r3, [r7, #23]
 80127ce:	68ba      	ldr	r2, [r7, #8]
 80127d0:	4413      	add	r3, r2
 80127d2:	687a      	ldr	r2, [r7, #4]
 80127d4:	7812      	ldrb	r2, [r2, #0]
 80127d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80127d8:	7dfb      	ldrb	r3, [r7, #23]
 80127da:	3301      	adds	r3, #1
 80127dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80127de:	7dfb      	ldrb	r3, [r7, #23]
 80127e0:	68ba      	ldr	r2, [r7, #8]
 80127e2:	4413      	add	r3, r2
 80127e4:	2203      	movs	r2, #3
 80127e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80127e8:	7dfb      	ldrb	r3, [r7, #23]
 80127ea:	3301      	adds	r3, #1
 80127ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80127ee:	e013      	b.n	8012818 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80127f0:	7dfb      	ldrb	r3, [r7, #23]
 80127f2:	68ba      	ldr	r2, [r7, #8]
 80127f4:	4413      	add	r3, r2
 80127f6:	693a      	ldr	r2, [r7, #16]
 80127f8:	7812      	ldrb	r2, [r2, #0]
 80127fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	3301      	adds	r3, #1
 8012800:	613b      	str	r3, [r7, #16]
    idx++;
 8012802:	7dfb      	ldrb	r3, [r7, #23]
 8012804:	3301      	adds	r3, #1
 8012806:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012808:	7dfb      	ldrb	r3, [r7, #23]
 801280a:	68ba      	ldr	r2, [r7, #8]
 801280c:	4413      	add	r3, r2
 801280e:	2200      	movs	r2, #0
 8012810:	701a      	strb	r2, [r3, #0]
    idx++;
 8012812:	7dfb      	ldrb	r3, [r7, #23]
 8012814:	3301      	adds	r3, #1
 8012816:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	781b      	ldrb	r3, [r3, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d1e7      	bne.n	80127f0 <USBD_GetString+0x52>
 8012820:	e000      	b.n	8012824 <USBD_GetString+0x86>
    return;
 8012822:	bf00      	nop
  }
}
 8012824:	3718      	adds	r7, #24
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801282a:	b480      	push	{r7}
 801282c:	b085      	sub	sp, #20
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012832:	2300      	movs	r3, #0
 8012834:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801283a:	e005      	b.n	8012848 <USBD_GetLen+0x1e>
  {
    len++;
 801283c:	7bfb      	ldrb	r3, [r7, #15]
 801283e:	3301      	adds	r3, #1
 8012840:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	3301      	adds	r3, #1
 8012846:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d1f5      	bne.n	801283c <USBD_GetLen+0x12>
  }

  return len;
 8012850:	7bfb      	ldrb	r3, [r7, #15]
}
 8012852:	4618      	mov	r0, r3
 8012854:	3714      	adds	r7, #20
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr

0801285e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801285e:	b580      	push	{r7, lr}
 8012860:	b084      	sub	sp, #16
 8012862:	af00      	add	r7, sp, #0
 8012864:	60f8      	str	r0, [r7, #12]
 8012866:	60b9      	str	r1, [r7, #8]
 8012868:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2202      	movs	r2, #2
 801286e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	68ba      	ldr	r2, [r7, #8]
 8012882:	2100      	movs	r1, #0
 8012884:	68f8      	ldr	r0, [r7, #12]
 8012886:	f000 fdb6 	bl	80133f6 <USBD_LL_Transmit>

  return USBD_OK;
 801288a:	2300      	movs	r3, #0
}
 801288c:	4618      	mov	r0, r3
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	60f8      	str	r0, [r7, #12]
 801289c:	60b9      	str	r1, [r7, #8]
 801289e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	68ba      	ldr	r2, [r7, #8]
 80128a4:	2100      	movs	r1, #0
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f000 fda5 	bl	80133f6 <USBD_LL_Transmit>

  return USBD_OK;
 80128ac:	2300      	movs	r3, #0
}
 80128ae:	4618      	mov	r0, r3
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}

080128b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80128b6:	b580      	push	{r7, lr}
 80128b8:	b084      	sub	sp, #16
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	60f8      	str	r0, [r7, #12]
 80128be:	60b9      	str	r1, [r7, #8]
 80128c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2203      	movs	r2, #3
 80128c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	68ba      	ldr	r2, [r7, #8]
 80128de:	2100      	movs	r1, #0
 80128e0:	68f8      	ldr	r0, [r7, #12]
 80128e2:	f000 fda9 	bl	8013438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3710      	adds	r7, #16
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	68ba      	ldr	r2, [r7, #8]
 8012900:	2100      	movs	r1, #0
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	f000 fd98 	bl	8013438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	3710      	adds	r7, #16
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}

08012912 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012912:	b580      	push	{r7, lr}
 8012914:	b082      	sub	sp, #8
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2204      	movs	r2, #4
 801291e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012922:	2300      	movs	r3, #0
 8012924:	2200      	movs	r2, #0
 8012926:	2100      	movs	r1, #0
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 fd64 	bl	80133f6 <USBD_LL_Transmit>

  return USBD_OK;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2205      	movs	r2, #5
 8012944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012948:	2300      	movs	r3, #0
 801294a:	2200      	movs	r2, #0
 801294c:	2100      	movs	r1, #0
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f000 fd72 	bl	8013438 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012954:	2300      	movs	r3, #0
}
 8012956:	4618      	mov	r0, r3
 8012958:	3708      	adds	r7, #8
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
	...

08012960 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012960:	b480      	push	{r7}
 8012962:	b087      	sub	sp, #28
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	4613      	mov	r3, r2
 801296c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801296e:	2301      	movs	r3, #1
 8012970:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012972:	2300      	movs	r3, #0
 8012974:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012976:	4b1f      	ldr	r3, [pc, #124]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 8012978:	7a5b      	ldrb	r3, [r3, #9]
 801297a:	b2db      	uxtb	r3, r3
 801297c:	2b00      	cmp	r3, #0
 801297e:	d131      	bne.n	80129e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012980:	4b1c      	ldr	r3, [pc, #112]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 8012982:	7a5b      	ldrb	r3, [r3, #9]
 8012984:	b2db      	uxtb	r3, r3
 8012986:	461a      	mov	r2, r3
 8012988:	4b1a      	ldr	r3, [pc, #104]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 801298a:	2100      	movs	r1, #0
 801298c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801298e:	4b19      	ldr	r3, [pc, #100]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 8012990:	7a5b      	ldrb	r3, [r3, #9]
 8012992:	b2db      	uxtb	r3, r3
 8012994:	4a17      	ldr	r2, [pc, #92]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 8012996:	009b      	lsls	r3, r3, #2
 8012998:	4413      	add	r3, r2
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801299e:	4b15      	ldr	r3, [pc, #84]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 80129a0:	7a5b      	ldrb	r3, [r3, #9]
 80129a2:	b2db      	uxtb	r3, r3
 80129a4:	461a      	mov	r2, r3
 80129a6:	4b13      	ldr	r3, [pc, #76]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 80129a8:	4413      	add	r3, r2
 80129aa:	79fa      	ldrb	r2, [r7, #7]
 80129ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80129ae:	4b11      	ldr	r3, [pc, #68]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 80129b0:	7a5b      	ldrb	r3, [r3, #9]
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	1c5a      	adds	r2, r3, #1
 80129b6:	b2d1      	uxtb	r1, r2
 80129b8:	4a0e      	ldr	r2, [pc, #56]	; (80129f4 <FATFS_LinkDriverEx+0x94>)
 80129ba:	7251      	strb	r1, [r2, #9]
 80129bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80129be:	7dbb      	ldrb	r3, [r7, #22]
 80129c0:	3330      	adds	r3, #48	; 0x30
 80129c2:	b2da      	uxtb	r2, r3
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	3301      	adds	r3, #1
 80129cc:	223a      	movs	r2, #58	; 0x3a
 80129ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	3302      	adds	r3, #2
 80129d4:	222f      	movs	r2, #47	; 0x2f
 80129d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	3303      	adds	r3, #3
 80129dc:	2200      	movs	r2, #0
 80129de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80129e0:	2300      	movs	r3, #0
 80129e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80129e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	371c      	adds	r7, #28
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop
 80129f4:	24000380 	.word	0x24000380

080129f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012a02:	2200      	movs	r2, #0
 8012a04:	6839      	ldr	r1, [r7, #0]
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f7ff ffaa 	bl	8012960 <FATFS_LinkDriverEx>
 8012a0c:	4603      	mov	r3, r0
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3708      	adds	r7, #8
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
	...

08012a18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	4913      	ldr	r1, [pc, #76]	; (8012a6c <MX_USB_DEVICE_Init+0x54>)
 8012a20:	4813      	ldr	r0, [pc, #76]	; (8012a70 <MX_USB_DEVICE_Init+0x58>)
 8012a22:	f7fe fe77 	bl	8011714 <USBD_Init>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d001      	beq.n	8012a30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012a2c:	f7ee fa16 	bl	8000e5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012a30:	4910      	ldr	r1, [pc, #64]	; (8012a74 <MX_USB_DEVICE_Init+0x5c>)
 8012a32:	480f      	ldr	r0, [pc, #60]	; (8012a70 <MX_USB_DEVICE_Init+0x58>)
 8012a34:	f7fe fea4 	bl	8011780 <USBD_RegisterClass>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d001      	beq.n	8012a42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012a3e:	f7ee fa0d 	bl	8000e5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012a42:	490d      	ldr	r1, [pc, #52]	; (8012a78 <MX_USB_DEVICE_Init+0x60>)
 8012a44:	480a      	ldr	r0, [pc, #40]	; (8012a70 <MX_USB_DEVICE_Init+0x58>)
 8012a46:	f7fe fdc9 	bl	80115dc <USBD_CDC_RegisterInterface>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d001      	beq.n	8012a54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012a50:	f7ee fa04 	bl	8000e5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012a54:	4806      	ldr	r0, [pc, #24]	; (8012a70 <MX_USB_DEVICE_Init+0x58>)
 8012a56:	f7fe feb4 	bl	80117c2 <USBD_Start>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d001      	beq.n	8012a64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012a60:	f7ee f9fc 	bl	8000e5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012a64:	f7f4 f9a4 	bl	8006db0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012a68:	bf00      	nop
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	24000134 	.word	0x24000134
 8012a70:	24002830 	.word	0x24002830
 8012a74:	2400001c 	.word	0x2400001c
 8012a78:	24000120 	.word	0x24000120

08012a7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012a80:	2200      	movs	r2, #0
 8012a82:	4905      	ldr	r1, [pc, #20]	; (8012a98 <CDC_Init_FS+0x1c>)
 8012a84:	4805      	ldr	r0, [pc, #20]	; (8012a9c <CDC_Init_FS+0x20>)
 8012a86:	f7fe fdbe 	bl	8011606 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012a8a:	4905      	ldr	r1, [pc, #20]	; (8012aa0 <CDC_Init_FS+0x24>)
 8012a8c:	4803      	ldr	r0, [pc, #12]	; (8012a9c <CDC_Init_FS+0x20>)
 8012a8e:	f7fe fdd3 	bl	8011638 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	24003300 	.word	0x24003300
 8012a9c:	24002830 	.word	0x24002830
 8012aa0:	24002b00 	.word	0x24002b00

08012aa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012aa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr

08012ab4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	b083      	sub	sp, #12
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	4603      	mov	r3, r0
 8012abc:	6039      	str	r1, [r7, #0]
 8012abe:	71fb      	strb	r3, [r7, #7]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012ac4:	79fb      	ldrb	r3, [r7, #7]
 8012ac6:	2b23      	cmp	r3, #35	; 0x23
 8012ac8:	f200 808c 	bhi.w	8012be4 <CDC_Control_FS+0x130>
 8012acc:	a201      	add	r2, pc, #4	; (adr r2, 8012ad4 <CDC_Control_FS+0x20>)
 8012ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad2:	bf00      	nop
 8012ad4:	08012be5 	.word	0x08012be5
 8012ad8:	08012be5 	.word	0x08012be5
 8012adc:	08012be5 	.word	0x08012be5
 8012ae0:	08012be5 	.word	0x08012be5
 8012ae4:	08012be5 	.word	0x08012be5
 8012ae8:	08012be5 	.word	0x08012be5
 8012aec:	08012be5 	.word	0x08012be5
 8012af0:	08012be5 	.word	0x08012be5
 8012af4:	08012be5 	.word	0x08012be5
 8012af8:	08012be5 	.word	0x08012be5
 8012afc:	08012be5 	.word	0x08012be5
 8012b00:	08012be5 	.word	0x08012be5
 8012b04:	08012be5 	.word	0x08012be5
 8012b08:	08012be5 	.word	0x08012be5
 8012b0c:	08012be5 	.word	0x08012be5
 8012b10:	08012be5 	.word	0x08012be5
 8012b14:	08012be5 	.word	0x08012be5
 8012b18:	08012be5 	.word	0x08012be5
 8012b1c:	08012be5 	.word	0x08012be5
 8012b20:	08012be5 	.word	0x08012be5
 8012b24:	08012be5 	.word	0x08012be5
 8012b28:	08012be5 	.word	0x08012be5
 8012b2c:	08012be5 	.word	0x08012be5
 8012b30:	08012be5 	.word	0x08012be5
 8012b34:	08012be5 	.word	0x08012be5
 8012b38:	08012be5 	.word	0x08012be5
 8012b3c:	08012be5 	.word	0x08012be5
 8012b40:	08012be5 	.word	0x08012be5
 8012b44:	08012be5 	.word	0x08012be5
 8012b48:	08012be5 	.word	0x08012be5
 8012b4c:	08012be5 	.word	0x08012be5
 8012b50:	08012be5 	.word	0x08012be5
 8012b54:	08012b65 	.word	0x08012b65
 8012b58:	08012b9f 	.word	0x08012b9f
 8012b5c:	08012be5 	.word	0x08012be5
 8012b60:	08012be5 	.word	0x08012be5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      tempbuf[0]=pbuf[0];
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	781a      	ldrb	r2, [r3, #0]
 8012b68:	4b22      	ldr	r3, [pc, #136]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012b6a:	701a      	strb	r2, [r3, #0]
      tempbuf[1]=pbuf[1];
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	785a      	ldrb	r2, [r3, #1]
 8012b70:	4b20      	ldr	r3, [pc, #128]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012b72:	705a      	strb	r2, [r3, #1]
      tempbuf[2]=pbuf[2];
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	789a      	ldrb	r2, [r3, #2]
 8012b78:	4b1e      	ldr	r3, [pc, #120]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012b7a:	709a      	strb	r2, [r3, #2]
      tempbuf[3]=pbuf[3];
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	78da      	ldrb	r2, [r3, #3]
 8012b80:	4b1c      	ldr	r3, [pc, #112]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012b82:	70da      	strb	r2, [r3, #3]
      tempbuf[4]=pbuf[4];
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	791a      	ldrb	r2, [r3, #4]
 8012b88:	4b1a      	ldr	r3, [pc, #104]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012b8a:	711a      	strb	r2, [r3, #4]
      tempbuf[5]=pbuf[5];
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	795a      	ldrb	r2, [r3, #5]
 8012b90:	4b18      	ldr	r3, [pc, #96]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012b92:	715a      	strb	r2, [r3, #5]
      tempbuf[6]=pbuf[6];
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	799a      	ldrb	r2, [r3, #6]
 8012b98:	4b16      	ldr	r3, [pc, #88]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012b9a:	719a      	strb	r2, [r3, #6]

    break;
 8012b9c:	e023      	b.n	8012be6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
      pbuf[0]=tempbuf[0];
 8012b9e:	4b15      	ldr	r3, [pc, #84]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012ba0:	781a      	ldrb	r2, [r3, #0]
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	701a      	strb	r2, [r3, #0]
      pbuf[1]=tempbuf[1];
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	4a12      	ldr	r2, [pc, #72]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012bac:	7852      	ldrb	r2, [r2, #1]
 8012bae:	701a      	strb	r2, [r3, #0]
      pbuf[2]=tempbuf[2];
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	3302      	adds	r3, #2
 8012bb4:	4a0f      	ldr	r2, [pc, #60]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012bb6:	7892      	ldrb	r2, [r2, #2]
 8012bb8:	701a      	strb	r2, [r3, #0]
      pbuf[3]=tempbuf[3];
 8012bba:	683b      	ldr	r3, [r7, #0]
 8012bbc:	3303      	adds	r3, #3
 8012bbe:	4a0d      	ldr	r2, [pc, #52]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012bc0:	78d2      	ldrb	r2, [r2, #3]
 8012bc2:	701a      	strb	r2, [r3, #0]
      pbuf[4]=tempbuf[4];
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	3304      	adds	r3, #4
 8012bc8:	4a0a      	ldr	r2, [pc, #40]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012bca:	7912      	ldrb	r2, [r2, #4]
 8012bcc:	701a      	strb	r2, [r3, #0]
      pbuf[5]=tempbuf[5];
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	3305      	adds	r3, #5
 8012bd2:	4a08      	ldr	r2, [pc, #32]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012bd4:	7952      	ldrb	r2, [r2, #5]
 8012bd6:	701a      	strb	r2, [r3, #0]
      pbuf[6]=tempbuf[6];
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	3306      	adds	r3, #6
 8012bdc:	4a05      	ldr	r2, [pc, #20]	; (8012bf4 <CDC_Control_FS+0x140>)
 8012bde:	7992      	ldrb	r2, [r2, #6]
 8012be0:	701a      	strb	r2, [r3, #0]

    break;
 8012be2:	e000      	b.n	8012be6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012be4:	bf00      	nop
  }

  return (USBD_OK);
 8012be6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	370c      	adds	r7, #12
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr
 8012bf4:	24003b00 	.word	0x24003b00

08012bf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012c02:	6879      	ldr	r1, [r7, #4]
 8012c04:	4809      	ldr	r0, [pc, #36]	; (8012c2c <CDC_Receive_FS+0x34>)
 8012c06:	f7fe fd17 	bl	8011638 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012c0a:	4808      	ldr	r0, [pc, #32]	; (8012c2c <CDC_Receive_FS+0x34>)
 8012c0c:	f7fe fd58 	bl	80116c0 <USBD_CDC_ReceivePacket>
  uint16_t len = *Len;
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	81fb      	strh	r3, [r7, #14]
  CDC_Transmit_FS(Buf, len);
 8012c16:	89fb      	ldrh	r3, [r7, #14]
 8012c18:	4619      	mov	r1, r3
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f000 f808 	bl	8012c30 <CDC_Transmit_FS>
  return (USBD_OK);
 8012c20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3710      	adds	r7, #16
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	24002830 	.word	0x24002830

08012c30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	460b      	mov	r3, r1
 8012c3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012c40:	4b0d      	ldr	r3, [pc, #52]	; (8012c78 <CDC_Transmit_FS+0x48>)
 8012c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d001      	beq.n	8012c56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012c52:	2301      	movs	r3, #1
 8012c54:	e00b      	b.n	8012c6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8012c56:	887b      	ldrh	r3, [r7, #2]
 8012c58:	461a      	mov	r2, r3
 8012c5a:	6879      	ldr	r1, [r7, #4]
 8012c5c:	4806      	ldr	r0, [pc, #24]	; (8012c78 <CDC_Transmit_FS+0x48>)
 8012c5e:	f7fe fcd2 	bl	8011606 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012c62:	4805      	ldr	r0, [pc, #20]	; (8012c78 <CDC_Transmit_FS+0x48>)
 8012c64:	f7fe fcfc 	bl	8011660 <USBD_CDC_TransmitPacket>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}
 8012c76:	bf00      	nop
 8012c78:	24002830 	.word	0x24002830

08012c7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b087      	sub	sp, #28
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	60b9      	str	r1, [r7, #8]
 8012c86:	4613      	mov	r3, r2
 8012c88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8012c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	371c      	adds	r7, #28
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr
	...

08012ca0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	6039      	str	r1, [r7, #0]
 8012caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	2212      	movs	r2, #18
 8012cb0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012cb2:	4b03      	ldr	r3, [pc, #12]	; (8012cc0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	24000150 	.word	0x24000150

08012cc4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	4603      	mov	r3, r0
 8012ccc:	6039      	str	r1, [r7, #0]
 8012cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	2204      	movs	r2, #4
 8012cd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012cd6:	4b03      	ldr	r3, [pc, #12]	; (8012ce4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	370c      	adds	r7, #12
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr
 8012ce4:	24000164 	.word	0x24000164

08012ce8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	4603      	mov	r3, r0
 8012cf0:	6039      	str	r1, [r7, #0]
 8012cf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012cf4:	79fb      	ldrb	r3, [r7, #7]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d105      	bne.n	8012d06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012cfa:	683a      	ldr	r2, [r7, #0]
 8012cfc:	4907      	ldr	r1, [pc, #28]	; (8012d1c <USBD_FS_ProductStrDescriptor+0x34>)
 8012cfe:	4808      	ldr	r0, [pc, #32]	; (8012d20 <USBD_FS_ProductStrDescriptor+0x38>)
 8012d00:	f7ff fd4d 	bl	801279e <USBD_GetString>
 8012d04:	e004      	b.n	8012d10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012d06:	683a      	ldr	r2, [r7, #0]
 8012d08:	4904      	ldr	r1, [pc, #16]	; (8012d1c <USBD_FS_ProductStrDescriptor+0x34>)
 8012d0a:	4805      	ldr	r0, [pc, #20]	; (8012d20 <USBD_FS_ProductStrDescriptor+0x38>)
 8012d0c:	f7ff fd47 	bl	801279e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d10:	4b02      	ldr	r3, [pc, #8]	; (8012d1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3708      	adds	r7, #8
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	24003b08 	.word	0x24003b08
 8012d20:	08015e08 	.word	0x08015e08

08012d24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	6039      	str	r1, [r7, #0]
 8012d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012d30:	683a      	ldr	r2, [r7, #0]
 8012d32:	4904      	ldr	r1, [pc, #16]	; (8012d44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012d34:	4804      	ldr	r0, [pc, #16]	; (8012d48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012d36:	f7ff fd32 	bl	801279e <USBD_GetString>
  return USBD_StrDesc;
 8012d3a:	4b02      	ldr	r3, [pc, #8]	; (8012d44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	24003b08 	.word	0x24003b08
 8012d48:	08015e20 	.word	0x08015e20

08012d4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b082      	sub	sp, #8
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	4603      	mov	r3, r0
 8012d54:	6039      	str	r1, [r7, #0]
 8012d56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	221a      	movs	r2, #26
 8012d5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012d5e:	f000 f843 	bl	8012de8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012d62:	4b02      	ldr	r3, [pc, #8]	; (8012d6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3708      	adds	r7, #8
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}
 8012d6c:	24000168 	.word	0x24000168

08012d70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	4603      	mov	r3, r0
 8012d78:	6039      	str	r1, [r7, #0]
 8012d7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012d7c:	79fb      	ldrb	r3, [r7, #7]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d105      	bne.n	8012d8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d82:	683a      	ldr	r2, [r7, #0]
 8012d84:	4907      	ldr	r1, [pc, #28]	; (8012da4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d86:	4808      	ldr	r0, [pc, #32]	; (8012da8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d88:	f7ff fd09 	bl	801279e <USBD_GetString>
 8012d8c:	e004      	b.n	8012d98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012d8e:	683a      	ldr	r2, [r7, #0]
 8012d90:	4904      	ldr	r1, [pc, #16]	; (8012da4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012d92:	4805      	ldr	r0, [pc, #20]	; (8012da8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012d94:	f7ff fd03 	bl	801279e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d98:	4b02      	ldr	r3, [pc, #8]	; (8012da4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	24003b08 	.word	0x24003b08
 8012da8:	08015e34 	.word	0x08015e34

08012dac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	4603      	mov	r3, r0
 8012db4:	6039      	str	r1, [r7, #0]
 8012db6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012db8:	79fb      	ldrb	r3, [r7, #7]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d105      	bne.n	8012dca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012dbe:	683a      	ldr	r2, [r7, #0]
 8012dc0:	4907      	ldr	r1, [pc, #28]	; (8012de0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012dc2:	4808      	ldr	r0, [pc, #32]	; (8012de4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012dc4:	f7ff fceb 	bl	801279e <USBD_GetString>
 8012dc8:	e004      	b.n	8012dd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012dca:	683a      	ldr	r2, [r7, #0]
 8012dcc:	4904      	ldr	r1, [pc, #16]	; (8012de0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012dce:	4805      	ldr	r0, [pc, #20]	; (8012de4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012dd0:	f7ff fce5 	bl	801279e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012dd4:	4b02      	ldr	r3, [pc, #8]	; (8012de0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3708      	adds	r7, #8
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	bd80      	pop	{r7, pc}
 8012dde:	bf00      	nop
 8012de0:	24003b08 	.word	0x24003b08
 8012de4:	08015e40 	.word	0x08015e40

08012de8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b084      	sub	sp, #16
 8012dec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012dee:	4b0f      	ldr	r3, [pc, #60]	; (8012e2c <Get_SerialNum+0x44>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012df4:	4b0e      	ldr	r3, [pc, #56]	; (8012e30 <Get_SerialNum+0x48>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012dfa:	4b0e      	ldr	r3, [pc, #56]	; (8012e34 <Get_SerialNum+0x4c>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012e00:	68fa      	ldr	r2, [r7, #12]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4413      	add	r3, r2
 8012e06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d009      	beq.n	8012e22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012e0e:	2208      	movs	r2, #8
 8012e10:	4909      	ldr	r1, [pc, #36]	; (8012e38 <Get_SerialNum+0x50>)
 8012e12:	68f8      	ldr	r0, [r7, #12]
 8012e14:	f000 f814 	bl	8012e40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012e18:	2204      	movs	r2, #4
 8012e1a:	4908      	ldr	r1, [pc, #32]	; (8012e3c <Get_SerialNum+0x54>)
 8012e1c:	68b8      	ldr	r0, [r7, #8]
 8012e1e:	f000 f80f 	bl	8012e40 <IntToUnicode>
  }
}
 8012e22:	bf00      	nop
 8012e24:	3710      	adds	r7, #16
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	1ff1e800 	.word	0x1ff1e800
 8012e30:	1ff1e804 	.word	0x1ff1e804
 8012e34:	1ff1e808 	.word	0x1ff1e808
 8012e38:	2400016a 	.word	0x2400016a
 8012e3c:	2400017a 	.word	0x2400017a

08012e40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b087      	sub	sp, #28
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	60f8      	str	r0, [r7, #12]
 8012e48:	60b9      	str	r1, [r7, #8]
 8012e4a:	4613      	mov	r3, r2
 8012e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012e52:	2300      	movs	r3, #0
 8012e54:	75fb      	strb	r3, [r7, #23]
 8012e56:	e027      	b.n	8012ea8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	0f1b      	lsrs	r3, r3, #28
 8012e5c:	2b09      	cmp	r3, #9
 8012e5e:	d80b      	bhi.n	8012e78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	0f1b      	lsrs	r3, r3, #28
 8012e64:	b2da      	uxtb	r2, r3
 8012e66:	7dfb      	ldrb	r3, [r7, #23]
 8012e68:	005b      	lsls	r3, r3, #1
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	440b      	add	r3, r1
 8012e70:	3230      	adds	r2, #48	; 0x30
 8012e72:	b2d2      	uxtb	r2, r2
 8012e74:	701a      	strb	r2, [r3, #0]
 8012e76:	e00a      	b.n	8012e8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	0f1b      	lsrs	r3, r3, #28
 8012e7c:	b2da      	uxtb	r2, r3
 8012e7e:	7dfb      	ldrb	r3, [r7, #23]
 8012e80:	005b      	lsls	r3, r3, #1
 8012e82:	4619      	mov	r1, r3
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	440b      	add	r3, r1
 8012e88:	3237      	adds	r2, #55	; 0x37
 8012e8a:	b2d2      	uxtb	r2, r2
 8012e8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	011b      	lsls	r3, r3, #4
 8012e92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e94:	7dfb      	ldrb	r3, [r7, #23]
 8012e96:	005b      	lsls	r3, r3, #1
 8012e98:	3301      	adds	r3, #1
 8012e9a:	68ba      	ldr	r2, [r7, #8]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012ea2:	7dfb      	ldrb	r3, [r7, #23]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	75fb      	strb	r3, [r7, #23]
 8012ea8:	7dfa      	ldrb	r2, [r7, #23]
 8012eaa:	79fb      	ldrb	r3, [r7, #7]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d3d3      	bcc.n	8012e58 <IntToUnicode+0x18>
  }
}
 8012eb0:	bf00      	nop
 8012eb2:	bf00      	nop
 8012eb4:	371c      	adds	r7, #28
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr
	...

08012ec0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b0b8      	sub	sp, #224	; 0xe0
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012ec8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012ecc:	2200      	movs	r2, #0
 8012ece:	601a      	str	r2, [r3, #0]
 8012ed0:	605a      	str	r2, [r3, #4]
 8012ed2:	609a      	str	r2, [r3, #8]
 8012ed4:	60da      	str	r2, [r3, #12]
 8012ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012ed8:	f107 0310 	add.w	r3, r7, #16
 8012edc:	22bc      	movs	r2, #188	; 0xbc
 8012ede:	2100      	movs	r1, #0
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f000 fb43 	bl	801356c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4a2a      	ldr	r2, [pc, #168]	; (8012f94 <HAL_PCD_MspInit+0xd4>)
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d14c      	bne.n	8012f8a <HAL_PCD_MspInit+0xca>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

     /* USER CODE END SPI1_MspInit 0 */
     /** Initializes the peripherals clock
     */
       PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012ef0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012ef4:	613b      	str	r3, [r7, #16]
      PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012ef6:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8012efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012efe:	f107 0310 	add.w	r3, r7, #16
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7f4 ff42 	bl	8007d8c <HAL_RCCEx_PeriphCLKConfig>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d001      	beq.n	8012f12 <HAL_PCD_MspInit+0x52>
          {
            Error_Handler();
 8012f0e:	f7ed ffa5 	bl	8000e5c <Error_Handler>
          }
  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f12:	4b21      	ldr	r3, [pc, #132]	; (8012f98 <HAL_PCD_MspInit+0xd8>)
 8012f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012f18:	4a1f      	ldr	r2, [pc, #124]	; (8012f98 <HAL_PCD_MspInit+0xd8>)
 8012f1a:	f043 0301 	orr.w	r3, r3, #1
 8012f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012f22:	4b1d      	ldr	r3, [pc, #116]	; (8012f98 <HAL_PCD_MspInit+0xd8>)
 8012f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012f28:	f003 0301 	and.w	r3, r3, #1
 8012f2c:	60fb      	str	r3, [r7, #12]
 8012f2e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012f30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f38:	2302      	movs	r3, #2
 8012f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f44:	2300      	movs	r3, #0
 8012f46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8012f4a:	230a      	movs	r3, #10
 8012f4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012f54:	4619      	mov	r1, r3
 8012f56:	4811      	ldr	r0, [pc, #68]	; (8012f9c <HAL_PCD_MspInit+0xdc>)
 8012f58:	f7f1 fb50 	bl	80045fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012f5c:	4b0e      	ldr	r3, [pc, #56]	; (8012f98 <HAL_PCD_MspInit+0xd8>)
 8012f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f62:	4a0d      	ldr	r2, [pc, #52]	; (8012f98 <HAL_PCD_MspInit+0xd8>)
 8012f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012f68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012f6c:	4b0a      	ldr	r3, [pc, #40]	; (8012f98 <HAL_PCD_MspInit+0xd8>)
 8012f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f76:	60bb      	str	r3, [r7, #8]
 8012f78:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	2100      	movs	r1, #0
 8012f7e:	2065      	movs	r0, #101	; 0x65
 8012f80:	f7ef f859 	bl	8002036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012f84:	2065      	movs	r0, #101	; 0x65
 8012f86:	f7ef f870 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f8a:	bf00      	nop
 8012f8c:	37e0      	adds	r7, #224	; 0xe0
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	40080000 	.word	0x40080000
 8012f98:	58024400 	.word	0x58024400
 8012f9c:	58020000 	.word	0x58020000

08012fa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	4610      	mov	r0, r2
 8012fb8:	f7fe fc4e 	bl	8011858 <USBD_LL_SetupStage>
}
 8012fbc:	bf00      	nop
 8012fbe:	3708      	adds	r7, #8
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	460b      	mov	r3, r1
 8012fce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012fd6:	78fa      	ldrb	r2, [r7, #3]
 8012fd8:	6879      	ldr	r1, [r7, #4]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	00db      	lsls	r3, r3, #3
 8012fde:	1a9b      	subs	r3, r3, r2
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	440b      	add	r3, r1
 8012fe4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012fe8:	681a      	ldr	r2, [r3, #0]
 8012fea:	78fb      	ldrb	r3, [r7, #3]
 8012fec:	4619      	mov	r1, r3
 8012fee:	f7fe fc88 	bl	8011902 <USBD_LL_DataOutStage>
}
 8012ff2:	bf00      	nop
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}

08012ffa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ffa:	b580      	push	{r7, lr}
 8012ffc:	b082      	sub	sp, #8
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
 8013002:	460b      	mov	r3, r1
 8013004:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801300c:	78fa      	ldrb	r2, [r7, #3]
 801300e:	6879      	ldr	r1, [r7, #4]
 8013010:	4613      	mov	r3, r2
 8013012:	00db      	lsls	r3, r3, #3
 8013014:	1a9b      	subs	r3, r3, r2
 8013016:	009b      	lsls	r3, r3, #2
 8013018:	440b      	add	r3, r1
 801301a:	3348      	adds	r3, #72	; 0x48
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	78fb      	ldrb	r3, [r7, #3]
 8013020:	4619      	mov	r1, r3
 8013022:	f7fe fcd3 	bl	80119cc <USBD_LL_DataInStage>
}
 8013026:	bf00      	nop
 8013028:	3708      	adds	r7, #8
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801302e:	b580      	push	{r7, lr}
 8013030:	b082      	sub	sp, #8
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801303c:	4618      	mov	r0, r3
 801303e:	f7fe fddc 	bl	8011bfa <USBD_LL_SOF>
}
 8013042:	bf00      	nop
 8013044:	3708      	adds	r7, #8
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}

0801304a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801304a:	b580      	push	{r7, lr}
 801304c:	b084      	sub	sp, #16
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013052:	2301      	movs	r3, #1
 8013054:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d102      	bne.n	8013064 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801305e:	2300      	movs	r3, #0
 8013060:	73fb      	strb	r3, [r7, #15]
 8013062:	e008      	b.n	8013076 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	2b02      	cmp	r3, #2
 801306a:	d102      	bne.n	8013072 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801306c:	2301      	movs	r3, #1
 801306e:	73fb      	strb	r3, [r7, #15]
 8013070:	e001      	b.n	8013076 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013072:	f7ed fef3 	bl	8000e5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801307c:	7bfa      	ldrb	r2, [r7, #15]
 801307e:	4611      	mov	r1, r2
 8013080:	4618      	mov	r0, r3
 8013082:	f7fe fd7c 	bl	8011b7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801308c:	4618      	mov	r0, r3
 801308e:	f7fe fd35 	bl	8011afc <USBD_LL_Reset>
}
 8013092:	bf00      	nop
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
	...

0801309c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b082      	sub	sp, #8
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fe fd77 	bl	8011b9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	6812      	ldr	r2, [r2, #0]
 80130be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80130c2:	f043 0301 	orr.w	r3, r3, #1
 80130c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a1b      	ldr	r3, [r3, #32]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d005      	beq.n	80130dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130d0:	4b04      	ldr	r3, [pc, #16]	; (80130e4 <HAL_PCD_SuspendCallback+0x48>)
 80130d2:	691b      	ldr	r3, [r3, #16]
 80130d4:	4a03      	ldr	r2, [pc, #12]	; (80130e4 <HAL_PCD_SuspendCallback+0x48>)
 80130d6:	f043 0306 	orr.w	r3, r3, #6
 80130da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80130dc:	bf00      	nop
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}
 80130e4:	e000ed00 	.word	0xe000ed00

080130e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b082      	sub	sp, #8
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7fe fd67 	bl	8011bca <USBD_LL_Resume>
}
 80130fc:	bf00      	nop
 80130fe:	3708      	adds	r7, #8
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	460b      	mov	r3, r1
 801310e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013116:	78fa      	ldrb	r2, [r7, #3]
 8013118:	4611      	mov	r1, r2
 801311a:	4618      	mov	r0, r3
 801311c:	f7fe fd95 	bl	8011c4a <USBD_LL_IsoOUTIncomplete>
}
 8013120:	bf00      	nop
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	460b      	mov	r3, r1
 8013132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801313a:	78fa      	ldrb	r2, [r7, #3]
 801313c:	4611      	mov	r1, r2
 801313e:	4618      	mov	r0, r3
 8013140:	f7fe fd76 	bl	8011c30 <USBD_LL_IsoINIncomplete>
}
 8013144:	bf00      	nop
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801315a:	4618      	mov	r0, r3
 801315c:	f7fe fd82 	bl	8011c64 <USBD_LL_DevConnected>
}
 8013160:	bf00      	nop
 8013162:	3708      	adds	r7, #8
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013176:	4618      	mov	r0, r3
 8013178:	f7fe fd7f 	bl	8011c7a <USBD_LL_DevDisconnected>
}
 801317c:	bf00      	nop
 801317e:	3708      	adds	r7, #8
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}

08013184 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d13e      	bne.n	8013212 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013194:	4a21      	ldr	r2, [pc, #132]	; (801321c <USBD_LL_Init+0x98>)
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	4a1f      	ldr	r2, [pc, #124]	; (801321c <USBD_LL_Init+0x98>)
 80131a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80131a4:	4b1d      	ldr	r3, [pc, #116]	; (801321c <USBD_LL_Init+0x98>)
 80131a6:	4a1e      	ldr	r2, [pc, #120]	; (8013220 <USBD_LL_Init+0x9c>)
 80131a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80131aa:	4b1c      	ldr	r3, [pc, #112]	; (801321c <USBD_LL_Init+0x98>)
 80131ac:	2209      	movs	r2, #9
 80131ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80131b0:	4b1a      	ldr	r3, [pc, #104]	; (801321c <USBD_LL_Init+0x98>)
 80131b2:	2202      	movs	r2, #2
 80131b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80131b6:	4b19      	ldr	r3, [pc, #100]	; (801321c <USBD_LL_Init+0x98>)
 80131b8:	2200      	movs	r2, #0
 80131ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80131bc:	4b17      	ldr	r3, [pc, #92]	; (801321c <USBD_LL_Init+0x98>)
 80131be:	2202      	movs	r2, #2
 80131c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80131c2:	4b16      	ldr	r3, [pc, #88]	; (801321c <USBD_LL_Init+0x98>)
 80131c4:	2200      	movs	r2, #0
 80131c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80131c8:	4b14      	ldr	r3, [pc, #80]	; (801321c <USBD_LL_Init+0x98>)
 80131ca:	2200      	movs	r2, #0
 80131cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80131ce:	4b13      	ldr	r3, [pc, #76]	; (801321c <USBD_LL_Init+0x98>)
 80131d0:	2200      	movs	r2, #0
 80131d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80131d4:	4b11      	ldr	r3, [pc, #68]	; (801321c <USBD_LL_Init+0x98>)
 80131d6:	2200      	movs	r2, #0
 80131d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80131da:	4b10      	ldr	r3, [pc, #64]	; (801321c <USBD_LL_Init+0x98>)
 80131dc:	2200      	movs	r2, #0
 80131de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80131e0:	4b0e      	ldr	r3, [pc, #56]	; (801321c <USBD_LL_Init+0x98>)
 80131e2:	2200      	movs	r2, #0
 80131e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80131e6:	480d      	ldr	r0, [pc, #52]	; (801321c <USBD_LL_Init+0x98>)
 80131e8:	f7f2 fbac 	bl	8005944 <HAL_PCD_Init>
 80131ec:	4603      	mov	r3, r0
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80131f2:	f7ed fe33 	bl	8000e5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80131f6:	2180      	movs	r1, #128	; 0x80
 80131f8:	4808      	ldr	r0, [pc, #32]	; (801321c <USBD_LL_Init+0x98>)
 80131fa:	f7f3 fd3e 	bl	8006c7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80131fe:	2240      	movs	r2, #64	; 0x40
 8013200:	2100      	movs	r1, #0
 8013202:	4806      	ldr	r0, [pc, #24]	; (801321c <USBD_LL_Init+0x98>)
 8013204:	f7f3 fcf2 	bl	8006bec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013208:	2280      	movs	r2, #128	; 0x80
 801320a:	2101      	movs	r1, #1
 801320c:	4803      	ldr	r0, [pc, #12]	; (801321c <USBD_LL_Init+0x98>)
 801320e:	f7f3 fced 	bl	8006bec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013212:	2300      	movs	r3, #0
}
 8013214:	4618      	mov	r0, r3
 8013216:	3708      	adds	r7, #8
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	24003d08 	.word	0x24003d08
 8013220:	40080000 	.word	0x40080000

08013224 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801322c:	2300      	movs	r3, #0
 801322e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013230:	2300      	movs	r3, #0
 8013232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801323a:	4618      	mov	r0, r3
 801323c:	f7f2 fca6 	bl	8005b8c <HAL_PCD_Start>
 8013240:	4603      	mov	r3, r0
 8013242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013244:	7bfb      	ldrb	r3, [r7, #15]
 8013246:	4618      	mov	r0, r3
 8013248:	f000 f92a 	bl	80134a0 <USBD_Get_USB_Status>
 801324c:	4603      	mov	r3, r0
 801324e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013250:	7bbb      	ldrb	r3, [r7, #14]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3710      	adds	r7, #16
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}

0801325a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801325a:	b580      	push	{r7, lr}
 801325c:	b084      	sub	sp, #16
 801325e:	af00      	add	r7, sp, #0
 8013260:	6078      	str	r0, [r7, #4]
 8013262:	4608      	mov	r0, r1
 8013264:	4611      	mov	r1, r2
 8013266:	461a      	mov	r2, r3
 8013268:	4603      	mov	r3, r0
 801326a:	70fb      	strb	r3, [r7, #3]
 801326c:	460b      	mov	r3, r1
 801326e:	70bb      	strb	r3, [r7, #2]
 8013270:	4613      	mov	r3, r2
 8013272:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013274:	2300      	movs	r3, #0
 8013276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013278:	2300      	movs	r3, #0
 801327a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013282:	78bb      	ldrb	r3, [r7, #2]
 8013284:	883a      	ldrh	r2, [r7, #0]
 8013286:	78f9      	ldrb	r1, [r7, #3]
 8013288:	f7f3 f8b7 	bl	80063fa <HAL_PCD_EP_Open>
 801328c:	4603      	mov	r3, r0
 801328e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013290:	7bfb      	ldrb	r3, [r7, #15]
 8013292:	4618      	mov	r0, r3
 8013294:	f000 f904 	bl	80134a0 <USBD_Get_USB_Status>
 8013298:	4603      	mov	r3, r0
 801329a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801329c:	7bbb      	ldrb	r3, [r7, #14]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}

080132a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132a6:	b580      	push	{r7, lr}
 80132a8:	b084      	sub	sp, #16
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	6078      	str	r0, [r7, #4]
 80132ae:	460b      	mov	r3, r1
 80132b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132b2:	2300      	movs	r3, #0
 80132b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132b6:	2300      	movs	r3, #0
 80132b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132c0:	78fa      	ldrb	r2, [r7, #3]
 80132c2:	4611      	mov	r1, r2
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7f3 f900 	bl	80064ca <HAL_PCD_EP_Close>
 80132ca:	4603      	mov	r3, r0
 80132cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132ce:	7bfb      	ldrb	r3, [r7, #15]
 80132d0:	4618      	mov	r0, r3
 80132d2:	f000 f8e5 	bl	80134a0 <USBD_Get_USB_Status>
 80132d6:	4603      	mov	r3, r0
 80132d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132da:	7bbb      	ldrb	r3, [r7, #14]
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3710      	adds	r7, #16
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}

080132e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
 80132ec:	460b      	mov	r3, r1
 80132ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132f0:	2300      	movs	r3, #0
 80132f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132f4:	2300      	movs	r3, #0
 80132f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80132fe:	78fa      	ldrb	r2, [r7, #3]
 8013300:	4611      	mov	r1, r2
 8013302:	4618      	mov	r0, r3
 8013304:	f7f3 f9d8 	bl	80066b8 <HAL_PCD_EP_SetStall>
 8013308:	4603      	mov	r3, r0
 801330a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801330c:	7bfb      	ldrb	r3, [r7, #15]
 801330e:	4618      	mov	r0, r3
 8013310:	f000 f8c6 	bl	80134a0 <USBD_Get_USB_Status>
 8013314:	4603      	mov	r3, r0
 8013316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013318:	7bbb      	ldrb	r3, [r7, #14]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b084      	sub	sp, #16
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
 801332a:	460b      	mov	r3, r1
 801332c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801332e:	2300      	movs	r3, #0
 8013330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013332:	2300      	movs	r3, #0
 8013334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801333c:	78fa      	ldrb	r2, [r7, #3]
 801333e:	4611      	mov	r1, r2
 8013340:	4618      	mov	r0, r3
 8013342:	f7f3 fa1d 	bl	8006780 <HAL_PCD_EP_ClrStall>
 8013346:	4603      	mov	r3, r0
 8013348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801334a:	7bfb      	ldrb	r3, [r7, #15]
 801334c:	4618      	mov	r0, r3
 801334e:	f000 f8a7 	bl	80134a0 <USBD_Get_USB_Status>
 8013352:	4603      	mov	r3, r0
 8013354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013356:	7bbb      	ldrb	r3, [r7, #14]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013360:	b480      	push	{r7}
 8013362:	b085      	sub	sp, #20
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	460b      	mov	r3, r1
 801336a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013372:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013374:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013378:	2b00      	cmp	r3, #0
 801337a:	da0b      	bge.n	8013394 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801337c:	78fb      	ldrb	r3, [r7, #3]
 801337e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013382:	68f9      	ldr	r1, [r7, #12]
 8013384:	4613      	mov	r3, r2
 8013386:	00db      	lsls	r3, r3, #3
 8013388:	1a9b      	subs	r3, r3, r2
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	440b      	add	r3, r1
 801338e:	333e      	adds	r3, #62	; 0x3e
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	e00b      	b.n	80133ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013394:	78fb      	ldrb	r3, [r7, #3]
 8013396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801339a:	68f9      	ldr	r1, [r7, #12]
 801339c:	4613      	mov	r3, r2
 801339e:	00db      	lsls	r3, r3, #3
 80133a0:	1a9b      	subs	r3, r3, r2
 80133a2:	009b      	lsls	r3, r3, #2
 80133a4:	440b      	add	r3, r1
 80133a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80133aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3714      	adds	r7, #20
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr

080133b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
 80133c0:	460b      	mov	r3, r1
 80133c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133c4:	2300      	movs	r3, #0
 80133c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133c8:	2300      	movs	r3, #0
 80133ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80133d2:	78fa      	ldrb	r2, [r7, #3]
 80133d4:	4611      	mov	r1, r2
 80133d6:	4618      	mov	r0, r3
 80133d8:	f7f2 ffea 	bl	80063b0 <HAL_PCD_SetAddress>
 80133dc:	4603      	mov	r3, r0
 80133de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133e0:	7bfb      	ldrb	r3, [r7, #15]
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 f85c 	bl	80134a0 <USBD_Get_USB_Status>
 80133e8:	4603      	mov	r3, r0
 80133ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}

080133f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80133f6:	b580      	push	{r7, lr}
 80133f8:	b086      	sub	sp, #24
 80133fa:	af00      	add	r7, sp, #0
 80133fc:	60f8      	str	r0, [r7, #12]
 80133fe:	607a      	str	r2, [r7, #4]
 8013400:	603b      	str	r3, [r7, #0]
 8013402:	460b      	mov	r3, r1
 8013404:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013406:	2300      	movs	r3, #0
 8013408:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801340a:	2300      	movs	r3, #0
 801340c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013414:	7af9      	ldrb	r1, [r7, #11]
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	f7f3 f903 	bl	8006624 <HAL_PCD_EP_Transmit>
 801341e:	4603      	mov	r3, r0
 8013420:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013422:	7dfb      	ldrb	r3, [r7, #23]
 8013424:	4618      	mov	r0, r3
 8013426:	f000 f83b 	bl	80134a0 <USBD_Get_USB_Status>
 801342a:	4603      	mov	r3, r0
 801342c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801342e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013430:	4618      	mov	r0, r3
 8013432:	3718      	adds	r7, #24
 8013434:	46bd      	mov	sp, r7
 8013436:	bd80      	pop	{r7, pc}

08013438 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b086      	sub	sp, #24
 801343c:	af00      	add	r7, sp, #0
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	607a      	str	r2, [r7, #4]
 8013442:	603b      	str	r3, [r7, #0]
 8013444:	460b      	mov	r3, r1
 8013446:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013448:	2300      	movs	r3, #0
 801344a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801344c:	2300      	movs	r3, #0
 801344e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8013456:	7af9      	ldrb	r1, [r7, #11]
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	f7f3 f87f 	bl	800655e <HAL_PCD_EP_Receive>
 8013460:	4603      	mov	r3, r0
 8013462:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013464:	7dfb      	ldrb	r3, [r7, #23]
 8013466:	4618      	mov	r0, r3
 8013468:	f000 f81a 	bl	80134a0 <USBD_Get_USB_Status>
 801346c:	4603      	mov	r3, r0
 801346e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013470:	7dbb      	ldrb	r3, [r7, #22]
}
 8013472:	4618      	mov	r0, r3
 8013474:	3718      	adds	r7, #24
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}

0801347a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801347a:	b580      	push	{r7, lr}
 801347c:	b082      	sub	sp, #8
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
 8013482:	460b      	mov	r3, r1
 8013484:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801348c:	78fa      	ldrb	r2, [r7, #3]
 801348e:	4611      	mov	r1, r2
 8013490:	4618      	mov	r0, r3
 8013492:	f7f3 f8af 	bl	80065f4 <HAL_PCD_EP_GetRxCount>
 8013496:	4603      	mov	r3, r0
}
 8013498:	4618      	mov	r0, r3
 801349a:	3708      	adds	r7, #8
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	4603      	mov	r3, r0
 80134a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134aa:	2300      	movs	r3, #0
 80134ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80134ae:	79fb      	ldrb	r3, [r7, #7]
 80134b0:	2b03      	cmp	r3, #3
 80134b2:	d817      	bhi.n	80134e4 <USBD_Get_USB_Status+0x44>
 80134b4:	a201      	add	r2, pc, #4	; (adr r2, 80134bc <USBD_Get_USB_Status+0x1c>)
 80134b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ba:	bf00      	nop
 80134bc:	080134cd 	.word	0x080134cd
 80134c0:	080134d3 	.word	0x080134d3
 80134c4:	080134d9 	.word	0x080134d9
 80134c8:	080134df 	.word	0x080134df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80134cc:	2300      	movs	r3, #0
 80134ce:	73fb      	strb	r3, [r7, #15]
    break;
 80134d0:	e00b      	b.n	80134ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134d2:	2303      	movs	r3, #3
 80134d4:	73fb      	strb	r3, [r7, #15]
    break;
 80134d6:	e008      	b.n	80134ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80134d8:	2301      	movs	r3, #1
 80134da:	73fb      	strb	r3, [r7, #15]
    break;
 80134dc:	e005      	b.n	80134ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80134de:	2303      	movs	r3, #3
 80134e0:	73fb      	strb	r3, [r7, #15]
    break;
 80134e2:	e002      	b.n	80134ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80134e4:	2303      	movs	r3, #3
 80134e6:	73fb      	strb	r3, [r7, #15]
    break;
 80134e8:	bf00      	nop
  }
  return usb_status;
 80134ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3714      	adds	r7, #20
 80134f0:	46bd      	mov	sp, r7
 80134f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f6:	4770      	bx	lr

080134f8 <__errno>:
 80134f8:	4b01      	ldr	r3, [pc, #4]	; (8013500 <__errno+0x8>)
 80134fa:	6818      	ldr	r0, [r3, #0]
 80134fc:	4770      	bx	lr
 80134fe:	bf00      	nop
 8013500:	24000184 	.word	0x24000184

08013504 <__libc_init_array>:
 8013504:	b570      	push	{r4, r5, r6, lr}
 8013506:	4d0d      	ldr	r5, [pc, #52]	; (801353c <__libc_init_array+0x38>)
 8013508:	4c0d      	ldr	r4, [pc, #52]	; (8013540 <__libc_init_array+0x3c>)
 801350a:	1b64      	subs	r4, r4, r5
 801350c:	10a4      	asrs	r4, r4, #2
 801350e:	2600      	movs	r6, #0
 8013510:	42a6      	cmp	r6, r4
 8013512:	d109      	bne.n	8013528 <__libc_init_array+0x24>
 8013514:	4d0b      	ldr	r5, [pc, #44]	; (8013544 <__libc_init_array+0x40>)
 8013516:	4c0c      	ldr	r4, [pc, #48]	; (8013548 <__libc_init_array+0x44>)
 8013518:	f002 fc68 	bl	8015dec <_init>
 801351c:	1b64      	subs	r4, r4, r5
 801351e:	10a4      	asrs	r4, r4, #2
 8013520:	2600      	movs	r6, #0
 8013522:	42a6      	cmp	r6, r4
 8013524:	d105      	bne.n	8013532 <__libc_init_array+0x2e>
 8013526:	bd70      	pop	{r4, r5, r6, pc}
 8013528:	f855 3b04 	ldr.w	r3, [r5], #4
 801352c:	4798      	blx	r3
 801352e:	3601      	adds	r6, #1
 8013530:	e7ee      	b.n	8013510 <__libc_init_array+0xc>
 8013532:	f855 3b04 	ldr.w	r3, [r5], #4
 8013536:	4798      	blx	r3
 8013538:	3601      	adds	r6, #1
 801353a:	e7f2      	b.n	8013522 <__libc_init_array+0x1e>
 801353c:	0801628c 	.word	0x0801628c
 8013540:	0801628c 	.word	0x0801628c
 8013544:	0801628c 	.word	0x0801628c
 8013548:	08016290 	.word	0x08016290

0801354c <malloc>:
 801354c:	4b02      	ldr	r3, [pc, #8]	; (8013558 <malloc+0xc>)
 801354e:	4601      	mov	r1, r0
 8013550:	6818      	ldr	r0, [r3, #0]
 8013552:	f000 b863 	b.w	801361c <_malloc_r>
 8013556:	bf00      	nop
 8013558:	24000184 	.word	0x24000184

0801355c <free>:
 801355c:	4b02      	ldr	r3, [pc, #8]	; (8013568 <free+0xc>)
 801355e:	4601      	mov	r1, r0
 8013560:	6818      	ldr	r0, [r3, #0]
 8013562:	f000 b80b 	b.w	801357c <_free_r>
 8013566:	bf00      	nop
 8013568:	24000184 	.word	0x24000184

0801356c <memset>:
 801356c:	4402      	add	r2, r0
 801356e:	4603      	mov	r3, r0
 8013570:	4293      	cmp	r3, r2
 8013572:	d100      	bne.n	8013576 <memset+0xa>
 8013574:	4770      	bx	lr
 8013576:	f803 1b01 	strb.w	r1, [r3], #1
 801357a:	e7f9      	b.n	8013570 <memset+0x4>

0801357c <_free_r>:
 801357c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801357e:	2900      	cmp	r1, #0
 8013580:	d048      	beq.n	8013614 <_free_r+0x98>
 8013582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013586:	9001      	str	r0, [sp, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	f1a1 0404 	sub.w	r4, r1, #4
 801358e:	bfb8      	it	lt
 8013590:	18e4      	addlt	r4, r4, r3
 8013592:	f001 fb11 	bl	8014bb8 <__malloc_lock>
 8013596:	4a20      	ldr	r2, [pc, #128]	; (8013618 <_free_r+0x9c>)
 8013598:	9801      	ldr	r0, [sp, #4]
 801359a:	6813      	ldr	r3, [r2, #0]
 801359c:	4615      	mov	r5, r2
 801359e:	b933      	cbnz	r3, 80135ae <_free_r+0x32>
 80135a0:	6063      	str	r3, [r4, #4]
 80135a2:	6014      	str	r4, [r2, #0]
 80135a4:	b003      	add	sp, #12
 80135a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135aa:	f001 bb0b 	b.w	8014bc4 <__malloc_unlock>
 80135ae:	42a3      	cmp	r3, r4
 80135b0:	d90b      	bls.n	80135ca <_free_r+0x4e>
 80135b2:	6821      	ldr	r1, [r4, #0]
 80135b4:	1862      	adds	r2, r4, r1
 80135b6:	4293      	cmp	r3, r2
 80135b8:	bf04      	itt	eq
 80135ba:	681a      	ldreq	r2, [r3, #0]
 80135bc:	685b      	ldreq	r3, [r3, #4]
 80135be:	6063      	str	r3, [r4, #4]
 80135c0:	bf04      	itt	eq
 80135c2:	1852      	addeq	r2, r2, r1
 80135c4:	6022      	streq	r2, [r4, #0]
 80135c6:	602c      	str	r4, [r5, #0]
 80135c8:	e7ec      	b.n	80135a4 <_free_r+0x28>
 80135ca:	461a      	mov	r2, r3
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	b10b      	cbz	r3, 80135d4 <_free_r+0x58>
 80135d0:	42a3      	cmp	r3, r4
 80135d2:	d9fa      	bls.n	80135ca <_free_r+0x4e>
 80135d4:	6811      	ldr	r1, [r2, #0]
 80135d6:	1855      	adds	r5, r2, r1
 80135d8:	42a5      	cmp	r5, r4
 80135da:	d10b      	bne.n	80135f4 <_free_r+0x78>
 80135dc:	6824      	ldr	r4, [r4, #0]
 80135de:	4421      	add	r1, r4
 80135e0:	1854      	adds	r4, r2, r1
 80135e2:	42a3      	cmp	r3, r4
 80135e4:	6011      	str	r1, [r2, #0]
 80135e6:	d1dd      	bne.n	80135a4 <_free_r+0x28>
 80135e8:	681c      	ldr	r4, [r3, #0]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	6053      	str	r3, [r2, #4]
 80135ee:	4421      	add	r1, r4
 80135f0:	6011      	str	r1, [r2, #0]
 80135f2:	e7d7      	b.n	80135a4 <_free_r+0x28>
 80135f4:	d902      	bls.n	80135fc <_free_r+0x80>
 80135f6:	230c      	movs	r3, #12
 80135f8:	6003      	str	r3, [r0, #0]
 80135fa:	e7d3      	b.n	80135a4 <_free_r+0x28>
 80135fc:	6825      	ldr	r5, [r4, #0]
 80135fe:	1961      	adds	r1, r4, r5
 8013600:	428b      	cmp	r3, r1
 8013602:	bf04      	itt	eq
 8013604:	6819      	ldreq	r1, [r3, #0]
 8013606:	685b      	ldreq	r3, [r3, #4]
 8013608:	6063      	str	r3, [r4, #4]
 801360a:	bf04      	itt	eq
 801360c:	1949      	addeq	r1, r1, r5
 801360e:	6021      	streq	r1, [r4, #0]
 8013610:	6054      	str	r4, [r2, #4]
 8013612:	e7c7      	b.n	80135a4 <_free_r+0x28>
 8013614:	b003      	add	sp, #12
 8013616:	bd30      	pop	{r4, r5, pc}
 8013618:	2400038c 	.word	0x2400038c

0801361c <_malloc_r>:
 801361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801361e:	1ccd      	adds	r5, r1, #3
 8013620:	f025 0503 	bic.w	r5, r5, #3
 8013624:	3508      	adds	r5, #8
 8013626:	2d0c      	cmp	r5, #12
 8013628:	bf38      	it	cc
 801362a:	250c      	movcc	r5, #12
 801362c:	2d00      	cmp	r5, #0
 801362e:	4606      	mov	r6, r0
 8013630:	db01      	blt.n	8013636 <_malloc_r+0x1a>
 8013632:	42a9      	cmp	r1, r5
 8013634:	d903      	bls.n	801363e <_malloc_r+0x22>
 8013636:	230c      	movs	r3, #12
 8013638:	6033      	str	r3, [r6, #0]
 801363a:	2000      	movs	r0, #0
 801363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801363e:	f001 fabb 	bl	8014bb8 <__malloc_lock>
 8013642:	4921      	ldr	r1, [pc, #132]	; (80136c8 <_malloc_r+0xac>)
 8013644:	680a      	ldr	r2, [r1, #0]
 8013646:	4614      	mov	r4, r2
 8013648:	b99c      	cbnz	r4, 8013672 <_malloc_r+0x56>
 801364a:	4f20      	ldr	r7, [pc, #128]	; (80136cc <_malloc_r+0xb0>)
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	b923      	cbnz	r3, 801365a <_malloc_r+0x3e>
 8013650:	4621      	mov	r1, r4
 8013652:	4630      	mov	r0, r6
 8013654:	f000 fc7e 	bl	8013f54 <_sbrk_r>
 8013658:	6038      	str	r0, [r7, #0]
 801365a:	4629      	mov	r1, r5
 801365c:	4630      	mov	r0, r6
 801365e:	f000 fc79 	bl	8013f54 <_sbrk_r>
 8013662:	1c43      	adds	r3, r0, #1
 8013664:	d123      	bne.n	80136ae <_malloc_r+0x92>
 8013666:	230c      	movs	r3, #12
 8013668:	6033      	str	r3, [r6, #0]
 801366a:	4630      	mov	r0, r6
 801366c:	f001 faaa 	bl	8014bc4 <__malloc_unlock>
 8013670:	e7e3      	b.n	801363a <_malloc_r+0x1e>
 8013672:	6823      	ldr	r3, [r4, #0]
 8013674:	1b5b      	subs	r3, r3, r5
 8013676:	d417      	bmi.n	80136a8 <_malloc_r+0x8c>
 8013678:	2b0b      	cmp	r3, #11
 801367a:	d903      	bls.n	8013684 <_malloc_r+0x68>
 801367c:	6023      	str	r3, [r4, #0]
 801367e:	441c      	add	r4, r3
 8013680:	6025      	str	r5, [r4, #0]
 8013682:	e004      	b.n	801368e <_malloc_r+0x72>
 8013684:	6863      	ldr	r3, [r4, #4]
 8013686:	42a2      	cmp	r2, r4
 8013688:	bf0c      	ite	eq
 801368a:	600b      	streq	r3, [r1, #0]
 801368c:	6053      	strne	r3, [r2, #4]
 801368e:	4630      	mov	r0, r6
 8013690:	f001 fa98 	bl	8014bc4 <__malloc_unlock>
 8013694:	f104 000b 	add.w	r0, r4, #11
 8013698:	1d23      	adds	r3, r4, #4
 801369a:	f020 0007 	bic.w	r0, r0, #7
 801369e:	1ac2      	subs	r2, r0, r3
 80136a0:	d0cc      	beq.n	801363c <_malloc_r+0x20>
 80136a2:	1a1b      	subs	r3, r3, r0
 80136a4:	50a3      	str	r3, [r4, r2]
 80136a6:	e7c9      	b.n	801363c <_malloc_r+0x20>
 80136a8:	4622      	mov	r2, r4
 80136aa:	6864      	ldr	r4, [r4, #4]
 80136ac:	e7cc      	b.n	8013648 <_malloc_r+0x2c>
 80136ae:	1cc4      	adds	r4, r0, #3
 80136b0:	f024 0403 	bic.w	r4, r4, #3
 80136b4:	42a0      	cmp	r0, r4
 80136b6:	d0e3      	beq.n	8013680 <_malloc_r+0x64>
 80136b8:	1a21      	subs	r1, r4, r0
 80136ba:	4630      	mov	r0, r6
 80136bc:	f000 fc4a 	bl	8013f54 <_sbrk_r>
 80136c0:	3001      	adds	r0, #1
 80136c2:	d1dd      	bne.n	8013680 <_malloc_r+0x64>
 80136c4:	e7cf      	b.n	8013666 <_malloc_r+0x4a>
 80136c6:	bf00      	nop
 80136c8:	2400038c 	.word	0x2400038c
 80136cc:	24000390 	.word	0x24000390

080136d0 <__cvt>:
 80136d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136d2:	ed2d 8b02 	vpush	{d8}
 80136d6:	eeb0 8b40 	vmov.f64	d8, d0
 80136da:	b085      	sub	sp, #20
 80136dc:	4617      	mov	r7, r2
 80136de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80136e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80136e2:	ee18 2a90 	vmov	r2, s17
 80136e6:	f025 0520 	bic.w	r5, r5, #32
 80136ea:	2a00      	cmp	r2, #0
 80136ec:	bfb6      	itet	lt
 80136ee:	222d      	movlt	r2, #45	; 0x2d
 80136f0:	2200      	movge	r2, #0
 80136f2:	eeb1 8b40 	vneglt.f64	d8, d0
 80136f6:	2d46      	cmp	r5, #70	; 0x46
 80136f8:	460c      	mov	r4, r1
 80136fa:	701a      	strb	r2, [r3, #0]
 80136fc:	d004      	beq.n	8013708 <__cvt+0x38>
 80136fe:	2d45      	cmp	r5, #69	; 0x45
 8013700:	d100      	bne.n	8013704 <__cvt+0x34>
 8013702:	3401      	adds	r4, #1
 8013704:	2102      	movs	r1, #2
 8013706:	e000      	b.n	801370a <__cvt+0x3a>
 8013708:	2103      	movs	r1, #3
 801370a:	ab03      	add	r3, sp, #12
 801370c:	9301      	str	r3, [sp, #4]
 801370e:	ab02      	add	r3, sp, #8
 8013710:	9300      	str	r3, [sp, #0]
 8013712:	4622      	mov	r2, r4
 8013714:	4633      	mov	r3, r6
 8013716:	eeb0 0b48 	vmov.f64	d0, d8
 801371a:	f000 fcb9 	bl	8014090 <_dtoa_r>
 801371e:	2d47      	cmp	r5, #71	; 0x47
 8013720:	d109      	bne.n	8013736 <__cvt+0x66>
 8013722:	07fb      	lsls	r3, r7, #31
 8013724:	d407      	bmi.n	8013736 <__cvt+0x66>
 8013726:	9b03      	ldr	r3, [sp, #12]
 8013728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801372a:	1a1b      	subs	r3, r3, r0
 801372c:	6013      	str	r3, [r2, #0]
 801372e:	b005      	add	sp, #20
 8013730:	ecbd 8b02 	vpop	{d8}
 8013734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013736:	2d46      	cmp	r5, #70	; 0x46
 8013738:	eb00 0204 	add.w	r2, r0, r4
 801373c:	d10c      	bne.n	8013758 <__cvt+0x88>
 801373e:	7803      	ldrb	r3, [r0, #0]
 8013740:	2b30      	cmp	r3, #48	; 0x30
 8013742:	d107      	bne.n	8013754 <__cvt+0x84>
 8013744:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374c:	bf1c      	itt	ne
 801374e:	f1c4 0401 	rsbne	r4, r4, #1
 8013752:	6034      	strne	r4, [r6, #0]
 8013754:	6833      	ldr	r3, [r6, #0]
 8013756:	441a      	add	r2, r3
 8013758:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013760:	bf08      	it	eq
 8013762:	9203      	streq	r2, [sp, #12]
 8013764:	2130      	movs	r1, #48	; 0x30
 8013766:	9b03      	ldr	r3, [sp, #12]
 8013768:	4293      	cmp	r3, r2
 801376a:	d2dc      	bcs.n	8013726 <__cvt+0x56>
 801376c:	1c5c      	adds	r4, r3, #1
 801376e:	9403      	str	r4, [sp, #12]
 8013770:	7019      	strb	r1, [r3, #0]
 8013772:	e7f8      	b.n	8013766 <__cvt+0x96>

08013774 <__exponent>:
 8013774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013776:	4603      	mov	r3, r0
 8013778:	2900      	cmp	r1, #0
 801377a:	bfb8      	it	lt
 801377c:	4249      	neglt	r1, r1
 801377e:	f803 2b02 	strb.w	r2, [r3], #2
 8013782:	bfb4      	ite	lt
 8013784:	222d      	movlt	r2, #45	; 0x2d
 8013786:	222b      	movge	r2, #43	; 0x2b
 8013788:	2909      	cmp	r1, #9
 801378a:	7042      	strb	r2, [r0, #1]
 801378c:	dd2a      	ble.n	80137e4 <__exponent+0x70>
 801378e:	f10d 0407 	add.w	r4, sp, #7
 8013792:	46a4      	mov	ip, r4
 8013794:	270a      	movs	r7, #10
 8013796:	46a6      	mov	lr, r4
 8013798:	460a      	mov	r2, r1
 801379a:	fb91 f6f7 	sdiv	r6, r1, r7
 801379e:	fb07 1516 	mls	r5, r7, r6, r1
 80137a2:	3530      	adds	r5, #48	; 0x30
 80137a4:	2a63      	cmp	r2, #99	; 0x63
 80137a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80137aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80137ae:	4631      	mov	r1, r6
 80137b0:	dcf1      	bgt.n	8013796 <__exponent+0x22>
 80137b2:	3130      	adds	r1, #48	; 0x30
 80137b4:	f1ae 0502 	sub.w	r5, lr, #2
 80137b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80137bc:	1c44      	adds	r4, r0, #1
 80137be:	4629      	mov	r1, r5
 80137c0:	4561      	cmp	r1, ip
 80137c2:	d30a      	bcc.n	80137da <__exponent+0x66>
 80137c4:	f10d 0209 	add.w	r2, sp, #9
 80137c8:	eba2 020e 	sub.w	r2, r2, lr
 80137cc:	4565      	cmp	r5, ip
 80137ce:	bf88      	it	hi
 80137d0:	2200      	movhi	r2, #0
 80137d2:	4413      	add	r3, r2
 80137d4:	1a18      	subs	r0, r3, r0
 80137d6:	b003      	add	sp, #12
 80137d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80137e2:	e7ed      	b.n	80137c0 <__exponent+0x4c>
 80137e4:	2330      	movs	r3, #48	; 0x30
 80137e6:	3130      	adds	r1, #48	; 0x30
 80137e8:	7083      	strb	r3, [r0, #2]
 80137ea:	70c1      	strb	r1, [r0, #3]
 80137ec:	1d03      	adds	r3, r0, #4
 80137ee:	e7f1      	b.n	80137d4 <__exponent+0x60>

080137f0 <_printf_float>:
 80137f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137f4:	b08b      	sub	sp, #44	; 0x2c
 80137f6:	460c      	mov	r4, r1
 80137f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80137fc:	4616      	mov	r6, r2
 80137fe:	461f      	mov	r7, r3
 8013800:	4605      	mov	r5, r0
 8013802:	f001 f9c7 	bl	8014b94 <_localeconv_r>
 8013806:	f8d0 b000 	ldr.w	fp, [r0]
 801380a:	4658      	mov	r0, fp
 801380c:	f7ec fd68 	bl	80002e0 <strlen>
 8013810:	2300      	movs	r3, #0
 8013812:	9308      	str	r3, [sp, #32]
 8013814:	f8d8 3000 	ldr.w	r3, [r8]
 8013818:	f894 9018 	ldrb.w	r9, [r4, #24]
 801381c:	6822      	ldr	r2, [r4, #0]
 801381e:	3307      	adds	r3, #7
 8013820:	f023 0307 	bic.w	r3, r3, #7
 8013824:	f103 0108 	add.w	r1, r3, #8
 8013828:	f8c8 1000 	str.w	r1, [r8]
 801382c:	4682      	mov	sl, r0
 801382e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013832:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8013836:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013a98 <_printf_float+0x2a8>
 801383a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801383e:	eeb0 6bc0 	vabs.f64	d6, d0
 8013842:	eeb4 6b47 	vcmp.f64	d6, d7
 8013846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384a:	dd24      	ble.n	8013896 <_printf_float+0xa6>
 801384c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013854:	d502      	bpl.n	801385c <_printf_float+0x6c>
 8013856:	232d      	movs	r3, #45	; 0x2d
 8013858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801385c:	4b90      	ldr	r3, [pc, #576]	; (8013aa0 <_printf_float+0x2b0>)
 801385e:	4891      	ldr	r0, [pc, #580]	; (8013aa4 <_printf_float+0x2b4>)
 8013860:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013864:	bf94      	ite	ls
 8013866:	4698      	movls	r8, r3
 8013868:	4680      	movhi	r8, r0
 801386a:	2303      	movs	r3, #3
 801386c:	6123      	str	r3, [r4, #16]
 801386e:	f022 0204 	bic.w	r2, r2, #4
 8013872:	2300      	movs	r3, #0
 8013874:	6022      	str	r2, [r4, #0]
 8013876:	9304      	str	r3, [sp, #16]
 8013878:	9700      	str	r7, [sp, #0]
 801387a:	4633      	mov	r3, r6
 801387c:	aa09      	add	r2, sp, #36	; 0x24
 801387e:	4621      	mov	r1, r4
 8013880:	4628      	mov	r0, r5
 8013882:	f000 f9d3 	bl	8013c2c <_printf_common>
 8013886:	3001      	adds	r0, #1
 8013888:	f040 808a 	bne.w	80139a0 <_printf_float+0x1b0>
 801388c:	f04f 30ff 	mov.w	r0, #4294967295
 8013890:	b00b      	add	sp, #44	; 0x2c
 8013892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013896:	eeb4 0b40 	vcmp.f64	d0, d0
 801389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801389e:	d709      	bvc.n	80138b4 <_printf_float+0xc4>
 80138a0:	ee10 3a90 	vmov	r3, s1
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	bfbc      	itt	lt
 80138a8:	232d      	movlt	r3, #45	; 0x2d
 80138aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80138ae:	487e      	ldr	r0, [pc, #504]	; (8013aa8 <_printf_float+0x2b8>)
 80138b0:	4b7e      	ldr	r3, [pc, #504]	; (8013aac <_printf_float+0x2bc>)
 80138b2:	e7d5      	b.n	8013860 <_printf_float+0x70>
 80138b4:	6863      	ldr	r3, [r4, #4]
 80138b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80138ba:	9104      	str	r1, [sp, #16]
 80138bc:	1c59      	adds	r1, r3, #1
 80138be:	d13c      	bne.n	801393a <_printf_float+0x14a>
 80138c0:	2306      	movs	r3, #6
 80138c2:	6063      	str	r3, [r4, #4]
 80138c4:	2300      	movs	r3, #0
 80138c6:	9303      	str	r3, [sp, #12]
 80138c8:	ab08      	add	r3, sp, #32
 80138ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80138ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80138d2:	ab07      	add	r3, sp, #28
 80138d4:	6861      	ldr	r1, [r4, #4]
 80138d6:	9300      	str	r3, [sp, #0]
 80138d8:	6022      	str	r2, [r4, #0]
 80138da:	f10d 031b 	add.w	r3, sp, #27
 80138de:	4628      	mov	r0, r5
 80138e0:	f7ff fef6 	bl	80136d0 <__cvt>
 80138e4:	9b04      	ldr	r3, [sp, #16]
 80138e6:	9907      	ldr	r1, [sp, #28]
 80138e8:	2b47      	cmp	r3, #71	; 0x47
 80138ea:	4680      	mov	r8, r0
 80138ec:	d108      	bne.n	8013900 <_printf_float+0x110>
 80138ee:	1cc8      	adds	r0, r1, #3
 80138f0:	db02      	blt.n	80138f8 <_printf_float+0x108>
 80138f2:	6863      	ldr	r3, [r4, #4]
 80138f4:	4299      	cmp	r1, r3
 80138f6:	dd41      	ble.n	801397c <_printf_float+0x18c>
 80138f8:	f1a9 0902 	sub.w	r9, r9, #2
 80138fc:	fa5f f989 	uxtb.w	r9, r9
 8013900:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013904:	d820      	bhi.n	8013948 <_printf_float+0x158>
 8013906:	3901      	subs	r1, #1
 8013908:	464a      	mov	r2, r9
 801390a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801390e:	9107      	str	r1, [sp, #28]
 8013910:	f7ff ff30 	bl	8013774 <__exponent>
 8013914:	9a08      	ldr	r2, [sp, #32]
 8013916:	9004      	str	r0, [sp, #16]
 8013918:	1813      	adds	r3, r2, r0
 801391a:	2a01      	cmp	r2, #1
 801391c:	6123      	str	r3, [r4, #16]
 801391e:	dc02      	bgt.n	8013926 <_printf_float+0x136>
 8013920:	6822      	ldr	r2, [r4, #0]
 8013922:	07d2      	lsls	r2, r2, #31
 8013924:	d501      	bpl.n	801392a <_printf_float+0x13a>
 8013926:	3301      	adds	r3, #1
 8013928:	6123      	str	r3, [r4, #16]
 801392a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d0a2      	beq.n	8013878 <_printf_float+0x88>
 8013932:	232d      	movs	r3, #45	; 0x2d
 8013934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013938:	e79e      	b.n	8013878 <_printf_float+0x88>
 801393a:	9904      	ldr	r1, [sp, #16]
 801393c:	2947      	cmp	r1, #71	; 0x47
 801393e:	d1c1      	bne.n	80138c4 <_printf_float+0xd4>
 8013940:	2b00      	cmp	r3, #0
 8013942:	d1bf      	bne.n	80138c4 <_printf_float+0xd4>
 8013944:	2301      	movs	r3, #1
 8013946:	e7bc      	b.n	80138c2 <_printf_float+0xd2>
 8013948:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801394c:	d118      	bne.n	8013980 <_printf_float+0x190>
 801394e:	2900      	cmp	r1, #0
 8013950:	6863      	ldr	r3, [r4, #4]
 8013952:	dd0b      	ble.n	801396c <_printf_float+0x17c>
 8013954:	6121      	str	r1, [r4, #16]
 8013956:	b913      	cbnz	r3, 801395e <_printf_float+0x16e>
 8013958:	6822      	ldr	r2, [r4, #0]
 801395a:	07d0      	lsls	r0, r2, #31
 801395c:	d502      	bpl.n	8013964 <_printf_float+0x174>
 801395e:	3301      	adds	r3, #1
 8013960:	440b      	add	r3, r1
 8013962:	6123      	str	r3, [r4, #16]
 8013964:	2300      	movs	r3, #0
 8013966:	65a1      	str	r1, [r4, #88]	; 0x58
 8013968:	9304      	str	r3, [sp, #16]
 801396a:	e7de      	b.n	801392a <_printf_float+0x13a>
 801396c:	b913      	cbnz	r3, 8013974 <_printf_float+0x184>
 801396e:	6822      	ldr	r2, [r4, #0]
 8013970:	07d2      	lsls	r2, r2, #31
 8013972:	d501      	bpl.n	8013978 <_printf_float+0x188>
 8013974:	3302      	adds	r3, #2
 8013976:	e7f4      	b.n	8013962 <_printf_float+0x172>
 8013978:	2301      	movs	r3, #1
 801397a:	e7f2      	b.n	8013962 <_printf_float+0x172>
 801397c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013980:	9b08      	ldr	r3, [sp, #32]
 8013982:	4299      	cmp	r1, r3
 8013984:	db05      	blt.n	8013992 <_printf_float+0x1a2>
 8013986:	6823      	ldr	r3, [r4, #0]
 8013988:	6121      	str	r1, [r4, #16]
 801398a:	07d8      	lsls	r0, r3, #31
 801398c:	d5ea      	bpl.n	8013964 <_printf_float+0x174>
 801398e:	1c4b      	adds	r3, r1, #1
 8013990:	e7e7      	b.n	8013962 <_printf_float+0x172>
 8013992:	2900      	cmp	r1, #0
 8013994:	bfd4      	ite	le
 8013996:	f1c1 0202 	rsble	r2, r1, #2
 801399a:	2201      	movgt	r2, #1
 801399c:	4413      	add	r3, r2
 801399e:	e7e0      	b.n	8013962 <_printf_float+0x172>
 80139a0:	6823      	ldr	r3, [r4, #0]
 80139a2:	055a      	lsls	r2, r3, #21
 80139a4:	d407      	bmi.n	80139b6 <_printf_float+0x1c6>
 80139a6:	6923      	ldr	r3, [r4, #16]
 80139a8:	4642      	mov	r2, r8
 80139aa:	4631      	mov	r1, r6
 80139ac:	4628      	mov	r0, r5
 80139ae:	47b8      	blx	r7
 80139b0:	3001      	adds	r0, #1
 80139b2:	d12a      	bne.n	8013a0a <_printf_float+0x21a>
 80139b4:	e76a      	b.n	801388c <_printf_float+0x9c>
 80139b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80139ba:	f240 80e2 	bls.w	8013b82 <_printf_float+0x392>
 80139be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80139c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80139c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ca:	d133      	bne.n	8013a34 <_printf_float+0x244>
 80139cc:	4a38      	ldr	r2, [pc, #224]	; (8013ab0 <_printf_float+0x2c0>)
 80139ce:	2301      	movs	r3, #1
 80139d0:	4631      	mov	r1, r6
 80139d2:	4628      	mov	r0, r5
 80139d4:	47b8      	blx	r7
 80139d6:	3001      	adds	r0, #1
 80139d8:	f43f af58 	beq.w	801388c <_printf_float+0x9c>
 80139dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80139e0:	429a      	cmp	r2, r3
 80139e2:	db02      	blt.n	80139ea <_printf_float+0x1fa>
 80139e4:	6823      	ldr	r3, [r4, #0]
 80139e6:	07d8      	lsls	r0, r3, #31
 80139e8:	d50f      	bpl.n	8013a0a <_printf_float+0x21a>
 80139ea:	4653      	mov	r3, sl
 80139ec:	465a      	mov	r2, fp
 80139ee:	4631      	mov	r1, r6
 80139f0:	4628      	mov	r0, r5
 80139f2:	47b8      	blx	r7
 80139f4:	3001      	adds	r0, #1
 80139f6:	f43f af49 	beq.w	801388c <_printf_float+0x9c>
 80139fa:	f04f 0800 	mov.w	r8, #0
 80139fe:	f104 091a 	add.w	r9, r4, #26
 8013a02:	9b08      	ldr	r3, [sp, #32]
 8013a04:	3b01      	subs	r3, #1
 8013a06:	4543      	cmp	r3, r8
 8013a08:	dc09      	bgt.n	8013a1e <_printf_float+0x22e>
 8013a0a:	6823      	ldr	r3, [r4, #0]
 8013a0c:	079b      	lsls	r3, r3, #30
 8013a0e:	f100 8108 	bmi.w	8013c22 <_printf_float+0x432>
 8013a12:	68e0      	ldr	r0, [r4, #12]
 8013a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a16:	4298      	cmp	r0, r3
 8013a18:	bfb8      	it	lt
 8013a1a:	4618      	movlt	r0, r3
 8013a1c:	e738      	b.n	8013890 <_printf_float+0xa0>
 8013a1e:	2301      	movs	r3, #1
 8013a20:	464a      	mov	r2, r9
 8013a22:	4631      	mov	r1, r6
 8013a24:	4628      	mov	r0, r5
 8013a26:	47b8      	blx	r7
 8013a28:	3001      	adds	r0, #1
 8013a2a:	f43f af2f 	beq.w	801388c <_printf_float+0x9c>
 8013a2e:	f108 0801 	add.w	r8, r8, #1
 8013a32:	e7e6      	b.n	8013a02 <_printf_float+0x212>
 8013a34:	9b07      	ldr	r3, [sp, #28]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	dc3c      	bgt.n	8013ab4 <_printf_float+0x2c4>
 8013a3a:	4a1d      	ldr	r2, [pc, #116]	; (8013ab0 <_printf_float+0x2c0>)
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	4631      	mov	r1, r6
 8013a40:	4628      	mov	r0, r5
 8013a42:	47b8      	blx	r7
 8013a44:	3001      	adds	r0, #1
 8013a46:	f43f af21 	beq.w	801388c <_printf_float+0x9c>
 8013a4a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013a4e:	4313      	orrs	r3, r2
 8013a50:	d102      	bne.n	8013a58 <_printf_float+0x268>
 8013a52:	6823      	ldr	r3, [r4, #0]
 8013a54:	07d9      	lsls	r1, r3, #31
 8013a56:	d5d8      	bpl.n	8013a0a <_printf_float+0x21a>
 8013a58:	4653      	mov	r3, sl
 8013a5a:	465a      	mov	r2, fp
 8013a5c:	4631      	mov	r1, r6
 8013a5e:	4628      	mov	r0, r5
 8013a60:	47b8      	blx	r7
 8013a62:	3001      	adds	r0, #1
 8013a64:	f43f af12 	beq.w	801388c <_printf_float+0x9c>
 8013a68:	f04f 0900 	mov.w	r9, #0
 8013a6c:	f104 0a1a 	add.w	sl, r4, #26
 8013a70:	9b07      	ldr	r3, [sp, #28]
 8013a72:	425b      	negs	r3, r3
 8013a74:	454b      	cmp	r3, r9
 8013a76:	dc01      	bgt.n	8013a7c <_printf_float+0x28c>
 8013a78:	9b08      	ldr	r3, [sp, #32]
 8013a7a:	e795      	b.n	80139a8 <_printf_float+0x1b8>
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	4652      	mov	r2, sl
 8013a80:	4631      	mov	r1, r6
 8013a82:	4628      	mov	r0, r5
 8013a84:	47b8      	blx	r7
 8013a86:	3001      	adds	r0, #1
 8013a88:	f43f af00 	beq.w	801388c <_printf_float+0x9c>
 8013a8c:	f109 0901 	add.w	r9, r9, #1
 8013a90:	e7ee      	b.n	8013a70 <_printf_float+0x280>
 8013a92:	bf00      	nop
 8013a94:	f3af 8000 	nop.w
 8013a98:	ffffffff 	.word	0xffffffff
 8013a9c:	7fefffff 	.word	0x7fefffff
 8013aa0:	08015ea8 	.word	0x08015ea8
 8013aa4:	08015eac 	.word	0x08015eac
 8013aa8:	08015eb4 	.word	0x08015eb4
 8013aac:	08015eb0 	.word	0x08015eb0
 8013ab0:	08015eb8 	.word	0x08015eb8
 8013ab4:	9a08      	ldr	r2, [sp, #32]
 8013ab6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	bfa8      	it	ge
 8013abc:	461a      	movge	r2, r3
 8013abe:	2a00      	cmp	r2, #0
 8013ac0:	4691      	mov	r9, r2
 8013ac2:	dc38      	bgt.n	8013b36 <_printf_float+0x346>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	9305      	str	r3, [sp, #20]
 8013ac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013acc:	f104 021a 	add.w	r2, r4, #26
 8013ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ad2:	9905      	ldr	r1, [sp, #20]
 8013ad4:	9304      	str	r3, [sp, #16]
 8013ad6:	eba3 0309 	sub.w	r3, r3, r9
 8013ada:	428b      	cmp	r3, r1
 8013adc:	dc33      	bgt.n	8013b46 <_printf_float+0x356>
 8013ade:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	db3c      	blt.n	8013b60 <_printf_float+0x370>
 8013ae6:	6823      	ldr	r3, [r4, #0]
 8013ae8:	07da      	lsls	r2, r3, #31
 8013aea:	d439      	bmi.n	8013b60 <_printf_float+0x370>
 8013aec:	9a08      	ldr	r2, [sp, #32]
 8013aee:	9b04      	ldr	r3, [sp, #16]
 8013af0:	9907      	ldr	r1, [sp, #28]
 8013af2:	1ad3      	subs	r3, r2, r3
 8013af4:	eba2 0901 	sub.w	r9, r2, r1
 8013af8:	4599      	cmp	r9, r3
 8013afa:	bfa8      	it	ge
 8013afc:	4699      	movge	r9, r3
 8013afe:	f1b9 0f00 	cmp.w	r9, #0
 8013b02:	dc35      	bgt.n	8013b70 <_printf_float+0x380>
 8013b04:	f04f 0800 	mov.w	r8, #0
 8013b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013b0c:	f104 0a1a 	add.w	sl, r4, #26
 8013b10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013b14:	1a9b      	subs	r3, r3, r2
 8013b16:	eba3 0309 	sub.w	r3, r3, r9
 8013b1a:	4543      	cmp	r3, r8
 8013b1c:	f77f af75 	ble.w	8013a0a <_printf_float+0x21a>
 8013b20:	2301      	movs	r3, #1
 8013b22:	4652      	mov	r2, sl
 8013b24:	4631      	mov	r1, r6
 8013b26:	4628      	mov	r0, r5
 8013b28:	47b8      	blx	r7
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	f43f aeae 	beq.w	801388c <_printf_float+0x9c>
 8013b30:	f108 0801 	add.w	r8, r8, #1
 8013b34:	e7ec      	b.n	8013b10 <_printf_float+0x320>
 8013b36:	4613      	mov	r3, r2
 8013b38:	4631      	mov	r1, r6
 8013b3a:	4642      	mov	r2, r8
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	47b8      	blx	r7
 8013b40:	3001      	adds	r0, #1
 8013b42:	d1bf      	bne.n	8013ac4 <_printf_float+0x2d4>
 8013b44:	e6a2      	b.n	801388c <_printf_float+0x9c>
 8013b46:	2301      	movs	r3, #1
 8013b48:	4631      	mov	r1, r6
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	9204      	str	r2, [sp, #16]
 8013b4e:	47b8      	blx	r7
 8013b50:	3001      	adds	r0, #1
 8013b52:	f43f ae9b 	beq.w	801388c <_printf_float+0x9c>
 8013b56:	9b05      	ldr	r3, [sp, #20]
 8013b58:	9a04      	ldr	r2, [sp, #16]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	9305      	str	r3, [sp, #20]
 8013b5e:	e7b7      	b.n	8013ad0 <_printf_float+0x2e0>
 8013b60:	4653      	mov	r3, sl
 8013b62:	465a      	mov	r2, fp
 8013b64:	4631      	mov	r1, r6
 8013b66:	4628      	mov	r0, r5
 8013b68:	47b8      	blx	r7
 8013b6a:	3001      	adds	r0, #1
 8013b6c:	d1be      	bne.n	8013aec <_printf_float+0x2fc>
 8013b6e:	e68d      	b.n	801388c <_printf_float+0x9c>
 8013b70:	9a04      	ldr	r2, [sp, #16]
 8013b72:	464b      	mov	r3, r9
 8013b74:	4442      	add	r2, r8
 8013b76:	4631      	mov	r1, r6
 8013b78:	4628      	mov	r0, r5
 8013b7a:	47b8      	blx	r7
 8013b7c:	3001      	adds	r0, #1
 8013b7e:	d1c1      	bne.n	8013b04 <_printf_float+0x314>
 8013b80:	e684      	b.n	801388c <_printf_float+0x9c>
 8013b82:	9a08      	ldr	r2, [sp, #32]
 8013b84:	2a01      	cmp	r2, #1
 8013b86:	dc01      	bgt.n	8013b8c <_printf_float+0x39c>
 8013b88:	07db      	lsls	r3, r3, #31
 8013b8a:	d537      	bpl.n	8013bfc <_printf_float+0x40c>
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	4642      	mov	r2, r8
 8013b90:	4631      	mov	r1, r6
 8013b92:	4628      	mov	r0, r5
 8013b94:	47b8      	blx	r7
 8013b96:	3001      	adds	r0, #1
 8013b98:	f43f ae78 	beq.w	801388c <_printf_float+0x9c>
 8013b9c:	4653      	mov	r3, sl
 8013b9e:	465a      	mov	r2, fp
 8013ba0:	4631      	mov	r1, r6
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	47b8      	blx	r7
 8013ba6:	3001      	adds	r0, #1
 8013ba8:	f43f ae70 	beq.w	801388c <_printf_float+0x9c>
 8013bac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013bb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb8:	d01b      	beq.n	8013bf2 <_printf_float+0x402>
 8013bba:	9b08      	ldr	r3, [sp, #32]
 8013bbc:	f108 0201 	add.w	r2, r8, #1
 8013bc0:	3b01      	subs	r3, #1
 8013bc2:	4631      	mov	r1, r6
 8013bc4:	4628      	mov	r0, r5
 8013bc6:	47b8      	blx	r7
 8013bc8:	3001      	adds	r0, #1
 8013bca:	d10e      	bne.n	8013bea <_printf_float+0x3fa>
 8013bcc:	e65e      	b.n	801388c <_printf_float+0x9c>
 8013bce:	2301      	movs	r3, #1
 8013bd0:	464a      	mov	r2, r9
 8013bd2:	4631      	mov	r1, r6
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	47b8      	blx	r7
 8013bd8:	3001      	adds	r0, #1
 8013bda:	f43f ae57 	beq.w	801388c <_printf_float+0x9c>
 8013bde:	f108 0801 	add.w	r8, r8, #1
 8013be2:	9b08      	ldr	r3, [sp, #32]
 8013be4:	3b01      	subs	r3, #1
 8013be6:	4543      	cmp	r3, r8
 8013be8:	dcf1      	bgt.n	8013bce <_printf_float+0x3de>
 8013bea:	9b04      	ldr	r3, [sp, #16]
 8013bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013bf0:	e6db      	b.n	80139aa <_printf_float+0x1ba>
 8013bf2:	f04f 0800 	mov.w	r8, #0
 8013bf6:	f104 091a 	add.w	r9, r4, #26
 8013bfa:	e7f2      	b.n	8013be2 <_printf_float+0x3f2>
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	4642      	mov	r2, r8
 8013c00:	e7df      	b.n	8013bc2 <_printf_float+0x3d2>
 8013c02:	2301      	movs	r3, #1
 8013c04:	464a      	mov	r2, r9
 8013c06:	4631      	mov	r1, r6
 8013c08:	4628      	mov	r0, r5
 8013c0a:	47b8      	blx	r7
 8013c0c:	3001      	adds	r0, #1
 8013c0e:	f43f ae3d 	beq.w	801388c <_printf_float+0x9c>
 8013c12:	f108 0801 	add.w	r8, r8, #1
 8013c16:	68e3      	ldr	r3, [r4, #12]
 8013c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c1a:	1a5b      	subs	r3, r3, r1
 8013c1c:	4543      	cmp	r3, r8
 8013c1e:	dcf0      	bgt.n	8013c02 <_printf_float+0x412>
 8013c20:	e6f7      	b.n	8013a12 <_printf_float+0x222>
 8013c22:	f04f 0800 	mov.w	r8, #0
 8013c26:	f104 0919 	add.w	r9, r4, #25
 8013c2a:	e7f4      	b.n	8013c16 <_printf_float+0x426>

08013c2c <_printf_common>:
 8013c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c30:	4616      	mov	r6, r2
 8013c32:	4699      	mov	r9, r3
 8013c34:	688a      	ldr	r2, [r1, #8]
 8013c36:	690b      	ldr	r3, [r1, #16]
 8013c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	bfb8      	it	lt
 8013c40:	4613      	movlt	r3, r2
 8013c42:	6033      	str	r3, [r6, #0]
 8013c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013c48:	4607      	mov	r7, r0
 8013c4a:	460c      	mov	r4, r1
 8013c4c:	b10a      	cbz	r2, 8013c52 <_printf_common+0x26>
 8013c4e:	3301      	adds	r3, #1
 8013c50:	6033      	str	r3, [r6, #0]
 8013c52:	6823      	ldr	r3, [r4, #0]
 8013c54:	0699      	lsls	r1, r3, #26
 8013c56:	bf42      	ittt	mi
 8013c58:	6833      	ldrmi	r3, [r6, #0]
 8013c5a:	3302      	addmi	r3, #2
 8013c5c:	6033      	strmi	r3, [r6, #0]
 8013c5e:	6825      	ldr	r5, [r4, #0]
 8013c60:	f015 0506 	ands.w	r5, r5, #6
 8013c64:	d106      	bne.n	8013c74 <_printf_common+0x48>
 8013c66:	f104 0a19 	add.w	sl, r4, #25
 8013c6a:	68e3      	ldr	r3, [r4, #12]
 8013c6c:	6832      	ldr	r2, [r6, #0]
 8013c6e:	1a9b      	subs	r3, r3, r2
 8013c70:	42ab      	cmp	r3, r5
 8013c72:	dc26      	bgt.n	8013cc2 <_printf_common+0x96>
 8013c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013c78:	1e13      	subs	r3, r2, #0
 8013c7a:	6822      	ldr	r2, [r4, #0]
 8013c7c:	bf18      	it	ne
 8013c7e:	2301      	movne	r3, #1
 8013c80:	0692      	lsls	r2, r2, #26
 8013c82:	d42b      	bmi.n	8013cdc <_printf_common+0xb0>
 8013c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c88:	4649      	mov	r1, r9
 8013c8a:	4638      	mov	r0, r7
 8013c8c:	47c0      	blx	r8
 8013c8e:	3001      	adds	r0, #1
 8013c90:	d01e      	beq.n	8013cd0 <_printf_common+0xa4>
 8013c92:	6823      	ldr	r3, [r4, #0]
 8013c94:	68e5      	ldr	r5, [r4, #12]
 8013c96:	6832      	ldr	r2, [r6, #0]
 8013c98:	f003 0306 	and.w	r3, r3, #6
 8013c9c:	2b04      	cmp	r3, #4
 8013c9e:	bf08      	it	eq
 8013ca0:	1aad      	subeq	r5, r5, r2
 8013ca2:	68a3      	ldr	r3, [r4, #8]
 8013ca4:	6922      	ldr	r2, [r4, #16]
 8013ca6:	bf0c      	ite	eq
 8013ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013cac:	2500      	movne	r5, #0
 8013cae:	4293      	cmp	r3, r2
 8013cb0:	bfc4      	itt	gt
 8013cb2:	1a9b      	subgt	r3, r3, r2
 8013cb4:	18ed      	addgt	r5, r5, r3
 8013cb6:	2600      	movs	r6, #0
 8013cb8:	341a      	adds	r4, #26
 8013cba:	42b5      	cmp	r5, r6
 8013cbc:	d11a      	bne.n	8013cf4 <_printf_common+0xc8>
 8013cbe:	2000      	movs	r0, #0
 8013cc0:	e008      	b.n	8013cd4 <_printf_common+0xa8>
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	4652      	mov	r2, sl
 8013cc6:	4649      	mov	r1, r9
 8013cc8:	4638      	mov	r0, r7
 8013cca:	47c0      	blx	r8
 8013ccc:	3001      	adds	r0, #1
 8013cce:	d103      	bne.n	8013cd8 <_printf_common+0xac>
 8013cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cd8:	3501      	adds	r5, #1
 8013cda:	e7c6      	b.n	8013c6a <_printf_common+0x3e>
 8013cdc:	18e1      	adds	r1, r4, r3
 8013cde:	1c5a      	adds	r2, r3, #1
 8013ce0:	2030      	movs	r0, #48	; 0x30
 8013ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013ce6:	4422      	add	r2, r4
 8013ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013cf0:	3302      	adds	r3, #2
 8013cf2:	e7c7      	b.n	8013c84 <_printf_common+0x58>
 8013cf4:	2301      	movs	r3, #1
 8013cf6:	4622      	mov	r2, r4
 8013cf8:	4649      	mov	r1, r9
 8013cfa:	4638      	mov	r0, r7
 8013cfc:	47c0      	blx	r8
 8013cfe:	3001      	adds	r0, #1
 8013d00:	d0e6      	beq.n	8013cd0 <_printf_common+0xa4>
 8013d02:	3601      	adds	r6, #1
 8013d04:	e7d9      	b.n	8013cba <_printf_common+0x8e>
	...

08013d08 <_printf_i>:
 8013d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d0c:	460c      	mov	r4, r1
 8013d0e:	4691      	mov	r9, r2
 8013d10:	7e27      	ldrb	r7, [r4, #24]
 8013d12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013d14:	2f78      	cmp	r7, #120	; 0x78
 8013d16:	4680      	mov	r8, r0
 8013d18:	469a      	mov	sl, r3
 8013d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d1e:	d807      	bhi.n	8013d30 <_printf_i+0x28>
 8013d20:	2f62      	cmp	r7, #98	; 0x62
 8013d22:	d80a      	bhi.n	8013d3a <_printf_i+0x32>
 8013d24:	2f00      	cmp	r7, #0
 8013d26:	f000 80d8 	beq.w	8013eda <_printf_i+0x1d2>
 8013d2a:	2f58      	cmp	r7, #88	; 0x58
 8013d2c:	f000 80a3 	beq.w	8013e76 <_printf_i+0x16e>
 8013d30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013d38:	e03a      	b.n	8013db0 <_printf_i+0xa8>
 8013d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013d3e:	2b15      	cmp	r3, #21
 8013d40:	d8f6      	bhi.n	8013d30 <_printf_i+0x28>
 8013d42:	a001      	add	r0, pc, #4	; (adr r0, 8013d48 <_printf_i+0x40>)
 8013d44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013d48:	08013da1 	.word	0x08013da1
 8013d4c:	08013db5 	.word	0x08013db5
 8013d50:	08013d31 	.word	0x08013d31
 8013d54:	08013d31 	.word	0x08013d31
 8013d58:	08013d31 	.word	0x08013d31
 8013d5c:	08013d31 	.word	0x08013d31
 8013d60:	08013db5 	.word	0x08013db5
 8013d64:	08013d31 	.word	0x08013d31
 8013d68:	08013d31 	.word	0x08013d31
 8013d6c:	08013d31 	.word	0x08013d31
 8013d70:	08013d31 	.word	0x08013d31
 8013d74:	08013ec1 	.word	0x08013ec1
 8013d78:	08013de5 	.word	0x08013de5
 8013d7c:	08013ea3 	.word	0x08013ea3
 8013d80:	08013d31 	.word	0x08013d31
 8013d84:	08013d31 	.word	0x08013d31
 8013d88:	08013ee3 	.word	0x08013ee3
 8013d8c:	08013d31 	.word	0x08013d31
 8013d90:	08013de5 	.word	0x08013de5
 8013d94:	08013d31 	.word	0x08013d31
 8013d98:	08013d31 	.word	0x08013d31
 8013d9c:	08013eab 	.word	0x08013eab
 8013da0:	680b      	ldr	r3, [r1, #0]
 8013da2:	1d1a      	adds	r2, r3, #4
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	600a      	str	r2, [r1, #0]
 8013da8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013db0:	2301      	movs	r3, #1
 8013db2:	e0a3      	b.n	8013efc <_printf_i+0x1f4>
 8013db4:	6825      	ldr	r5, [r4, #0]
 8013db6:	6808      	ldr	r0, [r1, #0]
 8013db8:	062e      	lsls	r6, r5, #24
 8013dba:	f100 0304 	add.w	r3, r0, #4
 8013dbe:	d50a      	bpl.n	8013dd6 <_printf_i+0xce>
 8013dc0:	6805      	ldr	r5, [r0, #0]
 8013dc2:	600b      	str	r3, [r1, #0]
 8013dc4:	2d00      	cmp	r5, #0
 8013dc6:	da03      	bge.n	8013dd0 <_printf_i+0xc8>
 8013dc8:	232d      	movs	r3, #45	; 0x2d
 8013dca:	426d      	negs	r5, r5
 8013dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013dd0:	485e      	ldr	r0, [pc, #376]	; (8013f4c <_printf_i+0x244>)
 8013dd2:	230a      	movs	r3, #10
 8013dd4:	e019      	b.n	8013e0a <_printf_i+0x102>
 8013dd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013dda:	6805      	ldr	r5, [r0, #0]
 8013ddc:	600b      	str	r3, [r1, #0]
 8013dde:	bf18      	it	ne
 8013de0:	b22d      	sxthne	r5, r5
 8013de2:	e7ef      	b.n	8013dc4 <_printf_i+0xbc>
 8013de4:	680b      	ldr	r3, [r1, #0]
 8013de6:	6825      	ldr	r5, [r4, #0]
 8013de8:	1d18      	adds	r0, r3, #4
 8013dea:	6008      	str	r0, [r1, #0]
 8013dec:	0628      	lsls	r0, r5, #24
 8013dee:	d501      	bpl.n	8013df4 <_printf_i+0xec>
 8013df0:	681d      	ldr	r5, [r3, #0]
 8013df2:	e002      	b.n	8013dfa <_printf_i+0xf2>
 8013df4:	0669      	lsls	r1, r5, #25
 8013df6:	d5fb      	bpl.n	8013df0 <_printf_i+0xe8>
 8013df8:	881d      	ldrh	r5, [r3, #0]
 8013dfa:	4854      	ldr	r0, [pc, #336]	; (8013f4c <_printf_i+0x244>)
 8013dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8013dfe:	bf0c      	ite	eq
 8013e00:	2308      	moveq	r3, #8
 8013e02:	230a      	movne	r3, #10
 8013e04:	2100      	movs	r1, #0
 8013e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013e0a:	6866      	ldr	r6, [r4, #4]
 8013e0c:	60a6      	str	r6, [r4, #8]
 8013e0e:	2e00      	cmp	r6, #0
 8013e10:	bfa2      	ittt	ge
 8013e12:	6821      	ldrge	r1, [r4, #0]
 8013e14:	f021 0104 	bicge.w	r1, r1, #4
 8013e18:	6021      	strge	r1, [r4, #0]
 8013e1a:	b90d      	cbnz	r5, 8013e20 <_printf_i+0x118>
 8013e1c:	2e00      	cmp	r6, #0
 8013e1e:	d04d      	beq.n	8013ebc <_printf_i+0x1b4>
 8013e20:	4616      	mov	r6, r2
 8013e22:	fbb5 f1f3 	udiv	r1, r5, r3
 8013e26:	fb03 5711 	mls	r7, r3, r1, r5
 8013e2a:	5dc7      	ldrb	r7, [r0, r7]
 8013e2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013e30:	462f      	mov	r7, r5
 8013e32:	42bb      	cmp	r3, r7
 8013e34:	460d      	mov	r5, r1
 8013e36:	d9f4      	bls.n	8013e22 <_printf_i+0x11a>
 8013e38:	2b08      	cmp	r3, #8
 8013e3a:	d10b      	bne.n	8013e54 <_printf_i+0x14c>
 8013e3c:	6823      	ldr	r3, [r4, #0]
 8013e3e:	07df      	lsls	r7, r3, #31
 8013e40:	d508      	bpl.n	8013e54 <_printf_i+0x14c>
 8013e42:	6923      	ldr	r3, [r4, #16]
 8013e44:	6861      	ldr	r1, [r4, #4]
 8013e46:	4299      	cmp	r1, r3
 8013e48:	bfde      	ittt	le
 8013e4a:	2330      	movle	r3, #48	; 0x30
 8013e4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013e50:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013e54:	1b92      	subs	r2, r2, r6
 8013e56:	6122      	str	r2, [r4, #16]
 8013e58:	f8cd a000 	str.w	sl, [sp]
 8013e5c:	464b      	mov	r3, r9
 8013e5e:	aa03      	add	r2, sp, #12
 8013e60:	4621      	mov	r1, r4
 8013e62:	4640      	mov	r0, r8
 8013e64:	f7ff fee2 	bl	8013c2c <_printf_common>
 8013e68:	3001      	adds	r0, #1
 8013e6a:	d14c      	bne.n	8013f06 <_printf_i+0x1fe>
 8013e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8013e70:	b004      	add	sp, #16
 8013e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e76:	4835      	ldr	r0, [pc, #212]	; (8013f4c <_printf_i+0x244>)
 8013e78:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013e7c:	6823      	ldr	r3, [r4, #0]
 8013e7e:	680e      	ldr	r6, [r1, #0]
 8013e80:	061f      	lsls	r7, r3, #24
 8013e82:	f856 5b04 	ldr.w	r5, [r6], #4
 8013e86:	600e      	str	r6, [r1, #0]
 8013e88:	d514      	bpl.n	8013eb4 <_printf_i+0x1ac>
 8013e8a:	07d9      	lsls	r1, r3, #31
 8013e8c:	bf44      	itt	mi
 8013e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8013e92:	6023      	strmi	r3, [r4, #0]
 8013e94:	b91d      	cbnz	r5, 8013e9e <_printf_i+0x196>
 8013e96:	6823      	ldr	r3, [r4, #0]
 8013e98:	f023 0320 	bic.w	r3, r3, #32
 8013e9c:	6023      	str	r3, [r4, #0]
 8013e9e:	2310      	movs	r3, #16
 8013ea0:	e7b0      	b.n	8013e04 <_printf_i+0xfc>
 8013ea2:	6823      	ldr	r3, [r4, #0]
 8013ea4:	f043 0320 	orr.w	r3, r3, #32
 8013ea8:	6023      	str	r3, [r4, #0]
 8013eaa:	2378      	movs	r3, #120	; 0x78
 8013eac:	4828      	ldr	r0, [pc, #160]	; (8013f50 <_printf_i+0x248>)
 8013eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013eb2:	e7e3      	b.n	8013e7c <_printf_i+0x174>
 8013eb4:	065e      	lsls	r6, r3, #25
 8013eb6:	bf48      	it	mi
 8013eb8:	b2ad      	uxthmi	r5, r5
 8013eba:	e7e6      	b.n	8013e8a <_printf_i+0x182>
 8013ebc:	4616      	mov	r6, r2
 8013ebe:	e7bb      	b.n	8013e38 <_printf_i+0x130>
 8013ec0:	680b      	ldr	r3, [r1, #0]
 8013ec2:	6826      	ldr	r6, [r4, #0]
 8013ec4:	6960      	ldr	r0, [r4, #20]
 8013ec6:	1d1d      	adds	r5, r3, #4
 8013ec8:	600d      	str	r5, [r1, #0]
 8013eca:	0635      	lsls	r5, r6, #24
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	d501      	bpl.n	8013ed4 <_printf_i+0x1cc>
 8013ed0:	6018      	str	r0, [r3, #0]
 8013ed2:	e002      	b.n	8013eda <_printf_i+0x1d2>
 8013ed4:	0671      	lsls	r1, r6, #25
 8013ed6:	d5fb      	bpl.n	8013ed0 <_printf_i+0x1c8>
 8013ed8:	8018      	strh	r0, [r3, #0]
 8013eda:	2300      	movs	r3, #0
 8013edc:	6123      	str	r3, [r4, #16]
 8013ede:	4616      	mov	r6, r2
 8013ee0:	e7ba      	b.n	8013e58 <_printf_i+0x150>
 8013ee2:	680b      	ldr	r3, [r1, #0]
 8013ee4:	1d1a      	adds	r2, r3, #4
 8013ee6:	600a      	str	r2, [r1, #0]
 8013ee8:	681e      	ldr	r6, [r3, #0]
 8013eea:	6862      	ldr	r2, [r4, #4]
 8013eec:	2100      	movs	r1, #0
 8013eee:	4630      	mov	r0, r6
 8013ef0:	f7ec f9fe 	bl	80002f0 <memchr>
 8013ef4:	b108      	cbz	r0, 8013efa <_printf_i+0x1f2>
 8013ef6:	1b80      	subs	r0, r0, r6
 8013ef8:	6060      	str	r0, [r4, #4]
 8013efa:	6863      	ldr	r3, [r4, #4]
 8013efc:	6123      	str	r3, [r4, #16]
 8013efe:	2300      	movs	r3, #0
 8013f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f04:	e7a8      	b.n	8013e58 <_printf_i+0x150>
 8013f06:	6923      	ldr	r3, [r4, #16]
 8013f08:	4632      	mov	r2, r6
 8013f0a:	4649      	mov	r1, r9
 8013f0c:	4640      	mov	r0, r8
 8013f0e:	47d0      	blx	sl
 8013f10:	3001      	adds	r0, #1
 8013f12:	d0ab      	beq.n	8013e6c <_printf_i+0x164>
 8013f14:	6823      	ldr	r3, [r4, #0]
 8013f16:	079b      	lsls	r3, r3, #30
 8013f18:	d413      	bmi.n	8013f42 <_printf_i+0x23a>
 8013f1a:	68e0      	ldr	r0, [r4, #12]
 8013f1c:	9b03      	ldr	r3, [sp, #12]
 8013f1e:	4298      	cmp	r0, r3
 8013f20:	bfb8      	it	lt
 8013f22:	4618      	movlt	r0, r3
 8013f24:	e7a4      	b.n	8013e70 <_printf_i+0x168>
 8013f26:	2301      	movs	r3, #1
 8013f28:	4632      	mov	r2, r6
 8013f2a:	4649      	mov	r1, r9
 8013f2c:	4640      	mov	r0, r8
 8013f2e:	47d0      	blx	sl
 8013f30:	3001      	adds	r0, #1
 8013f32:	d09b      	beq.n	8013e6c <_printf_i+0x164>
 8013f34:	3501      	adds	r5, #1
 8013f36:	68e3      	ldr	r3, [r4, #12]
 8013f38:	9903      	ldr	r1, [sp, #12]
 8013f3a:	1a5b      	subs	r3, r3, r1
 8013f3c:	42ab      	cmp	r3, r5
 8013f3e:	dcf2      	bgt.n	8013f26 <_printf_i+0x21e>
 8013f40:	e7eb      	b.n	8013f1a <_printf_i+0x212>
 8013f42:	2500      	movs	r5, #0
 8013f44:	f104 0619 	add.w	r6, r4, #25
 8013f48:	e7f5      	b.n	8013f36 <_printf_i+0x22e>
 8013f4a:	bf00      	nop
 8013f4c:	08015eba 	.word	0x08015eba
 8013f50:	08015ecb 	.word	0x08015ecb

08013f54 <_sbrk_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4d06      	ldr	r5, [pc, #24]	; (8013f70 <_sbrk_r+0x1c>)
 8013f58:	2300      	movs	r3, #0
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	4608      	mov	r0, r1
 8013f5e:	602b      	str	r3, [r5, #0]
 8013f60:	f7ed fada 	bl	8001518 <_sbrk>
 8013f64:	1c43      	adds	r3, r0, #1
 8013f66:	d102      	bne.n	8013f6e <_sbrk_r+0x1a>
 8013f68:	682b      	ldr	r3, [r5, #0]
 8013f6a:	b103      	cbz	r3, 8013f6e <_sbrk_r+0x1a>
 8013f6c:	6023      	str	r3, [r4, #0]
 8013f6e:	bd38      	pop	{r3, r4, r5, pc}
 8013f70:	24004110 	.word	0x24004110

08013f74 <quorem>:
 8013f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f78:	6903      	ldr	r3, [r0, #16]
 8013f7a:	690c      	ldr	r4, [r1, #16]
 8013f7c:	42a3      	cmp	r3, r4
 8013f7e:	4607      	mov	r7, r0
 8013f80:	f2c0 8081 	blt.w	8014086 <quorem+0x112>
 8013f84:	3c01      	subs	r4, #1
 8013f86:	f101 0814 	add.w	r8, r1, #20
 8013f8a:	f100 0514 	add.w	r5, r0, #20
 8013f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f92:	9301      	str	r3, [sp, #4]
 8013f94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013f98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013fa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013fa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8013fac:	d331      	bcc.n	8014012 <quorem+0x9e>
 8013fae:	f04f 0e00 	mov.w	lr, #0
 8013fb2:	4640      	mov	r0, r8
 8013fb4:	46ac      	mov	ip, r5
 8013fb6:	46f2      	mov	sl, lr
 8013fb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8013fbc:	b293      	uxth	r3, r2
 8013fbe:	fb06 e303 	mla	r3, r6, r3, lr
 8013fc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	ebaa 0303 	sub.w	r3, sl, r3
 8013fcc:	0c12      	lsrs	r2, r2, #16
 8013fce:	f8dc a000 	ldr.w	sl, [ip]
 8013fd2:	fb06 e202 	mla	r2, r6, r2, lr
 8013fd6:	fa13 f38a 	uxtah	r3, r3, sl
 8013fda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013fde:	fa1f fa82 	uxth.w	sl, r2
 8013fe2:	f8dc 2000 	ldr.w	r2, [ip]
 8013fe6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013fea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ff4:	4581      	cmp	r9, r0
 8013ff6:	f84c 3b04 	str.w	r3, [ip], #4
 8013ffa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013ffe:	d2db      	bcs.n	8013fb8 <quorem+0x44>
 8014000:	f855 300b 	ldr.w	r3, [r5, fp]
 8014004:	b92b      	cbnz	r3, 8014012 <quorem+0x9e>
 8014006:	9b01      	ldr	r3, [sp, #4]
 8014008:	3b04      	subs	r3, #4
 801400a:	429d      	cmp	r5, r3
 801400c:	461a      	mov	r2, r3
 801400e:	d32e      	bcc.n	801406e <quorem+0xfa>
 8014010:	613c      	str	r4, [r7, #16]
 8014012:	4638      	mov	r0, r7
 8014014:	f001 f85a 	bl	80150cc <__mcmp>
 8014018:	2800      	cmp	r0, #0
 801401a:	db24      	blt.n	8014066 <quorem+0xf2>
 801401c:	3601      	adds	r6, #1
 801401e:	4628      	mov	r0, r5
 8014020:	f04f 0c00 	mov.w	ip, #0
 8014024:	f858 2b04 	ldr.w	r2, [r8], #4
 8014028:	f8d0 e000 	ldr.w	lr, [r0]
 801402c:	b293      	uxth	r3, r2
 801402e:	ebac 0303 	sub.w	r3, ip, r3
 8014032:	0c12      	lsrs	r2, r2, #16
 8014034:	fa13 f38e 	uxtah	r3, r3, lr
 8014038:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801403c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014040:	b29b      	uxth	r3, r3
 8014042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014046:	45c1      	cmp	r9, r8
 8014048:	f840 3b04 	str.w	r3, [r0], #4
 801404c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014050:	d2e8      	bcs.n	8014024 <quorem+0xb0>
 8014052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014056:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801405a:	b922      	cbnz	r2, 8014066 <quorem+0xf2>
 801405c:	3b04      	subs	r3, #4
 801405e:	429d      	cmp	r5, r3
 8014060:	461a      	mov	r2, r3
 8014062:	d30a      	bcc.n	801407a <quorem+0x106>
 8014064:	613c      	str	r4, [r7, #16]
 8014066:	4630      	mov	r0, r6
 8014068:	b003      	add	sp, #12
 801406a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801406e:	6812      	ldr	r2, [r2, #0]
 8014070:	3b04      	subs	r3, #4
 8014072:	2a00      	cmp	r2, #0
 8014074:	d1cc      	bne.n	8014010 <quorem+0x9c>
 8014076:	3c01      	subs	r4, #1
 8014078:	e7c7      	b.n	801400a <quorem+0x96>
 801407a:	6812      	ldr	r2, [r2, #0]
 801407c:	3b04      	subs	r3, #4
 801407e:	2a00      	cmp	r2, #0
 8014080:	d1f0      	bne.n	8014064 <quorem+0xf0>
 8014082:	3c01      	subs	r4, #1
 8014084:	e7eb      	b.n	801405e <quorem+0xea>
 8014086:	2000      	movs	r0, #0
 8014088:	e7ee      	b.n	8014068 <quorem+0xf4>
 801408a:	0000      	movs	r0, r0
 801408c:	0000      	movs	r0, r0
	...

08014090 <_dtoa_r>:
 8014090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014094:	ec59 8b10 	vmov	r8, r9, d0
 8014098:	b095      	sub	sp, #84	; 0x54
 801409a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801409c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801409e:	9107      	str	r1, [sp, #28]
 80140a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80140a4:	4606      	mov	r6, r0
 80140a6:	9209      	str	r2, [sp, #36]	; 0x24
 80140a8:	9310      	str	r3, [sp, #64]	; 0x40
 80140aa:	b975      	cbnz	r5, 80140ca <_dtoa_r+0x3a>
 80140ac:	2010      	movs	r0, #16
 80140ae:	f7ff fa4d 	bl	801354c <malloc>
 80140b2:	4602      	mov	r2, r0
 80140b4:	6270      	str	r0, [r6, #36]	; 0x24
 80140b6:	b920      	cbnz	r0, 80140c2 <_dtoa_r+0x32>
 80140b8:	4bab      	ldr	r3, [pc, #684]	; (8014368 <_dtoa_r+0x2d8>)
 80140ba:	21ea      	movs	r1, #234	; 0xea
 80140bc:	48ab      	ldr	r0, [pc, #684]	; (801436c <_dtoa_r+0x2dc>)
 80140be:	f001 f915 	bl	80152ec <__assert_func>
 80140c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80140c6:	6005      	str	r5, [r0, #0]
 80140c8:	60c5      	str	r5, [r0, #12]
 80140ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80140cc:	6819      	ldr	r1, [r3, #0]
 80140ce:	b151      	cbz	r1, 80140e6 <_dtoa_r+0x56>
 80140d0:	685a      	ldr	r2, [r3, #4]
 80140d2:	604a      	str	r2, [r1, #4]
 80140d4:	2301      	movs	r3, #1
 80140d6:	4093      	lsls	r3, r2
 80140d8:	608b      	str	r3, [r1, #8]
 80140da:	4630      	mov	r0, r6
 80140dc:	f000 fdb8 	bl	8014c50 <_Bfree>
 80140e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80140e2:	2200      	movs	r2, #0
 80140e4:	601a      	str	r2, [r3, #0]
 80140e6:	f1b9 0300 	subs.w	r3, r9, #0
 80140ea:	bfbb      	ittet	lt
 80140ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80140f0:	9303      	strlt	r3, [sp, #12]
 80140f2:	2300      	movge	r3, #0
 80140f4:	2201      	movlt	r2, #1
 80140f6:	bfac      	ite	ge
 80140f8:	6023      	strge	r3, [r4, #0]
 80140fa:	6022      	strlt	r2, [r4, #0]
 80140fc:	4b9c      	ldr	r3, [pc, #624]	; (8014370 <_dtoa_r+0x2e0>)
 80140fe:	9c03      	ldr	r4, [sp, #12]
 8014100:	43a3      	bics	r3, r4
 8014102:	d11a      	bne.n	801413a <_dtoa_r+0xaa>
 8014104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014106:	f242 730f 	movw	r3, #9999	; 0x270f
 801410a:	6013      	str	r3, [r2, #0]
 801410c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014110:	ea53 0308 	orrs.w	r3, r3, r8
 8014114:	f000 8512 	beq.w	8014b3c <_dtoa_r+0xaac>
 8014118:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801411a:	b953      	cbnz	r3, 8014132 <_dtoa_r+0xa2>
 801411c:	4b95      	ldr	r3, [pc, #596]	; (8014374 <_dtoa_r+0x2e4>)
 801411e:	e01f      	b.n	8014160 <_dtoa_r+0xd0>
 8014120:	4b95      	ldr	r3, [pc, #596]	; (8014378 <_dtoa_r+0x2e8>)
 8014122:	9300      	str	r3, [sp, #0]
 8014124:	3308      	adds	r3, #8
 8014126:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014128:	6013      	str	r3, [r2, #0]
 801412a:	9800      	ldr	r0, [sp, #0]
 801412c:	b015      	add	sp, #84	; 0x54
 801412e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014132:	4b90      	ldr	r3, [pc, #576]	; (8014374 <_dtoa_r+0x2e4>)
 8014134:	9300      	str	r3, [sp, #0]
 8014136:	3303      	adds	r3, #3
 8014138:	e7f5      	b.n	8014126 <_dtoa_r+0x96>
 801413a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801413e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014146:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801414a:	d10b      	bne.n	8014164 <_dtoa_r+0xd4>
 801414c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801414e:	2301      	movs	r3, #1
 8014150:	6013      	str	r3, [r2, #0]
 8014152:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014154:	2b00      	cmp	r3, #0
 8014156:	f000 84ee 	beq.w	8014b36 <_dtoa_r+0xaa6>
 801415a:	4888      	ldr	r0, [pc, #544]	; (801437c <_dtoa_r+0x2ec>)
 801415c:	6018      	str	r0, [r3, #0]
 801415e:	1e43      	subs	r3, r0, #1
 8014160:	9300      	str	r3, [sp, #0]
 8014162:	e7e2      	b.n	801412a <_dtoa_r+0x9a>
 8014164:	a913      	add	r1, sp, #76	; 0x4c
 8014166:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801416a:	aa12      	add	r2, sp, #72	; 0x48
 801416c:	4630      	mov	r0, r6
 801416e:	f001 f851 	bl	8015214 <__d2b>
 8014172:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014176:	4605      	mov	r5, r0
 8014178:	9812      	ldr	r0, [sp, #72]	; 0x48
 801417a:	2900      	cmp	r1, #0
 801417c:	d047      	beq.n	801420e <_dtoa_r+0x17e>
 801417e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014180:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014184:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014188:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801418c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014190:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014194:	2400      	movs	r4, #0
 8014196:	ec43 2b16 	vmov	d6, r2, r3
 801419a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801419e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8014350 <_dtoa_r+0x2c0>
 80141a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80141a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8014358 <_dtoa_r+0x2c8>
 80141aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80141ae:	eeb0 7b46 	vmov.f64	d7, d6
 80141b2:	ee06 1a90 	vmov	s13, r1
 80141b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80141ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014360 <_dtoa_r+0x2d0>
 80141be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80141c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80141c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80141ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141ce:	ee16 ba90 	vmov	fp, s13
 80141d2:	9411      	str	r4, [sp, #68]	; 0x44
 80141d4:	d508      	bpl.n	80141e8 <_dtoa_r+0x158>
 80141d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80141da:	eeb4 6b47 	vcmp.f64	d6, d7
 80141de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e2:	bf18      	it	ne
 80141e4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80141e8:	f1bb 0f16 	cmp.w	fp, #22
 80141ec:	d832      	bhi.n	8014254 <_dtoa_r+0x1c4>
 80141ee:	4b64      	ldr	r3, [pc, #400]	; (8014380 <_dtoa_r+0x2f0>)
 80141f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80141f4:	ed93 7b00 	vldr	d7, [r3]
 80141f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80141fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014204:	d501      	bpl.n	801420a <_dtoa_r+0x17a>
 8014206:	f10b 3bff 	add.w	fp, fp, #4294967295
 801420a:	2300      	movs	r3, #0
 801420c:	e023      	b.n	8014256 <_dtoa_r+0x1c6>
 801420e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014210:	4401      	add	r1, r0
 8014212:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014216:	2b20      	cmp	r3, #32
 8014218:	bfc3      	ittte	gt
 801421a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801421e:	fa04 f303 	lslgt.w	r3, r4, r3
 8014222:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014226:	f1c3 0320 	rsble	r3, r3, #32
 801422a:	bfc6      	itte	gt
 801422c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014230:	ea43 0308 	orrgt.w	r3, r3, r8
 8014234:	fa08 f303 	lslle.w	r3, r8, r3
 8014238:	ee07 3a90 	vmov	s15, r3
 801423c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014240:	3901      	subs	r1, #1
 8014242:	ed8d 7b00 	vstr	d7, [sp]
 8014246:	9c01      	ldr	r4, [sp, #4]
 8014248:	e9dd 2300 	ldrd	r2, r3, [sp]
 801424c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014250:	2401      	movs	r4, #1
 8014252:	e7a0      	b.n	8014196 <_dtoa_r+0x106>
 8014254:	2301      	movs	r3, #1
 8014256:	930f      	str	r3, [sp, #60]	; 0x3c
 8014258:	1a43      	subs	r3, r0, r1
 801425a:	1e5a      	subs	r2, r3, #1
 801425c:	bf45      	ittet	mi
 801425e:	f1c3 0301 	rsbmi	r3, r3, #1
 8014262:	9305      	strmi	r3, [sp, #20]
 8014264:	2300      	movpl	r3, #0
 8014266:	2300      	movmi	r3, #0
 8014268:	9206      	str	r2, [sp, #24]
 801426a:	bf54      	ite	pl
 801426c:	9305      	strpl	r3, [sp, #20]
 801426e:	9306      	strmi	r3, [sp, #24]
 8014270:	f1bb 0f00 	cmp.w	fp, #0
 8014274:	db18      	blt.n	80142a8 <_dtoa_r+0x218>
 8014276:	9b06      	ldr	r3, [sp, #24]
 8014278:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801427c:	445b      	add	r3, fp
 801427e:	9306      	str	r3, [sp, #24]
 8014280:	2300      	movs	r3, #0
 8014282:	9a07      	ldr	r2, [sp, #28]
 8014284:	2a09      	cmp	r2, #9
 8014286:	d849      	bhi.n	801431c <_dtoa_r+0x28c>
 8014288:	2a05      	cmp	r2, #5
 801428a:	bfc4      	itt	gt
 801428c:	3a04      	subgt	r2, #4
 801428e:	9207      	strgt	r2, [sp, #28]
 8014290:	9a07      	ldr	r2, [sp, #28]
 8014292:	f1a2 0202 	sub.w	r2, r2, #2
 8014296:	bfcc      	ite	gt
 8014298:	2400      	movgt	r4, #0
 801429a:	2401      	movle	r4, #1
 801429c:	2a03      	cmp	r2, #3
 801429e:	d848      	bhi.n	8014332 <_dtoa_r+0x2a2>
 80142a0:	e8df f002 	tbb	[pc, r2]
 80142a4:	3a2c2e0b 	.word	0x3a2c2e0b
 80142a8:	9b05      	ldr	r3, [sp, #20]
 80142aa:	2200      	movs	r2, #0
 80142ac:	eba3 030b 	sub.w	r3, r3, fp
 80142b0:	9305      	str	r3, [sp, #20]
 80142b2:	920e      	str	r2, [sp, #56]	; 0x38
 80142b4:	f1cb 0300 	rsb	r3, fp, #0
 80142b8:	e7e3      	b.n	8014282 <_dtoa_r+0x1f2>
 80142ba:	2200      	movs	r2, #0
 80142bc:	9208      	str	r2, [sp, #32]
 80142be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142c0:	2a00      	cmp	r2, #0
 80142c2:	dc39      	bgt.n	8014338 <_dtoa_r+0x2a8>
 80142c4:	f04f 0a01 	mov.w	sl, #1
 80142c8:	46d1      	mov	r9, sl
 80142ca:	4652      	mov	r2, sl
 80142cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80142d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80142d2:	2100      	movs	r1, #0
 80142d4:	6079      	str	r1, [r7, #4]
 80142d6:	2004      	movs	r0, #4
 80142d8:	f100 0c14 	add.w	ip, r0, #20
 80142dc:	4594      	cmp	ip, r2
 80142de:	6879      	ldr	r1, [r7, #4]
 80142e0:	d92f      	bls.n	8014342 <_dtoa_r+0x2b2>
 80142e2:	4630      	mov	r0, r6
 80142e4:	930c      	str	r3, [sp, #48]	; 0x30
 80142e6:	f000 fc73 	bl	8014bd0 <_Balloc>
 80142ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142ec:	9000      	str	r0, [sp, #0]
 80142ee:	4602      	mov	r2, r0
 80142f0:	2800      	cmp	r0, #0
 80142f2:	d149      	bne.n	8014388 <_dtoa_r+0x2f8>
 80142f4:	4b23      	ldr	r3, [pc, #140]	; (8014384 <_dtoa_r+0x2f4>)
 80142f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80142fa:	e6df      	b.n	80140bc <_dtoa_r+0x2c>
 80142fc:	2201      	movs	r2, #1
 80142fe:	e7dd      	b.n	80142bc <_dtoa_r+0x22c>
 8014300:	2200      	movs	r2, #0
 8014302:	9208      	str	r2, [sp, #32]
 8014304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014306:	eb0b 0a02 	add.w	sl, fp, r2
 801430a:	f10a 0901 	add.w	r9, sl, #1
 801430e:	464a      	mov	r2, r9
 8014310:	2a01      	cmp	r2, #1
 8014312:	bfb8      	it	lt
 8014314:	2201      	movlt	r2, #1
 8014316:	e7db      	b.n	80142d0 <_dtoa_r+0x240>
 8014318:	2201      	movs	r2, #1
 801431a:	e7f2      	b.n	8014302 <_dtoa_r+0x272>
 801431c:	2401      	movs	r4, #1
 801431e:	2200      	movs	r2, #0
 8014320:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014324:	f04f 3aff 	mov.w	sl, #4294967295
 8014328:	2100      	movs	r1, #0
 801432a:	46d1      	mov	r9, sl
 801432c:	2212      	movs	r2, #18
 801432e:	9109      	str	r1, [sp, #36]	; 0x24
 8014330:	e7ce      	b.n	80142d0 <_dtoa_r+0x240>
 8014332:	2201      	movs	r2, #1
 8014334:	9208      	str	r2, [sp, #32]
 8014336:	e7f5      	b.n	8014324 <_dtoa_r+0x294>
 8014338:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801433c:	46d1      	mov	r9, sl
 801433e:	4652      	mov	r2, sl
 8014340:	e7c6      	b.n	80142d0 <_dtoa_r+0x240>
 8014342:	3101      	adds	r1, #1
 8014344:	6079      	str	r1, [r7, #4]
 8014346:	0040      	lsls	r0, r0, #1
 8014348:	e7c6      	b.n	80142d8 <_dtoa_r+0x248>
 801434a:	bf00      	nop
 801434c:	f3af 8000 	nop.w
 8014350:	636f4361 	.word	0x636f4361
 8014354:	3fd287a7 	.word	0x3fd287a7
 8014358:	8b60c8b3 	.word	0x8b60c8b3
 801435c:	3fc68a28 	.word	0x3fc68a28
 8014360:	509f79fb 	.word	0x509f79fb
 8014364:	3fd34413 	.word	0x3fd34413
 8014368:	08015ee9 	.word	0x08015ee9
 801436c:	08015f00 	.word	0x08015f00
 8014370:	7ff00000 	.word	0x7ff00000
 8014374:	08015ee5 	.word	0x08015ee5
 8014378:	08015edc 	.word	0x08015edc
 801437c:	08015eb9 	.word	0x08015eb9
 8014380:	08015ff8 	.word	0x08015ff8
 8014384:	08015f5f 	.word	0x08015f5f
 8014388:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801438a:	9900      	ldr	r1, [sp, #0]
 801438c:	6011      	str	r1, [r2, #0]
 801438e:	f1b9 0f0e 	cmp.w	r9, #14
 8014392:	d872      	bhi.n	801447a <_dtoa_r+0x3ea>
 8014394:	2c00      	cmp	r4, #0
 8014396:	d070      	beq.n	801447a <_dtoa_r+0x3ea>
 8014398:	f1bb 0f00 	cmp.w	fp, #0
 801439c:	f340 80a6 	ble.w	80144ec <_dtoa_r+0x45c>
 80143a0:	49ca      	ldr	r1, [pc, #808]	; (80146cc <_dtoa_r+0x63c>)
 80143a2:	f00b 020f 	and.w	r2, fp, #15
 80143a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80143aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80143ae:	ed92 7b00 	vldr	d7, [r2]
 80143b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80143b6:	f000 808d 	beq.w	80144d4 <_dtoa_r+0x444>
 80143ba:	4ac5      	ldr	r2, [pc, #788]	; (80146d0 <_dtoa_r+0x640>)
 80143bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80143c0:	ed92 6b08 	vldr	d6, [r2, #32]
 80143c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80143c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80143cc:	f001 010f 	and.w	r1, r1, #15
 80143d0:	2203      	movs	r2, #3
 80143d2:	48bf      	ldr	r0, [pc, #764]	; (80146d0 <_dtoa_r+0x640>)
 80143d4:	2900      	cmp	r1, #0
 80143d6:	d17f      	bne.n	80144d8 <_dtoa_r+0x448>
 80143d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80143dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80143e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80143e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80143e6:	2900      	cmp	r1, #0
 80143e8:	f000 80b2 	beq.w	8014550 <_dtoa_r+0x4c0>
 80143ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80143f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80143f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80143f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143fc:	f140 80a8 	bpl.w	8014550 <_dtoa_r+0x4c0>
 8014400:	f1b9 0f00 	cmp.w	r9, #0
 8014404:	f000 80a4 	beq.w	8014550 <_dtoa_r+0x4c0>
 8014408:	f1ba 0f00 	cmp.w	sl, #0
 801440c:	dd31      	ble.n	8014472 <_dtoa_r+0x3e2>
 801440e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014412:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014416:	ed8d 7b02 	vstr	d7, [sp, #8]
 801441a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801441e:	3201      	adds	r2, #1
 8014420:	4650      	mov	r0, sl
 8014422:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014426:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801442a:	ee07 2a90 	vmov	s15, r2
 801442e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014432:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014436:	ed8d 5b02 	vstr	d5, [sp, #8]
 801443a:	9c03      	ldr	r4, [sp, #12]
 801443c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014440:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8014444:	2800      	cmp	r0, #0
 8014446:	f040 8086 	bne.w	8014556 <_dtoa_r+0x4c6>
 801444a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801444e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014452:	ec42 1b17 	vmov	d7, r1, r2
 8014456:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445e:	f300 8272 	bgt.w	8014946 <_dtoa_r+0x8b6>
 8014462:	eeb1 7b47 	vneg.f64	d7, d7
 8014466:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446e:	f100 8267 	bmi.w	8014940 <_dtoa_r+0x8b0>
 8014472:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8014476:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801447a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801447c:	2a00      	cmp	r2, #0
 801447e:	f2c0 8129 	blt.w	80146d4 <_dtoa_r+0x644>
 8014482:	f1bb 0f0e 	cmp.w	fp, #14
 8014486:	f300 8125 	bgt.w	80146d4 <_dtoa_r+0x644>
 801448a:	4b90      	ldr	r3, [pc, #576]	; (80146cc <_dtoa_r+0x63c>)
 801448c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014490:	ed93 6b00 	vldr	d6, [r3]
 8014494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014496:	2b00      	cmp	r3, #0
 8014498:	f280 80c3 	bge.w	8014622 <_dtoa_r+0x592>
 801449c:	f1b9 0f00 	cmp.w	r9, #0
 80144a0:	f300 80bf 	bgt.w	8014622 <_dtoa_r+0x592>
 80144a4:	f040 824c 	bne.w	8014940 <_dtoa_r+0x8b0>
 80144a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80144ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80144b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80144b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144bc:	464c      	mov	r4, r9
 80144be:	464f      	mov	r7, r9
 80144c0:	f280 8222 	bge.w	8014908 <_dtoa_r+0x878>
 80144c4:	f8dd 8000 	ldr.w	r8, [sp]
 80144c8:	2331      	movs	r3, #49	; 0x31
 80144ca:	f808 3b01 	strb.w	r3, [r8], #1
 80144ce:	f10b 0b01 	add.w	fp, fp, #1
 80144d2:	e21e      	b.n	8014912 <_dtoa_r+0x882>
 80144d4:	2202      	movs	r2, #2
 80144d6:	e77c      	b.n	80143d2 <_dtoa_r+0x342>
 80144d8:	07cc      	lsls	r4, r1, #31
 80144da:	d504      	bpl.n	80144e6 <_dtoa_r+0x456>
 80144dc:	ed90 6b00 	vldr	d6, [r0]
 80144e0:	3201      	adds	r2, #1
 80144e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80144e6:	1049      	asrs	r1, r1, #1
 80144e8:	3008      	adds	r0, #8
 80144ea:	e773      	b.n	80143d4 <_dtoa_r+0x344>
 80144ec:	d02e      	beq.n	801454c <_dtoa_r+0x4bc>
 80144ee:	f1cb 0100 	rsb	r1, fp, #0
 80144f2:	4a76      	ldr	r2, [pc, #472]	; (80146cc <_dtoa_r+0x63c>)
 80144f4:	f001 000f 	and.w	r0, r1, #15
 80144f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80144fc:	ed92 7b00 	vldr	d7, [r2]
 8014500:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8014504:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014508:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801450c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8014510:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8014514:	486e      	ldr	r0, [pc, #440]	; (80146d0 <_dtoa_r+0x640>)
 8014516:	1109      	asrs	r1, r1, #4
 8014518:	2400      	movs	r4, #0
 801451a:	2202      	movs	r2, #2
 801451c:	b939      	cbnz	r1, 801452e <_dtoa_r+0x49e>
 801451e:	2c00      	cmp	r4, #0
 8014520:	f43f af60 	beq.w	80143e4 <_dtoa_r+0x354>
 8014524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801452c:	e75a      	b.n	80143e4 <_dtoa_r+0x354>
 801452e:	07cf      	lsls	r7, r1, #31
 8014530:	d509      	bpl.n	8014546 <_dtoa_r+0x4b6>
 8014532:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8014536:	ed90 7b00 	vldr	d7, [r0]
 801453a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801453e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014542:	3201      	adds	r2, #1
 8014544:	2401      	movs	r4, #1
 8014546:	1049      	asrs	r1, r1, #1
 8014548:	3008      	adds	r0, #8
 801454a:	e7e7      	b.n	801451c <_dtoa_r+0x48c>
 801454c:	2202      	movs	r2, #2
 801454e:	e749      	b.n	80143e4 <_dtoa_r+0x354>
 8014550:	465f      	mov	r7, fp
 8014552:	4648      	mov	r0, r9
 8014554:	e765      	b.n	8014422 <_dtoa_r+0x392>
 8014556:	ec42 1b17 	vmov	d7, r1, r2
 801455a:	4a5c      	ldr	r2, [pc, #368]	; (80146cc <_dtoa_r+0x63c>)
 801455c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014560:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014564:	9a00      	ldr	r2, [sp, #0]
 8014566:	1814      	adds	r4, r2, r0
 8014568:	9a08      	ldr	r2, [sp, #32]
 801456a:	b352      	cbz	r2, 80145c2 <_dtoa_r+0x532>
 801456c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014570:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014574:	f8dd 8000 	ldr.w	r8, [sp]
 8014578:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801457c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014580:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014584:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014588:	ee14 2a90 	vmov	r2, s9
 801458c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014590:	3230      	adds	r2, #48	; 0x30
 8014592:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014596:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801459e:	f808 2b01 	strb.w	r2, [r8], #1
 80145a2:	d439      	bmi.n	8014618 <_dtoa_r+0x588>
 80145a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80145a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80145ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b0:	d472      	bmi.n	8014698 <_dtoa_r+0x608>
 80145b2:	45a0      	cmp	r8, r4
 80145b4:	f43f af5d 	beq.w	8014472 <_dtoa_r+0x3e2>
 80145b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80145bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80145c0:	e7e0      	b.n	8014584 <_dtoa_r+0x4f4>
 80145c2:	f8dd 8000 	ldr.w	r8, [sp]
 80145c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80145ca:	4621      	mov	r1, r4
 80145cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80145d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80145d4:	ee14 2a90 	vmov	r2, s9
 80145d8:	3230      	adds	r2, #48	; 0x30
 80145da:	f808 2b01 	strb.w	r2, [r8], #1
 80145de:	45a0      	cmp	r8, r4
 80145e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80145e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80145e8:	d118      	bne.n	801461c <_dtoa_r+0x58c>
 80145ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80145ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 80145f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80145f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fa:	dc4d      	bgt.n	8014698 <_dtoa_r+0x608>
 80145fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014600:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014608:	f57f af33 	bpl.w	8014472 <_dtoa_r+0x3e2>
 801460c:	4688      	mov	r8, r1
 801460e:	3901      	subs	r1, #1
 8014610:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014614:	2b30      	cmp	r3, #48	; 0x30
 8014616:	d0f9      	beq.n	801460c <_dtoa_r+0x57c>
 8014618:	46bb      	mov	fp, r7
 801461a:	e02a      	b.n	8014672 <_dtoa_r+0x5e2>
 801461c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014620:	e7d6      	b.n	80145d0 <_dtoa_r+0x540>
 8014622:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014626:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801462a:	f8dd 8000 	ldr.w	r8, [sp]
 801462e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014632:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014636:	ee15 3a10 	vmov	r3, s10
 801463a:	3330      	adds	r3, #48	; 0x30
 801463c:	f808 3b01 	strb.w	r3, [r8], #1
 8014640:	9b00      	ldr	r3, [sp, #0]
 8014642:	eba8 0303 	sub.w	r3, r8, r3
 8014646:	4599      	cmp	r9, r3
 8014648:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801464c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014650:	d133      	bne.n	80146ba <_dtoa_r+0x62a>
 8014652:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014656:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801465e:	dc1a      	bgt.n	8014696 <_dtoa_r+0x606>
 8014660:	eeb4 7b46 	vcmp.f64	d7, d6
 8014664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014668:	d103      	bne.n	8014672 <_dtoa_r+0x5e2>
 801466a:	ee15 3a10 	vmov	r3, s10
 801466e:	07d9      	lsls	r1, r3, #31
 8014670:	d411      	bmi.n	8014696 <_dtoa_r+0x606>
 8014672:	4629      	mov	r1, r5
 8014674:	4630      	mov	r0, r6
 8014676:	f000 faeb 	bl	8014c50 <_Bfree>
 801467a:	2300      	movs	r3, #0
 801467c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801467e:	f888 3000 	strb.w	r3, [r8]
 8014682:	f10b 0301 	add.w	r3, fp, #1
 8014686:	6013      	str	r3, [r2, #0]
 8014688:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801468a:	2b00      	cmp	r3, #0
 801468c:	f43f ad4d 	beq.w	801412a <_dtoa_r+0x9a>
 8014690:	f8c3 8000 	str.w	r8, [r3]
 8014694:	e549      	b.n	801412a <_dtoa_r+0x9a>
 8014696:	465f      	mov	r7, fp
 8014698:	4643      	mov	r3, r8
 801469a:	4698      	mov	r8, r3
 801469c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146a0:	2a39      	cmp	r2, #57	; 0x39
 80146a2:	d106      	bne.n	80146b2 <_dtoa_r+0x622>
 80146a4:	9a00      	ldr	r2, [sp, #0]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d1f7      	bne.n	801469a <_dtoa_r+0x60a>
 80146aa:	9900      	ldr	r1, [sp, #0]
 80146ac:	2230      	movs	r2, #48	; 0x30
 80146ae:	3701      	adds	r7, #1
 80146b0:	700a      	strb	r2, [r1, #0]
 80146b2:	781a      	ldrb	r2, [r3, #0]
 80146b4:	3201      	adds	r2, #1
 80146b6:	701a      	strb	r2, [r3, #0]
 80146b8:	e7ae      	b.n	8014618 <_dtoa_r+0x588>
 80146ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80146be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80146c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146c6:	d1b2      	bne.n	801462e <_dtoa_r+0x59e>
 80146c8:	e7d3      	b.n	8014672 <_dtoa_r+0x5e2>
 80146ca:	bf00      	nop
 80146cc:	08015ff8 	.word	0x08015ff8
 80146d0:	08015fd0 	.word	0x08015fd0
 80146d4:	9908      	ldr	r1, [sp, #32]
 80146d6:	2900      	cmp	r1, #0
 80146d8:	f000 80d1 	beq.w	801487e <_dtoa_r+0x7ee>
 80146dc:	9907      	ldr	r1, [sp, #28]
 80146de:	2901      	cmp	r1, #1
 80146e0:	f300 80b4 	bgt.w	801484c <_dtoa_r+0x7bc>
 80146e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80146e6:	2900      	cmp	r1, #0
 80146e8:	f000 80ac 	beq.w	8014844 <_dtoa_r+0x7b4>
 80146ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80146f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80146f4:	461c      	mov	r4, r3
 80146f6:	930a      	str	r3, [sp, #40]	; 0x28
 80146f8:	9b05      	ldr	r3, [sp, #20]
 80146fa:	4413      	add	r3, r2
 80146fc:	9305      	str	r3, [sp, #20]
 80146fe:	9b06      	ldr	r3, [sp, #24]
 8014700:	2101      	movs	r1, #1
 8014702:	4413      	add	r3, r2
 8014704:	4630      	mov	r0, r6
 8014706:	9306      	str	r3, [sp, #24]
 8014708:	f000 fb5e 	bl	8014dc8 <__i2b>
 801470c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801470e:	4607      	mov	r7, r0
 8014710:	f1b8 0f00 	cmp.w	r8, #0
 8014714:	dd0d      	ble.n	8014732 <_dtoa_r+0x6a2>
 8014716:	9a06      	ldr	r2, [sp, #24]
 8014718:	2a00      	cmp	r2, #0
 801471a:	dd0a      	ble.n	8014732 <_dtoa_r+0x6a2>
 801471c:	4542      	cmp	r2, r8
 801471e:	9905      	ldr	r1, [sp, #20]
 8014720:	bfa8      	it	ge
 8014722:	4642      	movge	r2, r8
 8014724:	1a89      	subs	r1, r1, r2
 8014726:	9105      	str	r1, [sp, #20]
 8014728:	9906      	ldr	r1, [sp, #24]
 801472a:	eba8 0802 	sub.w	r8, r8, r2
 801472e:	1a8a      	subs	r2, r1, r2
 8014730:	9206      	str	r2, [sp, #24]
 8014732:	b303      	cbz	r3, 8014776 <_dtoa_r+0x6e6>
 8014734:	9a08      	ldr	r2, [sp, #32]
 8014736:	2a00      	cmp	r2, #0
 8014738:	f000 80a6 	beq.w	8014888 <_dtoa_r+0x7f8>
 801473c:	2c00      	cmp	r4, #0
 801473e:	dd13      	ble.n	8014768 <_dtoa_r+0x6d8>
 8014740:	4639      	mov	r1, r7
 8014742:	4622      	mov	r2, r4
 8014744:	4630      	mov	r0, r6
 8014746:	930c      	str	r3, [sp, #48]	; 0x30
 8014748:	f000 fbfa 	bl	8014f40 <__pow5mult>
 801474c:	462a      	mov	r2, r5
 801474e:	4601      	mov	r1, r0
 8014750:	4607      	mov	r7, r0
 8014752:	4630      	mov	r0, r6
 8014754:	f000 fb4e 	bl	8014df4 <__multiply>
 8014758:	4629      	mov	r1, r5
 801475a:	900a      	str	r0, [sp, #40]	; 0x28
 801475c:	4630      	mov	r0, r6
 801475e:	f000 fa77 	bl	8014c50 <_Bfree>
 8014762:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014766:	4615      	mov	r5, r2
 8014768:	1b1a      	subs	r2, r3, r4
 801476a:	d004      	beq.n	8014776 <_dtoa_r+0x6e6>
 801476c:	4629      	mov	r1, r5
 801476e:	4630      	mov	r0, r6
 8014770:	f000 fbe6 	bl	8014f40 <__pow5mult>
 8014774:	4605      	mov	r5, r0
 8014776:	2101      	movs	r1, #1
 8014778:	4630      	mov	r0, r6
 801477a:	f000 fb25 	bl	8014dc8 <__i2b>
 801477e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014780:	2b00      	cmp	r3, #0
 8014782:	4604      	mov	r4, r0
 8014784:	f340 8082 	ble.w	801488c <_dtoa_r+0x7fc>
 8014788:	461a      	mov	r2, r3
 801478a:	4601      	mov	r1, r0
 801478c:	4630      	mov	r0, r6
 801478e:	f000 fbd7 	bl	8014f40 <__pow5mult>
 8014792:	9b07      	ldr	r3, [sp, #28]
 8014794:	2b01      	cmp	r3, #1
 8014796:	4604      	mov	r4, r0
 8014798:	dd7b      	ble.n	8014892 <_dtoa_r+0x802>
 801479a:	2300      	movs	r3, #0
 801479c:	930a      	str	r3, [sp, #40]	; 0x28
 801479e:	6922      	ldr	r2, [r4, #16]
 80147a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80147a4:	6910      	ldr	r0, [r2, #16]
 80147a6:	f000 fabf 	bl	8014d28 <__hi0bits>
 80147aa:	f1c0 0020 	rsb	r0, r0, #32
 80147ae:	9b06      	ldr	r3, [sp, #24]
 80147b0:	4418      	add	r0, r3
 80147b2:	f010 001f 	ands.w	r0, r0, #31
 80147b6:	f000 808d 	beq.w	80148d4 <_dtoa_r+0x844>
 80147ba:	f1c0 0220 	rsb	r2, r0, #32
 80147be:	2a04      	cmp	r2, #4
 80147c0:	f340 8086 	ble.w	80148d0 <_dtoa_r+0x840>
 80147c4:	f1c0 001c 	rsb	r0, r0, #28
 80147c8:	9b05      	ldr	r3, [sp, #20]
 80147ca:	4403      	add	r3, r0
 80147cc:	9305      	str	r3, [sp, #20]
 80147ce:	9b06      	ldr	r3, [sp, #24]
 80147d0:	4403      	add	r3, r0
 80147d2:	4480      	add	r8, r0
 80147d4:	9306      	str	r3, [sp, #24]
 80147d6:	9b05      	ldr	r3, [sp, #20]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	dd05      	ble.n	80147e8 <_dtoa_r+0x758>
 80147dc:	4629      	mov	r1, r5
 80147de:	461a      	mov	r2, r3
 80147e0:	4630      	mov	r0, r6
 80147e2:	f000 fc07 	bl	8014ff4 <__lshift>
 80147e6:	4605      	mov	r5, r0
 80147e8:	9b06      	ldr	r3, [sp, #24]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	dd05      	ble.n	80147fa <_dtoa_r+0x76a>
 80147ee:	4621      	mov	r1, r4
 80147f0:	461a      	mov	r2, r3
 80147f2:	4630      	mov	r0, r6
 80147f4:	f000 fbfe 	bl	8014ff4 <__lshift>
 80147f8:	4604      	mov	r4, r0
 80147fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d06b      	beq.n	80148d8 <_dtoa_r+0x848>
 8014800:	4621      	mov	r1, r4
 8014802:	4628      	mov	r0, r5
 8014804:	f000 fc62 	bl	80150cc <__mcmp>
 8014808:	2800      	cmp	r0, #0
 801480a:	da65      	bge.n	80148d8 <_dtoa_r+0x848>
 801480c:	2300      	movs	r3, #0
 801480e:	4629      	mov	r1, r5
 8014810:	220a      	movs	r2, #10
 8014812:	4630      	mov	r0, r6
 8014814:	f000 fa3e 	bl	8014c94 <__multadd>
 8014818:	9b08      	ldr	r3, [sp, #32]
 801481a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801481e:	4605      	mov	r5, r0
 8014820:	2b00      	cmp	r3, #0
 8014822:	f000 8192 	beq.w	8014b4a <_dtoa_r+0xaba>
 8014826:	4639      	mov	r1, r7
 8014828:	2300      	movs	r3, #0
 801482a:	220a      	movs	r2, #10
 801482c:	4630      	mov	r0, r6
 801482e:	f000 fa31 	bl	8014c94 <__multadd>
 8014832:	f1ba 0f00 	cmp.w	sl, #0
 8014836:	4607      	mov	r7, r0
 8014838:	f300 808e 	bgt.w	8014958 <_dtoa_r+0x8c8>
 801483c:	9b07      	ldr	r3, [sp, #28]
 801483e:	2b02      	cmp	r3, #2
 8014840:	dc51      	bgt.n	80148e6 <_dtoa_r+0x856>
 8014842:	e089      	b.n	8014958 <_dtoa_r+0x8c8>
 8014844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014846:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801484a:	e751      	b.n	80146f0 <_dtoa_r+0x660>
 801484c:	f109 34ff 	add.w	r4, r9, #4294967295
 8014850:	42a3      	cmp	r3, r4
 8014852:	bfbf      	itttt	lt
 8014854:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8014856:	1ae3      	sublt	r3, r4, r3
 8014858:	18d2      	addlt	r2, r2, r3
 801485a:	4613      	movlt	r3, r2
 801485c:	bfb7      	itett	lt
 801485e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014860:	1b1c      	subge	r4, r3, r4
 8014862:	4623      	movlt	r3, r4
 8014864:	2400      	movlt	r4, #0
 8014866:	f1b9 0f00 	cmp.w	r9, #0
 801486a:	bfb5      	itete	lt
 801486c:	9a05      	ldrlt	r2, [sp, #20]
 801486e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8014872:	eba2 0809 	sublt.w	r8, r2, r9
 8014876:	464a      	movge	r2, r9
 8014878:	bfb8      	it	lt
 801487a:	2200      	movlt	r2, #0
 801487c:	e73b      	b.n	80146f6 <_dtoa_r+0x666>
 801487e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014882:	9f08      	ldr	r7, [sp, #32]
 8014884:	461c      	mov	r4, r3
 8014886:	e743      	b.n	8014710 <_dtoa_r+0x680>
 8014888:	461a      	mov	r2, r3
 801488a:	e76f      	b.n	801476c <_dtoa_r+0x6dc>
 801488c:	9b07      	ldr	r3, [sp, #28]
 801488e:	2b01      	cmp	r3, #1
 8014890:	dc18      	bgt.n	80148c4 <_dtoa_r+0x834>
 8014892:	9b02      	ldr	r3, [sp, #8]
 8014894:	b9b3      	cbnz	r3, 80148c4 <_dtoa_r+0x834>
 8014896:	9b03      	ldr	r3, [sp, #12]
 8014898:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801489c:	b9a2      	cbnz	r2, 80148c8 <_dtoa_r+0x838>
 801489e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80148a2:	0d12      	lsrs	r2, r2, #20
 80148a4:	0512      	lsls	r2, r2, #20
 80148a6:	b18a      	cbz	r2, 80148cc <_dtoa_r+0x83c>
 80148a8:	9b05      	ldr	r3, [sp, #20]
 80148aa:	3301      	adds	r3, #1
 80148ac:	9305      	str	r3, [sp, #20]
 80148ae:	9b06      	ldr	r3, [sp, #24]
 80148b0:	3301      	adds	r3, #1
 80148b2:	9306      	str	r3, [sp, #24]
 80148b4:	2301      	movs	r3, #1
 80148b6:	930a      	str	r3, [sp, #40]	; 0x28
 80148b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f47f af6f 	bne.w	801479e <_dtoa_r+0x70e>
 80148c0:	2001      	movs	r0, #1
 80148c2:	e774      	b.n	80147ae <_dtoa_r+0x71e>
 80148c4:	2300      	movs	r3, #0
 80148c6:	e7f6      	b.n	80148b6 <_dtoa_r+0x826>
 80148c8:	9b02      	ldr	r3, [sp, #8]
 80148ca:	e7f4      	b.n	80148b6 <_dtoa_r+0x826>
 80148cc:	920a      	str	r2, [sp, #40]	; 0x28
 80148ce:	e7f3      	b.n	80148b8 <_dtoa_r+0x828>
 80148d0:	d081      	beq.n	80147d6 <_dtoa_r+0x746>
 80148d2:	4610      	mov	r0, r2
 80148d4:	301c      	adds	r0, #28
 80148d6:	e777      	b.n	80147c8 <_dtoa_r+0x738>
 80148d8:	f1b9 0f00 	cmp.w	r9, #0
 80148dc:	dc37      	bgt.n	801494e <_dtoa_r+0x8be>
 80148de:	9b07      	ldr	r3, [sp, #28]
 80148e0:	2b02      	cmp	r3, #2
 80148e2:	dd34      	ble.n	801494e <_dtoa_r+0x8be>
 80148e4:	46ca      	mov	sl, r9
 80148e6:	f1ba 0f00 	cmp.w	sl, #0
 80148ea:	d10d      	bne.n	8014908 <_dtoa_r+0x878>
 80148ec:	4621      	mov	r1, r4
 80148ee:	4653      	mov	r3, sl
 80148f0:	2205      	movs	r2, #5
 80148f2:	4630      	mov	r0, r6
 80148f4:	f000 f9ce 	bl	8014c94 <__multadd>
 80148f8:	4601      	mov	r1, r0
 80148fa:	4604      	mov	r4, r0
 80148fc:	4628      	mov	r0, r5
 80148fe:	f000 fbe5 	bl	80150cc <__mcmp>
 8014902:	2800      	cmp	r0, #0
 8014904:	f73f adde 	bgt.w	80144c4 <_dtoa_r+0x434>
 8014908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801490a:	f8dd 8000 	ldr.w	r8, [sp]
 801490e:	ea6f 0b03 	mvn.w	fp, r3
 8014912:	f04f 0900 	mov.w	r9, #0
 8014916:	4621      	mov	r1, r4
 8014918:	4630      	mov	r0, r6
 801491a:	f000 f999 	bl	8014c50 <_Bfree>
 801491e:	2f00      	cmp	r7, #0
 8014920:	f43f aea7 	beq.w	8014672 <_dtoa_r+0x5e2>
 8014924:	f1b9 0f00 	cmp.w	r9, #0
 8014928:	d005      	beq.n	8014936 <_dtoa_r+0x8a6>
 801492a:	45b9      	cmp	r9, r7
 801492c:	d003      	beq.n	8014936 <_dtoa_r+0x8a6>
 801492e:	4649      	mov	r1, r9
 8014930:	4630      	mov	r0, r6
 8014932:	f000 f98d 	bl	8014c50 <_Bfree>
 8014936:	4639      	mov	r1, r7
 8014938:	4630      	mov	r0, r6
 801493a:	f000 f989 	bl	8014c50 <_Bfree>
 801493e:	e698      	b.n	8014672 <_dtoa_r+0x5e2>
 8014940:	2400      	movs	r4, #0
 8014942:	4627      	mov	r7, r4
 8014944:	e7e0      	b.n	8014908 <_dtoa_r+0x878>
 8014946:	46bb      	mov	fp, r7
 8014948:	4604      	mov	r4, r0
 801494a:	4607      	mov	r7, r0
 801494c:	e5ba      	b.n	80144c4 <_dtoa_r+0x434>
 801494e:	9b08      	ldr	r3, [sp, #32]
 8014950:	46ca      	mov	sl, r9
 8014952:	2b00      	cmp	r3, #0
 8014954:	f000 8100 	beq.w	8014b58 <_dtoa_r+0xac8>
 8014958:	f1b8 0f00 	cmp.w	r8, #0
 801495c:	dd05      	ble.n	801496a <_dtoa_r+0x8da>
 801495e:	4639      	mov	r1, r7
 8014960:	4642      	mov	r2, r8
 8014962:	4630      	mov	r0, r6
 8014964:	f000 fb46 	bl	8014ff4 <__lshift>
 8014968:	4607      	mov	r7, r0
 801496a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801496c:	2b00      	cmp	r3, #0
 801496e:	d05d      	beq.n	8014a2c <_dtoa_r+0x99c>
 8014970:	6879      	ldr	r1, [r7, #4]
 8014972:	4630      	mov	r0, r6
 8014974:	f000 f92c 	bl	8014bd0 <_Balloc>
 8014978:	4680      	mov	r8, r0
 801497a:	b928      	cbnz	r0, 8014988 <_dtoa_r+0x8f8>
 801497c:	4b82      	ldr	r3, [pc, #520]	; (8014b88 <_dtoa_r+0xaf8>)
 801497e:	4602      	mov	r2, r0
 8014980:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014984:	f7ff bb9a 	b.w	80140bc <_dtoa_r+0x2c>
 8014988:	693a      	ldr	r2, [r7, #16]
 801498a:	3202      	adds	r2, #2
 801498c:	0092      	lsls	r2, r2, #2
 801498e:	f107 010c 	add.w	r1, r7, #12
 8014992:	300c      	adds	r0, #12
 8014994:	f000 f902 	bl	8014b9c <memcpy>
 8014998:	2201      	movs	r2, #1
 801499a:	4641      	mov	r1, r8
 801499c:	4630      	mov	r0, r6
 801499e:	f000 fb29 	bl	8014ff4 <__lshift>
 80149a2:	9b00      	ldr	r3, [sp, #0]
 80149a4:	3301      	adds	r3, #1
 80149a6:	9305      	str	r3, [sp, #20]
 80149a8:	9b00      	ldr	r3, [sp, #0]
 80149aa:	4453      	add	r3, sl
 80149ac:	9309      	str	r3, [sp, #36]	; 0x24
 80149ae:	9b02      	ldr	r3, [sp, #8]
 80149b0:	f003 0301 	and.w	r3, r3, #1
 80149b4:	46b9      	mov	r9, r7
 80149b6:	9308      	str	r3, [sp, #32]
 80149b8:	4607      	mov	r7, r0
 80149ba:	9b05      	ldr	r3, [sp, #20]
 80149bc:	4621      	mov	r1, r4
 80149be:	3b01      	subs	r3, #1
 80149c0:	4628      	mov	r0, r5
 80149c2:	9302      	str	r3, [sp, #8]
 80149c4:	f7ff fad6 	bl	8013f74 <quorem>
 80149c8:	4603      	mov	r3, r0
 80149ca:	3330      	adds	r3, #48	; 0x30
 80149cc:	9006      	str	r0, [sp, #24]
 80149ce:	4649      	mov	r1, r9
 80149d0:	4628      	mov	r0, r5
 80149d2:	930a      	str	r3, [sp, #40]	; 0x28
 80149d4:	f000 fb7a 	bl	80150cc <__mcmp>
 80149d8:	463a      	mov	r2, r7
 80149da:	4682      	mov	sl, r0
 80149dc:	4621      	mov	r1, r4
 80149de:	4630      	mov	r0, r6
 80149e0:	f000 fb90 	bl	8015104 <__mdiff>
 80149e4:	68c2      	ldr	r2, [r0, #12]
 80149e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149e8:	4680      	mov	r8, r0
 80149ea:	bb0a      	cbnz	r2, 8014a30 <_dtoa_r+0x9a0>
 80149ec:	4601      	mov	r1, r0
 80149ee:	4628      	mov	r0, r5
 80149f0:	f000 fb6c 	bl	80150cc <__mcmp>
 80149f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149f6:	4602      	mov	r2, r0
 80149f8:	4641      	mov	r1, r8
 80149fa:	4630      	mov	r0, r6
 80149fc:	920e      	str	r2, [sp, #56]	; 0x38
 80149fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014a00:	f000 f926 	bl	8014c50 <_Bfree>
 8014a04:	9b07      	ldr	r3, [sp, #28]
 8014a06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a08:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014a0c:	ea43 0102 	orr.w	r1, r3, r2
 8014a10:	9b08      	ldr	r3, [sp, #32]
 8014a12:	430b      	orrs	r3, r1
 8014a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a16:	d10d      	bne.n	8014a34 <_dtoa_r+0x9a4>
 8014a18:	2b39      	cmp	r3, #57	; 0x39
 8014a1a:	d029      	beq.n	8014a70 <_dtoa_r+0x9e0>
 8014a1c:	f1ba 0f00 	cmp.w	sl, #0
 8014a20:	dd01      	ble.n	8014a26 <_dtoa_r+0x996>
 8014a22:	9b06      	ldr	r3, [sp, #24]
 8014a24:	3331      	adds	r3, #49	; 0x31
 8014a26:	9a02      	ldr	r2, [sp, #8]
 8014a28:	7013      	strb	r3, [r2, #0]
 8014a2a:	e774      	b.n	8014916 <_dtoa_r+0x886>
 8014a2c:	4638      	mov	r0, r7
 8014a2e:	e7b8      	b.n	80149a2 <_dtoa_r+0x912>
 8014a30:	2201      	movs	r2, #1
 8014a32:	e7e1      	b.n	80149f8 <_dtoa_r+0x968>
 8014a34:	f1ba 0f00 	cmp.w	sl, #0
 8014a38:	db06      	blt.n	8014a48 <_dtoa_r+0x9b8>
 8014a3a:	9907      	ldr	r1, [sp, #28]
 8014a3c:	ea41 0a0a 	orr.w	sl, r1, sl
 8014a40:	9908      	ldr	r1, [sp, #32]
 8014a42:	ea5a 0101 	orrs.w	r1, sl, r1
 8014a46:	d120      	bne.n	8014a8a <_dtoa_r+0x9fa>
 8014a48:	2a00      	cmp	r2, #0
 8014a4a:	ddec      	ble.n	8014a26 <_dtoa_r+0x996>
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	2201      	movs	r2, #1
 8014a50:	4630      	mov	r0, r6
 8014a52:	9305      	str	r3, [sp, #20]
 8014a54:	f000 face 	bl	8014ff4 <__lshift>
 8014a58:	4621      	mov	r1, r4
 8014a5a:	4605      	mov	r5, r0
 8014a5c:	f000 fb36 	bl	80150cc <__mcmp>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	9b05      	ldr	r3, [sp, #20]
 8014a64:	dc02      	bgt.n	8014a6c <_dtoa_r+0x9dc>
 8014a66:	d1de      	bne.n	8014a26 <_dtoa_r+0x996>
 8014a68:	07da      	lsls	r2, r3, #31
 8014a6a:	d5dc      	bpl.n	8014a26 <_dtoa_r+0x996>
 8014a6c:	2b39      	cmp	r3, #57	; 0x39
 8014a6e:	d1d8      	bne.n	8014a22 <_dtoa_r+0x992>
 8014a70:	9a02      	ldr	r2, [sp, #8]
 8014a72:	2339      	movs	r3, #57	; 0x39
 8014a74:	7013      	strb	r3, [r2, #0]
 8014a76:	4643      	mov	r3, r8
 8014a78:	4698      	mov	r8, r3
 8014a7a:	3b01      	subs	r3, #1
 8014a7c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014a80:	2a39      	cmp	r2, #57	; 0x39
 8014a82:	d051      	beq.n	8014b28 <_dtoa_r+0xa98>
 8014a84:	3201      	adds	r2, #1
 8014a86:	701a      	strb	r2, [r3, #0]
 8014a88:	e745      	b.n	8014916 <_dtoa_r+0x886>
 8014a8a:	2a00      	cmp	r2, #0
 8014a8c:	dd03      	ble.n	8014a96 <_dtoa_r+0xa06>
 8014a8e:	2b39      	cmp	r3, #57	; 0x39
 8014a90:	d0ee      	beq.n	8014a70 <_dtoa_r+0x9e0>
 8014a92:	3301      	adds	r3, #1
 8014a94:	e7c7      	b.n	8014a26 <_dtoa_r+0x996>
 8014a96:	9a05      	ldr	r2, [sp, #20]
 8014a98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a9a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014a9e:	428a      	cmp	r2, r1
 8014aa0:	d02b      	beq.n	8014afa <_dtoa_r+0xa6a>
 8014aa2:	4629      	mov	r1, r5
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	220a      	movs	r2, #10
 8014aa8:	4630      	mov	r0, r6
 8014aaa:	f000 f8f3 	bl	8014c94 <__multadd>
 8014aae:	45b9      	cmp	r9, r7
 8014ab0:	4605      	mov	r5, r0
 8014ab2:	f04f 0300 	mov.w	r3, #0
 8014ab6:	f04f 020a 	mov.w	r2, #10
 8014aba:	4649      	mov	r1, r9
 8014abc:	4630      	mov	r0, r6
 8014abe:	d107      	bne.n	8014ad0 <_dtoa_r+0xa40>
 8014ac0:	f000 f8e8 	bl	8014c94 <__multadd>
 8014ac4:	4681      	mov	r9, r0
 8014ac6:	4607      	mov	r7, r0
 8014ac8:	9b05      	ldr	r3, [sp, #20]
 8014aca:	3301      	adds	r3, #1
 8014acc:	9305      	str	r3, [sp, #20]
 8014ace:	e774      	b.n	80149ba <_dtoa_r+0x92a>
 8014ad0:	f000 f8e0 	bl	8014c94 <__multadd>
 8014ad4:	4639      	mov	r1, r7
 8014ad6:	4681      	mov	r9, r0
 8014ad8:	2300      	movs	r3, #0
 8014ada:	220a      	movs	r2, #10
 8014adc:	4630      	mov	r0, r6
 8014ade:	f000 f8d9 	bl	8014c94 <__multadd>
 8014ae2:	4607      	mov	r7, r0
 8014ae4:	e7f0      	b.n	8014ac8 <_dtoa_r+0xa38>
 8014ae6:	f1ba 0f00 	cmp.w	sl, #0
 8014aea:	9a00      	ldr	r2, [sp, #0]
 8014aec:	bfcc      	ite	gt
 8014aee:	46d0      	movgt	r8, sl
 8014af0:	f04f 0801 	movle.w	r8, #1
 8014af4:	4490      	add	r8, r2
 8014af6:	f04f 0900 	mov.w	r9, #0
 8014afa:	4629      	mov	r1, r5
 8014afc:	2201      	movs	r2, #1
 8014afe:	4630      	mov	r0, r6
 8014b00:	9302      	str	r3, [sp, #8]
 8014b02:	f000 fa77 	bl	8014ff4 <__lshift>
 8014b06:	4621      	mov	r1, r4
 8014b08:	4605      	mov	r5, r0
 8014b0a:	f000 fadf 	bl	80150cc <__mcmp>
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	dcb1      	bgt.n	8014a76 <_dtoa_r+0x9e6>
 8014b12:	d102      	bne.n	8014b1a <_dtoa_r+0xa8a>
 8014b14:	9b02      	ldr	r3, [sp, #8]
 8014b16:	07db      	lsls	r3, r3, #31
 8014b18:	d4ad      	bmi.n	8014a76 <_dtoa_r+0x9e6>
 8014b1a:	4643      	mov	r3, r8
 8014b1c:	4698      	mov	r8, r3
 8014b1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b22:	2a30      	cmp	r2, #48	; 0x30
 8014b24:	d0fa      	beq.n	8014b1c <_dtoa_r+0xa8c>
 8014b26:	e6f6      	b.n	8014916 <_dtoa_r+0x886>
 8014b28:	9a00      	ldr	r2, [sp, #0]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d1a4      	bne.n	8014a78 <_dtoa_r+0x9e8>
 8014b2e:	f10b 0b01 	add.w	fp, fp, #1
 8014b32:	2331      	movs	r3, #49	; 0x31
 8014b34:	e778      	b.n	8014a28 <_dtoa_r+0x998>
 8014b36:	4b15      	ldr	r3, [pc, #84]	; (8014b8c <_dtoa_r+0xafc>)
 8014b38:	f7ff bb12 	b.w	8014160 <_dtoa_r+0xd0>
 8014b3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	f47f aaee 	bne.w	8014120 <_dtoa_r+0x90>
 8014b44:	4b12      	ldr	r3, [pc, #72]	; (8014b90 <_dtoa_r+0xb00>)
 8014b46:	f7ff bb0b 	b.w	8014160 <_dtoa_r+0xd0>
 8014b4a:	f1ba 0f00 	cmp.w	sl, #0
 8014b4e:	dc03      	bgt.n	8014b58 <_dtoa_r+0xac8>
 8014b50:	9b07      	ldr	r3, [sp, #28]
 8014b52:	2b02      	cmp	r3, #2
 8014b54:	f73f aec7 	bgt.w	80148e6 <_dtoa_r+0x856>
 8014b58:	f8dd 8000 	ldr.w	r8, [sp]
 8014b5c:	4621      	mov	r1, r4
 8014b5e:	4628      	mov	r0, r5
 8014b60:	f7ff fa08 	bl	8013f74 <quorem>
 8014b64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014b68:	f808 3b01 	strb.w	r3, [r8], #1
 8014b6c:	9a00      	ldr	r2, [sp, #0]
 8014b6e:	eba8 0202 	sub.w	r2, r8, r2
 8014b72:	4592      	cmp	sl, r2
 8014b74:	ddb7      	ble.n	8014ae6 <_dtoa_r+0xa56>
 8014b76:	4629      	mov	r1, r5
 8014b78:	2300      	movs	r3, #0
 8014b7a:	220a      	movs	r2, #10
 8014b7c:	4630      	mov	r0, r6
 8014b7e:	f000 f889 	bl	8014c94 <__multadd>
 8014b82:	4605      	mov	r5, r0
 8014b84:	e7ea      	b.n	8014b5c <_dtoa_r+0xacc>
 8014b86:	bf00      	nop
 8014b88:	08015f5f 	.word	0x08015f5f
 8014b8c:	08015eb8 	.word	0x08015eb8
 8014b90:	08015edc 	.word	0x08015edc

08014b94 <_localeconv_r>:
 8014b94:	4800      	ldr	r0, [pc, #0]	; (8014b98 <_localeconv_r+0x4>)
 8014b96:	4770      	bx	lr
 8014b98:	240002d8 	.word	0x240002d8

08014b9c <memcpy>:
 8014b9c:	440a      	add	r2, r1
 8014b9e:	4291      	cmp	r1, r2
 8014ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ba4:	d100      	bne.n	8014ba8 <memcpy+0xc>
 8014ba6:	4770      	bx	lr
 8014ba8:	b510      	push	{r4, lr}
 8014baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014bb2:	4291      	cmp	r1, r2
 8014bb4:	d1f9      	bne.n	8014baa <memcpy+0xe>
 8014bb6:	bd10      	pop	{r4, pc}

08014bb8 <__malloc_lock>:
 8014bb8:	4801      	ldr	r0, [pc, #4]	; (8014bc0 <__malloc_lock+0x8>)
 8014bba:	f000 bbc8 	b.w	801534e <__retarget_lock_acquire_recursive>
 8014bbe:	bf00      	nop
 8014bc0:	24004118 	.word	0x24004118

08014bc4 <__malloc_unlock>:
 8014bc4:	4801      	ldr	r0, [pc, #4]	; (8014bcc <__malloc_unlock+0x8>)
 8014bc6:	f000 bbc3 	b.w	8015350 <__retarget_lock_release_recursive>
 8014bca:	bf00      	nop
 8014bcc:	24004118 	.word	0x24004118

08014bd0 <_Balloc>:
 8014bd0:	b570      	push	{r4, r5, r6, lr}
 8014bd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	460d      	mov	r5, r1
 8014bd8:	b976      	cbnz	r6, 8014bf8 <_Balloc+0x28>
 8014bda:	2010      	movs	r0, #16
 8014bdc:	f7fe fcb6 	bl	801354c <malloc>
 8014be0:	4602      	mov	r2, r0
 8014be2:	6260      	str	r0, [r4, #36]	; 0x24
 8014be4:	b920      	cbnz	r0, 8014bf0 <_Balloc+0x20>
 8014be6:	4b18      	ldr	r3, [pc, #96]	; (8014c48 <_Balloc+0x78>)
 8014be8:	4818      	ldr	r0, [pc, #96]	; (8014c4c <_Balloc+0x7c>)
 8014bea:	2166      	movs	r1, #102	; 0x66
 8014bec:	f000 fb7e 	bl	80152ec <__assert_func>
 8014bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014bf4:	6006      	str	r6, [r0, #0]
 8014bf6:	60c6      	str	r6, [r0, #12]
 8014bf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014bfa:	68f3      	ldr	r3, [r6, #12]
 8014bfc:	b183      	cbz	r3, 8014c20 <_Balloc+0x50>
 8014bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c00:	68db      	ldr	r3, [r3, #12]
 8014c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014c06:	b9b8      	cbnz	r0, 8014c38 <_Balloc+0x68>
 8014c08:	2101      	movs	r1, #1
 8014c0a:	fa01 f605 	lsl.w	r6, r1, r5
 8014c0e:	1d72      	adds	r2, r6, #5
 8014c10:	0092      	lsls	r2, r2, #2
 8014c12:	4620      	mov	r0, r4
 8014c14:	f000 fb5a 	bl	80152cc <_calloc_r>
 8014c18:	b160      	cbz	r0, 8014c34 <_Balloc+0x64>
 8014c1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014c1e:	e00e      	b.n	8014c3e <_Balloc+0x6e>
 8014c20:	2221      	movs	r2, #33	; 0x21
 8014c22:	2104      	movs	r1, #4
 8014c24:	4620      	mov	r0, r4
 8014c26:	f000 fb51 	bl	80152cc <_calloc_r>
 8014c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014c2c:	60f0      	str	r0, [r6, #12]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d1e4      	bne.n	8014bfe <_Balloc+0x2e>
 8014c34:	2000      	movs	r0, #0
 8014c36:	bd70      	pop	{r4, r5, r6, pc}
 8014c38:	6802      	ldr	r2, [r0, #0]
 8014c3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014c3e:	2300      	movs	r3, #0
 8014c40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014c44:	e7f7      	b.n	8014c36 <_Balloc+0x66>
 8014c46:	bf00      	nop
 8014c48:	08015ee9 	.word	0x08015ee9
 8014c4c:	08015f70 	.word	0x08015f70

08014c50 <_Bfree>:
 8014c50:	b570      	push	{r4, r5, r6, lr}
 8014c52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014c54:	4605      	mov	r5, r0
 8014c56:	460c      	mov	r4, r1
 8014c58:	b976      	cbnz	r6, 8014c78 <_Bfree+0x28>
 8014c5a:	2010      	movs	r0, #16
 8014c5c:	f7fe fc76 	bl	801354c <malloc>
 8014c60:	4602      	mov	r2, r0
 8014c62:	6268      	str	r0, [r5, #36]	; 0x24
 8014c64:	b920      	cbnz	r0, 8014c70 <_Bfree+0x20>
 8014c66:	4b09      	ldr	r3, [pc, #36]	; (8014c8c <_Bfree+0x3c>)
 8014c68:	4809      	ldr	r0, [pc, #36]	; (8014c90 <_Bfree+0x40>)
 8014c6a:	218a      	movs	r1, #138	; 0x8a
 8014c6c:	f000 fb3e 	bl	80152ec <__assert_func>
 8014c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014c74:	6006      	str	r6, [r0, #0]
 8014c76:	60c6      	str	r6, [r0, #12]
 8014c78:	b13c      	cbz	r4, 8014c8a <_Bfree+0x3a>
 8014c7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014c7c:	6862      	ldr	r2, [r4, #4]
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014c84:	6021      	str	r1, [r4, #0]
 8014c86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014c8a:	bd70      	pop	{r4, r5, r6, pc}
 8014c8c:	08015ee9 	.word	0x08015ee9
 8014c90:	08015f70 	.word	0x08015f70

08014c94 <__multadd>:
 8014c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c98:	690e      	ldr	r6, [r1, #16]
 8014c9a:	4607      	mov	r7, r0
 8014c9c:	4698      	mov	r8, r3
 8014c9e:	460c      	mov	r4, r1
 8014ca0:	f101 0014 	add.w	r0, r1, #20
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	6805      	ldr	r5, [r0, #0]
 8014ca8:	b2a9      	uxth	r1, r5
 8014caa:	fb02 8101 	mla	r1, r2, r1, r8
 8014cae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014cb2:	0c2d      	lsrs	r5, r5, #16
 8014cb4:	fb02 c505 	mla	r5, r2, r5, ip
 8014cb8:	b289      	uxth	r1, r1
 8014cba:	3301      	adds	r3, #1
 8014cbc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014cc0:	429e      	cmp	r6, r3
 8014cc2:	f840 1b04 	str.w	r1, [r0], #4
 8014cc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014cca:	dcec      	bgt.n	8014ca6 <__multadd+0x12>
 8014ccc:	f1b8 0f00 	cmp.w	r8, #0
 8014cd0:	d022      	beq.n	8014d18 <__multadd+0x84>
 8014cd2:	68a3      	ldr	r3, [r4, #8]
 8014cd4:	42b3      	cmp	r3, r6
 8014cd6:	dc19      	bgt.n	8014d0c <__multadd+0x78>
 8014cd8:	6861      	ldr	r1, [r4, #4]
 8014cda:	4638      	mov	r0, r7
 8014cdc:	3101      	adds	r1, #1
 8014cde:	f7ff ff77 	bl	8014bd0 <_Balloc>
 8014ce2:	4605      	mov	r5, r0
 8014ce4:	b928      	cbnz	r0, 8014cf2 <__multadd+0x5e>
 8014ce6:	4602      	mov	r2, r0
 8014ce8:	4b0d      	ldr	r3, [pc, #52]	; (8014d20 <__multadd+0x8c>)
 8014cea:	480e      	ldr	r0, [pc, #56]	; (8014d24 <__multadd+0x90>)
 8014cec:	21b5      	movs	r1, #181	; 0xb5
 8014cee:	f000 fafd 	bl	80152ec <__assert_func>
 8014cf2:	6922      	ldr	r2, [r4, #16]
 8014cf4:	3202      	adds	r2, #2
 8014cf6:	f104 010c 	add.w	r1, r4, #12
 8014cfa:	0092      	lsls	r2, r2, #2
 8014cfc:	300c      	adds	r0, #12
 8014cfe:	f7ff ff4d 	bl	8014b9c <memcpy>
 8014d02:	4621      	mov	r1, r4
 8014d04:	4638      	mov	r0, r7
 8014d06:	f7ff ffa3 	bl	8014c50 <_Bfree>
 8014d0a:	462c      	mov	r4, r5
 8014d0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014d10:	3601      	adds	r6, #1
 8014d12:	f8c3 8014 	str.w	r8, [r3, #20]
 8014d16:	6126      	str	r6, [r4, #16]
 8014d18:	4620      	mov	r0, r4
 8014d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d1e:	bf00      	nop
 8014d20:	08015f5f 	.word	0x08015f5f
 8014d24:	08015f70 	.word	0x08015f70

08014d28 <__hi0bits>:
 8014d28:	0c03      	lsrs	r3, r0, #16
 8014d2a:	041b      	lsls	r3, r3, #16
 8014d2c:	b9d3      	cbnz	r3, 8014d64 <__hi0bits+0x3c>
 8014d2e:	0400      	lsls	r0, r0, #16
 8014d30:	2310      	movs	r3, #16
 8014d32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014d36:	bf04      	itt	eq
 8014d38:	0200      	lsleq	r0, r0, #8
 8014d3a:	3308      	addeq	r3, #8
 8014d3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014d40:	bf04      	itt	eq
 8014d42:	0100      	lsleq	r0, r0, #4
 8014d44:	3304      	addeq	r3, #4
 8014d46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014d4a:	bf04      	itt	eq
 8014d4c:	0080      	lsleq	r0, r0, #2
 8014d4e:	3302      	addeq	r3, #2
 8014d50:	2800      	cmp	r0, #0
 8014d52:	db05      	blt.n	8014d60 <__hi0bits+0x38>
 8014d54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014d58:	f103 0301 	add.w	r3, r3, #1
 8014d5c:	bf08      	it	eq
 8014d5e:	2320      	moveq	r3, #32
 8014d60:	4618      	mov	r0, r3
 8014d62:	4770      	bx	lr
 8014d64:	2300      	movs	r3, #0
 8014d66:	e7e4      	b.n	8014d32 <__hi0bits+0xa>

08014d68 <__lo0bits>:
 8014d68:	6803      	ldr	r3, [r0, #0]
 8014d6a:	f013 0207 	ands.w	r2, r3, #7
 8014d6e:	4601      	mov	r1, r0
 8014d70:	d00b      	beq.n	8014d8a <__lo0bits+0x22>
 8014d72:	07da      	lsls	r2, r3, #31
 8014d74:	d424      	bmi.n	8014dc0 <__lo0bits+0x58>
 8014d76:	0798      	lsls	r0, r3, #30
 8014d78:	bf49      	itett	mi
 8014d7a:	085b      	lsrmi	r3, r3, #1
 8014d7c:	089b      	lsrpl	r3, r3, #2
 8014d7e:	2001      	movmi	r0, #1
 8014d80:	600b      	strmi	r3, [r1, #0]
 8014d82:	bf5c      	itt	pl
 8014d84:	600b      	strpl	r3, [r1, #0]
 8014d86:	2002      	movpl	r0, #2
 8014d88:	4770      	bx	lr
 8014d8a:	b298      	uxth	r0, r3
 8014d8c:	b9b0      	cbnz	r0, 8014dbc <__lo0bits+0x54>
 8014d8e:	0c1b      	lsrs	r3, r3, #16
 8014d90:	2010      	movs	r0, #16
 8014d92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014d96:	bf04      	itt	eq
 8014d98:	0a1b      	lsreq	r3, r3, #8
 8014d9a:	3008      	addeq	r0, #8
 8014d9c:	071a      	lsls	r2, r3, #28
 8014d9e:	bf04      	itt	eq
 8014da0:	091b      	lsreq	r3, r3, #4
 8014da2:	3004      	addeq	r0, #4
 8014da4:	079a      	lsls	r2, r3, #30
 8014da6:	bf04      	itt	eq
 8014da8:	089b      	lsreq	r3, r3, #2
 8014daa:	3002      	addeq	r0, #2
 8014dac:	07da      	lsls	r2, r3, #31
 8014dae:	d403      	bmi.n	8014db8 <__lo0bits+0x50>
 8014db0:	085b      	lsrs	r3, r3, #1
 8014db2:	f100 0001 	add.w	r0, r0, #1
 8014db6:	d005      	beq.n	8014dc4 <__lo0bits+0x5c>
 8014db8:	600b      	str	r3, [r1, #0]
 8014dba:	4770      	bx	lr
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	e7e8      	b.n	8014d92 <__lo0bits+0x2a>
 8014dc0:	2000      	movs	r0, #0
 8014dc2:	4770      	bx	lr
 8014dc4:	2020      	movs	r0, #32
 8014dc6:	4770      	bx	lr

08014dc8 <__i2b>:
 8014dc8:	b510      	push	{r4, lr}
 8014dca:	460c      	mov	r4, r1
 8014dcc:	2101      	movs	r1, #1
 8014dce:	f7ff feff 	bl	8014bd0 <_Balloc>
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	b928      	cbnz	r0, 8014de2 <__i2b+0x1a>
 8014dd6:	4b05      	ldr	r3, [pc, #20]	; (8014dec <__i2b+0x24>)
 8014dd8:	4805      	ldr	r0, [pc, #20]	; (8014df0 <__i2b+0x28>)
 8014dda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014dde:	f000 fa85 	bl	80152ec <__assert_func>
 8014de2:	2301      	movs	r3, #1
 8014de4:	6144      	str	r4, [r0, #20]
 8014de6:	6103      	str	r3, [r0, #16]
 8014de8:	bd10      	pop	{r4, pc}
 8014dea:	bf00      	nop
 8014dec:	08015f5f 	.word	0x08015f5f
 8014df0:	08015f70 	.word	0x08015f70

08014df4 <__multiply>:
 8014df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df8:	4614      	mov	r4, r2
 8014dfa:	690a      	ldr	r2, [r1, #16]
 8014dfc:	6923      	ldr	r3, [r4, #16]
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	bfb8      	it	lt
 8014e02:	460b      	movlt	r3, r1
 8014e04:	460d      	mov	r5, r1
 8014e06:	bfbc      	itt	lt
 8014e08:	4625      	movlt	r5, r4
 8014e0a:	461c      	movlt	r4, r3
 8014e0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014e10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014e14:	68ab      	ldr	r3, [r5, #8]
 8014e16:	6869      	ldr	r1, [r5, #4]
 8014e18:	eb0a 0709 	add.w	r7, sl, r9
 8014e1c:	42bb      	cmp	r3, r7
 8014e1e:	b085      	sub	sp, #20
 8014e20:	bfb8      	it	lt
 8014e22:	3101      	addlt	r1, #1
 8014e24:	f7ff fed4 	bl	8014bd0 <_Balloc>
 8014e28:	b930      	cbnz	r0, 8014e38 <__multiply+0x44>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	4b42      	ldr	r3, [pc, #264]	; (8014f38 <__multiply+0x144>)
 8014e2e:	4843      	ldr	r0, [pc, #268]	; (8014f3c <__multiply+0x148>)
 8014e30:	f240 115d 	movw	r1, #349	; 0x15d
 8014e34:	f000 fa5a 	bl	80152ec <__assert_func>
 8014e38:	f100 0614 	add.w	r6, r0, #20
 8014e3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014e40:	4633      	mov	r3, r6
 8014e42:	2200      	movs	r2, #0
 8014e44:	4543      	cmp	r3, r8
 8014e46:	d31e      	bcc.n	8014e86 <__multiply+0x92>
 8014e48:	f105 0c14 	add.w	ip, r5, #20
 8014e4c:	f104 0314 	add.w	r3, r4, #20
 8014e50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014e54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014e58:	9202      	str	r2, [sp, #8]
 8014e5a:	ebac 0205 	sub.w	r2, ip, r5
 8014e5e:	3a15      	subs	r2, #21
 8014e60:	f022 0203 	bic.w	r2, r2, #3
 8014e64:	3204      	adds	r2, #4
 8014e66:	f105 0115 	add.w	r1, r5, #21
 8014e6a:	458c      	cmp	ip, r1
 8014e6c:	bf38      	it	cc
 8014e6e:	2204      	movcc	r2, #4
 8014e70:	9201      	str	r2, [sp, #4]
 8014e72:	9a02      	ldr	r2, [sp, #8]
 8014e74:	9303      	str	r3, [sp, #12]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d808      	bhi.n	8014e8c <__multiply+0x98>
 8014e7a:	2f00      	cmp	r7, #0
 8014e7c:	dc55      	bgt.n	8014f2a <__multiply+0x136>
 8014e7e:	6107      	str	r7, [r0, #16]
 8014e80:	b005      	add	sp, #20
 8014e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e86:	f843 2b04 	str.w	r2, [r3], #4
 8014e8a:	e7db      	b.n	8014e44 <__multiply+0x50>
 8014e8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014e90:	f1ba 0f00 	cmp.w	sl, #0
 8014e94:	d020      	beq.n	8014ed8 <__multiply+0xe4>
 8014e96:	f105 0e14 	add.w	lr, r5, #20
 8014e9a:	46b1      	mov	r9, r6
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014ea2:	f8d9 b000 	ldr.w	fp, [r9]
 8014ea6:	b2a1      	uxth	r1, r4
 8014ea8:	fa1f fb8b 	uxth.w	fp, fp
 8014eac:	fb0a b101 	mla	r1, sl, r1, fp
 8014eb0:	4411      	add	r1, r2
 8014eb2:	f8d9 2000 	ldr.w	r2, [r9]
 8014eb6:	0c24      	lsrs	r4, r4, #16
 8014eb8:	0c12      	lsrs	r2, r2, #16
 8014eba:	fb0a 2404 	mla	r4, sl, r4, r2
 8014ebe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014ec2:	b289      	uxth	r1, r1
 8014ec4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014ec8:	45f4      	cmp	ip, lr
 8014eca:	f849 1b04 	str.w	r1, [r9], #4
 8014ece:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014ed2:	d8e4      	bhi.n	8014e9e <__multiply+0xaa>
 8014ed4:	9901      	ldr	r1, [sp, #4]
 8014ed6:	5072      	str	r2, [r6, r1]
 8014ed8:	9a03      	ldr	r2, [sp, #12]
 8014eda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014ede:	3304      	adds	r3, #4
 8014ee0:	f1b9 0f00 	cmp.w	r9, #0
 8014ee4:	d01f      	beq.n	8014f26 <__multiply+0x132>
 8014ee6:	6834      	ldr	r4, [r6, #0]
 8014ee8:	f105 0114 	add.w	r1, r5, #20
 8014eec:	46b6      	mov	lr, r6
 8014eee:	f04f 0a00 	mov.w	sl, #0
 8014ef2:	880a      	ldrh	r2, [r1, #0]
 8014ef4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014ef8:	fb09 b202 	mla	r2, r9, r2, fp
 8014efc:	4492      	add	sl, r2
 8014efe:	b2a4      	uxth	r4, r4
 8014f00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014f04:	f84e 4b04 	str.w	r4, [lr], #4
 8014f08:	f851 4b04 	ldr.w	r4, [r1], #4
 8014f0c:	f8be 2000 	ldrh.w	r2, [lr]
 8014f10:	0c24      	lsrs	r4, r4, #16
 8014f12:	fb09 2404 	mla	r4, r9, r4, r2
 8014f16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014f1a:	458c      	cmp	ip, r1
 8014f1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014f20:	d8e7      	bhi.n	8014ef2 <__multiply+0xfe>
 8014f22:	9a01      	ldr	r2, [sp, #4]
 8014f24:	50b4      	str	r4, [r6, r2]
 8014f26:	3604      	adds	r6, #4
 8014f28:	e7a3      	b.n	8014e72 <__multiply+0x7e>
 8014f2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d1a5      	bne.n	8014e7e <__multiply+0x8a>
 8014f32:	3f01      	subs	r7, #1
 8014f34:	e7a1      	b.n	8014e7a <__multiply+0x86>
 8014f36:	bf00      	nop
 8014f38:	08015f5f 	.word	0x08015f5f
 8014f3c:	08015f70 	.word	0x08015f70

08014f40 <__pow5mult>:
 8014f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f44:	4615      	mov	r5, r2
 8014f46:	f012 0203 	ands.w	r2, r2, #3
 8014f4a:	4606      	mov	r6, r0
 8014f4c:	460f      	mov	r7, r1
 8014f4e:	d007      	beq.n	8014f60 <__pow5mult+0x20>
 8014f50:	4c25      	ldr	r4, [pc, #148]	; (8014fe8 <__pow5mult+0xa8>)
 8014f52:	3a01      	subs	r2, #1
 8014f54:	2300      	movs	r3, #0
 8014f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014f5a:	f7ff fe9b 	bl	8014c94 <__multadd>
 8014f5e:	4607      	mov	r7, r0
 8014f60:	10ad      	asrs	r5, r5, #2
 8014f62:	d03d      	beq.n	8014fe0 <__pow5mult+0xa0>
 8014f64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014f66:	b97c      	cbnz	r4, 8014f88 <__pow5mult+0x48>
 8014f68:	2010      	movs	r0, #16
 8014f6a:	f7fe faef 	bl	801354c <malloc>
 8014f6e:	4602      	mov	r2, r0
 8014f70:	6270      	str	r0, [r6, #36]	; 0x24
 8014f72:	b928      	cbnz	r0, 8014f80 <__pow5mult+0x40>
 8014f74:	4b1d      	ldr	r3, [pc, #116]	; (8014fec <__pow5mult+0xac>)
 8014f76:	481e      	ldr	r0, [pc, #120]	; (8014ff0 <__pow5mult+0xb0>)
 8014f78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014f7c:	f000 f9b6 	bl	80152ec <__assert_func>
 8014f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014f84:	6004      	str	r4, [r0, #0]
 8014f86:	60c4      	str	r4, [r0, #12]
 8014f88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014f90:	b94c      	cbnz	r4, 8014fa6 <__pow5mult+0x66>
 8014f92:	f240 2171 	movw	r1, #625	; 0x271
 8014f96:	4630      	mov	r0, r6
 8014f98:	f7ff ff16 	bl	8014dc8 <__i2b>
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	6003      	str	r3, [r0, #0]
 8014fa6:	f04f 0900 	mov.w	r9, #0
 8014faa:	07eb      	lsls	r3, r5, #31
 8014fac:	d50a      	bpl.n	8014fc4 <__pow5mult+0x84>
 8014fae:	4639      	mov	r1, r7
 8014fb0:	4622      	mov	r2, r4
 8014fb2:	4630      	mov	r0, r6
 8014fb4:	f7ff ff1e 	bl	8014df4 <__multiply>
 8014fb8:	4639      	mov	r1, r7
 8014fba:	4680      	mov	r8, r0
 8014fbc:	4630      	mov	r0, r6
 8014fbe:	f7ff fe47 	bl	8014c50 <_Bfree>
 8014fc2:	4647      	mov	r7, r8
 8014fc4:	106d      	asrs	r5, r5, #1
 8014fc6:	d00b      	beq.n	8014fe0 <__pow5mult+0xa0>
 8014fc8:	6820      	ldr	r0, [r4, #0]
 8014fca:	b938      	cbnz	r0, 8014fdc <__pow5mult+0x9c>
 8014fcc:	4622      	mov	r2, r4
 8014fce:	4621      	mov	r1, r4
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	f7ff ff0f 	bl	8014df4 <__multiply>
 8014fd6:	6020      	str	r0, [r4, #0]
 8014fd8:	f8c0 9000 	str.w	r9, [r0]
 8014fdc:	4604      	mov	r4, r0
 8014fde:	e7e4      	b.n	8014faa <__pow5mult+0x6a>
 8014fe0:	4638      	mov	r0, r7
 8014fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fe6:	bf00      	nop
 8014fe8:	080160c0 	.word	0x080160c0
 8014fec:	08015ee9 	.word	0x08015ee9
 8014ff0:	08015f70 	.word	0x08015f70

08014ff4 <__lshift>:
 8014ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ff8:	460c      	mov	r4, r1
 8014ffa:	6849      	ldr	r1, [r1, #4]
 8014ffc:	6923      	ldr	r3, [r4, #16]
 8014ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015002:	68a3      	ldr	r3, [r4, #8]
 8015004:	4607      	mov	r7, r0
 8015006:	4691      	mov	r9, r2
 8015008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801500c:	f108 0601 	add.w	r6, r8, #1
 8015010:	42b3      	cmp	r3, r6
 8015012:	db0b      	blt.n	801502c <__lshift+0x38>
 8015014:	4638      	mov	r0, r7
 8015016:	f7ff fddb 	bl	8014bd0 <_Balloc>
 801501a:	4605      	mov	r5, r0
 801501c:	b948      	cbnz	r0, 8015032 <__lshift+0x3e>
 801501e:	4602      	mov	r2, r0
 8015020:	4b28      	ldr	r3, [pc, #160]	; (80150c4 <__lshift+0xd0>)
 8015022:	4829      	ldr	r0, [pc, #164]	; (80150c8 <__lshift+0xd4>)
 8015024:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015028:	f000 f960 	bl	80152ec <__assert_func>
 801502c:	3101      	adds	r1, #1
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	e7ee      	b.n	8015010 <__lshift+0x1c>
 8015032:	2300      	movs	r3, #0
 8015034:	f100 0114 	add.w	r1, r0, #20
 8015038:	f100 0210 	add.w	r2, r0, #16
 801503c:	4618      	mov	r0, r3
 801503e:	4553      	cmp	r3, sl
 8015040:	db33      	blt.n	80150aa <__lshift+0xb6>
 8015042:	6920      	ldr	r0, [r4, #16]
 8015044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015048:	f104 0314 	add.w	r3, r4, #20
 801504c:	f019 091f 	ands.w	r9, r9, #31
 8015050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015058:	d02b      	beq.n	80150b2 <__lshift+0xbe>
 801505a:	f1c9 0e20 	rsb	lr, r9, #32
 801505e:	468a      	mov	sl, r1
 8015060:	2200      	movs	r2, #0
 8015062:	6818      	ldr	r0, [r3, #0]
 8015064:	fa00 f009 	lsl.w	r0, r0, r9
 8015068:	4302      	orrs	r2, r0
 801506a:	f84a 2b04 	str.w	r2, [sl], #4
 801506e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015072:	459c      	cmp	ip, r3
 8015074:	fa22 f20e 	lsr.w	r2, r2, lr
 8015078:	d8f3      	bhi.n	8015062 <__lshift+0x6e>
 801507a:	ebac 0304 	sub.w	r3, ip, r4
 801507e:	3b15      	subs	r3, #21
 8015080:	f023 0303 	bic.w	r3, r3, #3
 8015084:	3304      	adds	r3, #4
 8015086:	f104 0015 	add.w	r0, r4, #21
 801508a:	4584      	cmp	ip, r0
 801508c:	bf38      	it	cc
 801508e:	2304      	movcc	r3, #4
 8015090:	50ca      	str	r2, [r1, r3]
 8015092:	b10a      	cbz	r2, 8015098 <__lshift+0xa4>
 8015094:	f108 0602 	add.w	r6, r8, #2
 8015098:	3e01      	subs	r6, #1
 801509a:	4638      	mov	r0, r7
 801509c:	612e      	str	r6, [r5, #16]
 801509e:	4621      	mov	r1, r4
 80150a0:	f7ff fdd6 	bl	8014c50 <_Bfree>
 80150a4:	4628      	mov	r0, r5
 80150a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80150ae:	3301      	adds	r3, #1
 80150b0:	e7c5      	b.n	801503e <__lshift+0x4a>
 80150b2:	3904      	subs	r1, #4
 80150b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80150b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80150bc:	459c      	cmp	ip, r3
 80150be:	d8f9      	bhi.n	80150b4 <__lshift+0xc0>
 80150c0:	e7ea      	b.n	8015098 <__lshift+0xa4>
 80150c2:	bf00      	nop
 80150c4:	08015f5f 	.word	0x08015f5f
 80150c8:	08015f70 	.word	0x08015f70

080150cc <__mcmp>:
 80150cc:	b530      	push	{r4, r5, lr}
 80150ce:	6902      	ldr	r2, [r0, #16]
 80150d0:	690c      	ldr	r4, [r1, #16]
 80150d2:	1b12      	subs	r2, r2, r4
 80150d4:	d10e      	bne.n	80150f4 <__mcmp+0x28>
 80150d6:	f100 0314 	add.w	r3, r0, #20
 80150da:	3114      	adds	r1, #20
 80150dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80150e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80150e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80150e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80150ec:	42a5      	cmp	r5, r4
 80150ee:	d003      	beq.n	80150f8 <__mcmp+0x2c>
 80150f0:	d305      	bcc.n	80150fe <__mcmp+0x32>
 80150f2:	2201      	movs	r2, #1
 80150f4:	4610      	mov	r0, r2
 80150f6:	bd30      	pop	{r4, r5, pc}
 80150f8:	4283      	cmp	r3, r0
 80150fa:	d3f3      	bcc.n	80150e4 <__mcmp+0x18>
 80150fc:	e7fa      	b.n	80150f4 <__mcmp+0x28>
 80150fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015102:	e7f7      	b.n	80150f4 <__mcmp+0x28>

08015104 <__mdiff>:
 8015104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015108:	460c      	mov	r4, r1
 801510a:	4606      	mov	r6, r0
 801510c:	4611      	mov	r1, r2
 801510e:	4620      	mov	r0, r4
 8015110:	4617      	mov	r7, r2
 8015112:	f7ff ffdb 	bl	80150cc <__mcmp>
 8015116:	1e05      	subs	r5, r0, #0
 8015118:	d110      	bne.n	801513c <__mdiff+0x38>
 801511a:	4629      	mov	r1, r5
 801511c:	4630      	mov	r0, r6
 801511e:	f7ff fd57 	bl	8014bd0 <_Balloc>
 8015122:	b930      	cbnz	r0, 8015132 <__mdiff+0x2e>
 8015124:	4b39      	ldr	r3, [pc, #228]	; (801520c <__mdiff+0x108>)
 8015126:	4602      	mov	r2, r0
 8015128:	f240 2132 	movw	r1, #562	; 0x232
 801512c:	4838      	ldr	r0, [pc, #224]	; (8015210 <__mdiff+0x10c>)
 801512e:	f000 f8dd 	bl	80152ec <__assert_func>
 8015132:	2301      	movs	r3, #1
 8015134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801513c:	bfa4      	itt	ge
 801513e:	463b      	movge	r3, r7
 8015140:	4627      	movge	r7, r4
 8015142:	4630      	mov	r0, r6
 8015144:	6879      	ldr	r1, [r7, #4]
 8015146:	bfa6      	itte	ge
 8015148:	461c      	movge	r4, r3
 801514a:	2500      	movge	r5, #0
 801514c:	2501      	movlt	r5, #1
 801514e:	f7ff fd3f 	bl	8014bd0 <_Balloc>
 8015152:	b920      	cbnz	r0, 801515e <__mdiff+0x5a>
 8015154:	4b2d      	ldr	r3, [pc, #180]	; (801520c <__mdiff+0x108>)
 8015156:	4602      	mov	r2, r0
 8015158:	f44f 7110 	mov.w	r1, #576	; 0x240
 801515c:	e7e6      	b.n	801512c <__mdiff+0x28>
 801515e:	693e      	ldr	r6, [r7, #16]
 8015160:	60c5      	str	r5, [r0, #12]
 8015162:	6925      	ldr	r5, [r4, #16]
 8015164:	f107 0114 	add.w	r1, r7, #20
 8015168:	f104 0914 	add.w	r9, r4, #20
 801516c:	f100 0e14 	add.w	lr, r0, #20
 8015170:	f107 0210 	add.w	r2, r7, #16
 8015174:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015178:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801517c:	46f2      	mov	sl, lr
 801517e:	2700      	movs	r7, #0
 8015180:	f859 3b04 	ldr.w	r3, [r9], #4
 8015184:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015188:	fa1f f883 	uxth.w	r8, r3
 801518c:	fa17 f78b 	uxtah	r7, r7, fp
 8015190:	0c1b      	lsrs	r3, r3, #16
 8015192:	eba7 0808 	sub.w	r8, r7, r8
 8015196:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801519a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801519e:	fa1f f888 	uxth.w	r8, r8
 80151a2:	141f      	asrs	r7, r3, #16
 80151a4:	454d      	cmp	r5, r9
 80151a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80151aa:	f84a 3b04 	str.w	r3, [sl], #4
 80151ae:	d8e7      	bhi.n	8015180 <__mdiff+0x7c>
 80151b0:	1b2b      	subs	r3, r5, r4
 80151b2:	3b15      	subs	r3, #21
 80151b4:	f023 0303 	bic.w	r3, r3, #3
 80151b8:	3304      	adds	r3, #4
 80151ba:	3415      	adds	r4, #21
 80151bc:	42a5      	cmp	r5, r4
 80151be:	bf38      	it	cc
 80151c0:	2304      	movcc	r3, #4
 80151c2:	4419      	add	r1, r3
 80151c4:	4473      	add	r3, lr
 80151c6:	469e      	mov	lr, r3
 80151c8:	460d      	mov	r5, r1
 80151ca:	4565      	cmp	r5, ip
 80151cc:	d30e      	bcc.n	80151ec <__mdiff+0xe8>
 80151ce:	f10c 0203 	add.w	r2, ip, #3
 80151d2:	1a52      	subs	r2, r2, r1
 80151d4:	f022 0203 	bic.w	r2, r2, #3
 80151d8:	3903      	subs	r1, #3
 80151da:	458c      	cmp	ip, r1
 80151dc:	bf38      	it	cc
 80151de:	2200      	movcc	r2, #0
 80151e0:	441a      	add	r2, r3
 80151e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80151e6:	b17b      	cbz	r3, 8015208 <__mdiff+0x104>
 80151e8:	6106      	str	r6, [r0, #16]
 80151ea:	e7a5      	b.n	8015138 <__mdiff+0x34>
 80151ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80151f0:	fa17 f488 	uxtah	r4, r7, r8
 80151f4:	1422      	asrs	r2, r4, #16
 80151f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80151fa:	b2a4      	uxth	r4, r4
 80151fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015200:	f84e 4b04 	str.w	r4, [lr], #4
 8015204:	1417      	asrs	r7, r2, #16
 8015206:	e7e0      	b.n	80151ca <__mdiff+0xc6>
 8015208:	3e01      	subs	r6, #1
 801520a:	e7ea      	b.n	80151e2 <__mdiff+0xde>
 801520c:	08015f5f 	.word	0x08015f5f
 8015210:	08015f70 	.word	0x08015f70

08015214 <__d2b>:
 8015214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015218:	4689      	mov	r9, r1
 801521a:	2101      	movs	r1, #1
 801521c:	ec57 6b10 	vmov	r6, r7, d0
 8015220:	4690      	mov	r8, r2
 8015222:	f7ff fcd5 	bl	8014bd0 <_Balloc>
 8015226:	4604      	mov	r4, r0
 8015228:	b930      	cbnz	r0, 8015238 <__d2b+0x24>
 801522a:	4602      	mov	r2, r0
 801522c:	4b25      	ldr	r3, [pc, #148]	; (80152c4 <__d2b+0xb0>)
 801522e:	4826      	ldr	r0, [pc, #152]	; (80152c8 <__d2b+0xb4>)
 8015230:	f240 310a 	movw	r1, #778	; 0x30a
 8015234:	f000 f85a 	bl	80152ec <__assert_func>
 8015238:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801523c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015240:	bb35      	cbnz	r5, 8015290 <__d2b+0x7c>
 8015242:	2e00      	cmp	r6, #0
 8015244:	9301      	str	r3, [sp, #4]
 8015246:	d028      	beq.n	801529a <__d2b+0x86>
 8015248:	4668      	mov	r0, sp
 801524a:	9600      	str	r6, [sp, #0]
 801524c:	f7ff fd8c 	bl	8014d68 <__lo0bits>
 8015250:	9900      	ldr	r1, [sp, #0]
 8015252:	b300      	cbz	r0, 8015296 <__d2b+0x82>
 8015254:	9a01      	ldr	r2, [sp, #4]
 8015256:	f1c0 0320 	rsb	r3, r0, #32
 801525a:	fa02 f303 	lsl.w	r3, r2, r3
 801525e:	430b      	orrs	r3, r1
 8015260:	40c2      	lsrs	r2, r0
 8015262:	6163      	str	r3, [r4, #20]
 8015264:	9201      	str	r2, [sp, #4]
 8015266:	9b01      	ldr	r3, [sp, #4]
 8015268:	61a3      	str	r3, [r4, #24]
 801526a:	2b00      	cmp	r3, #0
 801526c:	bf14      	ite	ne
 801526e:	2202      	movne	r2, #2
 8015270:	2201      	moveq	r2, #1
 8015272:	6122      	str	r2, [r4, #16]
 8015274:	b1d5      	cbz	r5, 80152ac <__d2b+0x98>
 8015276:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801527a:	4405      	add	r5, r0
 801527c:	f8c9 5000 	str.w	r5, [r9]
 8015280:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015284:	f8c8 0000 	str.w	r0, [r8]
 8015288:	4620      	mov	r0, r4
 801528a:	b003      	add	sp, #12
 801528c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015294:	e7d5      	b.n	8015242 <__d2b+0x2e>
 8015296:	6161      	str	r1, [r4, #20]
 8015298:	e7e5      	b.n	8015266 <__d2b+0x52>
 801529a:	a801      	add	r0, sp, #4
 801529c:	f7ff fd64 	bl	8014d68 <__lo0bits>
 80152a0:	9b01      	ldr	r3, [sp, #4]
 80152a2:	6163      	str	r3, [r4, #20]
 80152a4:	2201      	movs	r2, #1
 80152a6:	6122      	str	r2, [r4, #16]
 80152a8:	3020      	adds	r0, #32
 80152aa:	e7e3      	b.n	8015274 <__d2b+0x60>
 80152ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80152b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80152b4:	f8c9 0000 	str.w	r0, [r9]
 80152b8:	6918      	ldr	r0, [r3, #16]
 80152ba:	f7ff fd35 	bl	8014d28 <__hi0bits>
 80152be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80152c2:	e7df      	b.n	8015284 <__d2b+0x70>
 80152c4:	08015f5f 	.word	0x08015f5f
 80152c8:	08015f70 	.word	0x08015f70

080152cc <_calloc_r>:
 80152cc:	b513      	push	{r0, r1, r4, lr}
 80152ce:	434a      	muls	r2, r1
 80152d0:	4611      	mov	r1, r2
 80152d2:	9201      	str	r2, [sp, #4]
 80152d4:	f7fe f9a2 	bl	801361c <_malloc_r>
 80152d8:	4604      	mov	r4, r0
 80152da:	b118      	cbz	r0, 80152e4 <_calloc_r+0x18>
 80152dc:	9a01      	ldr	r2, [sp, #4]
 80152de:	2100      	movs	r1, #0
 80152e0:	f7fe f944 	bl	801356c <memset>
 80152e4:	4620      	mov	r0, r4
 80152e6:	b002      	add	sp, #8
 80152e8:	bd10      	pop	{r4, pc}
	...

080152ec <__assert_func>:
 80152ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152ee:	4614      	mov	r4, r2
 80152f0:	461a      	mov	r2, r3
 80152f2:	4b09      	ldr	r3, [pc, #36]	; (8015318 <__assert_func+0x2c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	4605      	mov	r5, r0
 80152f8:	68d8      	ldr	r0, [r3, #12]
 80152fa:	b14c      	cbz	r4, 8015310 <__assert_func+0x24>
 80152fc:	4b07      	ldr	r3, [pc, #28]	; (801531c <__assert_func+0x30>)
 80152fe:	9100      	str	r1, [sp, #0]
 8015300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015304:	4906      	ldr	r1, [pc, #24]	; (8015320 <__assert_func+0x34>)
 8015306:	462b      	mov	r3, r5
 8015308:	f000 f80e 	bl	8015328 <fiprintf>
 801530c:	f000 fa5a 	bl	80157c4 <abort>
 8015310:	4b04      	ldr	r3, [pc, #16]	; (8015324 <__assert_func+0x38>)
 8015312:	461c      	mov	r4, r3
 8015314:	e7f3      	b.n	80152fe <__assert_func+0x12>
 8015316:	bf00      	nop
 8015318:	24000184 	.word	0x24000184
 801531c:	080160cc 	.word	0x080160cc
 8015320:	080160d9 	.word	0x080160d9
 8015324:	08016107 	.word	0x08016107

08015328 <fiprintf>:
 8015328:	b40e      	push	{r1, r2, r3}
 801532a:	b503      	push	{r0, r1, lr}
 801532c:	4601      	mov	r1, r0
 801532e:	ab03      	add	r3, sp, #12
 8015330:	4805      	ldr	r0, [pc, #20]	; (8015348 <fiprintf+0x20>)
 8015332:	f853 2b04 	ldr.w	r2, [r3], #4
 8015336:	6800      	ldr	r0, [r0, #0]
 8015338:	9301      	str	r3, [sp, #4]
 801533a:	f000 f845 	bl	80153c8 <_vfiprintf_r>
 801533e:	b002      	add	sp, #8
 8015340:	f85d eb04 	ldr.w	lr, [sp], #4
 8015344:	b003      	add	sp, #12
 8015346:	4770      	bx	lr
 8015348:	24000184 	.word	0x24000184

0801534c <__retarget_lock_init_recursive>:
 801534c:	4770      	bx	lr

0801534e <__retarget_lock_acquire_recursive>:
 801534e:	4770      	bx	lr

08015350 <__retarget_lock_release_recursive>:
 8015350:	4770      	bx	lr

08015352 <__ascii_mbtowc>:
 8015352:	b082      	sub	sp, #8
 8015354:	b901      	cbnz	r1, 8015358 <__ascii_mbtowc+0x6>
 8015356:	a901      	add	r1, sp, #4
 8015358:	b142      	cbz	r2, 801536c <__ascii_mbtowc+0x1a>
 801535a:	b14b      	cbz	r3, 8015370 <__ascii_mbtowc+0x1e>
 801535c:	7813      	ldrb	r3, [r2, #0]
 801535e:	600b      	str	r3, [r1, #0]
 8015360:	7812      	ldrb	r2, [r2, #0]
 8015362:	1e10      	subs	r0, r2, #0
 8015364:	bf18      	it	ne
 8015366:	2001      	movne	r0, #1
 8015368:	b002      	add	sp, #8
 801536a:	4770      	bx	lr
 801536c:	4610      	mov	r0, r2
 801536e:	e7fb      	b.n	8015368 <__ascii_mbtowc+0x16>
 8015370:	f06f 0001 	mvn.w	r0, #1
 8015374:	e7f8      	b.n	8015368 <__ascii_mbtowc+0x16>

08015376 <__sfputc_r>:
 8015376:	6893      	ldr	r3, [r2, #8]
 8015378:	3b01      	subs	r3, #1
 801537a:	2b00      	cmp	r3, #0
 801537c:	b410      	push	{r4}
 801537e:	6093      	str	r3, [r2, #8]
 8015380:	da08      	bge.n	8015394 <__sfputc_r+0x1e>
 8015382:	6994      	ldr	r4, [r2, #24]
 8015384:	42a3      	cmp	r3, r4
 8015386:	db01      	blt.n	801538c <__sfputc_r+0x16>
 8015388:	290a      	cmp	r1, #10
 801538a:	d103      	bne.n	8015394 <__sfputc_r+0x1e>
 801538c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015390:	f000 b94a 	b.w	8015628 <__swbuf_r>
 8015394:	6813      	ldr	r3, [r2, #0]
 8015396:	1c58      	adds	r0, r3, #1
 8015398:	6010      	str	r0, [r2, #0]
 801539a:	7019      	strb	r1, [r3, #0]
 801539c:	4608      	mov	r0, r1
 801539e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153a2:	4770      	bx	lr

080153a4 <__sfputs_r>:
 80153a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153a6:	4606      	mov	r6, r0
 80153a8:	460f      	mov	r7, r1
 80153aa:	4614      	mov	r4, r2
 80153ac:	18d5      	adds	r5, r2, r3
 80153ae:	42ac      	cmp	r4, r5
 80153b0:	d101      	bne.n	80153b6 <__sfputs_r+0x12>
 80153b2:	2000      	movs	r0, #0
 80153b4:	e007      	b.n	80153c6 <__sfputs_r+0x22>
 80153b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153ba:	463a      	mov	r2, r7
 80153bc:	4630      	mov	r0, r6
 80153be:	f7ff ffda 	bl	8015376 <__sfputc_r>
 80153c2:	1c43      	adds	r3, r0, #1
 80153c4:	d1f3      	bne.n	80153ae <__sfputs_r+0xa>
 80153c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080153c8 <_vfiprintf_r>:
 80153c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153cc:	460d      	mov	r5, r1
 80153ce:	b09d      	sub	sp, #116	; 0x74
 80153d0:	4614      	mov	r4, r2
 80153d2:	4698      	mov	r8, r3
 80153d4:	4606      	mov	r6, r0
 80153d6:	b118      	cbz	r0, 80153e0 <_vfiprintf_r+0x18>
 80153d8:	6983      	ldr	r3, [r0, #24]
 80153da:	b90b      	cbnz	r3, 80153e0 <_vfiprintf_r+0x18>
 80153dc:	f000 fb14 	bl	8015a08 <__sinit>
 80153e0:	4b89      	ldr	r3, [pc, #548]	; (8015608 <_vfiprintf_r+0x240>)
 80153e2:	429d      	cmp	r5, r3
 80153e4:	d11b      	bne.n	801541e <_vfiprintf_r+0x56>
 80153e6:	6875      	ldr	r5, [r6, #4]
 80153e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80153ea:	07d9      	lsls	r1, r3, #31
 80153ec:	d405      	bmi.n	80153fa <_vfiprintf_r+0x32>
 80153ee:	89ab      	ldrh	r3, [r5, #12]
 80153f0:	059a      	lsls	r2, r3, #22
 80153f2:	d402      	bmi.n	80153fa <_vfiprintf_r+0x32>
 80153f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80153f6:	f7ff ffaa 	bl	801534e <__retarget_lock_acquire_recursive>
 80153fa:	89ab      	ldrh	r3, [r5, #12]
 80153fc:	071b      	lsls	r3, r3, #28
 80153fe:	d501      	bpl.n	8015404 <_vfiprintf_r+0x3c>
 8015400:	692b      	ldr	r3, [r5, #16]
 8015402:	b9eb      	cbnz	r3, 8015440 <_vfiprintf_r+0x78>
 8015404:	4629      	mov	r1, r5
 8015406:	4630      	mov	r0, r6
 8015408:	f000 f96e 	bl	80156e8 <__swsetup_r>
 801540c:	b1c0      	cbz	r0, 8015440 <_vfiprintf_r+0x78>
 801540e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015410:	07dc      	lsls	r4, r3, #31
 8015412:	d50e      	bpl.n	8015432 <_vfiprintf_r+0x6a>
 8015414:	f04f 30ff 	mov.w	r0, #4294967295
 8015418:	b01d      	add	sp, #116	; 0x74
 801541a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801541e:	4b7b      	ldr	r3, [pc, #492]	; (801560c <_vfiprintf_r+0x244>)
 8015420:	429d      	cmp	r5, r3
 8015422:	d101      	bne.n	8015428 <_vfiprintf_r+0x60>
 8015424:	68b5      	ldr	r5, [r6, #8]
 8015426:	e7df      	b.n	80153e8 <_vfiprintf_r+0x20>
 8015428:	4b79      	ldr	r3, [pc, #484]	; (8015610 <_vfiprintf_r+0x248>)
 801542a:	429d      	cmp	r5, r3
 801542c:	bf08      	it	eq
 801542e:	68f5      	ldreq	r5, [r6, #12]
 8015430:	e7da      	b.n	80153e8 <_vfiprintf_r+0x20>
 8015432:	89ab      	ldrh	r3, [r5, #12]
 8015434:	0598      	lsls	r0, r3, #22
 8015436:	d4ed      	bmi.n	8015414 <_vfiprintf_r+0x4c>
 8015438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801543a:	f7ff ff89 	bl	8015350 <__retarget_lock_release_recursive>
 801543e:	e7e9      	b.n	8015414 <_vfiprintf_r+0x4c>
 8015440:	2300      	movs	r3, #0
 8015442:	9309      	str	r3, [sp, #36]	; 0x24
 8015444:	2320      	movs	r3, #32
 8015446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801544a:	f8cd 800c 	str.w	r8, [sp, #12]
 801544e:	2330      	movs	r3, #48	; 0x30
 8015450:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015614 <_vfiprintf_r+0x24c>
 8015454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015458:	f04f 0901 	mov.w	r9, #1
 801545c:	4623      	mov	r3, r4
 801545e:	469a      	mov	sl, r3
 8015460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015464:	b10a      	cbz	r2, 801546a <_vfiprintf_r+0xa2>
 8015466:	2a25      	cmp	r2, #37	; 0x25
 8015468:	d1f9      	bne.n	801545e <_vfiprintf_r+0x96>
 801546a:	ebba 0b04 	subs.w	fp, sl, r4
 801546e:	d00b      	beq.n	8015488 <_vfiprintf_r+0xc0>
 8015470:	465b      	mov	r3, fp
 8015472:	4622      	mov	r2, r4
 8015474:	4629      	mov	r1, r5
 8015476:	4630      	mov	r0, r6
 8015478:	f7ff ff94 	bl	80153a4 <__sfputs_r>
 801547c:	3001      	adds	r0, #1
 801547e:	f000 80aa 	beq.w	80155d6 <_vfiprintf_r+0x20e>
 8015482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015484:	445a      	add	r2, fp
 8015486:	9209      	str	r2, [sp, #36]	; 0x24
 8015488:	f89a 3000 	ldrb.w	r3, [sl]
 801548c:	2b00      	cmp	r3, #0
 801548e:	f000 80a2 	beq.w	80155d6 <_vfiprintf_r+0x20e>
 8015492:	2300      	movs	r3, #0
 8015494:	f04f 32ff 	mov.w	r2, #4294967295
 8015498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801549c:	f10a 0a01 	add.w	sl, sl, #1
 80154a0:	9304      	str	r3, [sp, #16]
 80154a2:	9307      	str	r3, [sp, #28]
 80154a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154a8:	931a      	str	r3, [sp, #104]	; 0x68
 80154aa:	4654      	mov	r4, sl
 80154ac:	2205      	movs	r2, #5
 80154ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154b2:	4858      	ldr	r0, [pc, #352]	; (8015614 <_vfiprintf_r+0x24c>)
 80154b4:	f7ea ff1c 	bl	80002f0 <memchr>
 80154b8:	9a04      	ldr	r2, [sp, #16]
 80154ba:	b9d8      	cbnz	r0, 80154f4 <_vfiprintf_r+0x12c>
 80154bc:	06d1      	lsls	r1, r2, #27
 80154be:	bf44      	itt	mi
 80154c0:	2320      	movmi	r3, #32
 80154c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154c6:	0713      	lsls	r3, r2, #28
 80154c8:	bf44      	itt	mi
 80154ca:	232b      	movmi	r3, #43	; 0x2b
 80154cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154d0:	f89a 3000 	ldrb.w	r3, [sl]
 80154d4:	2b2a      	cmp	r3, #42	; 0x2a
 80154d6:	d015      	beq.n	8015504 <_vfiprintf_r+0x13c>
 80154d8:	9a07      	ldr	r2, [sp, #28]
 80154da:	4654      	mov	r4, sl
 80154dc:	2000      	movs	r0, #0
 80154de:	f04f 0c0a 	mov.w	ip, #10
 80154e2:	4621      	mov	r1, r4
 80154e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154e8:	3b30      	subs	r3, #48	; 0x30
 80154ea:	2b09      	cmp	r3, #9
 80154ec:	d94e      	bls.n	801558c <_vfiprintf_r+0x1c4>
 80154ee:	b1b0      	cbz	r0, 801551e <_vfiprintf_r+0x156>
 80154f0:	9207      	str	r2, [sp, #28]
 80154f2:	e014      	b.n	801551e <_vfiprintf_r+0x156>
 80154f4:	eba0 0308 	sub.w	r3, r0, r8
 80154f8:	fa09 f303 	lsl.w	r3, r9, r3
 80154fc:	4313      	orrs	r3, r2
 80154fe:	9304      	str	r3, [sp, #16]
 8015500:	46a2      	mov	sl, r4
 8015502:	e7d2      	b.n	80154aa <_vfiprintf_r+0xe2>
 8015504:	9b03      	ldr	r3, [sp, #12]
 8015506:	1d19      	adds	r1, r3, #4
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	9103      	str	r1, [sp, #12]
 801550c:	2b00      	cmp	r3, #0
 801550e:	bfbb      	ittet	lt
 8015510:	425b      	neglt	r3, r3
 8015512:	f042 0202 	orrlt.w	r2, r2, #2
 8015516:	9307      	strge	r3, [sp, #28]
 8015518:	9307      	strlt	r3, [sp, #28]
 801551a:	bfb8      	it	lt
 801551c:	9204      	strlt	r2, [sp, #16]
 801551e:	7823      	ldrb	r3, [r4, #0]
 8015520:	2b2e      	cmp	r3, #46	; 0x2e
 8015522:	d10c      	bne.n	801553e <_vfiprintf_r+0x176>
 8015524:	7863      	ldrb	r3, [r4, #1]
 8015526:	2b2a      	cmp	r3, #42	; 0x2a
 8015528:	d135      	bne.n	8015596 <_vfiprintf_r+0x1ce>
 801552a:	9b03      	ldr	r3, [sp, #12]
 801552c:	1d1a      	adds	r2, r3, #4
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	9203      	str	r2, [sp, #12]
 8015532:	2b00      	cmp	r3, #0
 8015534:	bfb8      	it	lt
 8015536:	f04f 33ff 	movlt.w	r3, #4294967295
 801553a:	3402      	adds	r4, #2
 801553c:	9305      	str	r3, [sp, #20]
 801553e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015624 <_vfiprintf_r+0x25c>
 8015542:	7821      	ldrb	r1, [r4, #0]
 8015544:	2203      	movs	r2, #3
 8015546:	4650      	mov	r0, sl
 8015548:	f7ea fed2 	bl	80002f0 <memchr>
 801554c:	b140      	cbz	r0, 8015560 <_vfiprintf_r+0x198>
 801554e:	2340      	movs	r3, #64	; 0x40
 8015550:	eba0 000a 	sub.w	r0, r0, sl
 8015554:	fa03 f000 	lsl.w	r0, r3, r0
 8015558:	9b04      	ldr	r3, [sp, #16]
 801555a:	4303      	orrs	r3, r0
 801555c:	3401      	adds	r4, #1
 801555e:	9304      	str	r3, [sp, #16]
 8015560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015564:	482c      	ldr	r0, [pc, #176]	; (8015618 <_vfiprintf_r+0x250>)
 8015566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801556a:	2206      	movs	r2, #6
 801556c:	f7ea fec0 	bl	80002f0 <memchr>
 8015570:	2800      	cmp	r0, #0
 8015572:	d03f      	beq.n	80155f4 <_vfiprintf_r+0x22c>
 8015574:	4b29      	ldr	r3, [pc, #164]	; (801561c <_vfiprintf_r+0x254>)
 8015576:	bb1b      	cbnz	r3, 80155c0 <_vfiprintf_r+0x1f8>
 8015578:	9b03      	ldr	r3, [sp, #12]
 801557a:	3307      	adds	r3, #7
 801557c:	f023 0307 	bic.w	r3, r3, #7
 8015580:	3308      	adds	r3, #8
 8015582:	9303      	str	r3, [sp, #12]
 8015584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015586:	443b      	add	r3, r7
 8015588:	9309      	str	r3, [sp, #36]	; 0x24
 801558a:	e767      	b.n	801545c <_vfiprintf_r+0x94>
 801558c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015590:	460c      	mov	r4, r1
 8015592:	2001      	movs	r0, #1
 8015594:	e7a5      	b.n	80154e2 <_vfiprintf_r+0x11a>
 8015596:	2300      	movs	r3, #0
 8015598:	3401      	adds	r4, #1
 801559a:	9305      	str	r3, [sp, #20]
 801559c:	4619      	mov	r1, r3
 801559e:	f04f 0c0a 	mov.w	ip, #10
 80155a2:	4620      	mov	r0, r4
 80155a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155a8:	3a30      	subs	r2, #48	; 0x30
 80155aa:	2a09      	cmp	r2, #9
 80155ac:	d903      	bls.n	80155b6 <_vfiprintf_r+0x1ee>
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d0c5      	beq.n	801553e <_vfiprintf_r+0x176>
 80155b2:	9105      	str	r1, [sp, #20]
 80155b4:	e7c3      	b.n	801553e <_vfiprintf_r+0x176>
 80155b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80155ba:	4604      	mov	r4, r0
 80155bc:	2301      	movs	r3, #1
 80155be:	e7f0      	b.n	80155a2 <_vfiprintf_r+0x1da>
 80155c0:	ab03      	add	r3, sp, #12
 80155c2:	9300      	str	r3, [sp, #0]
 80155c4:	462a      	mov	r2, r5
 80155c6:	4b16      	ldr	r3, [pc, #88]	; (8015620 <_vfiprintf_r+0x258>)
 80155c8:	a904      	add	r1, sp, #16
 80155ca:	4630      	mov	r0, r6
 80155cc:	f7fe f910 	bl	80137f0 <_printf_float>
 80155d0:	4607      	mov	r7, r0
 80155d2:	1c78      	adds	r0, r7, #1
 80155d4:	d1d6      	bne.n	8015584 <_vfiprintf_r+0x1bc>
 80155d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155d8:	07d9      	lsls	r1, r3, #31
 80155da:	d405      	bmi.n	80155e8 <_vfiprintf_r+0x220>
 80155dc:	89ab      	ldrh	r3, [r5, #12]
 80155de:	059a      	lsls	r2, r3, #22
 80155e0:	d402      	bmi.n	80155e8 <_vfiprintf_r+0x220>
 80155e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155e4:	f7ff feb4 	bl	8015350 <__retarget_lock_release_recursive>
 80155e8:	89ab      	ldrh	r3, [r5, #12]
 80155ea:	065b      	lsls	r3, r3, #25
 80155ec:	f53f af12 	bmi.w	8015414 <_vfiprintf_r+0x4c>
 80155f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155f2:	e711      	b.n	8015418 <_vfiprintf_r+0x50>
 80155f4:	ab03      	add	r3, sp, #12
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	462a      	mov	r2, r5
 80155fa:	4b09      	ldr	r3, [pc, #36]	; (8015620 <_vfiprintf_r+0x258>)
 80155fc:	a904      	add	r1, sp, #16
 80155fe:	4630      	mov	r0, r6
 8015600:	f7fe fb82 	bl	8013d08 <_printf_i>
 8015604:	e7e4      	b.n	80155d0 <_vfiprintf_r+0x208>
 8015606:	bf00      	nop
 8015608:	08016244 	.word	0x08016244
 801560c:	08016264 	.word	0x08016264
 8015610:	08016224 	.word	0x08016224
 8015614:	08016112 	.word	0x08016112
 8015618:	0801611c 	.word	0x0801611c
 801561c:	080137f1 	.word	0x080137f1
 8015620:	080153a5 	.word	0x080153a5
 8015624:	08016118 	.word	0x08016118

08015628 <__swbuf_r>:
 8015628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801562a:	460e      	mov	r6, r1
 801562c:	4614      	mov	r4, r2
 801562e:	4605      	mov	r5, r0
 8015630:	b118      	cbz	r0, 801563a <__swbuf_r+0x12>
 8015632:	6983      	ldr	r3, [r0, #24]
 8015634:	b90b      	cbnz	r3, 801563a <__swbuf_r+0x12>
 8015636:	f000 f9e7 	bl	8015a08 <__sinit>
 801563a:	4b21      	ldr	r3, [pc, #132]	; (80156c0 <__swbuf_r+0x98>)
 801563c:	429c      	cmp	r4, r3
 801563e:	d12b      	bne.n	8015698 <__swbuf_r+0x70>
 8015640:	686c      	ldr	r4, [r5, #4]
 8015642:	69a3      	ldr	r3, [r4, #24]
 8015644:	60a3      	str	r3, [r4, #8]
 8015646:	89a3      	ldrh	r3, [r4, #12]
 8015648:	071a      	lsls	r2, r3, #28
 801564a:	d52f      	bpl.n	80156ac <__swbuf_r+0x84>
 801564c:	6923      	ldr	r3, [r4, #16]
 801564e:	b36b      	cbz	r3, 80156ac <__swbuf_r+0x84>
 8015650:	6923      	ldr	r3, [r4, #16]
 8015652:	6820      	ldr	r0, [r4, #0]
 8015654:	1ac0      	subs	r0, r0, r3
 8015656:	6963      	ldr	r3, [r4, #20]
 8015658:	b2f6      	uxtb	r6, r6
 801565a:	4283      	cmp	r3, r0
 801565c:	4637      	mov	r7, r6
 801565e:	dc04      	bgt.n	801566a <__swbuf_r+0x42>
 8015660:	4621      	mov	r1, r4
 8015662:	4628      	mov	r0, r5
 8015664:	f000 f93c 	bl	80158e0 <_fflush_r>
 8015668:	bb30      	cbnz	r0, 80156b8 <__swbuf_r+0x90>
 801566a:	68a3      	ldr	r3, [r4, #8]
 801566c:	3b01      	subs	r3, #1
 801566e:	60a3      	str	r3, [r4, #8]
 8015670:	6823      	ldr	r3, [r4, #0]
 8015672:	1c5a      	adds	r2, r3, #1
 8015674:	6022      	str	r2, [r4, #0]
 8015676:	701e      	strb	r6, [r3, #0]
 8015678:	6963      	ldr	r3, [r4, #20]
 801567a:	3001      	adds	r0, #1
 801567c:	4283      	cmp	r3, r0
 801567e:	d004      	beq.n	801568a <__swbuf_r+0x62>
 8015680:	89a3      	ldrh	r3, [r4, #12]
 8015682:	07db      	lsls	r3, r3, #31
 8015684:	d506      	bpl.n	8015694 <__swbuf_r+0x6c>
 8015686:	2e0a      	cmp	r6, #10
 8015688:	d104      	bne.n	8015694 <__swbuf_r+0x6c>
 801568a:	4621      	mov	r1, r4
 801568c:	4628      	mov	r0, r5
 801568e:	f000 f927 	bl	80158e0 <_fflush_r>
 8015692:	b988      	cbnz	r0, 80156b8 <__swbuf_r+0x90>
 8015694:	4638      	mov	r0, r7
 8015696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015698:	4b0a      	ldr	r3, [pc, #40]	; (80156c4 <__swbuf_r+0x9c>)
 801569a:	429c      	cmp	r4, r3
 801569c:	d101      	bne.n	80156a2 <__swbuf_r+0x7a>
 801569e:	68ac      	ldr	r4, [r5, #8]
 80156a0:	e7cf      	b.n	8015642 <__swbuf_r+0x1a>
 80156a2:	4b09      	ldr	r3, [pc, #36]	; (80156c8 <__swbuf_r+0xa0>)
 80156a4:	429c      	cmp	r4, r3
 80156a6:	bf08      	it	eq
 80156a8:	68ec      	ldreq	r4, [r5, #12]
 80156aa:	e7ca      	b.n	8015642 <__swbuf_r+0x1a>
 80156ac:	4621      	mov	r1, r4
 80156ae:	4628      	mov	r0, r5
 80156b0:	f000 f81a 	bl	80156e8 <__swsetup_r>
 80156b4:	2800      	cmp	r0, #0
 80156b6:	d0cb      	beq.n	8015650 <__swbuf_r+0x28>
 80156b8:	f04f 37ff 	mov.w	r7, #4294967295
 80156bc:	e7ea      	b.n	8015694 <__swbuf_r+0x6c>
 80156be:	bf00      	nop
 80156c0:	08016244 	.word	0x08016244
 80156c4:	08016264 	.word	0x08016264
 80156c8:	08016224 	.word	0x08016224

080156cc <__ascii_wctomb>:
 80156cc:	b149      	cbz	r1, 80156e2 <__ascii_wctomb+0x16>
 80156ce:	2aff      	cmp	r2, #255	; 0xff
 80156d0:	bf85      	ittet	hi
 80156d2:	238a      	movhi	r3, #138	; 0x8a
 80156d4:	6003      	strhi	r3, [r0, #0]
 80156d6:	700a      	strbls	r2, [r1, #0]
 80156d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80156dc:	bf98      	it	ls
 80156de:	2001      	movls	r0, #1
 80156e0:	4770      	bx	lr
 80156e2:	4608      	mov	r0, r1
 80156e4:	4770      	bx	lr
	...

080156e8 <__swsetup_r>:
 80156e8:	4b32      	ldr	r3, [pc, #200]	; (80157b4 <__swsetup_r+0xcc>)
 80156ea:	b570      	push	{r4, r5, r6, lr}
 80156ec:	681d      	ldr	r5, [r3, #0]
 80156ee:	4606      	mov	r6, r0
 80156f0:	460c      	mov	r4, r1
 80156f2:	b125      	cbz	r5, 80156fe <__swsetup_r+0x16>
 80156f4:	69ab      	ldr	r3, [r5, #24]
 80156f6:	b913      	cbnz	r3, 80156fe <__swsetup_r+0x16>
 80156f8:	4628      	mov	r0, r5
 80156fa:	f000 f985 	bl	8015a08 <__sinit>
 80156fe:	4b2e      	ldr	r3, [pc, #184]	; (80157b8 <__swsetup_r+0xd0>)
 8015700:	429c      	cmp	r4, r3
 8015702:	d10f      	bne.n	8015724 <__swsetup_r+0x3c>
 8015704:	686c      	ldr	r4, [r5, #4]
 8015706:	89a3      	ldrh	r3, [r4, #12]
 8015708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801570c:	0719      	lsls	r1, r3, #28
 801570e:	d42c      	bmi.n	801576a <__swsetup_r+0x82>
 8015710:	06dd      	lsls	r5, r3, #27
 8015712:	d411      	bmi.n	8015738 <__swsetup_r+0x50>
 8015714:	2309      	movs	r3, #9
 8015716:	6033      	str	r3, [r6, #0]
 8015718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801571c:	81a3      	strh	r3, [r4, #12]
 801571e:	f04f 30ff 	mov.w	r0, #4294967295
 8015722:	e03e      	b.n	80157a2 <__swsetup_r+0xba>
 8015724:	4b25      	ldr	r3, [pc, #148]	; (80157bc <__swsetup_r+0xd4>)
 8015726:	429c      	cmp	r4, r3
 8015728:	d101      	bne.n	801572e <__swsetup_r+0x46>
 801572a:	68ac      	ldr	r4, [r5, #8]
 801572c:	e7eb      	b.n	8015706 <__swsetup_r+0x1e>
 801572e:	4b24      	ldr	r3, [pc, #144]	; (80157c0 <__swsetup_r+0xd8>)
 8015730:	429c      	cmp	r4, r3
 8015732:	bf08      	it	eq
 8015734:	68ec      	ldreq	r4, [r5, #12]
 8015736:	e7e6      	b.n	8015706 <__swsetup_r+0x1e>
 8015738:	0758      	lsls	r0, r3, #29
 801573a:	d512      	bpl.n	8015762 <__swsetup_r+0x7a>
 801573c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801573e:	b141      	cbz	r1, 8015752 <__swsetup_r+0x6a>
 8015740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015744:	4299      	cmp	r1, r3
 8015746:	d002      	beq.n	801574e <__swsetup_r+0x66>
 8015748:	4630      	mov	r0, r6
 801574a:	f7fd ff17 	bl	801357c <_free_r>
 801574e:	2300      	movs	r3, #0
 8015750:	6363      	str	r3, [r4, #52]	; 0x34
 8015752:	89a3      	ldrh	r3, [r4, #12]
 8015754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015758:	81a3      	strh	r3, [r4, #12]
 801575a:	2300      	movs	r3, #0
 801575c:	6063      	str	r3, [r4, #4]
 801575e:	6923      	ldr	r3, [r4, #16]
 8015760:	6023      	str	r3, [r4, #0]
 8015762:	89a3      	ldrh	r3, [r4, #12]
 8015764:	f043 0308 	orr.w	r3, r3, #8
 8015768:	81a3      	strh	r3, [r4, #12]
 801576a:	6923      	ldr	r3, [r4, #16]
 801576c:	b94b      	cbnz	r3, 8015782 <__swsetup_r+0x9a>
 801576e:	89a3      	ldrh	r3, [r4, #12]
 8015770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015778:	d003      	beq.n	8015782 <__swsetup_r+0x9a>
 801577a:	4621      	mov	r1, r4
 801577c:	4630      	mov	r0, r6
 801577e:	f000 fa05 	bl	8015b8c <__smakebuf_r>
 8015782:	89a0      	ldrh	r0, [r4, #12]
 8015784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015788:	f010 0301 	ands.w	r3, r0, #1
 801578c:	d00a      	beq.n	80157a4 <__swsetup_r+0xbc>
 801578e:	2300      	movs	r3, #0
 8015790:	60a3      	str	r3, [r4, #8]
 8015792:	6963      	ldr	r3, [r4, #20]
 8015794:	425b      	negs	r3, r3
 8015796:	61a3      	str	r3, [r4, #24]
 8015798:	6923      	ldr	r3, [r4, #16]
 801579a:	b943      	cbnz	r3, 80157ae <__swsetup_r+0xc6>
 801579c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80157a0:	d1ba      	bne.n	8015718 <__swsetup_r+0x30>
 80157a2:	bd70      	pop	{r4, r5, r6, pc}
 80157a4:	0781      	lsls	r1, r0, #30
 80157a6:	bf58      	it	pl
 80157a8:	6963      	ldrpl	r3, [r4, #20]
 80157aa:	60a3      	str	r3, [r4, #8]
 80157ac:	e7f4      	b.n	8015798 <__swsetup_r+0xb0>
 80157ae:	2000      	movs	r0, #0
 80157b0:	e7f7      	b.n	80157a2 <__swsetup_r+0xba>
 80157b2:	bf00      	nop
 80157b4:	24000184 	.word	0x24000184
 80157b8:	08016244 	.word	0x08016244
 80157bc:	08016264 	.word	0x08016264
 80157c0:	08016224 	.word	0x08016224

080157c4 <abort>:
 80157c4:	b508      	push	{r3, lr}
 80157c6:	2006      	movs	r0, #6
 80157c8:	f000 fa48 	bl	8015c5c <raise>
 80157cc:	2001      	movs	r0, #1
 80157ce:	f7eb fe2b 	bl	8001428 <_exit>
	...

080157d4 <__sflush_r>:
 80157d4:	898a      	ldrh	r2, [r1, #12]
 80157d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157da:	4605      	mov	r5, r0
 80157dc:	0710      	lsls	r0, r2, #28
 80157de:	460c      	mov	r4, r1
 80157e0:	d458      	bmi.n	8015894 <__sflush_r+0xc0>
 80157e2:	684b      	ldr	r3, [r1, #4]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	dc05      	bgt.n	80157f4 <__sflush_r+0x20>
 80157e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	dc02      	bgt.n	80157f4 <__sflush_r+0x20>
 80157ee:	2000      	movs	r0, #0
 80157f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157f6:	2e00      	cmp	r6, #0
 80157f8:	d0f9      	beq.n	80157ee <__sflush_r+0x1a>
 80157fa:	2300      	movs	r3, #0
 80157fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015800:	682f      	ldr	r7, [r5, #0]
 8015802:	602b      	str	r3, [r5, #0]
 8015804:	d032      	beq.n	801586c <__sflush_r+0x98>
 8015806:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015808:	89a3      	ldrh	r3, [r4, #12]
 801580a:	075a      	lsls	r2, r3, #29
 801580c:	d505      	bpl.n	801581a <__sflush_r+0x46>
 801580e:	6863      	ldr	r3, [r4, #4]
 8015810:	1ac0      	subs	r0, r0, r3
 8015812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015814:	b10b      	cbz	r3, 801581a <__sflush_r+0x46>
 8015816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015818:	1ac0      	subs	r0, r0, r3
 801581a:	2300      	movs	r3, #0
 801581c:	4602      	mov	r2, r0
 801581e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015820:	6a21      	ldr	r1, [r4, #32]
 8015822:	4628      	mov	r0, r5
 8015824:	47b0      	blx	r6
 8015826:	1c43      	adds	r3, r0, #1
 8015828:	89a3      	ldrh	r3, [r4, #12]
 801582a:	d106      	bne.n	801583a <__sflush_r+0x66>
 801582c:	6829      	ldr	r1, [r5, #0]
 801582e:	291d      	cmp	r1, #29
 8015830:	d82c      	bhi.n	801588c <__sflush_r+0xb8>
 8015832:	4a2a      	ldr	r2, [pc, #168]	; (80158dc <__sflush_r+0x108>)
 8015834:	40ca      	lsrs	r2, r1
 8015836:	07d6      	lsls	r6, r2, #31
 8015838:	d528      	bpl.n	801588c <__sflush_r+0xb8>
 801583a:	2200      	movs	r2, #0
 801583c:	6062      	str	r2, [r4, #4]
 801583e:	04d9      	lsls	r1, r3, #19
 8015840:	6922      	ldr	r2, [r4, #16]
 8015842:	6022      	str	r2, [r4, #0]
 8015844:	d504      	bpl.n	8015850 <__sflush_r+0x7c>
 8015846:	1c42      	adds	r2, r0, #1
 8015848:	d101      	bne.n	801584e <__sflush_r+0x7a>
 801584a:	682b      	ldr	r3, [r5, #0]
 801584c:	b903      	cbnz	r3, 8015850 <__sflush_r+0x7c>
 801584e:	6560      	str	r0, [r4, #84]	; 0x54
 8015850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015852:	602f      	str	r7, [r5, #0]
 8015854:	2900      	cmp	r1, #0
 8015856:	d0ca      	beq.n	80157ee <__sflush_r+0x1a>
 8015858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801585c:	4299      	cmp	r1, r3
 801585e:	d002      	beq.n	8015866 <__sflush_r+0x92>
 8015860:	4628      	mov	r0, r5
 8015862:	f7fd fe8b 	bl	801357c <_free_r>
 8015866:	2000      	movs	r0, #0
 8015868:	6360      	str	r0, [r4, #52]	; 0x34
 801586a:	e7c1      	b.n	80157f0 <__sflush_r+0x1c>
 801586c:	6a21      	ldr	r1, [r4, #32]
 801586e:	2301      	movs	r3, #1
 8015870:	4628      	mov	r0, r5
 8015872:	47b0      	blx	r6
 8015874:	1c41      	adds	r1, r0, #1
 8015876:	d1c7      	bne.n	8015808 <__sflush_r+0x34>
 8015878:	682b      	ldr	r3, [r5, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d0c4      	beq.n	8015808 <__sflush_r+0x34>
 801587e:	2b1d      	cmp	r3, #29
 8015880:	d001      	beq.n	8015886 <__sflush_r+0xb2>
 8015882:	2b16      	cmp	r3, #22
 8015884:	d101      	bne.n	801588a <__sflush_r+0xb6>
 8015886:	602f      	str	r7, [r5, #0]
 8015888:	e7b1      	b.n	80157ee <__sflush_r+0x1a>
 801588a:	89a3      	ldrh	r3, [r4, #12]
 801588c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015890:	81a3      	strh	r3, [r4, #12]
 8015892:	e7ad      	b.n	80157f0 <__sflush_r+0x1c>
 8015894:	690f      	ldr	r7, [r1, #16]
 8015896:	2f00      	cmp	r7, #0
 8015898:	d0a9      	beq.n	80157ee <__sflush_r+0x1a>
 801589a:	0793      	lsls	r3, r2, #30
 801589c:	680e      	ldr	r6, [r1, #0]
 801589e:	bf08      	it	eq
 80158a0:	694b      	ldreq	r3, [r1, #20]
 80158a2:	600f      	str	r7, [r1, #0]
 80158a4:	bf18      	it	ne
 80158a6:	2300      	movne	r3, #0
 80158a8:	eba6 0807 	sub.w	r8, r6, r7
 80158ac:	608b      	str	r3, [r1, #8]
 80158ae:	f1b8 0f00 	cmp.w	r8, #0
 80158b2:	dd9c      	ble.n	80157ee <__sflush_r+0x1a>
 80158b4:	6a21      	ldr	r1, [r4, #32]
 80158b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80158b8:	4643      	mov	r3, r8
 80158ba:	463a      	mov	r2, r7
 80158bc:	4628      	mov	r0, r5
 80158be:	47b0      	blx	r6
 80158c0:	2800      	cmp	r0, #0
 80158c2:	dc06      	bgt.n	80158d2 <__sflush_r+0xfe>
 80158c4:	89a3      	ldrh	r3, [r4, #12]
 80158c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158ca:	81a3      	strh	r3, [r4, #12]
 80158cc:	f04f 30ff 	mov.w	r0, #4294967295
 80158d0:	e78e      	b.n	80157f0 <__sflush_r+0x1c>
 80158d2:	4407      	add	r7, r0
 80158d4:	eba8 0800 	sub.w	r8, r8, r0
 80158d8:	e7e9      	b.n	80158ae <__sflush_r+0xda>
 80158da:	bf00      	nop
 80158dc:	20400001 	.word	0x20400001

080158e0 <_fflush_r>:
 80158e0:	b538      	push	{r3, r4, r5, lr}
 80158e2:	690b      	ldr	r3, [r1, #16]
 80158e4:	4605      	mov	r5, r0
 80158e6:	460c      	mov	r4, r1
 80158e8:	b913      	cbnz	r3, 80158f0 <_fflush_r+0x10>
 80158ea:	2500      	movs	r5, #0
 80158ec:	4628      	mov	r0, r5
 80158ee:	bd38      	pop	{r3, r4, r5, pc}
 80158f0:	b118      	cbz	r0, 80158fa <_fflush_r+0x1a>
 80158f2:	6983      	ldr	r3, [r0, #24]
 80158f4:	b90b      	cbnz	r3, 80158fa <_fflush_r+0x1a>
 80158f6:	f000 f887 	bl	8015a08 <__sinit>
 80158fa:	4b14      	ldr	r3, [pc, #80]	; (801594c <_fflush_r+0x6c>)
 80158fc:	429c      	cmp	r4, r3
 80158fe:	d11b      	bne.n	8015938 <_fflush_r+0x58>
 8015900:	686c      	ldr	r4, [r5, #4]
 8015902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d0ef      	beq.n	80158ea <_fflush_r+0xa>
 801590a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801590c:	07d0      	lsls	r0, r2, #31
 801590e:	d404      	bmi.n	801591a <_fflush_r+0x3a>
 8015910:	0599      	lsls	r1, r3, #22
 8015912:	d402      	bmi.n	801591a <_fflush_r+0x3a>
 8015914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015916:	f7ff fd1a 	bl	801534e <__retarget_lock_acquire_recursive>
 801591a:	4628      	mov	r0, r5
 801591c:	4621      	mov	r1, r4
 801591e:	f7ff ff59 	bl	80157d4 <__sflush_r>
 8015922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015924:	07da      	lsls	r2, r3, #31
 8015926:	4605      	mov	r5, r0
 8015928:	d4e0      	bmi.n	80158ec <_fflush_r+0xc>
 801592a:	89a3      	ldrh	r3, [r4, #12]
 801592c:	059b      	lsls	r3, r3, #22
 801592e:	d4dd      	bmi.n	80158ec <_fflush_r+0xc>
 8015930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015932:	f7ff fd0d 	bl	8015350 <__retarget_lock_release_recursive>
 8015936:	e7d9      	b.n	80158ec <_fflush_r+0xc>
 8015938:	4b05      	ldr	r3, [pc, #20]	; (8015950 <_fflush_r+0x70>)
 801593a:	429c      	cmp	r4, r3
 801593c:	d101      	bne.n	8015942 <_fflush_r+0x62>
 801593e:	68ac      	ldr	r4, [r5, #8]
 8015940:	e7df      	b.n	8015902 <_fflush_r+0x22>
 8015942:	4b04      	ldr	r3, [pc, #16]	; (8015954 <_fflush_r+0x74>)
 8015944:	429c      	cmp	r4, r3
 8015946:	bf08      	it	eq
 8015948:	68ec      	ldreq	r4, [r5, #12]
 801594a:	e7da      	b.n	8015902 <_fflush_r+0x22>
 801594c:	08016244 	.word	0x08016244
 8015950:	08016264 	.word	0x08016264
 8015954:	08016224 	.word	0x08016224

08015958 <std>:
 8015958:	2300      	movs	r3, #0
 801595a:	b510      	push	{r4, lr}
 801595c:	4604      	mov	r4, r0
 801595e:	e9c0 3300 	strd	r3, r3, [r0]
 8015962:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015966:	6083      	str	r3, [r0, #8]
 8015968:	8181      	strh	r1, [r0, #12]
 801596a:	6643      	str	r3, [r0, #100]	; 0x64
 801596c:	81c2      	strh	r2, [r0, #14]
 801596e:	6183      	str	r3, [r0, #24]
 8015970:	4619      	mov	r1, r3
 8015972:	2208      	movs	r2, #8
 8015974:	305c      	adds	r0, #92	; 0x5c
 8015976:	f7fd fdf9 	bl	801356c <memset>
 801597a:	4b05      	ldr	r3, [pc, #20]	; (8015990 <std+0x38>)
 801597c:	6263      	str	r3, [r4, #36]	; 0x24
 801597e:	4b05      	ldr	r3, [pc, #20]	; (8015994 <std+0x3c>)
 8015980:	62a3      	str	r3, [r4, #40]	; 0x28
 8015982:	4b05      	ldr	r3, [pc, #20]	; (8015998 <std+0x40>)
 8015984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015986:	4b05      	ldr	r3, [pc, #20]	; (801599c <std+0x44>)
 8015988:	6224      	str	r4, [r4, #32]
 801598a:	6323      	str	r3, [r4, #48]	; 0x30
 801598c:	bd10      	pop	{r4, pc}
 801598e:	bf00      	nop
 8015990:	08015c95 	.word	0x08015c95
 8015994:	08015cb7 	.word	0x08015cb7
 8015998:	08015cef 	.word	0x08015cef
 801599c:	08015d13 	.word	0x08015d13

080159a0 <_cleanup_r>:
 80159a0:	4901      	ldr	r1, [pc, #4]	; (80159a8 <_cleanup_r+0x8>)
 80159a2:	f000 b8af 	b.w	8015b04 <_fwalk_reent>
 80159a6:	bf00      	nop
 80159a8:	080158e1 	.word	0x080158e1

080159ac <__sfmoreglue>:
 80159ac:	b570      	push	{r4, r5, r6, lr}
 80159ae:	1e4a      	subs	r2, r1, #1
 80159b0:	2568      	movs	r5, #104	; 0x68
 80159b2:	4355      	muls	r5, r2
 80159b4:	460e      	mov	r6, r1
 80159b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80159ba:	f7fd fe2f 	bl	801361c <_malloc_r>
 80159be:	4604      	mov	r4, r0
 80159c0:	b140      	cbz	r0, 80159d4 <__sfmoreglue+0x28>
 80159c2:	2100      	movs	r1, #0
 80159c4:	e9c0 1600 	strd	r1, r6, [r0]
 80159c8:	300c      	adds	r0, #12
 80159ca:	60a0      	str	r0, [r4, #8]
 80159cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80159d0:	f7fd fdcc 	bl	801356c <memset>
 80159d4:	4620      	mov	r0, r4
 80159d6:	bd70      	pop	{r4, r5, r6, pc}

080159d8 <__sfp_lock_acquire>:
 80159d8:	4801      	ldr	r0, [pc, #4]	; (80159e0 <__sfp_lock_acquire+0x8>)
 80159da:	f7ff bcb8 	b.w	801534e <__retarget_lock_acquire_recursive>
 80159de:	bf00      	nop
 80159e0:	2400411c 	.word	0x2400411c

080159e4 <__sfp_lock_release>:
 80159e4:	4801      	ldr	r0, [pc, #4]	; (80159ec <__sfp_lock_release+0x8>)
 80159e6:	f7ff bcb3 	b.w	8015350 <__retarget_lock_release_recursive>
 80159ea:	bf00      	nop
 80159ec:	2400411c 	.word	0x2400411c

080159f0 <__sinit_lock_acquire>:
 80159f0:	4801      	ldr	r0, [pc, #4]	; (80159f8 <__sinit_lock_acquire+0x8>)
 80159f2:	f7ff bcac 	b.w	801534e <__retarget_lock_acquire_recursive>
 80159f6:	bf00      	nop
 80159f8:	24004117 	.word	0x24004117

080159fc <__sinit_lock_release>:
 80159fc:	4801      	ldr	r0, [pc, #4]	; (8015a04 <__sinit_lock_release+0x8>)
 80159fe:	f7ff bca7 	b.w	8015350 <__retarget_lock_release_recursive>
 8015a02:	bf00      	nop
 8015a04:	24004117 	.word	0x24004117

08015a08 <__sinit>:
 8015a08:	b510      	push	{r4, lr}
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	f7ff fff0 	bl	80159f0 <__sinit_lock_acquire>
 8015a10:	69a3      	ldr	r3, [r4, #24]
 8015a12:	b11b      	cbz	r3, 8015a1c <__sinit+0x14>
 8015a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a18:	f7ff bff0 	b.w	80159fc <__sinit_lock_release>
 8015a1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015a20:	6523      	str	r3, [r4, #80]	; 0x50
 8015a22:	4b13      	ldr	r3, [pc, #76]	; (8015a70 <__sinit+0x68>)
 8015a24:	4a13      	ldr	r2, [pc, #76]	; (8015a74 <__sinit+0x6c>)
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	62a2      	str	r2, [r4, #40]	; 0x28
 8015a2a:	42a3      	cmp	r3, r4
 8015a2c:	bf04      	itt	eq
 8015a2e:	2301      	moveq	r3, #1
 8015a30:	61a3      	streq	r3, [r4, #24]
 8015a32:	4620      	mov	r0, r4
 8015a34:	f000 f820 	bl	8015a78 <__sfp>
 8015a38:	6060      	str	r0, [r4, #4]
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	f000 f81c 	bl	8015a78 <__sfp>
 8015a40:	60a0      	str	r0, [r4, #8]
 8015a42:	4620      	mov	r0, r4
 8015a44:	f000 f818 	bl	8015a78 <__sfp>
 8015a48:	2200      	movs	r2, #0
 8015a4a:	60e0      	str	r0, [r4, #12]
 8015a4c:	2104      	movs	r1, #4
 8015a4e:	6860      	ldr	r0, [r4, #4]
 8015a50:	f7ff ff82 	bl	8015958 <std>
 8015a54:	68a0      	ldr	r0, [r4, #8]
 8015a56:	2201      	movs	r2, #1
 8015a58:	2109      	movs	r1, #9
 8015a5a:	f7ff ff7d 	bl	8015958 <std>
 8015a5e:	68e0      	ldr	r0, [r4, #12]
 8015a60:	2202      	movs	r2, #2
 8015a62:	2112      	movs	r1, #18
 8015a64:	f7ff ff78 	bl	8015958 <std>
 8015a68:	2301      	movs	r3, #1
 8015a6a:	61a3      	str	r3, [r4, #24]
 8015a6c:	e7d2      	b.n	8015a14 <__sinit+0xc>
 8015a6e:	bf00      	nop
 8015a70:	08015ea4 	.word	0x08015ea4
 8015a74:	080159a1 	.word	0x080159a1

08015a78 <__sfp>:
 8015a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a7a:	4607      	mov	r7, r0
 8015a7c:	f7ff ffac 	bl	80159d8 <__sfp_lock_acquire>
 8015a80:	4b1e      	ldr	r3, [pc, #120]	; (8015afc <__sfp+0x84>)
 8015a82:	681e      	ldr	r6, [r3, #0]
 8015a84:	69b3      	ldr	r3, [r6, #24]
 8015a86:	b913      	cbnz	r3, 8015a8e <__sfp+0x16>
 8015a88:	4630      	mov	r0, r6
 8015a8a:	f7ff ffbd 	bl	8015a08 <__sinit>
 8015a8e:	3648      	adds	r6, #72	; 0x48
 8015a90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015a94:	3b01      	subs	r3, #1
 8015a96:	d503      	bpl.n	8015aa0 <__sfp+0x28>
 8015a98:	6833      	ldr	r3, [r6, #0]
 8015a9a:	b30b      	cbz	r3, 8015ae0 <__sfp+0x68>
 8015a9c:	6836      	ldr	r6, [r6, #0]
 8015a9e:	e7f7      	b.n	8015a90 <__sfp+0x18>
 8015aa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015aa4:	b9d5      	cbnz	r5, 8015adc <__sfp+0x64>
 8015aa6:	4b16      	ldr	r3, [pc, #88]	; (8015b00 <__sfp+0x88>)
 8015aa8:	60e3      	str	r3, [r4, #12]
 8015aaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015aae:	6665      	str	r5, [r4, #100]	; 0x64
 8015ab0:	f7ff fc4c 	bl	801534c <__retarget_lock_init_recursive>
 8015ab4:	f7ff ff96 	bl	80159e4 <__sfp_lock_release>
 8015ab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015abc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015ac0:	6025      	str	r5, [r4, #0]
 8015ac2:	61a5      	str	r5, [r4, #24]
 8015ac4:	2208      	movs	r2, #8
 8015ac6:	4629      	mov	r1, r5
 8015ac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015acc:	f7fd fd4e 	bl	801356c <memset>
 8015ad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015ad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015ad8:	4620      	mov	r0, r4
 8015ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015adc:	3468      	adds	r4, #104	; 0x68
 8015ade:	e7d9      	b.n	8015a94 <__sfp+0x1c>
 8015ae0:	2104      	movs	r1, #4
 8015ae2:	4638      	mov	r0, r7
 8015ae4:	f7ff ff62 	bl	80159ac <__sfmoreglue>
 8015ae8:	4604      	mov	r4, r0
 8015aea:	6030      	str	r0, [r6, #0]
 8015aec:	2800      	cmp	r0, #0
 8015aee:	d1d5      	bne.n	8015a9c <__sfp+0x24>
 8015af0:	f7ff ff78 	bl	80159e4 <__sfp_lock_release>
 8015af4:	230c      	movs	r3, #12
 8015af6:	603b      	str	r3, [r7, #0]
 8015af8:	e7ee      	b.n	8015ad8 <__sfp+0x60>
 8015afa:	bf00      	nop
 8015afc:	08015ea4 	.word	0x08015ea4
 8015b00:	ffff0001 	.word	0xffff0001

08015b04 <_fwalk_reent>:
 8015b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b08:	4606      	mov	r6, r0
 8015b0a:	4688      	mov	r8, r1
 8015b0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b10:	2700      	movs	r7, #0
 8015b12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b16:	f1b9 0901 	subs.w	r9, r9, #1
 8015b1a:	d505      	bpl.n	8015b28 <_fwalk_reent+0x24>
 8015b1c:	6824      	ldr	r4, [r4, #0]
 8015b1e:	2c00      	cmp	r4, #0
 8015b20:	d1f7      	bne.n	8015b12 <_fwalk_reent+0xe>
 8015b22:	4638      	mov	r0, r7
 8015b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b28:	89ab      	ldrh	r3, [r5, #12]
 8015b2a:	2b01      	cmp	r3, #1
 8015b2c:	d907      	bls.n	8015b3e <_fwalk_reent+0x3a>
 8015b2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b32:	3301      	adds	r3, #1
 8015b34:	d003      	beq.n	8015b3e <_fwalk_reent+0x3a>
 8015b36:	4629      	mov	r1, r5
 8015b38:	4630      	mov	r0, r6
 8015b3a:	47c0      	blx	r8
 8015b3c:	4307      	orrs	r7, r0
 8015b3e:	3568      	adds	r5, #104	; 0x68
 8015b40:	e7e9      	b.n	8015b16 <_fwalk_reent+0x12>

08015b42 <__swhatbuf_r>:
 8015b42:	b570      	push	{r4, r5, r6, lr}
 8015b44:	460e      	mov	r6, r1
 8015b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b4a:	2900      	cmp	r1, #0
 8015b4c:	b096      	sub	sp, #88	; 0x58
 8015b4e:	4614      	mov	r4, r2
 8015b50:	461d      	mov	r5, r3
 8015b52:	da07      	bge.n	8015b64 <__swhatbuf_r+0x22>
 8015b54:	2300      	movs	r3, #0
 8015b56:	602b      	str	r3, [r5, #0]
 8015b58:	89b3      	ldrh	r3, [r6, #12]
 8015b5a:	061a      	lsls	r2, r3, #24
 8015b5c:	d410      	bmi.n	8015b80 <__swhatbuf_r+0x3e>
 8015b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b62:	e00e      	b.n	8015b82 <__swhatbuf_r+0x40>
 8015b64:	466a      	mov	r2, sp
 8015b66:	f000 f8fb 	bl	8015d60 <_fstat_r>
 8015b6a:	2800      	cmp	r0, #0
 8015b6c:	dbf2      	blt.n	8015b54 <__swhatbuf_r+0x12>
 8015b6e:	9a01      	ldr	r2, [sp, #4]
 8015b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b78:	425a      	negs	r2, r3
 8015b7a:	415a      	adcs	r2, r3
 8015b7c:	602a      	str	r2, [r5, #0]
 8015b7e:	e7ee      	b.n	8015b5e <__swhatbuf_r+0x1c>
 8015b80:	2340      	movs	r3, #64	; 0x40
 8015b82:	2000      	movs	r0, #0
 8015b84:	6023      	str	r3, [r4, #0]
 8015b86:	b016      	add	sp, #88	; 0x58
 8015b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08015b8c <__smakebuf_r>:
 8015b8c:	898b      	ldrh	r3, [r1, #12]
 8015b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b90:	079d      	lsls	r5, r3, #30
 8015b92:	4606      	mov	r6, r0
 8015b94:	460c      	mov	r4, r1
 8015b96:	d507      	bpl.n	8015ba8 <__smakebuf_r+0x1c>
 8015b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015b9c:	6023      	str	r3, [r4, #0]
 8015b9e:	6123      	str	r3, [r4, #16]
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	6163      	str	r3, [r4, #20]
 8015ba4:	b002      	add	sp, #8
 8015ba6:	bd70      	pop	{r4, r5, r6, pc}
 8015ba8:	ab01      	add	r3, sp, #4
 8015baa:	466a      	mov	r2, sp
 8015bac:	f7ff ffc9 	bl	8015b42 <__swhatbuf_r>
 8015bb0:	9900      	ldr	r1, [sp, #0]
 8015bb2:	4605      	mov	r5, r0
 8015bb4:	4630      	mov	r0, r6
 8015bb6:	f7fd fd31 	bl	801361c <_malloc_r>
 8015bba:	b948      	cbnz	r0, 8015bd0 <__smakebuf_r+0x44>
 8015bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bc0:	059a      	lsls	r2, r3, #22
 8015bc2:	d4ef      	bmi.n	8015ba4 <__smakebuf_r+0x18>
 8015bc4:	f023 0303 	bic.w	r3, r3, #3
 8015bc8:	f043 0302 	orr.w	r3, r3, #2
 8015bcc:	81a3      	strh	r3, [r4, #12]
 8015bce:	e7e3      	b.n	8015b98 <__smakebuf_r+0xc>
 8015bd0:	4b0d      	ldr	r3, [pc, #52]	; (8015c08 <__smakebuf_r+0x7c>)
 8015bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8015bd4:	89a3      	ldrh	r3, [r4, #12]
 8015bd6:	6020      	str	r0, [r4, #0]
 8015bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bdc:	81a3      	strh	r3, [r4, #12]
 8015bde:	9b00      	ldr	r3, [sp, #0]
 8015be0:	6163      	str	r3, [r4, #20]
 8015be2:	9b01      	ldr	r3, [sp, #4]
 8015be4:	6120      	str	r0, [r4, #16]
 8015be6:	b15b      	cbz	r3, 8015c00 <__smakebuf_r+0x74>
 8015be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bec:	4630      	mov	r0, r6
 8015bee:	f000 f8c9 	bl	8015d84 <_isatty_r>
 8015bf2:	b128      	cbz	r0, 8015c00 <__smakebuf_r+0x74>
 8015bf4:	89a3      	ldrh	r3, [r4, #12]
 8015bf6:	f023 0303 	bic.w	r3, r3, #3
 8015bfa:	f043 0301 	orr.w	r3, r3, #1
 8015bfe:	81a3      	strh	r3, [r4, #12]
 8015c00:	89a0      	ldrh	r0, [r4, #12]
 8015c02:	4305      	orrs	r5, r0
 8015c04:	81a5      	strh	r5, [r4, #12]
 8015c06:	e7cd      	b.n	8015ba4 <__smakebuf_r+0x18>
 8015c08:	080159a1 	.word	0x080159a1

08015c0c <_raise_r>:
 8015c0c:	291f      	cmp	r1, #31
 8015c0e:	b538      	push	{r3, r4, r5, lr}
 8015c10:	4604      	mov	r4, r0
 8015c12:	460d      	mov	r5, r1
 8015c14:	d904      	bls.n	8015c20 <_raise_r+0x14>
 8015c16:	2316      	movs	r3, #22
 8015c18:	6003      	str	r3, [r0, #0]
 8015c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c1e:	bd38      	pop	{r3, r4, r5, pc}
 8015c20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015c22:	b112      	cbz	r2, 8015c2a <_raise_r+0x1e>
 8015c24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c28:	b94b      	cbnz	r3, 8015c3e <_raise_r+0x32>
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	f000 f830 	bl	8015c90 <_getpid_r>
 8015c30:	462a      	mov	r2, r5
 8015c32:	4601      	mov	r1, r0
 8015c34:	4620      	mov	r0, r4
 8015c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c3a:	f000 b817 	b.w	8015c6c <_kill_r>
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d00a      	beq.n	8015c58 <_raise_r+0x4c>
 8015c42:	1c59      	adds	r1, r3, #1
 8015c44:	d103      	bne.n	8015c4e <_raise_r+0x42>
 8015c46:	2316      	movs	r3, #22
 8015c48:	6003      	str	r3, [r0, #0]
 8015c4a:	2001      	movs	r0, #1
 8015c4c:	e7e7      	b.n	8015c1e <_raise_r+0x12>
 8015c4e:	2400      	movs	r4, #0
 8015c50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015c54:	4628      	mov	r0, r5
 8015c56:	4798      	blx	r3
 8015c58:	2000      	movs	r0, #0
 8015c5a:	e7e0      	b.n	8015c1e <_raise_r+0x12>

08015c5c <raise>:
 8015c5c:	4b02      	ldr	r3, [pc, #8]	; (8015c68 <raise+0xc>)
 8015c5e:	4601      	mov	r1, r0
 8015c60:	6818      	ldr	r0, [r3, #0]
 8015c62:	f7ff bfd3 	b.w	8015c0c <_raise_r>
 8015c66:	bf00      	nop
 8015c68:	24000184 	.word	0x24000184

08015c6c <_kill_r>:
 8015c6c:	b538      	push	{r3, r4, r5, lr}
 8015c6e:	4d07      	ldr	r5, [pc, #28]	; (8015c8c <_kill_r+0x20>)
 8015c70:	2300      	movs	r3, #0
 8015c72:	4604      	mov	r4, r0
 8015c74:	4608      	mov	r0, r1
 8015c76:	4611      	mov	r1, r2
 8015c78:	602b      	str	r3, [r5, #0]
 8015c7a:	f7eb fbc5 	bl	8001408 <_kill>
 8015c7e:	1c43      	adds	r3, r0, #1
 8015c80:	d102      	bne.n	8015c88 <_kill_r+0x1c>
 8015c82:	682b      	ldr	r3, [r5, #0]
 8015c84:	b103      	cbz	r3, 8015c88 <_kill_r+0x1c>
 8015c86:	6023      	str	r3, [r4, #0]
 8015c88:	bd38      	pop	{r3, r4, r5, pc}
 8015c8a:	bf00      	nop
 8015c8c:	24004110 	.word	0x24004110

08015c90 <_getpid_r>:
 8015c90:	f7eb bbb2 	b.w	80013f8 <_getpid>

08015c94 <__sread>:
 8015c94:	b510      	push	{r4, lr}
 8015c96:	460c      	mov	r4, r1
 8015c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c9c:	f000 f894 	bl	8015dc8 <_read_r>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	bfab      	itete	ge
 8015ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8015ca8:	181b      	addge	r3, r3, r0
 8015caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015cae:	bfac      	ite	ge
 8015cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8015cb2:	81a3      	strhlt	r3, [r4, #12]
 8015cb4:	bd10      	pop	{r4, pc}

08015cb6 <__swrite>:
 8015cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cba:	461f      	mov	r7, r3
 8015cbc:	898b      	ldrh	r3, [r1, #12]
 8015cbe:	05db      	lsls	r3, r3, #23
 8015cc0:	4605      	mov	r5, r0
 8015cc2:	460c      	mov	r4, r1
 8015cc4:	4616      	mov	r6, r2
 8015cc6:	d505      	bpl.n	8015cd4 <__swrite+0x1e>
 8015cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ccc:	2302      	movs	r3, #2
 8015cce:	2200      	movs	r2, #0
 8015cd0:	f000 f868 	bl	8015da4 <_lseek_r>
 8015cd4:	89a3      	ldrh	r3, [r4, #12]
 8015cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015cde:	81a3      	strh	r3, [r4, #12]
 8015ce0:	4632      	mov	r2, r6
 8015ce2:	463b      	mov	r3, r7
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	f000 b817 	b.w	8015d1c <_write_r>

08015cee <__sseek>:
 8015cee:	b510      	push	{r4, lr}
 8015cf0:	460c      	mov	r4, r1
 8015cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cf6:	f000 f855 	bl	8015da4 <_lseek_r>
 8015cfa:	1c43      	adds	r3, r0, #1
 8015cfc:	89a3      	ldrh	r3, [r4, #12]
 8015cfe:	bf15      	itete	ne
 8015d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d0a:	81a3      	strheq	r3, [r4, #12]
 8015d0c:	bf18      	it	ne
 8015d0e:	81a3      	strhne	r3, [r4, #12]
 8015d10:	bd10      	pop	{r4, pc}

08015d12 <__sclose>:
 8015d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d16:	f000 b813 	b.w	8015d40 <_close_r>
	...

08015d1c <_write_r>:
 8015d1c:	b538      	push	{r3, r4, r5, lr}
 8015d1e:	4d07      	ldr	r5, [pc, #28]	; (8015d3c <_write_r+0x20>)
 8015d20:	4604      	mov	r4, r0
 8015d22:	4608      	mov	r0, r1
 8015d24:	4611      	mov	r1, r2
 8015d26:	2200      	movs	r2, #0
 8015d28:	602a      	str	r2, [r5, #0]
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	f7eb fba3 	bl	8001476 <_write>
 8015d30:	1c43      	adds	r3, r0, #1
 8015d32:	d102      	bne.n	8015d3a <_write_r+0x1e>
 8015d34:	682b      	ldr	r3, [r5, #0]
 8015d36:	b103      	cbz	r3, 8015d3a <_write_r+0x1e>
 8015d38:	6023      	str	r3, [r4, #0]
 8015d3a:	bd38      	pop	{r3, r4, r5, pc}
 8015d3c:	24004110 	.word	0x24004110

08015d40 <_close_r>:
 8015d40:	b538      	push	{r3, r4, r5, lr}
 8015d42:	4d06      	ldr	r5, [pc, #24]	; (8015d5c <_close_r+0x1c>)
 8015d44:	2300      	movs	r3, #0
 8015d46:	4604      	mov	r4, r0
 8015d48:	4608      	mov	r0, r1
 8015d4a:	602b      	str	r3, [r5, #0]
 8015d4c:	f7eb fbaf 	bl	80014ae <_close>
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	d102      	bne.n	8015d5a <_close_r+0x1a>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	b103      	cbz	r3, 8015d5a <_close_r+0x1a>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bd38      	pop	{r3, r4, r5, pc}
 8015d5c:	24004110 	.word	0x24004110

08015d60 <_fstat_r>:
 8015d60:	b538      	push	{r3, r4, r5, lr}
 8015d62:	4d07      	ldr	r5, [pc, #28]	; (8015d80 <_fstat_r+0x20>)
 8015d64:	2300      	movs	r3, #0
 8015d66:	4604      	mov	r4, r0
 8015d68:	4608      	mov	r0, r1
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	602b      	str	r3, [r5, #0]
 8015d6e:	f7eb fbaa 	bl	80014c6 <_fstat>
 8015d72:	1c43      	adds	r3, r0, #1
 8015d74:	d102      	bne.n	8015d7c <_fstat_r+0x1c>
 8015d76:	682b      	ldr	r3, [r5, #0]
 8015d78:	b103      	cbz	r3, 8015d7c <_fstat_r+0x1c>
 8015d7a:	6023      	str	r3, [r4, #0]
 8015d7c:	bd38      	pop	{r3, r4, r5, pc}
 8015d7e:	bf00      	nop
 8015d80:	24004110 	.word	0x24004110

08015d84 <_isatty_r>:
 8015d84:	b538      	push	{r3, r4, r5, lr}
 8015d86:	4d06      	ldr	r5, [pc, #24]	; (8015da0 <_isatty_r+0x1c>)
 8015d88:	2300      	movs	r3, #0
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	4608      	mov	r0, r1
 8015d8e:	602b      	str	r3, [r5, #0]
 8015d90:	f7eb fba9 	bl	80014e6 <_isatty>
 8015d94:	1c43      	adds	r3, r0, #1
 8015d96:	d102      	bne.n	8015d9e <_isatty_r+0x1a>
 8015d98:	682b      	ldr	r3, [r5, #0]
 8015d9a:	b103      	cbz	r3, 8015d9e <_isatty_r+0x1a>
 8015d9c:	6023      	str	r3, [r4, #0]
 8015d9e:	bd38      	pop	{r3, r4, r5, pc}
 8015da0:	24004110 	.word	0x24004110

08015da4 <_lseek_r>:
 8015da4:	b538      	push	{r3, r4, r5, lr}
 8015da6:	4d07      	ldr	r5, [pc, #28]	; (8015dc4 <_lseek_r+0x20>)
 8015da8:	4604      	mov	r4, r0
 8015daa:	4608      	mov	r0, r1
 8015dac:	4611      	mov	r1, r2
 8015dae:	2200      	movs	r2, #0
 8015db0:	602a      	str	r2, [r5, #0]
 8015db2:	461a      	mov	r2, r3
 8015db4:	f7eb fba2 	bl	80014fc <_lseek>
 8015db8:	1c43      	adds	r3, r0, #1
 8015dba:	d102      	bne.n	8015dc2 <_lseek_r+0x1e>
 8015dbc:	682b      	ldr	r3, [r5, #0]
 8015dbe:	b103      	cbz	r3, 8015dc2 <_lseek_r+0x1e>
 8015dc0:	6023      	str	r3, [r4, #0]
 8015dc2:	bd38      	pop	{r3, r4, r5, pc}
 8015dc4:	24004110 	.word	0x24004110

08015dc8 <_read_r>:
 8015dc8:	b538      	push	{r3, r4, r5, lr}
 8015dca:	4d07      	ldr	r5, [pc, #28]	; (8015de8 <_read_r+0x20>)
 8015dcc:	4604      	mov	r4, r0
 8015dce:	4608      	mov	r0, r1
 8015dd0:	4611      	mov	r1, r2
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	602a      	str	r2, [r5, #0]
 8015dd6:	461a      	mov	r2, r3
 8015dd8:	f7eb fb30 	bl	800143c <_read>
 8015ddc:	1c43      	adds	r3, r0, #1
 8015dde:	d102      	bne.n	8015de6 <_read_r+0x1e>
 8015de0:	682b      	ldr	r3, [r5, #0]
 8015de2:	b103      	cbz	r3, 8015de6 <_read_r+0x1e>
 8015de4:	6023      	str	r3, [r4, #0]
 8015de6:	bd38      	pop	{r3, r4, r5, pc}
 8015de8:	24004110 	.word	0x24004110

08015dec <_init>:
 8015dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dee:	bf00      	nop
 8015df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015df2:	bc08      	pop	{r3}
 8015df4:	469e      	mov	lr, r3
 8015df6:	4770      	bx	lr

08015df8 <_fini>:
 8015df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dfa:	bf00      	nop
 8015dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015dfe:	bc08      	pop	{r3}
 8015e00:	469e      	mov	lr, r3
 8015e02:	4770      	bx	lr
