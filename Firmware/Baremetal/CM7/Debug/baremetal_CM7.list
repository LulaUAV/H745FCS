
baremetal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f588  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800f820  0800f820  0001f820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f874  0800f874  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800f874  0800f874  0001f874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f87c  0800f87c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f87c  0800f87c  0001f87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f880  0800f880  0001f880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  24000000  0800f884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002818  24000024  0800f8a8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400283c  0800f8a8  0002283c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c2de  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f0a  00000000  00000000  0005c330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00062240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b10  00000000  00000000  00063f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee7d  00000000  00000000  00065a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002834b  00000000  00000000  000a48d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018dd5e  00000000  00000000  000ccc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025a97e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e8  00000000  00000000  0025a9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000024 	.word	0x24000024
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f808 	.word	0x0800f808

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000028 	.word	0x24000028
 80002d4:	0800f808 	.word	0x0800f808

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_DMA_Init+0x6c>)
 800070c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_DMA_Init+0x6c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_DMA_Init+0x6c>)
 800071c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_DMA_Init+0x6c>)
 800072a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800072e:	4a10      	ldr	r2, [pc, #64]	; (8000770 <MX_DMA_Init+0x6c>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_DMA_Init+0x6c>)
 800073a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2010      	movs	r0, #16
 800074c:	f001 fa93 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000750:	2010      	movs	r0, #16
 8000752:	f001 faaa 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2011      	movs	r0, #17
 800075c:	f001 fa8b 	bl	8001c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000760:	2011      	movs	r0, #17
 8000762:	f001 faa2 	bl	8001caa <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	58024400 	.word	0x58024400

08000774 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0xe4>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	4a35      	ldr	r2, [pc, #212]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000782:	f043 0320 	orr.w	r3, r3, #32
 8000786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078a:	4b33      	ldr	r3, [pc, #204]	; (8000858 <MX_GPIO_Init+0xe4>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <MX_GPIO_Init+0xe4>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	4a26      	ldr	r2, [pc, #152]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007da:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0xe4>)
 80007fa:	f043 0302 	orr.w	r3, r3, #2
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a08      	ldr	r2, [pc, #32]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_GPIO_Init+0xe4>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

}
 800084c:	bf00      	nop
 800084e:	3724      	adds	r7, #36	; 0x24
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	58024400 	.word	0x58024400

0800085c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_I2C2_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000868:	4a1b      	ldr	r2, [pc, #108]	; (80008d8 <MX_I2C2_Init+0x7c>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000874:	2201      	movs	r2, #1
 8000876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C2_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <MX_I2C2_Init+0x74>)
 8000898:	f003 feae 	bl	80045f8 <HAL_I2C_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 fad5 	bl	8000e50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a6:	2100      	movs	r1, #0
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008aa:	f004 fdba 	bl	8005422 <HAL_I2CEx_ConfigAnalogFilter>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008b4:	f000 facc 	bl	8000e50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b8:	2100      	movs	r1, #0
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2C2_Init+0x74>)
 80008bc:	f004 fdfc 	bl	80054b8 <HAL_I2CEx_ConfigDigitalFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fac3 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	24000054 	.word	0x24000054
 80008d4:	40005800 	.word	0x40005800
 80008d8:	307075b1 	.word	0x307075b1

080008dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0b8      	sub	sp, #224	; 0xe0
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	22bc      	movs	r2, #188	; 0xbc
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00e ff7b 	bl	800f7f8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a2d      	ldr	r2, [pc, #180]	; (80009bc <HAL_I2C_MspInit+0xe0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d152      	bne.n	80009b2 <HAL_I2C_MspInit+0xd6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800090c:	2308      	movs	r3, #8
 800090e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000910:	2300      	movs	r3, #0
 8000912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4618      	mov	r0, r3
 800091c:	f006 fda6 	bl	800746c <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000926:	f000 fa93 	bl	8000e50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a23      	ldr	r2, [pc, #140]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 8000932:	f043 0302 	orr.w	r3, r3, #2
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800094c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000962:	2304      	movs	r3, #4
 8000964:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800096c:	4619      	mov	r1, r3
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <HAL_I2C_MspInit+0xe8>)
 8000970:	f003 fc64 	bl	800423c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 8000976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800097a:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 800097c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000980:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <HAL_I2C_MspInit+0xe4>)
 8000986:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800098a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2021      	movs	r0, #33	; 0x21
 8000998:	f001 f96d 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800099c:	2021      	movs	r0, #33	; 0x21
 800099e:	f001 f984 	bl	8001caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2022      	movs	r0, #34	; 0x22
 80009a8:	f001 f965 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80009ac:	2022      	movs	r0, #34	; 0x22
 80009ae:	f001 f97c 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	37e0      	adds	r7, #224	; 0xe0
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40005800 	.word	0x40005800
 80009c0:	58024400 	.word	0x58024400
 80009c4:	58020400 	.word	0x58020400

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009ce:	f000 f9f9 	bl	8000dc4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009d2:	4b5c      	ldr	r3, [pc, #368]	; (8000b44 <main+0x17c>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d11b      	bne.n	8000a16 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
}
 80009e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009ea:	4b56      	ldr	r3, [pc, #344]	; (8000b44 <main+0x17c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009f8:	f3bf 8f6f 	isb	sy
}
 80009fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009fe:	4b51      	ldr	r3, [pc, #324]	; (8000b44 <main+0x17c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a50      	ldr	r2, [pc, #320]	; (8000b44 <main+0x17c>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0a:	f3bf 8f4f 	dsb	sy
}
 8000a0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a10:	f3bf 8f6f 	isb	sy
}
 8000a14:	e000      	b.n	8000a18 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a16:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <main+0x17c>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d138      	bne.n	8000a96 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a24:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <main+0x17c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2c:	f3bf 8f4f 	dsb	sy
}
 8000a30:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a32:	4b44      	ldr	r3, [pc, #272]	; (8000b44 <main+0x17c>)
 8000a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a38:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	0b5b      	lsrs	r3, r3, #13
 8000a3e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a42:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a4c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	015a      	lsls	r2, r3, #5
 8000a52:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a56:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a5c:	4939      	ldr	r1, [pc, #228]	; (8000b44 <main+0x17c>)
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1ef      	bne.n	8000a4e <main+0x86>
    } while(sets-- != 0U);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	60fa      	str	r2, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e5      	bne.n	8000a44 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a78:	f3bf 8f4f 	dsb	sy
}
 8000a7c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <main+0x17c>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a30      	ldr	r2, [pc, #192]	; (8000b44 <main+0x17c>)
 8000a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a8a:	f3bf 8f4f 	dsb	sy
}
 8000a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a90:	f3bf 8f6f 	isb	sy
}
 8000a94:	e000      	b.n	8000a98 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a96:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a9c:	617b      	str	r3, [r7, #20]

  while(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) { asm("NOP"); }
 8000a9e:	e000      	b.n	8000aa2 <main+0xda>
 8000aa0:	bf00      	nop
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <main+0x180>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d1f8      	bne.n	8000aa0 <main+0xd8>
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aae:	f000 ff45 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab2:	f000 f903 	bl	8000cbc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <main+0x180>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <main+0x180>)
 8000abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac6:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <main+0x180>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f003 fd61 	bl	800459c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ada:	2100      	movs	r1, #0
 8000adc:	2000      	movs	r0, #0
 8000ade:	f003 fd77 	bl	80045d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae6:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ae8:	bf00      	nop
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <main+0x180>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d104      	bne.n	8000b00 <main+0x138>
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	1e5a      	subs	r2, r3, #1
 8000afa:	617a      	str	r2, [r7, #20]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	dcf4      	bgt.n	8000aea <main+0x122>
if ( timeout < 0 )
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da01      	bge.n	8000b0a <main+0x142>
{
Error_Handler();
 8000b06:	f000 f9a3 	bl	8000e50 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f7ff fe33 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0e:	f7ff fdf9 	bl	8000704 <MX_DMA_Init>
  MX_I2C2_Init();
 8000b12:	f7ff fea3 	bl	800085c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 8000b16:	f000 f9a1 	bl	8000e5c <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 8000b1a:	f000 fb13 	bl	8001144 <MX_TIM1_Init>
  MX_UART4_Init();
 8000b1e:	f000 fc7f 	bl	8001420 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b22:	f000 fe3d 	bl	80017a0 <MX_USB_OTG_FS_PCD_Init>
  MX_FATFS_Init();
 8000b26:	f00e fbb7 	bl	800f298 <MX_FATFS_Init>
  MX_UART7_Init();
 8000b2a:	f000 fcc9 	bl	80014c0 <MX_UART7_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    ReadGPS();
 8000b2e:	f000 f80d 	bl	8000b4c <ReadGPS>
    ReadMag();
 8000b32:	f000 f841 	bl	8000bb8 <ReadMag>
    ReadAcc();
 8000b36:	f000 f861 	bl	8000bfc <ReadAcc>
    ReadBaro();
 8000b3a:	f000 f881 	bl	8000c40 <ReadBaro>
    ReadGyro();
 8000b3e:	f000 f89b 	bl	8000c78 <ReadGyro>
    ReadGPS();
 8000b42:	e7f4      	b.n	8000b2e <main+0x166>
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	58024400 	.word	0x58024400

08000b4c <ReadGPS>:
  /* USER CODE END 3 */
}


void ReadGPS(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000b50:	2000      	movs	r0, #0
 8000b52:	f003 fd23 	bl	800459c <HAL_HSEM_FastTake>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d122      	bne.n	8000ba2 <ReadGPS+0x56>
      {
        gps_values.gps_latitude = gps_values_m7->gps_latitude;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <ReadGPS+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <ReadGPS+0x68>)
 8000b64:	6013      	str	r3, [r2, #0]
        gps_values.gps_longitude = gps_values_m7->gps_longitude;
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <ReadGPS+0x64>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <ReadGPS+0x68>)
 8000b6e:	6053      	str	r3, [r2, #4]
        gps_values.gps_altitude = gps_values_m7->gps_altitude;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <ReadGPS+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <ReadGPS+0x68>)
 8000b78:	6093      	str	r3, [r2, #8]
        gps_values.gps_velocity_x = gps_values_m7->gps_velocity_x;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <ReadGPS+0x64>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <ReadGPS+0x68>)
 8000b82:	60d3      	str	r3, [r2, #12]
        gps_values.gps_velocity_y = gps_values_m7->gps_velocity_y;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <ReadGPS+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <ReadGPS+0x68>)
 8000b8c:	6113      	str	r3, [r2, #16]
        gps_values.gps_velocity_z = gps_values_m7->gps_velocity_z;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <ReadGPS+0x64>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <ReadGPS+0x68>)
 8000b96:	6153      	str	r3, [r2, #20]
        gps_values.gps_satellites = gps_values_m7->gps_satellites;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <ReadGPS+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <ReadGPS+0x68>)
 8000ba0:	61d3      	str	r3, [r2, #28]
      }
      HAL_HSEM_Release(HSEM_ID_0,0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f003 fd13 	bl	80045d0 <HAL_HSEM_Release>

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	24000018 	.word	0x24000018
 8000bb4:	240000a0 	.word	0x240000a0

08000bb8 <ReadMag>:

void ReadMag(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f003 fced 	bl	800459c <HAL_HSEM_FastTake>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10e      	bne.n	8000be6 <ReadMag+0x2e>
  {
    mag_values.imu_mag_x = mag_values_m7->imu_mag_x;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <ReadMag+0x3c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <ReadMag+0x40>)
 8000bd0:	6013      	str	r3, [r2, #0]
    mag_values.imu_mag_y = mag_values_m7->imu_mag_y;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <ReadMag+0x3c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <ReadMag+0x40>)
 8000bda:	6053      	str	r3, [r2, #4]
    mag_values.imu_mag_z = mag_values_m7->imu_mag_z;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <ReadMag+0x3c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <ReadMag+0x40>)
 8000be4:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2000      	movs	r0, #0
 8000bea:	f003 fcf1 	bl	80045d0 <HAL_HSEM_Release>

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	24000010 	.word	0x24000010
 8000bf8:	240000e0 	.word	0x240000e0

08000bfc <ReadAcc>:
void ReadAcc(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c00:	2000      	movs	r0, #0
 8000c02:	f003 fccb 	bl	800459c <HAL_HSEM_FastTake>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d10e      	bne.n	8000c2a <ReadAcc+0x2e>
  {
      acc_values.imu_acc_x = acc_values_m7->imu_acc_x;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <ReadAcc+0x3c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <ReadAcc+0x40>)
 8000c14:	6013      	str	r3, [r2, #0]
      acc_values.imu_acc_y = acc_values_m7->imu_acc_y;
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <ReadAcc+0x3c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <ReadAcc+0x40>)
 8000c1e:	6053      	str	r3, [r2, #4]
      acc_values.imu_acc_z = acc_values_m7->imu_acc_z;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ReadAcc+0x3c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <ReadAcc+0x40>)
 8000c28:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f003 fccf 	bl	80045d0 <HAL_HSEM_Release>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	24000008 	.word	0x24000008
 8000c3c:	240000c8 	.word	0x240000c8

08000c40 <ReadBaro>:
void ReadBaro(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c44:	2000      	movs	r0, #0
 8000c46:	f003 fca9 	bl	800459c <HAL_HSEM_FastTake>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <ReadBaro+0x24>
  {
     baro_values.baro_altitude = baro_values_m7->baro_altitude;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <ReadBaro+0x30>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <ReadBaro+0x34>)
 8000c58:	6053      	str	r3, [r2, #4]
     baro_values.baro_pressure = baro_values_m7->baro_pressure;
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <ReadBaro+0x30>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <ReadBaro+0x34>)
 8000c62:	6013      	str	r3, [r2, #0]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2000      	movs	r0, #0
 8000c68:	f003 fcb2 	bl	80045d0 <HAL_HSEM_Release>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24000014 	.word	0x24000014
 8000c74:	240000c0 	.word	0x240000c0

08000c78 <ReadGyro>:
void ReadGyro(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  if(HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK)
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f003 fc8d 	bl	800459c <HAL_HSEM_FastTake>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d10e      	bne.n	8000ca6 <ReadGyro+0x2e>
  {
     gyro_values.imu_gyro_x = gyro_values_m7->imu_gyro_x;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <ReadGyro+0x3c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <ReadGyro+0x40>)
 8000c90:	6013      	str	r3, [r2, #0]
     gyro_values.imu_gyro_y = gyro_values_m7->imu_gyro_y;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <ReadGyro+0x3c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <ReadGyro+0x40>)
 8000c9a:	6053      	str	r3, [r2, #4]
     gyro_values.imu_gyro_z = gyro_values_m7->imu_gyro_z;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <ReadGyro+0x3c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <ReadGyro+0x40>)
 8000ca4:	6093      	str	r3, [r2, #8]
  }
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f003 fc91 	bl	80045d0 <HAL_HSEM_Release>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2400000c 	.word	0x2400000c
 8000cb8:	240000d4 	.word	0x240000d4

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09c      	sub	sp, #112	; 0x70
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	224c      	movs	r2, #76	; 0x4c
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00e fd94 	bl	800f7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00e fd8e 	bl	800f7f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f005 fbbf 	bl	8006460 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <SystemClock_Config+0xfc>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <SystemClock_Config+0xfc>)
 8000cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <SystemClock_Config+0xfc>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	4b2f      	ldr	r3, [pc, #188]	; (8000dbc <SystemClock_Config+0x100>)
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	4a2e      	ldr	r2, [pc, #184]	; (8000dbc <SystemClock_Config+0x100>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <SystemClock_Config+0x100>)
 8000d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d14:	bf00      	nop
 8000d16:	4b28      	ldr	r3, [pc, #160]	; (8000db8 <SystemClock_Config+0xfc>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d22:	d1f8      	bne.n	8000d16 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <SystemClock_Config+0x104>)
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	f023 0303 	bic.w	r3, r3, #3
 8000d2c:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <SystemClock_Config+0x104>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d42:	2302      	movs	r3, #2
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000d4a:	233c      	movs	r3, #60	; 0x3c
 8000d4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000d52:	230f      	movs	r3, #15
 8000d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f005 fbe2 	bl	8006534 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000d76:	f000 f86b 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	233f      	movs	r3, #63	; 0x3f
 8000d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d86:	2308      	movs	r3, #8
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8e:	2340      	movs	r3, #64	; 0x40
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 ffd7 	bl	8006d54 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000dac:	f000 f850 	bl	8000e50 <Error_Handler>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3770      	adds	r7, #112	; 0x70
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58024800 	.word	0x58024800
 8000dbc:	58000400 	.word	0x58000400
 8000dc0:	58024400 	.word	0x58024400

08000dc4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dd6:	f000 ff83 	bl	8001ce0 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000de2:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000de6:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000de8:	2312      	movs	r3, #18
 8000dea:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000df4:	2303      	movs	r3, #3
 8000df6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 ffa0 	bl	8001d50 <HAL_MPU_ConfigRegion>

  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000e14:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000e18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000e26:	2303      	movs	r3, #3
 8000e28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 ff87 	bl	8001d50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e42:	2004      	movs	r0, #4
 8000e44:	f000 ff64 	bl	8001d10 <HAL_MPU_Enable>

}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <MX_SDMMC1_SD_Init+0x44>)
 8000e64:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e78:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_SDMMC1_SD_Init+0x40>)
 8000e88:	f008 fc76 	bl	8009778 <HAL_SD_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000e92:	f7ff ffdd 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	240000ec 	.word	0x240000ec
 8000ea0:	52007000 	.word	0x52007000

08000ea4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0ba      	sub	sp, #232	; 0xe8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0318 	add.w	r3, r7, #24
 8000ec0:	22bc      	movs	r2, #188	; 0xbc
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f00e fc97 	bl	800f7f8 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a3b      	ldr	r2, [pc, #236]	; (8000fbc <HAL_SD_MspInit+0x118>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d16e      	bne.n	8000fb2 <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0318 	add.w	r3, r7, #24
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 fac2 	bl	800746c <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8000eee:	f7ff ffaf 	bl	8000e50 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000ef4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ef8:	4a31      	ldr	r2, [pc, #196]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a2a      	ldr	r2, [pc, #168]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a22      	ldr	r2, [pc, #136]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_SD_MspInit+0x11c>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f4c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f66:	230c      	movs	r3, #12
 8000f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <HAL_SD_MspInit+0x120>)
 8000f74:	f003 f962 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f90:	230c      	movs	r3, #12
 8000f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480a      	ldr	r0, [pc, #40]	; (8000fc8 <HAL_SD_MspInit+0x124>)
 8000f9e:	f003 f94d 	bl	800423c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2031      	movs	r0, #49	; 0x31
 8000fa8:	f000 fe65 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000fac:	2031      	movs	r0, #49	; 0x31
 8000fae:	f000 fe7c 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	37e8      	adds	r7, #232	; 0xe8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	52007000 	.word	0x52007000
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58020800 	.word	0x58020800
 8000fc8:	58020c00 	.word	0x58020c00

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_MspInit+0x30>)
 8000fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x30>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	58024400 	.word	0x58024400

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 fce8 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA1_Stream5_IRQHandler+0x10>)
 800105a:	f001 ff7b 	bl	8002f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	240002bc 	.word	0x240002bc

08001068 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <DMA1_Stream6_IRQHandler+0x10>)
 800106e:	f001 ff71 	bl	8002f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24000244 	.word	0x24000244

0800107c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM1_BRK_IRQHandler+0x10>)
 8001082:	f00a f9e3 	bl	800b44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000168 	.word	0x24000168

08001090 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <TIM1_UP_IRQHandler+0x10>)
 8001096:	f00a f9d9 	bl	800b44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	24000168 	.word	0x24000168

080010a4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80010aa:	f00a f9cf 	bl	800b44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000168 	.word	0x24000168

080010b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM1_CC_IRQHandler+0x10>)
 80010be:	f00a f9c5 	bl	800b44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	24000168 	.word	0x24000168

080010cc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <I2C2_EV_IRQHandler+0x10>)
 80010d2:	f003 fb21 	bl	8004718 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	24000054 	.word	0x24000054

080010e0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <I2C2_ER_IRQHandler+0x10>)
 80010e6:	f003 fb31 	bl	800474c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	24000054 	.word	0x24000054

080010f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <SDMMC1_IRQHandler+0x10>)
 80010fa:	f008 fda5 	bl	8009c48 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	240000ec 	.word	0x240000ec

08001108 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <UART4_IRQHandler+0x10>)
 800110e:	f00b fa6d 	bl	800c5ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	24000334 	.word	0x24000334

0800111c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <UART7_IRQHandler+0x10>)
 8001122:	f00b fa63 	bl	800c5ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	240001b4 	.word	0x240001b4

08001130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <OTG_FS_IRQHandler+0x10>)
 8001136:	f004 fb2f 	bl	8005798 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	240003c4 	.word	0x240003c4

08001144 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b09a      	sub	sp, #104	; 0x68
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800114a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001158:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	222c      	movs	r2, #44	; 0x2c
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f00e fb3a 	bl	800f7f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001184:	4b55      	ldr	r3, [pc, #340]	; (80012dc <MX_TIM1_Init+0x198>)
 8001186:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <MX_TIM1_Init+0x19c>)
 8001188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800118a:	4b54      	ldr	r3, [pc, #336]	; (80012dc <MX_TIM1_Init+0x198>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <MX_TIM1_Init+0x198>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001196:	4b51      	ldr	r3, [pc, #324]	; (80012dc <MX_TIM1_Init+0x198>)
 8001198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800119c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119e:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <MX_TIM1_Init+0x198>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a4:	4b4d      	ldr	r3, [pc, #308]	; (80012dc <MX_TIM1_Init+0x198>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <MX_TIM1_Init+0x198>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011b0:	484a      	ldr	r0, [pc, #296]	; (80012dc <MX_TIM1_Init+0x198>)
 80011b2:	f00a f893 	bl	800b2dc <HAL_TIM_Base_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011bc:	f7ff fe48 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ca:	4619      	mov	r1, r3
 80011cc:	4843      	ldr	r0, [pc, #268]	; (80012dc <MX_TIM1_Init+0x198>)
 80011ce:	f00a fb6d 	bl	800b8ac <HAL_TIM_ConfigClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011d8:	f7ff fe3a 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011dc:	483f      	ldr	r0, [pc, #252]	; (80012dc <MX_TIM1_Init+0x198>)
 80011de:	f00a f8d4 	bl	800b38a <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011e8:	f7ff fe32 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4837      	ldr	r0, [pc, #220]	; (80012dc <MX_TIM1_Init+0x198>)
 8001200:	f00b f880 	bl	800c304 <HAL_TIMEx_MasterConfigSynchronization>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800120a:	f7ff fe21 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120e:	2360      	movs	r3, #96	; 0x60
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001216:	2300      	movs	r3, #0
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	482a      	ldr	r0, [pc, #168]	; (80012dc <MX_TIM1_Init+0x198>)
 8001234:	f00a fa2a 	bl	800b68c <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800123e:	f7ff fe07 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001246:	2204      	movs	r2, #4
 8001248:	4619      	mov	r1, r3
 800124a:	4824      	ldr	r0, [pc, #144]	; (80012dc <MX_TIM1_Init+0x198>)
 800124c:	f00a fa1e 	bl	800b68c <HAL_TIM_PWM_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001256:	f7ff fdfb 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800125a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125e:	2208      	movs	r2, #8
 8001260:	4619      	mov	r1, r3
 8001262:	481e      	ldr	r0, [pc, #120]	; (80012dc <MX_TIM1_Init+0x198>)
 8001264:	f00a fa12 	bl	800b68c <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800126e:	f7ff fdef 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001276:	220c      	movs	r2, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM1_Init+0x198>)
 800127c:	f00a fa06 	bl	800b68c <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001286:	f7ff fde3 	bl	8000e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM1_Init+0x198>)
 80012c0:	f00b f8a8 	bl	800c414 <HAL_TIMEx_ConfigBreakDeadTime>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80012ca:	f7ff fdc1 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM1_Init+0x198>)
 80012d0:	f000 f848 	bl	8001364 <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3768      	adds	r7, #104	; 0x68
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	24000168 	.word	0x24000168
 80012e0:	40010000 	.word	0x40010000

080012e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1a      	ldr	r2, [pc, #104]	; (800135c <HAL_TIM_Base_MspInit+0x78>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12e      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_TIM_Base_MspInit+0x7c>)
 80012f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_TIM_Base_MspInit+0x7c>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_TIM_Base_MspInit+0x7c>)
 8001308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2018      	movs	r0, #24
 800131a:	f000 fcac 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800131e:	2018      	movs	r0, #24
 8001320:	f000 fcc3 	bl	8001caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2019      	movs	r0, #25
 800132a:	f000 fca4 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800132e:	2019      	movs	r0, #25
 8001330:	f000 fcbb 	bl	8001caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	201a      	movs	r0, #26
 800133a:	f000 fc9c 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800133e:	201a      	movs	r0, #26
 8001340:	f000 fcb3 	bl	8001caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	201b      	movs	r0, #27
 800134a:	f000 fc94 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800134e:	201b      	movs	r0, #27
 8001350:	f000 fcab 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40010000 	.word	0x40010000
 8001360:	58024400 	.word	0x58024400

08001364 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <HAL_TIM_MspPostInit+0xac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d13f      	bne.n	8001406 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138c:	4a21      	ldr	r2, [pc, #132]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139c:	f003 0310 	and.w	r3, r3, #16
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_TIM_MspPostInit+0xb0>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80013c2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	480e      	ldr	r0, [pc, #56]	; (8001418 <HAL_TIM_MspPostInit+0xb4>)
 80013e0:	f002 ff2c 	bl	800423c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013f6:	2301      	movs	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4806      	ldr	r0, [pc, #24]	; (800141c <HAL_TIM_MspPostInit+0xb8>)
 8001402:	f002 ff1b 	bl	800423c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40010000 	.word	0x40010000
 8001414:	58024400 	.word	0x58024400
 8001418:	58021000 	.word	0x58021000
 800141c:	58020000 	.word	0x58020000

08001420 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <MX_UART4_Init+0x94>)
 8001426:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <MX_UART4_Init+0x98>)
 8001428:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_UART4_Init+0x94>)
 800142c:	4a23      	ldr	r2, [pc, #140]	; (80014bc <MX_UART4_Init+0x9c>)
 800142e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_UART4_Init+0x94>)
 8001432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001436:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_UART4_Init+0x94>)
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_UART4_Init+0x94>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_UART4_Init+0x94>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_UART4_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <MX_UART4_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_UART4_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <MX_UART4_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_UART4_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800146c:	4811      	ldr	r0, [pc, #68]	; (80014b4 <MX_UART4_Init+0x94>)
 800146e:	f00b f86d 	bl	800c54c <HAL_UART_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001478:	f7ff fcea 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	480d      	ldr	r0, [pc, #52]	; (80014b4 <MX_UART4_Init+0x94>)
 8001480:	f00c fb15 	bl	800daae <HAL_UARTEx_SetTxFifoThreshold>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 800148a:	f7ff fce1 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4808      	ldr	r0, [pc, #32]	; (80014b4 <MX_UART4_Init+0x94>)
 8001492:	f00c fb4a 	bl	800db2a <HAL_UARTEx_SetRxFifoThreshold>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 800149c:	f7ff fcd8 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_UART4_Init+0x94>)
 80014a2:	f00c facb 	bl	800da3c <HAL_UARTEx_DisableFifoMode>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 80014ac:	f7ff fcd0 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	24000334 	.word	0x24000334
 80014b8:	40004c00 	.word	0x40004c00
 80014bc:	000186a0 	.word	0x000186a0

080014c0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_UART7_Init+0x90>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_UART7_Init+0x94>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_UART7_Init+0x90>)
 80014cc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80014d0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_UART7_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_UART7_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_UART7_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_UART7_Init+0x90>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_UART7_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_UART7_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_UART7_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <MX_UART7_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_UART7_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <MX_UART7_Init+0x90>)
 800150a:	f00b f81f 	bl	800c54c <HAL_UART_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001514:	f7ff fc9c 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_UART7_Init+0x90>)
 800151c:	f00c fac7 	bl	800daae <HAL_UARTEx_SetTxFifoThreshold>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001526:	f7ff fc93 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800152a:	2100      	movs	r1, #0
 800152c:	4808      	ldr	r0, [pc, #32]	; (8001550 <MX_UART7_Init+0x90>)
 800152e:	f00c fafc 	bl	800db2a <HAL_UARTEx_SetRxFifoThreshold>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001538:	f7ff fc8a 	bl	8000e50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_UART7_Init+0x90>)
 800153e:	f00c fa7d 	bl	800da3c <HAL_UARTEx_DisableFifoMode>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8001548:	f7ff fc82 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	240001b4 	.word	0x240001b4
 8001554:	40007800 	.word	0x40007800

08001558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ba      	sub	sp, #232	; 0xe8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	22bc      	movs	r2, #188	; 0xbc
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00e f93d 	bl	800f7f8 <memset>
  if(uartHandle->Instance==UART4)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7e      	ldr	r2, [pc, #504]	; (800177c <HAL_UART_MspInit+0x224>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d14a      	bne.n	800161e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	4618      	mov	r0, r3
 8001598:	f005 ff68 	bl	800746c <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015a2:	f7ff fc55 	bl	8000e50 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ac:	4a74      	ldr	r2, [pc, #464]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b6:	4b72      	ldr	r3, [pc, #456]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b6e      	ldr	r3, [pc, #440]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	4a6d      	ldr	r2, [pc, #436]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d4:	4b6a      	ldr	r3, [pc, #424]	; (8001780 <HAL_UART_MspInit+0x228>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e2:	2303      	movs	r3, #3
 80015e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015fa:	2308      	movs	r3, #8
 80015fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001604:	4619      	mov	r1, r3
 8001606:	485f      	ldr	r0, [pc, #380]	; (8001784 <HAL_UART_MspInit+0x22c>)
 8001608:	f002 fe18 	bl	800423c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2034      	movs	r0, #52	; 0x34
 8001612:	f000 fb30 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001616:	2034      	movs	r0, #52	; 0x34
 8001618:	f000 fb47 	bl	8001caa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 800161c:	e0a9      	b.n	8001772 <HAL_UART_MspInit+0x21a>
  else if(uartHandle->Instance==UART7)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a59      	ldr	r2, [pc, #356]	; (8001788 <HAL_UART_MspInit+0x230>)
 8001624:	4293      	cmp	r3, r2
 8001626:	f040 80a4 	bne.w	8001772 <HAL_UART_MspInit+0x21a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001634:	f107 0318 	add.w	r3, r7, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f005 ff17 	bl	800746c <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001644:	f7ff fc04 	bl	8000e50 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001648:	4b4d      	ldr	r3, [pc, #308]	; (8001780 <HAL_UART_MspInit+0x228>)
 800164a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164e:	4a4c      	ldr	r2, [pc, #304]	; (8001780 <HAL_UART_MspInit+0x228>)
 8001650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001654:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001658:	4b49      	ldr	r3, [pc, #292]	; (8001780 <HAL_UART_MspInit+0x228>)
 800165a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_UART_MspInit+0x228>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_UART_MspInit+0x228>)
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_UART_MspInit+0x228>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001684:	23c0      	movs	r3, #192	; 0xc0
 8001686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800169c:	2307      	movs	r3, #7
 800169e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4838      	ldr	r0, [pc, #224]	; (800178c <HAL_UART_MspInit+0x234>)
 80016aa:	f002 fdc7 	bl	800423c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream5;
 80016ae:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016b0:	4a38      	ldr	r2, [pc, #224]	; (8001794 <HAL_UART_MspInit+0x23c>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016b6:	224f      	movs	r2, #79	; 0x4f
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c0:	4b33      	ldr	r3, [pc, #204]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80016ec:	4828      	ldr	r0, [pc, #160]	; (8001790 <HAL_UART_MspInit+0x238>)
 80016ee:	f000 fb73 	bl	8001dd8 <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80016f8:	f7ff fbaa 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_UART_MspInit+0x238>)
 8001700:	67da      	str	r2, [r3, #124]	; 0x7c
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_UART_MspInit+0x238>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream6;
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_UART_MspInit+0x240>)
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_UART_MspInit+0x244>)
 800170c:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001710:	2250      	movs	r2, #80	; 0x50
 8001712:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001716:	2240      	movs	r2, #64	; 0x40
 8001718:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <HAL_UART_MspInit+0x240>)
 800171c:	2200      	movs	r2, #0
 800171e:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001726:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_UART_MspInit+0x240>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_UART_MspInit+0x240>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8001746:	4814      	ldr	r0, [pc, #80]	; (8001798 <HAL_UART_MspInit+0x240>)
 8001748:	f000 fb46 	bl	8001dd8 <HAL_DMA_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 8001752:	f7ff fb7d 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_UART_MspInit+0x240>)
 800175a:	679a      	str	r2, [r3, #120]	; 0x78
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_UART_MspInit+0x240>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2052      	movs	r0, #82	; 0x52
 8001768:	f000 fa85 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800176c:	2052      	movs	r0, #82	; 0x52
 800176e:	f000 fa9c 	bl	8001caa <HAL_NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	37e8      	adds	r7, #232	; 0xe8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40004c00 	.word	0x40004c00
 8001780:	58024400 	.word	0x58024400
 8001784:	58020000 	.word	0x58020000
 8001788:	40007800 	.word	0x40007800
 800178c:	58021400 	.word	0x58021400
 8001790:	240002bc 	.word	0x240002bc
 8001794:	40020088 	.word	0x40020088
 8001798:	24000244 	.word	0x24000244
 800179c:	400200a0 	.word	0x400200a0

080017a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017a6:	4a16      	ldr	r2, [pc, #88]	; (8001800 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ac:	2209      	movs	r2, #9
 80017ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017be:	2202      	movs	r2, #2
 80017c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e8:	f003 feb2 	bl	8005550 <HAL_PCD_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80017f2:	f7ff fb2d 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	240003c4 	.word	0x240003c4
 8001800:	40080000 	.word	0x40080000

08001804 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0b8      	sub	sp, #224	; 0xe0
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	22bc      	movs	r2, #188	; 0xbc
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f00d ffe7 	bl	800f7f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2b      	ldr	r2, [pc, #172]	; (80018dc <HAL_PCD_MspInit+0xd8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d14e      	bne.n	80018d2 <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001834:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001838:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800183a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800183e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4618      	mov	r0, r3
 8001848:	f005 fe10 	bl	800746c <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001852:	f7ff fafd 	bl	8000e50 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001856:	f004 fe5d 	bl	8006514 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_PCD_MspInit+0xdc>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001860:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_PCD_MspInit+0xdc>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_PCD_MspInit+0xdc>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001878:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800187c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001892:	230a      	movs	r3, #10
 8001894:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800189c:	4619      	mov	r1, r3
 800189e:	4811      	ldr	r0, [pc, #68]	; (80018e4 <HAL_PCD_MspInit+0xe0>)
 80018a0:	f002 fccc 	bl	800423c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_PCD_MspInit+0xdc>)
 80018a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018aa:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_PCD_MspInit+0xdc>)
 80018ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_PCD_MspInit+0xdc>)
 80018b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2065      	movs	r0, #101	; 0x65
 80018c8:	f000 f9d5 	bl	8001c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80018cc:	2065      	movs	r0, #101	; 0x65
 80018ce:	f000 f9ec 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018d2:	bf00      	nop
 80018d4:	37e0      	adds	r7, #224	; 0xe0
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40080000 	.word	0x40080000
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58020000 	.word	0x58020000

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001920 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018ec:	f7fe fe70 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	; (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f00d ff4b 	bl	800f7b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff f855 	bl	80009c8 <main>
  bx  lr
 800191e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001924:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001928:	24000024 	.word	0x24000024
  ldr r2, =_sidata
 800192c:	0800f884 	.word	0x0800f884
  ldr r2, =_sbss
 8001930:	24000024 	.word	0x24000024
  ldr r4, =_ebss
 8001934:	2400283c 	.word	0x2400283c

08001938 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC3_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001942:	2003      	movs	r0, #3
 8001944:	f000 f98c 	bl	8001c60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001948:	f005 fbba 	bl	80070c0 <HAL_RCC_GetSysClockFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_Init+0x68>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	4913      	ldr	r1, [pc, #76]	; (80019a8 <HAL_Init+0x6c>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_Init+0x68>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_Init+0x6c>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_Init+0x70>)
 800197e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_Init+0x74>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f814 	bl	80019b4 <HAL_InitTick>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e002      	b.n	800199c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001996:	f7ff fb19 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	58024400 	.word	0x58024400
 80019a8:	0800f820 	.word	0x0800f820
 80019ac:	24000004 	.word	0x24000004
 80019b0:	24000000 	.word	0x24000000

080019b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019bc:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_InitTick+0x60>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e021      	b.n	8001a0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_InitTick+0x64>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_InitTick+0x60>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f971 	bl	8001cc6 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f93b 	bl	8001c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x68>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	24000020 	.word	0x24000020
 8001a18:	24000000 	.word	0x24000000
 8001a1c:	2400001c 	.word	0x2400001c

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	24000020 	.word	0x24000020
 8001a44:	240007cc 	.word	0x240007cc

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	240007cc 	.word	0x240007cc

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	24000020 	.word	0x24000020

08001aa8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetREVID+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	5c001000 	.word	0x5c001000

08001ac0 <__NVIC_SetPriorityGrouping>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <__NVIC_SetPriorityGrouping+0x40>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00
 8001b04:	05fa0000 	.word	0x05fa0000

08001b08 <__NVIC_GetPriorityGrouping>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4907      	ldr	r1, [pc, #28]	; (8001b5c <__NVIC_EnableIRQ+0x38>)
 8001b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db0a      	blt.n	8001b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <__NVIC_SetPriority+0x4c>)
 8001b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	440b      	add	r3, r1
 8001b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b88:	e00a      	b.n	8001ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <__NVIC_SetPriority+0x50>)
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3b04      	subs	r3, #4
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	761a      	strb	r2, [r3, #24]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000e100 	.word	0xe000e100
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <NVIC_EncodePriority>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b089      	sub	sp, #36	; 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f1c3 0307 	rsb	r3, r3, #7
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	bf28      	it	cs
 8001bd2:	2304      	movcs	r3, #4
 8001bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d902      	bls.n	8001be4 <NVIC_EncodePriority+0x30>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3b03      	subs	r3, #3
 8001be2:	e000      	b.n	8001be6 <NVIC_EncodePriority+0x32>
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa01 f303 	lsl.w	r3, r1, r3
 8001c06:	43d9      	mvns	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	4313      	orrs	r3, r2
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	; 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d301      	bcc.n	8001c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00f      	b.n	8001c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <SysTick_Config+0x40>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3a:	210f      	movs	r1, #15
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f7ff ff8e 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SysTick_Config+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SysTick_Config+0x40>)
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	e000e010 	.word	0xe000e010

08001c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff29 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff40 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ff90 	bl	8001bb4 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff5f 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff33 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ffa4 	bl	8001c1c <SysTick_Config>
 8001cd4:	4603      	mov	r3, r0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ce4:	f3bf 8f5f 	dmb	sy
}
 8001ce8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_MPU_Disable+0x28>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_MPU_Disable+0x28>)
 8001cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_MPU_Disable+0x2c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00
 8001d0c:	e000ed90 	.word	0xe000ed90

08001d10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_MPU_Enable+0x38>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MPU_Enable+0x3c>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_MPU_Enable+0x3c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2e:	f3bf 8f4f 	dsb	sy
}
 8001d32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d34:	f3bf 8f6f 	isb	sy
}
 8001d38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed90 	.word	0xe000ed90
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_MPU_ConfigRegion+0x84>)
 8001d5e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d029      	beq.n	8001dbc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001d68:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <HAL_MPU_ConfigRegion+0x84>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7adb      	ldrb	r3, [r3, #11]
 8001d7a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7a9b      	ldrb	r3, [r3, #10]
 8001d82:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7b5b      	ldrb	r3, [r3, #13]
 8001d8a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7b9b      	ldrb	r3, [r3, #14]
 8001d92:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7bdb      	ldrb	r3, [r3, #15]
 8001d9a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7a5b      	ldrb	r3, [r3, #9]
 8001da2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001da4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7a1b      	ldrb	r3, [r3, #8]
 8001daa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001dac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001db6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001db8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001dba:	e005      	b.n	8001dc8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_MPU_ConfigRegion+0x84>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_MPU_ConfigRegion+0x84>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed90 	.word	0xe000ed90

08001dd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fe32 	bl	8001a48 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e316      	b.n	800241e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a66      	ldr	r2, [pc, #408]	; (8001f90 <HAL_DMA_Init+0x1b8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04a      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_DMA_Init+0x1bc>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d045      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a63      	ldr	r2, [pc, #396]	; (8001f98 <HAL_DMA_Init+0x1c0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d040      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a62      	ldr	r2, [pc, #392]	; (8001f9c <HAL_DMA_Init+0x1c4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d03b      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a60      	ldr	r2, [pc, #384]	; (8001fa0 <HAL_DMA_Init+0x1c8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d036      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a5f      	ldr	r2, [pc, #380]	; (8001fa4 <HAL_DMA_Init+0x1cc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a5d      	ldr	r2, [pc, #372]	; (8001fa8 <HAL_DMA_Init+0x1d0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d02c      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5c      	ldr	r2, [pc, #368]	; (8001fac <HAL_DMA_Init+0x1d4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d027      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a5a      	ldr	r2, [pc, #360]	; (8001fb0 <HAL_DMA_Init+0x1d8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d022      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a59      	ldr	r2, [pc, #356]	; (8001fb4 <HAL_DMA_Init+0x1dc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d01d      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <HAL_DMA_Init+0x1e0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d018      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <HAL_DMA_Init+0x1e4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d013      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a54      	ldr	r2, [pc, #336]	; (8001fc0 <HAL_DMA_Init+0x1e8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00e      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a53      	ldr	r2, [pc, #332]	; (8001fc4 <HAL_DMA_Init+0x1ec>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_DMA_Init+0x1f0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Init+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <HAL_DMA_Init+0x1f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_DMA_Init+0xbc>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_DMA_Init+0xbe>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 813b 	beq.w	8002112 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a37      	ldr	r2, [pc, #220]	; (8001f90 <HAL_DMA_Init+0x1b8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d04a      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_DMA_Init+0x1bc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d045      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a34      	ldr	r2, [pc, #208]	; (8001f98 <HAL_DMA_Init+0x1c0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d040      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a33      	ldr	r2, [pc, #204]	; (8001f9c <HAL_DMA_Init+0x1c4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d03b      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a31      	ldr	r2, [pc, #196]	; (8001fa0 <HAL_DMA_Init+0x1c8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d036      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <HAL_DMA_Init+0x1cc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d031      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2e      	ldr	r2, [pc, #184]	; (8001fa8 <HAL_DMA_Init+0x1d0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d02c      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a2d      	ldr	r2, [pc, #180]	; (8001fac <HAL_DMA_Init+0x1d4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d027      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2b      	ldr	r2, [pc, #172]	; (8001fb0 <HAL_DMA_Init+0x1d8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d022      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a2a      	ldr	r2, [pc, #168]	; (8001fb4 <HAL_DMA_Init+0x1dc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d01d      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <HAL_DMA_Init+0x1e0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d018      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <HAL_DMA_Init+0x1e4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <HAL_DMA_Init+0x1e8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00e      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <HAL_DMA_Init+0x1ec>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_DMA_Init+0x1f0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d004      	beq.n	8001f4c <HAL_DMA_Init+0x174>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a21      	ldr	r2, [pc, #132]	; (8001fcc <HAL_DMA_Init+0x1f4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d108      	bne.n	8001f5e <HAL_DMA_Init+0x186>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e007      	b.n	8001f6e <HAL_DMA_Init+0x196>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f6e:	e02f      	b.n	8001fd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f70:	f7ff fd6a 	bl	8001a48 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d928      	bls.n	8001fd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2203      	movs	r2, #3
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e246      	b.n	800241e <HAL_DMA_Init+0x646>
 8001f90:	40020010 	.word	0x40020010
 8001f94:	40020028 	.word	0x40020028
 8001f98:	40020040 	.word	0x40020040
 8001f9c:	40020058 	.word	0x40020058
 8001fa0:	40020070 	.word	0x40020070
 8001fa4:	40020088 	.word	0x40020088
 8001fa8:	400200a0 	.word	0x400200a0
 8001fac:	400200b8 	.word	0x400200b8
 8001fb0:	40020410 	.word	0x40020410
 8001fb4:	40020428 	.word	0x40020428
 8001fb8:	40020440 	.word	0x40020440
 8001fbc:	40020458 	.word	0x40020458
 8001fc0:	40020470 	.word	0x40020470
 8001fc4:	40020488 	.word	0x40020488
 8001fc8:	400204a0 	.word	0x400204a0
 8001fcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1c8      	bne.n	8001f70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4b83      	ldr	r3, [pc, #524]	; (80021f8 <HAL_DMA_Init+0x420>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ff6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002002:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2b04      	cmp	r3, #4
 8002022:	d107      	bne.n	8002034 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4313      	orrs	r3, r2
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002034:	4b71      	ldr	r3, [pc, #452]	; (80021fc <HAL_DMA_Init+0x424>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b71      	ldr	r3, [pc, #452]	; (8002200 <HAL_DMA_Init+0x428>)
 800203a:	4013      	ands	r3, r2
 800203c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002040:	d328      	bcc.n	8002094 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b28      	cmp	r3, #40	; 0x28
 8002048:	d903      	bls.n	8002052 <HAL_DMA_Init+0x27a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b2e      	cmp	r3, #46	; 0x2e
 8002050:	d917      	bls.n	8002082 <HAL_DMA_Init+0x2aa>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b3e      	cmp	r3, #62	; 0x3e
 8002058:	d903      	bls.n	8002062 <HAL_DMA_Init+0x28a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b42      	cmp	r3, #66	; 0x42
 8002060:	d90f      	bls.n	8002082 <HAL_DMA_Init+0x2aa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b46      	cmp	r3, #70	; 0x46
 8002068:	d903      	bls.n	8002072 <HAL_DMA_Init+0x29a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b48      	cmp	r3, #72	; 0x48
 8002070:	d907      	bls.n	8002082 <HAL_DMA_Init+0x2aa>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b4e      	cmp	r3, #78	; 0x4e
 8002078:	d905      	bls.n	8002086 <HAL_DMA_Init+0x2ae>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b52      	cmp	r3, #82	; 0x52
 8002080:	d801      	bhi.n	8002086 <HAL_DMA_Init+0x2ae>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_DMA_Init+0x2b0>
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002092:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f023 0307 	bic.w	r3, r3, #7
 80020aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d117      	bne.n	80020ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f001 ff29 	bl	8003f28 <DMA_CheckFifoParam>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e197      	b.n	800241e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f001 fe64 	bl	8003dc4 <DMA_CalcBaseAndBitshift>
 80020fc:	4603      	mov	r3, r0
 80020fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f003 031f 	and.w	r3, r3, #31
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	e0cd      	b.n	80022ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_DMA_Init+0x42c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d022      	beq.n	8002162 <HAL_DMA_Init+0x38a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_DMA_Init+0x430>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01d      	beq.n	8002162 <HAL_DMA_Init+0x38a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a38      	ldr	r2, [pc, #224]	; (800220c <HAL_DMA_Init+0x434>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d018      	beq.n	8002162 <HAL_DMA_Init+0x38a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a36      	ldr	r2, [pc, #216]	; (8002210 <HAL_DMA_Init+0x438>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_DMA_Init+0x38a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a35      	ldr	r2, [pc, #212]	; (8002214 <HAL_DMA_Init+0x43c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00e      	beq.n	8002162 <HAL_DMA_Init+0x38a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a33      	ldr	r2, [pc, #204]	; (8002218 <HAL_DMA_Init+0x440>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_DMA_Init+0x38a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_DMA_Init+0x444>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Init+0x38a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_DMA_Init+0x448>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_DMA_Init+0x38e>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_DMA_Init+0x390>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8097 	beq.w	800229c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a24      	ldr	r2, [pc, #144]	; (8002204 <HAL_DMA_Init+0x42c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d021      	beq.n	80021bc <HAL_DMA_Init+0x3e4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	; (8002208 <HAL_DMA_Init+0x430>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01c      	beq.n	80021bc <HAL_DMA_Init+0x3e4>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <HAL_DMA_Init+0x434>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d017      	beq.n	80021bc <HAL_DMA_Init+0x3e4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_DMA_Init+0x438>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d012      	beq.n	80021bc <HAL_DMA_Init+0x3e4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <HAL_DMA_Init+0x43c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00d      	beq.n	80021bc <HAL_DMA_Init+0x3e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <HAL_DMA_Init+0x440>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d008      	beq.n	80021bc <HAL_DMA_Init+0x3e4>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a1b      	ldr	r2, [pc, #108]	; (800221c <HAL_DMA_Init+0x444>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_Init+0x3e4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_DMA_Init+0x448>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_DMA_Init+0x44c>)
 80021da:	4013      	ands	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d020      	beq.n	8002228 <HAL_DMA_Init+0x450>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b80      	cmp	r3, #128	; 0x80
 80021ec:	d102      	bne.n	80021f4 <HAL_DMA_Init+0x41c>
 80021ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021f2:	e01a      	b.n	800222a <HAL_DMA_Init+0x452>
 80021f4:	2300      	movs	r3, #0
 80021f6:	e018      	b.n	800222a <HAL_DMA_Init+0x452>
 80021f8:	fe10803f 	.word	0xfe10803f
 80021fc:	5c001000 	.word	0x5c001000
 8002200:	ffff0000 	.word	0xffff0000
 8002204:	58025408 	.word	0x58025408
 8002208:	5802541c 	.word	0x5802541c
 800220c:	58025430 	.word	0x58025430
 8002210:	58025444 	.word	0x58025444
 8002214:	58025458 	.word	0x58025458
 8002218:	5802546c 	.word	0x5802546c
 800221c:	58025480 	.word	0x58025480
 8002220:	58025494 	.word	0x58025494
 8002224:	fffe000f 	.word	0xfffe000f
 8002228:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68d2      	ldr	r2, [r2, #12]
 800222e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002240:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002248:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002250:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002258:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b6e      	ldr	r3, [pc, #440]	; (8002428 <HAL_DMA_Init+0x650>)
 8002270:	4413      	add	r3, r2
 8002272:	4a6e      	ldr	r2, [pc, #440]	; (800242c <HAL_DMA_Init+0x654>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	009a      	lsls	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f001 fd9f 	bl	8003dc4 <DMA_CalcBaseAndBitshift>
 8002286:	4603      	mov	r3, r0
 8002288:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	2201      	movs	r2, #1
 8002294:	409a      	lsls	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	e008      	b.n	80022ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e0b7      	b.n	800241e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a5f      	ldr	r2, [pc, #380]	; (8002430 <HAL_DMA_Init+0x658>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d072      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a5d      	ldr	r2, [pc, #372]	; (8002434 <HAL_DMA_Init+0x65c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d06d      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5c      	ldr	r2, [pc, #368]	; (8002438 <HAL_DMA_Init+0x660>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d068      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5a      	ldr	r2, [pc, #360]	; (800243c <HAL_DMA_Init+0x664>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d063      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a59      	ldr	r2, [pc, #356]	; (8002440 <HAL_DMA_Init+0x668>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d05e      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a57      	ldr	r2, [pc, #348]	; (8002444 <HAL_DMA_Init+0x66c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d059      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a56      	ldr	r2, [pc, #344]	; (8002448 <HAL_DMA_Init+0x670>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d054      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a54      	ldr	r2, [pc, #336]	; (800244c <HAL_DMA_Init+0x674>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d04f      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a53      	ldr	r2, [pc, #332]	; (8002450 <HAL_DMA_Init+0x678>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d04a      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a51      	ldr	r2, [pc, #324]	; (8002454 <HAL_DMA_Init+0x67c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d045      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a50      	ldr	r2, [pc, #320]	; (8002458 <HAL_DMA_Init+0x680>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d040      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a4e      	ldr	r2, [pc, #312]	; (800245c <HAL_DMA_Init+0x684>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d03b      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a4d      	ldr	r2, [pc, #308]	; (8002460 <HAL_DMA_Init+0x688>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d036      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4b      	ldr	r2, [pc, #300]	; (8002464 <HAL_DMA_Init+0x68c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d031      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a4a      	ldr	r2, [pc, #296]	; (8002468 <HAL_DMA_Init+0x690>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d02c      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a48      	ldr	r2, [pc, #288]	; (800246c <HAL_DMA_Init+0x694>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d027      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a47      	ldr	r2, [pc, #284]	; (8002470 <HAL_DMA_Init+0x698>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d022      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a45      	ldr	r2, [pc, #276]	; (8002474 <HAL_DMA_Init+0x69c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01d      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a44      	ldr	r2, [pc, #272]	; (8002478 <HAL_DMA_Init+0x6a0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d018      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a42      	ldr	r2, [pc, #264]	; (800247c <HAL_DMA_Init+0x6a4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a41      	ldr	r2, [pc, #260]	; (8002480 <HAL_DMA_Init+0x6a8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a3f      	ldr	r2, [pc, #252]	; (8002484 <HAL_DMA_Init+0x6ac>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a3e      	ldr	r2, [pc, #248]	; (8002488 <HAL_DMA_Init+0x6b0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_DMA_Init+0x5c6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a3c      	ldr	r2, [pc, #240]	; (800248c <HAL_DMA_Init+0x6b4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_DMA_Init+0x5ca>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_DMA_Init+0x5cc>
 80023a2:	2300      	movs	r3, #0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d032      	beq.n	800240e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f001 fe39 	bl	8004020 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d102      	bne.n	80023bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d010      	beq.n	80023fc <HAL_DMA_Init+0x624>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d80c      	bhi.n	80023fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f001 feb6 	bl	8004154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e008      	b.n	800240e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	a7fdabf8 	.word	0xa7fdabf8
 800242c:	cccccccd 	.word	0xcccccccd
 8002430:	40020010 	.word	0x40020010
 8002434:	40020028 	.word	0x40020028
 8002438:	40020040 	.word	0x40020040
 800243c:	40020058 	.word	0x40020058
 8002440:	40020070 	.word	0x40020070
 8002444:	40020088 	.word	0x40020088
 8002448:	400200a0 	.word	0x400200a0
 800244c:	400200b8 	.word	0x400200b8
 8002450:	40020410 	.word	0x40020410
 8002454:	40020428 	.word	0x40020428
 8002458:	40020440 	.word	0x40020440
 800245c:	40020458 	.word	0x40020458
 8002460:	40020470 	.word	0x40020470
 8002464:	40020488 	.word	0x40020488
 8002468:	400204a0 	.word	0x400204a0
 800246c:	400204b8 	.word	0x400204b8
 8002470:	58025408 	.word	0x58025408
 8002474:	5802541c 	.word	0x5802541c
 8002478:	58025430 	.word	0x58025430
 800247c:	58025444 	.word	0x58025444
 8002480:	58025458 	.word	0x58025458
 8002484:	5802546c 	.word	0x5802546c
 8002488:	58025480 	.word	0x58025480
 800248c:	58025494 	.word	0x58025494

08002490 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff fad6 	bl	8001a48 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e2dc      	b.n	8002a62 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e2cd      	b.n	8002a62 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a76      	ldr	r2, [pc, #472]	; (80026a4 <HAL_DMA_Abort+0x214>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d04a      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a74      	ldr	r2, [pc, #464]	; (80026a8 <HAL_DMA_Abort+0x218>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d045      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a73      	ldr	r2, [pc, #460]	; (80026ac <HAL_DMA_Abort+0x21c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d040      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a71      	ldr	r2, [pc, #452]	; (80026b0 <HAL_DMA_Abort+0x220>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d03b      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a70      	ldr	r2, [pc, #448]	; (80026b4 <HAL_DMA_Abort+0x224>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d036      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a6e      	ldr	r2, [pc, #440]	; (80026b8 <HAL_DMA_Abort+0x228>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d031      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6d      	ldr	r2, [pc, #436]	; (80026bc <HAL_DMA_Abort+0x22c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d02c      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6b      	ldr	r2, [pc, #428]	; (80026c0 <HAL_DMA_Abort+0x230>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d027      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6a      	ldr	r2, [pc, #424]	; (80026c4 <HAL_DMA_Abort+0x234>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a68      	ldr	r2, [pc, #416]	; (80026c8 <HAL_DMA_Abort+0x238>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01d      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a67      	ldr	r2, [pc, #412]	; (80026cc <HAL_DMA_Abort+0x23c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a65      	ldr	r2, [pc, #404]	; (80026d0 <HAL_DMA_Abort+0x240>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a64      	ldr	r2, [pc, #400]	; (80026d4 <HAL_DMA_Abort+0x244>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a62      	ldr	r2, [pc, #392]	; (80026d8 <HAL_DMA_Abort+0x248>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a61      	ldr	r2, [pc, #388]	; (80026dc <HAL_DMA_Abort+0x24c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_Abort+0xd6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a5f      	ldr	r2, [pc, #380]	; (80026e0 <HAL_DMA_Abort+0x250>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_DMA_Abort+0xda>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_DMA_Abort+0xdc>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 021e 	bic.w	r2, r2, #30
 800257e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800258e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e00a      	b.n	80025ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020e 	bic.w	r2, r2, #14
 80025a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a3c      	ldr	r2, [pc, #240]	; (80026a4 <HAL_DMA_Abort+0x214>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d072      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_DMA_Abort+0x218>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d06d      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a39      	ldr	r2, [pc, #228]	; (80026ac <HAL_DMA_Abort+0x21c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d068      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a37      	ldr	r2, [pc, #220]	; (80026b0 <HAL_DMA_Abort+0x220>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d063      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a36      	ldr	r2, [pc, #216]	; (80026b4 <HAL_DMA_Abort+0x224>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d05e      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <HAL_DMA_Abort+0x228>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d059      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_DMA_Abort+0x22c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d054      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <HAL_DMA_Abort+0x230>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d04f      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_DMA_Abort+0x234>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d04a      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2e      	ldr	r2, [pc, #184]	; (80026c8 <HAL_DMA_Abort+0x238>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d045      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <HAL_DMA_Abort+0x23c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d040      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <HAL_DMA_Abort+0x240>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d03b      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <HAL_DMA_Abort+0x244>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d036      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_DMA_Abort+0x248>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d031      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a27      	ldr	r2, [pc, #156]	; (80026dc <HAL_DMA_Abort+0x24c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d02c      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_DMA_Abort+0x250>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d027      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <HAL_DMA_Abort+0x254>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d022      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_DMA_Abort+0x258>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01d      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_DMA_Abort+0x25c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d018      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_DMA_Abort+0x260>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <HAL_DMA_Abort+0x264>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00e      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <HAL_DMA_Abort+0x268>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d009      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_DMA_Abort+0x26c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d004      	beq.n	800269e <HAL_DMA_Abort+0x20e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_DMA_Abort+0x270>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d132      	bne.n	8002704 <HAL_DMA_Abort+0x274>
 800269e:	2301      	movs	r3, #1
 80026a0:	e031      	b.n	8002706 <HAL_DMA_Abort+0x276>
 80026a2:	bf00      	nop
 80026a4:	40020010 	.word	0x40020010
 80026a8:	40020028 	.word	0x40020028
 80026ac:	40020040 	.word	0x40020040
 80026b0:	40020058 	.word	0x40020058
 80026b4:	40020070 	.word	0x40020070
 80026b8:	40020088 	.word	0x40020088
 80026bc:	400200a0 	.word	0x400200a0
 80026c0:	400200b8 	.word	0x400200b8
 80026c4:	40020410 	.word	0x40020410
 80026c8:	40020428 	.word	0x40020428
 80026cc:	40020440 	.word	0x40020440
 80026d0:	40020458 	.word	0x40020458
 80026d4:	40020470 	.word	0x40020470
 80026d8:	40020488 	.word	0x40020488
 80026dc:	400204a0 	.word	0x400204a0
 80026e0:	400204b8 	.word	0x400204b8
 80026e4:	58025408 	.word	0x58025408
 80026e8:	5802541c 	.word	0x5802541c
 80026ec:	58025430 	.word	0x58025430
 80026f0:	58025444 	.word	0x58025444
 80026f4:	58025458 	.word	0x58025458
 80026f8:	5802546c 	.word	0x5802546c
 80026fc:	58025480 	.word	0x58025480
 8002700:	58025494 	.word	0x58025494
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002718:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a6d      	ldr	r2, [pc, #436]	; (80028d4 <HAL_DMA_Abort+0x444>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d04a      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6b      	ldr	r2, [pc, #428]	; (80028d8 <HAL_DMA_Abort+0x448>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d045      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6a      	ldr	r2, [pc, #424]	; (80028dc <HAL_DMA_Abort+0x44c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d040      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a68      	ldr	r2, [pc, #416]	; (80028e0 <HAL_DMA_Abort+0x450>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d03b      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a67      	ldr	r2, [pc, #412]	; (80028e4 <HAL_DMA_Abort+0x454>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d036      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_DMA_Abort+0x458>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d031      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a64      	ldr	r2, [pc, #400]	; (80028ec <HAL_DMA_Abort+0x45c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d02c      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a62      	ldr	r2, [pc, #392]	; (80028f0 <HAL_DMA_Abort+0x460>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d027      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a61      	ldr	r2, [pc, #388]	; (80028f4 <HAL_DMA_Abort+0x464>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d022      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5f      	ldr	r2, [pc, #380]	; (80028f8 <HAL_DMA_Abort+0x468>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01d      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a5e      	ldr	r2, [pc, #376]	; (80028fc <HAL_DMA_Abort+0x46c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a5c      	ldr	r2, [pc, #368]	; (8002900 <HAL_DMA_Abort+0x470>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5b      	ldr	r2, [pc, #364]	; (8002904 <HAL_DMA_Abort+0x474>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a59      	ldr	r2, [pc, #356]	; (8002908 <HAL_DMA_Abort+0x478>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_DMA_Abort+0x47c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_DMA_Abort+0x32a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a56      	ldr	r2, [pc, #344]	; (8002910 <HAL_DMA_Abort+0x480>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d108      	bne.n	80027cc <HAL_DMA_Abort+0x33c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e007      	b.n	80027dc <HAL_DMA_Abort+0x34c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027dc:	e013      	b.n	8002806 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027de:	f7ff f933 	bl	8001a48 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d90c      	bls.n	8002806 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2203      	movs	r2, #3
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e12d      	b.n	8002a62 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e5      	bne.n	80027de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <HAL_DMA_Abort+0x444>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d04a      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2d      	ldr	r2, [pc, #180]	; (80028d8 <HAL_DMA_Abort+0x448>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d045      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2c      	ldr	r2, [pc, #176]	; (80028dc <HAL_DMA_Abort+0x44c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d040      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_DMA_Abort+0x450>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d03b      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_DMA_Abort+0x454>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d036      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <HAL_DMA_Abort+0x458>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_DMA_Abort+0x45c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d02c      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <HAL_DMA_Abort+0x460>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d027      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <HAL_DMA_Abort+0x464>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <HAL_DMA_Abort+0x468>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01d      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_DMA_Abort+0x46c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d018      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <HAL_DMA_Abort+0x470>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_DMA_Abort+0x474>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_DMA_Abort+0x478>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_DMA_Abort+0x47c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_DMA_Abort+0x422>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a18      	ldr	r2, [pc, #96]	; (8002910 <HAL_DMA_Abort+0x480>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Abort+0x426>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_DMA_Abort+0x428>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d02b      	beq.n	8002914 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	223f      	movs	r2, #63	; 0x3f
 80028cc:	409a      	lsls	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	e02a      	b.n	800292a <HAL_DMA_Abort+0x49a>
 80028d4:	40020010 	.word	0x40020010
 80028d8:	40020028 	.word	0x40020028
 80028dc:	40020040 	.word	0x40020040
 80028e0:	40020058 	.word	0x40020058
 80028e4:	40020070 	.word	0x40020070
 80028e8:	40020088 	.word	0x40020088
 80028ec:	400200a0 	.word	0x400200a0
 80028f0:	400200b8 	.word	0x400200b8
 80028f4:	40020410 	.word	0x40020410
 80028f8:	40020428 	.word	0x40020428
 80028fc:	40020440 	.word	0x40020440
 8002900:	40020458 	.word	0x40020458
 8002904:	40020470 	.word	0x40020470
 8002908:	40020488 	.word	0x40020488
 800290c:	400204a0 	.word	0x400204a0
 8002910:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a4f      	ldr	r2, [pc, #316]	; (8002a6c <HAL_DMA_Abort+0x5dc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d072      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a4d      	ldr	r2, [pc, #308]	; (8002a70 <HAL_DMA_Abort+0x5e0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d06d      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4c      	ldr	r2, [pc, #304]	; (8002a74 <HAL_DMA_Abort+0x5e4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d068      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a4a      	ldr	r2, [pc, #296]	; (8002a78 <HAL_DMA_Abort+0x5e8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d063      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <HAL_DMA_Abort+0x5ec>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d05e      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a47      	ldr	r2, [pc, #284]	; (8002a80 <HAL_DMA_Abort+0x5f0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d059      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a46      	ldr	r2, [pc, #280]	; (8002a84 <HAL_DMA_Abort+0x5f4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d054      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a44      	ldr	r2, [pc, #272]	; (8002a88 <HAL_DMA_Abort+0x5f8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04f      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a43      	ldr	r2, [pc, #268]	; (8002a8c <HAL_DMA_Abort+0x5fc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d04a      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a41      	ldr	r2, [pc, #260]	; (8002a90 <HAL_DMA_Abort+0x600>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d045      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <HAL_DMA_Abort+0x604>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d040      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a3e      	ldr	r2, [pc, #248]	; (8002a98 <HAL_DMA_Abort+0x608>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d03b      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a3d      	ldr	r2, [pc, #244]	; (8002a9c <HAL_DMA_Abort+0x60c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d036      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_DMA_Abort+0x610>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3a      	ldr	r2, [pc, #232]	; (8002aa4 <HAL_DMA_Abort+0x614>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d02c      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <HAL_DMA_Abort+0x618>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <HAL_DMA_Abort+0x61c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a35      	ldr	r2, [pc, #212]	; (8002ab0 <HAL_DMA_Abort+0x620>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01d      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a34      	ldr	r2, [pc, #208]	; (8002ab4 <HAL_DMA_Abort+0x624>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <HAL_DMA_Abort+0x628>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a31      	ldr	r2, [pc, #196]	; (8002abc <HAL_DMA_Abort+0x62c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <HAL_DMA_Abort+0x630>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2e      	ldr	r2, [pc, #184]	; (8002ac4 <HAL_DMA_Abort+0x634>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_DMA_Abort+0x58a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2c      	ldr	r2, [pc, #176]	; (8002ac8 <HAL_DMA_Abort+0x638>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_DMA_Abort+0x58e>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_DMA_Abort+0x590>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a2c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a44:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a4e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40020010 	.word	0x40020010
 8002a70:	40020028 	.word	0x40020028
 8002a74:	40020040 	.word	0x40020040
 8002a78:	40020058 	.word	0x40020058
 8002a7c:	40020070 	.word	0x40020070
 8002a80:	40020088 	.word	0x40020088
 8002a84:	400200a0 	.word	0x400200a0
 8002a88:	400200b8 	.word	0x400200b8
 8002a8c:	40020410 	.word	0x40020410
 8002a90:	40020428 	.word	0x40020428
 8002a94:	40020440 	.word	0x40020440
 8002a98:	40020458 	.word	0x40020458
 8002a9c:	40020470 	.word	0x40020470
 8002aa0:	40020488 	.word	0x40020488
 8002aa4:	400204a0 	.word	0x400204a0
 8002aa8:	400204b8 	.word	0x400204b8
 8002aac:	58025408 	.word	0x58025408
 8002ab0:	5802541c 	.word	0x5802541c
 8002ab4:	58025430 	.word	0x58025430
 8002ab8:	58025444 	.word	0x58025444
 8002abc:	58025458 	.word	0x58025458
 8002ac0:	5802546c 	.word	0x5802546c
 8002ac4:	58025480 	.word	0x58025480
 8002ac8:	58025494 	.word	0x58025494

08002acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e205      	b.n	8002eea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e1fa      	b.n	8002eea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a8c      	ldr	r2, [pc, #560]	; (8002d2c <HAL_DMA_Abort_IT+0x260>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d04a      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a8b      	ldr	r2, [pc, #556]	; (8002d30 <HAL_DMA_Abort_IT+0x264>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d045      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a89      	ldr	r2, [pc, #548]	; (8002d34 <HAL_DMA_Abort_IT+0x268>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d040      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a88      	ldr	r2, [pc, #544]	; (8002d38 <HAL_DMA_Abort_IT+0x26c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d03b      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a86      	ldr	r2, [pc, #536]	; (8002d3c <HAL_DMA_Abort_IT+0x270>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d036      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a85      	ldr	r2, [pc, #532]	; (8002d40 <HAL_DMA_Abort_IT+0x274>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d031      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a83      	ldr	r2, [pc, #524]	; (8002d44 <HAL_DMA_Abort_IT+0x278>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02c      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a82      	ldr	r2, [pc, #520]	; (8002d48 <HAL_DMA_Abort_IT+0x27c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d027      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a80      	ldr	r2, [pc, #512]	; (8002d4c <HAL_DMA_Abort_IT+0x280>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d022      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7f      	ldr	r2, [pc, #508]	; (8002d50 <HAL_DMA_Abort_IT+0x284>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d01d      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a7d      	ldr	r2, [pc, #500]	; (8002d54 <HAL_DMA_Abort_IT+0x288>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d018      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a7c      	ldr	r2, [pc, #496]	; (8002d58 <HAL_DMA_Abort_IT+0x28c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7a      	ldr	r2, [pc, #488]	; (8002d5c <HAL_DMA_Abort_IT+0x290>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00e      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a79      	ldr	r2, [pc, #484]	; (8002d60 <HAL_DMA_Abort_IT+0x294>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a77      	ldr	r2, [pc, #476]	; (8002d64 <HAL_DMA_Abort_IT+0x298>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_DMA_Abort_IT+0xc8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a76      	ldr	r2, [pc, #472]	; (8002d68 <HAL_DMA_Abort_IT+0x29c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_DMA_Abort_IT+0xcc>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_DMA_Abort_IT+0xce>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d065      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a60      	ldr	r2, [pc, #384]	; (8002d2c <HAL_DMA_Abort_IT+0x260>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04a      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5e      	ldr	r2, [pc, #376]	; (8002d30 <HAL_DMA_Abort_IT+0x264>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d045      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a5d      	ldr	r2, [pc, #372]	; (8002d34 <HAL_DMA_Abort_IT+0x268>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d040      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a5b      	ldr	r2, [pc, #364]	; (8002d38 <HAL_DMA_Abort_IT+0x26c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d03b      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5a      	ldr	r2, [pc, #360]	; (8002d3c <HAL_DMA_Abort_IT+0x270>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d036      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a58      	ldr	r2, [pc, #352]	; (8002d40 <HAL_DMA_Abort_IT+0x274>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_DMA_Abort_IT+0x278>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d02c      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_DMA_Abort_IT+0x27c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d027      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_DMA_Abort_IT+0x280>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a52      	ldr	r2, [pc, #328]	; (8002d50 <HAL_DMA_Abort_IT+0x284>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a51      	ldr	r2, [pc, #324]	; (8002d54 <HAL_DMA_Abort_IT+0x288>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_DMA_Abort_IT+0x28c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a4e      	ldr	r2, [pc, #312]	; (8002d5c <HAL_DMA_Abort_IT+0x290>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	; (8002d60 <HAL_DMA_Abort_IT+0x294>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_DMA_Abort_IT+0x298>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_Abort_IT+0x17a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a49      	ldr	r2, [pc, #292]	; (8002d68 <HAL_DMA_Abort_IT+0x29c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d108      	bne.n	8002c58 <HAL_DMA_Abort_IT+0x18c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e147      	b.n	8002ee8 <HAL_DMA_Abort_IT+0x41c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e13e      	b.n	8002ee8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 020e 	bic.w	r2, r2, #14
 8002c78:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_DMA_Abort_IT+0x260>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d04a      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a29      	ldr	r2, [pc, #164]	; (8002d30 <HAL_DMA_Abort_IT+0x264>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d045      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_DMA_Abort_IT+0x268>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d040      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <HAL_DMA_Abort_IT+0x26c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d03b      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_DMA_Abort_IT+0x270>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d036      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a23      	ldr	r2, [pc, #140]	; (8002d40 <HAL_DMA_Abort_IT+0x274>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d031      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_DMA_Abort_IT+0x278>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d02c      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <HAL_DMA_Abort_IT+0x27c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d027      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_DMA_Abort_IT+0x280>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_DMA_Abort_IT+0x284>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01d      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_DMA_Abort_IT+0x288>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d018      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_DMA_Abort_IT+0x28c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a19      	ldr	r2, [pc, #100]	; (8002d5c <HAL_DMA_Abort_IT+0x290>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00e      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_DMA_Abort_IT+0x294>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_DMA_Abort_IT+0x298>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_DMA_Abort_IT+0x24e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_DMA_Abort_IT+0x29c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d128      	bne.n	8002d6c <HAL_DMA_Abort_IT+0x2a0>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e027      	b.n	8002d7c <HAL_DMA_Abort_IT+0x2b0>
 8002d2c:	40020010 	.word	0x40020010
 8002d30:	40020028 	.word	0x40020028
 8002d34:	40020040 	.word	0x40020040
 8002d38:	40020058 	.word	0x40020058
 8002d3c:	40020070 	.word	0x40020070
 8002d40:	40020088 	.word	0x40020088
 8002d44:	400200a0 	.word	0x400200a0
 8002d48:	400200b8 	.word	0x400200b8
 8002d4c:	40020410 	.word	0x40020410
 8002d50:	40020428 	.word	0x40020428
 8002d54:	40020440 	.word	0x40020440
 8002d58:	40020458 	.word	0x40020458
 8002d5c:	40020470 	.word	0x40020470
 8002d60:	40020488 	.word	0x40020488
 8002d64:	400204a0 	.word	0x400204a0
 8002d68:	400204b8 	.word	0x400204b8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_DMA_Abort_IT+0x428>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d072      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5b      	ldr	r2, [pc, #364]	; (8002ef8 <HAL_DMA_Abort_IT+0x42c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d06d      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a59      	ldr	r2, [pc, #356]	; (8002efc <HAL_DMA_Abort_IT+0x430>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d068      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a58      	ldr	r2, [pc, #352]	; (8002f00 <HAL_DMA_Abort_IT+0x434>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d063      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_DMA_Abort_IT+0x438>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d05e      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a55      	ldr	r2, [pc, #340]	; (8002f08 <HAL_DMA_Abort_IT+0x43c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d059      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a53      	ldr	r2, [pc, #332]	; (8002f0c <HAL_DMA_Abort_IT+0x440>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d054      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a52      	ldr	r2, [pc, #328]	; (8002f10 <HAL_DMA_Abort_IT+0x444>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d04f      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a50      	ldr	r2, [pc, #320]	; (8002f14 <HAL_DMA_Abort_IT+0x448>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d04a      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a4f      	ldr	r2, [pc, #316]	; (8002f18 <HAL_DMA_Abort_IT+0x44c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d045      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a4d      	ldr	r2, [pc, #308]	; (8002f1c <HAL_DMA_Abort_IT+0x450>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d040      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4c      	ldr	r2, [pc, #304]	; (8002f20 <HAL_DMA_Abort_IT+0x454>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d03b      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4a      	ldr	r2, [pc, #296]	; (8002f24 <HAL_DMA_Abort_IT+0x458>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d036      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a49      	ldr	r2, [pc, #292]	; (8002f28 <HAL_DMA_Abort_IT+0x45c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d031      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a47      	ldr	r2, [pc, #284]	; (8002f2c <HAL_DMA_Abort_IT+0x460>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02c      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a46      	ldr	r2, [pc, #280]	; (8002f30 <HAL_DMA_Abort_IT+0x464>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d027      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a44      	ldr	r2, [pc, #272]	; (8002f34 <HAL_DMA_Abort_IT+0x468>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a43      	ldr	r2, [pc, #268]	; (8002f38 <HAL_DMA_Abort_IT+0x46c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d01d      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a41      	ldr	r2, [pc, #260]	; (8002f3c <HAL_DMA_Abort_IT+0x470>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d018      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a40      	ldr	r2, [pc, #256]	; (8002f40 <HAL_DMA_Abort_IT+0x474>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a3e      	ldr	r2, [pc, #248]	; (8002f44 <HAL_DMA_Abort_IT+0x478>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a3d      	ldr	r2, [pc, #244]	; (8002f48 <HAL_DMA_Abort_IT+0x47c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <HAL_DMA_Abort_IT+0x480>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x3a0>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a3a      	ldr	r2, [pc, #232]	; (8002f50 <HAL_DMA_Abort_IT+0x484>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_DMA_Abort_IT+0x3a4>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_Abort_IT+0x3a6>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d028      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	2201      	movs	r2, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ea4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ebc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ec6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40020010 	.word	0x40020010
 8002ef8:	40020028 	.word	0x40020028
 8002efc:	40020040 	.word	0x40020040
 8002f00:	40020058 	.word	0x40020058
 8002f04:	40020070 	.word	0x40020070
 8002f08:	40020088 	.word	0x40020088
 8002f0c:	400200a0 	.word	0x400200a0
 8002f10:	400200b8 	.word	0x400200b8
 8002f14:	40020410 	.word	0x40020410
 8002f18:	40020428 	.word	0x40020428
 8002f1c:	40020440 	.word	0x40020440
 8002f20:	40020458 	.word	0x40020458
 8002f24:	40020470 	.word	0x40020470
 8002f28:	40020488 	.word	0x40020488
 8002f2c:	400204a0 	.word	0x400204a0
 8002f30:	400204b8 	.word	0x400204b8
 8002f34:	58025408 	.word	0x58025408
 8002f38:	5802541c 	.word	0x5802541c
 8002f3c:	58025430 	.word	0x58025430
 8002f40:	58025444 	.word	0x58025444
 8002f44:	58025458 	.word	0x58025458
 8002f48:	5802546c 	.word	0x5802546c
 8002f4c:	58025480 	.word	0x58025480
 8002f50:	58025494 	.word	0x58025494

08002f54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f60:	4b67      	ldr	r3, [pc, #412]	; (8003100 <HAL_DMA_IRQHandler+0x1ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a67      	ldr	r2, [pc, #412]	; (8003104 <HAL_DMA_IRQHandler+0x1b0>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0a9b      	lsrs	r3, r3, #10
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5f      	ldr	r2, [pc, #380]	; (8003108 <HAL_DMA_IRQHandler+0x1b4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d04a      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a5d      	ldr	r2, [pc, #372]	; (800310c <HAL_DMA_IRQHandler+0x1b8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d045      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a5c      	ldr	r2, [pc, #368]	; (8003110 <HAL_DMA_IRQHandler+0x1bc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d040      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5a      	ldr	r2, [pc, #360]	; (8003114 <HAL_DMA_IRQHandler+0x1c0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d03b      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a59      	ldr	r2, [pc, #356]	; (8003118 <HAL_DMA_IRQHandler+0x1c4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d036      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a57      	ldr	r2, [pc, #348]	; (800311c <HAL_DMA_IRQHandler+0x1c8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d031      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a56      	ldr	r2, [pc, #344]	; (8003120 <HAL_DMA_IRQHandler+0x1cc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d02c      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a54      	ldr	r2, [pc, #336]	; (8003124 <HAL_DMA_IRQHandler+0x1d0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d027      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a53      	ldr	r2, [pc, #332]	; (8003128 <HAL_DMA_IRQHandler+0x1d4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a51      	ldr	r2, [pc, #324]	; (800312c <HAL_DMA_IRQHandler+0x1d8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01d      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a50      	ldr	r2, [pc, #320]	; (8003130 <HAL_DMA_IRQHandler+0x1dc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d018      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a4e      	ldr	r2, [pc, #312]	; (8003134 <HAL_DMA_IRQHandler+0x1e0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a4d      	ldr	r2, [pc, #308]	; (8003138 <HAL_DMA_IRQHandler+0x1e4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00e      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a4b      	ldr	r2, [pc, #300]	; (800313c <HAL_DMA_IRQHandler+0x1e8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a4a      	ldr	r2, [pc, #296]	; (8003140 <HAL_DMA_IRQHandler+0x1ec>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_DMA_IRQHandler+0xd2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_DMA_IRQHandler+0x1f0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_DMA_IRQHandler+0xd6>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_DMA_IRQHandler+0xd8>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 842b 	beq.w	8003888 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2208      	movs	r2, #8
 800303c:	409a      	lsls	r2, r3
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80a2 	beq.w	800318c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2e      	ldr	r2, [pc, #184]	; (8003108 <HAL_DMA_IRQHandler+0x1b4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d04a      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2d      	ldr	r2, [pc, #180]	; (800310c <HAL_DMA_IRQHandler+0x1b8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d045      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <HAL_DMA_IRQHandler+0x1bc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d040      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <HAL_DMA_IRQHandler+0x1c0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d03b      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a28      	ldr	r2, [pc, #160]	; (8003118 <HAL_DMA_IRQHandler+0x1c4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d036      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_DMA_IRQHandler+0x1c8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d031      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <HAL_DMA_IRQHandler+0x1cc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02c      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <HAL_DMA_IRQHandler+0x1d0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d027      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_DMA_IRQHandler+0x1d4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <HAL_DMA_IRQHandler+0x1d8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <HAL_DMA_IRQHandler+0x1dc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d018      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <HAL_DMA_IRQHandler+0x1e0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_DMA_IRQHandler+0x1e4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_DMA_IRQHandler+0x1e8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <HAL_DMA_IRQHandler+0x1ec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x194>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <HAL_DMA_IRQHandler+0x1f0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d12f      	bne.n	8003148 <HAL_DMA_IRQHandler+0x1f4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e02e      	b.n	800315c <HAL_DMA_IRQHandler+0x208>
 80030fe:	bf00      	nop
 8003100:	24000000 	.word	0x24000000
 8003104:	1b4e81b5 	.word	0x1b4e81b5
 8003108:	40020010 	.word	0x40020010
 800310c:	40020028 	.word	0x40020028
 8003110:	40020040 	.word	0x40020040
 8003114:	40020058 	.word	0x40020058
 8003118:	40020070 	.word	0x40020070
 800311c:	40020088 	.word	0x40020088
 8003120:	400200a0 	.word	0x400200a0
 8003124:	400200b8 	.word	0x400200b8
 8003128:	40020410 	.word	0x40020410
 800312c:	40020428 	.word	0x40020428
 8003130:	40020440 	.word	0x40020440
 8003134:	40020458 	.word	0x40020458
 8003138:	40020470 	.word	0x40020470
 800313c:	40020488 	.word	0x40020488
 8003140:	400204a0 	.word	0x400204a0
 8003144:	400204b8 	.word	0x400204b8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf14      	ite	ne
 8003156:	2301      	movne	r3, #1
 8003158:	2300      	moveq	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 0204 	bic.w	r2, r2, #4
 800316e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2208      	movs	r2, #8
 800317a:	409a      	lsls	r2, r3
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d06e      	beq.n	8003280 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a69      	ldr	r2, [pc, #420]	; (800334c <HAL_DMA_IRQHandler+0x3f8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d04a      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_DMA_IRQHandler+0x3fc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d045      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a66      	ldr	r2, [pc, #408]	; (8003354 <HAL_DMA_IRQHandler+0x400>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d040      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a64      	ldr	r2, [pc, #400]	; (8003358 <HAL_DMA_IRQHandler+0x404>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d03b      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a63      	ldr	r2, [pc, #396]	; (800335c <HAL_DMA_IRQHandler+0x408>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d036      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a61      	ldr	r2, [pc, #388]	; (8003360 <HAL_DMA_IRQHandler+0x40c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d031      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a60      	ldr	r2, [pc, #384]	; (8003364 <HAL_DMA_IRQHandler+0x410>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d02c      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <HAL_DMA_IRQHandler+0x414>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d027      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_DMA_IRQHandler+0x418>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a5b      	ldr	r2, [pc, #364]	; (8003370 <HAL_DMA_IRQHandler+0x41c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d01d      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a5a      	ldr	r2, [pc, #360]	; (8003374 <HAL_DMA_IRQHandler+0x420>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d018      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a58      	ldr	r2, [pc, #352]	; (8003378 <HAL_DMA_IRQHandler+0x424>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_DMA_IRQHandler+0x428>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a55      	ldr	r2, [pc, #340]	; (8003380 <HAL_DMA_IRQHandler+0x42c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a54      	ldr	r2, [pc, #336]	; (8003384 <HAL_DMA_IRQHandler+0x430>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2ee>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a52      	ldr	r2, [pc, #328]	; (8003388 <HAL_DMA_IRQHandler+0x434>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d10a      	bne.n	8003258 <HAL_DMA_IRQHandler+0x304>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e003      	b.n	8003260 <HAL_DMA_IRQHandler+0x30c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00d      	beq.n	8003280 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	f043 0202 	orr.w	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2204      	movs	r2, #4
 800328a:	409a      	lsls	r2, r3
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 808f 	beq.w	80033b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2c      	ldr	r2, [pc, #176]	; (800334c <HAL_DMA_IRQHandler+0x3f8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <HAL_DMA_IRQHandler+0x3fc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a29      	ldr	r2, [pc, #164]	; (8003354 <HAL_DMA_IRQHandler+0x400>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a27      	ldr	r2, [pc, #156]	; (8003358 <HAL_DMA_IRQHandler+0x404>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a26      	ldr	r2, [pc, #152]	; (800335c <HAL_DMA_IRQHandler+0x408>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <HAL_DMA_IRQHandler+0x40c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a23      	ldr	r2, [pc, #140]	; (8003364 <HAL_DMA_IRQHandler+0x410>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a21      	ldr	r2, [pc, #132]	; (8003368 <HAL_DMA_IRQHandler+0x414>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a20      	ldr	r2, [pc, #128]	; (800336c <HAL_DMA_IRQHandler+0x418>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_DMA_IRQHandler+0x41c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_DMA_IRQHandler+0x420>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_DMA_IRQHandler+0x424>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1a      	ldr	r2, [pc, #104]	; (800337c <HAL_DMA_IRQHandler+0x428>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <HAL_DMA_IRQHandler+0x42c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a17      	ldr	r2, [pc, #92]	; (8003384 <HAL_DMA_IRQHandler+0x430>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_IRQHandler+0x3e2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <HAL_DMA_IRQHandler+0x434>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d12a      	bne.n	800338c <HAL_DMA_IRQHandler+0x438>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e023      	b.n	8003394 <HAL_DMA_IRQHandler+0x440>
 800334c:	40020010 	.word	0x40020010
 8003350:	40020028 	.word	0x40020028
 8003354:	40020040 	.word	0x40020040
 8003358:	40020058 	.word	0x40020058
 800335c:	40020070 	.word	0x40020070
 8003360:	40020088 	.word	0x40020088
 8003364:	400200a0 	.word	0x400200a0
 8003368:	400200b8 	.word	0x400200b8
 800336c:	40020410 	.word	0x40020410
 8003370:	40020428 	.word	0x40020428
 8003374:	40020440 	.word	0x40020440
 8003378:	40020458 	.word	0x40020458
 800337c:	40020470 	.word	0x40020470
 8003380:	40020488 	.word	0x40020488
 8003384:	400204a0 	.word	0x400204a0
 8003388:	400204b8 	.word	0x400204b8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	2204      	movs	r2, #4
 80033a2:	409a      	lsls	r2, r3
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f043 0204 	orr.w	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2210      	movs	r2, #16
 80033be:	409a      	lsls	r2, r3
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80a6 	beq.w	8003516 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a85      	ldr	r2, [pc, #532]	; (80035e4 <HAL_DMA_IRQHandler+0x690>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d04a      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a83      	ldr	r2, [pc, #524]	; (80035e8 <HAL_DMA_IRQHandler+0x694>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d045      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a82      	ldr	r2, [pc, #520]	; (80035ec <HAL_DMA_IRQHandler+0x698>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d040      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a80      	ldr	r2, [pc, #512]	; (80035f0 <HAL_DMA_IRQHandler+0x69c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d03b      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7f      	ldr	r2, [pc, #508]	; (80035f4 <HAL_DMA_IRQHandler+0x6a0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d036      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a7d      	ldr	r2, [pc, #500]	; (80035f8 <HAL_DMA_IRQHandler+0x6a4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7c      	ldr	r2, [pc, #496]	; (80035fc <HAL_DMA_IRQHandler+0x6a8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d02c      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a7a      	ldr	r2, [pc, #488]	; (8003600 <HAL_DMA_IRQHandler+0x6ac>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d027      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a79      	ldr	r2, [pc, #484]	; (8003604 <HAL_DMA_IRQHandler+0x6b0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d022      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a77      	ldr	r2, [pc, #476]	; (8003608 <HAL_DMA_IRQHandler+0x6b4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01d      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a76      	ldr	r2, [pc, #472]	; (800360c <HAL_DMA_IRQHandler+0x6b8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d018      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a74      	ldr	r2, [pc, #464]	; (8003610 <HAL_DMA_IRQHandler+0x6bc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a73      	ldr	r2, [pc, #460]	; (8003614 <HAL_DMA_IRQHandler+0x6c0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a71      	ldr	r2, [pc, #452]	; (8003618 <HAL_DMA_IRQHandler+0x6c4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d009      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a70      	ldr	r2, [pc, #448]	; (800361c <HAL_DMA_IRQHandler+0x6c8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_DMA_IRQHandler+0x516>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a6e      	ldr	r2, [pc, #440]	; (8003620 <HAL_DMA_IRQHandler+0x6cc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10a      	bne.n	8003480 <HAL_DMA_IRQHandler+0x52c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e009      	b.n	8003494 <HAL_DMA_IRQHandler+0x540>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d03e      	beq.n	8003516 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2210      	movs	r2, #16
 80034a2:	409a      	lsls	r2, r3
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d108      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d024      	beq.n	8003516 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
 80034d4:	e01f      	b.n	8003516 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01b      	beq.n	8003516 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
 80034e6:	e016      	b.n	8003516 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0208 	bic.w	r2, r2, #8
 8003504:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2220      	movs	r2, #32
 8003520:	409a      	lsls	r2, r3
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8110 	beq.w	800374c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <HAL_DMA_IRQHandler+0x690>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d04a      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <HAL_DMA_IRQHandler+0x694>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d045      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_DMA_IRQHandler+0x698>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d040      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a28      	ldr	r2, [pc, #160]	; (80035f0 <HAL_DMA_IRQHandler+0x69c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d03b      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_DMA_IRQHandler+0x6a0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d036      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <HAL_DMA_IRQHandler+0x6a4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d031      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a23      	ldr	r2, [pc, #140]	; (80035fc <HAL_DMA_IRQHandler+0x6a8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02c      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <HAL_DMA_IRQHandler+0x6ac>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d027      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <HAL_DMA_IRQHandler+0x6b0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d022      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <HAL_DMA_IRQHandler+0x6b4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d01d      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1d      	ldr	r2, [pc, #116]	; (800360c <HAL_DMA_IRQHandler+0x6b8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d018      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_DMA_IRQHandler+0x6bc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d013      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_DMA_IRQHandler+0x6c0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_DMA_IRQHandler+0x6c4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_DMA_IRQHandler+0x6c8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_DMA_IRQHandler+0x678>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a16      	ldr	r2, [pc, #88]	; (8003620 <HAL_DMA_IRQHandler+0x6cc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d12b      	bne.n	8003624 <HAL_DMA_IRQHandler+0x6d0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf14      	ite	ne
 80035da:	2301      	movne	r3, #1
 80035dc:	2300      	moveq	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e02a      	b.n	8003638 <HAL_DMA_IRQHandler+0x6e4>
 80035e2:	bf00      	nop
 80035e4:	40020010 	.word	0x40020010
 80035e8:	40020028 	.word	0x40020028
 80035ec:	40020040 	.word	0x40020040
 80035f0:	40020058 	.word	0x40020058
 80035f4:	40020070 	.word	0x40020070
 80035f8:	40020088 	.word	0x40020088
 80035fc:	400200a0 	.word	0x400200a0
 8003600:	400200b8 	.word	0x400200b8
 8003604:	40020410 	.word	0x40020410
 8003608:	40020428 	.word	0x40020428
 800360c:	40020440 	.word	0x40020440
 8003610:	40020458 	.word	0x40020458
 8003614:	40020470 	.word	0x40020470
 8003618:	40020488 	.word	0x40020488
 800361c:	400204a0 	.word	0x400204a0
 8003620:	400204b8 	.word	0x400204b8
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf14      	ite	ne
 8003632:	2301      	movne	r3, #1
 8003634:	2300      	moveq	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 8087 	beq.w	800374c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	2220      	movs	r2, #32
 8003648:	409a      	lsls	r2, r3
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b04      	cmp	r3, #4
 8003658:	d139      	bne.n	80036ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0216 	bic.w	r2, r2, #22
 8003668:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003678:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d103      	bne.n	800368a <HAL_DMA_IRQHandler+0x736>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0208 	bic.w	r2, r2, #8
 8003698:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	223f      	movs	r2, #63	; 0x3f
 80036a4:	409a      	lsls	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 834a 	beq.w	8003d58 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	4798      	blx	r3
          }
          return;
 80036cc:	e344      	b.n	8003d58 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d018      	beq.n	800370e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02c      	beq.n	800374c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
 80036fa:	e027      	b.n	800374c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d023      	beq.n	800374c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
 800370c:	e01e      	b.n	800374c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10f      	bne.n	800373c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0210 	bic.w	r2, r2, #16
 800372a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8306 	beq.w	8003d62 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8088 	beq.w	8003874 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7a      	ldr	r2, [pc, #488]	; (800395c <HAL_DMA_IRQHandler+0xa08>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d04a      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a79      	ldr	r2, [pc, #484]	; (8003960 <HAL_DMA_IRQHandler+0xa0c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d045      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a77      	ldr	r2, [pc, #476]	; (8003964 <HAL_DMA_IRQHandler+0xa10>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d040      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a76      	ldr	r2, [pc, #472]	; (8003968 <HAL_DMA_IRQHandler+0xa14>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d03b      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a74      	ldr	r2, [pc, #464]	; (800396c <HAL_DMA_IRQHandler+0xa18>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d036      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a73      	ldr	r2, [pc, #460]	; (8003970 <HAL_DMA_IRQHandler+0xa1c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d031      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a71      	ldr	r2, [pc, #452]	; (8003974 <HAL_DMA_IRQHandler+0xa20>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02c      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a70      	ldr	r2, [pc, #448]	; (8003978 <HAL_DMA_IRQHandler+0xa24>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d027      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6e      	ldr	r2, [pc, #440]	; (800397c <HAL_DMA_IRQHandler+0xa28>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d022      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6d      	ldr	r2, [pc, #436]	; (8003980 <HAL_DMA_IRQHandler+0xa2c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d01d      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a6b      	ldr	r2, [pc, #428]	; (8003984 <HAL_DMA_IRQHandler+0xa30>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a6a      	ldr	r2, [pc, #424]	; (8003988 <HAL_DMA_IRQHandler+0xa34>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a68      	ldr	r2, [pc, #416]	; (800398c <HAL_DMA_IRQHandler+0xa38>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a67      	ldr	r2, [pc, #412]	; (8003990 <HAL_DMA_IRQHandler+0xa3c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a65      	ldr	r2, [pc, #404]	; (8003994 <HAL_DMA_IRQHandler+0xa40>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_DMA_IRQHandler+0x8b8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a64      	ldr	r2, [pc, #400]	; (8003998 <HAL_DMA_IRQHandler+0xa44>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <HAL_DMA_IRQHandler+0x8ca>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e007      	b.n	800382e <HAL_DMA_IRQHandler+0x8da>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	429a      	cmp	r2, r3
 8003838:	d307      	bcc.n	800384a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1f2      	bne.n	800382e <HAL_DMA_IRQHandler+0x8da>
 8003848:	e000      	b.n	800384c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800384a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d004      	beq.n	800386c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2203      	movs	r2, #3
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800386a:	e003      	b.n	8003874 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8272 	beq.w	8003d62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	e26c      	b.n	8003d62 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a43      	ldr	r2, [pc, #268]	; (800399c <HAL_DMA_IRQHandler+0xa48>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d022      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x984>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_DMA_IRQHandler+0xa4c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d01d      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x984>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a40      	ldr	r2, [pc, #256]	; (80039a4 <HAL_DMA_IRQHandler+0xa50>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d018      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x984>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_DMA_IRQHandler+0xa54>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x984>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3d      	ldr	r2, [pc, #244]	; (80039ac <HAL_DMA_IRQHandler+0xa58>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00e      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x984>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a3c      	ldr	r2, [pc, #240]	; (80039b0 <HAL_DMA_IRQHandler+0xa5c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x984>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3a      	ldr	r2, [pc, #232]	; (80039b4 <HAL_DMA_IRQHandler+0xa60>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x984>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <HAL_DMA_IRQHandler+0xa64>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_DMA_IRQHandler+0x988>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_DMA_IRQHandler+0x98a>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 823f 	beq.w	8003d62 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2204      	movs	r2, #4
 80038f6:	409a      	lsls	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80cd 	beq.w	8003a9c <HAL_DMA_IRQHandler+0xb48>
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80c7 	beq.w	8003a9c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2204      	movs	r2, #4
 8003918:	409a      	lsls	r2, r3
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d049      	beq.n	80039bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8210 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003944:	e20a      	b.n	8003d5c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8206 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003958:	e200      	b.n	8003d5c <HAL_DMA_IRQHandler+0xe08>
 800395a:	bf00      	nop
 800395c:	40020010 	.word	0x40020010
 8003960:	40020028 	.word	0x40020028
 8003964:	40020040 	.word	0x40020040
 8003968:	40020058 	.word	0x40020058
 800396c:	40020070 	.word	0x40020070
 8003970:	40020088 	.word	0x40020088
 8003974:	400200a0 	.word	0x400200a0
 8003978:	400200b8 	.word	0x400200b8
 800397c:	40020410 	.word	0x40020410
 8003980:	40020428 	.word	0x40020428
 8003984:	40020440 	.word	0x40020440
 8003988:	40020458 	.word	0x40020458
 800398c:	40020470 	.word	0x40020470
 8003990:	40020488 	.word	0x40020488
 8003994:	400204a0 	.word	0x400204a0
 8003998:	400204b8 	.word	0x400204b8
 800399c:	58025408 	.word	0x58025408
 80039a0:	5802541c 	.word	0x5802541c
 80039a4:	58025430 	.word	0x58025430
 80039a8:	58025444 	.word	0x58025444
 80039ac:	58025458 	.word	0x58025458
 80039b0:	5802546c 	.word	0x5802546c
 80039b4:	58025480 	.word	0x58025480
 80039b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d160      	bne.n	8003a88 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a8c      	ldr	r2, [pc, #560]	; (8003bfc <HAL_DMA_IRQHandler+0xca8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d04a      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a8a      	ldr	r2, [pc, #552]	; (8003c00 <HAL_DMA_IRQHandler+0xcac>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d045      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a89      	ldr	r2, [pc, #548]	; (8003c04 <HAL_DMA_IRQHandler+0xcb0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d040      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a87      	ldr	r2, [pc, #540]	; (8003c08 <HAL_DMA_IRQHandler+0xcb4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d03b      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a86      	ldr	r2, [pc, #536]	; (8003c0c <HAL_DMA_IRQHandler+0xcb8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d036      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a84      	ldr	r2, [pc, #528]	; (8003c10 <HAL_DMA_IRQHandler+0xcbc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a83      	ldr	r2, [pc, #524]	; (8003c14 <HAL_DMA_IRQHandler+0xcc0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d02c      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a81      	ldr	r2, [pc, #516]	; (8003c18 <HAL_DMA_IRQHandler+0xcc4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a80      	ldr	r2, [pc, #512]	; (8003c1c <HAL_DMA_IRQHandler+0xcc8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d022      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a7e      	ldr	r2, [pc, #504]	; (8003c20 <HAL_DMA_IRQHandler+0xccc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a7d      	ldr	r2, [pc, #500]	; (8003c24 <HAL_DMA_IRQHandler+0xcd0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7b      	ldr	r2, [pc, #492]	; (8003c28 <HAL_DMA_IRQHandler+0xcd4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7a      	ldr	r2, [pc, #488]	; (8003c2c <HAL_DMA_IRQHandler+0xcd8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a78      	ldr	r2, [pc, #480]	; (8003c30 <HAL_DMA_IRQHandler+0xcdc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a77      	ldr	r2, [pc, #476]	; (8003c34 <HAL_DMA_IRQHandler+0xce0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_IRQHandler+0xb12>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_DMA_IRQHandler+0xce4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <HAL_DMA_IRQHandler+0xb24>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0208 	bic.w	r2, r2, #8
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e007      	b.n	8003a88 <HAL_DMA_IRQHandler+0xb34>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0204 	bic.w	r2, r2, #4
 8003a86:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 8165 	beq.w	8003d5c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a9a:	e15f      	b.n	8003d5c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80c5 	beq.w	8003c3c <HAL_DMA_IRQHandler+0xce8>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80bf 	beq.w	8003c3c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 813a 	beq.w	8003d60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af4:	e134      	b.n	8003d60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8130 	beq.w	8003d60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b08:	e12a      	b.n	8003d60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d168      	bne.n	8003be6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a38      	ldr	r2, [pc, #224]	; (8003bfc <HAL_DMA_IRQHandler+0xca8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04a      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a37      	ldr	r2, [pc, #220]	; (8003c00 <HAL_DMA_IRQHandler+0xcac>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d045      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a35      	ldr	r2, [pc, #212]	; (8003c04 <HAL_DMA_IRQHandler+0xcb0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d040      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a34      	ldr	r2, [pc, #208]	; (8003c08 <HAL_DMA_IRQHandler+0xcb4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03b      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a32      	ldr	r2, [pc, #200]	; (8003c0c <HAL_DMA_IRQHandler+0xcb8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a31      	ldr	r2, [pc, #196]	; (8003c10 <HAL_DMA_IRQHandler+0xcbc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d031      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a2f      	ldr	r2, [pc, #188]	; (8003c14 <HAL_DMA_IRQHandler+0xcc0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02c      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <HAL_DMA_IRQHandler+0xcc4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d027      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a2c      	ldr	r2, [pc, #176]	; (8003c1c <HAL_DMA_IRQHandler+0xcc8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <HAL_DMA_IRQHandler+0xccc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01d      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <HAL_DMA_IRQHandler+0xcd0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a28      	ldr	r2, [pc, #160]	; (8003c28 <HAL_DMA_IRQHandler+0xcd4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <HAL_DMA_IRQHandler+0xcd8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <HAL_DMA_IRQHandler+0xcdc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <HAL_DMA_IRQHandler+0xce0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_IRQHandler+0xc60>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <HAL_DMA_IRQHandler+0xce4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0xc72>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0214 	bic.w	r2, r2, #20
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e007      	b.n	8003bd6 <HAL_DMA_IRQHandler+0xc82>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 020a 	bic.w	r2, r2, #10
 8003bd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80b8 	beq.w	8003d60 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf8:	e0b2      	b.n	8003d60 <HAL_DMA_IRQHandler+0xe0c>
 8003bfa:	bf00      	nop
 8003bfc:	40020010 	.word	0x40020010
 8003c00:	40020028 	.word	0x40020028
 8003c04:	40020040 	.word	0x40020040
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	40020070 	.word	0x40020070
 8003c10:	40020088 	.word	0x40020088
 8003c14:	400200a0 	.word	0x400200a0
 8003c18:	400200b8 	.word	0x400200b8
 8003c1c:	40020410 	.word	0x40020410
 8003c20:	40020428 	.word	0x40020428
 8003c24:	40020440 	.word	0x40020440
 8003c28:	40020458 	.word	0x40020458
 8003c2c:	40020470 	.word	0x40020470
 8003c30:	40020488 	.word	0x40020488
 8003c34:	400204a0 	.word	0x400204a0
 8003c38:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2208      	movs	r2, #8
 8003c46:	409a      	lsls	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8088 	beq.w	8003d62 <HAL_DMA_IRQHandler+0xe0e>
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8082 	beq.w	8003d62 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a41      	ldr	r2, [pc, #260]	; (8003d68 <HAL_DMA_IRQHandler+0xe14>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d04a      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a3f      	ldr	r2, [pc, #252]	; (8003d6c <HAL_DMA_IRQHandler+0xe18>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d045      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a3e      	ldr	r2, [pc, #248]	; (8003d70 <HAL_DMA_IRQHandler+0xe1c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d040      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <HAL_DMA_IRQHandler+0xe20>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d03b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a3b      	ldr	r2, [pc, #236]	; (8003d78 <HAL_DMA_IRQHandler+0xe24>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d036      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a39      	ldr	r2, [pc, #228]	; (8003d7c <HAL_DMA_IRQHandler+0xe28>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d031      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a38      	ldr	r2, [pc, #224]	; (8003d80 <HAL_DMA_IRQHandler+0xe2c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d02c      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a36      	ldr	r2, [pc, #216]	; (8003d84 <HAL_DMA_IRQHandler+0xe30>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d027      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a35      	ldr	r2, [pc, #212]	; (8003d88 <HAL_DMA_IRQHandler+0xe34>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d022      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a33      	ldr	r2, [pc, #204]	; (8003d8c <HAL_DMA_IRQHandler+0xe38>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d01d      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a32      	ldr	r2, [pc, #200]	; (8003d90 <HAL_DMA_IRQHandler+0xe3c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d018      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a30      	ldr	r2, [pc, #192]	; (8003d94 <HAL_DMA_IRQHandler+0xe40>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2f      	ldr	r2, [pc, #188]	; (8003d98 <HAL_DMA_IRQHandler+0xe44>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00e      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <HAL_DMA_IRQHandler+0xe48>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d009      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a2c      	ldr	r2, [pc, #176]	; (8003da0 <HAL_DMA_IRQHandler+0xe4c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xdaa>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <HAL_DMA_IRQHandler+0xe50>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <HAL_DMA_IRQHandler+0xdbc>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 021c 	bic.w	r2, r2, #28
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	e007      	b.n	8003d20 <HAL_DMA_IRQHandler+0xdcc>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 020e 	bic.w	r2, r2, #14
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2201      	movs	r2, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4798      	blx	r3
 8003d56:	e004      	b.n	8003d62 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d58:	bf00      	nop
 8003d5a:	e002      	b.n	8003d62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d5c:	bf00      	nop
 8003d5e:	e000      	b.n	8003d62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40020010 	.word	0x40020010
 8003d6c:	40020028 	.word	0x40020028
 8003d70:	40020040 	.word	0x40020040
 8003d74:	40020058 	.word	0x40020058
 8003d78:	40020070 	.word	0x40020070
 8003d7c:	40020088 	.word	0x40020088
 8003d80:	400200a0 	.word	0x400200a0
 8003d84:	400200b8 	.word	0x400200b8
 8003d88:	40020410 	.word	0x40020410
 8003d8c:	40020428 	.word	0x40020428
 8003d90:	40020440 	.word	0x40020440
 8003d94:	40020458 	.word	0x40020458
 8003d98:	40020470 	.word	0x40020470
 8003d9c:	40020488 	.word	0x40020488
 8003da0:	400204a0 	.word	0x400204a0
 8003da4:	400204b8 	.word	0x400204b8

08003da8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db6:	b2db      	uxtb	r3, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a42      	ldr	r2, [pc, #264]	; (8003edc <DMA_CalcBaseAndBitshift+0x118>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d04a      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a41      	ldr	r2, [pc, #260]	; (8003ee0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d045      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <DMA_CalcBaseAndBitshift+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d040      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3e      	ldr	r2, [pc, #248]	; (8003ee8 <DMA_CalcBaseAndBitshift+0x124>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d03b      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3c      	ldr	r2, [pc, #240]	; (8003eec <DMA_CalcBaseAndBitshift+0x128>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d036      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3b      	ldr	r2, [pc, #236]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d031      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a39      	ldr	r2, [pc, #228]	; (8003ef4 <DMA_CalcBaseAndBitshift+0x130>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02c      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a38      	ldr	r2, [pc, #224]	; (8003ef8 <DMA_CalcBaseAndBitshift+0x134>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d027      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a36      	ldr	r2, [pc, #216]	; (8003efc <DMA_CalcBaseAndBitshift+0x138>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d022      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a35      	ldr	r2, [pc, #212]	; (8003f00 <DMA_CalcBaseAndBitshift+0x13c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d01d      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a33      	ldr	r2, [pc, #204]	; (8003f04 <DMA_CalcBaseAndBitshift+0x140>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d018      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a32      	ldr	r2, [pc, #200]	; (8003f08 <DMA_CalcBaseAndBitshift+0x144>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a30      	ldr	r2, [pc, #192]	; (8003f0c <DMA_CalcBaseAndBitshift+0x148>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <DMA_CalcBaseAndBitshift+0x14c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2d      	ldr	r2, [pc, #180]	; (8003f14 <DMA_CalcBaseAndBitshift+0x150>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <DMA_CalcBaseAndBitshift+0xa8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2c      	ldr	r2, [pc, #176]	; (8003f18 <DMA_CalcBaseAndBitshift+0x154>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <DMA_CalcBaseAndBitshift+0xac>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <DMA_CalcBaseAndBitshift+0xae>
 8003e70:	2300      	movs	r3, #0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d024      	beq.n	8003ec0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	3b10      	subs	r3, #16
 8003e7e:	4a27      	ldr	r2, [pc, #156]	; (8003f1c <DMA_CalcBaseAndBitshift+0x158>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e90:	5cd3      	ldrb	r3, [r2, r3]
 8003e92:	461a      	mov	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d908      	bls.n	8003eb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4b1f      	ldr	r3, [pc, #124]	; (8003f24 <DMA_CalcBaseAndBitshift+0x160>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	1d1a      	adds	r2, r3, #4
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	659a      	str	r2, [r3, #88]	; 0x58
 8003eae:	e00d      	b.n	8003ecc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <DMA_CalcBaseAndBitshift+0x160>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ebe:	e005      	b.n	8003ecc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40020010 	.word	0x40020010
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020070 	.word	0x40020070
 8003ef0:	40020088 	.word	0x40020088
 8003ef4:	400200a0 	.word	0x400200a0
 8003ef8:	400200b8 	.word	0x400200b8
 8003efc:	40020410 	.word	0x40020410
 8003f00:	40020428 	.word	0x40020428
 8003f04:	40020440 	.word	0x40020440
 8003f08:	40020458 	.word	0x40020458
 8003f0c:	40020470 	.word	0x40020470
 8003f10:	40020488 	.word	0x40020488
 8003f14:	400204a0 	.word	0x400204a0
 8003f18:	400204b8 	.word	0x400204b8
 8003f1c:	aaaaaaab 	.word	0xaaaaaaab
 8003f20:	0800f830 	.word	0x0800f830
 8003f24:	fffffc00 	.word	0xfffffc00

08003f28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d120      	bne.n	8003f7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d858      	bhi.n	8003ff6 <DMA_CheckFifoParam+0xce>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <DMA_CheckFifoParam+0x24>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f6f 	.word	0x08003f6f
 8003f54:	08003f5d 	.word	0x08003f5d
 8003f58:	08003ff7 	.word	0x08003ff7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d048      	beq.n	8003ffa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f6c:	e045      	b.n	8003ffa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f76:	d142      	bne.n	8003ffe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f7c:	e03f      	b.n	8003ffe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f86:	d123      	bne.n	8003fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d838      	bhi.n	8004002 <DMA_CheckFifoParam+0xda>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <DMA_CheckFifoParam+0x70>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003faf 	.word	0x08003faf
 8003fa0:	08003fa9 	.word	0x08003fa9
 8003fa4:	08003fc1 	.word	0x08003fc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
        break;
 8003fac:	e030      	b.n	8004010 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d025      	beq.n	8004006 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fbe:	e022      	b.n	8004006 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fc8:	d11f      	bne.n	800400a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fce:	e01c      	b.n	800400a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <DMA_CheckFifoParam+0xb6>
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d003      	beq.n	8003fe4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003fdc:	e018      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fe2:	e015      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ff4:	e00b      	b.n	800400e <DMA_CheckFifoParam+0xe6>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e00a      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e008      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
        break;
 8003ffe:	bf00      	nop
 8004000:	e006      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
        break;
 8004002:	bf00      	nop
 8004004:	e004      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
        break;
 8004006:	bf00      	nop
 8004008:	e002      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
        break;
 800400a:	bf00      	nop
 800400c:	e000      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
    break;
 800400e:	bf00      	nop
    }
  }

  return status;
 8004010:	7bfb      	ldrb	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop

08004020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a38      	ldr	r2, [pc, #224]	; (8004114 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d022      	beq.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a36      	ldr	r2, [pc, #216]	; (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01d      	beq.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a35      	ldr	r2, [pc, #212]	; (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d018      	beq.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a33      	ldr	r2, [pc, #204]	; (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a32      	ldr	r2, [pc, #200]	; (8004124 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a30      	ldr	r2, [pc, #192]	; (8004128 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d009      	beq.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2f      	ldr	r2, [pc, #188]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004082:	2300      	movs	r3, #0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01a      	beq.n	80040be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3b08      	subs	r3, #8
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4b26      	ldr	r3, [pc, #152]	; (8004138 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a24      	ldr	r2, [pc, #144]	; (800413c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	2201      	movs	r2, #1
 80040b6:	409a      	lsls	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040bc:	e024      	b.n	8004108 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	3b10      	subs	r3, #16
 80040c6:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d806      	bhi.n	80040e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d902      	bls.n	80040e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3308      	adds	r3, #8
 80040e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4b18      	ldr	r3, [pc, #96]	; (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	461a      	mov	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a16      	ldr	r2, [pc, #88]	; (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80040f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2201      	movs	r2, #1
 8004102:	409a      	lsls	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	58025408 	.word	0x58025408
 8004118:	5802541c 	.word	0x5802541c
 800411c:	58025430 	.word	0x58025430
 8004120:	58025444 	.word	0x58025444
 8004124:	58025458 	.word	0x58025458
 8004128:	5802546c 	.word	0x5802546c
 800412c:	58025480 	.word	0x58025480
 8004130:	58025494 	.word	0x58025494
 8004134:	cccccccd 	.word	0xcccccccd
 8004138:	16009600 	.word	0x16009600
 800413c:	58025880 	.word	0x58025880
 8004140:	aaaaaaab 	.word	0xaaaaaaab
 8004144:	400204b8 	.word	0x400204b8
 8004148:	4002040f 	.word	0x4002040f
 800414c:	10008200 	.word	0x10008200
 8004150:	40020880 	.word	0x40020880

08004154 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d04a      	beq.n	8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b08      	cmp	r3, #8
 800416e:	d847      	bhi.n	8004200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a25      	ldr	r2, [pc, #148]	; (800420c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d022      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a24      	ldr	r2, [pc, #144]	; (8004210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d01d      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a22      	ldr	r2, [pc, #136]	; (8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d018      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a21      	ldr	r2, [pc, #132]	; (8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d013      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00e      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d009      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80041dc:	671a      	str	r2, [r3, #112]	; 0x70
 80041de:	e009      	b.n	80041f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	461a      	mov	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a11      	ldr	r2, [pc, #68]	; (8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80041f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	2201      	movs	r2, #1
 80041fa:	409a      	lsls	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	58025408 	.word	0x58025408
 8004210:	5802541c 	.word	0x5802541c
 8004214:	58025430 	.word	0x58025430
 8004218:	58025444 	.word	0x58025444
 800421c:	58025458 	.word	0x58025458
 8004220:	5802546c 	.word	0x5802546c
 8004224:	58025480 	.word	0x58025480
 8004228:	58025494 	.word	0x58025494
 800422c:	1600963f 	.word	0x1600963f
 8004230:	58025940 	.word	0x58025940
 8004234:	1000823f 	.word	0x1000823f
 8004238:	40020940 	.word	0x40020940

0800423c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800424a:	4b89      	ldr	r3, [pc, #548]	; (8004470 <HAL_GPIO_Init+0x234>)
 800424c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800424e:	e194      	b.n	800457a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	2101      	movs	r1, #1
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	4013      	ands	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8186 	beq.w	8004574 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d00b      	beq.n	8004288 <HAL_GPIO_Init+0x4c>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d007      	beq.n	8004288 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800427c:	2b11      	cmp	r3, #17
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b12      	cmp	r3, #18
 8004286:	d130      	bne.n	80042ea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042be:	2201      	movs	r2, #1
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f003 0201 	and.w	r2, r3, #1
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	2203      	movs	r2, #3
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4313      	orrs	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0xee>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b12      	cmp	r3, #18
 8004328:	d123      	bne.n	8004372 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	08da      	lsrs	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3208      	adds	r2, #8
 8004332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	220f      	movs	r2, #15
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	08da      	lsrs	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3208      	adds	r2, #8
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0203 	and.w	r2, r3, #3
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80e0 	beq.w	8004574 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b4:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <HAL_GPIO_Init+0x238>)
 80043b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043ba:	4a2e      	ldr	r2, [pc, #184]	; (8004474 <HAL_GPIO_Init+0x238>)
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <HAL_GPIO_Init+0x238>)
 80043c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043d2:	4a29      	ldr	r2, [pc, #164]	; (8004478 <HAL_GPIO_Init+0x23c>)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	089b      	lsrs	r3, r3, #2
 80043d8:	3302      	adds	r3, #2
 80043da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	220f      	movs	r2, #15
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a20      	ldr	r2, [pc, #128]	; (800447c <HAL_GPIO_Init+0x240>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d052      	beq.n	80044a4 <HAL_GPIO_Init+0x268>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <HAL_GPIO_Init+0x244>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d031      	beq.n	800446a <HAL_GPIO_Init+0x22e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <HAL_GPIO_Init+0x248>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d02b      	beq.n	8004466 <HAL_GPIO_Init+0x22a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1d      	ldr	r2, [pc, #116]	; (8004488 <HAL_GPIO_Init+0x24c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d025      	beq.n	8004462 <HAL_GPIO_Init+0x226>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1c      	ldr	r2, [pc, #112]	; (800448c <HAL_GPIO_Init+0x250>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d01f      	beq.n	800445e <HAL_GPIO_Init+0x222>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <HAL_GPIO_Init+0x254>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d019      	beq.n	800445a <HAL_GPIO_Init+0x21e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_GPIO_Init+0x258>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d013      	beq.n	8004456 <HAL_GPIO_Init+0x21a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a19      	ldr	r2, [pc, #100]	; (8004498 <HAL_GPIO_Init+0x25c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00d      	beq.n	8004452 <HAL_GPIO_Init+0x216>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_GPIO_Init+0x260>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <HAL_GPIO_Init+0x212>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a17      	ldr	r2, [pc, #92]	; (80044a0 <HAL_GPIO_Init+0x264>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <HAL_GPIO_Init+0x20e>
 8004446:	2309      	movs	r3, #9
 8004448:	e02d      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 800444a:	230a      	movs	r3, #10
 800444c:	e02b      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 800444e:	2308      	movs	r3, #8
 8004450:	e029      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 8004452:	2307      	movs	r3, #7
 8004454:	e027      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 8004456:	2306      	movs	r3, #6
 8004458:	e025      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 800445a:	2305      	movs	r3, #5
 800445c:	e023      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 800445e:	2304      	movs	r3, #4
 8004460:	e021      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 8004462:	2303      	movs	r3, #3
 8004464:	e01f      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 8004466:	2302      	movs	r3, #2
 8004468:	e01d      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 800446a:	2301      	movs	r3, #1
 800446c:	e01b      	b.n	80044a6 <HAL_GPIO_Init+0x26a>
 800446e:	bf00      	nop
 8004470:	58000080 	.word	0x58000080
 8004474:	58024400 	.word	0x58024400
 8004478:	58000400 	.word	0x58000400
 800447c:	58020000 	.word	0x58020000
 8004480:	58020400 	.word	0x58020400
 8004484:	58020800 	.word	0x58020800
 8004488:	58020c00 	.word	0x58020c00
 800448c:	58021000 	.word	0x58021000
 8004490:	58021400 	.word	0x58021400
 8004494:	58021800 	.word	0x58021800
 8004498:	58021c00 	.word	0x58021c00
 800449c:	58022000 	.word	0x58022000
 80044a0:	58022400 	.word	0x58022400
 80044a4:	2300      	movs	r3, #0
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	f002 0203 	and.w	r2, r2, #3
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	4093      	lsls	r3, r2
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044b6:	4938      	ldr	r1, [pc, #224]	; (8004598 <HAL_GPIO_Init+0x35c>)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800453e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800456c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	f47f ae63 	bne.w	8004250 <HAL_GPIO_Init+0x14>
  }
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	3724      	adds	r7, #36	; 0x24
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	58000400 	.word	0x58000400

0800459c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <HAL_HSEM_FastTake+0x2c>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3320      	adds	r3, #32
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	4a07      	ldr	r2, [pc, #28]	; (80045cc <HAL_HSEM_FastTake+0x30>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	58026400 	.word	0x58026400
 80045cc:	80000300 	.word	0x80000300

080045d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80045da:	4906      	ldr	r1, [pc, #24]	; (80045f4 <HAL_HSEM_Release+0x24>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	58026400 	.word	0x58026400

080045f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e07f      	b.n	800470a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc f95c 	bl	80008dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2224      	movs	r2, #36	; 0x24
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	e006      	b.n	8004680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800467e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d104      	bne.n	8004692 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <HAL_I2C_Init+0x11c>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	ea42 0103 	orr.w	r1, r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69d9      	ldr	r1, [r3, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	02008000 	.word	0x02008000

08004718 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
  }
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d010      	beq.n	8004792 <HAL_I2C_ER_IRQHandler+0x46>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	09db      	lsrs	r3, r3, #7
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	f043 0201 	orr.w	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004790:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	0a9b      	lsrs	r3, r3, #10
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d010      	beq.n	80047c0 <HAL_I2C_ER_IRQHandler+0x74>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	09db      	lsrs	r3, r3, #7
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	0a5b      	lsrs	r3, r3, #9
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d010      	beq.n	80047ee <HAL_I2C_ER_IRQHandler+0xa2>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	09db      	lsrs	r3, r3, #7
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	f043 0202 	orr.w	r2, r3, #2
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 030b 	and.w	r3, r3, #11
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fc77 	bl	80050f4 <I2C_ITError>
  }
}
 8004806:	bf00      	nop
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	460b      	mov	r3, r1
 8004840:	70fb      	strb	r3, [r7, #3]
 8004842:	4613      	mov	r3, r2
 8004844:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <I2C_Slave_ISR_IT+0x24>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e0ec      	b.n	8004a8c <I2C_Slave_ISR_IT+0x1fe>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <I2C_Slave_ISR_IT+0x4c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80048d2:	6939      	ldr	r1, [r7, #16]
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 f9bf 	bl	8004c58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	091b      	lsrs	r3, r3, #4
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d04d      	beq.n	8004982 <I2C_Slave_ISR_IT+0xf4>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d047      	beq.n	8004982 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d128      	bne.n	800494e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b28      	cmp	r3, #40	; 0x28
 8004906:	d108      	bne.n	800491a <I2C_Slave_ISR_IT+0x8c>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800490e:	d104      	bne.n	800491a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004910:	6939      	ldr	r1, [r7, #16]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fb98 	bl	8005048 <I2C_ITListenCplt>
 8004918:	e032      	b.n	8004980 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b29      	cmp	r3, #41	; 0x29
 8004924:	d10e      	bne.n	8004944 <I2C_Slave_ISR_IT+0xb6>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800492c:	d00a      	beq.n	8004944 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2210      	movs	r2, #16
 8004934:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fcd3 	bl	80052e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f92d 	bl	8004b9c <I2C_ITSlaveSeqCplt>
 8004942:	e01d      	b.n	8004980 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2210      	movs	r2, #16
 800494a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800494c:	e096      	b.n	8004a7c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2210      	movs	r2, #16
 8004954:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f043 0204 	orr.w	r2, r3, #4
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <I2C_Slave_ISR_IT+0xe4>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496e:	f040 8085 	bne.w	8004a7c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 fbbb 	bl	80050f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800497e:	e07d      	b.n	8004a7c <I2C_Slave_ISR_IT+0x1ee>
 8004980:	e07c      	b.n	8004a7c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d030      	beq.n	80049f0 <I2C_Slave_ISR_IT+0x162>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d02a      	beq.n	80049f0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d018      	beq.n	80049d6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d14f      	bne.n	8004a80 <I2C_Slave_ISR_IT+0x1f2>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049e6:	d04b      	beq.n	8004a80 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f8d7 	bl	8004b9c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80049ee:	e047      	b.n	8004a80 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	08db      	lsrs	r3, r3, #3
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d004      	beq.n	8004a12 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a08:	6939      	ldr	r1, [r7, #16]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f842 	bl	8004a94 <I2C_ITAddrCplt>
 8004a10:	e037      	b.n	8004a82 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d031      	beq.n	8004a82 <I2C_Slave_ISR_IT+0x1f4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d02b      	beq.n	8004a82 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d018      	beq.n	8004a66 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	; 0x28
 8004a64:	e00d      	b.n	8004a82 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a6c:	d002      	beq.n	8004a74 <I2C_Slave_ISR_IT+0x1e6>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f891 	bl	8004b9c <I2C_ITSlaveSeqCplt>
 8004a7a:	e002      	b.n	8004a82 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004a7c:	bf00      	nop
 8004a7e:	e000      	b.n	8004a82 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004a80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aaa:	2b28      	cmp	r3, #40	; 0x28
 8004aac:	d16a      	bne.n	8004b84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004acc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ada:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ae8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d138      	bne.n	8004b64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	09db      	lsrs	r3, r3, #7
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	89bb      	ldrh	r3, [r7, #12]
 8004afa:	4053      	eors	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f003 0306 	and.w	r3, r3, #6
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11c      	bne.n	8004b40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d13b      	bne.n	8004b94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2208      	movs	r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b32:	89ba      	ldrh	r2, [r7, #12]
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff fe7c 	bl	8004836 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b3e:	e029      	b.n	8004b94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b40:	893b      	ldrh	r3, [r7, #8]
 8004b42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fc0c 	bl	8005366 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b56:	89ba      	ldrh	r2, [r7, #12]
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fe6a 	bl	8004836 <HAL_I2C_AddrCallback>
}
 8004b62:	e017      	b.n	8004b94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 fbfc 	bl	8005366 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b76:	89ba      	ldrh	r2, [r7, #12]
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fe5a 	bl	8004836 <HAL_I2C_AddrCallback>
}
 8004b82:	e007      	b.n	8004b94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	0b9b      	lsrs	r3, r3, #14
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d008      	beq.n	8004bd2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e00d      	b.n	8004bee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	0bdb      	lsrs	r3, r3, #15
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b29      	cmp	r3, #41	; 0x29
 8004bf8:	d112      	bne.n	8004c20 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2228      	movs	r2, #40	; 0x28
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2221      	movs	r2, #33	; 0x21
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fbab 	bl	8005366 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fdf8 	bl	800480e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c1e:	e017      	b.n	8004c50 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b2a      	cmp	r3, #42	; 0x2a
 8004c2a:	d111      	bne.n	8004c50 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2228      	movs	r2, #40	; 0x28
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2222      	movs	r2, #34	; 0x22
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fb92 	bl	8005366 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fde9 	bl	8004822 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c74:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b21      	cmp	r3, #33	; 0x21
 8004c82:	d002      	beq.n	8004c8a <I2C_ITSlaveCplt+0x32>
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b29      	cmp	r3, #41	; 0x29
 8004c88:	d108      	bne.n	8004c9c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c8a:	f248 0101 	movw	r1, #32769	; 0x8001
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fb69 	bl	8005366 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2221      	movs	r2, #33	; 0x21
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
 8004c9a:	e00d      	b.n	8004cb8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b22      	cmp	r3, #34	; 0x22
 8004ca0:	d002      	beq.n	8004ca8 <I2C_ITSlaveCplt+0x50>
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca6:	d107      	bne.n	8004cb8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ca8:	f248 0102 	movw	r1, #32770	; 0x8002
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fb5a 	bl	8005366 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2222      	movs	r2, #34	; 0x22
 8004cb6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b80      	ldr	r3, [pc, #512]	; (8004ed4 <I2C_ITSlaveCplt+0x27c>)
 8004cd4:	400b      	ands	r3, r1
 8004cd6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fb02 	bl	80052e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	0b9b      	lsrs	r3, r3, #14
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d07a      	beq.n	8004de0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8111 	beq.w	8004f26 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a73      	ldr	r2, [pc, #460]	; (8004ed8 <I2C_ITSlaveCplt+0x280>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d059      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a71      	ldr	r2, [pc, #452]	; (8004edc <I2C_ITSlaveCplt+0x284>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d053      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a6f      	ldr	r2, [pc, #444]	; (8004ee0 <I2C_ITSlaveCplt+0x288>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d04d      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6d      	ldr	r2, [pc, #436]	; (8004ee4 <I2C_ITSlaveCplt+0x28c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d047      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a6b      	ldr	r2, [pc, #428]	; (8004ee8 <I2C_ITSlaveCplt+0x290>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d041      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a69      	ldr	r2, [pc, #420]	; (8004eec <I2C_ITSlaveCplt+0x294>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d03b      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a67      	ldr	r2, [pc, #412]	; (8004ef0 <I2C_ITSlaveCplt+0x298>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d035      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a65      	ldr	r2, [pc, #404]	; (8004ef4 <I2C_ITSlaveCplt+0x29c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d02f      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a63      	ldr	r2, [pc, #396]	; (8004ef8 <I2C_ITSlaveCplt+0x2a0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d029      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a61      	ldr	r2, [pc, #388]	; (8004efc <I2C_ITSlaveCplt+0x2a4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d023      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a5f      	ldr	r2, [pc, #380]	; (8004f00 <I2C_ITSlaveCplt+0x2a8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d01d      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a5d      	ldr	r2, [pc, #372]	; (8004f04 <I2C_ITSlaveCplt+0x2ac>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d017      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a5b      	ldr	r2, [pc, #364]	; (8004f08 <I2C_ITSlaveCplt+0x2b0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d011      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a59      	ldr	r2, [pc, #356]	; (8004f0c <I2C_ITSlaveCplt+0x2b4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00b      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a57      	ldr	r2, [pc, #348]	; (8004f10 <I2C_ITSlaveCplt+0x2b8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d005      	beq.n	8004dc4 <I2C_ITSlaveCplt+0x16c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a55      	ldr	r2, [pc, #340]	; (8004f14 <I2C_ITSlaveCplt+0x2bc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d105      	bne.n	8004dd0 <I2C_ITSlaveCplt+0x178>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	e004      	b.n	8004dda <I2C_ITSlaveCplt+0x182>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	8553      	strh	r3, [r2, #42]	; 0x2a
 8004dde:	e0a2      	b.n	8004f26 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	0bdb      	lsrs	r3, r3, #15
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 809c 	beq.w	8004f26 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dfc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 808f 	beq.w	8004f26 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <I2C_ITSlaveCplt+0x280>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d059      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a30      	ldr	r2, [pc, #192]	; (8004edc <I2C_ITSlaveCplt+0x284>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d053      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <I2C_ITSlaveCplt+0x288>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d04d      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2c      	ldr	r2, [pc, #176]	; (8004ee4 <I2C_ITSlaveCplt+0x28c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d047      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <I2C_ITSlaveCplt+0x290>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d041      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a28      	ldr	r2, [pc, #160]	; (8004eec <I2C_ITSlaveCplt+0x294>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <I2C_ITSlaveCplt+0x298>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d035      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a24      	ldr	r2, [pc, #144]	; (8004ef4 <I2C_ITSlaveCplt+0x29c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d02f      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a22      	ldr	r2, [pc, #136]	; (8004ef8 <I2C_ITSlaveCplt+0x2a0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d029      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a20      	ldr	r2, [pc, #128]	; (8004efc <I2C_ITSlaveCplt+0x2a4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d023      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1e      	ldr	r2, [pc, #120]	; (8004f00 <I2C_ITSlaveCplt+0x2a8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01d      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1c      	ldr	r2, [pc, #112]	; (8004f04 <I2C_ITSlaveCplt+0x2ac>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d017      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <I2C_ITSlaveCplt+0x2b0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d011      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	; (8004f0c <I2C_ITSlaveCplt+0x2b4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <I2C_ITSlaveCplt+0x2b8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d005      	beq.n	8004ec8 <I2C_ITSlaveCplt+0x270>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a14      	ldr	r2, [pc, #80]	; (8004f14 <I2C_ITSlaveCplt+0x2bc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d127      	bne.n	8004f18 <I2C_ITSlaveCplt+0x2c0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	e026      	b.n	8004f22 <I2C_ITSlaveCplt+0x2ca>
 8004ed4:	fe00e800 	.word	0xfe00e800
 8004ed8:	40020010 	.word	0x40020010
 8004edc:	40020028 	.word	0x40020028
 8004ee0:	40020040 	.word	0x40020040
 8004ee4:	40020058 	.word	0x40020058
 8004ee8:	40020070 	.word	0x40020070
 8004eec:	40020088 	.word	0x40020088
 8004ef0:	400200a0 	.word	0x400200a0
 8004ef4:	400200b8 	.word	0x400200b8
 8004ef8:	40020410 	.word	0x40020410
 8004efc:	40020428 	.word	0x40020428
 8004f00:	40020440 	.word	0x40020440
 8004f04:	40020458 	.word	0x40020458
 8004f08:	40020470 	.word	0x40020470
 8004f0c:	40020488 	.word	0x40020488
 8004f10:	400204a0 	.word	0x400204a0
 8004f14:	400204b8 	.word	0x400204b8
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d020      	beq.n	8004f74 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	f043 0204 	orr.w	r2, r3, #4
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d010      	beq.n	8004fc2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8a4 	bl	80050f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b28      	cmp	r3, #40	; 0x28
 8004fb6:	d141      	bne.n	800503c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f844 	bl	8005048 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fc0:	e03c      	b.n	800503c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fca:	d014      	beq.n	8004ff6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fde5 	bl	8004b9c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <I2C_ITSlaveCplt+0x3ec>)
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fc2f 	bl	8004852 <HAL_I2C_ListenCpltCallback>
}
 8004ff4:	e022      	b.n	800503c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b22      	cmp	r3, #34	; 0x22
 8005000:	d10e      	bne.n	8005020 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fc02 	bl	8004822 <HAL_I2C_SlaveRxCpltCallback>
}
 800501e:	e00d      	b.n	800503c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fbe9 	bl	800480e <HAL_I2C_SlaveTxCpltCallback>
}
 800503c:	bf00      	nop
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	ffff0000 	.word	0xffff0000

08005048 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <I2C_ITListenCplt+0xa8>)
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	089b      	lsrs	r3, r3, #2
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d022      	beq.n	80050c6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b00      	cmp	r3, #0
 800509e:	d012      	beq.n	80050c6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	f043 0204 	orr.w	r2, r3, #4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050c6:	f248 0103 	movw	r1, #32771	; 0x8003
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f94b 	bl	8005366 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2210      	movs	r2, #16
 80050d6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff fbb6 	bl	8004852 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	ffff0000 	.word	0xffff0000

080050f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a5d      	ldr	r2, [pc, #372]	; (8005288 <I2C_ITError+0x194>)
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b28      	cmp	r3, #40	; 0x28
 800512a:	d005      	beq.n	8005138 <I2C_ITError+0x44>
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b29      	cmp	r3, #41	; 0x29
 8005130:	d002      	beq.n	8005138 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b2a      	cmp	r3, #42	; 0x2a
 8005136:	d10b      	bne.n	8005150 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005138:	2103      	movs	r1, #3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f913 	bl	8005366 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2228      	movs	r2, #40	; 0x28
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a50      	ldr	r2, [pc, #320]	; (800528c <I2C_ITError+0x198>)
 800514c:	635a      	str	r2, [r3, #52]	; 0x34
 800514e:	e011      	b.n	8005174 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005150:	f248 0103 	movw	r1, #32771	; 0x8003
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f906 	bl	8005366 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b60      	cmp	r3, #96	; 0x60
 8005164:	d003      	beq.n	800516e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d039      	beq.n	80051f6 <I2C_ITError+0x102>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b11      	cmp	r3, #17
 8005186:	d002      	beq.n	800518e <I2C_ITError+0x9a>
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b21      	cmp	r3, #33	; 0x21
 800518c:	d133      	bne.n	80051f6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519c:	d107      	bne.n	80051ae <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fdf8 	bl	8003da8 <HAL_DMA_GetState>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d017      	beq.n	80051ee <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	4a33      	ldr	r2, [pc, #204]	; (8005290 <I2C_ITError+0x19c>)
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd fc7a 	bl	8002acc <HAL_DMA_Abort_IT>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d04d      	beq.n	800527a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e8:	4610      	mov	r0, r2
 80051ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051ec:	e045      	b.n	800527a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f850 	bl	8005294 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051f4:	e041      	b.n	800527a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d039      	beq.n	8005272 <I2C_ITError+0x17e>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b12      	cmp	r3, #18
 8005202:	d002      	beq.n	800520a <I2C_ITError+0x116>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b22      	cmp	r3, #34	; 0x22
 8005208:	d133      	bne.n	8005272 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005218:	d107      	bne.n	800522a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005228:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fdba 	bl	8003da8 <HAL_DMA_GetState>
 8005234:	4603      	mov	r3, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	d017      	beq.n	800526a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523e:	4a14      	ldr	r2, [pc, #80]	; (8005290 <I2C_ITError+0x19c>)
 8005240:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd fc3c 	bl	8002acc <HAL_DMA_Abort_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d011      	beq.n	800527e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005264:	4610      	mov	r0, r2
 8005266:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005268:	e009      	b.n	800527e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f812 	bl	8005294 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005270:	e005      	b.n	800527e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f80e 	bl	8005294 <I2C_TreatErrorCallback>
  }
}
 8005278:	e002      	b.n	8005280 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800527e:	bf00      	nop
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	ffff0000 	.word	0xffff0000
 800528c:	0800488f 	.word	0x0800488f
 8005290:	0800532b 	.word	0x0800532b

08005294 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b60      	cmp	r3, #96	; 0x60
 80052a6:	d10e      	bne.n	80052c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fadb 	bl	800487a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052c4:	e009      	b.n	80052da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff fac6 	bl	8004866 <HAL_I2C_ErrorCallback>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d103      	bne.n	8005300 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2200      	movs	r2, #0
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d007      	beq.n	800531e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	619a      	str	r2, [r3, #24]
  }
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	2200      	movs	r2, #0
 8005346:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005354:	2200      	movs	r2, #0
 8005356:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ff9b 	bl	8005294 <I2C_TreatErrorCallback>
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005376:	887b      	ldrh	r3, [r7, #2]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005386:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005394:	2b28      	cmp	r3, #40	; 0x28
 8005396:	d003      	beq.n	80053a0 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800539e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80053a0:	887b      	ldrh	r3, [r7, #2]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00f      	beq.n	80053ca <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80053b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053be:	2b28      	cmp	r3, #40	; 0x28
 80053c0:	d003      	beq.n	80053ca <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80053c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80053ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da03      	bge.n	80053da <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80053d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	2b10      	cmp	r3, #16
 80053de:	d103      	bne.n	80053e8 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80053e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053e8:	887b      	ldrh	r3, [r7, #2]
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d103      	bne.n	80053f6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f043 0320 	orr.w	r3, r3, #32
 80053f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053f6:	887b      	ldrh	r3, [r7, #2]
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d103      	bne.n	8005404 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005402:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6819      	ldr	r1, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	43da      	mvns	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	400a      	ands	r2, r1
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b20      	cmp	r3, #32
 8005436:	d138      	bne.n	80054aa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005442:	2302      	movs	r3, #2
 8005444:	e032      	b.n	80054ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2224      	movs	r2, #36	; 0x24
 8005452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005474:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e000      	b.n	80054ac <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d139      	bne.n	8005542 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054d8:	2302      	movs	r3, #2
 80054da:	e033      	b.n	8005544 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2224      	movs	r2, #36	; 0x24
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800550a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e000      	b.n	8005544 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005542:	2302      	movs	r3, #2
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005552:	b08f      	sub	sp, #60	; 0x3c
 8005554:	af0a      	add	r7, sp, #40	; 0x28
 8005556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e116      	b.n	8005790 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fc f941 	bl	8001804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2203      	movs	r2, #3
 8005586:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f009 fa4b 	bl	800ea3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	687e      	ldr	r6, [r7, #4]
 80055ae:	466d      	mov	r5, sp
 80055b0:	f106 0410 	add.w	r4, r6, #16
 80055b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80055c4:	1d33      	adds	r3, r6, #4
 80055c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055c8:	6838      	ldr	r0, [r7, #0]
 80055ca:	f009 f927 	bl	800e81c <USB_CoreInit>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0d7      	b.n	8005790 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f009 fa39 	bl	800ea5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]
 80055f0:	e04a      	b.n	8005688 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	333d      	adds	r3, #61	; 0x3d
 8005602:	2201      	movs	r2, #1
 8005604:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005606:	7bfa      	ldrb	r2, [r7, #15]
 8005608:	6879      	ldr	r1, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	333c      	adds	r3, #60	; 0x3c
 8005616:	7bfa      	ldrb	r2, [r7, #15]
 8005618:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800561a:	7bfa      	ldrb	r2, [r7, #15]
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	b298      	uxth	r0, r3
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3342      	adds	r3, #66	; 0x42
 800562e:	4602      	mov	r2, r0
 8005630:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	333f      	adds	r3, #63	; 0x3f
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	1a9b      	subs	r3, r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3344      	adds	r3, #68	; 0x44
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	1a9b      	subs	r3, r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3348      	adds	r3, #72	; 0x48
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3350      	adds	r3, #80	; 0x50
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	3301      	adds	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3af      	bcc.n	80055f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	e044      	b.n	8005722 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005698:	7bfa      	ldrb	r2, [r7, #15]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056ae:	7bfa      	ldrb	r2, [r7, #15]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80056d6:	2200      	movs	r2, #0
 80056d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	440b      	add	r3, r1
 80056e8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80056f0:	7bfa      	ldrb	r2, [r7, #15]
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005706:	7bfa      	ldrb	r2, [r7, #15]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	3301      	adds	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	429a      	cmp	r2, r3
 800572a:	d3b5      	bcc.n	8005698 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	687e      	ldr	r6, [r7, #4]
 8005734:	466d      	mov	r5, sp
 8005736:	f106 0410 	add.w	r4, r6, #16
 800573a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800573c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800573e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005740:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005742:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005746:	e885 0003 	stmia.w	r5, {r0, r1}
 800574a:	1d33      	adds	r3, r6, #4
 800574c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800574e:	6838      	ldr	r0, [r7, #0]
 8005750:	f009 f9b0 	bl	800eab4 <USB_DevInit>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e014      	b.n	8005790 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b01      	cmp	r3, #1
 800577c:	d102      	bne.n	8005784 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fe3e 	bl	8006400 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f009 fc0d 	bl	800efa8 <USB_DevDisconnect>

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005798 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b08d      	sub	sp, #52	; 0x34
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f009 fcae 	bl	800f110 <USB_GetMode>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 83ca 	bne.w	8005f50 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f009 fc12 	bl	800efea <USB_ReadInterrupts>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 83c0 	beq.w	8005f4e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f009 fc09 	bl	800efea <USB_ReadInterrupts>
 80057d8:	4603      	mov	r3, r0
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d107      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f002 0202 	and.w	r2, r2, #2
 80057f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f009 fbf7 	bl	800efea <USB_ReadInterrupts>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b10      	cmp	r3, #16
 8005804:	d161      	bne.n	80058ca <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0210 	bic.w	r2, r2, #16
 8005814:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	3304      	adds	r3, #4
 8005834:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	0c5b      	lsrs	r3, r3, #17
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	2b02      	cmp	r3, #2
 8005840:	d124      	bne.n	800588c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005848:	4013      	ands	r3, r2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d035      	beq.n	80058ba <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005858:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	6a38      	ldr	r0, [r7, #32]
 8005862:	f009 fb49 	bl	800eef8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005872:	441a      	add	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005884:	441a      	add	r2, r3
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	619a      	str	r2, [r3, #24]
 800588a:	e016      	b.n	80058ba <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	0c5b      	lsrs	r3, r3, #17
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	2b06      	cmp	r3, #6
 8005896:	d110      	bne.n	80058ba <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800589e:	2208      	movs	r2, #8
 80058a0:	4619      	mov	r1, r3
 80058a2:	6a38      	ldr	r0, [r7, #32]
 80058a4:	f009 fb28 	bl	800eef8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058b4:	441a      	add	r2, r3
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0210 	orr.w	r2, r2, #16
 80058c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f009 fb8b 	bl	800efea <USB_ReadInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058de:	d16e      	bne.n	80059be <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f009 fb91 	bl	800f010 <USB_ReadDevAllOutEpInterrupt>
 80058ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80058f0:	e062      	b.n	80059b8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d057      	beq.n	80059ac <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f009 fbb6 	bl	800f078 <USB_ReadDevOutEPInterrupt>
 800590c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	2301      	movs	r3, #1
 8005928:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800592a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fc15 	bl	800615c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005948:	461a      	mov	r2, r3
 800594a:	2308      	movs	r3, #8
 800594c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800594e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fd0f 	bl	8006374 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	2310      	movs	r3, #16
 8005970:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005988:	461a      	mov	r2, r3
 800598a:	2320      	movs	r3, #32
 800598c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a4:	461a      	mov	r2, r3
 80059a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	3301      	adds	r3, #1
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d199      	bne.n	80058f2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f009 fb11 	bl	800efea <USB_ReadInterrupts>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d2:	f040 80c0 	bne.w	8005b56 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f009 fb32 	bl	800f044 <USB_ReadDevAllInEpInterrupt>
 80059e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059e6:	e0b2      	b.n	8005b4e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80a7 	beq.w	8005b42 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f009 fb58 	bl	800f0b4 <USB_ReadDevInEPInterrupt>
 8005a04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d057      	beq.n	8005ac0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	2201      	movs	r2, #1
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	69f9      	ldr	r1, [r7, #28]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a30:	4013      	ands	r3, r2
 8005a32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a40:	461a      	mov	r2, r3
 8005a42:	2301      	movs	r3, #1
 8005a44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d132      	bne.n	8005ab4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3348      	adds	r3, #72	; 0x48
 8005a5e:	6819      	ldr	r1, [r3, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4403      	add	r3, r0
 8005a6e:	3344      	adds	r3, #68	; 0x44
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4419      	add	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4403      	add	r3, r0
 8005a82:	3348      	adds	r3, #72	; 0x48
 8005a84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d113      	bne.n	8005ab4 <HAL_PCD_IRQHandler+0x31c>
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3350      	adds	r3, #80	; 0x50
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d108      	bne.n	8005ab4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005aac:	461a      	mov	r2, r3
 8005aae:	2101      	movs	r1, #1
 8005ab0:	f009 fb60 	bl	800f174 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fa57 	bl	8005f6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2308      	movs	r3, #8
 8005ada:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	461a      	mov	r2, r3
 8005af4:	2310      	movs	r3, #16
 8005af6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	461a      	mov	r2, r3
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fa80 	bl	8006042 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	3301      	adds	r3, #1
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	085b      	lsrs	r3, r3, #1
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f af49 	bne.w	80059e8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f009 fa45 	bl	800efea <USB_ReadInterrupts>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6a:	d122      	bne.n	8005bb2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d108      	bne.n	8005b9c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b92:	2100      	movs	r1, #0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fc57 	bl	8006448 <HAL_PCDEx_LPM_Callback>
 8005b9a:	e002      	b.n	8005ba2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa1a 	bl	8005fd6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f009 fa17 	bl	800efea <USB_ReadInterrupts>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc6:	d112      	bne.n	8005bee <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f9f2 	bl	8005fc2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f009 f9f9 	bl	800efea <USB_ReadInterrupts>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c02:	d121      	bne.n	8005c48 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005c12:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d111      	bne.n	8005c42 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	089b      	lsrs	r3, r3, #2
 8005c2e:	f003 020f 	and.w	r2, r3, #15
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c38:	2101      	movs	r1, #1
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fc04 	bl	8006448 <HAL_PCDEx_LPM_Callback>
 8005c40:	e002      	b.n	8005c48 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f9bd 	bl	8005fc2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f009 f9cc 	bl	800efea <USB_ReadInterrupts>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5c:	f040 80c7 	bne.w	8005dee <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2110      	movs	r1, #16
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f009 f878 	bl	800ed70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c80:	2300      	movs	r3, #0
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c84:	e056      	b.n	8005d34 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	461a      	mov	r2, r3
 8005c94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cb8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	0151      	lsls	r1, r2, #5
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	440a      	add	r2, r1
 8005cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cd8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	3301      	adds	r3, #1
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3a3      	bcc.n	8005c86 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d016      	beq.n	8005d88 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6a:	f043 030b 	orr.w	r3, r3, #11
 8005d6e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d80:	f043 030b 	orr.w	r3, r3, #11
 8005d84:	6453      	str	r3, [r2, #68]	; 0x44
 8005d86:	e015      	b.n	8005db4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d96:	4619      	mov	r1, r3
 8005d98:	f242 032b 	movw	r3, #8235	; 0x202b
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dae:	f043 030b 	orr.w	r3, r3, #11
 8005db2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69fa      	ldr	r2, [r7, #28]
 8005dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f009 f9cb 	bl	800f174 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f009 f8f9 	bl	800efea <USB_ReadInterrupts>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e02:	d124      	bne.n	8005e4e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f009 f98f 	bl	800f12c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f009 f80d 	bl	800ee32 <USB_GetDevSpeed>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681c      	ldr	r4, [r3, #0]
 8005e24:	f001 fac6 	bl	80073b4 <HAL_RCC_GetHCLKFreq>
 8005e28:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	4620      	mov	r0, r4
 8005e34:	f008 fd60 	bl	800e8f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8b8 	bl	8005fae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f009 f8c9 	bl	800efea <USB_ReadInterrupts>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d10a      	bne.n	8005e78 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f899 	bl	8005f9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f002 0208 	and.w	r2, r2, #8
 8005e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f009 f8b4 	bl	800efea <USB_ReadInterrupts>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e8c:	d10f      	bne.n	8005eae <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f8b2 	bl	8006002 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f009 f899 	bl	800efea <USB_ReadInterrupts>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec2:	d10f      	bne.n	8005ee4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	4619      	mov	r1, r3
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f88b 	bl	8005fea <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ee2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f009 f87e 	bl	800efea <USB_ReadInterrupts>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef8:	d10a      	bne.n	8005f10 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f88d 	bl	800601a <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f009 f868 	bl	800efea <USB_ReadInterrupts>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d115      	bne.n	8005f50 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f879 	bl	800602e <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	605a      	str	r2, [r3, #4]
 8005f4c:	e000      	b.n	8005f50 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005f4e:	bf00      	nop
    }
  }
}
 8005f50:	3734      	adds	r7, #52	; 0x34
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}

08005f56 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800602e:	b480      	push	{r7}
 8006030:	b083      	sub	sp, #12
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b08a      	sub	sp, #40	; 0x28
 8006046:	af02      	add	r7, sp, #8
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	3338      	adds	r3, #56	; 0x38
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	3304      	adds	r3, #4
 8006068:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	429a      	cmp	r2, r3
 8006074:	d901      	bls.n	800607a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e06c      	b.n	8006154 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	429a      	cmp	r2, r3
 800608e:	d902      	bls.n	8006096 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	3303      	adds	r3, #3
 800609a:	089b      	lsrs	r3, r3, #2
 800609c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800609e:	e02b      	b.n	80060f8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d902      	bls.n	80060bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3303      	adds	r3, #3
 80060c0:	089b      	lsrs	r3, r3, #2
 80060c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68d9      	ldr	r1, [r3, #12]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	4603      	mov	r3, r0
 80060da:	6978      	ldr	r0, [r7, #20]
 80060dc:	f008 fece 	bl	800ee7c <USB_WritePacket>

    ep->xfer_buff  += len;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	441a      	add	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	441a      	add	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	b29b      	uxth	r3, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	429a      	cmp	r2, r3
 800610c:	d809      	bhi.n	8006122 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006116:	429a      	cmp	r2, r3
 8006118:	d203      	bcs.n	8006122 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1be      	bne.n	80060a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	429a      	cmp	r2, r3
 800612c:	d811      	bhi.n	8006152 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	2201      	movs	r2, #1
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	43db      	mvns	r3, r3
 8006148:	6939      	ldr	r1, [r7, #16]
 800614a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800614e:	4013      	ands	r3, r2
 8006150:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	333c      	adds	r3, #60	; 0x3c
 8006174:	3304      	adds	r3, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b01      	cmp	r3, #1
 8006190:	f040 80a0 	bne.w	80062d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d015      	beq.n	80061ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4a72      	ldr	r2, [pc, #456]	; (800636c <PCD_EP_OutXfrComplete_int+0x210>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f240 80dd 	bls.w	8006362 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80d7 	beq.w	8006362 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	461a      	mov	r2, r3
 80061c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c6:	6093      	str	r3, [r2, #8]
 80061c8:	e0cb      	b.n	8006362 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	461a      	mov	r2, r3
 80061e2:	2320      	movs	r3, #32
 80061e4:	6093      	str	r3, [r2, #8]
 80061e6:	e0bc      	b.n	8006362 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 80b7 	bne.w	8006362 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a5d      	ldr	r2, [pc, #372]	; (800636c <PCD_EP_OutXfrComplete_int+0x210>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d90f      	bls.n	800621c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	461a      	mov	r2, r3
 8006214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006218:	6093      	str	r3, [r2, #8]
 800621a:	e0a2      	b.n	8006362 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	1a9b      	subs	r3, r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800622e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	0159      	lsls	r1, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	440b      	add	r3, r1
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006242:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	4613      	mov	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4403      	add	r3, r0
 8006252:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006256:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800626a:	6819      	ldr	r1, [r3, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4403      	add	r3, r0
 800627a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4419      	add	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4403      	add	r3, r0
 8006290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006294:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d114      	bne.n	80062c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d108      	bne.n	80062c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062be:	461a      	mov	r2, r3
 80062c0:	2101      	movs	r1, #1
 80062c2:	f008 ff57 	bl	800f174 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fe42 	bl	8005f56 <HAL_PCD_DataOutStageCallback>
 80062d2:	e046      	b.n	8006362 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a26      	ldr	r2, [pc, #152]	; (8006370 <PCD_EP_OutXfrComplete_int+0x214>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d124      	bne.n	8006326 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f2:	461a      	mov	r2, r3
 80062f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f8:	6093      	str	r3, [r2, #8]
 80062fa:	e032      	b.n	8006362 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	461a      	mov	r2, r3
 8006314:	2320      	movs	r3, #32
 8006316:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff fe19 	bl	8005f56 <HAL_PCD_DataOutStageCallback>
 8006324:	e01d      	b.n	8006362 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d114      	bne.n	8006356 <PCD_EP_OutXfrComplete_int+0x1fa>
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d108      	bne.n	8006356 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800634e:	461a      	mov	r2, r3
 8006350:	2100      	movs	r1, #0
 8006352:	f008 ff0f 	bl	800f174 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff fdfa 	bl	8005f56 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	4f54300a 	.word	0x4f54300a
 8006370:	4f54310a 	.word	0x4f54310a

08006374 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	333c      	adds	r3, #60	; 0x3c
 800638c:	3304      	adds	r3, #4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a15      	ldr	r2, [pc, #84]	; (80063fc <PCD_EP_OutSetupPacket_int+0x88>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d90e      	bls.n	80063c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fddc 	bl	8005f86 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <PCD_EP_OutSetupPacket_int+0x88>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d90c      	bls.n	80063f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d108      	bne.n	80063f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063e8:	461a      	mov	r2, r3
 80063ea:	2101      	movs	r1, #1
 80063ec:	f008 fec2 	bl	800f174 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	4f54300a 	.word	0x4f54300a

08006400 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <HAL_PCDEx_ActivateLPM+0x44>)
 8006430:	4313      	orrs	r3, r2
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	10000003 	.word	0x10000003

08006448 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006468:	4b29      	ldr	r3, [pc, #164]	; (8006510 <HAL_PWREx_ConfigSupply+0xb0>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	2b06      	cmp	r3, #6
 8006472:	d00a      	beq.n	800648a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006474:	4b26      	ldr	r3, [pc, #152]	; (8006510 <HAL_PWREx_ConfigSupply+0xb0>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d001      	beq.n	8006486 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e040      	b.n	8006508 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e03e      	b.n	8006508 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800648a:	4b21      	ldr	r3, [pc, #132]	; (8006510 <HAL_PWREx_ConfigSupply+0xb0>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006492:	491f      	ldr	r1, [pc, #124]	; (8006510 <HAL_PWREx_ConfigSupply+0xb0>)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4313      	orrs	r3, r2
 8006498:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800649a:	f7fb fad5 	bl	8001a48 <HAL_GetTick>
 800649e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064a0:	e009      	b.n	80064b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064a2:	f7fb fad1 	bl	8001a48 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b0:	d901      	bls.n	80064b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e028      	b.n	8006508 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064b6:	4b16      	ldr	r3, [pc, #88]	; (8006510 <HAL_PWREx_ConfigSupply+0xb0>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c2:	d1ee      	bne.n	80064a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b1e      	cmp	r3, #30
 80064c8:	d008      	beq.n	80064dc <HAL_PWREx_ConfigSupply+0x7c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b2e      	cmp	r3, #46	; 0x2e
 80064ce:	d005      	beq.n	80064dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b1d      	cmp	r3, #29
 80064d4:	d002      	beq.n	80064dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b2d      	cmp	r3, #45	; 0x2d
 80064da:	d114      	bne.n	8006506 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80064dc:	f7fb fab4 	bl	8001a48 <HAL_GetTick>
 80064e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80064e2:	e009      	b.n	80064f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064e4:	f7fb fab0 	bl	8001a48 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f2:	d901      	bls.n	80064f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e007      	b.n	8006508 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <HAL_PWREx_ConfigSupply+0xb0>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006504:	d1ee      	bne.n	80064e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024800 	.word	0x58024800

08006514 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4a04      	ldr	r2, [pc, #16]	; (8006530 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800651e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006522:	60d3      	str	r3, [r2, #12]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	58024800 	.word	0x58024800

08006534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08c      	sub	sp, #48	; 0x30
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e3ff      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8087 	beq.w	8006662 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006554:	4b99      	ldr	r3, [pc, #612]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800655e:	4b97      	ldr	r3, [pc, #604]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	2b10      	cmp	r3, #16
 8006568:	d007      	beq.n	800657a <HAL_RCC_OscConfig+0x46>
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	2b18      	cmp	r3, #24
 800656e:	d110      	bne.n	8006592 <HAL_RCC_OscConfig+0x5e>
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d10b      	bne.n	8006592 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800657a:	4b90      	ldr	r3, [pc, #576]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d06c      	beq.n	8006660 <HAL_RCC_OscConfig+0x12c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d168      	bne.n	8006660 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e3d9      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659a:	d106      	bne.n	80065aa <HAL_RCC_OscConfig+0x76>
 800659c:	4b87      	ldr	r3, [pc, #540]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a86      	ldr	r2, [pc, #536]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e02e      	b.n	8006608 <HAL_RCC_OscConfig+0xd4>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10c      	bne.n	80065cc <HAL_RCC_OscConfig+0x98>
 80065b2:	4b82      	ldr	r3, [pc, #520]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a81      	ldr	r2, [pc, #516]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	4b7f      	ldr	r3, [pc, #508]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a7e      	ldr	r2, [pc, #504]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e01d      	b.n	8006608 <HAL_RCC_OscConfig+0xd4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065d4:	d10c      	bne.n	80065f0 <HAL_RCC_OscConfig+0xbc>
 80065d6:	4b79      	ldr	r3, [pc, #484]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a78      	ldr	r2, [pc, #480]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	4b76      	ldr	r3, [pc, #472]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a75      	ldr	r2, [pc, #468]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e00b      	b.n	8006608 <HAL_RCC_OscConfig+0xd4>
 80065f0:	4b72      	ldr	r3, [pc, #456]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a71      	ldr	r2, [pc, #452]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	4b6f      	ldr	r3, [pc, #444]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6e      	ldr	r2, [pc, #440]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d013      	beq.n	8006638 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fb fa1a 	bl	8001a48 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006618:	f7fb fa16 	bl	8001a48 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b64      	cmp	r3, #100	; 0x64
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e38d      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800662a:	4b64      	ldr	r3, [pc, #400]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0xe4>
 8006636:	e014      	b.n	8006662 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fb fa06 	bl	8001a48 <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006640:	f7fb fa02 	bl	8001a48 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b64      	cmp	r3, #100	; 0x64
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e379      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006652:	4b5a      	ldr	r3, [pc, #360]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x10c>
 800665e:	e000      	b.n	8006662 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80ae 	beq.w	80067cc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006670:	4b52      	ldr	r3, [pc, #328]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006678:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800667a:	4b50      	ldr	r3, [pc, #320]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d007      	beq.n	8006696 <HAL_RCC_OscConfig+0x162>
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	2b18      	cmp	r3, #24
 800668a:	d13a      	bne.n	8006702 <HAL_RCC_OscConfig+0x1ce>
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d135      	bne.n	8006702 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006696:	4b49      	ldr	r3, [pc, #292]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_RCC_OscConfig+0x17a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e34b      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ae:	f7fb f9fb 	bl	8001aa8 <HAL_GetREVID>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d817      	bhi.n	80066ec <HAL_RCC_OscConfig+0x1b8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	d108      	bne.n	80066d6 <HAL_RCC_OscConfig+0x1a2>
 80066c4:	4b3d      	ldr	r3, [pc, #244]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80066cc:	4a3b      	ldr	r2, [pc, #236]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80066ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066d4:	e07a      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b39      	ldr	r3, [pc, #228]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	031b      	lsls	r3, r3, #12
 80066e4:	4935      	ldr	r1, [pc, #212]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ea:	e06f      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ec:	4b33      	ldr	r3, [pc, #204]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	061b      	lsls	r3, r3, #24
 80066fa:	4930      	ldr	r1, [pc, #192]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006700:	e064      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d045      	beq.n	8006796 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800670a:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 0219 	bic.w	r2, r3, #25
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	4929      	ldr	r1, [pc, #164]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006718:	4313      	orrs	r3, r2
 800671a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fb f994 	bl	8001a48 <HAL_GetTick>
 8006720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006724:	f7fb f990 	bl	8001a48 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e307      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006742:	f7fb f9b1 	bl	8001aa8 <HAL_GetREVID>
 8006746:	4603      	mov	r3, r0
 8006748:	f241 0203 	movw	r2, #4099	; 0x1003
 800674c:	4293      	cmp	r3, r2
 800674e:	d817      	bhi.n	8006780 <HAL_RCC_OscConfig+0x24c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d108      	bne.n	800676a <HAL_RCC_OscConfig+0x236>
 8006758:	4b18      	ldr	r3, [pc, #96]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006760:	4a16      	ldr	r2, [pc, #88]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006766:	6053      	str	r3, [r2, #4]
 8006768:	e030      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	031b      	lsls	r3, r3, #12
 8006778:	4910      	ldr	r1, [pc, #64]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800677a:	4313      	orrs	r3, r2
 800677c:	604b      	str	r3, [r1, #4]
 800677e:	e025      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
 8006780:	4b0e      	ldr	r3, [pc, #56]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	061b      	lsls	r3, r3, #24
 800678e:	490b      	ldr	r1, [pc, #44]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006790:	4313      	orrs	r3, r2
 8006792:	604b      	str	r3, [r1, #4]
 8006794:	e01a      	b.n	80067cc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006796:	4b09      	ldr	r3, [pc, #36]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a08      	ldr	r2, [pc, #32]	; (80067bc <HAL_RCC_OscConfig+0x288>)
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fb f951 	bl	8001a48 <HAL_GetTick>
 80067a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067a8:	e00a      	b.n	80067c0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fb f94d 	bl	8001a48 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d903      	bls.n	80067c0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e2c4      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
 80067bc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80067c0:	4ba4      	ldr	r3, [pc, #656]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1ee      	bne.n	80067aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80a9 	beq.w	800692c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067da:	4b9e      	ldr	r3, [pc, #632]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067e4:	4b9b      	ldr	r3, [pc, #620]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d007      	beq.n	8006800 <HAL_RCC_OscConfig+0x2cc>
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b18      	cmp	r3, #24
 80067f4:	d13a      	bne.n	800686c <HAL_RCC_OscConfig+0x338>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d135      	bne.n	800686c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006800:	4b94      	ldr	r3, [pc, #592]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006808:	2b00      	cmp	r3, #0
 800680a:	d005      	beq.n	8006818 <HAL_RCC_OscConfig+0x2e4>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d001      	beq.n	8006818 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e296      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006818:	f7fb f946 	bl	8001aa8 <HAL_GetREVID>
 800681c:	4603      	mov	r3, r0
 800681e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006822:	4293      	cmp	r3, r2
 8006824:	d817      	bhi.n	8006856 <HAL_RCC_OscConfig+0x322>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	2b20      	cmp	r3, #32
 800682c:	d108      	bne.n	8006840 <HAL_RCC_OscConfig+0x30c>
 800682e:	4b89      	ldr	r3, [pc, #548]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006836:	4a87      	ldr	r2, [pc, #540]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800683c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800683e:	e075      	b.n	800692c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006840:	4b84      	ldr	r3, [pc, #528]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	069b      	lsls	r3, r3, #26
 800684e:	4981      	ldr	r1, [pc, #516]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006850:	4313      	orrs	r3, r2
 8006852:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006854:	e06a      	b.n	800692c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006856:	4b7f      	ldr	r3, [pc, #508]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	061b      	lsls	r3, r3, #24
 8006864:	497b      	ldr	r1, [pc, #492]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006866:	4313      	orrs	r3, r2
 8006868:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800686a:	e05f      	b.n	800692c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d042      	beq.n	80068fa <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006874:	4b77      	ldr	r3, [pc, #476]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a76      	ldr	r2, [pc, #472]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fb f8e2 	bl	8001a48 <HAL_GetTick>
 8006884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006888:	f7fb f8de 	bl	8001a48 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e255      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800689a:	4b6e      	ldr	r3, [pc, #440]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068a6:	f7fb f8ff 	bl	8001aa8 <HAL_GetREVID>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d817      	bhi.n	80068e4 <HAL_RCC_OscConfig+0x3b0>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d108      	bne.n	80068ce <HAL_RCC_OscConfig+0x39a>
 80068bc:	4b65      	ldr	r3, [pc, #404]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068c4:	4a63      	ldr	r2, [pc, #396]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80068c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068ca:	6053      	str	r3, [r2, #4]
 80068cc:	e02e      	b.n	800692c <HAL_RCC_OscConfig+0x3f8>
 80068ce:	4b61      	ldr	r3, [pc, #388]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	069b      	lsls	r3, r3, #26
 80068dc:	495d      	ldr	r1, [pc, #372]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	604b      	str	r3, [r1, #4]
 80068e2:	e023      	b.n	800692c <HAL_RCC_OscConfig+0x3f8>
 80068e4:	4b5b      	ldr	r3, [pc, #364]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	061b      	lsls	r3, r3, #24
 80068f2:	4958      	ldr	r1, [pc, #352]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60cb      	str	r3, [r1, #12]
 80068f8:	e018      	b.n	800692c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80068fa:	4b56      	ldr	r3, [pc, #344]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a55      	ldr	r2, [pc, #340]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006906:	f7fb f89f 	bl	8001a48 <HAL_GetTick>
 800690a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800690e:	f7fb f89b 	bl	8001a48 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e212      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006920:	4b4c      	ldr	r3, [pc, #304]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1f0      	bne.n	800690e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d036      	beq.n	80069a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d019      	beq.n	8006974 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006940:	4b44      	ldr	r3, [pc, #272]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006944:	4a43      	ldr	r2, [pc, #268]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694c:	f7fb f87c 	bl	8001a48 <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006954:	f7fb f878 	bl	8001a48 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e1ef      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006966:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x420>
 8006972:	e018      	b.n	80069a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006974:	4b37      	ldr	r3, [pc, #220]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006978:	4a36      	ldr	r2, [pc, #216]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 800697a:	f023 0301 	bic.w	r3, r3, #1
 800697e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006980:	f7fb f862 	bl	8001a48 <HAL_GetTick>
 8006984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006988:	f7fb f85e 	bl	8001a48 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e1d5      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800699a:	4b2e      	ldr	r3, [pc, #184]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 800699c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d036      	beq.n	8006a20 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d019      	beq.n	80069ee <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069ba:	4b26      	ldr	r3, [pc, #152]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a25      	ldr	r2, [pc, #148]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80069c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069c6:	f7fb f83f 	bl	8001a48 <HAL_GetTick>
 80069ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80069ce:	f7fb f83b 	bl	8001a48 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e1b2      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80069e0:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0f0      	beq.n	80069ce <HAL_RCC_OscConfig+0x49a>
 80069ec:	e018      	b.n	8006a20 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069ee:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a18      	ldr	r2, [pc, #96]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 80069f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069fa:	f7fb f825 	bl	8001a48 <HAL_GetTick>
 80069fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a02:	f7fb f821 	bl	8001a48 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e198      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a14:	4b0f      	ldr	r3, [pc, #60]	; (8006a54 <HAL_RCC_OscConfig+0x520>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f0      	bne.n	8006a02 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8085 	beq.w	8006b38 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <HAL_RCC_OscConfig+0x524>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a09      	ldr	r2, [pc, #36]	; (8006a58 <HAL_RCC_OscConfig+0x524>)
 8006a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a3a:	f7fb f805 	bl	8001a48 <HAL_GetTick>
 8006a3e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a40:	e00c      	b.n	8006a5c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a42:	f7fb f801 	bl	8001a48 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b64      	cmp	r3, #100	; 0x64
 8006a4e:	d905      	bls.n	8006a5c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e178      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
 8006a54:	58024400 	.word	0x58024400
 8006a58:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a5c:	4b96      	ldr	r3, [pc, #600]	; (8006cb8 <HAL_RCC_OscConfig+0x784>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0ec      	beq.n	8006a42 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d106      	bne.n	8006a7e <HAL_RCC_OscConfig+0x54a>
 8006a70:	4b92      	ldr	r3, [pc, #584]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a74:	4a91      	ldr	r2, [pc, #580]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006a76:	f043 0301 	orr.w	r3, r3, #1
 8006a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7c:	e02d      	b.n	8006ada <HAL_RCC_OscConfig+0x5a6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x56c>
 8006a86:	4b8d      	ldr	r3, [pc, #564]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8a:	4a8c      	ldr	r2, [pc, #560]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	6713      	str	r3, [r2, #112]	; 0x70
 8006a92:	4b8a      	ldr	r3, [pc, #552]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a96:	4a89      	ldr	r2, [pc, #548]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9e:	e01c      	b.n	8006ada <HAL_RCC_OscConfig+0x5a6>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x58e>
 8006aa8:	4b84      	ldr	r3, [pc, #528]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	4a83      	ldr	r2, [pc, #524]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006aae:	f043 0304 	orr.w	r3, r3, #4
 8006ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab4:	4b81      	ldr	r3, [pc, #516]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	4a80      	ldr	r2, [pc, #512]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac0:	e00b      	b.n	8006ada <HAL_RCC_OscConfig+0x5a6>
 8006ac2:	4b7e      	ldr	r3, [pc, #504]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac6:	4a7d      	ldr	r2, [pc, #500]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ace:	4b7b      	ldr	r3, [pc, #492]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	4a7a      	ldr	r2, [pc, #488]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006ad4:	f023 0304 	bic.w	r3, r3, #4
 8006ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d015      	beq.n	8006b0e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae2:	f7fa ffb1 	bl	8001a48 <HAL_GetTick>
 8006ae6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ae8:	e00a      	b.n	8006b00 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aea:	f7fa ffad 	bl	8001a48 <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e122      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b00:	4b6e      	ldr	r3, [pc, #440]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d0ee      	beq.n	8006aea <HAL_RCC_OscConfig+0x5b6>
 8006b0c:	e014      	b.n	8006b38 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0e:	f7fa ff9b 	bl	8001a48 <HAL_GetTick>
 8006b12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b14:	e00a      	b.n	8006b2c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b16:	f7fa ff97 	bl	8001a48 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e10c      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b2c:	4b63      	ldr	r3, [pc, #396]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ee      	bne.n	8006b16 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8101 	beq.w	8006d44 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b42:	4b5e      	ldr	r3, [pc, #376]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b4a:	2b18      	cmp	r3, #24
 8006b4c:	f000 80bc 	beq.w	8006cc8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	f040 8095 	bne.w	8006c84 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5a:	4b58      	ldr	r3, [pc, #352]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a57      	ldr	r2, [pc, #348]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fa ff6f 	bl	8001a48 <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6e:	f7fa ff6b 	bl	8001a48 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e0e2      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b80:	4b4e      	ldr	r3, [pc, #312]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f0      	bne.n	8006b6e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b8c:	4b4b      	ldr	r3, [pc, #300]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <HAL_RCC_OscConfig+0x78c>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b9c:	0112      	lsls	r2, r2, #4
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	4946      	ldr	r1, [pc, #280]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	628b      	str	r3, [r1, #40]	; 0x28
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	3b01      	subs	r3, #1
 8006bac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	025b      	lsls	r3, r3, #9
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	041b      	lsls	r3, r3, #16
 8006bc4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	061b      	lsls	r3, r3, #24
 8006bd2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006bd6:	4939      	ldr	r1, [pc, #228]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006bdc:	4b37      	ldr	r3, [pc, #220]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	4a36      	ldr	r2, [pc, #216]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006be8:	4b34      	ldr	r3, [pc, #208]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bec:	4b35      	ldr	r3, [pc, #212]	; (8006cc4 <HAL_RCC_OscConfig+0x790>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bf4:	00d2      	lsls	r2, r2, #3
 8006bf6:	4931      	ldr	r1, [pc, #196]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006bfc:	4b2f      	ldr	r3, [pc, #188]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	f023 020c 	bic.w	r2, r3, #12
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	492c      	ldr	r1, [pc, #176]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c0e:	4b2b      	ldr	r3, [pc, #172]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	f023 0202 	bic.w	r2, r3, #2
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	4928      	ldr	r1, [pc, #160]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c20:	4b26      	ldr	r3, [pc, #152]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	4a25      	ldr	r2, [pc, #148]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c2c:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	4a22      	ldr	r2, [pc, #136]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c38:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	4a1f      	ldr	r2, [pc, #124]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c44:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c50:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a19      	ldr	r2, [pc, #100]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fa fef4 	bl	8001a48 <HAL_GetTick>
 8006c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c64:	f7fa fef0 	bl	8001a48 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e067      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c76:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCC_OscConfig+0x730>
 8006c82:	e05f      	b.n	8006d44 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c84:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a0c      	ldr	r2, [pc, #48]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c90:	f7fa feda 	bl	8001a48 <HAL_GetTick>
 8006c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fa fed6 	bl	8001a48 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e04d      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006caa:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <HAL_RCC_OscConfig+0x788>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x764>
 8006cb6:	e045      	b.n	8006d44 <HAL_RCC_OscConfig+0x810>
 8006cb8:	58024800 	.word	0x58024800
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	fffffc0c 	.word	0xfffffc0c
 8006cc4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006cc8:	4b21      	ldr	r3, [pc, #132]	; (8006d50 <HAL_RCC_OscConfig+0x81c>)
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cce:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <HAL_RCC_OscConfig+0x81c>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d031      	beq.n	8006d40 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f003 0203 	and.w	r2, r3, #3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d12a      	bne.n	8006d40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d122      	bne.n	8006d40 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d11a      	bne.n	8006d40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	0a5b      	lsrs	r3, r3, #9
 8006d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d111      	bne.n	8006d40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d108      	bne.n	8006d40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	0e1b      	lsrs	r3, r3, #24
 8006d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	58024400 	.word	0x58024400

08006d54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e19c      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d68:	4b8a      	ldr	r3, [pc, #552]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 030f 	and.w	r3, r3, #15
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d910      	bls.n	8006d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d76:	4b87      	ldr	r3, [pc, #540]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f023 020f 	bic.w	r2, r3, #15
 8006d7e:	4985      	ldr	r1, [pc, #532]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d86:	4b83      	ldr	r3, [pc, #524]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d001      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e184      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d010      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691a      	ldr	r2, [r3, #16]
 8006da8:	4b7b      	ldr	r3, [pc, #492]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d908      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006db4:	4b78      	ldr	r3, [pc, #480]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	4975      	ldr	r1, [pc, #468]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0308 	and.w	r3, r3, #8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d010      	beq.n	8006df4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	4b70      	ldr	r3, [pc, #448]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d908      	bls.n	8006df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006de2:	4b6d      	ldr	r3, [pc, #436]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	496a      	ldr	r1, [pc, #424]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0310 	and.w	r3, r3, #16
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d010      	beq.n	8006e22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699a      	ldr	r2, [r3, #24]
 8006e04:	4b64      	ldr	r3, [pc, #400]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d908      	bls.n	8006e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e10:	4b61      	ldr	r3, [pc, #388]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	495e      	ldr	r1, [pc, #376]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0320 	and.w	r3, r3, #32
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d010      	beq.n	8006e50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	4b59      	ldr	r3, [pc, #356]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d908      	bls.n	8006e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e3e:	4b56      	ldr	r3, [pc, #344]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	4953      	ldr	r1, [pc, #332]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	4b4d      	ldr	r3, [pc, #308]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d908      	bls.n	8006e7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e6c:	4b4a      	ldr	r3, [pc, #296]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f023 020f 	bic.w	r2, r3, #15
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	4947      	ldr	r1, [pc, #284]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d055      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e8a:	4b43      	ldr	r3, [pc, #268]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	4940      	ldr	r1, [pc, #256]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d107      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ea4:	4b3c      	ldr	r3, [pc, #240]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d121      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0f6      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ebc:	4b36      	ldr	r3, [pc, #216]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d115      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0ea      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ed4:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d109      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0de      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ee4:	4b2c      	ldr	r3, [pc, #176]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0d6      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ef4:	4b28      	ldr	r3, [pc, #160]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f023 0207 	bic.w	r2, r3, #7
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4925      	ldr	r1, [pc, #148]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f06:	f7fa fd9f 	bl	8001a48 <HAL_GetTick>
 8006f0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0c:	e00a      	b.n	8006f24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f0e:	f7fa fd9b 	bl	8001a48 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e0be      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f24:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1eb      	bne.n	8006f0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d010      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d208      	bcs.n	8006f64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f52:	4b11      	ldr	r3, [pc, #68]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	f023 020f 	bic.w	r2, r3, #15
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	490e      	ldr	r1, [pc, #56]	; (8006f98 <HAL_RCC_ClockConfig+0x244>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f64:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d214      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f023 020f 	bic.w	r2, r3, #15
 8006f7a:	4906      	ldr	r1, [pc, #24]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f82:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <HAL_RCC_ClockConfig+0x240>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d005      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e086      	b.n	80070a2 <HAL_RCC_ClockConfig+0x34e>
 8006f94:	52002000 	.word	0x52002000
 8006f98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d010      	beq.n	8006fca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	4b3f      	ldr	r3, [pc, #252]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d208      	bcs.n	8006fca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fb8:	4b3c      	ldr	r3, [pc, #240]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	4939      	ldr	r1, [pc, #228]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d010      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	4b34      	ldr	r3, [pc, #208]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d208      	bcs.n	8006ff8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006fe6:	4b31      	ldr	r3, [pc, #196]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	492e      	ldr	r1, [pc, #184]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0310 	and.w	r3, r3, #16
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	4b28      	ldr	r3, [pc, #160]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007010:	429a      	cmp	r2, r3
 8007012:	d208      	bcs.n	8007026 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007014:	4b25      	ldr	r3, [pc, #148]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	4922      	ldr	r1, [pc, #136]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8007022:	4313      	orrs	r3, r2
 8007024:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d010      	beq.n	8007054 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69da      	ldr	r2, [r3, #28]
 8007036:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800703e:	429a      	cmp	r2, r3
 8007040:	d208      	bcs.n	8007054 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007042:	4b1a      	ldr	r3, [pc, #104]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	4917      	ldr	r1, [pc, #92]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8007050:	4313      	orrs	r3, r2
 8007052:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007054:	f000 f834 	bl	80070c0 <HAL_RCC_GetSysClockFreq>
 8007058:	4602      	mov	r2, r0
 800705a:	4b14      	ldr	r3, [pc, #80]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	f003 030f 	and.w	r3, r3, #15
 8007064:	4912      	ldr	r1, [pc, #72]	; (80070b0 <HAL_RCC_ClockConfig+0x35c>)
 8007066:	5ccb      	ldrb	r3, [r1, r3]
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	fa22 f303 	lsr.w	r3, r2, r3
 8007070:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007072:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <HAL_RCC_ClockConfig+0x358>)
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	4a0d      	ldr	r2, [pc, #52]	; (80070b0 <HAL_RCC_ClockConfig+0x35c>)
 800707c:	5cd3      	ldrb	r3, [r2, r3]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <HAL_RCC_ClockConfig+0x360>)
 800708a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <HAL_RCC_ClockConfig+0x364>)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007092:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <HAL_RCC_ClockConfig+0x368>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f7fa fc8c 	bl	80019b4 <HAL_InitTick>
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	58024400 	.word	0x58024400
 80070b0:	0800f820 	.word	0x0800f820
 80070b4:	24000004 	.word	0x24000004
 80070b8:	24000000 	.word	0x24000000
 80070bc:	2400001c 	.word	0x2400001c

080070c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b089      	sub	sp, #36	; 0x24
 80070c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070c6:	4bb3      	ldr	r3, [pc, #716]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070ce:	2b18      	cmp	r3, #24
 80070d0:	f200 8155 	bhi.w	800737e <HAL_RCC_GetSysClockFreq+0x2be>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	08007141 	.word	0x08007141
 80070e0:	0800737f 	.word	0x0800737f
 80070e4:	0800737f 	.word	0x0800737f
 80070e8:	0800737f 	.word	0x0800737f
 80070ec:	0800737f 	.word	0x0800737f
 80070f0:	0800737f 	.word	0x0800737f
 80070f4:	0800737f 	.word	0x0800737f
 80070f8:	0800737f 	.word	0x0800737f
 80070fc:	08007167 	.word	0x08007167
 8007100:	0800737f 	.word	0x0800737f
 8007104:	0800737f 	.word	0x0800737f
 8007108:	0800737f 	.word	0x0800737f
 800710c:	0800737f 	.word	0x0800737f
 8007110:	0800737f 	.word	0x0800737f
 8007114:	0800737f 	.word	0x0800737f
 8007118:	0800737f 	.word	0x0800737f
 800711c:	0800716d 	.word	0x0800716d
 8007120:	0800737f 	.word	0x0800737f
 8007124:	0800737f 	.word	0x0800737f
 8007128:	0800737f 	.word	0x0800737f
 800712c:	0800737f 	.word	0x0800737f
 8007130:	0800737f 	.word	0x0800737f
 8007134:	0800737f 	.word	0x0800737f
 8007138:	0800737f 	.word	0x0800737f
 800713c:	08007173 	.word	0x08007173
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007140:	4b94      	ldr	r3, [pc, #592]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d009      	beq.n	8007160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800714c:	4b91      	ldr	r3, [pc, #580]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	08db      	lsrs	r3, r3, #3
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	4a90      	ldr	r2, [pc, #576]	; (8007398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
 800715c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800715e:	e111      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007160:	4b8d      	ldr	r3, [pc, #564]	; (8007398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007162:	61bb      	str	r3, [r7, #24]
    break;
 8007164:	e10e      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007166:	4b8d      	ldr	r3, [pc, #564]	; (800739c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007168:	61bb      	str	r3, [r7, #24]
    break;
 800716a:	e10b      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800716c:	4b8c      	ldr	r3, [pc, #560]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800716e:	61bb      	str	r3, [r7, #24]
    break;
 8007170:	e108      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007172:	4b88      	ldr	r3, [pc, #544]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800717c:	4b85      	ldr	r3, [pc, #532]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007186:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007188:	4b82      	ldr	r3, [pc, #520]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007192:	4b80      	ldr	r3, [pc, #512]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	08db      	lsrs	r3, r3, #3
 8007198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80e1 	beq.w	8007378 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f000 8083 	beq.w	80072c4 <HAL_RCC_GetSysClockFreq+0x204>
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	f200 80a1 	bhi.w	8007308 <HAL_RCC_GetSysClockFreq+0x248>
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x114>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d056      	beq.n	8007280 <HAL_RCC_GetSysClockFreq+0x1c0>
 80071d2:	e099      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d4:	4b6f      	ldr	r3, [pc, #444]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02d      	beq.n	800723c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071e0:	4b6c      	ldr	r3, [pc, #432]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	08db      	lsrs	r3, r3, #3
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	4a6b      	ldr	r2, [pc, #428]	; (8007398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
 80071f0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b62      	ldr	r3, [pc, #392]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a02 	vldr	s12, [r7, #8]
 800721e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800723a:	e087      	b.n	800734c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a58 	vldr	s13, [pc, #352]	; 80073a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b51      	ldr	r3, [pc, #324]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007262:	eddf 5a50 	vldr	s11, [pc, #320]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800727e:	e065      	b.n	800734c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80073ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800728e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007292:	4b40      	ldr	r3, [pc, #256]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072c2:	e043      	b.n	800734c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80073b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007306:	e021      	b.n	800734c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eddf 6a26 	vldr	s13, [pc, #152]	; 80073ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8007316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732a:	ed97 6a02 	vldr	s12, [r7, #8]
 800732e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80073a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800733e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800734a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800734c:	4b11      	ldr	r3, [pc, #68]	; (8007394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	0a5b      	lsrs	r3, r3, #9
 8007352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007356:	3301      	adds	r3, #1
 8007358:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	ee07 3a90 	vmov	s15, r3
 8007360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007364:	edd7 6a07 	vldr	s13, [r7, #28]
 8007368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800736c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007370:	ee17 3a90 	vmov	r3, s15
 8007374:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007376:	e005      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	61bb      	str	r3, [r7, #24]
    break;
 800737c:	e002      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007380:	61bb      	str	r3, [r7, #24]
    break;
 8007382:	bf00      	nop
  }

  return sysclockfreq;
 8007384:	69bb      	ldr	r3, [r7, #24]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3724      	adds	r7, #36	; 0x24
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
 8007398:	03d09000 	.word	0x03d09000
 800739c:	003d0900 	.word	0x003d0900
 80073a0:	00f42400 	.word	0x00f42400
 80073a4:	46000000 	.word	0x46000000
 80073a8:	4c742400 	.word	0x4c742400
 80073ac:	4a742400 	.word	0x4a742400
 80073b0:	4b742400 	.word	0x4b742400

080073b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073ba:	f7ff fe81 	bl	80070c0 <HAL_RCC_GetSysClockFreq>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b10      	ldr	r3, [pc, #64]	; (8007404 <HAL_RCC_GetHCLKFreq+0x50>)
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	0a1b      	lsrs	r3, r3, #8
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	490f      	ldr	r1, [pc, #60]	; (8007408 <HAL_RCC_GetHCLKFreq+0x54>)
 80073cc:	5ccb      	ldrb	r3, [r1, r3]
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	fa22 f303 	lsr.w	r3, r2, r3
 80073d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <HAL_RCC_GetHCLKFreq+0x50>)
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	4a09      	ldr	r2, [pc, #36]	; (8007408 <HAL_RCC_GetHCLKFreq+0x54>)
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	f003 031f 	and.w	r3, r3, #31
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	fa22 f303 	lsr.w	r3, r2, r3
 80073ee:	4a07      	ldr	r2, [pc, #28]	; (800740c <HAL_RCC_GetHCLKFreq+0x58>)
 80073f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80073f2:	4a07      	ldr	r2, [pc, #28]	; (8007410 <HAL_RCC_GetHCLKFreq+0x5c>)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <HAL_RCC_GetHCLKFreq+0x58>)
 80073fa:	681b      	ldr	r3, [r3, #0]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	58024400 	.word	0x58024400
 8007408:	0800f820 	.word	0x0800f820
 800740c:	24000004 	.word	0x24000004
 8007410:	24000000 	.word	0x24000000

08007414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007418:	f7ff ffcc 	bl	80073b4 <HAL_RCC_GetHCLKFreq>
 800741c:	4602      	mov	r2, r0
 800741e:	4b06      	ldr	r3, [pc, #24]	; (8007438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	4904      	ldr	r1, [pc, #16]	; (800743c <HAL_RCC_GetPCLK1Freq+0x28>)
 800742a:	5ccb      	ldrb	r3, [r1, r3]
 800742c:	f003 031f 	and.w	r3, r3, #31
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	58024400 	.word	0x58024400
 800743c:	0800f820 	.word	0x0800f820

08007440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007444:	f7ff ffb6 	bl	80073b4 <HAL_RCC_GetHCLKFreq>
 8007448:	4602      	mov	r2, r0
 800744a:	4b06      	ldr	r3, [pc, #24]	; (8007464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	4904      	ldr	r1, [pc, #16]	; (8007468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007456:	5ccb      	ldrb	r3, [r1, r3]
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007460:	4618      	mov	r0, r3
 8007462:	bd80      	pop	{r7, pc}
 8007464:	58024400 	.word	0x58024400
 8007468:	0800f820 	.word	0x0800f820

0800746c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007478:	2300      	movs	r3, #0
 800747a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d03f      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007490:	d02a      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007496:	d824      	bhi.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800749c:	d018      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800749e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074a2:	d81e      	bhi.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ac:	d007      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074ae:	e018      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b0:	4bab      	ldr	r3, [pc, #684]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	4aaa      	ldr	r2, [pc, #680]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074bc:	e015      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3304      	adds	r3, #4
 80074c2:	2102      	movs	r1, #2
 80074c4:	4618      	mov	r0, r3
 80074c6:	f001 fff3 	bl	80094b0 <RCCEx_PLL2_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074ce:	e00c      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3324      	adds	r3, #36	; 0x24
 80074d4:	2102      	movs	r1, #2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f002 f89c 	bl	8009614 <RCCEx_PLL3_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80074e0:	e003      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
      break;
 80074e6:	e000      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80074e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d109      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80074f0:	4b9b      	ldr	r3, [pc, #620]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074fc:	4998      	ldr	r1, [pc, #608]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	650b      	str	r3, [r1, #80]	; 0x50
 8007502:	e001      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d03d      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007518:	2b04      	cmp	r3, #4
 800751a:	d826      	bhi.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800751c:	a201      	add	r2, pc, #4	; (adr r2, 8007524 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800751e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007522:	bf00      	nop
 8007524:	08007539 	.word	0x08007539
 8007528:	08007547 	.word	0x08007547
 800752c:	08007559 	.word	0x08007559
 8007530:	08007571 	.word	0x08007571
 8007534:	08007571 	.word	0x08007571
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007538:	4b89      	ldr	r3, [pc, #548]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	4a88      	ldr	r2, [pc, #544]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800753e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007544:	e015      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3304      	adds	r3, #4
 800754a:	2100      	movs	r1, #0
 800754c:	4618      	mov	r0, r3
 800754e:	f001 ffaf 	bl	80094b0 <RCCEx_PLL2_Config>
 8007552:	4603      	mov	r3, r0
 8007554:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007556:	e00c      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3324      	adds	r3, #36	; 0x24
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f002 f858 	bl	8009614 <RCCEx_PLL3_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007568:	e003      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
      break;
 800756e:	e000      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d109      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007578:	4b79      	ldr	r3, [pc, #484]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800757a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757c:	f023 0207 	bic.w	r2, r3, #7
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	4976      	ldr	r1, [pc, #472]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007586:	4313      	orrs	r3, r2
 8007588:	650b      	str	r3, [r1, #80]	; 0x50
 800758a:	e001      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007598:	2b00      	cmp	r3, #0
 800759a:	d042      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a4:	d02b      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 80075a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075aa:	d825      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075ac:	2bc0      	cmp	r3, #192	; 0xc0
 80075ae:	d028      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80075b0:	2bc0      	cmp	r3, #192	; 0xc0
 80075b2:	d821      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d016      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80075b8:	2b80      	cmp	r3, #128	; 0x80
 80075ba:	d81d      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d007      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80075c4:	e018      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c6:	4b66      	ldr	r3, [pc, #408]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a65      	ldr	r2, [pc, #404]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075d2:	e017      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 ff68 	bl	80094b0 <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075e4:	e00e      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3324      	adds	r3, #36	; 0x24
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f002 f811 	bl	8009614 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80075f6:	e005      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
      break;
 80075fc:	e002      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800760a:	4b55      	ldr	r3, [pc, #340]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007616:	4952      	ldr	r1, [pc, #328]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007618:	4313      	orrs	r3, r2
 800761a:	650b      	str	r3, [r1, #80]	; 0x50
 800761c:	e001      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800762a:	2b00      	cmp	r3, #0
 800762c:	d049      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007638:	d030      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800763a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800763e:	d82a      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007640:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007644:	d02c      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007646:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800764a:	d824      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800764c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007650:	d018      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007656:	d81e      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800765c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007660:	d007      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007662:	e018      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007664:	4b3e      	ldr	r3, [pc, #248]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4a3d      	ldr	r2, [pc, #244]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800766a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800766e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007670:	e017      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	3304      	adds	r3, #4
 8007676:	2100      	movs	r1, #0
 8007678:	4618      	mov	r0, r3
 800767a:	f001 ff19 	bl	80094b0 <RCCEx_PLL2_Config>
 800767e:	4603      	mov	r3, r0
 8007680:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007682:	e00e      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3324      	adds	r3, #36	; 0x24
 8007688:	2100      	movs	r1, #0
 800768a:	4618      	mov	r0, r3
 800768c:	f001 ffc2 	bl	8009614 <RCCEx_PLL3_Config>
 8007690:	4603      	mov	r3, r0
 8007692:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007694:	e005      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	75fb      	strb	r3, [r7, #23]
      break;
 800769a:	e002      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80076a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076a8:	4b2d      	ldr	r3, [pc, #180]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076b6:	492a      	ldr	r1, [pc, #168]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	658b      	str	r3, [r1, #88]	; 0x58
 80076bc:	e001      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d04c      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80076d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076d8:	d030      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80076da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076de:	d82a      	bhi.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076e4:	d02c      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80076e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076ea:	d824      	bhi.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076f0:	d018      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80076f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076f6:	d81e      	bhi.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80076fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007700:	d007      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007702:	e018      	b.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007704:	4b16      	ldr	r3, [pc, #88]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	4a15      	ldr	r2, [pc, #84]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800770a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800770e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007710:	e017      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3304      	adds	r3, #4
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fec9 	bl	80094b0 <RCCEx_PLL2_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007722:	e00e      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3324      	adds	r3, #36	; 0x24
 8007728:	2100      	movs	r1, #0
 800772a:	4618      	mov	r0, r3
 800772c:	f001 ff72 	bl	8009614 <RCCEx_PLL3_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007734:	e005      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	75fb      	strb	r3, [r7, #23]
      break;
 800773a:	e002      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800773c:	bf00      	nop
 800773e:	e000      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10d      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007748:	4b05      	ldr	r3, [pc, #20]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007756:	4902      	ldr	r1, [pc, #8]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007758:	4313      	orrs	r3, r2
 800775a:	658b      	str	r3, [r1, #88]	; 0x58
 800775c:	e004      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d032      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007778:	2b30      	cmp	r3, #48	; 0x30
 800777a:	d01c      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800777c:	2b30      	cmp	r3, #48	; 0x30
 800777e:	d817      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007780:	2b20      	cmp	r3, #32
 8007782:	d00c      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007784:	2b20      	cmp	r3, #32
 8007786:	d813      	bhi.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d016      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800778c:	2b10      	cmp	r3, #16
 800778e:	d10f      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007790:	4baf      	ldr	r3, [pc, #700]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	4aae      	ldr	r2, [pc, #696]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800779a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800779c:	e00e      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	2102      	movs	r1, #2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 fe83 	bl	80094b0 <RCCEx_PLL2_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80077ae:	e005      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
      break;
 80077b4:	e002      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80077ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077c2:	4ba3      	ldr	r3, [pc, #652]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ce:	49a0      	ldr	r1, [pc, #640]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077d4:	e001      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d047      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ee:	d030      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80077f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077f4:	d82a      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80077f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077fa:	d02c      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80077fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007800:	d824      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007806:	d018      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780c:	d81e      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007816:	d007      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007818:	e018      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800781a:	4b8d      	ldr	r3, [pc, #564]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	4a8c      	ldr	r2, [pc, #560]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007824:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007826:	e017      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f001 fe3e 	bl	80094b0 <RCCEx_PLL2_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007838:	e00e      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3324      	adds	r3, #36	; 0x24
 800783e:	2100      	movs	r1, #0
 8007840:	4618      	mov	r0, r3
 8007842:	f001 fee7 	bl	8009614 <RCCEx_PLL3_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800784a:	e005      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	75fb      	strb	r3, [r7, #23]
      break;
 8007850:	e002      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007852:	bf00      	nop
 8007854:	e000      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007858:	7dfb      	ldrb	r3, [r7, #23]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800785e:	4b7c      	ldr	r3, [pc, #496]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007862:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786a:	4979      	ldr	r1, [pc, #484]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800786c:	4313      	orrs	r3, r2
 800786e:	650b      	str	r3, [r1, #80]	; 0x50
 8007870:	e001      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d049      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800788a:	d02e      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800788c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007890:	d828      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007892:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007896:	d02a      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800789c:	d822      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800789e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078a2:	d026      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80078a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078a8:	d81c      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ae:	d010      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80078b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b4:	d816      	bhi.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01d      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80078ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078be:	d111      	bne.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	2101      	movs	r1, #1
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 fdf2 	bl	80094b0 <RCCEx_PLL2_Config>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078d0:	e012      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3324      	adds	r3, #36	; 0x24
 80078d6:	2101      	movs	r1, #1
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 fe9b 	bl	8009614 <RCCEx_PLL3_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80078e2:	e009      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
      break;
 80078e8:	e006      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80078ea:	bf00      	nop
 80078ec:	e004      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80078ee:	bf00      	nop
 80078f0:	e002      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80078f2:	bf00      	nop
 80078f4:	e000      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80078f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d109      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078fe:	4b54      	ldr	r3, [pc, #336]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007902:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800790a:	4951      	ldr	r1, [pc, #324]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800790c:	4313      	orrs	r3, r2
 800790e:	650b      	str	r3, [r1, #80]	; 0x50
 8007910:	e001      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d04b      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800792c:	d02e      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800792e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007932:	d828      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007938:	d02a      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800793a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793e:	d822      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007940:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007944:	d026      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007946:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800794a:	d81c      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800794c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007950:	d010      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007956:	d816      	bhi.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d01d      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800795c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007960:	d111      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3304      	adds	r3, #4
 8007966:	2101      	movs	r1, #1
 8007968:	4618      	mov	r0, r3
 800796a:	f001 fda1 	bl	80094b0 <RCCEx_PLL2_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007972:	e012      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3324      	adds	r3, #36	; 0x24
 8007978:	2101      	movs	r1, #1
 800797a:	4618      	mov	r0, r3
 800797c:	f001 fe4a 	bl	8009614 <RCCEx_PLL3_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007984:	e009      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
      break;
 800798a:	e006      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800798c:	bf00      	nop
 800798e:	e004      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007990:	bf00      	nop
 8007992:	e002      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007994:	bf00      	nop
 8007996:	e000      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800799a:	7dfb      	ldrb	r3, [r7, #23]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10a      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079a0:	4b2b      	ldr	r3, [pc, #172]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079ae:	4928      	ldr	r1, [pc, #160]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	658b      	str	r3, [r1, #88]	; 0x58
 80079b4:	e001      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d02f      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ce:	d00e      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 80079d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d4:	d814      	bhi.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d015      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80079da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079de:	d10f      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e0:	4b1b      	ldr	r3, [pc, #108]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	4a1a      	ldr	r2, [pc, #104]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079ec:	e00c      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3304      	adds	r3, #4
 80079f2:	2101      	movs	r1, #1
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 fd5b 	bl	80094b0 <RCCEx_PLL2_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80079fe:	e003      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d109      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1a:	490d      	ldr	r1, [pc, #52]	; (8007a50 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	650b      	str	r3, [r1, #80]	; 0x50
 8007a20:	e001      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d033      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d81c      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007a3a:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a7b 	.word	0x08007a7b
 8007a44:	08007a55 	.word	0x08007a55
 8007a48:	08007a63 	.word	0x08007a63
 8007a4c:	08007a7b 	.word	0x08007a7b
 8007a50:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a54:	4bb8      	ldr	r3, [pc, #736]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4ab7      	ldr	r2, [pc, #732]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a60:	e00c      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3304      	adds	r3, #4
 8007a66:	2102      	movs	r1, #2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fd21 	bl	80094b0 <RCCEx_PLL2_Config>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007a72:	e003      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	75fb      	strb	r3, [r7, #23]
      break;
 8007a78:	e000      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a82:	4bad      	ldr	r3, [pc, #692]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a86:	f023 0203 	bic.w	r2, r3, #3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8e:	49aa      	ldr	r1, [pc, #680]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a94:	e001      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8086 	beq.w	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aa8:	4ba4      	ldr	r3, [pc, #656]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4aa3      	ldr	r2, [pc, #652]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ab4:	f7f9 ffc8 	bl	8001a48 <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aba:	e009      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007abc:	f7f9 ffc4 	bl	8001a48 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b64      	cmp	r3, #100	; 0x64
 8007ac8:	d902      	bls.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	75fb      	strb	r3, [r7, #23]
        break;
 8007ace:	e005      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ad0:	4b9a      	ldr	r3, [pc, #616]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0ef      	beq.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d166      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007ae2:	4b95      	ldr	r3, [pc, #596]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ae4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aec:	4053      	eors	r3, r2
 8007aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d013      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007af6:	4b90      	ldr	r3, [pc, #576]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b00:	4b8d      	ldr	r3, [pc, #564]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	4a8c      	ldr	r2, [pc, #560]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b0c:	4b8a      	ldr	r3, [pc, #552]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	4a89      	ldr	r2, [pc, #548]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b18:	4a87      	ldr	r2, [pc, #540]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b28:	d115      	bne.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2a:	f7f9 ff8d 	bl	8001a48 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b30:	e00b      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b32:	f7f9 ff89 	bl	8001a48 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d902      	bls.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	75fb      	strb	r3, [r7, #23]
            break;
 8007b48:	e005      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b4a:	4b7b      	ldr	r3, [pc, #492]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0ed      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d126      	bne.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6a:	d10d      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007b6c:	4b72      	ldr	r3, [pc, #456]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b7a:	0919      	lsrs	r1, r3, #4
 8007b7c:	4b70      	ldr	r3, [pc, #448]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007b7e:	400b      	ands	r3, r1
 8007b80:	496d      	ldr	r1, [pc, #436]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	610b      	str	r3, [r1, #16]
 8007b86:	e005      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007b88:	4b6b      	ldr	r3, [pc, #428]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	4a6a      	ldr	r2, [pc, #424]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b92:	6113      	str	r3, [r2, #16]
 8007b94:	4b68      	ldr	r3, [pc, #416]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba2:	4965      	ldr	r1, [pc, #404]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	670b      	str	r3, [r1, #112]	; 0x70
 8007ba8:	e004      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	75bb      	strb	r3, [r7, #22]
 8007bae:	e001      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d07e      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bc4:	2b28      	cmp	r3, #40	; 0x28
 8007bc6:	d867      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c9f 	.word	0x08007c9f
 8007bd4:	08007c99 	.word	0x08007c99
 8007bd8:	08007c99 	.word	0x08007c99
 8007bdc:	08007c99 	.word	0x08007c99
 8007be0:	08007c99 	.word	0x08007c99
 8007be4:	08007c99 	.word	0x08007c99
 8007be8:	08007c99 	.word	0x08007c99
 8007bec:	08007c99 	.word	0x08007c99
 8007bf0:	08007c75 	.word	0x08007c75
 8007bf4:	08007c99 	.word	0x08007c99
 8007bf8:	08007c99 	.word	0x08007c99
 8007bfc:	08007c99 	.word	0x08007c99
 8007c00:	08007c99 	.word	0x08007c99
 8007c04:	08007c99 	.word	0x08007c99
 8007c08:	08007c99 	.word	0x08007c99
 8007c0c:	08007c99 	.word	0x08007c99
 8007c10:	08007c87 	.word	0x08007c87
 8007c14:	08007c99 	.word	0x08007c99
 8007c18:	08007c99 	.word	0x08007c99
 8007c1c:	08007c99 	.word	0x08007c99
 8007c20:	08007c99 	.word	0x08007c99
 8007c24:	08007c99 	.word	0x08007c99
 8007c28:	08007c99 	.word	0x08007c99
 8007c2c:	08007c99 	.word	0x08007c99
 8007c30:	08007c9f 	.word	0x08007c9f
 8007c34:	08007c99 	.word	0x08007c99
 8007c38:	08007c99 	.word	0x08007c99
 8007c3c:	08007c99 	.word	0x08007c99
 8007c40:	08007c99 	.word	0x08007c99
 8007c44:	08007c99 	.word	0x08007c99
 8007c48:	08007c99 	.word	0x08007c99
 8007c4c:	08007c99 	.word	0x08007c99
 8007c50:	08007c9f 	.word	0x08007c9f
 8007c54:	08007c99 	.word	0x08007c99
 8007c58:	08007c99 	.word	0x08007c99
 8007c5c:	08007c99 	.word	0x08007c99
 8007c60:	08007c99 	.word	0x08007c99
 8007c64:	08007c99 	.word	0x08007c99
 8007c68:	08007c99 	.word	0x08007c99
 8007c6c:	08007c99 	.word	0x08007c99
 8007c70:	08007c9f 	.word	0x08007c9f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	2101      	movs	r1, #1
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 fc18 	bl	80094b0 <RCCEx_PLL2_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c84:	e00c      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3324      	adds	r3, #36	; 0x24
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 fcc1 	bl	8009614 <RCCEx_PLL3_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007c96:	e003      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9c:	e000      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ca6:	4b24      	ldr	r3, [pc, #144]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007caa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cb2:	4921      	ldr	r1, [pc, #132]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	654b      	str	r3, [r1, #84]	; 0x54
 8007cb8:	e001      	b.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d03e      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d820      	bhi.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007cd2:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007d1b 	.word	0x08007d1b
 8007cdc:	08007cf1 	.word	0x08007cf1
 8007ce0:	08007d03 	.word	0x08007d03
 8007ce4:	08007d1b 	.word	0x08007d1b
 8007ce8:	08007d1b 	.word	0x08007d1b
 8007cec:	08007d1b 	.word	0x08007d1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f001 fbda 	bl	80094b0 <RCCEx_PLL2_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d00:	e00c      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3324      	adds	r3, #36	; 0x24
 8007d06:	2101      	movs	r1, #1
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 fc83 	bl	8009614 <RCCEx_PLL3_Config>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d12:	e003      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	75fb      	strb	r3, [r7, #23]
      break;
 8007d18:	e000      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d110      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	f023 0207 	bic.w	r2, r3, #7
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2e:	4902      	ldr	r1, [pc, #8]	; (8007d38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	654b      	str	r3, [r1, #84]	; 0x54
 8007d34:	e008      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007d36:	bf00      	nop
 8007d38:	58024400 	.word	0x58024400
 8007d3c:	58024800 	.word	0x58024800
 8007d40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d039      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	d820      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007da7 	.word	0x08007da7
 8007d68:	08007d7d 	.word	0x08007d7d
 8007d6c:	08007d8f 	.word	0x08007d8f
 8007d70:	08007da7 	.word	0x08007da7
 8007d74:	08007da7 	.word	0x08007da7
 8007d78:	08007da7 	.word	0x08007da7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	2101      	movs	r1, #1
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fb94 	bl	80094b0 <RCCEx_PLL2_Config>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d8c:	e00c      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3324      	adds	r3, #36	; 0x24
 8007d92:	2101      	movs	r1, #1
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 fc3d 	bl	8009614 <RCCEx_PLL3_Config>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007d9e:	e003      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	75fb      	strb	r3, [r7, #23]
      break;
 8007da4:	e000      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007da6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dae:	4bb7      	ldr	r3, [pc, #732]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db2:	f023 0207 	bic.w	r2, r3, #7
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbc:	49b3      	ldr	r1, [pc, #716]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	658b      	str	r3, [r1, #88]	; 0x58
 8007dc2:	e001      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d04b      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dde:	d02e      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007de4:	d828      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dea:	d02a      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df0:	d822      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007df6:	d026      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007dfc:	d81c      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e02:	d010      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e08:	d816      	bhi.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01d      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e12:	d111      	bne.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3304      	adds	r3, #4
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fb48 	bl	80094b0 <RCCEx_PLL2_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e24:	e012      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3324      	adds	r3, #36	; 0x24
 8007e2a:	2102      	movs	r1, #2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 fbf1 	bl	8009614 <RCCEx_PLL3_Config>
 8007e32:	4603      	mov	r3, r0
 8007e34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e36:	e009      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e3c:	e006      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e004      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e42:	bf00      	nop
 8007e44:	e002      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e46:	bf00      	nop
 8007e48:	e000      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e52:	4b8e      	ldr	r3, [pc, #568]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e60:	498a      	ldr	r1, [pc, #552]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	654b      	str	r3, [r1, #84]	; 0x54
 8007e66:	e001      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d04b      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e82:	d02e      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007e84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007e88:	d828      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8e:	d02a      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e94:	d822      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e9a:	d026      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ea0:	d81c      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ea6:	d010      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eac:	d816      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d01d      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb6:	d111      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 faf6 	bl	80094b0 <RCCEx_PLL2_Config>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007ec8:	e012      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3324      	adds	r3, #36	; 0x24
 8007ece:	2102      	movs	r1, #2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 fb9f 	bl	8009614 <RCCEx_PLL3_Config>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007eda:	e009      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee0:	e006      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ee2:	bf00      	nop
 8007ee4:	e004      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e002      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007eea:	bf00      	nop
 8007eec:	e000      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ef6:	4b65      	ldr	r3, [pc, #404]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f04:	4961      	ldr	r1, [pc, #388]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	658b      	str	r3, [r1, #88]	; 0x58
 8007f0a:	e001      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d04b      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f26:	d02e      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007f28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f2c:	d828      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f32:	d02a      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f38:	d822      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f3e:	d026      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007f40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f44:	d81c      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f4a:	d010      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f50:	d816      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01d      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5a:	d111      	bne.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 faa4 	bl	80094b0 <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f6c:	e012      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3324      	adds	r3, #36	; 0x24
 8007f72:	2102      	movs	r1, #2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 fb4d 	bl	8009614 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007f7e:	e009      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]
      break;
 8007f84:	e006      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f86:	bf00      	nop
 8007f88:	e004      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e002      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f8e:	bf00      	nop
 8007f90:	e000      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007f9a:	4b3c      	ldr	r3, [pc, #240]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fa8:	4938      	ldr	r1, [pc, #224]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	658b      	str	r3, [r1, #88]	; 0x58
 8007fae:	e001      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d01a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fca:	d10a      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3324      	adds	r3, #36	; 0x24
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 fb1e 	bl	8009614 <RCCEx_PLL3_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007fe2:	4b2a      	ldr	r3, [pc, #168]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ff0:	4926      	ldr	r1, [pc, #152]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01a      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800c:	d10a      	bne.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3324      	adds	r3, #36	; 0x24
 8008012:	2102      	movs	r1, #2
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fafd 	bl	8009614 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008024:	4b19      	ldr	r3, [pc, #100]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008032:	4916      	ldr	r1, [pc, #88]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008034:	4313      	orrs	r3, r2
 8008036:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d036      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800804a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800804e:	d01f      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008054:	d817      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800805a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800805e:	d009      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008060:	e011      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3304      	adds	r3, #4
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fa21 	bl	80094b0 <RCCEx_PLL2_Config>
 800806e:	4603      	mov	r3, r0
 8008070:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008072:	e00e      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	2102      	movs	r1, #2
 800807a:	4618      	mov	r0, r3
 800807c:	f001 faca 	bl	8009614 <RCCEx_PLL3_Config>
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008084:	e005      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	75fb      	strb	r3, [r7, #23]
      break;
 800808a:	e002      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800808c:	58024400 	.word	0x58024400
      break;
 8008090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008098:	4b93      	ldr	r3, [pc, #588]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800809a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800809c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080a6:	4990      	ldr	r1, [pc, #576]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080a8:	4313      	orrs	r3, r2
 80080aa:	658b      	str	r3, [r1, #88]	; 0x58
 80080ac:	e001      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d033      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080c8:	d01c      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80080ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080ce:	d816      	bhi.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80080d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080d4:	d003      	beq.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80080d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080da:	d007      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80080dc:	e00f      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080de:	4b82      	ldr	r3, [pc, #520]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	4a81      	ldr	r2, [pc, #516]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80080ea:	e00c      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3324      	adds	r3, #36	; 0x24
 80080f0:	2101      	movs	r1, #1
 80080f2:	4618      	mov	r0, r3
 80080f4:	f001 fa8e 	bl	8009614 <RCCEx_PLL3_Config>
 80080f8:	4603      	mov	r3, r0
 80080fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80080fc:	e003      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]
      break;
 8008102:	e000      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800810c:	4b76      	ldr	r3, [pc, #472]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800810e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800811a:	4973      	ldr	r1, [pc, #460]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800811c:	4313      	orrs	r3, r2
 800811e:	654b      	str	r3, [r1, #84]	; 0x54
 8008120:	e001      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d029      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800813a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800813e:	d007      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008140:	e00f      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008142:	4b69      	ldr	r3, [pc, #420]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	4a68      	ldr	r2, [pc, #416]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800814c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800814e:	e00b      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3304      	adds	r3, #4
 8008154:	2102      	movs	r1, #2
 8008156:	4618      	mov	r0, r3
 8008158:	f001 f9aa 	bl	80094b0 <RCCEx_PLL2_Config>
 800815c:	4603      	mov	r3, r0
 800815e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008160:	e002      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
      break;
 8008166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800816e:	4b5e      	ldr	r3, [pc, #376]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008172:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817a:	495b      	ldr	r1, [pc, #364]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800817c:	4313      	orrs	r3, r2
 800817e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008180:	e001      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3324      	adds	r3, #36	; 0x24
 8008196:	2102      	movs	r1, #2
 8008198:	4618      	mov	r0, r3
 800819a:	f001 fa3b 	bl	8009614 <RCCEx_PLL3_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d030      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081bc:	d017      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80081be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081c2:	d811      	bhi.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80081c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c8:	d013      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80081ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ce:	d80b      	bhi.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d010      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80081d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d8:	d106      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081da:	4b43      	ldr	r3, [pc, #268]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	4a42      	ldr	r2, [pc, #264]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80081e6:	e007      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
      break;
 80081ec:	e004      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80081ee:	bf00      	nop
 80081f0:	e002      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80081f2:	bf00      	nop
 80081f4:	e000      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80081f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081fe:	4b3a      	ldr	r3, [pc, #232]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800820a:	4937      	ldr	r1, [pc, #220]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800820c:	4313      	orrs	r3, r2
 800820e:	654b      	str	r3, [r1, #84]	; 0x54
 8008210:	e001      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d008      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008222:	4b31      	ldr	r3, [pc, #196]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008226:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	492e      	ldr	r1, [pc, #184]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008230:	4313      	orrs	r3, r2
 8008232:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008240:	4b29      	ldr	r3, [pc, #164]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800824e:	4926      	ldr	r1, [pc, #152]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008250:	4313      	orrs	r3, r2
 8008252:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d008      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008260:	4b21      	ldr	r3, [pc, #132]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800826c:	491e      	ldr	r1, [pc, #120]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800826e:	4313      	orrs	r3, r2
 8008270:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00d      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800827e:	4b1a      	ldr	r3, [pc, #104]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	4a19      	ldr	r2, [pc, #100]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008288:	6113      	str	r3, [r2, #16]
 800828a:	4b17      	ldr	r3, [pc, #92]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008294:	4914      	ldr	r1, [pc, #80]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008296:	4313      	orrs	r3, r2
 8008298:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da08      	bge.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082a2:	4b11      	ldr	r3, [pc, #68]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	490e      	ldr	r1, [pc, #56]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d009      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ce:	4906      	ldr	r1, [pc, #24]	; (80082e8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80082d4:	7dbb      	ldrb	r3, [r7, #22]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	e000      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	58024400 	.word	0x58024400

080082ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b090      	sub	sp, #64	; 0x40
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fa:	f040 8095 	bne.w	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80082fe:	4bae      	ldr	r3, [pc, #696]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	633b      	str	r3, [r7, #48]	; 0x30
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	2b04      	cmp	r3, #4
 800830c:	f200 8088 	bhi.w	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008310:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	0800832d 	.word	0x0800832d
 800831c:	08008355 	.word	0x08008355
 8008320:	0800837d 	.word	0x0800837d
 8008324:	08008419 	.word	0x08008419
 8008328:	080083a5 	.word	0x080083a5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800832c:	4ba2      	ldr	r3, [pc, #648]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008338:	d108      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800833a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800833e:	4618      	mov	r0, r3
 8008340:	f000 ff64 	bl	800920c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008348:	f000 bc95 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008350:	f000 bc91 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008354:	4b98      	ldr	r3, [pc, #608]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800835c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008360:	d108      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008362:	f107 0318 	add.w	r3, r7, #24
 8008366:	4618      	mov	r0, r3
 8008368:	f000 fca8 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008370:	f000 bc81 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008378:	f000 bc7d 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800837c:	4b8e      	ldr	r3, [pc, #568]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008388:	d108      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800838a:	f107 030c 	add.w	r3, r7, #12
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fde8 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008398:	f000 bc6d 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a0:	f000 bc69 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083a4:	4b84      	ldr	r3, [pc, #528]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083ae:	4b82      	ldr	r3, [pc, #520]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d10c      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083c0:	4b7d      	ldr	r3, [pc, #500]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	08db      	lsrs	r3, r3, #3
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	4a7c      	ldr	r2, [pc, #496]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80083cc:	fa22 f303 	lsr.w	r3, r2, r3
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083d2:	e01f      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083d4:	4b78      	ldr	r3, [pc, #480]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e0:	d106      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e8:	d102      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80083ea:	4b75      	ldr	r3, [pc, #468]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80083ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ee:	e011      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083f0:	4b71      	ldr	r3, [pc, #452]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083fc:	d106      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008404:	d102      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008406:	4b6f      	ldr	r3, [pc, #444]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800840a:	e003      	b.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008410:	f000 bc31 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008414:	f000 bc2f 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008418:	4b6b      	ldr	r3, [pc, #428]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800841c:	f000 bc2b 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008420:	2300      	movs	r3, #0
 8008422:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008424:	f000 bc27 	b.w	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800842e:	f040 8095 	bne.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8008432:	4b61      	ldr	r3, [pc, #388]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008436:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800843a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008442:	d04d      	beq.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800844a:	f200 8084 	bhi.w	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	2bc0      	cmp	r3, #192	; 0xc0
 8008452:	d07d      	beq.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	2bc0      	cmp	r3, #192	; 0xc0
 8008458:	d87d      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	2b80      	cmp	r3, #128	; 0x80
 800845e:	d02d      	beq.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008462:	2b80      	cmp	r3, #128	; 0x80
 8008464:	d877      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d012      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008472:	e070      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008474:	4b50      	ldr	r3, [pc, #320]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800847c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008480:	d107      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fec0 	bl	800920c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008490:	e3f1      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008492:	2300      	movs	r3, #0
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008496:	e3ee      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008498:	4b47      	ldr	r3, [pc, #284]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084a4:	d107      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a6:	f107 0318 	add.w	r3, r7, #24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fc06 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084b4:	e3df      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ba:	e3dc      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084bc:	4b3e      	ldr	r3, [pc, #248]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084c8:	d107      	bne.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ca:	f107 030c 	add.w	r3, r7, #12
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fd48 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084d8:	e3cd      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084de:	e3ca      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80084e0:	4b35      	ldr	r3, [pc, #212]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084ea:	4b33      	ldr	r3, [pc, #204]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d10c      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d109      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084fc:	4b2e      	ldr	r3, [pc, #184]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	08db      	lsrs	r3, r3, #3
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008508:	fa22 f303 	lsr.w	r3, r2, r3
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800850e:	e01e      	b.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008510:	4b29      	ldr	r3, [pc, #164]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851c:	d106      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800851e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008524:	d102      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008526:	4b26      	ldr	r3, [pc, #152]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852a:	e010      	b.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800852c:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008538:	d106      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008540:	d102      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008542:	4b20      	ldr	r3, [pc, #128]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008546:	e002      	b.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800854c:	e393      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800854e:	e392      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008550:	4b1d      	ldr	r3, [pc, #116]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008554:	e38f      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800855a:	e38c      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008562:	f040 80a7 	bne.w	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800856e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008576:	d05f      	beq.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800857e:	f200 8096 	bhi.w	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008588:	f000 808e 	beq.w	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008592:	f200 808c 	bhi.w	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800859c:	d03a      	beq.n	8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a4:	f200 8083 	bhi.w	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00e      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80085ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085b4:	d01c      	beq.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80085b6:	e07a      	b.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085b8:	58024400 	.word	0x58024400
 80085bc:	03d09000 	.word	0x03d09000
 80085c0:	003d0900 	.word	0x003d0900
 80085c4:	00f42400 	.word	0x00f42400
 80085c8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085cc:	4baa      	ldr	r3, [pc, #680]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085d8:	d107      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fe14 	bl	800920c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80085e8:	e345      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ee:	e342      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085f0:	4ba1      	ldr	r3, [pc, #644]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085fc:	d107      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085fe:	f107 0318 	add.w	r3, r7, #24
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fb5a 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800860c:	e333      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008612:	e330      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008614:	4b98      	ldr	r3, [pc, #608]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800861c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008620:	d107      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008622:	f107 030c 	add.w	r3, r7, #12
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fc9c 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008630:	e321      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008636:	e31e      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008638:	4b8f      	ldr	r3, [pc, #572]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800863a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008640:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008642:	4b8d      	ldr	r3, [pc, #564]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b04      	cmp	r3, #4
 800864c:	d10c      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008650:	2b00      	cmp	r3, #0
 8008652:	d109      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008654:	4b88      	ldr	r3, [pc, #544]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	08db      	lsrs	r3, r3, #3
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	4a87      	ldr	r2, [pc, #540]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008660:	fa22 f303 	lsr.w	r3, r2, r3
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008666:	e01e      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008668:	4b83      	ldr	r3, [pc, #524]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008674:	d106      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800867c:	d102      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800867e:	4b80      	ldr	r3, [pc, #512]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008682:	e010      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008684:	4b7c      	ldr	r3, [pc, #496]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008690:	d106      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008698:	d102      	bne.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800869a:	4b7a      	ldr	r3, [pc, #488]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800869e:	e002      	b.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80086a4:	e2e7      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086a6:	e2e6      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80086a8:	4b77      	ldr	r3, [pc, #476]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086ac:	e2e3      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086b2:	e2e0      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ba:	f040 809c 	bne.w	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80086be:	4b6e      	ldr	r3, [pc, #440]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80086c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086ce:	d054      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086d6:	f200 808b 	bhi.w	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086e0:	f000 8083 	beq.w	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086ea:	f200 8081 	bhi.w	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086f4:	d02f      	beq.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086fc:	d878      	bhi.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800870a:	d012      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800870c:	e070      	b.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800870e:	4b5a      	ldr	r3, [pc, #360]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800871a:	d107      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800871c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fd73 	bl	800920c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800872a:	e2a4      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008730:	e2a1      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008732:	4b51      	ldr	r3, [pc, #324]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800873a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800873e:	d107      	bne.n	8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008740:	f107 0318 	add.w	r3, r7, #24
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fab9 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800874e:	e292      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008754:	e28f      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008756:	4b48      	ldr	r3, [pc, #288]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800875e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008762:	d107      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fbfb 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008772:	e280      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008778:	e27d      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800877a:	4b3f      	ldr	r3, [pc, #252]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800877c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008782:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008784:	4b3c      	ldr	r3, [pc, #240]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b04      	cmp	r3, #4
 800878e:	d10c      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008792:	2b00      	cmp	r3, #0
 8008794:	d109      	bne.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008796:	4b38      	ldr	r3, [pc, #224]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	08db      	lsrs	r3, r3, #3
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	4a36      	ldr	r2, [pc, #216]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80087a2:	fa22 f303 	lsr.w	r3, r2, r3
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087a8:	e01e      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087aa:	4b33      	ldr	r3, [pc, #204]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b6:	d106      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80087b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087be:	d102      	bne.n	80087c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80087c0:	4b2f      	ldr	r3, [pc, #188]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087c4:	e010      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087c6:	4b2c      	ldr	r3, [pc, #176]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087d2:	d106      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80087d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087da:	d102      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80087dc:	4b29      	ldr	r3, [pc, #164]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087e0:	e002      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80087e6:	e246      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80087e8:	e245      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087ea:	4b27      	ldr	r3, [pc, #156]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087ee:	e242      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087f4:	e23f      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087fc:	f040 80a8 	bne.w	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008800:	4b1d      	ldr	r3, [pc, #116]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008804:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008808:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008810:	d060      	beq.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008818:	f200 8097 	bhi.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008822:	f000 808f 	beq.w	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800882c:	f200 808d 	bhi.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008836:	d03b      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883e:	f200 8084 	bhi.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884e:	d01d      	beq.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8008850:	e07b      	b.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008852:	4b09      	ldr	r3, [pc, #36]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800885a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800885e:	d107      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fcd1 	bl	800920c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800886e:	e202      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008874:	e1ff      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
 800887c:	03d09000 	.word	0x03d09000
 8008880:	003d0900 	.word	0x003d0900
 8008884:	00f42400 	.word	0x00f42400
 8008888:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800888c:	4ba3      	ldr	r3, [pc, #652]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008898:	d107      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800889a:	f107 0318 	add.w	r3, r7, #24
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fa0c 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088a8:	e1e5      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088ae:	e1e2      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088b0:	4b9a      	ldr	r3, [pc, #616]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088bc:	d107      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088be:	f107 030c 	add.w	r3, r7, #12
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fb4e 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088cc:	e1d3      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088d2:	e1d0      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088d4:	4b91      	ldr	r3, [pc, #580]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088de:	4b8f      	ldr	r3, [pc, #572]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	d10c      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80088ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d109      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80088f0:	4b8a      	ldr	r3, [pc, #552]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	08db      	lsrs	r3, r3, #3
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	4a89      	ldr	r2, [pc, #548]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80088fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008902:	e01e      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008904:	4b85      	ldr	r3, [pc, #532]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800890c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008910:	d106      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008918:	d102      	bne.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800891a:	4b82      	ldr	r3, [pc, #520]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800891c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891e:	e010      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008920:	4b7e      	ldr	r3, [pc, #504]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800892c:	d106      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008934:	d102      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008936:	4b7c      	ldr	r3, [pc, #496]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800893a:	e002      	b.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008940:	e199      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008942:	e198      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008944:	4b79      	ldr	r3, [pc, #484]	; (8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008948:	e195      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800894e:	e192      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008956:	d173      	bne.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008958:	4b70      	ldr	r3, [pc, #448]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008960:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008968:	d02f      	beq.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008970:	d863      	bhi.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8008978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800897e:	d012      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8008980:	e05b      	b.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008982:	4b66      	ldr	r3, [pc, #408]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800898a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800898e:	d107      	bne.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008990:	f107 0318 	add.w	r3, r7, #24
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f991 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800899e:	e16a      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089a4:	e167      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089a6:	4b5d      	ldr	r3, [pc, #372]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b2:	d107      	bne.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b4:	f107 030c 	add.w	r3, r7, #12
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 fad3 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089c2:	e158      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c8:	e155      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089ca:	4b54      	ldr	r3, [pc, #336]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089d4:	4b51      	ldr	r3, [pc, #324]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d10c      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089e6:	4b4d      	ldr	r3, [pc, #308]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	f003 0303 	and.w	r3, r3, #3
 80089f0:	4a4b      	ldr	r2, [pc, #300]	; (8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80089f2:	fa22 f303 	lsr.w	r3, r2, r3
 80089f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f8:	e01e      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089fa:	4b48      	ldr	r3, [pc, #288]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a06:	d106      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a0e:	d102      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a10:	4b44      	ldr	r3, [pc, #272]	; (8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a14:	e010      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a16:	4b41      	ldr	r3, [pc, #260]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a22:	d106      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a2a:	d102      	bne.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a2c:	4b3e      	ldr	r3, [pc, #248]	; (8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a30:	e002      	b.n	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a36:	e11e      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a38:	e11d      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a3e:	e11a      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a46:	d133      	bne.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008a48:	4b34      	ldr	r3, [pc, #208]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a50:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5e:	d012      	beq.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008a60:	e023      	b.n	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a62:	4b2e      	ldr	r3, [pc, #184]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a6e:	d107      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fbc9 	bl	800920c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008a7e:	e0fa      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a84:	e0f7      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a86:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a92:	d107      	bne.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a94:	f107 0318 	add.w	r3, r7, #24
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 f90f 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008aa2:	e0e8      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa8:	e0e5      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aae:	e0e2      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ab6:	f040 808f 	bne.w	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008aba:	4b18      	ldr	r3, [pc, #96]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008ac2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aca:	d075      	beq.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ad2:	d87e      	bhi.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ada:	d060      	beq.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d876      	bhi.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008aea:	d045      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008af2:	d86e      	bhi.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008afa:	d02b      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b02:	d866      	bhi.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d004      	beq.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b10:	d00e      	beq.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008b12:	e05e      	b.n	8008bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b14:	f000 f8bc 	bl	8008c90 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b18:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008b1a:	e0ac      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b1c:	58024400 	.word	0x58024400
 8008b20:	03d09000 	.word	0x03d09000
 8008b24:	003d0900 	.word	0x003d0900
 8008b28:	00f42400 	.word	0x00f42400
 8008b2c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b30:	4b53      	ldr	r3, [pc, #332]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b3c:	d107      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b3e:	f107 0318 	add.w	r3, r7, #24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f8ba 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b4c:	e093      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b52:	e090      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b54:	4b4a      	ldr	r3, [pc, #296]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b60:	d107      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b62:	f107 030c 	add.w	r3, r7, #12
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f9fc 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b70:	e081      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b76:	e07e      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b78:	4b41      	ldr	r3, [pc, #260]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d109      	bne.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b84:	4b3e      	ldr	r3, [pc, #248]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	08db      	lsrs	r3, r3, #3
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	4a3d      	ldr	r2, [pc, #244]	; (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008b90:	fa22 f303 	lsr.w	r3, r2, r3
 8008b94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008b96:	e06e      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b9c:	e06b      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008b9e:	4b38      	ldr	r3, [pc, #224]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008baa:	d102      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bb0:	e061      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bb6:	e05e      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bb8:	4b31      	ldr	r3, [pc, #196]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc4:	d102      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8008bc6:	4b31      	ldr	r3, [pc, #196]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bca:	e054      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd0:	e051      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd6:	e04e      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bde:	d148      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008be0:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008be8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bf0:	d02a      	beq.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bf8:	d838      	bhi.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c06:	d00d      	beq.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008c08:	e030      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c0a:	4b1d      	ldr	r3, [pc, #116]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c16:	d102      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008c18:	4b1c      	ldr	r3, [pc, #112]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c1c:	e02b      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c22:	e028      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c24:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c30:	d107      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fae8 	bl	800920c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c40:	e019      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c46:	e016      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c48:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c54:	d107      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c56:	f107 0318 	add.w	r3, r7, #24
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f82e 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c64:	e007      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6a:	e004      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c70:	e001      	b.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3740      	adds	r7, #64	; 0x40
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	58024400 	.word	0x58024400
 8008c84:	03d09000 	.word	0x03d09000
 8008c88:	003d0900 	.word	0x003d0900
 8008c8c:	00f42400 	.word	0x00f42400

08008c90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c94:	f7fe fb8e 	bl	80073b4 <HAL_RCC_GetHCLKFreq>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	091b      	lsrs	r3, r3, #4
 8008ca0:	f003 0307 	and.w	r3, r3, #7
 8008ca4:	4904      	ldr	r1, [pc, #16]	; (8008cb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ca6:	5ccb      	ldrb	r3, [r1, r3]
 8008ca8:	f003 031f 	and.w	r3, r3, #31
 8008cac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	0800f820 	.word	0x0800f820

08008cbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b089      	sub	sp, #36	; 0x24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cc4:	4ba1      	ldr	r3, [pc, #644]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008cce:	4b9f      	ldr	r3, [pc, #636]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd2:	0b1b      	lsrs	r3, r3, #12
 8008cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008cda:	4b9c      	ldr	r3, [pc, #624]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	091b      	lsrs	r3, r3, #4
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008ce6:	4b99      	ldr	r3, [pc, #612]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cea:	08db      	lsrs	r3, r3, #3
 8008cec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	fb02 f303 	mul.w	r3, r2, r3
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8111 	beq.w	8008f2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	f000 8083 	beq.w	8008e18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	f200 80a1 	bhi.w	8008e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d056      	beq.n	8008dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d26:	e099      	b.n	8008e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d28:	4b88      	ldr	r3, [pc, #544]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d02d      	beq.n	8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d34:	4b85      	ldr	r3, [pc, #532]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	08db      	lsrs	r3, r3, #3
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	4a84      	ldr	r2, [pc, #528]	; (8008f50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d40:	fa22 f303 	lsr.w	r3, r2, r3
 8008d44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	ee07 3a90 	vmov	s15, r3
 8008d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5e:	4b7b      	ldr	r3, [pc, #492]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d66:	ee07 3a90 	vmov	s15, r3
 8008d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d8e:	e087      	b.n	8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	ee07 3a90 	vmov	s15, r3
 8008d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008da2:	4b6a      	ldr	r3, [pc, #424]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dd2:	e065      	b.n	8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de6:	4b59      	ldr	r3, [pc, #356]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dee:	ee07 3a90 	vmov	s15, r3
 8008df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e16:	e043      	b.n	8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e2a:	4b48      	ldr	r3, [pc, #288]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e32:	ee07 3a90 	vmov	s15, r3
 8008e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e5a:	e021      	b.n	8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6e:	4b37      	ldr	r3, [pc, #220]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e76:	ee07 3a90 	vmov	s15, r3
 8008e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ea0:	4b2a      	ldr	r3, [pc, #168]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	0a5b      	lsrs	r3, r3, #9
 8008ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec6:	ee17 2a90 	vmov	r2, s15
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008ece:	4b1f      	ldr	r3, [pc, #124]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed2:	0c1b      	lsrs	r3, r3, #16
 8008ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed8:	ee07 3a90 	vmov	s15, r3
 8008edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ee4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ef4:	ee17 2a90 	vmov	r2, s15
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008efc:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	0e1b      	lsrs	r3, r3, #24
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	ee07 3a90 	vmov	s15, r3
 8008f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f22:	ee17 2a90 	vmov	r2, s15
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f2a:	e008      	b.n	8008f3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	609a      	str	r2, [r3, #8]
}
 8008f3e:	bf00      	nop
 8008f40:	3724      	adds	r7, #36	; 0x24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	03d09000 	.word	0x03d09000
 8008f54:	46000000 	.word	0x46000000
 8008f58:	4c742400 	.word	0x4c742400
 8008f5c:	4a742400 	.word	0x4a742400
 8008f60:	4b742400 	.word	0x4b742400

08008f64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b089      	sub	sp, #36	; 0x24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f6c:	4ba1      	ldr	r3, [pc, #644]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f70:	f003 0303 	and.w	r3, r3, #3
 8008f74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f76:	4b9f      	ldr	r3, [pc, #636]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	0d1b      	lsrs	r3, r3, #20
 8008f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f82:	4b9c      	ldr	r3, [pc, #624]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	0a1b      	lsrs	r3, r3, #8
 8008f88:	f003 0301 	and.w	r3, r3, #1
 8008f8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f8e:	4b99      	ldr	r3, [pc, #612]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f92:	08db      	lsrs	r3, r3, #3
 8008f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	fb02 f303 	mul.w	r3, r2, r3
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 8111 	beq.w	80091d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	f000 8083 	beq.w	80090c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	f200 80a1 	bhi.w	8009104 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d056      	beq.n	800907c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008fce:	e099      	b.n	8009104 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fd0:	4b88      	ldr	r3, [pc, #544]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d02d      	beq.n	8009038 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fdc:	4b85      	ldr	r3, [pc, #532]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	08db      	lsrs	r3, r3, #3
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	4a84      	ldr	r2, [pc, #528]	; (80091f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	ee07 3a90 	vmov	s15, r3
 8008ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	ee07 3a90 	vmov	s15, r3
 8008ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009006:	4b7b      	ldr	r3, [pc, #492]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900e:	ee07 3a90 	vmov	s15, r3
 8009012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009016:	ed97 6a03 	vldr	s12, [r7, #12]
 800901a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800901e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800902a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009036:	e087      	b.n	8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009042:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904a:	4b6a      	ldr	r3, [pc, #424]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905a:	ed97 6a03 	vldr	s12, [r7, #12]
 800905e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800906e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009076:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800907a:	e065      	b.n	8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009086:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800908a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800908e:	4b59      	ldr	r3, [pc, #356]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009096:	ee07 3a90 	vmov	s15, r3
 800909a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909e:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090be:	e043      	b.n	8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d2:	4b48      	ldr	r3, [pc, #288]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009102:	e021      	b.n	8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	ee07 3a90 	vmov	s15, r3
 800910a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800910e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009116:	4b37      	ldr	r3, [pc, #220]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800911e:	ee07 3a90 	vmov	s15, r3
 8009122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009126:	ed97 6a03 	vldr	s12, [r7, #12]
 800912a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800912e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800913a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800913e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009146:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009148:	4b2a      	ldr	r3, [pc, #168]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	0a5b      	lsrs	r3, r3, #9
 800914e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800915e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009162:	edd7 6a07 	vldr	s13, [r7, #28]
 8009166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800916a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800916e:	ee17 2a90 	vmov	r2, s15
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009176:	4b1f      	ldr	r3, [pc, #124]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	0c1b      	lsrs	r3, r3, #16
 800917c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009180:	ee07 3a90 	vmov	s15, r3
 8009184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800918c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009190:	edd7 6a07 	vldr	s13, [r7, #28]
 8009194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800919c:	ee17 2a90 	vmov	r2, s15
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80091a4:	4b13      	ldr	r3, [pc, #76]	; (80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a8:	0e1b      	lsrs	r3, r3, #24
 80091aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091be:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ca:	ee17 2a90 	vmov	r2, s15
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091d2:	e008      	b.n	80091e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	609a      	str	r2, [r3, #8]
}
 80091e6:	bf00      	nop
 80091e8:	3724      	adds	r7, #36	; 0x24
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	58024400 	.word	0x58024400
 80091f8:	03d09000 	.word	0x03d09000
 80091fc:	46000000 	.word	0x46000000
 8009200:	4c742400 	.word	0x4c742400
 8009204:	4a742400 	.word	0x4a742400
 8009208:	4b742400 	.word	0x4b742400

0800920c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800920c:	b480      	push	{r7}
 800920e:	b089      	sub	sp, #36	; 0x24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009214:	4ba0      	ldr	r3, [pc, #640]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009218:	f003 0303 	and.w	r3, r3, #3
 800921c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800921e:	4b9e      	ldr	r3, [pc, #632]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009222:	091b      	lsrs	r3, r3, #4
 8009224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009228:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800922a:	4b9b      	ldr	r3, [pc, #620]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800922c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009234:	4b98      	ldr	r3, [pc, #608]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	08db      	lsrs	r3, r3, #3
 800923a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	fb02 f303 	mul.w	r3, r2, r3
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8111 	beq.w	800947a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	2b02      	cmp	r3, #2
 800925c:	f000 8083 	beq.w	8009366 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	2b02      	cmp	r3, #2
 8009264:	f200 80a1 	bhi.w	80093aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d056      	beq.n	8009322 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009274:	e099      	b.n	80093aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009276:	4b88      	ldr	r3, [pc, #544]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d02d      	beq.n	80092de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009282:	4b85      	ldr	r3, [pc, #532]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	08db      	lsrs	r3, r3, #3
 8009288:	f003 0303 	and.w	r3, r3, #3
 800928c:	4a83      	ldr	r2, [pc, #524]	; (800949c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800928e:	fa22 f303 	lsr.w	r3, r2, r3
 8009292:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	ee07 3a90 	vmov	s15, r3
 80092a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ac:	4b7a      	ldr	r3, [pc, #488]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092b4:	ee07 3a90 	vmov	s15, r3
 80092b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80092c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80092c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80092dc:	e087      	b.n	80093ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80092ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f0:	4b69      	ldr	r3, [pc, #420]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009300:	ed97 6a03 	vldr	s12, [r7, #12]
 8009304:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800930c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009320:	e065      	b.n	80093ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	ee07 3a90 	vmov	s15, r3
 8009328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80094a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009334:	4b58      	ldr	r3, [pc, #352]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933c:	ee07 3a90 	vmov	s15, r3
 8009340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009344:	ed97 6a03 	vldr	s12, [r7, #12]
 8009348:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800934c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009360:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009364:	e043      	b.n	80093ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	ee07 3a90 	vmov	s15, r3
 800936c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009370:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80094ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009378:	4b47      	ldr	r3, [pc, #284]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800937a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009380:	ee07 3a90 	vmov	s15, r3
 8009384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009388:	ed97 6a03 	vldr	s12, [r7, #12]
 800938c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800939c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093a8:	e021      	b.n	80093ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	ee07 3a90 	vmov	s15, r3
 80093b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80094a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093bc:	4b36      	ldr	r3, [pc, #216]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c4:	ee07 3a90 	vmov	s15, r3
 80093c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80093ee:	4b2a      	ldr	r3, [pc, #168]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f2:	0a5b      	lsrs	r3, r3, #9
 80093f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009408:	edd7 6a07 	vldr	s13, [r7, #28]
 800940c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009414:	ee17 2a90 	vmov	r2, s15
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800941c:	4b1e      	ldr	r3, [pc, #120]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800941e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009420:	0c1b      	lsrs	r3, r3, #16
 8009422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009436:	edd7 6a07 	vldr	s13, [r7, #28]
 800943a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800943e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009442:	ee17 2a90 	vmov	r2, s15
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800944a:	4b13      	ldr	r3, [pc, #76]	; (8009498 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800944c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944e:	0e1b      	lsrs	r3, r3, #24
 8009450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009460:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009464:	edd7 6a07 	vldr	s13, [r7, #28]
 8009468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800946c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009470:	ee17 2a90 	vmov	r2, s15
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009478:	e008      	b.n	800948c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	609a      	str	r2, [r3, #8]
}
 800948c:	bf00      	nop
 800948e:	3724      	adds	r7, #36	; 0x24
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	58024400 	.word	0x58024400
 800949c:	03d09000 	.word	0x03d09000
 80094a0:	46000000 	.word	0x46000000
 80094a4:	4c742400 	.word	0x4c742400
 80094a8:	4a742400 	.word	0x4a742400
 80094ac:	4b742400 	.word	0x4b742400

080094b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094be:	4b53      	ldr	r3, [pc, #332]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80094c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	2b03      	cmp	r3, #3
 80094c8:	d101      	bne.n	80094ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e099      	b.n	8009602 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80094ce:	4b4f      	ldr	r3, [pc, #316]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a4e      	ldr	r2, [pc, #312]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80094d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094da:	f7f8 fab5 	bl	8001a48 <HAL_GetTick>
 80094de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094e0:	e008      	b.n	80094f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80094e2:	f7f8 fab1 	bl	8001a48 <HAL_GetTick>
 80094e6:	4602      	mov	r2, r0
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d901      	bls.n	80094f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e086      	b.n	8009602 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80094f4:	4b45      	ldr	r3, [pc, #276]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f0      	bne.n	80094e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009500:	4b42      	ldr	r3, [pc, #264]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009504:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	031b      	lsls	r3, r3, #12
 800950e:	493f      	ldr	r1, [pc, #252]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009510:	4313      	orrs	r3, r2
 8009512:	628b      	str	r3, [r1, #40]	; 0x28
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	3b01      	subs	r3, #1
 800951a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	3b01      	subs	r3, #1
 8009524:	025b      	lsls	r3, r3, #9
 8009526:	b29b      	uxth	r3, r3
 8009528:	431a      	orrs	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	3b01      	subs	r3, #1
 8009530:	041b      	lsls	r3, r3, #16
 8009532:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	3b01      	subs	r3, #1
 800953e:	061b      	lsls	r3, r3, #24
 8009540:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009544:	4931      	ldr	r1, [pc, #196]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009546:	4313      	orrs	r3, r2
 8009548:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800954a:	4b30      	ldr	r3, [pc, #192]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 800954c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	492d      	ldr	r1, [pc, #180]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009558:	4313      	orrs	r3, r2
 800955a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800955c:	4b2b      	ldr	r3, [pc, #172]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	f023 0220 	bic.w	r2, r3, #32
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	4928      	ldr	r1, [pc, #160]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 800956a:	4313      	orrs	r3, r2
 800956c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800956e:	4b27      	ldr	r3, [pc, #156]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009572:	4a26      	ldr	r2, [pc, #152]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009574:	f023 0310 	bic.w	r3, r3, #16
 8009578:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800957a:	4b24      	ldr	r3, [pc, #144]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 800957c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800957e:	4b24      	ldr	r3, [pc, #144]	; (8009610 <RCCEx_PLL2_Config+0x160>)
 8009580:	4013      	ands	r3, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	69d2      	ldr	r2, [r2, #28]
 8009586:	00d2      	lsls	r2, r2, #3
 8009588:	4920      	ldr	r1, [pc, #128]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 800958a:	4313      	orrs	r3, r2
 800958c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800958e:	4b1f      	ldr	r3, [pc, #124]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	4a1e      	ldr	r2, [pc, #120]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 8009594:	f043 0310 	orr.w	r3, r3, #16
 8009598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095a0:	4b1a      	ldr	r3, [pc, #104]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	4a19      	ldr	r2, [pc, #100]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095ac:	e00f      	b.n	80095ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d106      	bne.n	80095c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80095b4:	4b15      	ldr	r3, [pc, #84]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	4a14      	ldr	r2, [pc, #80]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095c0:	e005      	b.n	80095ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80095c2:	4b12      	ldr	r3, [pc, #72]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	4a11      	ldr	r2, [pc, #68]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80095ce:	4b0f      	ldr	r3, [pc, #60]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a0e      	ldr	r2, [pc, #56]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095da:	f7f8 fa35 	bl	8001a48 <HAL_GetTick>
 80095de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095e0:	e008      	b.n	80095f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80095e2:	f7f8 fa31 	bl	8001a48 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d901      	bls.n	80095f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e006      	b.n	8009602 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80095f4:	4b05      	ldr	r3, [pc, #20]	; (800960c <RCCEx_PLL2_Config+0x15c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0f0      	beq.n	80095e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	58024400 	.word	0x58024400
 8009610:	ffff0007 	.word	0xffff0007

08009614 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009622:	4b53      	ldr	r3, [pc, #332]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	2b03      	cmp	r3, #3
 800962c:	d101      	bne.n	8009632 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	e099      	b.n	8009766 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009632:	4b4f      	ldr	r3, [pc, #316]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a4e      	ldr	r2, [pc, #312]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800963c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800963e:	f7f8 fa03 	bl	8001a48 <HAL_GetTick>
 8009642:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009644:	e008      	b.n	8009658 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009646:	f7f8 f9ff 	bl	8001a48 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b02      	cmp	r3, #2
 8009652:	d901      	bls.n	8009658 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009654:	2303      	movs	r3, #3
 8009656:	e086      	b.n	8009766 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009658:	4b45      	ldr	r3, [pc, #276]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d1f0      	bne.n	8009646 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009664:	4b42      	ldr	r3, [pc, #264]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	051b      	lsls	r3, r3, #20
 8009672:	493f      	ldr	r1, [pc, #252]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009674:	4313      	orrs	r3, r2
 8009676:	628b      	str	r3, [r1, #40]	; 0x28
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	3b01      	subs	r3, #1
 800967e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	3b01      	subs	r3, #1
 8009688:	025b      	lsls	r3, r3, #9
 800968a:	b29b      	uxth	r3, r3
 800968c:	431a      	orrs	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	3b01      	subs	r3, #1
 8009694:	041b      	lsls	r3, r3, #16
 8009696:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800969a:	431a      	orrs	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	061b      	lsls	r3, r3, #24
 80096a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096a8:	4931      	ldr	r1, [pc, #196]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096ae:	4b30      	ldr	r3, [pc, #192]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	492d      	ldr	r1, [pc, #180]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80096c0:	4b2b      	ldr	r3, [pc, #172]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	4928      	ldr	r1, [pc, #160]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80096d2:	4b27      	ldr	r3, [pc, #156]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d6:	4a26      	ldr	r2, [pc, #152]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80096de:	4b24      	ldr	r3, [pc, #144]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096e2:	4b24      	ldr	r3, [pc, #144]	; (8009774 <RCCEx_PLL3_Config+0x160>)
 80096e4:	4013      	ands	r3, r2
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	69d2      	ldr	r2, [r2, #28]
 80096ea:	00d2      	lsls	r2, r2, #3
 80096ec:	4920      	ldr	r1, [pc, #128]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80096f2:	4b1f      	ldr	r3, [pc, #124]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 80096f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d106      	bne.n	8009712 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009704:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	4a19      	ldr	r2, [pc, #100]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 800970a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800970e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009710:	e00f      	b.n	8009732 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d106      	bne.n	8009726 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009718:	4b15      	ldr	r3, [pc, #84]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	4a14      	ldr	r2, [pc, #80]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 800971e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009724:	e005      	b.n	8009732 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009726:	4b12      	ldr	r3, [pc, #72]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972a:	4a11      	ldr	r2, [pc, #68]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 800972c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009730:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009732:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a0e      	ldr	r2, [pc, #56]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 8009738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800973c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800973e:	f7f8 f983 	bl	8001a48 <HAL_GetTick>
 8009742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009744:	e008      	b.n	8009758 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009746:	f7f8 f97f 	bl	8001a48 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d901      	bls.n	8009758 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e006      	b.n	8009766 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <RCCEx_PLL3_Config+0x15c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0f0      	beq.n	8009746 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	58024400 	.word	0x58024400
 8009774:	ffff0007 	.word	0xffff0007

08009778 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08a      	sub	sp, #40	; 0x28
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e075      	b.n	8009876 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f7f7 fb81 	bl	8000ea4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2203      	movs	r2, #3
 80097a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f868 	bl	8009880 <HAL_SD_InitCard>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e05d      	b.n	8009876 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fda5 	bl	800a310 <HAL_SD_GetCardStatus>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e052      	b.n	8009876 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80097d0:	7e3b      	ldrb	r3, [r7, #24]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80097d6:	7e7b      	ldrb	r3, [r7, #25]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d10a      	bne.n	80097fa <HAL_SD_Init+0x82>
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <HAL_SD_Init+0x78>
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097f6:	659a      	str	r2, [r3, #88]	; 0x58
 80097f8:	e00b      	b.n	8009812 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d104      	bne.n	800980c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009808:	659a      	str	r2, [r3, #88]	; 0x58
 800980a:	e002      	b.n	8009812 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fe5b 	bl	800a4d4 <HAL_SD_ConfigWideBusOperation>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e026      	b.n	8009876 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009828:	f7f8 f90e 	bl	8001a48 <HAL_GetTick>
 800982c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800982e:	e011      	b.n	8009854 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009830:	f7f8 f90a 	bl	8001a48 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d109      	bne.n	8009854 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009846:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e010      	b.n	8009876 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fff3 	bl	800a840 <HAL_SD_GetCardState>
 800985a:	4603      	mov	r3, r0
 800985c:	2b04      	cmp	r3, #4
 800985e:	d1e7      	bne.n	8009830 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3728      	adds	r7, #40	; 0x28
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b08d      	sub	sp, #52	; 0x34
 8009884:	af02      	add	r7, sp, #8
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009888:	2300      	movs	r3, #0
 800988a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800988c:	2300      	movs	r3, #0
 800988e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009890:	2300      	movs	r3, #0
 8009892:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009894:	2300      	movs	r3, #0
 8009896:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009898:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800989c:	f7fe fd26 	bl	80082ec <HAL_RCCEx_GetPeriphCLKFreq>
 80098a0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80098b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e06a      	b.n	8009992 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	4a36      	ldr	r2, [pc, #216]	; (800999c <HAL_SD_InitCard+0x11c>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	091b      	lsrs	r3, r3, #4
 80098c8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681c      	ldr	r4, [r3, #0]
 80098ce:	466a      	mov	r2, sp
 80098d0:	f107 0318 	add.w	r3, r7, #24
 80098d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80098d8:	e882 0003 	stmia.w	r2, {r0, r1}
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098e2:	4620      	mov	r0, r4
 80098e4:	f004 f9ae 	bl	800dc44 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f004 f9f1 	bl	800dcd4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	005b      	lsls	r3, r3, #1
 80098f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80098fe:	4a28      	ldr	r2, [pc, #160]	; (80099a0 <HAL_SD_InitCard+0x120>)
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	fbb2 f3f3 	udiv	r3, r2, r3
 8009906:	3301      	adds	r3, #1
 8009908:	4618      	mov	r0, r3
 800990a:	f7f8 f8a9 	bl	8001a60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 f872 	bl	800a9f8 <SD_PowerON>
 8009914:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e02e      	b.n	8009992 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 ffa3 	bl	800a880 <SD_InitCard>
 800993a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	431a      	orrs	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e01b      	b.n	8009992 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009962:	4618      	mov	r0, r3
 8009964:	f004 fa4c 	bl	800de00 <SDMMC_CmdBlockLength>
 8009968:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00f      	beq.n	8009990 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a0b      	ldr	r2, [pc, #44]	; (80099a4 <HAL_SD_InitCard+0x124>)
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e000      	b.n	8009992 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	372c      	adds	r7, #44	; 0x2c
 8009996:	46bd      	mov	sp, r7
 8009998:	bd90      	pop	{r4, r7, pc}
 800999a:	bf00      	nop
 800999c:	014f8b59 	.word	0x014f8b59
 80099a0:	00012110 	.word	0x00012110
 80099a4:	1fe00fff 	.word	0x1fe00fff

080099a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08c      	sub	sp, #48	; 0x30
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d107      	bne.n	80099d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e08d      	b.n	8009aec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b01      	cmp	r3, #1
 80099da:	f040 8086 	bne.w	8009aea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	441a      	add	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d907      	bls.n	8009a02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e074      	b.n	8009aec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2203      	movs	r2, #3
 8009a06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	025a      	lsls	r2, r3, #9
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d002      	beq.n	8009a2e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	025b      	lsls	r3, r3, #9
 8009a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a32:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	025b      	lsls	r3, r3, #9
 8009a38:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009a3a:	2390      	movs	r3, #144	; 0x90
 8009a3c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a3e:	2302      	movs	r3, #2
 8009a40:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f107 0210 	add.w	r2, r7, #16
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f004 f9a7 	bl	800dda8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a68:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2201      	movs	r2, #1
 8009a78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d90a      	bls.n	8009a96 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2282      	movs	r2, #130	; 0x82
 8009a84:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f004 f9fd 	bl	800de8c <SDMMC_CmdReadMultiBlock>
 8009a92:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a94:	e009      	b.n	8009aaa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2281      	movs	r2, #129	; 0x81
 8009a9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f004 f9cf 	bl	800de46 <SDMMC_CmdReadSingleBlock>
 8009aa8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d012      	beq.n	8009ad6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a0f      	ldr	r2, [pc, #60]	; (8009af4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8009ab6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e00a      	b.n	8009aec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009ae4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e000      	b.n	8009aec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009aea:	2302      	movs	r3, #2
  }
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3730      	adds	r7, #48	; 0x30
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	1fe00fff 	.word	0x1fe00fff

08009af8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08c      	sub	sp, #48	; 0x30
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d107      	bne.n	8009b20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b14:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e08d      	b.n	8009c3c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	f040 8086 	bne.w	8009c3a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	441a      	add	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d907      	bls.n	8009b52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e074      	b.n	8009c3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2203      	movs	r2, #3
 8009b56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	025a      	lsls	r2, r3, #9
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d002      	beq.n	8009b7e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	025b      	lsls	r3, r3, #9
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b82:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	025b      	lsls	r3, r3, #9
 8009b88:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b8a:	2390      	movs	r3, #144	; 0x90
 8009b8c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b96:	2300      	movs	r3, #0
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f107 0210 	add.w	r2, r7, #16
 8009ba2:	4611      	mov	r1, r2
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f004 f8ff 	bl	800dda8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bb8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d90a      	bls.n	8009be6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	22a0      	movs	r2, #160	; 0xa0
 8009bd4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f004 f99b 	bl	800df18 <SDMMC_CmdWriteMultiBlock>
 8009be2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009be4:	e009      	b.n	8009bfa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2290      	movs	r2, #144	; 0x90
 8009bea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f004 f96d 	bl	800ded2 <SDMMC_CmdWriteSingleBlock>
 8009bf8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d012      	beq.n	8009c26 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a0f      	ldr	r2, [pc, #60]	; (8009c44 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8009c06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e00a      	b.n	8009c3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009c34:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	e000      	b.n	8009c3c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8009c3a:	2302      	movs	r3, #2
  }
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3730      	adds	r7, #48	; 0x30
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	1fe00fff 	.word	0x1fe00fff

08009c48 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c54:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d008      	beq.n	8009c76 <HAL_SD_IRQHandler+0x2e>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 f9aa 	bl	800afc8 <SD_Read_IT>
 8009c74:	e19a      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80ac 	beq.w	8009dde <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c8e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b9d      	ldr	r3, [pc, #628]	; (8009f10 <HAL_SD_IRQHandler+0x2c8>)
 8009c9c:	400b      	ands	r3, r1
 8009c9e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009cae:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68da      	ldr	r2, [r3, #12]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cbe:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f003 0308 	and.w	r3, r3, #8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d038      	beq.n	8009d3c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d104      	bne.n	8009cde <HAL_SD_IRQHandler+0x96>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d011      	beq.n	8009d02 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f004 f93c 	bl	800df60 <SDMMC_CmdStopTransfer>
 8009ce8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f959 	bl	8009fb4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a83      	ldr	r2, [pc, #524]	; (8009f14 <HAL_SD_IRQHandler+0x2cc>)
 8009d08:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d104      	bne.n	8009d2c <HAL_SD_IRQHandler+0xe4>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f003 0302 	and.w	r3, r3, #2
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d003      	beq.n	8009d34 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f005 fb4b 	bl	800f3c8 <HAL_SD_RxCpltCallback>
 8009d32:	e13b      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f005 fb3d 	bl	800f3b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009d3a:	e137      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	f000 8132 	beq.w	8009fac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2200      	movs	r2, #0
 8009d56:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d104      	bne.n	8009d74 <HAL_SD_IRQHandler+0x12c>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f003 0320 	and.w	r3, r3, #32
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d011      	beq.n	8009d98 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f004 f8f1 	bl	800df60 <SDMMC_CmdStopTransfer>
 8009d7e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d008      	beq.n	8009d98 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	431a      	orrs	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f90e 	bl	8009fb4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d104      	bne.n	8009dba <HAL_SD_IRQHandler+0x172>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f005 fafa 	bl	800f3b4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d105      	bne.n	8009dd6 <HAL_SD_IRQHandler+0x18e>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 80eb 	beq.w	8009fac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f005 faf6 	bl	800f3c8 <HAL_SD_RxCpltCallback>
}
 8009ddc:	e0e6      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <HAL_SD_IRQHandler+0x1b6>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f003 0308 	and.w	r3, r3, #8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 f92c 	bl	800b054 <SD_Write_IT>
 8009dfc:	e0d6      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e04:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 80a2 	beq.w	8009f52 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e20:	f043 0202 	orr.w	r2, r3, #2
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2e:	f003 0308 	and.w	r3, r3, #8
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d005      	beq.n	8009e42 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3a:	f043 0208 	orr.w	r2, r3, #8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e48:	f003 0320 	and.w	r3, r3, #32
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d005      	beq.n	8009e5c <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e54:	f043 0220 	orr.w	r2, r3, #32
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e62:	f003 0310 	and.w	r3, r3, #16
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d005      	beq.n	8009e76 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6e:	f043 0210 	orr.w	r2, r3, #16
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a26      	ldr	r2, [pc, #152]	; (8009f14 <HAL_SD_IRQHandler+0x2cc>)
 8009e7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68da      	ldr	r2, [r3, #12]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e9c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009eac:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68da      	ldr	r2, [r3, #12]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ebc:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f004 f84c 	bl	800df60 <SDMMC_CmdStopTransfer>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ee2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009eec:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00f      	beq.n	8009f18 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f854 	bl	8009fb4 <HAL_SD_ErrorCallback>
}
 8009f0c:	e04e      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
 8009f0e:	bf00      	nop
 8009f10:	ffff3ec5 	.word	0xffff3ec5
 8009f14:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d044      	beq.n	8009fac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d040      	beq.n	8009fac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009f38:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f832 	bl	8009fb4 <HAL_SD_ErrorCallback>
}
 8009f50:	e02c      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d025      	beq.n	8009fac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f68:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10c      	bne.n	8009f92 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f003 0320 	and.w	r3, r3, #32
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f001 f9a0 	bl	800b2c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8009f88:	e010      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 f988 	bl	800b2a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8009f90:	e00c      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f003 0320 	and.w	r3, r3, #32
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 f989 	bl	800b2b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8009fa2:	e003      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 f971 	bl	800b28c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009faa:	e7ff      	b.n	8009fac <HAL_SD_IRQHandler+0x364>
 8009fac:	bf00      	nop
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd6:	0f9b      	lsrs	r3, r3, #30
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe2:	0e9b      	lsrs	r3, r3, #26
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff4:	0e1b      	lsrs	r3, r3, #24
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a006:	0c1b      	lsrs	r3, r3, #16
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a012:	0a1b      	lsrs	r3, r3, #8
 800a014:	b2da      	uxtb	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a01e:	b2da      	uxtb	r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a028:	0d1b      	lsrs	r3, r3, #20
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a034:	0c1b      	lsrs	r3, r3, #16
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 030f 	and.w	r3, r3, #15
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a046:	0bdb      	lsrs	r3, r3, #15
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a058:	0b9b      	lsrs	r3, r3, #14
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	b2da      	uxtb	r2, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a06a:	0b5b      	lsrs	r3, r3, #13
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	b2da      	uxtb	r2, r3
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07c:	0b1b      	lsrs	r3, r3, #12
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	b2da      	uxtb	r2, r3
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2200      	movs	r2, #0
 800a08e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	2b00      	cmp	r3, #0
 800a096:	d163      	bne.n	800a160 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a09c:	009a      	lsls	r2, r3, #2
 800a09e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800a0a8:	0f92      	lsrs	r2, r2, #30
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0b4:	0edb      	lsrs	r3, r3, #27
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	f003 0307 	and.w	r3, r3, #7
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0c6:	0e1b      	lsrs	r3, r3, #24
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	f003 0307 	and.w	r3, r3, #7
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0d8:	0d5b      	lsrs	r3, r3, #21
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ea:	0c9b      	lsrs	r3, r3, #18
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0fc:	0bdb      	lsrs	r3, r3, #15
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	b2da      	uxtb	r2, r3
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	1c5a      	adds	r2, r3, #1
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	7e1b      	ldrb	r3, [r3, #24]
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	f003 0307 	and.w	r3, r3, #7
 800a11e:	3302      	adds	r3, #2
 800a120:	2201      	movs	r2, #1
 800a122:	fa02 f303 	lsl.w	r3, r2, r3
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a12a:	fb02 f203 	mul.w	r2, r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	7a1b      	ldrb	r3, [r3, #8]
 800a136:	b2db      	uxtb	r3, r3
 800a138:	f003 030f 	and.w	r3, r3, #15
 800a13c:	2201      	movs	r2, #1
 800a13e:	409a      	lsls	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a14c:	0a52      	lsrs	r2, r2, #9
 800a14e:	fb02 f203 	mul.w	r2, r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a15c:	655a      	str	r2, [r3, #84]	; 0x54
 800a15e:	e031      	b.n	800a1c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a164:	2b01      	cmp	r3, #1
 800a166:	d11d      	bne.n	800a1a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a16c:	041b      	lsls	r3, r3, #16
 800a16e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a176:	0c1b      	lsrs	r3, r3, #16
 800a178:	431a      	orrs	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	3301      	adds	r3, #1
 800a184:	029a      	lsls	r2, r3, #10
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a198:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	655a      	str	r2, [r3, #84]	; 0x54
 800a1a2:	e00f      	b.n	800a1c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a58      	ldr	r2, [pc, #352]	; (800a30c <HAL_SD_GetCardCSD+0x344>)
 800a1aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e09d      	b.n	800a300 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1c8:	0b9b      	lsrs	r3, r3, #14
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1da:	09db      	lsrs	r3, r3, #7
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1fc:	0fdb      	lsrs	r3, r3, #31
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a208:	0f5b      	lsrs	r3, r3, #29
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	f003 0303 	and.w	r3, r3, #3
 800a210:	b2da      	uxtb	r2, r3
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a21a:	0e9b      	lsrs	r3, r3, #26
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	b2da      	uxtb	r2, r3
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a22c:	0d9b      	lsrs	r3, r3, #22
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	f003 030f 	and.w	r3, r3, #15
 800a234:	b2da      	uxtb	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a23e:	0d5b      	lsrs	r3, r3, #21
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	b2da      	uxtb	r2, r3
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a25a:	0c1b      	lsrs	r3, r3, #16
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	b2da      	uxtb	r2, r3
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a26e:	0bdb      	lsrs	r3, r3, #15
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a282:	0b9b      	lsrs	r3, r3, #14
 800a284:	b2db      	uxtb	r3, r3
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a296:	0b5b      	lsrs	r3, r3, #13
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2aa:	0b1b      	lsrs	r3, r3, #12
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	b2da      	uxtb	r2, r3
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2be:	0a9b      	lsrs	r3, r3, #10
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2e6:	085b      	lsrs	r3, r3, #1
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	1fe00fff 	.word	0x1fe00fff

0800a310 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b094      	sub	sp, #80	; 0x50
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a320:	f107 0308 	add.w	r3, r7, #8
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fbf0 	bl	800ab0c <SD_SendSDStatus>
 800a32c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a32e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a330:	2b00      	cmp	r3, #0
 800a332:	d011      	beq.n	800a358 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a4f      	ldr	r2, [pc, #316]	; (800a478 <HAL_SD_GetCardStatus+0x168>)
 800a33a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a356:	e070      	b.n	800a43a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	099b      	lsrs	r3, r3, #6
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	b2da      	uxtb	r2, r3
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	095b      	lsrs	r3, r3, #5
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a382:	b29a      	uxth	r2, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	0e1b      	lsrs	r3, r3, #24
 800a388:	b29b      	uxth	r3, r3
 800a38a:	4313      	orrs	r3, r2
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	061a      	lsls	r2, r3, #24
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	021b      	lsls	r3, r3, #8
 800a39a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a39e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	0a1b      	lsrs	r3, r3, #8
 800a3a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a3a8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	0e1b      	lsrs	r3, r3, #24
 800a3ae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	0d1b      	lsrs	r3, r3, #20
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	f003 030f 	and.w	r3, r3, #15
 800a3d0:	b2da      	uxtb	r2, r3
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	0c1b      	lsrs	r3, r3, #16
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	0a9b      	lsrs	r3, r3, #10
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	0a1b      	lsrs	r3, r3, #8
 800a406:	b2db      	uxtb	r3, r3
 800a408:	f003 0303 	and.w	r3, r3, #3
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	091b      	lsrs	r3, r3, #4
 800a416:	b2db      	uxtb	r3, r3
 800a418:	f003 030f 	and.w	r3, r3, #15
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	b2db      	uxtb	r3, r3
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	0e1b      	lsrs	r3, r3, #24
 800a434:	b2da      	uxtb	r2, r3
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a442:	4618      	mov	r0, r3
 800a444:	f003 fcdc 	bl	800de00 <SDMMC_CmdBlockLength>
 800a448:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a44a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00d      	beq.n	800a46c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a08      	ldr	r2, [pc, #32]	; (800a478 <HAL_SD_GetCardStatus+0x168>)
 800a456:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a45c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a46c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a470:	4618      	mov	r0, r3
 800a472:	3750      	adds	r7, #80	; 0x50
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	1fe00fff 	.word	0x1fe00fff

0800a47c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a4d4:	b590      	push	{r4, r7, lr}
 800a4d6:	b08d      	sub	sp, #52	; 0x34
 800a4d8:	af02      	add	r7, sp, #8
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f0:	2b03      	cmp	r3, #3
 800a4f2:	d02e      	beq.n	800a552 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4fa:	d106      	bne.n	800a50a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a500:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	635a      	str	r2, [r3, #52]	; 0x34
 800a508:	e029      	b.n	800a55e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a510:	d10a      	bne.n	800a528 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fbf2 	bl	800acfc <SD_WideBus_Enable>
 800a518:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	431a      	orrs	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	635a      	str	r2, [r3, #52]	; 0x34
 800a526:	e01a      	b.n	800a55e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10a      	bne.n	800a544 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fc2f 	bl	800ad92 <SD_WideBus_Disable>
 800a534:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	431a      	orrs	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	635a      	str	r2, [r3, #52]	; 0x34
 800a542:	e00c      	b.n	800a55e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a548:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	635a      	str	r2, [r3, #52]	; 0x34
 800a550:	e005      	b.n	800a55e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a5e      	ldr	r2, [pc, #376]	; (800a6e4 <HAL_SD_ConfigWideBusOperation+0x210>)
 800a56c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a574:	e094      	b.n	800a6a0 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a576:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a57a:	f7fd feb7 	bl	80082ec <HAL_RCCEx_GetPeriphCLKFreq>
 800a57e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 8083 	beq.w	800a68e <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695a      	ldr	r2, [r3, #20]
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	4950      	ldr	r1, [pc, #320]	; (800a6e8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a5a6:	fba1 1303 	umull	r1, r3, r1, r3
 800a5aa:	0e1b      	lsrs	r3, r3, #24
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d303      	bcc.n	800a5b8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	e05a      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c0:	d103      	bne.n	800a5ca <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	61bb      	str	r3, [r7, #24]
 800a5c8:	e051      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5d2:	d126      	bne.n	800a622 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10e      	bne.n	800a5fa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	4a43      	ldr	r2, [pc, #268]	; (800a6ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d906      	bls.n	800a5f2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	4a40      	ldr	r2, [pc, #256]	; (800a6e8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ec:	0e5b      	lsrs	r3, r3, #25
 800a5ee:	61bb      	str	r3, [r7, #24]
 800a5f0:	e03d      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	61bb      	str	r3, [r7, #24]
 800a5f8:	e039      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	695b      	ldr	r3, [r3, #20]
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	fbb2 f3f3 	udiv	r3, r2, r3
 800a606:	4a39      	ldr	r2, [pc, #228]	; (800a6ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d906      	bls.n	800a61a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	4a36      	ldr	r2, [pc, #216]	; (800a6e8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a610:	fba2 2303 	umull	r2, r3, r2, r3
 800a614:	0e5b      	lsrs	r3, r3, #25
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	e029      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	e025      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10e      	bne.n	800a648 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	4a30      	ldr	r2, [pc, #192]	; (800a6f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d906      	bls.n	800a640 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4a2c      	ldr	r2, [pc, #176]	; (800a6e8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	0e1b      	lsrs	r3, r3, #24
 800a63c:	61bb      	str	r3, [r7, #24]
 800a63e:	e016      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	695b      	ldr	r3, [r3, #20]
 800a644:	61bb      	str	r3, [r7, #24]
 800a646:	e012      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	695b      	ldr	r3, [r3, #20]
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	fbb2 f3f3 	udiv	r3, r2, r3
 800a654:	4a26      	ldr	r2, [pc, #152]	; (800a6f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d906      	bls.n	800a668 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	4a22      	ldr	r2, [pc, #136]	; (800a6e8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a65e:	fba2 2303 	umull	r2, r3, r2, r3
 800a662:	0e1b      	lsrs	r3, r3, #24
 800a664:	61bb      	str	r3, [r7, #24]
 800a666:	e002      	b.n	800a66e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	695b      	ldr	r3, [r3, #20]
 800a66c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681c      	ldr	r4, [r3, #0]
 800a672:	466a      	mov	r2, sp
 800a674:	f107 0314 	add.w	r3, r7, #20
 800a678:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a67c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a680:	f107 0308 	add.w	r3, r7, #8
 800a684:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a686:	4620      	mov	r0, r4
 800a688:	f003 fadc 	bl	800dc44 <SDMMC_Init>
 800a68c:	e008      	b.n	800a6a0 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a692:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f003 fba9 	bl	800de00 <SDMMC_CmdBlockLength>
 800a6ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00c      	beq.n	800a6d0 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a0a      	ldr	r2, [pc, #40]	; (800a6e4 <HAL_SD_ConfigWideBusOperation+0x210>)
 800a6bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	372c      	adds	r7, #44	; 0x2c
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd90      	pop	{r4, r7, pc}
 800a6e4:	1fe00fff 	.word	0x1fe00fff
 800a6e8:	55e63b89 	.word	0x55e63b89
 800a6ec:	02faf080 	.word	0x02faf080
 800a6f0:	017d7840 	.word	0x017d7840

0800a6f4 <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2203      	movs	r2, #3
 800a706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d026      	beq.n	800a75e <HAL_SD_ConfigSpeedBusOperation+0x6a>
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b02      	cmp	r3, #2
 800a714:	d84a      	bhi.n	800a7ac <HAL_SD_ConfigSpeedBusOperation+0xb8>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <HAL_SD_ConfigSpeedBusOperation+0x30>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d04d      	beq.n	800a7be <HAL_SD_ConfigSpeedBusOperation+0xca>
 800a722:	e043      	b.n	800a7ac <HAL_SD_ConfigSpeedBusOperation+0xb8>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a72c:	d008      	beq.n	800a740 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800a732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a736:	d003      	beq.n	800a740 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d140      	bne.n	800a7c2 <HAL_SD_ConfigSpeedBusOperation+0xce>
      {
        /* Enable High Speed */
        if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fcd1 	bl	800b0e8 <SD_HighSpeed>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d03a      	beq.n	800a7c2 <HAL_SD_ConfigSpeedBusOperation+0xce>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	635a      	str	r2, [r3, #52]	; 0x34
          status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 800a75c:	e031      	b.n	800a7c2 <HAL_SD_ConfigSpeedBusOperation+0xce>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a766:	d008      	beq.n	800a77a <HAL_SD_ConfigSpeedBusOperation+0x86>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 800a76c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a770:	d003      	beq.n	800a77a <HAL_SD_ConfigSpeedBusOperation+0x86>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800a776:	2b01      	cmp	r3, #1
 800a778:	d10e      	bne.n	800a798 <HAL_SD_ConfigSpeedBusOperation+0xa4>
      {
        /* Enable High Speed */
        if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fcb4 	bl	800b0e8 <SD_HighSpeed>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d011      	beq.n	800a7aa <HAL_SD_ConfigSpeedBusOperation+0xb6>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	635a      	str	r2, [r3, #52]	; 0x34
          status = HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	75fb      	strb	r3, [r7, #23]
        if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 800a796:	e008      	b.n	800a7aa <HAL_SD_ConfigSpeedBusOperation+0xb6>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	635a      	str	r2, [r3, #52]	; 0x34
        status = HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a7a8:	e00c      	b.n	800a7c4 <HAL_SD_ConfigSpeedBusOperation+0xd0>
 800a7aa:	e00b      	b.n	800a7c4 <HAL_SD_ConfigSpeedBusOperation+0xd0>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
      break;
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a7bc:	e002      	b.n	800a7c4 <HAL_SD_ConfigSpeedBusOperation+0xd0>
      break;
 800a7be:	bf00      	nop
 800a7c0:	e000      	b.n	800a7c4 <HAL_SD_ConfigSpeedBusOperation+0xd0>
      break;
 800a7c2:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 800a7c4:	f7f7 f940 	bl	8001a48 <HAL_GetTick>
 800a7c8:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a7ca:	e011      	b.n	800a7f0 <HAL_SD_ConfigSpeedBusOperation+0xfc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a7cc:	f7f7 f93c 	bl	8001a48 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7da:	d109      	bne.n	800a7f0 <HAL_SD_ConfigSpeedBusOperation+0xfc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	e021      	b.n	800a834 <HAL_SD_ConfigSpeedBusOperation+0x140>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f825 	bl	800a840 <HAL_SD_GetCardState>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	d1e7      	bne.n	800a7cc <HAL_SD_ConfigSpeedBusOperation+0xd8>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a804:	4618      	mov	r0, r3
 800a806:	f003 fafb 	bl	800de00 <SDMMC_CmdBlockLength>
 800a80a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00b      	beq.n	800a82a <HAL_SD_ConfigSpeedBusOperation+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a09      	ldr	r2, [pc, #36]	; (800a83c <HAL_SD_ConfigSpeedBusOperation+0x148>)
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	431a      	orrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return status;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	1fe00fff 	.word	0x1fe00fff

0800a840 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a84c:	f107 030c 	add.w	r3, r7, #12
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fa2a 	bl	800acac <SD_SendStatus>
 800a858:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	0a5b      	lsrs	r3, r3, #9
 800a870:	f003 030f 	and.w	r3, r3, #15
 800a874:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a876:	693b      	ldr	r3, [r7, #16]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b090      	sub	sp, #64	; 0x40
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a888:	2301      	movs	r3, #1
 800a88a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	f003 fa30 	bl	800dcf6 <SDMMC_GetPowerState>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d102      	bne.n	800a8a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a89c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a8a0:	e0a5      	b.n	800a9ee <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d02e      	beq.n	800a908 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f003 fc7b 	bl	800e1aa <SDMMC_CmdSendCID>
 800a8b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800a8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <SD_InitCard+0x40>
    {
      return errorstate;
 800a8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8be:	e096      	b.n	800a9ee <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f003 fa5b 	bl	800dd82 <SDMMC_GetResponse>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2104      	movs	r1, #4
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f003 fa52 	bl	800dd82 <SDMMC_GetResponse>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2108      	movs	r1, #8
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f003 fa49 	bl	800dd82 <SDMMC_GetResponse>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	210c      	movs	r1, #12
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f003 fa40 	bl	800dd82 <SDMMC_GetResponse>
 800a902:	4602      	mov	r2, r0
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d00d      	beq.n	800a92c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f107 020e 	add.w	r2, r7, #14
 800a918:	4611      	mov	r1, r2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f003 fc84 	bl	800e228 <SDMMC_CmdSetRelAdd>
 800a920:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800a922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <SD_InitCard+0xac>
    {
      return errorstate;
 800a928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a92a:	e060      	b.n	800a9ee <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	2b03      	cmp	r3, #3
 800a932:	d036      	beq.n	800a9a2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a934:	89fb      	ldrh	r3, [r7, #14]
 800a936:	461a      	mov	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a944:	041b      	lsls	r3, r3, #16
 800a946:	4619      	mov	r1, r3
 800a948:	4610      	mov	r0, r2
 800a94a:	f003 fc4d 	bl	800e1e8 <SDMMC_CmdSendCSD>
 800a94e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800a950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <SD_InitCard+0xda>
    {
      return errorstate;
 800a956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a958:	e049      	b.n	800a9ee <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2100      	movs	r1, #0
 800a960:	4618      	mov	r0, r3
 800a962:	f003 fa0e 	bl	800dd82 <SDMMC_GetResponse>
 800a966:	4602      	mov	r2, r0
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2104      	movs	r1, #4
 800a972:	4618      	mov	r0, r3
 800a974:	f003 fa05 	bl	800dd82 <SDMMC_GetResponse>
 800a978:	4602      	mov	r2, r0
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2108      	movs	r1, #8
 800a984:	4618      	mov	r0, r3
 800a986:	f003 f9fc 	bl	800dd82 <SDMMC_GetResponse>
 800a98a:	4602      	mov	r2, r0
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	210c      	movs	r1, #12
 800a996:	4618      	mov	r0, r3
 800a998:	f003 f9f3 	bl	800dd82 <SDMMC_GetResponse>
 800a99c:	4602      	mov	r2, r0
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2104      	movs	r1, #4
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f003 f9ea 	bl	800dd82 <SDMMC_GetResponse>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	0d1a      	lsrs	r2, r3, #20
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a9b6:	f107 0310 	add.w	r3, r7, #16
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f7ff fb03 	bl	8009fc8 <HAL_SD_GetCardCSD>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a9cc:	e00f      	b.n	800a9ee <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d6:	041b      	lsls	r3, r3, #16
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f003 fafc 	bl	800dfd8 <SDMMC_CmdSelDesel>
 800a9e0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <SD_InitCard+0x16c>
  {
    return errorstate;
 800a9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ea:	e000      	b.n	800a9ee <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3740      	adds	r7, #64	; 0x40
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f003 fb04 	bl	800e01e <SDMMC_CmdGoIdleState>
 800aa16:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <SD_PowerON+0x2a>
  {
    return errorstate;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	e06e      	b.n	800ab00 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f003 fb17 	bl	800e05a <SDMMC_CmdOperCond>
 800aa2c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00d      	beq.n	800aa50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f003 faed 	bl	800e01e <SDMMC_CmdGoIdleState>
 800aa44:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <SD_PowerON+0x5e>
    {
      return errorstate;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	e057      	b.n	800ab00 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d137      	bne.n	800aace <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2100      	movs	r1, #0
 800aa64:	4618      	mov	r0, r3
 800aa66:	f003 fb18 	bl	800e09a <SDMMC_CmdAppCommand>
 800aa6a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d02d      	beq.n	800aace <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aa76:	e043      	b.n	800ab00 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f003 fb0b 	bl	800e09a <SDMMC_CmdAppCommand>
 800aa84:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <SD_PowerON+0x98>
    {
      return errorstate;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	e037      	b.n	800ab00 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	491c      	ldr	r1, [pc, #112]	; (800ab08 <SD_PowerON+0x110>)
 800aa96:	4618      	mov	r0, r3
 800aa98:	f003 fb22 	bl	800e0e0 <SDMMC_CmdAppOperCommand>
 800aa9c:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aaa8:	e02a      	b.n	800ab00 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2100      	movs	r1, #0
 800aab0:	4618      	mov	r0, r3
 800aab2:	f003 f966 	bl	800dd82 <SDMMC_GetResponse>
 800aab6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	0fdb      	lsrs	r3, r3, #31
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <SD_PowerON+0xcc>
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <SD_PowerON+0xce>
 800aac4:	2300      	movs	r3, #0
 800aac6:	613b      	str	r3, [r7, #16]

    count++;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	3301      	adds	r3, #1
 800aacc:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d802      	bhi.n	800aade <SD_PowerON+0xe6>
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0cc      	beq.n	800aa78 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d902      	bls.n	800aaee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aaec:	e008      	b.n	800ab00 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	c1100000 	.word	0xc1100000

0800ab0c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08c      	sub	sp, #48	; 0x30
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab16:	f7f6 ff97 	bl	8001a48 <HAL_GetTick>
 800ab1a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f003 f92b 	bl	800dd82 <SDMMC_GetResponse>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab36:	d102      	bne.n	800ab3e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ab38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab3c:	e0b0      	b.n	800aca0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2140      	movs	r1, #64	; 0x40
 800ab44:	4618      	mov	r0, r3
 800ab46:	f003 f95b 	bl	800de00 <SDMMC_CmdBlockLength>
 800ab4a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab4c:	6a3b      	ldr	r3, [r7, #32]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d005      	beq.n	800ab5e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	e0a0      	b.n	800aca0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab66:	041b      	lsls	r3, r3, #16
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	f003 fa95 	bl	800e09a <SDMMC_CmdAppCommand>
 800ab70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d005      	beq.n	800ab84 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	e08d      	b.n	800aca0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab84:	f04f 33ff 	mov.w	r3, #4294967295
 800ab88:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ab8a:	2340      	movs	r3, #64	; 0x40
 800ab8c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ab8e:	2360      	movs	r3, #96	; 0x60
 800ab90:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab92:	2302      	movs	r3, #2
 800ab94:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f107 0208 	add.w	r2, r7, #8
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f003 f8fd 	bl	800dda8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f003 fb7d 	bl	800e2b2 <SDMMC_CmdStatusRegister>
 800abb8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d02b      	beq.n	800ac18 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	e069      	b.n	800aca0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d013      	beq.n	800ac02 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800abda:	2300      	movs	r3, #0
 800abdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abde:	e00d      	b.n	800abfc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f003 f857 	bl	800dc98 <SDMMC_ReadFIFO>
 800abea:	4602      	mov	r2, r0
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	601a      	str	r2, [r3, #0]
        pData++;
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	3304      	adds	r3, #4
 800abf4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800abf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf8:	3301      	adds	r3, #1
 800abfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	2b07      	cmp	r3, #7
 800ac00:	d9ee      	bls.n	800abe0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac02:	f7f6 ff21 	bl	8001a48 <HAL_GetTick>
 800ac06:	4602      	mov	r2, r0
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac10:	d102      	bne.n	800ac18 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac16:	e043      	b.n	800aca0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0d2      	beq.n	800abcc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac2c:	f003 0308 	and.w	r3, r3, #8
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac34:	2308      	movs	r3, #8
 800ac36:	e033      	b.n	800aca0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3e:	f003 0302 	and.w	r3, r3, #2
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac46:	2302      	movs	r3, #2
 800ac48:	e02a      	b.n	800aca0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac50:	f003 0320 	and.w	r3, r3, #32
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d017      	beq.n	800ac88 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ac58:	2320      	movs	r3, #32
 800ac5a:	e021      	b.n	800aca0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f003 f819 	bl	800dc98 <SDMMC_ReadFIFO>
 800ac66:	4602      	mov	r2, r0
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	601a      	str	r2, [r3, #0]
    pData++;
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	3304      	adds	r3, #4
 800ac70:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac72:	f7f6 fee9 	bl	8001a48 <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac80:	d102      	bne.n	800ac88 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac86:	e00b      	b.n	800aca0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e2      	bne.n	800ac5c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a03      	ldr	r2, [pc, #12]	; (800aca8 <SD_SendSDStatus+0x19c>)
 800ac9c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3730      	adds	r7, #48	; 0x30
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	18000f3a 	.word	0x18000f3a

0800acac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d102      	bne.n	800acc2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800acbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800acc0:	e018      	b.n	800acf4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acca:	041b      	lsls	r3, r3, #16
 800accc:	4619      	mov	r1, r3
 800acce:	4610      	mov	r0, r2
 800acd0:	f003 facc 	bl	800e26c <SDMMC_CmdSendStatus>
 800acd4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	e009      	b.n	800acf4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f003 f84b 	bl	800dd82 <SDMMC_GetResponse>
 800acec:	4602      	mov	r2, r0
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2100      	movs	r1, #0
 800ad12:	4618      	mov	r0, r3
 800ad14:	f003 f835 	bl	800dd82 <SDMMC_GetResponse>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad22:	d102      	bne.n	800ad2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad28:	e02f      	b.n	800ad8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad2a:	f107 030c 	add.w	r3, r7, #12
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f879 	bl	800ae28 <SD_FindSCR>
 800ad36:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	e023      	b.n	800ad8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d01c      	beq.n	800ad86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad54:	041b      	lsls	r3, r3, #16
 800ad56:	4619      	mov	r1, r3
 800ad58:	4610      	mov	r0, r2
 800ad5a:	f003 f99e 	bl	800e09a <SDMMC_CmdAppCommand>
 800ad5e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	e00f      	b.n	800ad8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2102      	movs	r1, #2
 800ad70:	4618      	mov	r0, r3
 800ad72:	f003 f9d5 	bl	800e120 <SDMMC_CmdBusWidth>
 800ad76:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d001      	beq.n	800ad82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	e003      	b.n	800ad8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	e001      	b.n	800ad8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b086      	sub	sp, #24
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60fb      	str	r3, [r7, #12]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2100      	movs	r1, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f002 ffea 	bl	800dd82 <SDMMC_GetResponse>
 800adae:	4603      	mov	r3, r0
 800adb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adb8:	d102      	bne.n	800adc0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800adba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adbe:	e02f      	b.n	800ae20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800adc0:	f107 030c 	add.w	r3, r7, #12
 800adc4:	4619      	mov	r1, r3
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f82e 	bl	800ae28 <SD_FindSCR>
 800adcc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	e023      	b.n	800ae20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d01c      	beq.n	800ae1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adea:	041b      	lsls	r3, r3, #16
 800adec:	4619      	mov	r1, r3
 800adee:	4610      	mov	r0, r2
 800adf0:	f003 f953 	bl	800e09a <SDMMC_CmdAppCommand>
 800adf4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	e00f      	b.n	800ae20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2100      	movs	r1, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f003 f98a 	bl	800e120 <SDMMC_CmdBusWidth>
 800ae0c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	e003      	b.n	800ae20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e001      	b.n	800ae20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08e      	sub	sp, #56	; 0x38
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae32:	f7f6 fe09 	bl	8001a48 <HAL_GetTick>
 800ae36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60bb      	str	r3, [r7, #8]
 800ae40:	2300      	movs	r3, #0
 800ae42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2108      	movs	r1, #8
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f002 ffd6 	bl	800de00 <SDMMC_CmdBlockLength>
 800ae54:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	e0ad      	b.n	800afbc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae68:	041b      	lsls	r3, r3, #16
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f003 f914 	bl	800e09a <SDMMC_CmdAppCommand>
 800ae72:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7c:	e09e      	b.n	800afbc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ae7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ae84:	2308      	movs	r3, #8
 800ae86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ae88:	2330      	movs	r3, #48	; 0x30
 800ae8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ae94:	2301      	movs	r3, #1
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f107 0210 	add.w	r2, r7, #16
 800aea0:	4611      	mov	r1, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f002 ff80 	bl	800dda8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f003 f95a 	bl	800e166 <SDMMC_CmdSendSCR>
 800aeb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d027      	beq.n	800af0a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	e07e      	b.n	800afbc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d113      	bne.n	800aef4 <SD_FindSCR+0xcc>
 800aecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d110      	bne.n	800aef4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f002 fede 	bl	800dc98 <SDMMC_ReadFIFO>
 800aedc:	4603      	mov	r3, r0
 800aede:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 fed7 	bl	800dc98 <SDMMC_ReadFIFO>
 800aeea:	4603      	mov	r3, r0
 800aeec:	60fb      	str	r3, [r7, #12]
      index++;
 800aeee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef0:	3301      	adds	r3, #1
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aef4:	f7f6 fda8 	bl	8001a48 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af02:	d102      	bne.n	800af0a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af08:	e058      	b.n	800afbc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af10:	f240 532a 	movw	r3, #1322	; 0x52a
 800af14:	4013      	ands	r3, r2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0d1      	beq.n	800aebe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af20:	f003 0308 	and.w	r3, r3, #8
 800af24:	2b00      	cmp	r3, #0
 800af26:	d005      	beq.n	800af34 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2208      	movs	r2, #8
 800af2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800af30:	2308      	movs	r3, #8
 800af32:	e043      	b.n	800afbc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3a:	f003 0302 	and.w	r3, r3, #2
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d005      	beq.n	800af4e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2202      	movs	r2, #2
 800af48:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800af4a:	2302      	movs	r3, #2
 800af4c:	e036      	b.n	800afbc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af54:	f003 0320 	and.w	r3, r3, #32
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d005      	beq.n	800af68 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2220      	movs	r2, #32
 800af62:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800af64:	2320      	movs	r3, #32
 800af66:	e029      	b.n	800afbc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a15      	ldr	r2, [pc, #84]	; (800afc4 <SD_FindSCR+0x19c>)
 800af6e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	061a      	lsls	r2, r3, #24
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	021b      	lsls	r3, r3, #8
 800af78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af7c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	0a1b      	lsrs	r3, r3, #8
 800af82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800af86:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	0e1b      	lsrs	r3, r3, #24
 800af8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	601a      	str	r2, [r3, #0]
    scr++;
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	3304      	adds	r3, #4
 800af96:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	061a      	lsls	r2, r3, #24
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afa4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	0a1b      	lsrs	r3, r3, #8
 800afaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800afae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	0e1b      	lsrs	r3, r3, #24
 800afb4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3738      	adds	r7, #56	; 0x38
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	18000f3a 	.word	0x18000f3a

0800afc8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afda:	2b1f      	cmp	r3, #31
 800afdc:	d936      	bls.n	800b04c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]
 800afe2:	e027      	b.n	800b034 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	f002 fe55 	bl	800dc98 <SDMMC_ReadFIFO>
 800afee:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	3301      	adds	r3, #1
 800affc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	0a1b      	lsrs	r3, r3, #8
 800b002:	b2da      	uxtb	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	3301      	adds	r3, #1
 800b00c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	0c1b      	lsrs	r3, r3, #16
 800b012:	b2da      	uxtb	r2, r3
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	3301      	adds	r3, #1
 800b01c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	0e1b      	lsrs	r3, r3, #24
 800b022:	b2da      	uxtb	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	3301      	adds	r3, #1
 800b02c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	3301      	adds	r3, #1
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2b07      	cmp	r3, #7
 800b038:	d9d4      	bls.n	800afe4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b044:	f1a3 0220 	sub.w	r2, r3, #32
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800b04c:	bf00      	nop
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	2b1f      	cmp	r3, #31
 800b068:	d93a      	bls.n	800b0e0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
 800b06e:	e02b      	b.n	800b0c8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	3301      	adds	r3, #1
 800b07a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	021a      	lsls	r2, r3, #8
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4313      	orrs	r3, r2
 800b086:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	3301      	adds	r3, #1
 800b08c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	041a      	lsls	r2, r3, #16
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4313      	orrs	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	3301      	adds	r3, #1
 800b09e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	061a      	lsls	r2, r3, #24
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f107 020c 	add.w	r2, r7, #12
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f002 fdf8 	bl	800dcb2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	617b      	str	r3, [r7, #20]
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b07      	cmp	r3, #7
 800b0cc:	d9d0      	bls.n	800b070 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a1b      	ldr	r3, [r3, #32]
 800b0d8:	f1a3 0220 	sub.w	r2, r3, #32
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	621a      	str	r2, [r3, #32]
  }
}
 800b0e0:	bf00      	nop
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 800b0e8:	b590      	push	{r4, r7, lr}
 800b0ea:	b09d      	sub	sp, #116	; 0x74
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 800b0f4:	f107 0308 	add.w	r3, r7, #8
 800b0f8:	2240      	movs	r2, #64	; 0x40
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f004 fb7b 	bl	800f7f8 <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 800b102:	2300      	movs	r3, #0
 800b104:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t Timeout = HAL_GetTick();
 800b106:	f7f6 fc9f 	bl	8001a48 <HAL_GetTick>
 800b10a:	6638      	str	r0, [r7, #96]	; 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b110:	2b00      	cmp	r3, #0
 800b112:	d102      	bne.n	800b11a <SD_HighSpeed+0x32>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b114:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b118:	e0af      	b.n	800b27a <SD_HighSpeed+0x192>
  }

  if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b122:	f040 80a9 	bne.w	800b278 <SD_HighSpeed+0x190>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2200      	movs	r2, #0
 800b12c:	62da      	str	r2, [r3, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2140      	movs	r1, #64	; 0x40
 800b134:	4618      	mov	r0, r3
 800b136:	f002 fe63 	bl	800de00 <SDMMC_CmdBlockLength>
 800b13a:	66f8      	str	r0, [r7, #108]	; 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 800b13c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <SD_HighSpeed+0x5e>
    {
      return errorstate;
 800b142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b144:	e099      	b.n	800b27a <SD_HighSpeed+0x192>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b146:	f04f 33ff 	mov.w	r3, #4294967295
 800b14a:	64bb      	str	r3, [r7, #72]	; 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 800b14c:	2340      	movs	r3, #64	; 0x40
 800b14e:	64fb      	str	r3, [r7, #76]	; 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 800b150:	2360      	movs	r3, #96	; 0x60
 800b152:	653b      	str	r3, [r7, #80]	; 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b154:	2302      	movs	r3, #2
 800b156:	657b      	str	r3, [r7, #84]	; 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b158:	2300      	movs	r3, #0
 800b15a:	65bb      	str	r3, [r7, #88]	; 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	65fb      	str	r3, [r7, #92]	; 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b168:	4611      	mov	r1, r2
 800b16a:	4618      	mov	r0, r3
 800b16c:	f002 fe1c 	bl	800dda8 <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4943      	ldr	r1, [pc, #268]	; (800b284 <SD_HighSpeed+0x19c>)
 800b176:	4618      	mov	r0, r3
 800b178:	f003 f8bd 	bl	800e2f6 <SDMMC_CmdSwitch>
 800b17c:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 800b17e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b180:	2b00      	cmp	r3, #0
 800b182:	d037      	beq.n	800b1f4 <SD_HighSpeed+0x10c>
    {
      return errorstate;
 800b184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b186:	e078      	b.n	800b27a <SD_HighSpeed+0x192>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d01b      	beq.n	800b1ce <SD_HighSpeed+0xe6>
      {
        for (count = 0U; count < 8U; count++)
 800b196:	2300      	movs	r3, #0
 800b198:	66bb      	str	r3, [r7, #104]	; 0x68
 800b19a:	e012      	b.n	800b1c2 <SD_HighSpeed+0xda>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6819      	ldr	r1, [r3, #0]
 800b1a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1a2:	00da      	lsls	r2, r3, #3
 800b1a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1a6:	18d4      	adds	r4, r2, r3
 800b1a8:	4608      	mov	r0, r1
 800b1aa:	f002 fd75 	bl	800dc98 <SDMMC_ReadFIFO>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	00a3      	lsls	r3, r4, #2
 800b1b2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800b1b6:	440b      	add	r3, r1
 800b1b8:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 800b1bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1be:	3301      	adds	r3, #1
 800b1c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b1c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1c4:	2b07      	cmp	r3, #7
 800b1c6:	d9e9      	bls.n	800b19c <SD_HighSpeed+0xb4>
        }
        loop ++;
 800b1c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	667b      	str	r3, [r7, #100]	; 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 800b1ce:	f7f6 fc3b 	bl	8001a48 <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1dc:	d10a      	bne.n	800b1f4 <SD_HighSpeed+0x10c>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1e4:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_SD_ERROR_TIMEOUT;
 800b1ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1f2:	e042      	b.n	800b27a <SD_HighSpeed+0x192>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1fa:	f240 532a 	movw	r3, #1322	; 0x52a
 800b1fe:	4013      	ands	r3, r2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0c1      	beq.n	800b188 <SD_HighSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20a:	f003 0308 	and.w	r3, r3, #8
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d005      	beq.n	800b21e <SD_HighSpeed+0x136>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2208      	movs	r2, #8
 800b218:	639a      	str	r2, [r3, #56]	; 0x38

      return errorstate;
 800b21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b21c:	e02d      	b.n	800b27a <SD_HighSpeed+0x192>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b224:	f003 0302 	and.w	r3, r3, #2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d007      	beq.n	800b23c <SD_HighSpeed+0x154>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2202      	movs	r2, #2
 800b232:	639a      	str	r2, [r3, #56]	; 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 800b234:	2302      	movs	r3, #2
 800b236:	66fb      	str	r3, [r7, #108]	; 0x6c

      return errorstate;
 800b238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b23a:	e01e      	b.n	800b27a <SD_HighSpeed+0x192>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b00      	cmp	r3, #0
 800b248:	d007      	beq.n	800b25a <SD_HighSpeed+0x172>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2220      	movs	r2, #32
 800b250:	639a      	str	r2, [r3, #56]	; 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 800b252:	2320      	movs	r3, #32
 800b254:	66fb      	str	r3, [r7, #108]	; 0x6c

      return errorstate;
 800b256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b258:	e00f      	b.n	800b27a <SD_HighSpeed+0x192>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a0a      	ldr	r2, [pc, #40]	; (800b288 <SD_HighSpeed+0x1a0>)
 800b260:	639a      	str	r2, [r3, #56]	; 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 800b262:	f107 0308 	add.w	r3, r7, #8
 800b266:	330d      	adds	r3, #13
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d102      	bne.n	800b278 <SD_HighSpeed+0x190>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800b272:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b276:	66fb      	str	r3, [r7, #108]	; 0x6c
    }

  }

  return errorstate;
 800b278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3774      	adds	r7, #116	; 0x74
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}
 800b282:	bf00      	nop
 800b284:	80ffff01 	.word	0x80ffff01
 800b288:	18000f3a 	.word	0x18000f3a

0800b28c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e049      	b.n	800b382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7f5 ffee 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3304      	adds	r3, #4
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f000 fbec 	bl	800baf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d101      	bne.n	800b39c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e049      	b.n	800b430 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d106      	bne.n	800b3b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f841 	bl	800b438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3304      	adds	r3, #4
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	f000 fb95 	bl	800baf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	f003 0302 	and.w	r3, r3, #2
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d122      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d11b      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f06f 0202 	mvn.w	r2, #2
 800b478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fb14 	bl	800babc <HAL_TIM_IC_CaptureCallback>
 800b494:	e005      	b.n	800b4a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fb06 	bl	800baa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fb17 	bl	800bad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0304 	and.w	r3, r3, #4
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	d122      	bne.n	800b4fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d11b      	bne.n	800b4fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f06f 0204 	mvn.w	r2, #4
 800b4cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 faea 	bl	800babc <HAL_TIM_IC_CaptureCallback>
 800b4e8:	e005      	b.n	800b4f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fadc 	bl	800baa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 faed 	bl	800bad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	f003 0308 	and.w	r3, r3, #8
 800b506:	2b08      	cmp	r3, #8
 800b508:	d122      	bne.n	800b550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f003 0308 	and.w	r3, r3, #8
 800b514:	2b08      	cmp	r3, #8
 800b516:	d11b      	bne.n	800b550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f06f 0208 	mvn.w	r2, #8
 800b520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2204      	movs	r2, #4
 800b526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	69db      	ldr	r3, [r3, #28]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fac0 	bl	800babc <HAL_TIM_IC_CaptureCallback>
 800b53c:	e005      	b.n	800b54a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fab2 	bl	800baa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fac3 	bl	800bad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f003 0310 	and.w	r3, r3, #16
 800b55a:	2b10      	cmp	r3, #16
 800b55c:	d122      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f003 0310 	and.w	r3, r3, #16
 800b568:	2b10      	cmp	r3, #16
 800b56a:	d11b      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f06f 0210 	mvn.w	r2, #16
 800b574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2208      	movs	r2, #8
 800b57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa96 	bl	800babc <HAL_TIM_IC_CaptureCallback>
 800b590:	e005      	b.n	800b59e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa88 	bl	800baa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fa99 	bl	800bad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d10e      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d107      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f06f 0201 	mvn.w	r2, #1
 800b5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fa62 	bl	800ba94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5da:	2b80      	cmp	r3, #128	; 0x80
 800b5dc:	d10e      	bne.n	800b5fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e8:	2b80      	cmp	r3, #128	; 0x80
 800b5ea:	d107      	bne.n	800b5fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 ff94 	bl	800c524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60a:	d10e      	bne.n	800b62a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b616:	2b80      	cmp	r3, #128	; 0x80
 800b618:	d107      	bne.n	800b62a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 ff87 	bl	800c538 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b634:	2b40      	cmp	r3, #64	; 0x40
 800b636:	d10e      	bne.n	800b656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b642:	2b40      	cmp	r3, #64	; 0x40
 800b644:	d107      	bne.n	800b656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 fa47 	bl	800bae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	f003 0320 	and.w	r3, r3, #32
 800b660:	2b20      	cmp	r3, #32
 800b662:	d10e      	bne.n	800b682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f003 0320 	and.w	r3, r3, #32
 800b66e:	2b20      	cmp	r3, #32
 800b670:	d107      	bne.n	800b682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f06f 0220 	mvn.w	r2, #32
 800b67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 ff47 	bl	800c510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d101      	bne.n	800b6a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	e0fd      	b.n	800b8a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b14      	cmp	r3, #20
 800b6b2:	f200 80f0 	bhi.w	800b896 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b6b6:	a201      	add	r2, pc, #4	; (adr r2, 800b6bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6bc:	0800b711 	.word	0x0800b711
 800b6c0:	0800b897 	.word	0x0800b897
 800b6c4:	0800b897 	.word	0x0800b897
 800b6c8:	0800b897 	.word	0x0800b897
 800b6cc:	0800b751 	.word	0x0800b751
 800b6d0:	0800b897 	.word	0x0800b897
 800b6d4:	0800b897 	.word	0x0800b897
 800b6d8:	0800b897 	.word	0x0800b897
 800b6dc:	0800b793 	.word	0x0800b793
 800b6e0:	0800b897 	.word	0x0800b897
 800b6e4:	0800b897 	.word	0x0800b897
 800b6e8:	0800b897 	.word	0x0800b897
 800b6ec:	0800b7d3 	.word	0x0800b7d3
 800b6f0:	0800b897 	.word	0x0800b897
 800b6f4:	0800b897 	.word	0x0800b897
 800b6f8:	0800b897 	.word	0x0800b897
 800b6fc:	0800b815 	.word	0x0800b815
 800b700:	0800b897 	.word	0x0800b897
 800b704:	0800b897 	.word	0x0800b897
 800b708:	0800b897 	.word	0x0800b897
 800b70c:	0800b855 	.word	0x0800b855
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68b9      	ldr	r1, [r7, #8]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 fa88 	bl	800bc2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	699a      	ldr	r2, [r3, #24]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f042 0208 	orr.w	r2, r2, #8
 800b72a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	699a      	ldr	r2, [r3, #24]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0204 	bic.w	r2, r2, #4
 800b73a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6999      	ldr	r1, [r3, #24]
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	430a      	orrs	r2, r1
 800b74c:	619a      	str	r2, [r3, #24]
      break;
 800b74e:	e0a3      	b.n	800b898 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	4618      	mov	r0, r3
 800b758:	f000 faf8 	bl	800bd4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	699a      	ldr	r2, [r3, #24]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b76a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b77a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6999      	ldr	r1, [r3, #24]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	021a      	lsls	r2, r3, #8
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	430a      	orrs	r2, r1
 800b78e:	619a      	str	r2, [r3, #24]
      break;
 800b790:	e082      	b.n	800b898 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68b9      	ldr	r1, [r7, #8]
 800b798:	4618      	mov	r0, r3
 800b79a:	f000 fb61 	bl	800be60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	69da      	ldr	r2, [r3, #28]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f042 0208 	orr.w	r2, r2, #8
 800b7ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	69da      	ldr	r2, [r3, #28]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f022 0204 	bic.w	r2, r2, #4
 800b7bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	69d9      	ldr	r1, [r3, #28]
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	691a      	ldr	r2, [r3, #16]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	61da      	str	r2, [r3, #28]
      break;
 800b7d0:	e062      	b.n	800b898 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 fbc7 	bl	800bf6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	69da      	ldr	r2, [r3, #28]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	69da      	ldr	r2, [r3, #28]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	69d9      	ldr	r1, [r3, #28]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	691b      	ldr	r3, [r3, #16]
 800b808:	021a      	lsls	r2, r3, #8
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	430a      	orrs	r2, r1
 800b810:	61da      	str	r2, [r3, #28]
      break;
 800b812:	e041      	b.n	800b898 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fc0e 	bl	800c03c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f042 0208 	orr.w	r2, r2, #8
 800b82e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f022 0204 	bic.w	r2, r2, #4
 800b83e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	691a      	ldr	r2, [r3, #16]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	430a      	orrs	r2, r1
 800b850:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b852:	e021      	b.n	800b898 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68b9      	ldr	r1, [r7, #8]
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 fc50 	bl	800c100 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b86e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b87e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	021a      	lsls	r2, r3, #8
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b894:	e000      	b.n	800b898 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b896:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop

0800b8ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d101      	bne.n	800b8c4 <HAL_TIM_ConfigClockSource+0x18>
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e0db      	b.n	800ba7c <HAL_TIM_ConfigClockSource+0x1d0>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	4b69      	ldr	r3, [pc, #420]	; (800ba84 <HAL_TIM_ConfigClockSource+0x1d8>)
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a63      	ldr	r2, [pc, #396]	; (800ba88 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	f000 80a9 	beq.w	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b900:	4a61      	ldr	r2, [pc, #388]	; (800ba88 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b902:	4293      	cmp	r3, r2
 800b904:	f200 80ae 	bhi.w	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b908:	4a60      	ldr	r2, [pc, #384]	; (800ba8c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	f000 80a1 	beq.w	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b910:	4a5e      	ldr	r2, [pc, #376]	; (800ba8c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b912:	4293      	cmp	r3, r2
 800b914:	f200 80a6 	bhi.w	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b918:	4a5d      	ldr	r2, [pc, #372]	; (800ba90 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	f000 8099 	beq.w	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b920:	4a5b      	ldr	r2, [pc, #364]	; (800ba90 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b922:	4293      	cmp	r3, r2
 800b924:	f200 809e 	bhi.w	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b928:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b92c:	f000 8091 	beq.w	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b930:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b934:	f200 8096 	bhi.w	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b93c:	f000 8089 	beq.w	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b944:	f200 808e 	bhi.w	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b94c:	d03e      	beq.n	800b9cc <HAL_TIM_ConfigClockSource+0x120>
 800b94e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b952:	f200 8087 	bhi.w	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b95a:	f000 8085 	beq.w	800ba68 <HAL_TIM_ConfigClockSource+0x1bc>
 800b95e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b962:	d87f      	bhi.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b964:	2b70      	cmp	r3, #112	; 0x70
 800b966:	d01a      	beq.n	800b99e <HAL_TIM_ConfigClockSource+0xf2>
 800b968:	2b70      	cmp	r3, #112	; 0x70
 800b96a:	d87b      	bhi.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b96c:	2b60      	cmp	r3, #96	; 0x60
 800b96e:	d050      	beq.n	800ba12 <HAL_TIM_ConfigClockSource+0x166>
 800b970:	2b60      	cmp	r3, #96	; 0x60
 800b972:	d877      	bhi.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b974:	2b50      	cmp	r3, #80	; 0x50
 800b976:	d03c      	beq.n	800b9f2 <HAL_TIM_ConfigClockSource+0x146>
 800b978:	2b50      	cmp	r3, #80	; 0x50
 800b97a:	d873      	bhi.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b97c:	2b40      	cmp	r3, #64	; 0x40
 800b97e:	d058      	beq.n	800ba32 <HAL_TIM_ConfigClockSource+0x186>
 800b980:	2b40      	cmp	r3, #64	; 0x40
 800b982:	d86f      	bhi.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b984:	2b30      	cmp	r3, #48	; 0x30
 800b986:	d064      	beq.n	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b988:	2b30      	cmp	r3, #48	; 0x30
 800b98a:	d86b      	bhi.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b98c:	2b20      	cmp	r3, #32
 800b98e:	d060      	beq.n	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b990:	2b20      	cmp	r3, #32
 800b992:	d867      	bhi.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
 800b994:	2b00      	cmp	r3, #0
 800b996:	d05c      	beq.n	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
 800b998:	2b10      	cmp	r3, #16
 800b99a:	d05a      	beq.n	800ba52 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b99c:	e062      	b.n	800ba64 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	6899      	ldr	r1, [r3, #8]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	f000 fc89 	bl	800c2c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b9c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	609a      	str	r2, [r3, #8]
      break;
 800b9ca:	e04e      	b.n	800ba6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6818      	ldr	r0, [r3, #0]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	6899      	ldr	r1, [r3, #8]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	f000 fc72 	bl	800c2c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9ee:	609a      	str	r2, [r3, #8]
      break;
 800b9f0:	e03b      	b.n	800ba6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6818      	ldr	r0, [r3, #0]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	6859      	ldr	r1, [r3, #4]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f000 fbe2 	bl	800c1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2150      	movs	r1, #80	; 0x50
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 fc3c 	bl	800c288 <TIM_ITRx_SetConfig>
      break;
 800ba10:	e02b      	b.n	800ba6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	6859      	ldr	r1, [r3, #4]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f000 fc01 	bl	800c226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2160      	movs	r1, #96	; 0x60
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 fc2c 	bl	800c288 <TIM_ITRx_SetConfig>
      break;
 800ba30:	e01b      	b.n	800ba6a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6818      	ldr	r0, [r3, #0]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	6859      	ldr	r1, [r3, #4]
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f000 fbc2 	bl	800c1c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2140      	movs	r1, #64	; 0x40
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fc1c 	bl	800c288 <TIM_ITRx_SetConfig>
      break;
 800ba50:	e00b      	b.n	800ba6a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f000 fc13 	bl	800c288 <TIM_ITRx_SetConfig>
        break;
 800ba62:	e002      	b.n	800ba6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ba64:	bf00      	nop
 800ba66:	e000      	b.n	800ba6a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ba68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	ffceff88 	.word	0xffceff88
 800ba88:	00100040 	.word	0x00100040
 800ba8c:	00100030 	.word	0x00100030
 800ba90:	00100020 	.word	0x00100020

0800ba94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a40      	ldr	r2, [pc, #256]	; (800bc0c <TIM_Base_SetConfig+0x114>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d013      	beq.n	800bb38 <TIM_Base_SetConfig+0x40>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb16:	d00f      	beq.n	800bb38 <TIM_Base_SetConfig+0x40>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a3d      	ldr	r2, [pc, #244]	; (800bc10 <TIM_Base_SetConfig+0x118>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00b      	beq.n	800bb38 <TIM_Base_SetConfig+0x40>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a3c      	ldr	r2, [pc, #240]	; (800bc14 <TIM_Base_SetConfig+0x11c>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d007      	beq.n	800bb38 <TIM_Base_SetConfig+0x40>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a3b      	ldr	r2, [pc, #236]	; (800bc18 <TIM_Base_SetConfig+0x120>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d003      	beq.n	800bb38 <TIM_Base_SetConfig+0x40>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a3a      	ldr	r2, [pc, #232]	; (800bc1c <TIM_Base_SetConfig+0x124>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d108      	bne.n	800bb4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a2f      	ldr	r2, [pc, #188]	; (800bc0c <TIM_Base_SetConfig+0x114>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d01f      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb58:	d01b      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a2c      	ldr	r2, [pc, #176]	; (800bc10 <TIM_Base_SetConfig+0x118>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d017      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a2b      	ldr	r2, [pc, #172]	; (800bc14 <TIM_Base_SetConfig+0x11c>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d013      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a2a      	ldr	r2, [pc, #168]	; (800bc18 <TIM_Base_SetConfig+0x120>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d00f      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a29      	ldr	r2, [pc, #164]	; (800bc1c <TIM_Base_SetConfig+0x124>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d00b      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a28      	ldr	r2, [pc, #160]	; (800bc20 <TIM_Base_SetConfig+0x128>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d007      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	4a27      	ldr	r2, [pc, #156]	; (800bc24 <TIM_Base_SetConfig+0x12c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d003      	beq.n	800bb92 <TIM_Base_SetConfig+0x9a>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4a26      	ldr	r2, [pc, #152]	; (800bc28 <TIM_Base_SetConfig+0x130>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d108      	bne.n	800bba4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a10      	ldr	r2, [pc, #64]	; (800bc0c <TIM_Base_SetConfig+0x114>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d00f      	beq.n	800bbf0 <TIM_Base_SetConfig+0xf8>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a12      	ldr	r2, [pc, #72]	; (800bc1c <TIM_Base_SetConfig+0x124>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d00b      	beq.n	800bbf0 <TIM_Base_SetConfig+0xf8>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a11      	ldr	r2, [pc, #68]	; (800bc20 <TIM_Base_SetConfig+0x128>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d007      	beq.n	800bbf0 <TIM_Base_SetConfig+0xf8>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a10      	ldr	r2, [pc, #64]	; (800bc24 <TIM_Base_SetConfig+0x12c>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d003      	beq.n	800bbf0 <TIM_Base_SetConfig+0xf8>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a0f      	ldr	r2, [pc, #60]	; (800bc28 <TIM_Base_SetConfig+0x130>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d103      	bne.n	800bbf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	691a      	ldr	r2, [r3, #16]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	615a      	str	r2, [r3, #20]
}
 800bbfe:	bf00      	nop
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	40010000 	.word	0x40010000
 800bc10:	40000400 	.word	0x40000400
 800bc14:	40000800 	.word	0x40000800
 800bc18:	40000c00 	.word	0x40000c00
 800bc1c:	40010400 	.word	0x40010400
 800bc20:	40014000 	.word	0x40014000
 800bc24:	40014400 	.word	0x40014400
 800bc28:	40014800 	.word	0x40014800

0800bc2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b087      	sub	sp, #28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a1b      	ldr	r3, [r3, #32]
 800bc3a:	f023 0201 	bic.w	r2, r3, #1
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	4b37      	ldr	r3, [pc, #220]	; (800bd34 <TIM_OC1_SetConfig+0x108>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f023 0303 	bic.w	r3, r3, #3
 800bc62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	f023 0302 	bic.w	r3, r3, #2
 800bc74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a2d      	ldr	r2, [pc, #180]	; (800bd38 <TIM_OC1_SetConfig+0x10c>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d00f      	beq.n	800bca8 <TIM_OC1_SetConfig+0x7c>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a2c      	ldr	r2, [pc, #176]	; (800bd3c <TIM_OC1_SetConfig+0x110>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d00b      	beq.n	800bca8 <TIM_OC1_SetConfig+0x7c>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a2b      	ldr	r2, [pc, #172]	; (800bd40 <TIM_OC1_SetConfig+0x114>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d007      	beq.n	800bca8 <TIM_OC1_SetConfig+0x7c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a2a      	ldr	r2, [pc, #168]	; (800bd44 <TIM_OC1_SetConfig+0x118>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d003      	beq.n	800bca8 <TIM_OC1_SetConfig+0x7c>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a29      	ldr	r2, [pc, #164]	; (800bd48 <TIM_OC1_SetConfig+0x11c>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d10c      	bne.n	800bcc2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f023 0308 	bic.w	r3, r3, #8
 800bcae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f023 0304 	bic.w	r3, r3, #4
 800bcc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a1c      	ldr	r2, [pc, #112]	; (800bd38 <TIM_OC1_SetConfig+0x10c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d00f      	beq.n	800bcea <TIM_OC1_SetConfig+0xbe>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a1b      	ldr	r2, [pc, #108]	; (800bd3c <TIM_OC1_SetConfig+0x110>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d00b      	beq.n	800bcea <TIM_OC1_SetConfig+0xbe>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a1a      	ldr	r2, [pc, #104]	; (800bd40 <TIM_OC1_SetConfig+0x114>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d007      	beq.n	800bcea <TIM_OC1_SetConfig+0xbe>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a19      	ldr	r2, [pc, #100]	; (800bd44 <TIM_OC1_SetConfig+0x118>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d003      	beq.n	800bcea <TIM_OC1_SetConfig+0xbe>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a18      	ldr	r2, [pc, #96]	; (800bd48 <TIM_OC1_SetConfig+0x11c>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d111      	bne.n	800bd0e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bcf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	697a      	ldr	r2, [r7, #20]
 800bd26:	621a      	str	r2, [r3, #32]
}
 800bd28:	bf00      	nop
 800bd2a:	371c      	adds	r7, #28
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	fffeff8f 	.word	0xfffeff8f
 800bd38:	40010000 	.word	0x40010000
 800bd3c:	40010400 	.word	0x40010400
 800bd40:	40014000 	.word	0x40014000
 800bd44:	40014400 	.word	0x40014400
 800bd48:	40014800 	.word	0x40014800

0800bd4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	f023 0210 	bic.w	r2, r3, #16
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4b34      	ldr	r3, [pc, #208]	; (800be48 <TIM_OC2_SetConfig+0xfc>)
 800bd78:	4013      	ands	r3, r2
 800bd7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	021b      	lsls	r3, r3, #8
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	f023 0320 	bic.w	r3, r3, #32
 800bd96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	697a      	ldr	r2, [r7, #20]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a29      	ldr	r2, [pc, #164]	; (800be4c <TIM_OC2_SetConfig+0x100>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d003      	beq.n	800bdb4 <TIM_OC2_SetConfig+0x68>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a28      	ldr	r2, [pc, #160]	; (800be50 <TIM_OC2_SetConfig+0x104>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d10d      	bne.n	800bdd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	011b      	lsls	r3, r3, #4
 800bdc2:	697a      	ldr	r2, [r7, #20]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a1e      	ldr	r2, [pc, #120]	; (800be4c <TIM_OC2_SetConfig+0x100>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d00f      	beq.n	800bdf8 <TIM_OC2_SetConfig+0xac>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a1d      	ldr	r2, [pc, #116]	; (800be50 <TIM_OC2_SetConfig+0x104>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d00b      	beq.n	800bdf8 <TIM_OC2_SetConfig+0xac>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a1c      	ldr	r2, [pc, #112]	; (800be54 <TIM_OC2_SetConfig+0x108>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d007      	beq.n	800bdf8 <TIM_OC2_SetConfig+0xac>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a1b      	ldr	r2, [pc, #108]	; (800be58 <TIM_OC2_SetConfig+0x10c>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d003      	beq.n	800bdf8 <TIM_OC2_SetConfig+0xac>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a1a      	ldr	r2, [pc, #104]	; (800be5c <TIM_OC2_SetConfig+0x110>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d113      	bne.n	800be20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bdfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	695b      	ldr	r3, [r3, #20]
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	693a      	ldr	r2, [r7, #16]
 800be10:	4313      	orrs	r3, r2
 800be12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	685a      	ldr	r2, [r3, #4]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	621a      	str	r2, [r3, #32]
}
 800be3a:	bf00      	nop
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	feff8fff 	.word	0xfeff8fff
 800be4c:	40010000 	.word	0x40010000
 800be50:	40010400 	.word	0x40010400
 800be54:	40014000 	.word	0x40014000
 800be58:	40014400 	.word	0x40014400
 800be5c:	40014800 	.word	0x40014800

0800be60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be60:	b480      	push	{r7}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a1b      	ldr	r3, [r3, #32]
 800be6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f023 0303 	bic.w	r3, r3, #3
 800be96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a27      	ldr	r2, [pc, #156]	; (800bf58 <TIM_OC3_SetConfig+0xf8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d003      	beq.n	800bec6 <TIM_OC3_SetConfig+0x66>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a26      	ldr	r2, [pc, #152]	; (800bf5c <TIM_OC3_SetConfig+0xfc>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d10d      	bne.n	800bee2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800becc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	697a      	ldr	r2, [r7, #20]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a1c      	ldr	r2, [pc, #112]	; (800bf58 <TIM_OC3_SetConfig+0xf8>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d00f      	beq.n	800bf0a <TIM_OC3_SetConfig+0xaa>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a1b      	ldr	r2, [pc, #108]	; (800bf5c <TIM_OC3_SetConfig+0xfc>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d00b      	beq.n	800bf0a <TIM_OC3_SetConfig+0xaa>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a1a      	ldr	r2, [pc, #104]	; (800bf60 <TIM_OC3_SetConfig+0x100>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d007      	beq.n	800bf0a <TIM_OC3_SetConfig+0xaa>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a19      	ldr	r2, [pc, #100]	; (800bf64 <TIM_OC3_SetConfig+0x104>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d003      	beq.n	800bf0a <TIM_OC3_SetConfig+0xaa>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a18      	ldr	r2, [pc, #96]	; (800bf68 <TIM_OC3_SetConfig+0x108>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d113      	bne.n	800bf32 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	011b      	lsls	r3, r3, #4
 800bf20:	693a      	ldr	r2, [r7, #16]
 800bf22:	4313      	orrs	r3, r2
 800bf24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	011b      	lsls	r3, r3, #4
 800bf2c:	693a      	ldr	r2, [r7, #16]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	697a      	ldr	r2, [r7, #20]
 800bf4a:	621a      	str	r2, [r3, #32]
}
 800bf4c:	bf00      	nop
 800bf4e:	371c      	adds	r7, #28
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	40010000 	.word	0x40010000
 800bf5c:	40010400 	.word	0x40010400
 800bf60:	40014000 	.word	0x40014000
 800bf64:	40014400 	.word	0x40014400
 800bf68:	40014800 	.word	0x40014800

0800bf6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	69db      	ldr	r3, [r3, #28]
 800bf92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	021b      	lsls	r3, r3, #8
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	031b      	lsls	r3, r3, #12
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a18      	ldr	r2, [pc, #96]	; (800c028 <TIM_OC4_SetConfig+0xbc>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d00f      	beq.n	800bfec <TIM_OC4_SetConfig+0x80>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a17      	ldr	r2, [pc, #92]	; (800c02c <TIM_OC4_SetConfig+0xc0>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d00b      	beq.n	800bfec <TIM_OC4_SetConfig+0x80>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a16      	ldr	r2, [pc, #88]	; (800c030 <TIM_OC4_SetConfig+0xc4>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d007      	beq.n	800bfec <TIM_OC4_SetConfig+0x80>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a15      	ldr	r2, [pc, #84]	; (800c034 <TIM_OC4_SetConfig+0xc8>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d003      	beq.n	800bfec <TIM_OC4_SetConfig+0x80>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a14      	ldr	r2, [pc, #80]	; (800c038 <TIM_OC4_SetConfig+0xcc>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d109      	bne.n	800c000 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	019b      	lsls	r3, r3, #6
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	621a      	str	r2, [r3, #32]
}
 800c01a:	bf00      	nop
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	40010000 	.word	0x40010000
 800c02c:	40010400 	.word	0x40010400
 800c030:	40014000 	.word	0x40014000
 800c034:	40014400 	.word	0x40014400
 800c038:	40014800 	.word	0x40014800

0800c03c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b087      	sub	sp, #28
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a1b      	ldr	r3, [r3, #32]
 800c04a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c06a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	4313      	orrs	r3, r2
 800c074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c07c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	041b      	lsls	r3, r3, #16
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	4313      	orrs	r3, r2
 800c088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a17      	ldr	r2, [pc, #92]	; (800c0ec <TIM_OC5_SetConfig+0xb0>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d00f      	beq.n	800c0b2 <TIM_OC5_SetConfig+0x76>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a16      	ldr	r2, [pc, #88]	; (800c0f0 <TIM_OC5_SetConfig+0xb4>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d00b      	beq.n	800c0b2 <TIM_OC5_SetConfig+0x76>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a15      	ldr	r2, [pc, #84]	; (800c0f4 <TIM_OC5_SetConfig+0xb8>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d007      	beq.n	800c0b2 <TIM_OC5_SetConfig+0x76>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a14      	ldr	r2, [pc, #80]	; (800c0f8 <TIM_OC5_SetConfig+0xbc>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d003      	beq.n	800c0b2 <TIM_OC5_SetConfig+0x76>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a13      	ldr	r2, [pc, #76]	; (800c0fc <TIM_OC5_SetConfig+0xc0>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d109      	bne.n	800c0c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c0b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	695b      	ldr	r3, [r3, #20]
 800c0be:	021b      	lsls	r3, r3, #8
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	621a      	str	r2, [r3, #32]
}
 800c0e0:	bf00      	nop
 800c0e2:	371c      	adds	r7, #28
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr
 800c0ec:	40010000 	.word	0x40010000
 800c0f0:	40010400 	.word	0x40010400
 800c0f4:	40014000 	.word	0x40014000
 800c0f8:	40014400 	.word	0x40014400
 800c0fc:	40014800 	.word	0x40014800

0800c100 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c100:	b480      	push	{r7}
 800c102:	b087      	sub	sp, #28
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c12e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	021b      	lsls	r3, r3, #8
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	4313      	orrs	r3, r2
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	051b      	lsls	r3, r3, #20
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a18      	ldr	r2, [pc, #96]	; (800c1b4 <TIM_OC6_SetConfig+0xb4>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00f      	beq.n	800c178 <TIM_OC6_SetConfig+0x78>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a17      	ldr	r2, [pc, #92]	; (800c1b8 <TIM_OC6_SetConfig+0xb8>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d00b      	beq.n	800c178 <TIM_OC6_SetConfig+0x78>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a16      	ldr	r2, [pc, #88]	; (800c1bc <TIM_OC6_SetConfig+0xbc>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d007      	beq.n	800c178 <TIM_OC6_SetConfig+0x78>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a15      	ldr	r2, [pc, #84]	; (800c1c0 <TIM_OC6_SetConfig+0xc0>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d003      	beq.n	800c178 <TIM_OC6_SetConfig+0x78>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a14      	ldr	r2, [pc, #80]	; (800c1c4 <TIM_OC6_SetConfig+0xc4>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d109      	bne.n	800c18c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c17e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	695b      	ldr	r3, [r3, #20]
 800c184:	029b      	lsls	r3, r3, #10
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4313      	orrs	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68fa      	ldr	r2, [r7, #12]
 800c196:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	621a      	str	r2, [r3, #32]
}
 800c1a6:	bf00      	nop
 800c1a8:	371c      	adds	r7, #28
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	40010000 	.word	0x40010000
 800c1b8:	40010400 	.word	0x40010400
 800c1bc:	40014000 	.word	0x40014000
 800c1c0:	40014400 	.word	0x40014400
 800c1c4:	40014800 	.word	0x40014800

0800c1c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b087      	sub	sp, #28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6a1b      	ldr	r3, [r3, #32]
 800c1de:	f023 0201 	bic.w	r2, r3, #1
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c1f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	011b      	lsls	r3, r3, #4
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f023 030a 	bic.w	r3, r3, #10
 800c204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	621a      	str	r2, [r3, #32]
}
 800c21a:	bf00      	nop
 800c21c:	371c      	adds	r7, #28
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr

0800c226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c226:	b480      	push	{r7}
 800c228:	b087      	sub	sp, #28
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	60f8      	str	r0, [r7, #12]
 800c22e:	60b9      	str	r1, [r7, #8]
 800c230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	f023 0210 	bic.w	r2, r3, #16
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	031b      	lsls	r3, r3, #12
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	4313      	orrs	r3, r2
 800c25a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	621a      	str	r2, [r3, #32]
}
 800c27a:	bf00      	nop
 800c27c:	371c      	adds	r7, #28
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
	...

0800c288 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4b09      	ldr	r3, [pc, #36]	; (800c2c0 <TIM_ITRx_SetConfig+0x38>)
 800c29c:	4013      	ands	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c2a0:	683a      	ldr	r2, [r7, #0]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	f043 0307 	orr.w	r3, r3, #7
 800c2aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	609a      	str	r2, [r3, #8]
}
 800c2b2:	bf00      	nop
 800c2b4:	3714      	adds	r7, #20
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	ffcfff8f 	.word	0xffcfff8f

0800c2c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
 800c2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	021a      	lsls	r2, r3, #8
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	431a      	orrs	r2, r3
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	609a      	str	r2, [r3, #8]
}
 800c2f8:	bf00      	nop
 800c2fa:	371c      	adds	r7, #28
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c314:	2b01      	cmp	r3, #1
 800c316:	d101      	bne.n	800c31c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c318:	2302      	movs	r3, #2
 800c31a:	e068      	b.n	800c3ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2202      	movs	r2, #2
 800c328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a2e      	ldr	r2, [pc, #184]	; (800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d004      	beq.n	800c350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a2d      	ldr	r2, [pc, #180]	; (800c400 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d108      	bne.n	800c362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	4313      	orrs	r3, r2
 800c360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a1e      	ldr	r2, [pc, #120]	; (800c3fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d01d      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c38e:	d018      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a1b      	ldr	r2, [pc, #108]	; (800c404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d013      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a1a      	ldr	r2, [pc, #104]	; (800c408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d00e      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a18      	ldr	r2, [pc, #96]	; (800c40c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d009      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a13      	ldr	r2, [pc, #76]	; (800c400 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d004      	beq.n	800c3c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a14      	ldr	r2, [pc, #80]	; (800c410 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d10c      	bne.n	800c3dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3714      	adds	r7, #20
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop
 800c3fc:	40010000 	.word	0x40010000
 800c400:	40010400 	.word	0x40010400
 800c404:	40000400 	.word	0x40000400
 800c408:	40000800 	.word	0x40000800
 800c40c:	40000c00 	.word	0x40000c00
 800c410:	40001800 	.word	0x40001800

0800c414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c41e:	2300      	movs	r3, #0
 800c420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d101      	bne.n	800c430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c42c:	2302      	movs	r3, #2
 800c42e:	e065      	b.n	800c4fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2201      	movs	r2, #1
 800c434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	4313      	orrs	r3, r2
 800c444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	4313      	orrs	r3, r2
 800c452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	4313      	orrs	r3, r2
 800c460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	4313      	orrs	r3, r2
 800c48a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c496:	4313      	orrs	r3, r2
 800c498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	699b      	ldr	r3, [r3, #24]
 800c4a4:	041b      	lsls	r3, r3, #16
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a16      	ldr	r2, [pc, #88]	; (800c508 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d004      	beq.n	800c4be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a14      	ldr	r2, [pc, #80]	; (800c50c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d115      	bne.n	800c4ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c8:	051b      	lsls	r3, r3, #20
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr
 800c508:	40010000 	.word	0x40010000
 800c50c:	40010400 	.word	0x40010400

0800c510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c518:	bf00      	nop
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c538:	b480      	push	{r7}
 800c53a:	b083      	sub	sp, #12
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e042      	b.n	800c5e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c564:	2b00      	cmp	r3, #0
 800c566:	d106      	bne.n	800c576 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7f4 fff1 	bl	8001558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2224      	movs	r2, #36	; 0x24
 800c57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f022 0201 	bic.w	r2, r2, #1
 800c58c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fb06 	bl	800cba0 <UART_SetConfig>
 800c594:	4603      	mov	r3, r0
 800c596:	2b01      	cmp	r3, #1
 800c598:	d101      	bne.n	800c59e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e022      	b.n	800c5e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d002      	beq.n	800c5ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f001 f85a 	bl	800d660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	685a      	ldr	r2, [r3, #4]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	689a      	ldr	r2, [r3, #8]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f042 0201 	orr.w	r2, r2, #1
 800c5da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f001 f8e1 	bl	800d7a4 <UART_CheckIdleState>
 800c5e2:	4603      	mov	r3, r0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3708      	adds	r7, #8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b088      	sub	sp, #32
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c60c:	69fa      	ldr	r2, [r7, #28]
 800c60e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c612:	4013      	ands	r3, r2
 800c614:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d118      	bne.n	800c64e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	f003 0320 	and.w	r3, r3, #32
 800c622:	2b00      	cmp	r3, #0
 800c624:	d013      	beq.n	800c64e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	f003 0320 	and.w	r3, r3, #32
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d104      	bne.n	800c63a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c636:	2b00      	cmp	r3, #0
 800c638:	d009      	beq.n	800c64e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f000 8282 	beq.w	800cb48 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	4798      	blx	r3
      }
      return;
 800c64c:	e27c      	b.n	800cb48 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 80ef 	beq.w	800c834 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	4b73      	ldr	r3, [pc, #460]	; (800c828 <HAL_UART_IRQHandler+0x23c>)
 800c65a:	4013      	ands	r3, r2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d105      	bne.n	800c66c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c660:	69ba      	ldr	r2, [r7, #24]
 800c662:	4b72      	ldr	r3, [pc, #456]	; (800c82c <HAL_UART_IRQHandler+0x240>)
 800c664:	4013      	ands	r3, r2
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 80e4 	beq.w	800c834 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	f003 0301 	and.w	r3, r3, #1
 800c672:	2b00      	cmp	r3, #0
 800c674:	d010      	beq.n	800c698 <HAL_UART_IRQHandler+0xac>
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2201      	movs	r2, #1
 800c686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c68e:	f043 0201 	orr.w	r2, r3, #1
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	f003 0302 	and.w	r3, r3, #2
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d010      	beq.n	800c6c4 <HAL_UART_IRQHandler+0xd8>
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00b      	beq.n	800c6c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6ba:	f043 0204 	orr.w	r2, r3, #4
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	f003 0304 	and.w	r3, r3, #4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d010      	beq.n	800c6f0 <HAL_UART_IRQHandler+0x104>
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00b      	beq.n	800c6f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2204      	movs	r2, #4
 800c6de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6e6:	f043 0202 	orr.w	r2, r3, #2
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	f003 0308 	and.w	r3, r3, #8
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d015      	beq.n	800c726 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	f003 0320 	and.w	r3, r3, #32
 800c700:	2b00      	cmp	r3, #0
 800c702:	d104      	bne.n	800c70e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	4b48      	ldr	r3, [pc, #288]	; (800c828 <HAL_UART_IRQHandler+0x23c>)
 800c708:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00b      	beq.n	800c726 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2208      	movs	r2, #8
 800c714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c71c:	f043 0208 	orr.w	r2, r3, #8
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d011      	beq.n	800c754 <HAL_UART_IRQHandler+0x168>
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00c      	beq.n	800c754 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c74a:	f043 0220 	orr.w	r2, r3, #32
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f000 81f6 	beq.w	800cb4c <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	f003 0320 	and.w	r3, r3, #32
 800c766:	2b00      	cmp	r3, #0
 800c768:	d011      	beq.n	800c78e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	f003 0320 	and.w	r3, r3, #32
 800c770:	2b00      	cmp	r3, #0
 800c772:	d104      	bne.n	800c77e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d007      	beq.n	800c78e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c782:	2b00      	cmp	r3, #0
 800c784:	d003      	beq.n	800c78e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c794:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a0:	2b40      	cmp	r3, #64	; 0x40
 800c7a2:	d004      	beq.n	800c7ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d031      	beq.n	800c812 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f001 f8c4 	bl	800d93c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7be:	2b40      	cmp	r3, #64	; 0x40
 800c7c0:	d123      	bne.n	800c80a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	689a      	ldr	r2, [r3, #8]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d013      	beq.n	800c802 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7de:	4a14      	ldr	r2, [pc, #80]	; (800c830 <HAL_UART_IRQHandler+0x244>)
 800c7e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7f6 f970 	bl	8002acc <HAL_DMA_Abort_IT>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d017      	beq.n	800c822 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c800:	e00f      	b.n	800c822 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f9b6 	bl	800cb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c808:	e00b      	b.n	800c822 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f9b2 	bl	800cb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c810:	e007      	b.n	800c822 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f9ae 	bl	800cb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c820:	e194      	b.n	800cb4c <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c822:	bf00      	nop
    return;
 800c824:	e192      	b.n	800cb4c <HAL_UART_IRQHandler+0x560>
 800c826:	bf00      	nop
 800c828:	10000001 	.word	0x10000001
 800c82c:	04000120 	.word	0x04000120
 800c830:	0800d9a1 	.word	0x0800d9a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	f040 810f 	bne.w	800ca5c <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	f003 0310 	and.w	r3, r3, #16
 800c844:	2b00      	cmp	r3, #0
 800c846:	f000 8109 	beq.w	800ca5c <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	f003 0310 	and.w	r3, r3, #16
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 8103 	beq.w	800ca5c <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2210      	movs	r2, #16
 800c85c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c868:	2b40      	cmp	r3, #64	; 0x40
 800c86a:	f040 80bb 	bne.w	800c9e4 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a96      	ldr	r2, [pc, #600]	; (800cad0 <HAL_UART_IRQHandler+0x4e4>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d059      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a94      	ldr	r2, [pc, #592]	; (800cad4 <HAL_UART_IRQHandler+0x4e8>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d053      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a92      	ldr	r2, [pc, #584]	; (800cad8 <HAL_UART_IRQHandler+0x4ec>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d04d      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a90      	ldr	r2, [pc, #576]	; (800cadc <HAL_UART_IRQHandler+0x4f0>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d047      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a8e      	ldr	r2, [pc, #568]	; (800cae0 <HAL_UART_IRQHandler+0x4f4>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d041      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a8c      	ldr	r2, [pc, #560]	; (800cae4 <HAL_UART_IRQHandler+0x4f8>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d03b      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a8a      	ldr	r2, [pc, #552]	; (800cae8 <HAL_UART_IRQHandler+0x4fc>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d035      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a88      	ldr	r2, [pc, #544]	; (800caec <HAL_UART_IRQHandler+0x500>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d02f      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a86      	ldr	r2, [pc, #536]	; (800caf0 <HAL_UART_IRQHandler+0x504>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d029      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a84      	ldr	r2, [pc, #528]	; (800caf4 <HAL_UART_IRQHandler+0x508>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d023      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a82      	ldr	r2, [pc, #520]	; (800caf8 <HAL_UART_IRQHandler+0x50c>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d01d      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a80      	ldr	r2, [pc, #512]	; (800cafc <HAL_UART_IRQHandler+0x510>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d017      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a7e      	ldr	r2, [pc, #504]	; (800cb00 <HAL_UART_IRQHandler+0x514>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d011      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a7c      	ldr	r2, [pc, #496]	; (800cb04 <HAL_UART_IRQHandler+0x518>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d00b      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a7a      	ldr	r2, [pc, #488]	; (800cb08 <HAL_UART_IRQHandler+0x51c>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d005      	beq.n	800c92e <HAL_UART_IRQHandler+0x342>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a78      	ldr	r2, [pc, #480]	; (800cb0c <HAL_UART_IRQHandler+0x520>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d105      	bne.n	800c93a <HAL_UART_IRQHandler+0x34e>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	b29b      	uxth	r3, r3
 800c938:	e004      	b.n	800c944 <HAL_UART_IRQHandler+0x358>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	b29b      	uxth	r3, r3
 800c944:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c946:	893b      	ldrh	r3, [r7, #8]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 8101 	beq.w	800cb50 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c954:	893a      	ldrh	r2, [r7, #8]
 800c956:	429a      	cmp	r2, r3
 800c958:	f080 80fa 	bcs.w	800cb50 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	893a      	ldrh	r2, [r7, #8]
 800c960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c96e:	d02b      	beq.n	800c9c8 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c97e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689a      	ldr	r2, [r3, #8]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f022 0201 	bic.w	r2, r2, #1
 800c98e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	689a      	ldr	r2, [r3, #8]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c99e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f022 0210 	bic.w	r2, r2, #16
 800c9bc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7f5 fd64 	bl	8002490 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	4619      	mov	r1, r3
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 f8d3 	bl	800cb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c9e2:	e0b5      	b.n	800cb50 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 80a8 	beq.w	800cb54 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800ca04:	897b      	ldrh	r3, [r7, #10]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 80a4 	beq.w	800cb54 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ca1a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6899      	ldr	r1, [r3, #8]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	4b3a      	ldr	r3, [pc, #232]	; (800cb10 <HAL_UART_IRQHandler+0x524>)
 800ca28:	400b      	ands	r3, r1
 800ca2a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2220      	movs	r2, #32
 800ca30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f022 0210 	bic.w	r2, r2, #16
 800ca4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca50:	897b      	ldrh	r3, [r7, #10]
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f897 	bl	800cb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca5a:	e07b      	b.n	800cb54 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00d      	beq.n	800ca82 <HAL_UART_IRQHandler+0x496>
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d008      	beq.n	800ca82 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 ffc0 	bl	800da00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca80:	e06b      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d012      	beq.n	800cab2 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d104      	bne.n	800caa0 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d008      	beq.n	800cab2 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d057      	beq.n	800cb58 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	4798      	blx	r3
    }
    return;
 800cab0:	e052      	b.n	800cb58 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cab2:	69fb      	ldr	r3, [r7, #28]
 800cab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d02b      	beq.n	800cb14 <HAL_UART_IRQHandler+0x528>
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d026      	beq.n	800cb14 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 ff80 	bl	800d9cc <UART_EndTransmit_IT>
    return;
 800cacc:	e045      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
 800cace:	bf00      	nop
 800cad0:	40020010 	.word	0x40020010
 800cad4:	40020028 	.word	0x40020028
 800cad8:	40020040 	.word	0x40020040
 800cadc:	40020058 	.word	0x40020058
 800cae0:	40020070 	.word	0x40020070
 800cae4:	40020088 	.word	0x40020088
 800cae8:	400200a0 	.word	0x400200a0
 800caec:	400200b8 	.word	0x400200b8
 800caf0:	40020410 	.word	0x40020410
 800caf4:	40020428 	.word	0x40020428
 800caf8:	40020440 	.word	0x40020440
 800cafc:	40020458 	.word	0x40020458
 800cb00:	40020470 	.word	0x40020470
 800cb04:	40020488 	.word	0x40020488
 800cb08:	400204a0 	.word	0x400204a0
 800cb0c:	400204b8 	.word	0x400204b8
 800cb10:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d008      	beq.n	800cb30 <HAL_UART_IRQHandler+0x544>
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d003      	beq.n	800cb30 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 ff7d 	bl	800da28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb2e:	e014      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00f      	beq.n	800cb5a <HAL_UART_IRQHandler+0x56e>
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	da0c      	bge.n	800cb5a <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 ff67 	bl	800da14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb46:	e008      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
      return;
 800cb48:	bf00      	nop
 800cb4a:	e006      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
    return;
 800cb4c:	bf00      	nop
 800cb4e:	e004      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
      return;
 800cb50:	bf00      	nop
 800cb52:	e002      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
      return;
 800cb54:	bf00      	nop
 800cb56:	e000      	b.n	800cb5a <HAL_UART_IRQHandler+0x56e>
    return;
 800cb58:	bf00      	nop
  }
}
 800cb5a:	3720      	adds	r7, #32
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb7c:	bf00      	nop
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cba0:	b5b0      	push	{r4, r5, r7, lr}
 800cba2:	b08e      	sub	sp, #56	; 0x38
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	689a      	ldr	r2, [r3, #8]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	431a      	orrs	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	695b      	ldr	r3, [r3, #20]
 800cbbc:	431a      	orrs	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	69db      	ldr	r3, [r3, #28]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	4bbf      	ldr	r3, [pc, #764]	; (800cecc <UART_SetConfig+0x32c>)
 800cbce:	4013      	ands	r3, r2
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	6812      	ldr	r2, [r2, #0]
 800cbd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbd6:	430b      	orrs	r3, r1
 800cbd8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68da      	ldr	r2, [r3, #12]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	430a      	orrs	r2, r1
 800cbee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	699b      	ldr	r3, [r3, #24]
 800cbf4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4ab5      	ldr	r2, [pc, #724]	; (800ced0 <UART_SetConfig+0x330>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d004      	beq.n	800cc0a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a1b      	ldr	r3, [r3, #32]
 800cc04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc06:	4313      	orrs	r3, r2
 800cc08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	689a      	ldr	r2, [r3, #8]
 800cc10:	4bb0      	ldr	r3, [pc, #704]	; (800ced4 <UART_SetConfig+0x334>)
 800cc12:	4013      	ands	r3, r2
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	6812      	ldr	r2, [r2, #0]
 800cc18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cc1a:	430b      	orrs	r3, r1
 800cc1c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	f023 010f 	bic.w	r1, r3, #15
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	430a      	orrs	r2, r1
 800cc32:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4aa7      	ldr	r2, [pc, #668]	; (800ced8 <UART_SetConfig+0x338>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d176      	bne.n	800cd2c <UART_SetConfig+0x18c>
 800cc3e:	4ba7      	ldr	r3, [pc, #668]	; (800cedc <UART_SetConfig+0x33c>)
 800cc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc46:	2b28      	cmp	r3, #40	; 0x28
 800cc48:	d86c      	bhi.n	800cd24 <UART_SetConfig+0x184>
 800cc4a:	a201      	add	r2, pc, #4	; (adr r2, 800cc50 <UART_SetConfig+0xb0>)
 800cc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc50:	0800ccf5 	.word	0x0800ccf5
 800cc54:	0800cd25 	.word	0x0800cd25
 800cc58:	0800cd25 	.word	0x0800cd25
 800cc5c:	0800cd25 	.word	0x0800cd25
 800cc60:	0800cd25 	.word	0x0800cd25
 800cc64:	0800cd25 	.word	0x0800cd25
 800cc68:	0800cd25 	.word	0x0800cd25
 800cc6c:	0800cd25 	.word	0x0800cd25
 800cc70:	0800ccfd 	.word	0x0800ccfd
 800cc74:	0800cd25 	.word	0x0800cd25
 800cc78:	0800cd25 	.word	0x0800cd25
 800cc7c:	0800cd25 	.word	0x0800cd25
 800cc80:	0800cd25 	.word	0x0800cd25
 800cc84:	0800cd25 	.word	0x0800cd25
 800cc88:	0800cd25 	.word	0x0800cd25
 800cc8c:	0800cd25 	.word	0x0800cd25
 800cc90:	0800cd05 	.word	0x0800cd05
 800cc94:	0800cd25 	.word	0x0800cd25
 800cc98:	0800cd25 	.word	0x0800cd25
 800cc9c:	0800cd25 	.word	0x0800cd25
 800cca0:	0800cd25 	.word	0x0800cd25
 800cca4:	0800cd25 	.word	0x0800cd25
 800cca8:	0800cd25 	.word	0x0800cd25
 800ccac:	0800cd25 	.word	0x0800cd25
 800ccb0:	0800cd0d 	.word	0x0800cd0d
 800ccb4:	0800cd25 	.word	0x0800cd25
 800ccb8:	0800cd25 	.word	0x0800cd25
 800ccbc:	0800cd25 	.word	0x0800cd25
 800ccc0:	0800cd25 	.word	0x0800cd25
 800ccc4:	0800cd25 	.word	0x0800cd25
 800ccc8:	0800cd25 	.word	0x0800cd25
 800cccc:	0800cd25 	.word	0x0800cd25
 800ccd0:	0800cd15 	.word	0x0800cd15
 800ccd4:	0800cd25 	.word	0x0800cd25
 800ccd8:	0800cd25 	.word	0x0800cd25
 800ccdc:	0800cd25 	.word	0x0800cd25
 800cce0:	0800cd25 	.word	0x0800cd25
 800cce4:	0800cd25 	.word	0x0800cd25
 800cce8:	0800cd25 	.word	0x0800cd25
 800ccec:	0800cd25 	.word	0x0800cd25
 800ccf0:	0800cd1d 	.word	0x0800cd1d
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfa:	e222      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ccfc:	2304      	movs	r3, #4
 800ccfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd02:	e21e      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd04:	2308      	movs	r3, #8
 800cd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd0a:	e21a      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd0c:	2310      	movs	r3, #16
 800cd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd12:	e216      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd14:	2320      	movs	r3, #32
 800cd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1a:	e212      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd22:	e20e      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd24:	2380      	movs	r3, #128	; 0x80
 800cd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2a:	e20a      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a6b      	ldr	r2, [pc, #428]	; (800cee0 <UART_SetConfig+0x340>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d130      	bne.n	800cd98 <UART_SetConfig+0x1f8>
 800cd36:	4b69      	ldr	r3, [pc, #420]	; (800cedc <UART_SetConfig+0x33c>)
 800cd38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd3a:	f003 0307 	and.w	r3, r3, #7
 800cd3e:	2b05      	cmp	r3, #5
 800cd40:	d826      	bhi.n	800cd90 <UART_SetConfig+0x1f0>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <UART_SetConfig+0x1a8>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cd61 	.word	0x0800cd61
 800cd4c:	0800cd69 	.word	0x0800cd69
 800cd50:	0800cd71 	.word	0x0800cd71
 800cd54:	0800cd79 	.word	0x0800cd79
 800cd58:	0800cd81 	.word	0x0800cd81
 800cd5c:	0800cd89 	.word	0x0800cd89
 800cd60:	2300      	movs	r3, #0
 800cd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd66:	e1ec      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd68:	2304      	movs	r3, #4
 800cd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6e:	e1e8      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd70:	2308      	movs	r3, #8
 800cd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd76:	e1e4      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd78:	2310      	movs	r3, #16
 800cd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7e:	e1e0      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd80:	2320      	movs	r3, #32
 800cd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd86:	e1dc      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd88:	2340      	movs	r3, #64	; 0x40
 800cd8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd8e:	e1d8      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd90:	2380      	movs	r3, #128	; 0x80
 800cd92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd96:	e1d4      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4a51      	ldr	r2, [pc, #324]	; (800cee4 <UART_SetConfig+0x344>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d130      	bne.n	800ce04 <UART_SetConfig+0x264>
 800cda2:	4b4e      	ldr	r3, [pc, #312]	; (800cedc <UART_SetConfig+0x33c>)
 800cda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda6:	f003 0307 	and.w	r3, r3, #7
 800cdaa:	2b05      	cmp	r3, #5
 800cdac:	d826      	bhi.n	800cdfc <UART_SetConfig+0x25c>
 800cdae:	a201      	add	r2, pc, #4	; (adr r2, 800cdb4 <UART_SetConfig+0x214>)
 800cdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb4:	0800cdcd 	.word	0x0800cdcd
 800cdb8:	0800cdd5 	.word	0x0800cdd5
 800cdbc:	0800cddd 	.word	0x0800cddd
 800cdc0:	0800cde5 	.word	0x0800cde5
 800cdc4:	0800cded 	.word	0x0800cded
 800cdc8:	0800cdf5 	.word	0x0800cdf5
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdd2:	e1b6      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cdd4:	2304      	movs	r3, #4
 800cdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdda:	e1b2      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cddc:	2308      	movs	r3, #8
 800cdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cde2:	e1ae      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cde4:	2310      	movs	r3, #16
 800cde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdea:	e1aa      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cdec:	2320      	movs	r3, #32
 800cdee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdf2:	e1a6      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cdf4:	2340      	movs	r3, #64	; 0x40
 800cdf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdfa:	e1a2      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cdfc:	2380      	movs	r3, #128	; 0x80
 800cdfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce02:	e19e      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a37      	ldr	r2, [pc, #220]	; (800cee8 <UART_SetConfig+0x348>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d130      	bne.n	800ce70 <UART_SetConfig+0x2d0>
 800ce0e:	4b33      	ldr	r3, [pc, #204]	; (800cedc <UART_SetConfig+0x33c>)
 800ce10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce12:	f003 0307 	and.w	r3, r3, #7
 800ce16:	2b05      	cmp	r3, #5
 800ce18:	d826      	bhi.n	800ce68 <UART_SetConfig+0x2c8>
 800ce1a:	a201      	add	r2, pc, #4	; (adr r2, 800ce20 <UART_SetConfig+0x280>)
 800ce1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce20:	0800ce39 	.word	0x0800ce39
 800ce24:	0800ce41 	.word	0x0800ce41
 800ce28:	0800ce49 	.word	0x0800ce49
 800ce2c:	0800ce51 	.word	0x0800ce51
 800ce30:	0800ce59 	.word	0x0800ce59
 800ce34:	0800ce61 	.word	0x0800ce61
 800ce38:	2300      	movs	r3, #0
 800ce3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce3e:	e180      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce40:	2304      	movs	r3, #4
 800ce42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce46:	e17c      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce48:	2308      	movs	r3, #8
 800ce4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce4e:	e178      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce50:	2310      	movs	r3, #16
 800ce52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce56:	e174      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce58:	2320      	movs	r3, #32
 800ce5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce5e:	e170      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce60:	2340      	movs	r3, #64	; 0x40
 800ce62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce66:	e16c      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce68:	2380      	movs	r3, #128	; 0x80
 800ce6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce6e:	e168      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a1d      	ldr	r2, [pc, #116]	; (800ceec <UART_SetConfig+0x34c>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d142      	bne.n	800cf00 <UART_SetConfig+0x360>
 800ce7a:	4b18      	ldr	r3, [pc, #96]	; (800cedc <UART_SetConfig+0x33c>)
 800ce7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7e:	f003 0307 	and.w	r3, r3, #7
 800ce82:	2b05      	cmp	r3, #5
 800ce84:	d838      	bhi.n	800cef8 <UART_SetConfig+0x358>
 800ce86:	a201      	add	r2, pc, #4	; (adr r2, 800ce8c <UART_SetConfig+0x2ec>)
 800ce88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce8c:	0800cea5 	.word	0x0800cea5
 800ce90:	0800cead 	.word	0x0800cead
 800ce94:	0800ceb5 	.word	0x0800ceb5
 800ce98:	0800cebd 	.word	0x0800cebd
 800ce9c:	0800cec5 	.word	0x0800cec5
 800cea0:	0800cef1 	.word	0x0800cef1
 800cea4:	2300      	movs	r3, #0
 800cea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceaa:	e14a      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ceac:	2304      	movs	r3, #4
 800ceae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb2:	e146      	b.n	800d142 <UART_SetConfig+0x5a2>
 800ceb4:	2308      	movs	r3, #8
 800ceb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceba:	e142      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cebc:	2310      	movs	r3, #16
 800cebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cec2:	e13e      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cec4:	2320      	movs	r3, #32
 800cec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceca:	e13a      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cecc:	cfff69f3 	.word	0xcfff69f3
 800ced0:	58000c00 	.word	0x58000c00
 800ced4:	11fff4ff 	.word	0x11fff4ff
 800ced8:	40011000 	.word	0x40011000
 800cedc:	58024400 	.word	0x58024400
 800cee0:	40004400 	.word	0x40004400
 800cee4:	40004800 	.word	0x40004800
 800cee8:	40004c00 	.word	0x40004c00
 800ceec:	40005000 	.word	0x40005000
 800cef0:	2340      	movs	r3, #64	; 0x40
 800cef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef6:	e124      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cef8:	2380      	movs	r3, #128	; 0x80
 800cefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cefe:	e120      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4acc      	ldr	r2, [pc, #816]	; (800d238 <UART_SetConfig+0x698>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d176      	bne.n	800cff8 <UART_SetConfig+0x458>
 800cf0a:	4bcc      	ldr	r3, [pc, #816]	; (800d23c <UART_SetConfig+0x69c>)
 800cf0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf12:	2b28      	cmp	r3, #40	; 0x28
 800cf14:	d86c      	bhi.n	800cff0 <UART_SetConfig+0x450>
 800cf16:	a201      	add	r2, pc, #4	; (adr r2, 800cf1c <UART_SetConfig+0x37c>)
 800cf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1c:	0800cfc1 	.word	0x0800cfc1
 800cf20:	0800cff1 	.word	0x0800cff1
 800cf24:	0800cff1 	.word	0x0800cff1
 800cf28:	0800cff1 	.word	0x0800cff1
 800cf2c:	0800cff1 	.word	0x0800cff1
 800cf30:	0800cff1 	.word	0x0800cff1
 800cf34:	0800cff1 	.word	0x0800cff1
 800cf38:	0800cff1 	.word	0x0800cff1
 800cf3c:	0800cfc9 	.word	0x0800cfc9
 800cf40:	0800cff1 	.word	0x0800cff1
 800cf44:	0800cff1 	.word	0x0800cff1
 800cf48:	0800cff1 	.word	0x0800cff1
 800cf4c:	0800cff1 	.word	0x0800cff1
 800cf50:	0800cff1 	.word	0x0800cff1
 800cf54:	0800cff1 	.word	0x0800cff1
 800cf58:	0800cff1 	.word	0x0800cff1
 800cf5c:	0800cfd1 	.word	0x0800cfd1
 800cf60:	0800cff1 	.word	0x0800cff1
 800cf64:	0800cff1 	.word	0x0800cff1
 800cf68:	0800cff1 	.word	0x0800cff1
 800cf6c:	0800cff1 	.word	0x0800cff1
 800cf70:	0800cff1 	.word	0x0800cff1
 800cf74:	0800cff1 	.word	0x0800cff1
 800cf78:	0800cff1 	.word	0x0800cff1
 800cf7c:	0800cfd9 	.word	0x0800cfd9
 800cf80:	0800cff1 	.word	0x0800cff1
 800cf84:	0800cff1 	.word	0x0800cff1
 800cf88:	0800cff1 	.word	0x0800cff1
 800cf8c:	0800cff1 	.word	0x0800cff1
 800cf90:	0800cff1 	.word	0x0800cff1
 800cf94:	0800cff1 	.word	0x0800cff1
 800cf98:	0800cff1 	.word	0x0800cff1
 800cf9c:	0800cfe1 	.word	0x0800cfe1
 800cfa0:	0800cff1 	.word	0x0800cff1
 800cfa4:	0800cff1 	.word	0x0800cff1
 800cfa8:	0800cff1 	.word	0x0800cff1
 800cfac:	0800cff1 	.word	0x0800cff1
 800cfb0:	0800cff1 	.word	0x0800cff1
 800cfb4:	0800cff1 	.word	0x0800cff1
 800cfb8:	0800cff1 	.word	0x0800cff1
 800cfbc:	0800cfe9 	.word	0x0800cfe9
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfc6:	e0bc      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cfc8:	2304      	movs	r3, #4
 800cfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfce:	e0b8      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfd6:	e0b4      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cfd8:	2310      	movs	r3, #16
 800cfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfde:	e0b0      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfe6:	e0ac      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cfe8:	2340      	movs	r3, #64	; 0x40
 800cfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfee:	e0a8      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cff0:	2380      	movs	r3, #128	; 0x80
 800cff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff6:	e0a4      	b.n	800d142 <UART_SetConfig+0x5a2>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a90      	ldr	r2, [pc, #576]	; (800d240 <UART_SetConfig+0x6a0>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d130      	bne.n	800d064 <UART_SetConfig+0x4c4>
 800d002:	4b8e      	ldr	r3, [pc, #568]	; (800d23c <UART_SetConfig+0x69c>)
 800d004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d006:	f003 0307 	and.w	r3, r3, #7
 800d00a:	2b05      	cmp	r3, #5
 800d00c:	d826      	bhi.n	800d05c <UART_SetConfig+0x4bc>
 800d00e:	a201      	add	r2, pc, #4	; (adr r2, 800d014 <UART_SetConfig+0x474>)
 800d010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d014:	0800d02d 	.word	0x0800d02d
 800d018:	0800d035 	.word	0x0800d035
 800d01c:	0800d03d 	.word	0x0800d03d
 800d020:	0800d045 	.word	0x0800d045
 800d024:	0800d04d 	.word	0x0800d04d
 800d028:	0800d055 	.word	0x0800d055
 800d02c:	2300      	movs	r3, #0
 800d02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d032:	e086      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d034:	2304      	movs	r3, #4
 800d036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d03a:	e082      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d03c:	2308      	movs	r3, #8
 800d03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d042:	e07e      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d044:	2310      	movs	r3, #16
 800d046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d04a:	e07a      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d04c:	2320      	movs	r3, #32
 800d04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d052:	e076      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d054:	2340      	movs	r3, #64	; 0x40
 800d056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d05a:	e072      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d05c:	2380      	movs	r3, #128	; 0x80
 800d05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d062:	e06e      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a76      	ldr	r2, [pc, #472]	; (800d244 <UART_SetConfig+0x6a4>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d130      	bne.n	800d0d0 <UART_SetConfig+0x530>
 800d06e:	4b73      	ldr	r3, [pc, #460]	; (800d23c <UART_SetConfig+0x69c>)
 800d070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	2b05      	cmp	r3, #5
 800d078:	d826      	bhi.n	800d0c8 <UART_SetConfig+0x528>
 800d07a:	a201      	add	r2, pc, #4	; (adr r2, 800d080 <UART_SetConfig+0x4e0>)
 800d07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d080:	0800d099 	.word	0x0800d099
 800d084:	0800d0a1 	.word	0x0800d0a1
 800d088:	0800d0a9 	.word	0x0800d0a9
 800d08c:	0800d0b1 	.word	0x0800d0b1
 800d090:	0800d0b9 	.word	0x0800d0b9
 800d094:	0800d0c1 	.word	0x0800d0c1
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d09e:	e050      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d0a0:	2304      	movs	r3, #4
 800d0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0a6:	e04c      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d0a8:	2308      	movs	r3, #8
 800d0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ae:	e048      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d0b0:	2310      	movs	r3, #16
 800d0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0b6:	e044      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d0b8:	2320      	movs	r3, #32
 800d0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0be:	e040      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d0c0:	2340      	movs	r3, #64	; 0x40
 800d0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0c6:	e03c      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d0c8:	2380      	movs	r3, #128	; 0x80
 800d0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d0ce:	e038      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a5c      	ldr	r2, [pc, #368]	; (800d248 <UART_SetConfig+0x6a8>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d130      	bne.n	800d13c <UART_SetConfig+0x59c>
 800d0da:	4b58      	ldr	r3, [pc, #352]	; (800d23c <UART_SetConfig+0x69c>)
 800d0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	2b05      	cmp	r3, #5
 800d0e4:	d826      	bhi.n	800d134 <UART_SetConfig+0x594>
 800d0e6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ec <UART_SetConfig+0x54c>)
 800d0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ec:	0800d105 	.word	0x0800d105
 800d0f0:	0800d10d 	.word	0x0800d10d
 800d0f4:	0800d115 	.word	0x0800d115
 800d0f8:	0800d11d 	.word	0x0800d11d
 800d0fc:	0800d125 	.word	0x0800d125
 800d100:	0800d12d 	.word	0x0800d12d
 800d104:	2302      	movs	r3, #2
 800d106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d10a:	e01a      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d10c:	2304      	movs	r3, #4
 800d10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d112:	e016      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d114:	2308      	movs	r3, #8
 800d116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d11a:	e012      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d11c:	2310      	movs	r3, #16
 800d11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d122:	e00e      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d124:	2320      	movs	r3, #32
 800d126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d12a:	e00a      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d12c:	2340      	movs	r3, #64	; 0x40
 800d12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d132:	e006      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d134:	2380      	movs	r3, #128	; 0x80
 800d136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d13a:	e002      	b.n	800d142 <UART_SetConfig+0x5a2>
 800d13c:	2380      	movs	r3, #128	; 0x80
 800d13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a40      	ldr	r2, [pc, #256]	; (800d248 <UART_SetConfig+0x6a8>)
 800d148:	4293      	cmp	r3, r2
 800d14a:	f040 80ef 	bne.w	800d32c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d14e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d152:	2b20      	cmp	r3, #32
 800d154:	dc46      	bgt.n	800d1e4 <UART_SetConfig+0x644>
 800d156:	2b02      	cmp	r3, #2
 800d158:	f2c0 8081 	blt.w	800d25e <UART_SetConfig+0x6be>
 800d15c:	3b02      	subs	r3, #2
 800d15e:	2b1e      	cmp	r3, #30
 800d160:	d87d      	bhi.n	800d25e <UART_SetConfig+0x6be>
 800d162:	a201      	add	r2, pc, #4	; (adr r2, 800d168 <UART_SetConfig+0x5c8>)
 800d164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d168:	0800d1eb 	.word	0x0800d1eb
 800d16c:	0800d25f 	.word	0x0800d25f
 800d170:	0800d1f3 	.word	0x0800d1f3
 800d174:	0800d25f 	.word	0x0800d25f
 800d178:	0800d25f 	.word	0x0800d25f
 800d17c:	0800d25f 	.word	0x0800d25f
 800d180:	0800d203 	.word	0x0800d203
 800d184:	0800d25f 	.word	0x0800d25f
 800d188:	0800d25f 	.word	0x0800d25f
 800d18c:	0800d25f 	.word	0x0800d25f
 800d190:	0800d25f 	.word	0x0800d25f
 800d194:	0800d25f 	.word	0x0800d25f
 800d198:	0800d25f 	.word	0x0800d25f
 800d19c:	0800d25f 	.word	0x0800d25f
 800d1a0:	0800d213 	.word	0x0800d213
 800d1a4:	0800d25f 	.word	0x0800d25f
 800d1a8:	0800d25f 	.word	0x0800d25f
 800d1ac:	0800d25f 	.word	0x0800d25f
 800d1b0:	0800d25f 	.word	0x0800d25f
 800d1b4:	0800d25f 	.word	0x0800d25f
 800d1b8:	0800d25f 	.word	0x0800d25f
 800d1bc:	0800d25f 	.word	0x0800d25f
 800d1c0:	0800d25f 	.word	0x0800d25f
 800d1c4:	0800d25f 	.word	0x0800d25f
 800d1c8:	0800d25f 	.word	0x0800d25f
 800d1cc:	0800d25f 	.word	0x0800d25f
 800d1d0:	0800d25f 	.word	0x0800d25f
 800d1d4:	0800d25f 	.word	0x0800d25f
 800d1d8:	0800d25f 	.word	0x0800d25f
 800d1dc:	0800d25f 	.word	0x0800d25f
 800d1e0:	0800d251 	.word	0x0800d251
 800d1e4:	2b40      	cmp	r3, #64	; 0x40
 800d1e6:	d036      	beq.n	800d256 <UART_SetConfig+0x6b6>
 800d1e8:	e039      	b.n	800d25e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d1ea:	f7fb fd51 	bl	8008c90 <HAL_RCCEx_GetD3PCLK1Freq>
 800d1ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1f0:	e03b      	b.n	800d26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1f2:	f107 0314 	add.w	r3, r7, #20
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fb fd60 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d200:	e033      	b.n	800d26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d202:	f107 0308 	add.w	r3, r7, #8
 800d206:	4618      	mov	r0, r3
 800d208:	f7fb feac 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d210:	e02b      	b.n	800d26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d212:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <UART_SetConfig+0x69c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0320 	and.w	r3, r3, #32
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d009      	beq.n	800d232 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d21e:	4b07      	ldr	r3, [pc, #28]	; (800d23c <UART_SetConfig+0x69c>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	08db      	lsrs	r3, r3, #3
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	4a08      	ldr	r2, [pc, #32]	; (800d24c <UART_SetConfig+0x6ac>)
 800d22a:	fa22 f303 	lsr.w	r3, r2, r3
 800d22e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d230:	e01b      	b.n	800d26a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d232:	4b06      	ldr	r3, [pc, #24]	; (800d24c <UART_SetConfig+0x6ac>)
 800d234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d236:	e018      	b.n	800d26a <UART_SetConfig+0x6ca>
 800d238:	40011400 	.word	0x40011400
 800d23c:	58024400 	.word	0x58024400
 800d240:	40007800 	.word	0x40007800
 800d244:	40007c00 	.word	0x40007c00
 800d248:	58000c00 	.word	0x58000c00
 800d24c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d250:	4bc4      	ldr	r3, [pc, #784]	; (800d564 <UART_SetConfig+0x9c4>)
 800d252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d254:	e009      	b.n	800d26a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d25c:	e005      	b.n	800d26a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d25e:	2300      	movs	r3, #0
 800d260:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d262:	2301      	movs	r3, #1
 800d264:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f000 81da 	beq.w	800d626 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d276:	4abc      	ldr	r2, [pc, #752]	; (800d568 <UART_SetConfig+0x9c8>)
 800d278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d27c:	461a      	mov	r2, r3
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	fbb3 f3f2 	udiv	r3, r3, r2
 800d284:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	4613      	mov	r3, r2
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	4413      	add	r3, r2
 800d290:	6a3a      	ldr	r2, [r7, #32]
 800d292:	429a      	cmp	r2, r3
 800d294:	d305      	bcc.n	800d2a2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d29c:	6a3a      	ldr	r2, [r7, #32]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d903      	bls.n	800d2aa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d2a8:	e1bd      	b.n	800d626 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f04f 0100 	mov.w	r1, #0
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b6:	4aac      	ldr	r2, [pc, #688]	; (800d568 <UART_SetConfig+0x9c8>)
 800d2b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	f04f 0300 	mov.w	r3, #0
 800d2c2:	f7f3 f809 	bl	80002d8 <__aeabi_uldivmod>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	f04f 0200 	mov.w	r2, #0
 800d2d2:	f04f 0300 	mov.w	r3, #0
 800d2d6:	020b      	lsls	r3, r1, #8
 800d2d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d2dc:	0202      	lsls	r2, r0, #8
 800d2de:	6879      	ldr	r1, [r7, #4]
 800d2e0:	6849      	ldr	r1, [r1, #4]
 800d2e2:	0849      	lsrs	r1, r1, #1
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	f04f 0100 	mov.w	r1, #0
 800d2ea:	1814      	adds	r4, r2, r0
 800d2ec:	eb43 0501 	adc.w	r5, r3, r1
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	f04f 0300 	mov.w	r3, #0
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	f7f2 ffeb 	bl	80002d8 <__aeabi_uldivmod>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4613      	mov	r3, r2
 800d308:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d30c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d310:	d308      	bcc.n	800d324 <UART_SetConfig+0x784>
 800d312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d318:	d204      	bcs.n	800d324 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d320:	60da      	str	r2, [r3, #12]
 800d322:	e180      	b.n	800d626 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d32a:	e17c      	b.n	800d626 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	69db      	ldr	r3, [r3, #28]
 800d330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d334:	f040 80bf 	bne.w	800d4b6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d338:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d33c:	2b20      	cmp	r3, #32
 800d33e:	dc49      	bgt.n	800d3d4 <UART_SetConfig+0x834>
 800d340:	2b00      	cmp	r3, #0
 800d342:	db7c      	blt.n	800d43e <UART_SetConfig+0x89e>
 800d344:	2b20      	cmp	r3, #32
 800d346:	d87a      	bhi.n	800d43e <UART_SetConfig+0x89e>
 800d348:	a201      	add	r2, pc, #4	; (adr r2, 800d350 <UART_SetConfig+0x7b0>)
 800d34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34e:	bf00      	nop
 800d350:	0800d3db 	.word	0x0800d3db
 800d354:	0800d3e3 	.word	0x0800d3e3
 800d358:	0800d43f 	.word	0x0800d43f
 800d35c:	0800d43f 	.word	0x0800d43f
 800d360:	0800d3eb 	.word	0x0800d3eb
 800d364:	0800d43f 	.word	0x0800d43f
 800d368:	0800d43f 	.word	0x0800d43f
 800d36c:	0800d43f 	.word	0x0800d43f
 800d370:	0800d3fb 	.word	0x0800d3fb
 800d374:	0800d43f 	.word	0x0800d43f
 800d378:	0800d43f 	.word	0x0800d43f
 800d37c:	0800d43f 	.word	0x0800d43f
 800d380:	0800d43f 	.word	0x0800d43f
 800d384:	0800d43f 	.word	0x0800d43f
 800d388:	0800d43f 	.word	0x0800d43f
 800d38c:	0800d43f 	.word	0x0800d43f
 800d390:	0800d40b 	.word	0x0800d40b
 800d394:	0800d43f 	.word	0x0800d43f
 800d398:	0800d43f 	.word	0x0800d43f
 800d39c:	0800d43f 	.word	0x0800d43f
 800d3a0:	0800d43f 	.word	0x0800d43f
 800d3a4:	0800d43f 	.word	0x0800d43f
 800d3a8:	0800d43f 	.word	0x0800d43f
 800d3ac:	0800d43f 	.word	0x0800d43f
 800d3b0:	0800d43f 	.word	0x0800d43f
 800d3b4:	0800d43f 	.word	0x0800d43f
 800d3b8:	0800d43f 	.word	0x0800d43f
 800d3bc:	0800d43f 	.word	0x0800d43f
 800d3c0:	0800d43f 	.word	0x0800d43f
 800d3c4:	0800d43f 	.word	0x0800d43f
 800d3c8:	0800d43f 	.word	0x0800d43f
 800d3cc:	0800d43f 	.word	0x0800d43f
 800d3d0:	0800d431 	.word	0x0800d431
 800d3d4:	2b40      	cmp	r3, #64	; 0x40
 800d3d6:	d02e      	beq.n	800d436 <UART_SetConfig+0x896>
 800d3d8:	e031      	b.n	800d43e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3da:	f7fa f81b 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 800d3de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d3e0:	e033      	b.n	800d44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3e2:	f7fa f82d 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 800d3e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d3e8:	e02f      	b.n	800d44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ea:	f107 0314 	add.w	r3, r7, #20
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fb fc64 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3f8:	e027      	b.n	800d44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3fa:	f107 0308 	add.w	r3, r7, #8
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fb fdb0 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d408:	e01f      	b.n	800d44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d40a:	4b58      	ldr	r3, [pc, #352]	; (800d56c <UART_SetConfig+0x9cc>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f003 0320 	and.w	r3, r3, #32
 800d412:	2b00      	cmp	r3, #0
 800d414:	d009      	beq.n	800d42a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d416:	4b55      	ldr	r3, [pc, #340]	; (800d56c <UART_SetConfig+0x9cc>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	08db      	lsrs	r3, r3, #3
 800d41c:	f003 0303 	and.w	r3, r3, #3
 800d420:	4a53      	ldr	r2, [pc, #332]	; (800d570 <UART_SetConfig+0x9d0>)
 800d422:	fa22 f303 	lsr.w	r3, r2, r3
 800d426:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d428:	e00f      	b.n	800d44a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d42a:	4b51      	ldr	r3, [pc, #324]	; (800d570 <UART_SetConfig+0x9d0>)
 800d42c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d42e:	e00c      	b.n	800d44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d430:	4b4c      	ldr	r3, [pc, #304]	; (800d564 <UART_SetConfig+0x9c4>)
 800d432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d434:	e009      	b.n	800d44a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d43a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d43c:	e005      	b.n	800d44a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d43e:	2300      	movs	r3, #0
 800d440:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 80ea 	beq.w	800d626 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	4a44      	ldr	r2, [pc, #272]	; (800d568 <UART_SetConfig+0x9c8>)
 800d458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d45c:	461a      	mov	r2, r3
 800d45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d460:	fbb3 f3f2 	udiv	r3, r3, r2
 800d464:	005a      	lsls	r2, r3, #1
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	085b      	lsrs	r3, r3, #1
 800d46c:	441a      	add	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	fbb2 f3f3 	udiv	r3, r2, r3
 800d476:	b29b      	uxth	r3, r3
 800d478:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47c:	2b0f      	cmp	r3, #15
 800d47e:	d916      	bls.n	800d4ae <UART_SetConfig+0x90e>
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d486:	d212      	bcs.n	800d4ae <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	f023 030f 	bic.w	r3, r3, #15
 800d490:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	085b      	lsrs	r3, r3, #1
 800d496:	b29b      	uxth	r3, r3
 800d498:	f003 0307 	and.w	r3, r3, #7
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4aa:	60da      	str	r2, [r3, #12]
 800d4ac:	e0bb      	b.n	800d626 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d4b4:	e0b7      	b.n	800d626 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d4b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d4ba:	2b20      	cmp	r3, #32
 800d4bc:	dc4a      	bgt.n	800d554 <UART_SetConfig+0x9b4>
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f2c0 8086 	blt.w	800d5d0 <UART_SetConfig+0xa30>
 800d4c4:	2b20      	cmp	r3, #32
 800d4c6:	f200 8083 	bhi.w	800d5d0 <UART_SetConfig+0xa30>
 800d4ca:	a201      	add	r2, pc, #4	; (adr r2, 800d4d0 <UART_SetConfig+0x930>)
 800d4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d0:	0800d55b 	.word	0x0800d55b
 800d4d4:	0800d575 	.word	0x0800d575
 800d4d8:	0800d5d1 	.word	0x0800d5d1
 800d4dc:	0800d5d1 	.word	0x0800d5d1
 800d4e0:	0800d57d 	.word	0x0800d57d
 800d4e4:	0800d5d1 	.word	0x0800d5d1
 800d4e8:	0800d5d1 	.word	0x0800d5d1
 800d4ec:	0800d5d1 	.word	0x0800d5d1
 800d4f0:	0800d58d 	.word	0x0800d58d
 800d4f4:	0800d5d1 	.word	0x0800d5d1
 800d4f8:	0800d5d1 	.word	0x0800d5d1
 800d4fc:	0800d5d1 	.word	0x0800d5d1
 800d500:	0800d5d1 	.word	0x0800d5d1
 800d504:	0800d5d1 	.word	0x0800d5d1
 800d508:	0800d5d1 	.word	0x0800d5d1
 800d50c:	0800d5d1 	.word	0x0800d5d1
 800d510:	0800d59d 	.word	0x0800d59d
 800d514:	0800d5d1 	.word	0x0800d5d1
 800d518:	0800d5d1 	.word	0x0800d5d1
 800d51c:	0800d5d1 	.word	0x0800d5d1
 800d520:	0800d5d1 	.word	0x0800d5d1
 800d524:	0800d5d1 	.word	0x0800d5d1
 800d528:	0800d5d1 	.word	0x0800d5d1
 800d52c:	0800d5d1 	.word	0x0800d5d1
 800d530:	0800d5d1 	.word	0x0800d5d1
 800d534:	0800d5d1 	.word	0x0800d5d1
 800d538:	0800d5d1 	.word	0x0800d5d1
 800d53c:	0800d5d1 	.word	0x0800d5d1
 800d540:	0800d5d1 	.word	0x0800d5d1
 800d544:	0800d5d1 	.word	0x0800d5d1
 800d548:	0800d5d1 	.word	0x0800d5d1
 800d54c:	0800d5d1 	.word	0x0800d5d1
 800d550:	0800d5c3 	.word	0x0800d5c3
 800d554:	2b40      	cmp	r3, #64	; 0x40
 800d556:	d037      	beq.n	800d5c8 <UART_SetConfig+0xa28>
 800d558:	e03a      	b.n	800d5d0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d55a:	f7f9 ff5b 	bl	8007414 <HAL_RCC_GetPCLK1Freq>
 800d55e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d560:	e03c      	b.n	800d5dc <UART_SetConfig+0xa3c>
 800d562:	bf00      	nop
 800d564:	003d0900 	.word	0x003d0900
 800d568:	0800f838 	.word	0x0800f838
 800d56c:	58024400 	.word	0x58024400
 800d570:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d574:	f7f9 ff64 	bl	8007440 <HAL_RCC_GetPCLK2Freq>
 800d578:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d57a:	e02f      	b.n	800d5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d57c:	f107 0314 	add.w	r3, r7, #20
 800d580:	4618      	mov	r0, r3
 800d582:	f7fb fb9b 	bl	8008cbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d58a:	e027      	b.n	800d5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d58c:	f107 0308 	add.w	r3, r7, #8
 800d590:	4618      	mov	r0, r3
 800d592:	f7fb fce7 	bl	8008f64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d59a:	e01f      	b.n	800d5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d59c:	4b2c      	ldr	r3, [pc, #176]	; (800d650 <UART_SetConfig+0xab0>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f003 0320 	and.w	r3, r3, #32
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d009      	beq.n	800d5bc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5a8:	4b29      	ldr	r3, [pc, #164]	; (800d650 <UART_SetConfig+0xab0>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	08db      	lsrs	r3, r3, #3
 800d5ae:	f003 0303 	and.w	r3, r3, #3
 800d5b2:	4a28      	ldr	r2, [pc, #160]	; (800d654 <UART_SetConfig+0xab4>)
 800d5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5ba:	e00f      	b.n	800d5dc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d5bc:	4b25      	ldr	r3, [pc, #148]	; (800d654 <UART_SetConfig+0xab4>)
 800d5be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5c0:	e00c      	b.n	800d5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5c2:	4b25      	ldr	r3, [pc, #148]	; (800d658 <UART_SetConfig+0xab8>)
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5c6:	e009      	b.n	800d5dc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5ce:	e005      	b.n	800d5dc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d5da:	bf00      	nop
    }

    if (pclk != 0U)
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d021      	beq.n	800d626 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e6:	4a1d      	ldr	r2, [pc, #116]	; (800d65c <UART_SetConfig+0xabc>)
 800d5e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f0:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	085b      	lsrs	r3, r3, #1
 800d5fa:	441a      	add	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	fbb2 f3f3 	udiv	r3, r2, r3
 800d604:	b29b      	uxth	r3, r3
 800d606:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60a:	2b0f      	cmp	r3, #15
 800d60c:	d908      	bls.n	800d620 <UART_SetConfig+0xa80>
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d614:	d204      	bcs.n	800d620 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d61c:	60da      	str	r2, [r3, #12]
 800d61e:	e002      	b.n	800d626 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2201      	movs	r2, #1
 800d632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d642:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d646:	4618      	mov	r0, r3
 800d648:	3738      	adds	r7, #56	; 0x38
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bdb0      	pop	{r4, r5, r7, pc}
 800d64e:	bf00      	nop
 800d650:	58024400 	.word	0x58024400
 800d654:	03d09000 	.word	0x03d09000
 800d658:	003d0900 	.word	0x003d0900
 800d65c:	0800f838 	.word	0x0800f838

0800d660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00a      	beq.n	800d68a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	430a      	orrs	r2, r1
 800d688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d68e:	f003 0302 	and.w	r3, r3, #2
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00a      	beq.n	800d6ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	430a      	orrs	r2, r1
 800d6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00a      	beq.n	800d6ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	430a      	orrs	r2, r1
 800d6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6d2:	f003 0308 	and.w	r3, r3, #8
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	430a      	orrs	r2, r1
 800d6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f4:	f003 0310 	and.w	r3, r3, #16
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00a      	beq.n	800d712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	430a      	orrs	r2, r1
 800d710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d716:	f003 0320 	and.w	r3, r3, #32
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00a      	beq.n	800d734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	430a      	orrs	r2, r1
 800d732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d01a      	beq.n	800d776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	430a      	orrs	r2, r1
 800d754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d75e:	d10a      	bne.n	800d776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	430a      	orrs	r2, r1
 800d774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00a      	beq.n	800d798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	430a      	orrs	r2, r1
 800d796:	605a      	str	r2, [r3, #4]
  }
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b086      	sub	sp, #24
 800d7a8:	af02      	add	r7, sp, #8
 800d7aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7b4:	f7f4 f948 	bl	8001a48 <HAL_GetTick>
 800d7b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f003 0308 	and.w	r3, r3, #8
 800d7c4:	2b08      	cmp	r3, #8
 800d7c6:	d10e      	bne.n	800d7e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f82f 	bl	800d83a <UART_WaitOnFlagUntilTimeout>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e025      	b.n	800d832 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0304 	and.w	r3, r3, #4
 800d7f0:	2b04      	cmp	r3, #4
 800d7f2:	d10e      	bne.n	800d812 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f819 	bl	800d83a <UART_WaitOnFlagUntilTimeout>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d80e:	2303      	movs	r3, #3
 800d810:	e00f      	b.n	800d832 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2220      	movs	r2, #32
 800d816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2220      	movs	r2, #32
 800d81e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b084      	sub	sp, #16
 800d83e:	af00      	add	r7, sp, #0
 800d840:	60f8      	str	r0, [r7, #12]
 800d842:	60b9      	str	r1, [r7, #8]
 800d844:	603b      	str	r3, [r7, #0]
 800d846:	4613      	mov	r3, r2
 800d848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d84a:	e062      	b.n	800d912 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d852:	d05e      	beq.n	800d912 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d854:	f7f4 f8f8 	bl	8001a48 <HAL_GetTick>
 800d858:	4602      	mov	r2, r0
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	429a      	cmp	r2, r3
 800d862:	d302      	bcc.n	800d86a <UART_WaitOnFlagUntilTimeout+0x30>
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d11d      	bne.n	800d8a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d878:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	689a      	ldr	r2, [r3, #8]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f022 0201 	bic.w	r2, r2, #1
 800d888:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2220      	movs	r2, #32
 800d88e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2220      	movs	r2, #32
 800d896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d8a2:	2303      	movs	r3, #3
 800d8a4:	e045      	b.n	800d932 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f003 0304 	and.w	r3, r3, #4
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d02e      	beq.n	800d912 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8c2:	d126      	bne.n	800d912 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d8dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	689a      	ldr	r2, [r3, #8]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f022 0201 	bic.w	r2, r2, #1
 800d8ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2220      	movs	r2, #32
 800d8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2220      	movs	r2, #32
 800d8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2220      	movs	r2, #32
 800d902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2200      	movs	r2, #0
 800d90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d90e:	2303      	movs	r3, #3
 800d910:	e00f      	b.n	800d932 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	69da      	ldr	r2, [r3, #28]
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	4013      	ands	r3, r2
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	429a      	cmp	r2, r3
 800d920:	bf0c      	ite	eq
 800d922:	2301      	moveq	r3, #1
 800d924:	2300      	movne	r3, #0
 800d926:	b2db      	uxtb	r3, r3
 800d928:	461a      	mov	r2, r3
 800d92a:	79fb      	ldrb	r3, [r7, #7]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d08d      	beq.n	800d84c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3710      	adds	r7, #16
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
	...

0800d93c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d952:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6899      	ldr	r1, [r3, #8]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	4b0f      	ldr	r3, [pc, #60]	; (800d99c <UART_EndRxTransfer+0x60>)
 800d960:	400b      	ands	r3, r1
 800d962:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d107      	bne.n	800d97c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f022 0210 	bic.w	r2, r2, #16
 800d97a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2220      	movs	r2, #32
 800d980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	effffffe 	.word	0xeffffffe

0800d9a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff f8d8 	bl	800cb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9c4:	bf00      	nop
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}

0800d9cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9e2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2220      	movs	r2, #32
 800d9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff f8b4 	bl	800cb60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9f8:	bf00      	nop
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d101      	bne.n	800da52 <HAL_UARTEx_DisableFifoMode+0x16>
 800da4e:	2302      	movs	r3, #2
 800da50:	e027      	b.n	800daa2 <HAL_UARTEx_DisableFifoMode+0x66>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2201      	movs	r2, #1
 800da56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2224      	movs	r2, #36	; 0x24
 800da5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f022 0201 	bic.w	r2, r2, #1
 800da78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800da80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68fa      	ldr	r2, [r7, #12]
 800da8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2220      	movs	r2, #32
 800da94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3714      	adds	r7, #20
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b084      	sub	sp, #16
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d101      	bne.n	800dac6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dac2:	2302      	movs	r3, #2
 800dac4:	e02d      	b.n	800db22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2224      	movs	r2, #36	; 0x24
 800dad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f022 0201 	bic.w	r2, r2, #1
 800daec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	689b      	ldr	r3, [r3, #8]
 800daf4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	683a      	ldr	r2, [r7, #0]
 800dafe:	430a      	orrs	r2, r1
 800db00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 f850 	bl	800dba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2220      	movs	r2, #32
 800db14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d101      	bne.n	800db42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800db3e:	2302      	movs	r3, #2
 800db40:	e02d      	b.n	800db9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2201      	movs	r2, #1
 800db46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2224      	movs	r2, #36	; 0x24
 800db4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f022 0201 	bic.w	r2, r2, #1
 800db68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	430a      	orrs	r2, r1
 800db7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f812 	bl	800dba8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2220      	movs	r2, #32
 800db90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2200      	movs	r2, #0
 800db98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d108      	bne.n	800dbca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dbc8:	e031      	b.n	800dc2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dbca:	2310      	movs	r3, #16
 800dbcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dbce:	2310      	movs	r3, #16
 800dbd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	0e5b      	lsrs	r3, r3, #25
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	f003 0307 	and.w	r3, r3, #7
 800dbe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	0f5b      	lsrs	r3, r3, #29
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	f003 0307 	and.w	r3, r3, #7
 800dbf0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dbf2:	7bbb      	ldrb	r3, [r7, #14]
 800dbf4:	7b3a      	ldrb	r2, [r7, #12]
 800dbf6:	4911      	ldr	r1, [pc, #68]	; (800dc3c <UARTEx_SetNbDataToProcess+0x94>)
 800dbf8:	5c8a      	ldrb	r2, [r1, r2]
 800dbfa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dbfe:	7b3a      	ldrb	r2, [r7, #12]
 800dc00:	490f      	ldr	r1, [pc, #60]	; (800dc40 <UARTEx_SetNbDataToProcess+0x98>)
 800dc02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc04:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	7b7a      	ldrb	r2, [r7, #13]
 800dc14:	4909      	ldr	r1, [pc, #36]	; (800dc3c <UARTEx_SetNbDataToProcess+0x94>)
 800dc16:	5c8a      	ldrb	r2, [r1, r2]
 800dc18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc1c:	7b7a      	ldrb	r2, [r7, #13]
 800dc1e:	4908      	ldr	r1, [pc, #32]	; (800dc40 <UARTEx_SetNbDataToProcess+0x98>)
 800dc20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc22:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dc2e:	bf00      	nop
 800dc30:	3714      	adds	r7, #20
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	0800f850 	.word	0x0800f850
 800dc40:	0800f858 	.word	0x0800f858

0800dc44 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800dc44:	b084      	sub	sp, #16
 800dc46:	b480      	push	{r7}
 800dc48:	b085      	sub	sp, #20
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	f107 001c 	add.w	r0, r7, #28
 800dc52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800dc5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800dc5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800dc5e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800dc62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800dc66:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800dc6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685a      	ldr	r2, [r3, #4]
 800dc76:	4b07      	ldr	r3, [pc, #28]	; (800dc94 <SDMMC_Init+0x50>)
 800dc78:	4013      	ands	r3, r2
 800dc7a:	68fa      	ldr	r2, [r7, #12]
 800dc7c:	431a      	orrs	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dc82:	2300      	movs	r3, #0
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	b004      	add	sp, #16
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	ffc02c00 	.word	0xffc02c00

0800dc98 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	370c      	adds	r7, #12
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b083      	sub	sp, #12
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f043 0203 	orr.w	r2, r3, #3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	370c      	adds	r7, #12
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr

0800dcf6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800dcf6:	b480      	push	{r7}
 800dcf8:	b083      	sub	sp, #12
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0303 	and.w	r3, r3, #3
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	370c      	adds	r7, #12
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
	...

0800dd14 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dd32:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800dd38:	431a      	orrs	r2, r3
                       Command->CPSM);
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800dd3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	4313      	orrs	r3, r2
 800dd44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68da      	ldr	r2, [r3, #12]
 800dd4a:	4b06      	ldr	r3, [pc, #24]	; (800dd64 <SDMMC_SendCommand+0x50>)
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	431a      	orrs	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr
 800dd64:	fffee0c0 	.word	0xfffee0c0

0800dd68 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	b2db      	uxtb	r3, r3
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	370c      	adds	r7, #12
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr

0800dd82 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dd82:	b480      	push	{r7}
 800dd84:	b085      	sub	sp, #20
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	6078      	str	r0, [r7, #4]
 800dd8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	3314      	adds	r3, #20
 800dd90:	461a      	mov	r2, r3
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	4413      	add	r3, r2
 800dd96:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ddce:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ddd4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ddda:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800dddc:	68fa      	ldr	r2, [r7, #12]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	431a      	orrs	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ddf2:	2300      	movs	r3, #0

}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3714      	adds	r7, #20
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b088      	sub	sp, #32
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800de0e:	2310      	movs	r3, #16
 800de10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de12:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de18:	2300      	movs	r3, #0
 800de1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de22:	f107 0308 	add.w	r3, r7, #8
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7ff ff73 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800de2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800de32:	2110      	movs	r1, #16
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fa81 	bl	800e33c <SDMMC_GetCmdResp1>
 800de3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de3c:	69fb      	ldr	r3, [r7, #28]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3720      	adds	r7, #32
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b088      	sub	sp, #32
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
 800de4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800de54:	2311      	movs	r3, #17
 800de56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de5e:	2300      	movs	r3, #0
 800de60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de68:	f107 0308 	add.w	r3, r7, #8
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff ff50 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800de74:	f241 3288 	movw	r2, #5000	; 0x1388
 800de78:	2111      	movs	r1, #17
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 fa5e 	bl	800e33c <SDMMC_GetCmdResp1>
 800de80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de82:	69fb      	ldr	r3, [r7, #28]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3720      	adds	r7, #32
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b088      	sub	sp, #32
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800de9a:	2312      	movs	r3, #18
 800de9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dea2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dea4:	2300      	movs	r3, #0
 800dea6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800deac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800deae:	f107 0308 	add.w	r3, r7, #8
 800deb2:	4619      	mov	r1, r3
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f7ff ff2d 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800deba:	f241 3288 	movw	r2, #5000	; 0x1388
 800debe:	2112      	movs	r1, #18
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 fa3b 	bl	800e33c <SDMMC_GetCmdResp1>
 800dec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dec8:	69fb      	ldr	r3, [r7, #28]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3720      	adds	r7, #32
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b088      	sub	sp, #32
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
 800deda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dee0:	2318      	movs	r3, #24
 800dee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800def2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800def4:	f107 0308 	add.w	r3, r7, #8
 800def8:	4619      	mov	r1, r3
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f7ff ff0a 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800df00:	f241 3288 	movw	r2, #5000	; 0x1388
 800df04:	2118      	movs	r1, #24
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 fa18 	bl	800e33c <SDMMC_GetCmdResp1>
 800df0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df0e:	69fb      	ldr	r3, [r7, #28]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b088      	sub	sp, #32
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800df26:	2319      	movs	r3, #25
 800df28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df30:	2300      	movs	r3, #0
 800df32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df3a:	f107 0308 	add.w	r3, r7, #8
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f7ff fee7 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800df46:	f241 3288 	movw	r2, #5000	; 0x1388
 800df4a:	2119      	movs	r1, #25
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f000 f9f5 	bl	800e33c <SDMMC_GetCmdResp1>
 800df52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df54:	69fb      	ldr	r3, [r7, #28]
}
 800df56:	4618      	mov	r0, r3
 800df58:	3720      	adds	r7, #32
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
	...

0800df60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b088      	sub	sp, #32
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800df68:	2300      	movs	r3, #0
 800df6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800df6c:	230c      	movs	r3, #12
 800df6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df76:	2300      	movs	r3, #0
 800df78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df7e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df98:	f107 0308 	add.w	r3, r7, #8
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f7ff feb8 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dfa4:	4a0b      	ldr	r2, [pc, #44]	; (800dfd4 <SDMMC_CmdStopTransfer+0x74>)
 800dfa6:	210c      	movs	r1, #12
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 f9c7 	bl	800e33c <SDMMC_GetCmdResp1>
 800dfae:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dfc2:	d101      	bne.n	800dfc8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800dfc8:	69fb      	ldr	r3, [r7, #28]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3720      	adds	r7, #32
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	05f5e100 	.word	0x05f5e100

0800dfd8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b088      	sub	sp, #32
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dfe6:	2307      	movs	r3, #7
 800dfe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dfea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dfee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dff0:	2300      	movs	r3, #0
 800dff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dffa:	f107 0308 	add.w	r3, r7, #8
 800dffe:	4619      	mov	r1, r3
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7ff fe87 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e006:	f241 3288 	movw	r2, #5000	; 0x1388
 800e00a:	2107      	movs	r1, #7
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 f995 	bl	800e33c <SDMMC_GetCmdResp1>
 800e012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e014:	69fb      	ldr	r3, [r7, #28]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3720      	adds	r7, #32
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b088      	sub	sp, #32
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e026:	2300      	movs	r3, #0
 800e028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e02a:	2300      	movs	r3, #0
 800e02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e02e:	2300      	movs	r3, #0
 800e030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e032:	2300      	movs	r3, #0
 800e034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e03a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e03c:	f107 0308 	add.w	r3, r7, #8
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f7ff fe66 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 fbb9 	bl	800e7c0 <SDMMC_GetCmdError>
 800e04e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e050:	69fb      	ldr	r3, [r7, #28]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3720      	adds	r7, #32
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b088      	sub	sp, #32
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e062:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e068:	2308      	movs	r3, #8
 800e06a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e06c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e072:	2300      	movs	r3, #0
 800e074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e07a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e07c:	f107 0308 	add.w	r3, r7, #8
 800e080:	4619      	mov	r1, r3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff fe46 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 fb4b 	bl	800e724 <SDMMC_GetCmdResp7>
 800e08e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e090:	69fb      	ldr	r3, [r7, #28]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b088      	sub	sp, #32
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e0a8:	2337      	movs	r3, #55	; 0x37
 800e0aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e0bc:	f107 0308 	add.w	r3, r7, #8
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7ff fe26 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e0c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0cc:	2137      	movs	r1, #55	; 0x37
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f934 	bl	800e33c <SDMMC_GetCmdResp1>
 800e0d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0d6:	69fb      	ldr	r3, [r7, #28]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3720      	adds	r7, #32
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e0ee:	2329      	movs	r3, #41	; 0x29
 800e0f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e0f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e0fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e102:	f107 0308 	add.w	r3, r7, #8
 800e106:	4619      	mov	r1, r3
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fe03 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f000 fa50 	bl	800e5b4 <SDMMC_GetCmdResp3>
 800e114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e116:	69fb      	ldr	r3, [r7, #28]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b088      	sub	sp, #32
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e12e:	2306      	movs	r3, #6
 800e130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e132:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e138:	2300      	movs	r3, #0
 800e13a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e13c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e140:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e142:	f107 0308 	add.w	r3, r7, #8
 800e146:	4619      	mov	r1, r3
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f7ff fde3 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e14e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e152:	2106      	movs	r1, #6
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f8f1 	bl	800e33c <SDMMC_GetCmdResp1>
 800e15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e15c:	69fb      	ldr	r3, [r7, #28]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3720      	adds	r7, #32
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b088      	sub	sp, #32
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e16e:	2300      	movs	r3, #0
 800e170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e172:	2333      	movs	r3, #51	; 0x33
 800e174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e186:	f107 0308 	add.w	r3, r7, #8
 800e18a:	4619      	mov	r1, r3
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff fdc1 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e192:	f241 3288 	movw	r2, #5000	; 0x1388
 800e196:	2133      	movs	r1, #51	; 0x33
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f000 f8cf 	bl	800e33c <SDMMC_GetCmdResp1>
 800e19e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1a0:	69fb      	ldr	r3, [r7, #28]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3720      	adds	r7, #32
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b088      	sub	sp, #32
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e1ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e1be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e1c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e1ca:	f107 0308 	add.w	r3, r7, #8
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff fd9f 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 f9a2 	bl	800e520 <SDMMC_GetCmdResp2>
 800e1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1de:	69fb      	ldr	r3, [r7, #28]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3720      	adds	r7, #32
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b088      	sub	sp, #32
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e1f6:	2309      	movs	r3, #9
 800e1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e1fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e1fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e200:	2300      	movs	r3, #0
 800e202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e20a:	f107 0308 	add.w	r3, r7, #8
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff fd7f 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 f982 	bl	800e520 <SDMMC_GetCmdResp2>
 800e21c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e21e:	69fb      	ldr	r3, [r7, #28]
}
 800e220:	4618      	mov	r0, r3
 800e222:	3720      	adds	r7, #32
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e232:	2300      	movs	r3, #0
 800e234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e236:	2303      	movs	r3, #3
 800e238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e23a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e23e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e240:	2300      	movs	r3, #0
 800e242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e248:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e24a:	f107 0308 	add.w	r3, r7, #8
 800e24e:	4619      	mov	r1, r3
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f7ff fd5f 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e256:	683a      	ldr	r2, [r7, #0]
 800e258:	2103      	movs	r1, #3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f000 f9ea 	bl	800e634 <SDMMC_GetCmdResp6>
 800e260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e262:	69fb      	ldr	r3, [r7, #28]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3720      	adds	r7, #32
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e27a:	230d      	movs	r3, #13
 800e27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e27e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e284:	2300      	movs	r3, #0
 800e286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e28c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e28e:	f107 0308 	add.w	r3, r7, #8
 800e292:	4619      	mov	r1, r3
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff fd3d 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e29a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e29e:	210d      	movs	r1, #13
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 f84b 	bl	800e33c <SDMMC_GetCmdResp1>
 800e2a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2a8:	69fb      	ldr	r3, [r7, #28]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3720      	adds	r7, #32
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b088      	sub	sp, #32
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800e2be:	230d      	movs	r3, #13
 800e2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e2c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e2cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e2d2:	f107 0308 	add.w	r3, r7, #8
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7ff fd1b 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800e2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2e2:	210d      	movs	r1, #13
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f829 	bl	800e33c <SDMMC_GetCmdResp1>
 800e2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3720      	adds	r7, #32
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b088      	sub	sp, #32
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN;*/
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800e304:	2306      	movs	r3, #6
 800e306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e30e:	2300      	movs	r3, #0
 800e310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e318:	f107 0308 	add.w	r3, r7, #8
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff fcf8 	bl	800dd14 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800e324:	f241 3288 	movw	r2, #5000	; 0x1388
 800e328:	2106      	movs	r1, #6
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f806 	bl	800e33c <SDMMC_GetCmdResp1>
 800e330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e332:	69fb      	ldr	r3, [r7, #28]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3720      	adds	r7, #32
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	460b      	mov	r3, r1
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e34a:	4b70      	ldr	r3, [pc, #448]	; (800e50c <SDMMC_GetCmdResp1+0x1d0>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a70      	ldr	r2, [pc, #448]	; (800e510 <SDMMC_GetCmdResp1+0x1d4>)
 800e350:	fba2 2303 	umull	r2, r3, r2, r3
 800e354:	0a5a      	lsrs	r2, r3, #9
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	fb02 f303 	mul.w	r3, r2, r3
 800e35c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	1e5a      	subs	r2, r3, #1
 800e362:	61fa      	str	r2, [r7, #28]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e36c:	e0c9      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e372:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e374:	69ba      	ldr	r2, [r7, #24]
 800e376:	4b67      	ldr	r3, [pc, #412]	; (800e514 <SDMMC_GetCmdResp1+0x1d8>)
 800e378:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d0ef      	beq.n	800e35e <SDMMC_GetCmdResp1+0x22>
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1ea      	bne.n	800e35e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e38c:	f003 0304 	and.w	r3, r3, #4
 800e390:	2b00      	cmp	r3, #0
 800e392:	d004      	beq.n	800e39e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2204      	movs	r2, #4
 800e398:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e39a:	2304      	movs	r3, #4
 800e39c:	e0b1      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d004      	beq.n	800e3b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e0a6      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	4a58      	ldr	r2, [pc, #352]	; (800e518 <SDMMC_GetCmdResp1+0x1dc>)
 800e3b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7ff fcd4 	bl	800dd68 <SDMMC_GetCommandResponse>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	7afb      	ldrb	r3, [r7, #11]
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d001      	beq.n	800e3ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e099      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f7ff fcd6 	bl	800dd82 <SDMMC_GetResponse>
 800e3d6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e3d8:	697a      	ldr	r2, [r7, #20]
 800e3da:	4b50      	ldr	r3, [pc, #320]	; (800e51c <SDMMC_GetCmdResp1+0x1e0>)
 800e3dc:	4013      	ands	r3, r2
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d101      	bne.n	800e3e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e08d      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	da02      	bge.n	800e3f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e3ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e3f0:	e087      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e3fc:	2340      	movs	r3, #64	; 0x40
 800e3fe:	e080      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e406:	2b00      	cmp	r3, #0
 800e408:	d001      	beq.n	800e40e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e40a:	2380      	movs	r3, #128	; 0x80
 800e40c:	e079      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e41c:	e071      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e424:	2b00      	cmp	r3, #0
 800e426:	d002      	beq.n	800e42e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e42c:	e069      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e434:	2b00      	cmp	r3, #0
 800e436:	d002      	beq.n	800e43e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e43c:	e061      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e444:	2b00      	cmp	r3, #0
 800e446:	d002      	beq.n	800e44e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e44c:	e059      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e454:	2b00      	cmp	r3, #0
 800e456:	d002      	beq.n	800e45e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e45c:	e051      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e46c:	e049      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e474:	2b00      	cmp	r3, #0
 800e476:	d002      	beq.n	800e47e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e47c:	e041      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e484:	2b00      	cmp	r3, #0
 800e486:	d002      	beq.n	800e48e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e48c:	e039      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e49c:	e031      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e4a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e4ac:	e029      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e4b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e4bc:	e021      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d002      	beq.n	800e4ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e4c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e4cc:	e019      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e4d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e4dc:	e011      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e4e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e4ec:	e009      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	f003 0308 	and.w	r3, r3, #8
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d002      	beq.n	800e4fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e4f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e4fc:	e001      	b.n	800e502 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e4fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e502:	4618      	mov	r0, r3
 800e504:	3720      	adds	r7, #32
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	24000000 	.word	0x24000000
 800e510:	10624dd3 	.word	0x10624dd3
 800e514:	00200045 	.word	0x00200045
 800e518:	002000c5 	.word	0x002000c5
 800e51c:	fdffe008 	.word	0xfdffe008

0800e520 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e520:	b480      	push	{r7}
 800e522:	b085      	sub	sp, #20
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e528:	4b1f      	ldr	r3, [pc, #124]	; (800e5a8 <SDMMC_GetCmdResp2+0x88>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a1f      	ldr	r2, [pc, #124]	; (800e5ac <SDMMC_GetCmdResp2+0x8c>)
 800e52e:	fba2 2303 	umull	r2, r3, r2, r3
 800e532:	0a5b      	lsrs	r3, r3, #9
 800e534:	f241 3288 	movw	r2, #5000	; 0x1388
 800e538:	fb02 f303 	mul.w	r3, r2, r3
 800e53c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	1e5a      	subs	r2, r3, #1
 800e542:	60fa      	str	r2, [r7, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d102      	bne.n	800e54e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e548:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e54c:	e026      	b.n	800e59c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e552:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d0ef      	beq.n	800e53e <SDMMC_GetCmdResp2+0x1e>
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1ea      	bne.n	800e53e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e56c:	f003 0304 	and.w	r3, r3, #4
 800e570:	2b00      	cmp	r3, #0
 800e572:	d004      	beq.n	800e57e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2204      	movs	r2, #4
 800e578:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e57a:	2304      	movs	r3, #4
 800e57c:	e00e      	b.n	800e59c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	2b00      	cmp	r3, #0
 800e588:	d004      	beq.n	800e594 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e590:	2301      	movs	r3, #1
 800e592:	e003      	b.n	800e59c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a06      	ldr	r2, [pc, #24]	; (800e5b0 <SDMMC_GetCmdResp2+0x90>)
 800e598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e59a:	2300      	movs	r3, #0
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	24000000 	.word	0x24000000
 800e5ac:	10624dd3 	.word	0x10624dd3
 800e5b0:	002000c5 	.word	0x002000c5

0800e5b4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e5bc:	4b1a      	ldr	r3, [pc, #104]	; (800e628 <SDMMC_GetCmdResp3+0x74>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a1a      	ldr	r2, [pc, #104]	; (800e62c <SDMMC_GetCmdResp3+0x78>)
 800e5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c6:	0a5b      	lsrs	r3, r3, #9
 800e5c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5cc:	fb02 f303 	mul.w	r3, r2, r3
 800e5d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	1e5a      	subs	r2, r3, #1
 800e5d6:	60fa      	str	r2, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d102      	bne.n	800e5e2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e5dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5e0:	e01b      	b.n	800e61a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d0ef      	beq.n	800e5d2 <SDMMC_GetCmdResp3+0x1e>
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1ea      	bne.n	800e5d2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e600:	f003 0304 	and.w	r3, r3, #4
 800e604:	2b00      	cmp	r3, #0
 800e606:	d004      	beq.n	800e612 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2204      	movs	r2, #4
 800e60c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e60e:	2304      	movs	r3, #4
 800e610:	e003      	b.n	800e61a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4a06      	ldr	r2, [pc, #24]	; (800e630 <SDMMC_GetCmdResp3+0x7c>)
 800e616:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3714      	adds	r7, #20
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	24000000 	.word	0x24000000
 800e62c:	10624dd3 	.word	0x10624dd3
 800e630:	002000c5 	.word	0x002000c5

0800e634 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b088      	sub	sp, #32
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	460b      	mov	r3, r1
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e642:	4b35      	ldr	r3, [pc, #212]	; (800e718 <SDMMC_GetCmdResp6+0xe4>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a35      	ldr	r2, [pc, #212]	; (800e71c <SDMMC_GetCmdResp6+0xe8>)
 800e648:	fba2 2303 	umull	r2, r3, r2, r3
 800e64c:	0a5b      	lsrs	r3, r3, #9
 800e64e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e652:	fb02 f303 	mul.w	r3, r2, r3
 800e656:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	1e5a      	subs	r2, r3, #1
 800e65c:	61fa      	str	r2, [r7, #28]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d102      	bne.n	800e668 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e662:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e666:	e052      	b.n	800e70e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e66c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e674:	2b00      	cmp	r3, #0
 800e676:	d0ef      	beq.n	800e658 <SDMMC_GetCmdResp6+0x24>
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1ea      	bne.n	800e658 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e686:	f003 0304 	and.w	r3, r3, #4
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d004      	beq.n	800e698 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2204      	movs	r2, #4
 800e692:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e694:	2304      	movs	r3, #4
 800e696:	e03a      	b.n	800e70e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e69c:	f003 0301 	and.w	r3, r3, #1
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d004      	beq.n	800e6ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e02f      	b.n	800e70e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f7ff fb5a 	bl	800dd68 <SDMMC_GetCommandResponse>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	7afb      	ldrb	r3, [r7, #11]
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d001      	beq.n	800e6c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e025      	b.n	800e70e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	4a16      	ldr	r2, [pc, #88]	; (800e720 <SDMMC_GetCmdResp6+0xec>)
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	68f8      	ldr	r0, [r7, #12]
 800e6cc:	f7ff fb59 	bl	800dd82 <SDMMC_GetResponse>
 800e6d0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d106      	bne.n	800e6ea <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	0c1b      	lsrs	r3, r3, #16
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	e011      	b.n	800e70e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e6f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6f8:	e009      	b.n	800e70e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e700:	2b00      	cmp	r3, #0
 800e702:	d002      	beq.n	800e70a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e708:	e001      	b.n	800e70e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e70a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3720      	adds	r7, #32
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	24000000 	.word	0x24000000
 800e71c:	10624dd3 	.word	0x10624dd3
 800e720:	002000c5 	.word	0x002000c5

0800e724 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e724:	b480      	push	{r7}
 800e726:	b085      	sub	sp, #20
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e72c:	4b22      	ldr	r3, [pc, #136]	; (800e7b8 <SDMMC_GetCmdResp7+0x94>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a22      	ldr	r2, [pc, #136]	; (800e7bc <SDMMC_GetCmdResp7+0x98>)
 800e732:	fba2 2303 	umull	r2, r3, r2, r3
 800e736:	0a5b      	lsrs	r3, r3, #9
 800e738:	f241 3288 	movw	r2, #5000	; 0x1388
 800e73c:	fb02 f303 	mul.w	r3, r2, r3
 800e740:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	1e5a      	subs	r2, r3, #1
 800e746:	60fa      	str	r2, [r7, #12]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d102      	bne.n	800e752 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e74c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e750:	e02c      	b.n	800e7ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e756:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d0ef      	beq.n	800e742 <SDMMC_GetCmdResp7+0x1e>
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1ea      	bne.n	800e742 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e770:	f003 0304 	and.w	r3, r3, #4
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2204      	movs	r2, #4
 800e77c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e77e:	2304      	movs	r3, #4
 800e780:	e014      	b.n	800e7ac <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e786:	f003 0301 	and.w	r3, r3, #1
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d004      	beq.n	800e798 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2201      	movs	r2, #1
 800e792:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e794:	2301      	movs	r3, #1
 800e796:	e009      	b.n	800e7ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2240      	movs	r2, #64	; 0x40
 800e7a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e7aa:	2300      	movs	r3, #0

}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	24000000 	.word	0x24000000
 800e7bc:	10624dd3 	.word	0x10624dd3

0800e7c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e7c8:	4b11      	ldr	r3, [pc, #68]	; (800e810 <SDMMC_GetCmdError+0x50>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a11      	ldr	r2, [pc, #68]	; (800e814 <SDMMC_GetCmdError+0x54>)
 800e7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d2:	0a5b      	lsrs	r3, r3, #9
 800e7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7d8:	fb02 f303 	mul.w	r3, r2, r3
 800e7dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	1e5a      	subs	r2, r3, #1
 800e7e2:	60fa      	str	r2, [r7, #12]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d102      	bne.n	800e7ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7ec:	e009      	b.n	800e802 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d0f1      	beq.n	800e7de <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4a06      	ldr	r2, [pc, #24]	; (800e818 <SDMMC_GetCmdError+0x58>)
 800e7fe:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	24000000 	.word	0x24000000
 800e814:	10624dd3 	.word	0x10624dd3
 800e818:	002000c5 	.word	0x002000c5

0800e81c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e81c:	b084      	sub	sp, #16
 800e81e:	b580      	push	{r7, lr}
 800e820:	b084      	sub	sp, #16
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
 800e826:	f107 001c 	add.w	r0, r7, #28
 800e82a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e830:	2b01      	cmp	r3, #1
 800e832:	d120      	bne.n	800e876 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	68da      	ldr	r2, [r3, #12]
 800e844:	4b2a      	ldr	r3, [pc, #168]	; (800e8f0 <USB_CoreInit+0xd4>)
 800e846:	4013      	ands	r3, r2
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d105      	bne.n	800e86a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fce0 	bl	800f230 <USB_CoreReset>
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
 800e874:	e01a      	b.n	800e8ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 fcd4 	bl	800f230 <USB_CoreReset>
 800e888:	4603      	mov	r3, r0
 800e88a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e88c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d106      	bne.n	800e8a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38
 800e89e:	e005      	b.n	800e8ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d116      	bne.n	800e8e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e8c0:	4b0c      	ldr	r3, [pc, #48]	; (800e8f4 <USB_CoreInit+0xd8>)
 800e8c2:	4313      	orrs	r3, r2
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	689b      	ldr	r3, [r3, #8]
 800e8cc:	f043 0206 	orr.w	r2, r3, #6
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	f043 0220 	orr.w	r2, r3, #32
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e8ec:	b004      	add	sp, #16
 800e8ee:	4770      	bx	lr
 800e8f0:	ffbdffbf 	.word	0xffbdffbf
 800e8f4:	03ee0000 	.word	0x03ee0000

0800e8f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b087      	sub	sp, #28
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	4613      	mov	r3, r2
 800e904:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	2b02      	cmp	r3, #2
 800e90a:	d165      	bne.n	800e9d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	4a41      	ldr	r2, [pc, #260]	; (800ea14 <USB_SetTurnaroundTime+0x11c>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d906      	bls.n	800e922 <USB_SetTurnaroundTime+0x2a>
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	4a40      	ldr	r2, [pc, #256]	; (800ea18 <USB_SetTurnaroundTime+0x120>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d202      	bcs.n	800e922 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e91c:	230f      	movs	r3, #15
 800e91e:	617b      	str	r3, [r7, #20]
 800e920:	e062      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	4a3c      	ldr	r2, [pc, #240]	; (800ea18 <USB_SetTurnaroundTime+0x120>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d306      	bcc.n	800e938 <USB_SetTurnaroundTime+0x40>
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	4a3b      	ldr	r2, [pc, #236]	; (800ea1c <USB_SetTurnaroundTime+0x124>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d202      	bcs.n	800e938 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e932:	230e      	movs	r3, #14
 800e934:	617b      	str	r3, [r7, #20]
 800e936:	e057      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	4a38      	ldr	r2, [pc, #224]	; (800ea1c <USB_SetTurnaroundTime+0x124>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d306      	bcc.n	800e94e <USB_SetTurnaroundTime+0x56>
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	4a37      	ldr	r2, [pc, #220]	; (800ea20 <USB_SetTurnaroundTime+0x128>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d202      	bcs.n	800e94e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e948:	230d      	movs	r3, #13
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	e04c      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	4a33      	ldr	r2, [pc, #204]	; (800ea20 <USB_SetTurnaroundTime+0x128>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d306      	bcc.n	800e964 <USB_SetTurnaroundTime+0x6c>
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	4a32      	ldr	r2, [pc, #200]	; (800ea24 <USB_SetTurnaroundTime+0x12c>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d802      	bhi.n	800e964 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e95e:	230c      	movs	r3, #12
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	e041      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	4a2f      	ldr	r2, [pc, #188]	; (800ea24 <USB_SetTurnaroundTime+0x12c>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d906      	bls.n	800e97a <USB_SetTurnaroundTime+0x82>
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	4a2e      	ldr	r2, [pc, #184]	; (800ea28 <USB_SetTurnaroundTime+0x130>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d802      	bhi.n	800e97a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e974:	230b      	movs	r3, #11
 800e976:	617b      	str	r3, [r7, #20]
 800e978:	e036      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	4a2a      	ldr	r2, [pc, #168]	; (800ea28 <USB_SetTurnaroundTime+0x130>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d906      	bls.n	800e990 <USB_SetTurnaroundTime+0x98>
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	4a29      	ldr	r2, [pc, #164]	; (800ea2c <USB_SetTurnaroundTime+0x134>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d802      	bhi.n	800e990 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e98a:	230a      	movs	r3, #10
 800e98c:	617b      	str	r3, [r7, #20]
 800e98e:	e02b      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	4a26      	ldr	r2, [pc, #152]	; (800ea2c <USB_SetTurnaroundTime+0x134>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d906      	bls.n	800e9a6 <USB_SetTurnaroundTime+0xae>
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	4a25      	ldr	r2, [pc, #148]	; (800ea30 <USB_SetTurnaroundTime+0x138>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d202      	bcs.n	800e9a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e9a0:	2309      	movs	r3, #9
 800e9a2:	617b      	str	r3, [r7, #20]
 800e9a4:	e020      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	4a21      	ldr	r2, [pc, #132]	; (800ea30 <USB_SetTurnaroundTime+0x138>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d306      	bcc.n	800e9bc <USB_SetTurnaroundTime+0xc4>
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	4a20      	ldr	r2, [pc, #128]	; (800ea34 <USB_SetTurnaroundTime+0x13c>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d802      	bhi.n	800e9bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e9b6:	2308      	movs	r3, #8
 800e9b8:	617b      	str	r3, [r7, #20]
 800e9ba:	e015      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	4a1d      	ldr	r2, [pc, #116]	; (800ea34 <USB_SetTurnaroundTime+0x13c>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d906      	bls.n	800e9d2 <USB_SetTurnaroundTime+0xda>
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	4a1c      	ldr	r2, [pc, #112]	; (800ea38 <USB_SetTurnaroundTime+0x140>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d202      	bcs.n	800e9d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e9cc:	2307      	movs	r3, #7
 800e9ce:	617b      	str	r3, [r7, #20]
 800e9d0:	e00a      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e9d2:	2306      	movs	r3, #6
 800e9d4:	617b      	str	r3, [r7, #20]
 800e9d6:	e007      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e9d8:	79fb      	ldrb	r3, [r7, #7]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d102      	bne.n	800e9e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e9de:	2309      	movs	r3, #9
 800e9e0:	617b      	str	r3, [r7, #20]
 800e9e2:	e001      	b.n	800e9e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e9e4:	2309      	movs	r3, #9
 800e9e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	68da      	ldr	r2, [r3, #12]
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	029b      	lsls	r3, r3, #10
 800e9fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ea00:	431a      	orrs	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	371c      	adds	r7, #28
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	00d8acbf 	.word	0x00d8acbf
 800ea18:	00e4e1c0 	.word	0x00e4e1c0
 800ea1c:	00f42400 	.word	0x00f42400
 800ea20:	01067380 	.word	0x01067380
 800ea24:	011a499f 	.word	0x011a499f
 800ea28:	01312cff 	.word	0x01312cff
 800ea2c:	014ca43f 	.word	0x014ca43f
 800ea30:	016e3600 	.word	0x016e3600
 800ea34:	01a6ab1f 	.word	0x01a6ab1f
 800ea38:	01e84800 	.word	0x01e84800

0800ea3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	f023 0201 	bic.w	r2, r3, #1
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b082      	sub	sp, #8
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	460b      	mov	r3, r1
 800ea68:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ea76:	78fb      	ldrb	r3, [r7, #3]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d106      	bne.n	800ea8a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	60da      	str	r2, [r3, #12]
 800ea88:	e00b      	b.n	800eaa2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ea8a:	78fb      	ldrb	r3, [r7, #3]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d106      	bne.n	800ea9e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	60da      	str	r2, [r3, #12]
 800ea9c:	e001      	b.n	800eaa2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e003      	b.n	800eaaa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800eaa2:	2032      	movs	r0, #50	; 0x32
 800eaa4:	f7f2 ffdc 	bl	8001a60 <HAL_Delay>

  return HAL_OK;
 800eaa8:	2300      	movs	r3, #0
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3708      	adds	r7, #8
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
	...

0800eab4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800eab4:	b084      	sub	sp, #16
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b086      	sub	sp, #24
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
 800eabe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800eac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800eace:	2300      	movs	r3, #0
 800ead0:	613b      	str	r3, [r7, #16]
 800ead2:	e009      	b.n	800eae8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ead4:	687a      	ldr	r2, [r7, #4]
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	3340      	adds	r3, #64	; 0x40
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	2200      	movs	r2, #0
 800eae0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	3301      	adds	r3, #1
 800eae6:	613b      	str	r3, [r7, #16]
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	2b0e      	cmp	r3, #14
 800eaec:	d9f2      	bls.n	800ead4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800eaee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d11c      	bne.n	800eb2e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb02:	f043 0302 	orr.w	r3, r3, #2
 800eb06:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	601a      	str	r2, [r3, #0]
 800eb2c:	e005      	b.n	800eb3a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eb40:	461a      	mov	r2, r3
 800eb42:	2300      	movs	r3, #0
 800eb44:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb54:	461a      	mov	r2, r3
 800eb56:	680b      	ldr	r3, [r1, #0]
 800eb58:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800eb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d10c      	bne.n	800eb7a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d104      	bne.n	800eb70 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800eb66:	2100      	movs	r1, #0
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 f949 	bl	800ee00 <USB_SetDevSpeed>
 800eb6e:	e008      	b.n	800eb82 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800eb70:	2101      	movs	r1, #1
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 f944 	bl	800ee00 <USB_SetDevSpeed>
 800eb78:	e003      	b.n	800eb82 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800eb7a:	2103      	movs	r1, #3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 f93f 	bl	800ee00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800eb82:	2110      	movs	r1, #16
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 f8f3 	bl	800ed70 <USB_FlushTxFifo>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800eb90:	2301      	movs	r3, #1
 800eb92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f000 f911 	bl	800edbc <USB_FlushRxFifo>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800eba0:	2301      	movs	r3, #1
 800eba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebaa:	461a      	mov	r2, r3
 800ebac:	2300      	movs	r3, #0
 800ebae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	2300      	movs	r3, #0
 800ebba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	613b      	str	r3, [r7, #16]
 800ebcc:	e043      	b.n	800ec56 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	015a      	lsls	r2, r3, #5
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ebe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ebe4:	d118      	bne.n	800ec18 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d10a      	bne.n	800ec02 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	015a      	lsls	r2, r3, #5
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ebfe:	6013      	str	r3, [r2, #0]
 800ec00:	e013      	b.n	800ec2a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	015a      	lsls	r2, r3, #5
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	4413      	add	r3, r2
 800ec0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec0e:	461a      	mov	r2, r3
 800ec10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ec14:	6013      	str	r3, [r2, #0]
 800ec16:	e008      	b.n	800ec2a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	015a      	lsls	r2, r3, #5
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	4413      	add	r3, r2
 800ec20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec24:	461a      	mov	r2, r3
 800ec26:	2300      	movs	r3, #0
 800ec28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	015a      	lsls	r2, r3, #5
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	4413      	add	r3, r2
 800ec32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec36:	461a      	mov	r2, r3
 800ec38:	2300      	movs	r3, #0
 800ec3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	015a      	lsls	r2, r3, #5
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	4413      	add	r3, r2
 800ec44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec48:	461a      	mov	r2, r3
 800ec4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ec4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	3301      	adds	r3, #1
 800ec54:	613b      	str	r3, [r7, #16]
 800ec56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec58:	693a      	ldr	r2, [r7, #16]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d3b7      	bcc.n	800ebce <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ec5e:	2300      	movs	r3, #0
 800ec60:	613b      	str	r3, [r7, #16]
 800ec62:	e043      	b.n	800ecec <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	015a      	lsls	r2, r3, #5
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec7a:	d118      	bne.n	800ecae <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d10a      	bne.n	800ec98 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec8e:	461a      	mov	r2, r3
 800ec90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ec94:	6013      	str	r3, [r2, #0]
 800ec96:	e013      	b.n	800ecc0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	015a      	lsls	r2, r3, #5
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	4413      	add	r3, r2
 800eca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eca4:	461a      	mov	r2, r3
 800eca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ecaa:	6013      	str	r3, [r2, #0]
 800ecac:	e008      	b.n	800ecc0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	015a      	lsls	r2, r3, #5
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4413      	add	r3, r2
 800ecb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecba:	461a      	mov	r2, r3
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	015a      	lsls	r2, r3, #5
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eccc:	461a      	mov	r2, r3
 800ecce:	2300      	movs	r3, #0
 800ecd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	015a      	lsls	r2, r3, #5
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	4413      	add	r3, r2
 800ecda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecde:	461a      	mov	r2, r3
 800ece0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ece4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	3301      	adds	r3, #1
 800ecea:	613b      	str	r3, [r7, #16]
 800ecec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d3b7      	bcc.n	800ec64 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ed02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ed14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d105      	bne.n	800ed28 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	f043 0210 	orr.w	r2, r3, #16
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	699a      	ldr	r2, [r3, #24]
 800ed2c:	4b0e      	ldr	r3, [pc, #56]	; (800ed68 <USB_DevInit+0x2b4>)
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ed34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d005      	beq.n	800ed46 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	f043 0208 	orr.w	r2, r3, #8
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ed46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d105      	bne.n	800ed58 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	699a      	ldr	r2, [r3, #24]
 800ed50:	4b06      	ldr	r3, [pc, #24]	; (800ed6c <USB_DevInit+0x2b8>)
 800ed52:	4313      	orrs	r3, r2
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ed64:	b004      	add	sp, #16
 800ed66:	4770      	bx	lr
 800ed68:	803c3800 	.word	0x803c3800
 800ed6c:	40000004 	.word	0x40000004

0800ed70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	019b      	lsls	r3, r3, #6
 800ed82:	f043 0220 	orr.w	r2, r3, #32
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	60fb      	str	r3, [r7, #12]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	4a09      	ldr	r2, [pc, #36]	; (800edb8 <USB_FlushTxFifo+0x48>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d901      	bls.n	800ed9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ed98:	2303      	movs	r3, #3
 800ed9a:	e006      	b.n	800edaa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	691b      	ldr	r3, [r3, #16]
 800eda0:	f003 0320 	and.w	r3, r3, #32
 800eda4:	2b20      	cmp	r3, #32
 800eda6:	d0f0      	beq.n	800ed8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800eda8:	2300      	movs	r3, #0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3714      	adds	r7, #20
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	00030d40 	.word	0x00030d40

0800edbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2210      	movs	r2, #16
 800edcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	3301      	adds	r3, #1
 800edd2:	60fb      	str	r3, [r7, #12]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	4a09      	ldr	r2, [pc, #36]	; (800edfc <USB_FlushRxFifo+0x40>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d901      	bls.n	800ede0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800eddc:	2303      	movs	r3, #3
 800edde:	e006      	b.n	800edee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	691b      	ldr	r3, [r3, #16]
 800ede4:	f003 0310 	and.w	r3, r3, #16
 800ede8:	2b10      	cmp	r3, #16
 800edea:	d0f0      	beq.n	800edce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3714      	adds	r7, #20
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	00030d40 	.word	0x00030d40

0800ee00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	78fb      	ldrb	r3, [r7, #3]
 800ee1a:	68f9      	ldr	r1, [r7, #12]
 800ee1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee20:	4313      	orrs	r3, r2
 800ee22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3714      	adds	r7, #20
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ee32:	b480      	push	{r7}
 800ee34:	b087      	sub	sp, #28
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	f003 0306 	and.w	r3, r3, #6
 800ee4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d102      	bne.n	800ee58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ee52:	2300      	movs	r3, #0
 800ee54:	75fb      	strb	r3, [r7, #23]
 800ee56:	e00a      	b.n	800ee6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b02      	cmp	r3, #2
 800ee5c:	d002      	beq.n	800ee64 <USB_GetDevSpeed+0x32>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2b06      	cmp	r3, #6
 800ee62:	d102      	bne.n	800ee6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ee64:	2302      	movs	r3, #2
 800ee66:	75fb      	strb	r3, [r7, #23]
 800ee68:	e001      	b.n	800ee6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ee6a:	230f      	movs	r3, #15
 800ee6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ee6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	371c      	adds	r7, #28
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b089      	sub	sp, #36	; 0x24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	4611      	mov	r1, r2
 800ee88:	461a      	mov	r2, r3
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	71fb      	strb	r3, [r7, #7]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ee9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d123      	bne.n	800eeea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800eea2:	88bb      	ldrh	r3, [r7, #4]
 800eea4:	3303      	adds	r3, #3
 800eea6:	089b      	lsrs	r3, r3, #2
 800eea8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800eeaa:	2300      	movs	r3, #0
 800eeac:	61bb      	str	r3, [r7, #24]
 800eeae:	e018      	b.n	800eee2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800eeb0:	79fb      	ldrb	r3, [r7, #7]
 800eeb2:	031a      	lsls	r2, r3, #12
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eebc:	461a      	mov	r2, r3
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	3301      	adds	r3, #1
 800eec8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	3301      	adds	r3, #1
 800eece:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	3301      	adds	r3, #1
 800eed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	3301      	adds	r3, #1
 800eeda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eedc:	69bb      	ldr	r3, [r7, #24]
 800eede:	3301      	adds	r3, #1
 800eee0:	61bb      	str	r3, [r7, #24]
 800eee2:	69ba      	ldr	r2, [r7, #24]
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d3e2      	bcc.n	800eeb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3724      	adds	r7, #36	; 0x24
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b08b      	sub	sp, #44	; 0x2c
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	4613      	mov	r3, r2
 800ef04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ef0e:	88fb      	ldrh	r3, [r7, #6]
 800ef10:	089b      	lsrs	r3, r3, #2
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ef16:	88fb      	ldrh	r3, [r7, #6]
 800ef18:	f003 0303 	and.w	r3, r3, #3
 800ef1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ef1e:	2300      	movs	r3, #0
 800ef20:	623b      	str	r3, [r7, #32]
 800ef22:	e014      	b.n	800ef4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	3301      	adds	r3, #1
 800ef34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ef36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef38:	3301      	adds	r3, #1
 800ef3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	3301      	adds	r3, #1
 800ef40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	3301      	adds	r3, #1
 800ef46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	623b      	str	r3, [r7, #32]
 800ef4e:	6a3a      	ldr	r2, [r7, #32]
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d3e6      	bcc.n	800ef24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ef56:	8bfb      	ldrh	r3, [r7, #30]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d01e      	beq.n	800ef9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef66:	461a      	mov	r2, r3
 800ef68:	f107 0310 	add.w	r3, r7, #16
 800ef6c:	6812      	ldr	r2, [r2, #0]
 800ef6e:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ef70:	693a      	ldr	r2, [r7, #16]
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	00db      	lsls	r3, r3, #3
 800ef78:	fa22 f303 	lsr.w	r3, r2, r3
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef80:	701a      	strb	r2, [r3, #0]
      i++;
 800ef82:	6a3b      	ldr	r3, [r7, #32]
 800ef84:	3301      	adds	r3, #1
 800ef86:	623b      	str	r3, [r7, #32]
      pDest++;
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ef8e:	8bfb      	ldrh	r3, [r7, #30]
 800ef90:	3b01      	subs	r3, #1
 800ef92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ef94:	8bfb      	ldrh	r3, [r7, #30]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1ea      	bne.n	800ef70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	372c      	adds	r7, #44	; 0x2c
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b085      	sub	sp, #20
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68fa      	ldr	r2, [r7, #12]
 800efbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800efc2:	f023 0303 	bic.w	r3, r3, #3
 800efc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efd6:	f043 0302 	orr.w	r3, r3, #2
 800efda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3714      	adds	r7, #20
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr

0800efea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800efea:	b480      	push	{r7}
 800efec:	b085      	sub	sp, #20
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	695b      	ldr	r3, [r3, #20]
 800eff6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	4013      	ands	r3, r2
 800f000:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f002:	68fb      	ldr	r3, [r7, #12]
}
 800f004:	4618      	mov	r0, r3
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f022:	699b      	ldr	r3, [r3, #24]
 800f024:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f02c:	69db      	ldr	r3, [r3, #28]
 800f02e:	68ba      	ldr	r2, [r7, #8]
 800f030:	4013      	ands	r3, r2
 800f032:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	0c1b      	lsrs	r3, r3, #16
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3714      	adds	r7, #20
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f056:	699b      	ldr	r3, [r3, #24]
 800f058:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f060:	69db      	ldr	r3, [r3, #28]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	4013      	ands	r3, r2
 800f066:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	b29b      	uxth	r3, r3
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3714      	adds	r7, #20
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f078:	b480      	push	{r7}
 800f07a:	b085      	sub	sp, #20
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	460b      	mov	r3, r1
 800f082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f088:	78fb      	ldrb	r3, [r7, #3]
 800f08a:	015a      	lsls	r2, r3, #5
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	4413      	add	r3, r2
 800f090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f09e:	695b      	ldr	r3, [r3, #20]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	4013      	ands	r3, r2
 800f0a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3714      	adds	r7, #20
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b087      	sub	sp, #28
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0d6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f0d8:	78fb      	ldrb	r3, [r7, #3]
 800f0da:	f003 030f 	and.w	r3, r3, #15
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800f0e4:	01db      	lsls	r3, r3, #7
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f0ee:	78fb      	ldrb	r3, [r7, #3]
 800f0f0:	015a      	lsls	r2, r3, #5
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	693a      	ldr	r2, [r7, #16]
 800f0fe:	4013      	ands	r3, r2
 800f100:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f102:	68bb      	ldr	r3, [r7, #8]
}
 800f104:	4618      	mov	r0, r3
 800f106:	371c      	adds	r7, #28
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	f003 0301 	and.w	r3, r3, #1
}
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f12c:	b480      	push	{r7}
 800f12e:	b085      	sub	sp, #20
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f146:	4619      	mov	r1, r3
 800f148:	4b09      	ldr	r3, [pc, #36]	; (800f170 <USB_ActivateSetup+0x44>)
 800f14a:	4013      	ands	r3, r2
 800f14c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f15c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f160:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f162:	2300      	movs	r3, #0
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	fffff800 	.word	0xfffff800

0800f174 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f174:	b480      	push	{r7}
 800f176:	b087      	sub	sp, #28
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	460b      	mov	r3, r1
 800f17e:	607a      	str	r2, [r7, #4]
 800f180:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	333c      	adds	r3, #60	; 0x3c
 800f18a:	3304      	adds	r3, #4
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	4a26      	ldr	r2, [pc, #152]	; (800f22c <USB_EP0_OutStart+0xb8>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d90a      	bls.n	800f1ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1a8:	d101      	bne.n	800f1ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	e037      	b.n	800f21e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	697a      	ldr	r2, [r7, #20]
 800f1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f1cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1d4:	691b      	ldr	r3, [r3, #16]
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1dc:	f043 0318 	orr.w	r3, r3, #24
 800f1e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f1f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f1f6:	7afb      	ldrb	r3, [r7, #11]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d10f      	bne.n	800f21c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f202:	461a      	mov	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	697a      	ldr	r2, [r7, #20]
 800f212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f216:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f21a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	371c      	adds	r7, #28
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	4f54300a 	.word	0x4f54300a

0800f230 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f230:	b480      	push	{r7}
 800f232:	b085      	sub	sp, #20
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f238:	2300      	movs	r3, #0
 800f23a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3301      	adds	r3, #1
 800f240:	60fb      	str	r3, [r7, #12]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	4a13      	ldr	r2, [pc, #76]	; (800f294 <USB_CoreReset+0x64>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d901      	bls.n	800f24e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f24a:	2303      	movs	r3, #3
 800f24c:	e01b      	b.n	800f286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	daf2      	bge.n	800f23c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f256:	2300      	movs	r3, #0
 800f258:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	691b      	ldr	r3, [r3, #16]
 800f25e:	f043 0201 	orr.w	r2, r3, #1
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3301      	adds	r3, #1
 800f26a:	60fb      	str	r3, [r7, #12]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	4a09      	ldr	r2, [pc, #36]	; (800f294 <USB_CoreReset+0x64>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d901      	bls.n	800f278 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f274:	2303      	movs	r3, #3
 800f276:	e006      	b.n	800f286 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	691b      	ldr	r3, [r3, #16]
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b01      	cmp	r3, #1
 800f282:	d0f0      	beq.n	800f266 <USB_CoreReset+0x36>

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	00030d40 	.word	0x00030d40

0800f298 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f29c:	4904      	ldr	r1, [pc, #16]	; (800f2b0 <MX_FATFS_Init+0x18>)
 800f29e:	4805      	ldr	r0, [pc, #20]	; (800f2b4 <MX_FATFS_Init+0x1c>)
 800f2a0:	f000 fa76 	bl	800f790 <FATFS_LinkDriver>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4b03      	ldr	r3, [pc, #12]	; (800f2b8 <MX_FATFS_Init+0x20>)
 800f2aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f2ac:	bf00      	nop
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	240007d4 	.word	0x240007d4
 800f2b4:	0800f860 	.word	0x0800f860
 800f2b8:	240007d0 	.word	0x240007d0

0800f2bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f2c6:	f000 f889 	bl	800f3dc <BSP_SD_IsDetected>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d001      	beq.n	800f2d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f2d0:	2302      	movs	r3, #2
 800f2d2:	e016      	b.n	800f302 <BSP_SD_Init+0x46>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f2d4:	480d      	ldr	r0, [pc, #52]	; (800f30c <BSP_SD_Init+0x50>)
 800f2d6:	f7fa fa4f 	bl	8009778 <HAL_SD_Init>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	71fb      	strb	r3, [r7, #7]

  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f2de:	79fb      	ldrb	r3, [r7, #7]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10d      	bne.n	800f300 <BSP_SD_Init+0x44>
  {
    /* Enable high speed operation */
     HAL_SD_ConfigSpeedBusOperation(&hsd1, SDMMC_SPEED_MODE_HIGH);
 800f2e4:	2102      	movs	r1, #2
 800f2e6:	4809      	ldr	r0, [pc, #36]	; (800f30c <BSP_SD_Init+0x50>)
 800f2e8:	f7fb fa04 	bl	800a6f4 <HAL_SD_ConfigSpeedBusOperation>
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f2ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f2f0:	4806      	ldr	r0, [pc, #24]	; (800f30c <BSP_SD_Init+0x50>)
 800f2f2:	f7fb f8ef 	bl	800a4d4 <HAL_SD_ConfigWideBusOperation>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d001      	beq.n	800f300 <BSP_SD_Init+0x44>
    {
      sd_state = MSD_ERROR;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f300:	79fb      	ldrb	r3, [r7, #7]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3708      	adds	r7, #8
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	240000ec 	.word	0x240000ec

0800f310 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b086      	sub	sp, #24
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f31c:	2300      	movs	r3, #0
 800f31e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	68ba      	ldr	r2, [r7, #8]
 800f324:	68f9      	ldr	r1, [r7, #12]
 800f326:	4806      	ldr	r0, [pc, #24]	; (800f340 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f328:	f7fa fb3e 	bl	80099a8 <HAL_SD_ReadBlocks_DMA>
 800f32c:	4603      	mov	r3, r0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f332:	2301      	movs	r3, #1
 800f334:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f336:	7dfb      	ldrb	r3, [r7, #23]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	240000ec 	.word	0x240000ec

0800f344 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b086      	sub	sp, #24
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f350:	2300      	movs	r3, #0
 800f352:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	68ba      	ldr	r2, [r7, #8]
 800f358:	68f9      	ldr	r1, [r7, #12]
 800f35a:	4806      	ldr	r0, [pc, #24]	; (800f374 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f35c:	f7fa fbcc 	bl	8009af8 <HAL_SD_WriteBlocks_DMA>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f366:	2301      	movs	r3, #1
 800f368:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	240000ec 	.word	0x240000ec

0800f378 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f37c:	4805      	ldr	r0, [pc, #20]	; (800f394 <BSP_SD_GetCardState+0x1c>)
 800f37e:	f7fb fa5f 	bl	800a840 <HAL_SD_GetCardState>
 800f382:	4603      	mov	r3, r0
 800f384:	2b04      	cmp	r3, #4
 800f386:	bf14      	ite	ne
 800f388:	2301      	movne	r3, #1
 800f38a:	2300      	moveq	r3, #0
 800f38c:	b2db      	uxtb	r3, r3
}
 800f38e:	4618      	mov	r0, r3
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	240000ec 	.word	0x240000ec

0800f398 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f3a0:	6879      	ldr	r1, [r7, #4]
 800f3a2:	4803      	ldr	r0, [pc, #12]	; (800f3b0 <BSP_SD_GetCardInfo+0x18>)
 800f3a4:	f7fb f86a 	bl	800a47c <HAL_SD_GetCardInfo>
}
 800f3a8:	bf00      	nop
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	240000ec 	.word	0x240000ec

0800f3b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f3bc:	f000 f984 	bl	800f6c8 <BSP_SD_WriteCpltCallback>
}
 800f3c0:	bf00      	nop
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}

0800f3c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f3d0:	f000 f986 	bl	800f6e0 <BSP_SD_ReadCpltCallback>
}
 800f3d4:	bf00      	nop
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800f3e6:	79fb      	ldrb	r3, [r7, #7]
 800f3e8:	b2db      	uxtb	r3, r3
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b084      	sub	sp, #16
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f3fe:	f7f2 fb23 	bl	8001a48 <HAL_GetTick>
 800f402:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f404:	e006      	b.n	800f414 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f406:	f7ff ffb7 	bl	800f378 <BSP_SD_GetCardState>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d101      	bne.n	800f414 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f410:	2300      	movs	r3, #0
 800f412:	e009      	b.n	800f428 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f414:	f7f2 fb18 	bl	8001a48 <HAL_GetTick>
 800f418:	4602      	mov	r2, r0
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	1ad3      	subs	r3, r2, r3
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	429a      	cmp	r2, r3
 800f422:	d8f0      	bhi.n	800f406 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f424:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	4603      	mov	r3, r0
 800f438:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f43a:	4b0b      	ldr	r3, [pc, #44]	; (800f468 <SD_CheckStatus+0x38>)
 800f43c:	2201      	movs	r2, #1
 800f43e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f440:	f7ff ff9a 	bl	800f378 <BSP_SD_GetCardState>
 800f444:	4603      	mov	r3, r0
 800f446:	2b00      	cmp	r3, #0
 800f448:	d107      	bne.n	800f45a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f44a:	4b07      	ldr	r3, [pc, #28]	; (800f468 <SD_CheckStatus+0x38>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	f023 0301 	bic.w	r3, r3, #1
 800f454:	b2da      	uxtb	r2, r3
 800f456:	4b04      	ldr	r3, [pc, #16]	; (800f468 <SD_CheckStatus+0x38>)
 800f458:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f45a:	4b03      	ldr	r3, [pc, #12]	; (800f468 <SD_CheckStatus+0x38>)
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	b2db      	uxtb	r3, r3
}
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	24000021 	.word	0x24000021

0800f46c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f476:	f7ff ff21 	bl	800f2bc <BSP_SD_Init>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d107      	bne.n	800f490 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	4618      	mov	r0, r3
 800f484:	f7ff ffd4 	bl	800f430 <SD_CheckStatus>
 800f488:	4603      	mov	r3, r0
 800f48a:	461a      	mov	r2, r3
 800f48c:	4b04      	ldr	r3, [pc, #16]	; (800f4a0 <SD_initialize+0x34>)
 800f48e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f490:	4b03      	ldr	r3, [pc, #12]	; (800f4a0 <SD_initialize+0x34>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	b2db      	uxtb	r3, r3
}
 800f496:	4618      	mov	r0, r3
 800f498:	3708      	adds	r7, #8
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	24000021 	.word	0x24000021

0800f4a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f4ae:	79fb      	ldrb	r3, [r7, #7]
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7ff ffbd 	bl	800f430 <SD_CheckStatus>
 800f4b6:	4603      	mov	r3, r0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3708      	adds	r7, #8
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60b9      	str	r1, [r7, #8]
 800f4c8:	607a      	str	r2, [r7, #4]
 800f4ca:	603b      	str	r3, [r7, #0]
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f4d4:	f247 5030 	movw	r0, #30000	; 0x7530
 800f4d8:	f7ff ff8d 	bl	800f3f6 <SD_CheckStatusWithTimeout>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	da01      	bge.n	800f4e6 <SD_read+0x26>
  {
    return res;
 800f4e2:	7dfb      	ldrb	r3, [r7, #23]
 800f4e4:	e03b      	b.n	800f55e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	68b8      	ldr	r0, [r7, #8]
 800f4ec:	f7ff ff10 	bl	800f310 <BSP_SD_ReadBlocks_DMA>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d132      	bne.n	800f55c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f4f6:	4b1c      	ldr	r3, [pc, #112]	; (800f568 <SD_read+0xa8>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f4fc:	f7f2 faa4 	bl	8001a48 <HAL_GetTick>
 800f500:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f502:	bf00      	nop
 800f504:	4b18      	ldr	r3, [pc, #96]	; (800f568 <SD_read+0xa8>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d108      	bne.n	800f51e <SD_read+0x5e>
 800f50c:	f7f2 fa9c 	bl	8001a48 <HAL_GetTick>
 800f510:	4602      	mov	r2, r0
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	f247 522f 	movw	r2, #29999	; 0x752f
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d9f2      	bls.n	800f504 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800f51e:	4b12      	ldr	r3, [pc, #72]	; (800f568 <SD_read+0xa8>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d102      	bne.n	800f52c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f526:	2301      	movs	r3, #1
 800f528:	75fb      	strb	r3, [r7, #23]
 800f52a:	e017      	b.n	800f55c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f52c:	4b0e      	ldr	r3, [pc, #56]	; (800f568 <SD_read+0xa8>)
 800f52e:	2200      	movs	r2, #0
 800f530:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f532:	f7f2 fa89 	bl	8001a48 <HAL_GetTick>
 800f536:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f538:	e007      	b.n	800f54a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f53a:	f7ff ff1d 	bl	800f378 <BSP_SD_GetCardState>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d102      	bne.n	800f54a <SD_read+0x8a>
          {
            res = RES_OK;
 800f544:	2300      	movs	r3, #0
 800f546:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f548:	e008      	b.n	800f55c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f54a:	f7f2 fa7d 	bl	8001a48 <HAL_GetTick>
 800f54e:	4602      	mov	r2, r0
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	f247 522f 	movw	r2, #29999	; 0x752f
 800f558:	4293      	cmp	r3, r2
 800f55a:	d9ee      	bls.n	800f53a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3718      	adds	r7, #24
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	24000044 	.word	0x24000044

0800f56c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b086      	sub	sp, #24
 800f570:	af00      	add	r7, sp, #0
 800f572:	60b9      	str	r1, [r7, #8]
 800f574:	607a      	str	r2, [r7, #4]
 800f576:	603b      	str	r3, [r7, #0]
 800f578:	4603      	mov	r3, r0
 800f57a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f580:	4b24      	ldr	r3, [pc, #144]	; (800f614 <SD_write+0xa8>)
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f586:	f247 5030 	movw	r0, #30000	; 0x7530
 800f58a:	f7ff ff34 	bl	800f3f6 <SD_CheckStatusWithTimeout>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	da01      	bge.n	800f598 <SD_write+0x2c>
  {
    return res;
 800f594:	7dfb      	ldrb	r3, [r7, #23]
 800f596:	e038      	b.n	800f60a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f598:	683a      	ldr	r2, [r7, #0]
 800f59a:	6879      	ldr	r1, [r7, #4]
 800f59c:	68b8      	ldr	r0, [r7, #8]
 800f59e:	f7ff fed1 	bl	800f344 <BSP_SD_WriteBlocks_DMA>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d12f      	bne.n	800f608 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f5a8:	f7f2 fa4e 	bl	8001a48 <HAL_GetTick>
 800f5ac:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f5ae:	bf00      	nop
 800f5b0:	4b18      	ldr	r3, [pc, #96]	; (800f614 <SD_write+0xa8>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d108      	bne.n	800f5ca <SD_write+0x5e>
 800f5b8:	f7f2 fa46 	bl	8001a48 <HAL_GetTick>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	f247 522f 	movw	r2, #29999	; 0x752f
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d9f2      	bls.n	800f5b0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800f5ca:	4b12      	ldr	r3, [pc, #72]	; (800f614 <SD_write+0xa8>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d102      	bne.n	800f5d8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	75fb      	strb	r3, [r7, #23]
 800f5d6:	e017      	b.n	800f608 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f5d8:	4b0e      	ldr	r3, [pc, #56]	; (800f614 <SD_write+0xa8>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f5de:	f7f2 fa33 	bl	8001a48 <HAL_GetTick>
 800f5e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f5e4:	e007      	b.n	800f5f6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f5e6:	f7ff fec7 	bl	800f378 <BSP_SD_GetCardState>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d102      	bne.n	800f5f6 <SD_write+0x8a>
          {
            res = RES_OK;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	75fb      	strb	r3, [r7, #23]
            break;
 800f5f4:	e008      	b.n	800f608 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f5f6:	f7f2 fa27 	bl	8001a48 <HAL_GetTick>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	1ad3      	subs	r3, r2, r3
 800f600:	f247 522f 	movw	r2, #29999	; 0x752f
 800f604:	4293      	cmp	r3, r2
 800f606:	d9ee      	bls.n	800f5e6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f608:	7dfb      	ldrb	r3, [r7, #23]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3718      	adds	r7, #24
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	24000040 	.word	0x24000040

0800f618 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08c      	sub	sp, #48	; 0x30
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	4603      	mov	r3, r0
 800f620:	603a      	str	r2, [r7, #0]
 800f622:	71fb      	strb	r3, [r7, #7]
 800f624:	460b      	mov	r3, r1
 800f626:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f628:	2301      	movs	r3, #1
 800f62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f62e:	4b25      	ldr	r3, [pc, #148]	; (800f6c4 <SD_ioctl+0xac>)
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	f003 0301 	and.w	r3, r3, #1
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <SD_ioctl+0x28>
 800f63c:	2303      	movs	r3, #3
 800f63e:	e03c      	b.n	800f6ba <SD_ioctl+0xa2>

  switch (cmd)
 800f640:	79bb      	ldrb	r3, [r7, #6]
 800f642:	2b03      	cmp	r3, #3
 800f644:	d834      	bhi.n	800f6b0 <SD_ioctl+0x98>
 800f646:	a201      	add	r2, pc, #4	; (adr r2, 800f64c <SD_ioctl+0x34>)
 800f648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64c:	0800f65d 	.word	0x0800f65d
 800f650:	0800f665 	.word	0x0800f665
 800f654:	0800f67d 	.word	0x0800f67d
 800f658:	0800f697 	.word	0x0800f697
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f65c:	2300      	movs	r3, #0
 800f65e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f662:	e028      	b.n	800f6b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f664:	f107 0308 	add.w	r3, r7, #8
 800f668:	4618      	mov	r0, r3
 800f66a:	f7ff fe95 	bl	800f398 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f66e:	6a3a      	ldr	r2, [r7, #32]
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f674:	2300      	movs	r3, #0
 800f676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f67a:	e01c      	b.n	800f6b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f67c:	f107 0308 	add.w	r3, r7, #8
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff fe89 	bl	800f398 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f688:	b29a      	uxth	r2, r3
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f68e:	2300      	movs	r3, #0
 800f690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f694:	e00f      	b.n	800f6b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f696:	f107 0308 	add.w	r3, r7, #8
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7ff fe7c 	bl	800f398 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a2:	0a5a      	lsrs	r2, r3, #9
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f6ae:	e002      	b.n	800f6b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f6b0:	2304      	movs	r3, #4
 800f6b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f6b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3730      	adds	r7, #48	; 0x30
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	24000021 	.word	0x24000021

0800f6c8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f6cc:	4b03      	ldr	r3, [pc, #12]	; (800f6dc <BSP_SD_WriteCpltCallback+0x14>)
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	601a      	str	r2, [r3, #0]
}
 800f6d2:	bf00      	nop
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	24000040 	.word	0x24000040

0800f6e0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f6e4:	4b03      	ldr	r3, [pc, #12]	; (800f6f4 <BSP_SD_ReadCpltCallback+0x14>)
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]
}
 800f6ea:	bf00      	nop
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	24000044 	.word	0x24000044

0800f6f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b087      	sub	sp, #28
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	4613      	mov	r3, r2
 800f704:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f706:	2301      	movs	r3, #1
 800f708:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f70a:	2300      	movs	r3, #0
 800f70c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f70e:	4b1f      	ldr	r3, [pc, #124]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f710:	7a5b      	ldrb	r3, [r3, #9]
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	d131      	bne.n	800f77c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f718:	4b1c      	ldr	r3, [pc, #112]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f71a:	7a5b      	ldrb	r3, [r3, #9]
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	461a      	mov	r2, r3
 800f720:	4b1a      	ldr	r3, [pc, #104]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f722:	2100      	movs	r1, #0
 800f724:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f726:	4b19      	ldr	r3, [pc, #100]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f728:	7a5b      	ldrb	r3, [r3, #9]
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	4a17      	ldr	r2, [pc, #92]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f72e:	009b      	lsls	r3, r3, #2
 800f730:	4413      	add	r3, r2
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f736:	4b15      	ldr	r3, [pc, #84]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f738:	7a5b      	ldrb	r3, [r3, #9]
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	461a      	mov	r2, r3
 800f73e:	4b13      	ldr	r3, [pc, #76]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f740:	4413      	add	r3, r2
 800f742:	79fa      	ldrb	r2, [r7, #7]
 800f744:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f746:	4b11      	ldr	r3, [pc, #68]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f748:	7a5b      	ldrb	r3, [r3, #9]
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	1c5a      	adds	r2, r3, #1
 800f74e:	b2d1      	uxtb	r1, r2
 800f750:	4a0e      	ldr	r2, [pc, #56]	; (800f78c <FATFS_LinkDriverEx+0x94>)
 800f752:	7251      	strb	r1, [r2, #9]
 800f754:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f756:	7dbb      	ldrb	r3, [r7, #22]
 800f758:	3330      	adds	r3, #48	; 0x30
 800f75a:	b2da      	uxtb	r2, r3
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	3301      	adds	r3, #1
 800f764:	223a      	movs	r2, #58	; 0x3a
 800f766:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	3302      	adds	r3, #2
 800f76c:	222f      	movs	r2, #47	; 0x2f
 800f76e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	3303      	adds	r3, #3
 800f774:	2200      	movs	r2, #0
 800f776:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	371c      	adds	r7, #28
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	24000048 	.word	0x24000048

0800f790 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b082      	sub	sp, #8
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f79a:	2200      	movs	r2, #0
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7ff ffaa 	bl	800f6f8 <FATFS_LinkDriverEx>
 800f7a4:	4603      	mov	r3, r0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
	...

0800f7b0 <__libc_init_array>:
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	4d0d      	ldr	r5, [pc, #52]	; (800f7e8 <__libc_init_array+0x38>)
 800f7b4:	4c0d      	ldr	r4, [pc, #52]	; (800f7ec <__libc_init_array+0x3c>)
 800f7b6:	1b64      	subs	r4, r4, r5
 800f7b8:	10a4      	asrs	r4, r4, #2
 800f7ba:	2600      	movs	r6, #0
 800f7bc:	42a6      	cmp	r6, r4
 800f7be:	d109      	bne.n	800f7d4 <__libc_init_array+0x24>
 800f7c0:	4d0b      	ldr	r5, [pc, #44]	; (800f7f0 <__libc_init_array+0x40>)
 800f7c2:	4c0c      	ldr	r4, [pc, #48]	; (800f7f4 <__libc_init_array+0x44>)
 800f7c4:	f000 f820 	bl	800f808 <_init>
 800f7c8:	1b64      	subs	r4, r4, r5
 800f7ca:	10a4      	asrs	r4, r4, #2
 800f7cc:	2600      	movs	r6, #0
 800f7ce:	42a6      	cmp	r6, r4
 800f7d0:	d105      	bne.n	800f7de <__libc_init_array+0x2e>
 800f7d2:	bd70      	pop	{r4, r5, r6, pc}
 800f7d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7d8:	4798      	blx	r3
 800f7da:	3601      	adds	r6, #1
 800f7dc:	e7ee      	b.n	800f7bc <__libc_init_array+0xc>
 800f7de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7e2:	4798      	blx	r3
 800f7e4:	3601      	adds	r6, #1
 800f7e6:	e7f2      	b.n	800f7ce <__libc_init_array+0x1e>
 800f7e8:	0800f87c 	.word	0x0800f87c
 800f7ec:	0800f87c 	.word	0x0800f87c
 800f7f0:	0800f87c 	.word	0x0800f87c
 800f7f4:	0800f880 	.word	0x0800f880

0800f7f8 <memset>:
 800f7f8:	4402      	add	r2, r0
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d100      	bne.n	800f802 <memset+0xa>
 800f800:	4770      	bx	lr
 800f802:	f803 1b01 	strb.w	r1, [r3], #1
 800f806:	e7f9      	b.n	800f7fc <memset+0x4>

0800f808 <_init>:
 800f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80a:	bf00      	nop
 800f80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80e:	bc08      	pop	{r3}
 800f810:	469e      	mov	lr, r3
 800f812:	4770      	bx	lr

0800f814 <_fini>:
 800f814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f816:	bf00      	nop
 800f818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f81a:	bc08      	pop	{r3}
 800f81c:	469e      	mov	lr, r3
 800f81e:	4770      	bx	lr
