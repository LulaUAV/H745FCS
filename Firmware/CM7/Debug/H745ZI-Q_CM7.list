
H745ZI-Q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f518  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800f7b8  0800f7b8  0001f7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f888  0800f888  0001f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f890  0800f890  0001f890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f894  0800f894  0001f894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000188  20000000  0800f898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000663c  20000188  0800fa20  00020188  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200067c4  0800fa20  000267c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004137f  00000000  00000000  000201b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000704c  00000000  00000000  00061535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002108  00000000  00000000  00068588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ec0  00000000  00000000  0006a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004059f  00000000  00000000  0006c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ac9a  00000000  00000000  000acaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019165e  00000000  00000000  000d7789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00268de7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a34  00000000  00000000  00268e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000188 	.word	0x20000188
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f7a0 	.word	0x0800f7a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000018c 	.word	0x2000018c
 80002dc:	0800f7a0 	.word	0x0800f7a0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b2f      	ldr	r3, [pc, #188]	; (800069c <SystemInit+0xc4>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <SystemInit+0xc4>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <SystemInit+0xc4>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <SystemInit+0xc4>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemInit+0xc8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemInit+0xc8>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemInit+0xc8>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800060a:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemInit+0xc8>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4924      	ldr	r1, [pc, #144]	; (80006a0 <SystemInit+0xc8>)
 8000610:	4b24      	ldr	r3, [pc, #144]	; (80006a4 <SystemInit+0xcc>)
 8000612:	4013      	ands	r3, r2
 8000614:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemInit+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SystemInit+0xc8>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemInit+0xc8>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemInit+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <SystemInit+0xc8>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SystemInit+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <SystemInit+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <SystemInit+0xc8>)
 8000642:	2200      	movs	r2, #0
 8000644:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <SystemInit+0xc8>)
 8000648:	2200      	movs	r2, #0
 800064a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <SystemInit+0xc8>)
 800064e:	2200      	movs	r2, #0
 8000650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <SystemInit+0xc8>)
 8000654:	2200      	movs	r2, #0
 8000656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <SystemInit+0xc8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <SystemInit+0xc8>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <SystemInit+0xc8>)
 8000666:	2200      	movs	r2, #0
 8000668:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <SystemInit+0xd0>)
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <SystemInit+0xd0>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <SystemInit+0xd4>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <SystemInit+0xd8>)
 800067c:	4013      	ands	r3, r2
 800067e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000682:	d202      	bcs.n	800068a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <SystemInit+0xdc>)
 8000686:	2201      	movs	r2, #1
 8000688:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800068a:	4b04      	ldr	r3, [pc, #16]	; (800069c <SystemInit+0xc4>)
 800068c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000690:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	58024400 	.word	0x58024400
 80006a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006a8:	580000c0 	.word	0x580000c0
 80006ac:	5c001000 	.word	0x5c001000
 80006b0:	ffff0000 	.word	0xffff0000
 80006b4:	51008108 	.word	0x51008108

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_DMA_Init+0x4c>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <MX_DMA_Init+0x4c>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <MX_DMA_Init+0x4c>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2105      	movs	r1, #5
 80006e0:	200d      	movs	r0, #13
 80006e2:	f000 fda1 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006e6:	200d      	movs	r0, #13
 80006e8:	f000 fdb8 	bl	800125c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2105      	movs	r1, #5
 80006f0:	200e      	movs	r0, #14
 80006f2:	f000 fd99 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006f6:	200e      	movs	r0, #14
 80006f8:	f000 fdb0 	bl	800125c <HAL_NVIC_EnableIRQ>

}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58024400 	.word	0x58024400

08000708 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <MX_FREERTOS_Init+0x18>)
 800070e:	2100      	movs	r1, #0
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_FREERTOS_Init+0x1c>)
 8000712:	f00b fe0b 	bl	800c32c <osThreadNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a03      	ldr	r2, [pc, #12]	; (8000728 <MX_FREERTOS_Init+0x20>)
 800071a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	0800f834 	.word	0x0800f834
 8000724:	0800072d 	.word	0x0800072d
 8000728:	20004cd8 	.word	0x20004cd8

0800072c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000734:	f00e fb00 	bl	800ed38 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000738:	2001      	movs	r0, #1
 800073a:	f00b fe89 	bl	800c450 <osDelay>
 800073e:	e7fb      	b.n	8000738 <StartDefaultTask+0xc>

08000740 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	4a1f      	ldr	r2, [pc, #124]	; (80007cc <MX_GPIO_Init+0x8c>)
 800074e:	f043 0320 	orr.w	r3, r3, #32
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	f003 0320 	and.w	r3, r3, #32
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_GPIO_Init+0x8c>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	4a10      	ldr	r2, [pc, #64]	; (80007cc <MX_GPIO_Init+0x8c>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_GPIO_Init+0x8c>)
 8000794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_GPIO_Init+0x8c>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <MX_GPIO_Init+0x8c>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_GPIO_Init+0x8c>)
 80007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007d6:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <main+0x170>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d11b      	bne.n	800081a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007e2:	f3bf 8f4f 	dsb	sy
}
 80007e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e8:	f3bf 8f6f 	isb	sy
}
 80007ec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007ee:	4b54      	ldr	r3, [pc, #336]	; (8000940 <main+0x170>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007f6:	f3bf 8f4f 	dsb	sy
}
 80007fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007fc:	f3bf 8f6f 	isb	sy
}
 8000800:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000802:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <main+0x170>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a4e      	ldr	r2, [pc, #312]	; (8000940 <main+0x170>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800080e:	f3bf 8f4f 	dsb	sy
}
 8000812:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000814:	f3bf 8f6f 	isb	sy
}
 8000818:	e000      	b.n	800081c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800081a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800081c:	4b48      	ldr	r3, [pc, #288]	; (8000940 <main+0x170>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d138      	bne.n	800089a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000828:	4b45      	ldr	r3, [pc, #276]	; (8000940 <main+0x170>)
 800082a:	2200      	movs	r2, #0
 800082c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000830:	f3bf 8f4f 	dsb	sy
}
 8000834:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000836:	4b42      	ldr	r3, [pc, #264]	; (8000940 <main+0x170>)
 8000838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800083c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	0b5b      	lsrs	r3, r3, #13
 8000842:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000846:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000850:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	015a      	lsls	r2, r3, #5
 8000856:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800085a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000860:	4937      	ldr	r1, [pc, #220]	; (8000940 <main+0x170>)
 8000862:	4313      	orrs	r3, r2
 8000864:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1ef      	bne.n	8000852 <main+0x82>
    } while(sets-- != 0U);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	60fa      	str	r2, [r7, #12]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1e5      	bne.n	8000848 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800087c:	f3bf 8f4f 	dsb	sy
}
 8000880:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <main+0x170>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <main+0x170>)
 8000888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800088e:	f3bf 8f4f 	dsb	sy
}
 8000892:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000894:	f3bf 8f6f 	isb	sy
}
 8000898:	e000      	b.n	800089c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800089a:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800089c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a0:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008a2:	bf00      	nop
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <main+0x174>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d004      	beq.n	80008ba <main+0xea>
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	1e5a      	subs	r2, r3, #1
 80008b4:	617a      	str	r2, [r7, #20]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	dcf4      	bgt.n	80008a4 <main+0xd4>
  if ( timeout < 0 )
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	da01      	bge.n	80008c4 <main+0xf4>
  {
  Error_Handler();
 80008c0:	f000 f928 	bl	8000b14 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fb6c 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f83e 	bl	8000948 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008cc:	f000 f8c0 	bl	8000a50 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <main+0x174>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <main+0x174>)
 80008d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <main+0x174>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f003 f896 	bl	8003a20 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2000      	movs	r0, #0
 80008f8:	f003 f8ac 	bl	8003a54 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000900:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000902:	bf00      	nop
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <main+0x174>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800090c:	2b00      	cmp	r3, #0
 800090e:	d104      	bne.n	800091a <main+0x14a>
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	617a      	str	r2, [r7, #20]
 8000916:	2b00      	cmp	r3, #0
 8000918:	dcf4      	bgt.n	8000904 <main+0x134>
if ( timeout < 0 )
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	2b00      	cmp	r3, #0
 800091e:	da01      	bge.n	8000924 <main+0x154>
{
Error_Handler();
 8000920:	f000 f8f8 	bl	8000b14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f7ff ff0c 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 8000928:	f7ff fec6 	bl	80006b8 <MX_DMA_Init>
  MX_UART7_Init();
 800092c:	f000 f9f0 	bl	8000d10 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000930:	f00b fcb2 	bl	800c298 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000934:	f7ff fee8 	bl	8000708 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000938:	f00b fcd2 	bl	800c2e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093c:	e7fe      	b.n	800093c <main+0x16c>
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	58024400 	.word	0x58024400

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b09c      	sub	sp, #112	; 0x70
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	224c      	movs	r2, #76	; 0x4c
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f00e ff1a 	bl	800f790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f00e ff14 	bl	800f790 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000968:	2002      	movs	r0, #2
 800096a:	f004 fa87 	bl	8004e7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <SystemClock_Config+0xfc>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <SystemClock_Config+0xfc>)
 8000978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <SystemClock_Config+0xfc>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <SystemClock_Config+0x100>)
 800098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098c:	4a2e      	ldr	r2, [pc, #184]	; (8000a48 <SystemClock_Config+0x100>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <SystemClock_Config+0x100>)
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a0:	bf00      	nop
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <SystemClock_Config+0xfc>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ae:	d1f8      	bne.n	80009a2 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <SystemClock_Config+0x104>)
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f023 0303 	bic.w	r3, r3, #3
 80009b8:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <SystemClock_Config+0x104>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c0:	2301      	movs	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ce:	2302      	movs	r3, #2
 80009d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009d6:	233c      	movs	r3, #60	; 0x3c
 80009d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009da:	2302      	movs	r3, #2
 80009dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009de:	2305      	movs	r3, #5
 80009e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009e6:	230c      	movs	r3, #12
 80009e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 faaa 	bl	8004f50 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a02:	f000 f887 	bl	8000b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	233f      	movs	r3, #63	; 0x3f
 8000a08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a12:	2308      	movs	r3, #8
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a16:	2340      	movs	r3, #64	; 0x40
 8000a18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a24:	2340      	movs	r3, #64	; 0x40
 8000a26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fe9f 	bl	8005770 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a38:	f000 f86c 	bl	8000b14 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3770      	adds	r7, #112	; 0x70
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	58024800 	.word	0x58024800
 8000a48:	58000400 	.word	0x58000400
 8000a4c:	58024400 	.word	0x58024400

08000a50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0b0      	sub	sp, #192	; 0xc0
 8000a54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	22bc      	movs	r2, #188	; 0xbc
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f00e fe97 	bl	800f790 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <PeriphCommonClock_Config+0x9c>)
 8000a64:	607b      	str	r3, [r7, #4]
		  	  	  	  	  	  	  	  	  	|RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_USART3
											|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
											|RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;


  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000a6a:	2309      	movs	r3, #9
 8000a6c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a7a:	23c0      	movs	r3, #192	; 0xc0
 8000a7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000a82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24


  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8000a8c:	2309      	movs	r3, #9
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000a94:	2303      	movs	r3, #3
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 8000aa8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44

  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ac0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f005 fa1a 	bl	8005f0c <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <PeriphCommonClock_Config+0x92>
  {
    Error_Handler();
 8000ade:	f000 f819 	bl	8000b14 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	37c0      	adds	r7, #192	; 0xc0
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	000d100a 	.word	0x000d100a

08000af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d101      	bne.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b02:	f000 fa89 	bl	8001018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40001000 	.word	0x40001000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_MspInit+0x58>)
 8000b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <HAL_MspInit+0x58>)
 8000b32:	f043 0302 	orr.w	r3, r3, #2
 8000b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x58>)
 8000b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f06f 0001 	mvn.w	r0, #1
 8000b50:	f000 fb6a 	bl	8001228 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2105      	movs	r1, #5
 8000b58:	2041      	movs	r0, #65	; 0x41
 8000b5a:	f000 fb65 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8000b5e:	2041      	movs	r0, #65	; 0x41
 8000b60:	f000 fb7c 	bl	800125c <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2105      	movs	r1, #5
 8000b68:	207d      	movs	r0, #125	; 0x7d
 8000b6a:	f000 fb5d 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000b6e:	207d      	movs	r0, #125	; 0x7d
 8000b70:	f000 fb74 	bl	800125c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	58024400 	.word	0x58024400

08000b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	; 0x40
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b0f      	cmp	r3, #15
 8000b8c:	d827      	bhi.n	8000bde <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	2036      	movs	r0, #54	; 0x36
 8000b94:	f000 fb48 	bl	8001228 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	; 0x36
 8000b9a:	f000 fb5f 	bl	800125c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000b9e:	4a29      	ldr	r2, [pc, #164]	; (8000c44 <HAL_InitTick+0xc4>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <HAL_InitTick+0xc8>)
 8000ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000baa:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <HAL_InitTick+0xc8>)
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_InitTick+0xc8>)
 8000bb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc2:	f107 0210 	add.w	r2, r7, #16
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f005 f95b 	bl	8005e88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <HAL_InitTick+0x6a>
 8000bdc:	e001      	b.n	8000be2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e02b      	b.n	8000c3a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be2:	f005 f925 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8000be6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000be8:	e004      	b.n	8000bf4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bea:	f005 f921 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf6:	4a15      	ldr	r2, [pc, #84]	; (8000c4c <HAL_InitTick+0xcc>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	0c9b      	lsrs	r3, r3, #18
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_InitTick+0xd0>)
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <HAL_InitTick+0xd4>)
 8000c06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_InitTick+0xd0>)
 8000c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c10:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_InitTick+0xd0>)
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_InitTick+0xd0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_InitTick+0xd0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c22:	480b      	ldr	r0, [pc, #44]	; (8000c50 <HAL_InitTick+0xd0>)
 8000c24:	f006 fcd4 	bl	80075d0 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d104      	bne.n	8000c38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <HAL_InitTick+0xd0>)
 8000c30:	f006 fd30 	bl	8007694 <HAL_TIM_Base_Start_IT>
 8000c34:	4603      	mov	r3, r0
 8000c36:	e000      	b.n	8000c3a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3740      	adds	r7, #64	; 0x40
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	431bde83 	.word	0x431bde83
 8000c50:	20004cdc 	.word	0x20004cdc
 8000c54:	40001000 	.word	0x40001000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <DMA1_Stream2_IRQHandler+0x10>)
 8000c92:	f001 fbaf 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20004e30 	.word	0x20004e30

08000ca0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA1_Stream3_IRQHandler+0x10>)
 8000ca6:	f001 fba5 	bl	80023f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20004db8 	.word	0x20004db8

08000cb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
     HAL_TIM_IRQHandler(&htim6);
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <TIM6_DAC_IRQHandler+0x14>)
 8000cba:	f006 fd5b 	bl	8007774 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cbe:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM6_DAC_IRQHandler+0x14>)
 8000cc0:	f006 fd58 	bl	8007774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20004cdc 	.word	0x20004cdc

08000ccc <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <UART7_IRQHandler+0x10>)
 8000ce2:	f006 ff97 	bl	8007c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20004d28 	.word	0x20004d28

08000cf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <OTG_FS_IRQHandler+0x10>)
 8000cf6:	f003 f83c 	bl	8003d72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200063bc 	.word	0x200063bc

08000d04 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000d08:	f002 feb8 	bl	8003a7c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart7_tx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d16:	4a23      	ldr	r2, [pc, #140]	; (8000da4 <MX_UART7_Init+0x94>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 921600;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d1c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000d20:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d46:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d52:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d5a:	f006 ff0b 	bl	8007b74 <HAL_UART_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000d64:	f7ff fed6 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d68:	2100      	movs	r1, #0
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d6c:	f008 f9b3 	bl	80090d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000d76:	f7ff fecd 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d7e:	f008 f9e8 	bl	8009152 <HAL_UARTEx_SetRxFifoThreshold>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000d88:	f7ff fec4 	bl	8000b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_UART7_Init+0x90>)
 8000d8e:	f008 f969 	bl	8009064 <HAL_UARTEx_DisableFifoMode>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f7ff febc 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20004d28 	.word	0x20004d28
 8000da4:	40007800 	.word	0x40007800

08000da8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b8      	sub	sp, #224	; 0xe0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	22bc      	movs	r2, #188	; 0xbc
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00e fce1 	bl	800f790 <memset>
  if(uartHandle->Instance==UART7)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a57      	ldr	r2, [pc, #348]	; (8000f30 <HAL_UART_MspInit+0x188>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	f040 80a7 	bne.w	8000f28 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4618      	mov	r0, r3
 8000dea:	f005 f88f 	bl	8005f0c <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000df4:	f7ff fe8e 	bl	8000b14 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000df8:	4b4e      	ldr	r3, [pc, #312]	; (8000f34 <HAL_UART_MspInit+0x18c>)
 8000dfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000dfe:	4a4d      	ldr	r2, [pc, #308]	; (8000f34 <HAL_UART_MspInit+0x18c>)
 8000e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e08:	4b4a      	ldr	r3, [pc, #296]	; (8000f34 <HAL_UART_MspInit+0x18c>)
 8000e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e16:	4b47      	ldr	r3, [pc, #284]	; (8000f34 <HAL_UART_MspInit+0x18c>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a45      	ldr	r2, [pc, #276]	; (8000f34 <HAL_UART_MspInit+0x18c>)
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <HAL_UART_MspInit+0x18c>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e56:	4619      	mov	r1, r3
 8000e58:	4837      	ldr	r0, [pc, #220]	; (8000f38 <HAL_UART_MspInit+0x190>)
 8000e5a:	f002 fc31 	bl	80036c0 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream2;
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e60:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <HAL_UART_MspInit+0x198>)
 8000e62:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8000e64:	4b35      	ldr	r3, [pc, #212]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e66:	224f      	movs	r2, #79	; 0x4f
 8000e68:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e6a:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e70:	4b32      	ldr	r3, [pc, #200]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e76:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e7c:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e90:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e96:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e98:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8000e9e:	4827      	ldr	r0, [pc, #156]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000ea0:	f000 f9ea 	bl	8001278 <HAL_DMA_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8000eaa:	f7ff fe33 	bl	8000b14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000eb2:	67da      	str	r2, [r3, #124]	; 0x7c
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <HAL_UART_MspInit+0x194>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7_TX Init */
    hdma_uart7_tx.Instance = DMA1_Stream3;
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ebc:	4a22      	ldr	r2, [pc, #136]	; (8000f48 <HAL_UART_MspInit+0x1a0>)
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ec2:	2250      	movs	r2, #80	; 0x50
 8000ec4:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ec8:	2240      	movs	r2, #64	; 0x40
 8000eca:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed8:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_CIRCULAR;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef4:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000efe:	f000 f9bb 	bl	8001278 <HAL_DMA_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8000f08:	f7ff fe04 	bl	8000b14 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000f10:	679a      	str	r2, [r3, #120]	; 0x78
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <HAL_UART_MspInit+0x19c>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	2052      	movs	r0, #82	; 0x52
 8000f1e:	f000 f983 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8000f22:	2052      	movs	r0, #82	; 0x52
 8000f24:	f000 f99a 	bl	800125c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
}
 8000f28:	bf00      	nop
 8000f2a:	37e0      	adds	r7, #224	; 0xe0
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40007800 	.word	0x40007800
 8000f34:	58024400 	.word	0x58024400
 8000f38:	58021400 	.word	0x58021400
 8000f3c:	20004e30 	.word	0x20004e30
 8000f40:	40020040 	.word	0x40020040
 8000f44:	20004db8 	.word	0x20004db8
 8000f48:	40020058 	.word	0x40020058

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
  ldr  r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f76:	f7ff fb2f 	bl	80005d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f00e fbd7 	bl	800f72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fc27 	bl	80007d0 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f88:	0800f898 	.word	0x0800f898
  ldr  r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f90:	20000188 	.word	0x20000188
  ldr  r2, =_sbss
 8000f94:	20000188 	.word	0x20000188
  ldr  r3, = _ebss
 8000f98:	200067c4 	.word	0x200067c4

08000f9c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC3_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f933 	bl	8001212 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fac:	f004 fd96 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	4913      	ldr	r1, [pc, #76]	; (800100c <HAL_Init+0x6c>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_Init+0x68>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_Init+0x6c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_Init+0x70>)
 8000fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_Init+0x74>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff fdc8 	bl	8000b80 <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e002      	b.n	8001000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffa:	f7ff fd93 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400
 800100c:	0800f824 	.word	0x0800f824
 8001010:	20000004 	.word	0x20000004
 8001014:	20000000 	.word	0x20000000

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20004ea8 	.word	0x20004ea8

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20004ea8 	.word	0x20004ea8

08001058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff ffee 	bl	8001040 <HAL_GetTick>
 8001064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001070:	d005      	beq.n	800107e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_Delay+0x44>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800107e:	bf00      	nop
 8001080:	f7ff ffde 	bl	8001040 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	429a      	cmp	r2, r3
 800108e:	d8f7      	bhi.n	8001080 <HAL_Delay+0x28>
  {
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000000c 	.word	0x2000000c

080010a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetREVID+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	0c1b      	lsrs	r3, r3, #16
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	5c001000 	.word	0x5c001000

080010b8 <__NVIC_SetPriorityGrouping>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	05fa0000 	.word	0x05fa0000

08001100 <__NVIC_GetPriorityGrouping>:
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff4c 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001236:	f7ff ff63 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800123a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f7ff ffb3 	bl	80011ac <NVIC_EncodePriority>
 8001246:	4602      	mov	r2, r0
 8001248:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff82 	bl	8001158 <__NVIC_SetPriority>
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff56 	bl	800111c <__NVIC_EnableIRQ>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff fede 	bl	8001040 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e316      	b.n	80018be <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a66      	ldr	r2, [pc, #408]	; (8001430 <HAL_DMA_Init+0x1b8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d04a      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a65      	ldr	r2, [pc, #404]	; (8001434 <HAL_DMA_Init+0x1bc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d045      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a63      	ldr	r2, [pc, #396]	; (8001438 <HAL_DMA_Init+0x1c0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d040      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a62      	ldr	r2, [pc, #392]	; (800143c <HAL_DMA_Init+0x1c4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d03b      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a60      	ldr	r2, [pc, #384]	; (8001440 <HAL_DMA_Init+0x1c8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d036      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a5f      	ldr	r2, [pc, #380]	; (8001444 <HAL_DMA_Init+0x1cc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d031      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a5d      	ldr	r2, [pc, #372]	; (8001448 <HAL_DMA_Init+0x1d0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d02c      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a5c      	ldr	r2, [pc, #368]	; (800144c <HAL_DMA_Init+0x1d4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d027      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a5a      	ldr	r2, [pc, #360]	; (8001450 <HAL_DMA_Init+0x1d8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d022      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a59      	ldr	r2, [pc, #356]	; (8001454 <HAL_DMA_Init+0x1dc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d01d      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a57      	ldr	r2, [pc, #348]	; (8001458 <HAL_DMA_Init+0x1e0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d018      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_DMA_Init+0x1e4>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a54      	ldr	r2, [pc, #336]	; (8001460 <HAL_DMA_Init+0x1e8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00e      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_DMA_Init+0x1ec>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d009      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_DMA_Init+0x1f0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d004      	beq.n	8001330 <HAL_DMA_Init+0xb8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a50      	ldr	r2, [pc, #320]	; (800146c <HAL_DMA_Init+0x1f4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_DMA_Init+0xbc>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <HAL_DMA_Init+0xbe>
 8001334:	2300      	movs	r3, #0
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 813b 	beq.w	80015b2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a37      	ldr	r2, [pc, #220]	; (8001430 <HAL_DMA_Init+0x1b8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d04a      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a36      	ldr	r2, [pc, #216]	; (8001434 <HAL_DMA_Init+0x1bc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d045      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a34      	ldr	r2, [pc, #208]	; (8001438 <HAL_DMA_Init+0x1c0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d040      	beq.n	80013ec <HAL_DMA_Init+0x174>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <HAL_DMA_Init+0x1c4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d03b      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a31      	ldr	r2, [pc, #196]	; (8001440 <HAL_DMA_Init+0x1c8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d036      	beq.n	80013ec <HAL_DMA_Init+0x174>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_DMA_Init+0x1cc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d031      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_DMA_Init+0x1d0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d02c      	beq.n	80013ec <HAL_DMA_Init+0x174>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a2d      	ldr	r2, [pc, #180]	; (800144c <HAL_DMA_Init+0x1d4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d027      	beq.n	80013ec <HAL_DMA_Init+0x174>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <HAL_DMA_Init+0x1d8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d022      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_DMA_Init+0x1dc>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d01d      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_DMA_Init+0x1e0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d018      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_DMA_Init+0x1e4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d013      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <HAL_DMA_Init+0x1e8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00e      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_DMA_Init+0x1ec>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d009      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_DMA_Init+0x1f0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d004      	beq.n	80013ec <HAL_DMA_Init+0x174>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a21      	ldr	r2, [pc, #132]	; (800146c <HAL_DMA_Init+0x1f4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d108      	bne.n	80013fe <HAL_DMA_Init+0x186>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e007      	b.n	800140e <HAL_DMA_Init+0x196>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 0201 	bic.w	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800140e:	e02f      	b.n	8001470 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001410:	f7ff fe16 	bl	8001040 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b05      	cmp	r3, #5
 800141c:	d928      	bls.n	8001470 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e246      	b.n	80018be <HAL_DMA_Init+0x646>
 8001430:	40020010 	.word	0x40020010
 8001434:	40020028 	.word	0x40020028
 8001438:	40020040 	.word	0x40020040
 800143c:	40020058 	.word	0x40020058
 8001440:	40020070 	.word	0x40020070
 8001444:	40020088 	.word	0x40020088
 8001448:	400200a0 	.word	0x400200a0
 800144c:	400200b8 	.word	0x400200b8
 8001450:	40020410 	.word	0x40020410
 8001454:	40020428 	.word	0x40020428
 8001458:	40020440 	.word	0x40020440
 800145c:	40020458 	.word	0x40020458
 8001460:	40020470 	.word	0x40020470
 8001464:	40020488 	.word	0x40020488
 8001468:	400204a0 	.word	0x400204a0
 800146c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1c8      	bne.n	8001410 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4b83      	ldr	r3, [pc, #524]	; (8001698 <HAL_DMA_Init+0x420>)
 800148a:	4013      	ands	r3, r2
 800148c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001496:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d107      	bne.n	80014d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4313      	orrs	r3, r2
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80014d4:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_DMA_Init+0x424>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b71      	ldr	r3, [pc, #452]	; (80016a0 <HAL_DMA_Init+0x428>)
 80014da:	4013      	ands	r3, r2
 80014dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e0:	d328      	bcc.n	8001534 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b28      	cmp	r3, #40	; 0x28
 80014e8:	d903      	bls.n	80014f2 <HAL_DMA_Init+0x27a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b2e      	cmp	r3, #46	; 0x2e
 80014f0:	d917      	bls.n	8001522 <HAL_DMA_Init+0x2aa>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b3e      	cmp	r3, #62	; 0x3e
 80014f8:	d903      	bls.n	8001502 <HAL_DMA_Init+0x28a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b42      	cmp	r3, #66	; 0x42
 8001500:	d90f      	bls.n	8001522 <HAL_DMA_Init+0x2aa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b46      	cmp	r3, #70	; 0x46
 8001508:	d903      	bls.n	8001512 <HAL_DMA_Init+0x29a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b48      	cmp	r3, #72	; 0x48
 8001510:	d907      	bls.n	8001522 <HAL_DMA_Init+0x2aa>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b4e      	cmp	r3, #78	; 0x4e
 8001518:	d905      	bls.n	8001526 <HAL_DMA_Init+0x2ae>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b52      	cmp	r3, #82	; 0x52
 8001520:	d801      	bhi.n	8001526 <HAL_DMA_Init+0x2ae>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_DMA_Init+0x2b0>
 8001526:	2300      	movs	r3, #0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001532:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f023 0307 	bic.w	r3, r3, #7
 800154a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	4313      	orrs	r3, r2
 8001554:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	2b04      	cmp	r3, #4
 800155c:	d117      	bne.n	800158e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4313      	orrs	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00e      	beq.n	800158e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f001 ff1b 	bl	80033ac <DMA_CheckFifoParam>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e197      	b.n	80018be <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f001 fe56 	bl	8003248 <DMA_CalcBaseAndBitshift>
 800159c:	4603      	mov	r3, r0
 800159e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	223f      	movs	r2, #63	; 0x3f
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e0cd      	b.n	800174e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a3b      	ldr	r2, [pc, #236]	; (80016a4 <HAL_DMA_Init+0x42c>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <HAL_DMA_Init+0x430>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a38      	ldr	r2, [pc, #224]	; (80016ac <HAL_DMA_Init+0x434>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d018      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a36      	ldr	r2, [pc, #216]	; (80016b0 <HAL_DMA_Init+0x438>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <HAL_DMA_Init+0x43c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00e      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <HAL_DMA_Init+0x440>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a32      	ldr	r2, [pc, #200]	; (80016bc <HAL_DMA_Init+0x444>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_DMA_Init+0x38a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <HAL_DMA_Init+0x448>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Init+0x38e>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_DMA_Init+0x390>
 8001606:	2300      	movs	r3, #0
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8097 	beq.w	800173c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a24      	ldr	r2, [pc, #144]	; (80016a4 <HAL_DMA_Init+0x42c>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d021      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a22      	ldr	r2, [pc, #136]	; (80016a8 <HAL_DMA_Init+0x430>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d01c      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <HAL_DMA_Init+0x434>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d017      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_DMA_Init+0x438>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d012      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_DMA_Init+0x43c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00d      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <HAL_DMA_Init+0x440>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d008      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_DMA_Init+0x444>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d003      	beq.n	800165c <HAL_DMA_Init+0x3e4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_DMA_Init+0x448>)
 800165a:	4293      	cmp	r3, r2
 800165c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2202      	movs	r2, #2
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_DMA_Init+0x44c>)
 800167a:	4013      	ands	r3, r2
 800167c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b40      	cmp	r3, #64	; 0x40
 8001684:	d020      	beq.n	80016c8 <HAL_DMA_Init+0x450>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b80      	cmp	r3, #128	; 0x80
 800168c:	d102      	bne.n	8001694 <HAL_DMA_Init+0x41c>
 800168e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001692:	e01a      	b.n	80016ca <HAL_DMA_Init+0x452>
 8001694:	2300      	movs	r3, #0
 8001696:	e018      	b.n	80016ca <HAL_DMA_Init+0x452>
 8001698:	fe10803f 	.word	0xfe10803f
 800169c:	5c001000 	.word	0x5c001000
 80016a0:	ffff0000 	.word	0xffff0000
 80016a4:	58025408 	.word	0x58025408
 80016a8:	5802541c 	.word	0x5802541c
 80016ac:	58025430 	.word	0x58025430
 80016b0:	58025444 	.word	0x58025444
 80016b4:	58025458 	.word	0x58025458
 80016b8:	5802546c 	.word	0x5802546c
 80016bc:	58025480 	.word	0x58025480
 80016c0:	58025494 	.word	0x58025494
 80016c4:	fffe000f 	.word	0xfffe000f
 80016c8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68d2      	ldr	r2, [r2, #12]
 80016ce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80016d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80016e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80016e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016f8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b6e      	ldr	r3, [pc, #440]	; (80018c8 <HAL_DMA_Init+0x650>)
 8001710:	4413      	add	r3, r2
 8001712:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_DMA_Init+0x654>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	009a      	lsls	r2, r3, #2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f001 fd91 	bl	8003248 <DMA_CalcBaseAndBitshift>
 8001726:	4603      	mov	r3, r0
 8001728:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2201      	movs	r2, #1
 8001734:	409a      	lsls	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	e008      	b.n	800174e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0b7      	b.n	80018be <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a5f      	ldr	r2, [pc, #380]	; (80018d0 <HAL_DMA_Init+0x658>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d072      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a5d      	ldr	r2, [pc, #372]	; (80018d4 <HAL_DMA_Init+0x65c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d06d      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a5c      	ldr	r2, [pc, #368]	; (80018d8 <HAL_DMA_Init+0x660>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d068      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a5a      	ldr	r2, [pc, #360]	; (80018dc <HAL_DMA_Init+0x664>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d063      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a59      	ldr	r2, [pc, #356]	; (80018e0 <HAL_DMA_Init+0x668>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d05e      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <HAL_DMA_Init+0x66c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d059      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a56      	ldr	r2, [pc, #344]	; (80018e8 <HAL_DMA_Init+0x670>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d054      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <HAL_DMA_Init+0x674>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d04f      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a53      	ldr	r2, [pc, #332]	; (80018f0 <HAL_DMA_Init+0x678>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d04a      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a51      	ldr	r2, [pc, #324]	; (80018f4 <HAL_DMA_Init+0x67c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d045      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a50      	ldr	r2, [pc, #320]	; (80018f8 <HAL_DMA_Init+0x680>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d040      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a4e      	ldr	r2, [pc, #312]	; (80018fc <HAL_DMA_Init+0x684>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d03b      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a4d      	ldr	r2, [pc, #308]	; (8001900 <HAL_DMA_Init+0x688>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d036      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a4b      	ldr	r2, [pc, #300]	; (8001904 <HAL_DMA_Init+0x68c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d031      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_DMA_Init+0x690>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d02c      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_DMA_Init+0x694>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d027      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a47      	ldr	r2, [pc, #284]	; (8001910 <HAL_DMA_Init+0x698>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d022      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_DMA_Init+0x69c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01d      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a44      	ldr	r2, [pc, #272]	; (8001918 <HAL_DMA_Init+0x6a0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d018      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a42      	ldr	r2, [pc, #264]	; (800191c <HAL_DMA_Init+0x6a4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_DMA_Init+0x6a8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00e      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a3f      	ldr	r2, [pc, #252]	; (8001924 <HAL_DMA_Init+0x6ac>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d009      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <HAL_DMA_Init+0x6b0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Init+0x5c6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a3c      	ldr	r2, [pc, #240]	; (800192c <HAL_DMA_Init+0x6b4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Init+0x5ca>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_DMA_Init+0x5cc>
 8001842:	2300      	movs	r3, #0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d032      	beq.n	80018ae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f001 fe2b 	bl	80034a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b80      	cmp	r3, #128	; 0x80
 8001854:	d102      	bne.n	800185c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001870:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d010      	beq.n	800189c <HAL_DMA_Init+0x624>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b08      	cmp	r3, #8
 8001880:	d80c      	bhi.n	800189c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f001 fea8 	bl	80035d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	e008      	b.n	80018ae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	a7fdabf8 	.word	0xa7fdabf8
 80018cc:	cccccccd 	.word	0xcccccccd
 80018d0:	40020010 	.word	0x40020010
 80018d4:	40020028 	.word	0x40020028
 80018d8:	40020040 	.word	0x40020040
 80018dc:	40020058 	.word	0x40020058
 80018e0:	40020070 	.word	0x40020070
 80018e4:	40020088 	.word	0x40020088
 80018e8:	400200a0 	.word	0x400200a0
 80018ec:	400200b8 	.word	0x400200b8
 80018f0:	40020410 	.word	0x40020410
 80018f4:	40020428 	.word	0x40020428
 80018f8:	40020440 	.word	0x40020440
 80018fc:	40020458 	.word	0x40020458
 8001900:	40020470 	.word	0x40020470
 8001904:	40020488 	.word	0x40020488
 8001908:	400204a0 	.word	0x400204a0
 800190c:	400204b8 	.word	0x400204b8
 8001910:	58025408 	.word	0x58025408
 8001914:	5802541c 	.word	0x5802541c
 8001918:	58025430 	.word	0x58025430
 800191c:	58025444 	.word	0x58025444
 8001920:	58025458 	.word	0x58025458
 8001924:	5802546c 	.word	0x5802546c
 8001928:	58025480 	.word	0x58025480
 800192c:	58025494 	.word	0x58025494

08001930 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff fb82 	bl	8001040 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e2dc      	b.n	8001f02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d008      	beq.n	8001966 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e2cd      	b.n	8001f02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a76      	ldr	r2, [pc, #472]	; (8001b44 <HAL_DMA_Abort+0x214>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d04a      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a74      	ldr	r2, [pc, #464]	; (8001b48 <HAL_DMA_Abort+0x218>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d045      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a73      	ldr	r2, [pc, #460]	; (8001b4c <HAL_DMA_Abort+0x21c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d040      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a71      	ldr	r2, [pc, #452]	; (8001b50 <HAL_DMA_Abort+0x220>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d03b      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a70      	ldr	r2, [pc, #448]	; (8001b54 <HAL_DMA_Abort+0x224>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d036      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <HAL_DMA_Abort+0x228>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d031      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6d      	ldr	r2, [pc, #436]	; (8001b5c <HAL_DMA_Abort+0x22c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d02c      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a6b      	ldr	r2, [pc, #428]	; (8001b60 <HAL_DMA_Abort+0x230>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d027      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <HAL_DMA_Abort+0x234>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a68      	ldr	r2, [pc, #416]	; (8001b68 <HAL_DMA_Abort+0x238>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01d      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a67      	ldr	r2, [pc, #412]	; (8001b6c <HAL_DMA_Abort+0x23c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d018      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a65      	ldr	r2, [pc, #404]	; (8001b70 <HAL_DMA_Abort+0x240>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a64      	ldr	r2, [pc, #400]	; (8001b74 <HAL_DMA_Abort+0x244>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00e      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a62      	ldr	r2, [pc, #392]	; (8001b78 <HAL_DMA_Abort+0x248>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a61      	ldr	r2, [pc, #388]	; (8001b7c <HAL_DMA_Abort+0x24c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_DMA_Abort+0xd6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a5f      	ldr	r2, [pc, #380]	; (8001b80 <HAL_DMA_Abort+0x250>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_DMA_Abort+0xda>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_DMA_Abort+0xdc>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 021e 	bic.w	r2, r2, #30
 8001a1e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a2e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e00a      	b.n	8001a4e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 020e 	bic.w	r2, r2, #14
 8001a46:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a3c      	ldr	r2, [pc, #240]	; (8001b44 <HAL_DMA_Abort+0x214>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d072      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a3a      	ldr	r2, [pc, #232]	; (8001b48 <HAL_DMA_Abort+0x218>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d06d      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a39      	ldr	r2, [pc, #228]	; (8001b4c <HAL_DMA_Abort+0x21c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d068      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a37      	ldr	r2, [pc, #220]	; (8001b50 <HAL_DMA_Abort+0x220>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d063      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a36      	ldr	r2, [pc, #216]	; (8001b54 <HAL_DMA_Abort+0x224>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d05e      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <HAL_DMA_Abort+0x228>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d059      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a33      	ldr	r2, [pc, #204]	; (8001b5c <HAL_DMA_Abort+0x22c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d054      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <HAL_DMA_Abort+0x230>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d04f      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a30      	ldr	r2, [pc, #192]	; (8001b64 <HAL_DMA_Abort+0x234>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d04a      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <HAL_DMA_Abort+0x238>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d045      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_DMA_Abort+0x23c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d040      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <HAL_DMA_Abort+0x240>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d03b      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_DMA_Abort+0x244>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d036      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_DMA_Abort+0x248>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d031      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a27      	ldr	r2, [pc, #156]	; (8001b7c <HAL_DMA_Abort+0x24c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d02c      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_DMA_Abort+0x250>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d027      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_DMA_Abort+0x254>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d022      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_DMA_Abort+0x258>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01d      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <HAL_DMA_Abort+0x25c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d018      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_DMA_Abort+0x260>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <HAL_DMA_Abort+0x264>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00e      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_DMA_Abort+0x268>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d009      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_DMA_Abort+0x26c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d004      	beq.n	8001b3e <HAL_DMA_Abort+0x20e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_DMA_Abort+0x270>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d132      	bne.n	8001ba4 <HAL_DMA_Abort+0x274>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e031      	b.n	8001ba6 <HAL_DMA_Abort+0x276>
 8001b42:	bf00      	nop
 8001b44:	40020010 	.word	0x40020010
 8001b48:	40020028 	.word	0x40020028
 8001b4c:	40020040 	.word	0x40020040
 8001b50:	40020058 	.word	0x40020058
 8001b54:	40020070 	.word	0x40020070
 8001b58:	40020088 	.word	0x40020088
 8001b5c:	400200a0 	.word	0x400200a0
 8001b60:	400200b8 	.word	0x400200b8
 8001b64:	40020410 	.word	0x40020410
 8001b68:	40020428 	.word	0x40020428
 8001b6c:	40020440 	.word	0x40020440
 8001b70:	40020458 	.word	0x40020458
 8001b74:	40020470 	.word	0x40020470
 8001b78:	40020488 	.word	0x40020488
 8001b7c:	400204a0 	.word	0x400204a0
 8001b80:	400204b8 	.word	0x400204b8
 8001b84:	58025408 	.word	0x58025408
 8001b88:	5802541c 	.word	0x5802541c
 8001b8c:	58025430 	.word	0x58025430
 8001b90:	58025444 	.word	0x58025444
 8001b94:	58025458 	.word	0x58025458
 8001b98:	5802546c 	.word	0x5802546c
 8001b9c:	58025480 	.word	0x58025480
 8001ba0:	58025494 	.word	0x58025494
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6d      	ldr	r2, [pc, #436]	; (8001d74 <HAL_DMA_Abort+0x444>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d04a      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6b      	ldr	r2, [pc, #428]	; (8001d78 <HAL_DMA_Abort+0x448>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d045      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6a      	ldr	r2, [pc, #424]	; (8001d7c <HAL_DMA_Abort+0x44c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d040      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a68      	ldr	r2, [pc, #416]	; (8001d80 <HAL_DMA_Abort+0x450>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d03b      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a67      	ldr	r2, [pc, #412]	; (8001d84 <HAL_DMA_Abort+0x454>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d036      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_DMA_Abort+0x458>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d031      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a64      	ldr	r2, [pc, #400]	; (8001d8c <HAL_DMA_Abort+0x45c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d02c      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a62      	ldr	r2, [pc, #392]	; (8001d90 <HAL_DMA_Abort+0x460>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d027      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a61      	ldr	r2, [pc, #388]	; (8001d94 <HAL_DMA_Abort+0x464>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a5f      	ldr	r2, [pc, #380]	; (8001d98 <HAL_DMA_Abort+0x468>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01d      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a5e      	ldr	r2, [pc, #376]	; (8001d9c <HAL_DMA_Abort+0x46c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d018      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a5c      	ldr	r2, [pc, #368]	; (8001da0 <HAL_DMA_Abort+0x470>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a5b      	ldr	r2, [pc, #364]	; (8001da4 <HAL_DMA_Abort+0x474>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00e      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <HAL_DMA_Abort+0x478>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a58      	ldr	r2, [pc, #352]	; (8001dac <HAL_DMA_Abort+0x47c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d004      	beq.n	8001c5a <HAL_DMA_Abort+0x32a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a56      	ldr	r2, [pc, #344]	; (8001db0 <HAL_DMA_Abort+0x480>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d108      	bne.n	8001c6c <HAL_DMA_Abort+0x33c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	e007      	b.n	8001c7c <HAL_DMA_Abort+0x34c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c7c:	e013      	b.n	8001ca6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c7e:	f7ff f9df 	bl	8001040 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d90c      	bls.n	8001ca6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e12d      	b.n	8001f02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e5      	bne.n	8001c7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <HAL_DMA_Abort+0x444>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d04a      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_DMA_Abort+0x448>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d045      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2c      	ldr	r2, [pc, #176]	; (8001d7c <HAL_DMA_Abort+0x44c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d040      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <HAL_DMA_Abort+0x450>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d03b      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_DMA_Abort+0x454>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d036      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_DMA_Abort+0x458>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a26      	ldr	r2, [pc, #152]	; (8001d8c <HAL_DMA_Abort+0x45c>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d02c      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a24      	ldr	r2, [pc, #144]	; (8001d90 <HAL_DMA_Abort+0x460>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d027      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_DMA_Abort+0x464>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <HAL_DMA_Abort+0x468>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01d      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_DMA_Abort+0x46c>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_DMA_Abort+0x470>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_DMA_Abort+0x474>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <HAL_DMA_Abort+0x478>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_DMA_Abort+0x47c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Abort+0x422>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a18      	ldr	r2, [pc, #96]	; (8001db0 <HAL_DMA_Abort+0x480>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_DMA_Abort+0x426>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_DMA_Abort+0x428>
 8001d56:	2300      	movs	r3, #0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d02b      	beq.n	8001db4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	223f      	movs	r2, #63	; 0x3f
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	e02a      	b.n	8001dca <HAL_DMA_Abort+0x49a>
 8001d74:	40020010 	.word	0x40020010
 8001d78:	40020028 	.word	0x40020028
 8001d7c:	40020040 	.word	0x40020040
 8001d80:	40020058 	.word	0x40020058
 8001d84:	40020070 	.word	0x40020070
 8001d88:	40020088 	.word	0x40020088
 8001d8c:	400200a0 	.word	0x400200a0
 8001d90:	400200b8 	.word	0x400200b8
 8001d94:	40020410 	.word	0x40020410
 8001d98:	40020428 	.word	0x40020428
 8001d9c:	40020440 	.word	0x40020440
 8001da0:	40020458 	.word	0x40020458
 8001da4:	40020470 	.word	0x40020470
 8001da8:	40020488 	.word	0x40020488
 8001dac:	400204a0 	.word	0x400204a0
 8001db0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a4f      	ldr	r2, [pc, #316]	; (8001f0c <HAL_DMA_Abort+0x5dc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d072      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_DMA_Abort+0x5e0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d06d      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a4c      	ldr	r2, [pc, #304]	; (8001f14 <HAL_DMA_Abort+0x5e4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d068      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_DMA_Abort+0x5e8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d063      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_DMA_Abort+0x5ec>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d05e      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a47      	ldr	r2, [pc, #284]	; (8001f20 <HAL_DMA_Abort+0x5f0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d059      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a46      	ldr	r2, [pc, #280]	; (8001f24 <HAL_DMA_Abort+0x5f4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d054      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a44      	ldr	r2, [pc, #272]	; (8001f28 <HAL_DMA_Abort+0x5f8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d04f      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_DMA_Abort+0x5fc>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d04a      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <HAL_DMA_Abort+0x600>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d045      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <HAL_DMA_Abort+0x604>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d040      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <HAL_DMA_Abort+0x608>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d03b      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a3d      	ldr	r2, [pc, #244]	; (8001f3c <HAL_DMA_Abort+0x60c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d036      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_DMA_Abort+0x610>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a3a      	ldr	r2, [pc, #232]	; (8001f44 <HAL_DMA_Abort+0x614>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d02c      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_DMA_Abort+0x618>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d027      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a37      	ldr	r2, [pc, #220]	; (8001f4c <HAL_DMA_Abort+0x61c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_DMA_Abort+0x620>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01d      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a34      	ldr	r2, [pc, #208]	; (8001f54 <HAL_DMA_Abort+0x624>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_DMA_Abort+0x628>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a31      	ldr	r2, [pc, #196]	; (8001f5c <HAL_DMA_Abort+0x62c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00e      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2f      	ldr	r2, [pc, #188]	; (8001f60 <HAL_DMA_Abort+0x630>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d009      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2e      	ldr	r2, [pc, #184]	; (8001f64 <HAL_DMA_Abort+0x634>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_DMA_Abort+0x58a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2c      	ldr	r2, [pc, #176]	; (8001f68 <HAL_DMA_Abort+0x638>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_DMA_Abort+0x58e>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_DMA_Abort+0x590>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d015      	beq.n	8001ef0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ecc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001eee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40020010 	.word	0x40020010
 8001f10:	40020028 	.word	0x40020028
 8001f14:	40020040 	.word	0x40020040
 8001f18:	40020058 	.word	0x40020058
 8001f1c:	40020070 	.word	0x40020070
 8001f20:	40020088 	.word	0x40020088
 8001f24:	400200a0 	.word	0x400200a0
 8001f28:	400200b8 	.word	0x400200b8
 8001f2c:	40020410 	.word	0x40020410
 8001f30:	40020428 	.word	0x40020428
 8001f34:	40020440 	.word	0x40020440
 8001f38:	40020458 	.word	0x40020458
 8001f3c:	40020470 	.word	0x40020470
 8001f40:	40020488 	.word	0x40020488
 8001f44:	400204a0 	.word	0x400204a0
 8001f48:	400204b8 	.word	0x400204b8
 8001f4c:	58025408 	.word	0x58025408
 8001f50:	5802541c 	.word	0x5802541c
 8001f54:	58025430 	.word	0x58025430
 8001f58:	58025444 	.word	0x58025444
 8001f5c:	58025458 	.word	0x58025458
 8001f60:	5802546c 	.word	0x5802546c
 8001f64:	58025480 	.word	0x58025480
 8001f68:	58025494 	.word	0x58025494

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e205      	b.n	800238a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e1fa      	b.n	800238a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a8c      	ldr	r2, [pc, #560]	; (80021cc <HAL_DMA_Abort_IT+0x260>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d04a      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a8b      	ldr	r2, [pc, #556]	; (80021d0 <HAL_DMA_Abort_IT+0x264>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d045      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a89      	ldr	r2, [pc, #548]	; (80021d4 <HAL_DMA_Abort_IT+0x268>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d040      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a88      	ldr	r2, [pc, #544]	; (80021d8 <HAL_DMA_Abort_IT+0x26c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d03b      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a86      	ldr	r2, [pc, #536]	; (80021dc <HAL_DMA_Abort_IT+0x270>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d036      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a85      	ldr	r2, [pc, #532]	; (80021e0 <HAL_DMA_Abort_IT+0x274>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d031      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a83      	ldr	r2, [pc, #524]	; (80021e4 <HAL_DMA_Abort_IT+0x278>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d02c      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a82      	ldr	r2, [pc, #520]	; (80021e8 <HAL_DMA_Abort_IT+0x27c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d027      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a80      	ldr	r2, [pc, #512]	; (80021ec <HAL_DMA_Abort_IT+0x280>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d022      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7f      	ldr	r2, [pc, #508]	; (80021f0 <HAL_DMA_Abort_IT+0x284>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d01d      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a7d      	ldr	r2, [pc, #500]	; (80021f4 <HAL_DMA_Abort_IT+0x288>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d018      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7c      	ldr	r2, [pc, #496]	; (80021f8 <HAL_DMA_Abort_IT+0x28c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a7a      	ldr	r2, [pc, #488]	; (80021fc <HAL_DMA_Abort_IT+0x290>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00e      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a79      	ldr	r2, [pc, #484]	; (8002200 <HAL_DMA_Abort_IT+0x294>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d009      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a77      	ldr	r2, [pc, #476]	; (8002204 <HAL_DMA_Abort_IT+0x298>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_DMA_Abort_IT+0xc8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a76      	ldr	r2, [pc, #472]	; (8002208 <HAL_DMA_Abort_IT+0x29c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_DMA_Abort_IT+0xcc>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_DMA_Abort_IT+0xce>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d065      	beq.n	800210a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a60      	ldr	r2, [pc, #384]	; (80021cc <HAL_DMA_Abort_IT+0x260>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d04a      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5e      	ldr	r2, [pc, #376]	; (80021d0 <HAL_DMA_Abort_IT+0x264>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d045      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5d      	ldr	r2, [pc, #372]	; (80021d4 <HAL_DMA_Abort_IT+0x268>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d040      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5b      	ldr	r2, [pc, #364]	; (80021d8 <HAL_DMA_Abort_IT+0x26c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d03b      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5a      	ldr	r2, [pc, #360]	; (80021dc <HAL_DMA_Abort_IT+0x270>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d036      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <HAL_DMA_Abort_IT+0x274>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d031      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a57      	ldr	r2, [pc, #348]	; (80021e4 <HAL_DMA_Abort_IT+0x278>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d02c      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a55      	ldr	r2, [pc, #340]	; (80021e8 <HAL_DMA_Abort_IT+0x27c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d027      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a54      	ldr	r2, [pc, #336]	; (80021ec <HAL_DMA_Abort_IT+0x280>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d022      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_DMA_Abort_IT+0x284>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01d      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a51      	ldr	r2, [pc, #324]	; (80021f4 <HAL_DMA_Abort_IT+0x288>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d018      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <HAL_DMA_Abort_IT+0x28c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4e      	ldr	r2, [pc, #312]	; (80021fc <HAL_DMA_Abort_IT+0x290>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00e      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_DMA_Abort_IT+0x294>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_DMA_Abort_IT+0x298>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d004      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x17a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a49      	ldr	r2, [pc, #292]	; (8002208 <HAL_DMA_Abort_IT+0x29c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d108      	bne.n	80020f8 <HAL_DMA_Abort_IT+0x18c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0201 	bic.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e147      	b.n	8002388 <HAL_DMA_Abort_IT+0x41c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e13e      	b.n	8002388 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 020e 	bic.w	r2, r2, #14
 8002118:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <HAL_DMA_Abort_IT+0x260>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d04a      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <HAL_DMA_Abort_IT+0x264>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d045      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_DMA_Abort_IT+0x268>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d040      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_DMA_Abort_IT+0x26c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d03b      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a25      	ldr	r2, [pc, #148]	; (80021dc <HAL_DMA_Abort_IT+0x270>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d036      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <HAL_DMA_Abort_IT+0x274>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d031      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a22      	ldr	r2, [pc, #136]	; (80021e4 <HAL_DMA_Abort_IT+0x278>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d02c      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <HAL_DMA_Abort_IT+0x27c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d027      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <HAL_DMA_Abort_IT+0x280>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d022      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <HAL_DMA_Abort_IT+0x284>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_DMA_Abort_IT+0x288>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d018      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_DMA_Abort_IT+0x28c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_DMA_Abort_IT+0x290>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00e      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a17      	ldr	r2, [pc, #92]	; (8002200 <HAL_DMA_Abort_IT+0x294>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d009      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a16      	ldr	r2, [pc, #88]	; (8002204 <HAL_DMA_Abort_IT+0x298>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d004      	beq.n	80021ba <HAL_DMA_Abort_IT+0x24e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <HAL_DMA_Abort_IT+0x29c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d128      	bne.n	800220c <HAL_DMA_Abort_IT+0x2a0>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e027      	b.n	800221c <HAL_DMA_Abort_IT+0x2b0>
 80021cc:	40020010 	.word	0x40020010
 80021d0:	40020028 	.word	0x40020028
 80021d4:	40020040 	.word	0x40020040
 80021d8:	40020058 	.word	0x40020058
 80021dc:	40020070 	.word	0x40020070
 80021e0:	40020088 	.word	0x40020088
 80021e4:	400200a0 	.word	0x400200a0
 80021e8:	400200b8 	.word	0x400200b8
 80021ec:	40020410 	.word	0x40020410
 80021f0:	40020428 	.word	0x40020428
 80021f4:	40020440 	.word	0x40020440
 80021f8:	40020458 	.word	0x40020458
 80021fc:	40020470 	.word	0x40020470
 8002200:	40020488 	.word	0x40020488
 8002204:	400204a0 	.word	0x400204a0
 8002208:	400204b8 	.word	0x400204b8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <HAL_DMA_Abort_IT+0x428>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d072      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a5b      	ldr	r2, [pc, #364]	; (8002398 <HAL_DMA_Abort_IT+0x42c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d06d      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a59      	ldr	r2, [pc, #356]	; (800239c <HAL_DMA_Abort_IT+0x430>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d068      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a58      	ldr	r2, [pc, #352]	; (80023a0 <HAL_DMA_Abort_IT+0x434>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d063      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_DMA_Abort_IT+0x438>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d05e      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a55      	ldr	r2, [pc, #340]	; (80023a8 <HAL_DMA_Abort_IT+0x43c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d059      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a53      	ldr	r2, [pc, #332]	; (80023ac <HAL_DMA_Abort_IT+0x440>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d054      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_DMA_Abort_IT+0x444>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04f      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_DMA_Abort_IT+0x448>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d04a      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4f      	ldr	r2, [pc, #316]	; (80023b8 <HAL_DMA_Abort_IT+0x44c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d045      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a4d      	ldr	r2, [pc, #308]	; (80023bc <HAL_DMA_Abort_IT+0x450>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d040      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a4c      	ldr	r2, [pc, #304]	; (80023c0 <HAL_DMA_Abort_IT+0x454>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d03b      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4a      	ldr	r2, [pc, #296]	; (80023c4 <HAL_DMA_Abort_IT+0x458>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d036      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a49      	ldr	r2, [pc, #292]	; (80023c8 <HAL_DMA_Abort_IT+0x45c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d031      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a47      	ldr	r2, [pc, #284]	; (80023cc <HAL_DMA_Abort_IT+0x460>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d02c      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a46      	ldr	r2, [pc, #280]	; (80023d0 <HAL_DMA_Abort_IT+0x464>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d027      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a44      	ldr	r2, [pc, #272]	; (80023d4 <HAL_DMA_Abort_IT+0x468>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d022      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a43      	ldr	r2, [pc, #268]	; (80023d8 <HAL_DMA_Abort_IT+0x46c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01d      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a41      	ldr	r2, [pc, #260]	; (80023dc <HAL_DMA_Abort_IT+0x470>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d018      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a40      	ldr	r2, [pc, #256]	; (80023e0 <HAL_DMA_Abort_IT+0x474>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a3e      	ldr	r2, [pc, #248]	; (80023e4 <HAL_DMA_Abort_IT+0x478>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a3d      	ldr	r2, [pc, #244]	; (80023e8 <HAL_DMA_Abort_IT+0x47c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <HAL_DMA_Abort_IT+0x480>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Abort_IT+0x3a0>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_DMA_Abort_IT+0x484>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_DMA_Abort_IT+0x3a4>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_DMA_Abort_IT+0x3a6>
 8002310:	2300      	movs	r3, #0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d028      	beq.n	8002368 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002344:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00c      	beq.n	8002368 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800235c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002366:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40020010 	.word	0x40020010
 8002398:	40020028 	.word	0x40020028
 800239c:	40020040 	.word	0x40020040
 80023a0:	40020058 	.word	0x40020058
 80023a4:	40020070 	.word	0x40020070
 80023a8:	40020088 	.word	0x40020088
 80023ac:	400200a0 	.word	0x400200a0
 80023b0:	400200b8 	.word	0x400200b8
 80023b4:	40020410 	.word	0x40020410
 80023b8:	40020428 	.word	0x40020428
 80023bc:	40020440 	.word	0x40020440
 80023c0:	40020458 	.word	0x40020458
 80023c4:	40020470 	.word	0x40020470
 80023c8:	40020488 	.word	0x40020488
 80023cc:	400204a0 	.word	0x400204a0
 80023d0:	400204b8 	.word	0x400204b8
 80023d4:	58025408 	.word	0x58025408
 80023d8:	5802541c 	.word	0x5802541c
 80023dc:	58025430 	.word	0x58025430
 80023e0:	58025444 	.word	0x58025444
 80023e4:	58025458 	.word	0x58025458
 80023e8:	5802546c 	.word	0x5802546c
 80023ec:	58025480 	.word	0x58025480
 80023f0:	58025494 	.word	0x58025494

080023f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002400:	4b67      	ldr	r3, [pc, #412]	; (80025a0 <HAL_DMA_IRQHandler+0x1ac>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a67      	ldr	r2, [pc, #412]	; (80025a4 <HAL_DMA_IRQHandler+0x1b0>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a5f      	ldr	r2, [pc, #380]	; (80025a8 <HAL_DMA_IRQHandler+0x1b4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d04a      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a5d      	ldr	r2, [pc, #372]	; (80025ac <HAL_DMA_IRQHandler+0x1b8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d045      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a5c      	ldr	r2, [pc, #368]	; (80025b0 <HAL_DMA_IRQHandler+0x1bc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d040      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_DMA_IRQHandler+0x1c0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d03b      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a59      	ldr	r2, [pc, #356]	; (80025b8 <HAL_DMA_IRQHandler+0x1c4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d036      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a57      	ldr	r2, [pc, #348]	; (80025bc <HAL_DMA_IRQHandler+0x1c8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d031      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a56      	ldr	r2, [pc, #344]	; (80025c0 <HAL_DMA_IRQHandler+0x1cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d02c      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_DMA_IRQHandler+0x1d0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d027      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a53      	ldr	r2, [pc, #332]	; (80025c8 <HAL_DMA_IRQHandler+0x1d4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d022      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a51      	ldr	r2, [pc, #324]	; (80025cc <HAL_DMA_IRQHandler+0x1d8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01d      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a50      	ldr	r2, [pc, #320]	; (80025d0 <HAL_DMA_IRQHandler+0x1dc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d018      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a4e      	ldr	r2, [pc, #312]	; (80025d4 <HAL_DMA_IRQHandler+0x1e0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4d      	ldr	r2, [pc, #308]	; (80025d8 <HAL_DMA_IRQHandler+0x1e4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_DMA_IRQHandler+0x1e8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <HAL_DMA_IRQHandler+0x1ec>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_DMA_IRQHandler+0xd2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a48      	ldr	r2, [pc, #288]	; (80025e4 <HAL_DMA_IRQHandler+0x1f0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_DMA_IRQHandler+0xd6>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_DMA_IRQHandler+0xd8>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 842b 	beq.w	8002d28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2208      	movs	r2, #8
 80024dc:	409a      	lsls	r2, r3
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80a2 	beq.w	800262c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <HAL_DMA_IRQHandler+0x1b4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d04a      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2d      	ldr	r2, [pc, #180]	; (80025ac <HAL_DMA_IRQHandler+0x1b8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d045      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2b      	ldr	r2, [pc, #172]	; (80025b0 <HAL_DMA_IRQHandler+0x1bc>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d040      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2a      	ldr	r2, [pc, #168]	; (80025b4 <HAL_DMA_IRQHandler+0x1c0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d03b      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_DMA_IRQHandler+0x1c4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d036      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_DMA_IRQHandler+0x1c8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d031      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <HAL_DMA_IRQHandler+0x1cc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02c      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <HAL_DMA_IRQHandler+0x1d0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d027      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_DMA_IRQHandler+0x1d4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d022      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	; (80025cc <HAL_DMA_IRQHandler+0x1d8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d01d      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_DMA_IRQHandler+0x1dc>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d018      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_DMA_IRQHandler+0x1e0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d013      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_DMA_IRQHandler+0x1e4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00e      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_DMA_IRQHandler+0x1e8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d009      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <HAL_DMA_IRQHandler+0x1ec>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_DMA_IRQHandler+0x194>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_DMA_IRQHandler+0x1f0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d12f      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x1f4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	e02e      	b.n	80025fc <HAL_DMA_IRQHandler+0x208>
 800259e:	bf00      	nop
 80025a0:	20000000 	.word	0x20000000
 80025a4:	1b4e81b5 	.word	0x1b4e81b5
 80025a8:	40020010 	.word	0x40020010
 80025ac:	40020028 	.word	0x40020028
 80025b0:	40020040 	.word	0x40020040
 80025b4:	40020058 	.word	0x40020058
 80025b8:	40020070 	.word	0x40020070
 80025bc:	40020088 	.word	0x40020088
 80025c0:	400200a0 	.word	0x400200a0
 80025c4:	400200b8 	.word	0x400200b8
 80025c8:	40020410 	.word	0x40020410
 80025cc:	40020428 	.word	0x40020428
 80025d0:	40020440 	.word	0x40020440
 80025d4:	40020458 	.word	0x40020458
 80025d8:	40020470 	.word	0x40020470
 80025dc:	40020488 	.word	0x40020488
 80025e0:	400204a0 	.word	0x400204a0
 80025e4:	400204b8 	.word	0x400204b8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0204 	bic.w	r2, r2, #4
 800260e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2208      	movs	r2, #8
 800261a:	409a      	lsls	r2, r3
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f043 0201 	orr.w	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	fa22 f303 	lsr.w	r3, r2, r3
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d06e      	beq.n	8002720 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a69      	ldr	r2, [pc, #420]	; (80027ec <HAL_DMA_IRQHandler+0x3f8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d04a      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a67      	ldr	r2, [pc, #412]	; (80027f0 <HAL_DMA_IRQHandler+0x3fc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d045      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a66      	ldr	r2, [pc, #408]	; (80027f4 <HAL_DMA_IRQHandler+0x400>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d040      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a64      	ldr	r2, [pc, #400]	; (80027f8 <HAL_DMA_IRQHandler+0x404>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d03b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a63      	ldr	r2, [pc, #396]	; (80027fc <HAL_DMA_IRQHandler+0x408>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d036      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a61      	ldr	r2, [pc, #388]	; (8002800 <HAL_DMA_IRQHandler+0x40c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a60      	ldr	r2, [pc, #384]	; (8002804 <HAL_DMA_IRQHandler+0x410>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d02c      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a5e      	ldr	r2, [pc, #376]	; (8002808 <HAL_DMA_IRQHandler+0x414>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d027      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5d      	ldr	r2, [pc, #372]	; (800280c <HAL_DMA_IRQHandler+0x418>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a5b      	ldr	r2, [pc, #364]	; (8002810 <HAL_DMA_IRQHandler+0x41c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a5a      	ldr	r2, [pc, #360]	; (8002814 <HAL_DMA_IRQHandler+0x420>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_DMA_IRQHandler+0x424>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_DMA_IRQHandler+0x428>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_DMA_IRQHandler+0x42c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a54      	ldr	r2, [pc, #336]	; (8002824 <HAL_DMA_IRQHandler+0x430>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x2ee>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_DMA_IRQHandler+0x434>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10a      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x304>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf14      	ite	ne
 80026f0:	2301      	movne	r3, #1
 80026f2:	2300      	moveq	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	e003      	b.n	8002700 <HAL_DMA_IRQHandler+0x30c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2201      	movs	r2, #1
 800270e:	409a      	lsls	r2, r3
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f043 0202 	orr.w	r2, r3, #2
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2204      	movs	r2, #4
 800272a:	409a      	lsls	r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 808f 	beq.w	8002854 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <HAL_DMA_IRQHandler+0x3f8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d04a      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_DMA_IRQHandler+0x3fc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d045      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <HAL_DMA_IRQHandler+0x400>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d040      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a27      	ldr	r2, [pc, #156]	; (80027f8 <HAL_DMA_IRQHandler+0x404>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d03b      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_DMA_IRQHandler+0x408>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d036      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a24      	ldr	r2, [pc, #144]	; (8002800 <HAL_DMA_IRQHandler+0x40c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d031      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <HAL_DMA_IRQHandler+0x410>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d02c      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <HAL_DMA_IRQHandler+0x414>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d027      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a20      	ldr	r2, [pc, #128]	; (800280c <HAL_DMA_IRQHandler+0x418>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1e      	ldr	r2, [pc, #120]	; (8002810 <HAL_DMA_IRQHandler+0x41c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01d      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <HAL_DMA_IRQHandler+0x420>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d018      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <HAL_DMA_IRQHandler+0x424>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_DMA_IRQHandler+0x428>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_DMA_IRQHandler+0x42c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_DMA_IRQHandler+0x430>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x3e2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <HAL_DMA_IRQHandler+0x434>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d12a      	bne.n	800282c <HAL_DMA_IRQHandler+0x438>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e023      	b.n	8002834 <HAL_DMA_IRQHandler+0x440>
 80027ec:	40020010 	.word	0x40020010
 80027f0:	40020028 	.word	0x40020028
 80027f4:	40020040 	.word	0x40020040
 80027f8:	40020058 	.word	0x40020058
 80027fc:	40020070 	.word	0x40020070
 8002800:	40020088 	.word	0x40020088
 8002804:	400200a0 	.word	0x400200a0
 8002808:	400200b8 	.word	0x400200b8
 800280c:	40020410 	.word	0x40020410
 8002810:	40020428 	.word	0x40020428
 8002814:	40020440 	.word	0x40020440
 8002818:	40020458 	.word	0x40020458
 800281c:	40020470 	.word	0x40020470
 8002820:	40020488 	.word	0x40020488
 8002824:	400204a0 	.word	0x400204a0
 8002828:	400204b8 	.word	0x400204b8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2210      	movs	r2, #16
 800285e:	409a      	lsls	r2, r3
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a6 	beq.w	80029b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a85      	ldr	r2, [pc, #532]	; (8002a84 <HAL_DMA_IRQHandler+0x690>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d04a      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a83      	ldr	r2, [pc, #524]	; (8002a88 <HAL_DMA_IRQHandler+0x694>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d045      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a82      	ldr	r2, [pc, #520]	; (8002a8c <HAL_DMA_IRQHandler+0x698>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d040      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a80      	ldr	r2, [pc, #512]	; (8002a90 <HAL_DMA_IRQHandler+0x69c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d03b      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7f      	ldr	r2, [pc, #508]	; (8002a94 <HAL_DMA_IRQHandler+0x6a0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d036      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a7d      	ldr	r2, [pc, #500]	; (8002a98 <HAL_DMA_IRQHandler+0x6a4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d031      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7c      	ldr	r2, [pc, #496]	; (8002a9c <HAL_DMA_IRQHandler+0x6a8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d02c      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a7a      	ldr	r2, [pc, #488]	; (8002aa0 <HAL_DMA_IRQHandler+0x6ac>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d027      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a79      	ldr	r2, [pc, #484]	; (8002aa4 <HAL_DMA_IRQHandler+0x6b0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d022      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a77      	ldr	r2, [pc, #476]	; (8002aa8 <HAL_DMA_IRQHandler+0x6b4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01d      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a76      	ldr	r2, [pc, #472]	; (8002aac <HAL_DMA_IRQHandler+0x6b8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d018      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a74      	ldr	r2, [pc, #464]	; (8002ab0 <HAL_DMA_IRQHandler+0x6bc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a73      	ldr	r2, [pc, #460]	; (8002ab4 <HAL_DMA_IRQHandler+0x6c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a71      	ldr	r2, [pc, #452]	; (8002ab8 <HAL_DMA_IRQHandler+0x6c4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a70      	ldr	r2, [pc, #448]	; (8002abc <HAL_DMA_IRQHandler+0x6c8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_DMA_IRQHandler+0x516>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <HAL_DMA_IRQHandler+0x6cc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10a      	bne.n	8002920 <HAL_DMA_IRQHandler+0x52c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e009      	b.n	8002934 <HAL_DMA_IRQHandler+0x540>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf14      	ite	ne
 800292e:	2301      	movne	r3, #1
 8002930:	2300      	moveq	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d03e      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2210      	movs	r2, #16
 8002942:	409a      	lsls	r2, r3
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d018      	beq.n	8002988 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d108      	bne.n	8002976 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d024      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e01f      	b.n	80029b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01b      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e016      	b.n	80029b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d107      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0208 	bic.w	r2, r2, #8
 80029a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2220      	movs	r2, #32
 80029c0:	409a      	lsls	r2, r3
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8110 	beq.w	8002bec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <HAL_DMA_IRQHandler+0x690>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d04a      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2b      	ldr	r2, [pc, #172]	; (8002a88 <HAL_DMA_IRQHandler+0x694>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d045      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_DMA_IRQHandler+0x698>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d040      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_DMA_IRQHandler+0x69c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d03b      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <HAL_DMA_IRQHandler+0x6a0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d036      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a25      	ldr	r2, [pc, #148]	; (8002a98 <HAL_DMA_IRQHandler+0x6a4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d031      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_DMA_IRQHandler+0x6a8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02c      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_DMA_IRQHandler+0x6ac>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d027      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <HAL_DMA_IRQHandler+0x6b0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d022      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <HAL_DMA_IRQHandler+0x6b4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d01d      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <HAL_DMA_IRQHandler+0x6b8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d018      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_DMA_IRQHandler+0x6bc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1a      	ldr	r2, [pc, #104]	; (8002ab4 <HAL_DMA_IRQHandler+0x6c0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00e      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <HAL_DMA_IRQHandler+0x6c4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_DMA_IRQHandler+0x6c8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x678>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <HAL_DMA_IRQHandler+0x6cc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d12b      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x6d0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0310 	and.w	r3, r3, #16
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e02a      	b.n	8002ad8 <HAL_DMA_IRQHandler+0x6e4>
 8002a82:	bf00      	nop
 8002a84:	40020010 	.word	0x40020010
 8002a88:	40020028 	.word	0x40020028
 8002a8c:	40020040 	.word	0x40020040
 8002a90:	40020058 	.word	0x40020058
 8002a94:	40020070 	.word	0x40020070
 8002a98:	40020088 	.word	0x40020088
 8002a9c:	400200a0 	.word	0x400200a0
 8002aa0:	400200b8 	.word	0x400200b8
 8002aa4:	40020410 	.word	0x40020410
 8002aa8:	40020428 	.word	0x40020428
 8002aac:	40020440 	.word	0x40020440
 8002ab0:	40020458 	.word	0x40020458
 8002ab4:	40020470 	.word	0x40020470
 8002ab8:	40020488 	.word	0x40020488
 8002abc:	400204a0 	.word	0x400204a0
 8002ac0:	400204b8 	.word	0x400204b8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8087 	beq.w	8002bec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d139      	bne.n	8002b6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0216 	bic.w	r2, r2, #22
 8002b08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x736>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d007      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0208 	bic.w	r2, r2, #8
 8002b38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	223f      	movs	r2, #63	; 0x3f
 8002b44:	409a      	lsls	r2, r3
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 834a 	beq.w	80031f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
          }
          return;
 8002b6c:	e344      	b.n	80031f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d018      	beq.n	8002bae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d108      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02c      	beq.n	8002bec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
 8002b9a:	e027      	b.n	8002bec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
 8002bac:	e01e      	b.n	8002bec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10f      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0210 	bic.w	r2, r2, #16
 8002bca:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8306 	beq.w	8003202 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8088 	beq.w	8002d14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2204      	movs	r2, #4
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a7a      	ldr	r2, [pc, #488]	; (8002dfc <HAL_DMA_IRQHandler+0xa08>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a79      	ldr	r2, [pc, #484]	; (8002e00 <HAL_DMA_IRQHandler+0xa0c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d045      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_DMA_IRQHandler+0xa10>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d040      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <HAL_DMA_IRQHandler+0xa14>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d03b      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a74      	ldr	r2, [pc, #464]	; (8002e0c <HAL_DMA_IRQHandler+0xa18>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d036      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a73      	ldr	r2, [pc, #460]	; (8002e10 <HAL_DMA_IRQHandler+0xa1c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d031      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_DMA_IRQHandler+0xa20>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02c      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a70      	ldr	r2, [pc, #448]	; (8002e18 <HAL_DMA_IRQHandler+0xa24>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d027      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <HAL_DMA_IRQHandler+0xa28>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d022      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a6d      	ldr	r2, [pc, #436]	; (8002e20 <HAL_DMA_IRQHandler+0xa2c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d01d      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6b      	ldr	r2, [pc, #428]	; (8002e24 <HAL_DMA_IRQHandler+0xa30>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6a      	ldr	r2, [pc, #424]	; (8002e28 <HAL_DMA_IRQHandler+0xa34>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a68      	ldr	r2, [pc, #416]	; (8002e2c <HAL_DMA_IRQHandler+0xa38>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a67      	ldr	r2, [pc, #412]	; (8002e30 <HAL_DMA_IRQHandler+0xa3c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a65      	ldr	r2, [pc, #404]	; (8002e34 <HAL_DMA_IRQHandler+0xa40>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_DMA_IRQHandler+0x8b8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a64      	ldr	r2, [pc, #400]	; (8002e38 <HAL_DMA_IRQHandler+0xa44>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d108      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x8ca>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <HAL_DMA_IRQHandler+0x8da>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d307      	bcc.n	8002cea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f2      	bne.n	8002cce <HAL_DMA_IRQHandler+0x8da>
 8002ce8:	e000      	b.n	8002cec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002cea:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002d0a:	e003      	b.n	8002d14 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8272 	beq.w	8003202 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e26c      	b.n	8003202 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a43      	ldr	r2, [pc, #268]	; (8002e3c <HAL_DMA_IRQHandler+0xa48>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d022      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x984>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a42      	ldr	r2, [pc, #264]	; (8002e40 <HAL_DMA_IRQHandler+0xa4c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d01d      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x984>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a40      	ldr	r2, [pc, #256]	; (8002e44 <HAL_DMA_IRQHandler+0xa50>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d018      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x984>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	; (8002e48 <HAL_DMA_IRQHandler+0xa54>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x984>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3d      	ldr	r2, [pc, #244]	; (8002e4c <HAL_DMA_IRQHandler+0xa58>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00e      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x984>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a3c      	ldr	r2, [pc, #240]	; (8002e50 <HAL_DMA_IRQHandler+0xa5c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x984>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3a      	ldr	r2, [pc, #232]	; (8002e54 <HAL_DMA_IRQHandler+0xa60>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x984>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a39      	ldr	r2, [pc, #228]	; (8002e58 <HAL_DMA_IRQHandler+0xa64>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x988>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_DMA_IRQHandler+0x98a>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 823f 	beq.w	8003202 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2204      	movs	r2, #4
 8002d96:	409a      	lsls	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80cd 	beq.w	8002f3c <HAL_DMA_IRQHandler+0xb48>
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80c7 	beq.w	8002f3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2204      	movs	r2, #4
 8002db8:	409a      	lsls	r2, r3
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d049      	beq.n	8002e5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8210 	beq.w	80031fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002de4:	e20a      	b.n	80031fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8206 	beq.w	80031fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002df8:	e200      	b.n	80031fc <HAL_DMA_IRQHandler+0xe08>
 8002dfa:	bf00      	nop
 8002dfc:	40020010 	.word	0x40020010
 8002e00:	40020028 	.word	0x40020028
 8002e04:	40020040 	.word	0x40020040
 8002e08:	40020058 	.word	0x40020058
 8002e0c:	40020070 	.word	0x40020070
 8002e10:	40020088 	.word	0x40020088
 8002e14:	400200a0 	.word	0x400200a0
 8002e18:	400200b8 	.word	0x400200b8
 8002e1c:	40020410 	.word	0x40020410
 8002e20:	40020428 	.word	0x40020428
 8002e24:	40020440 	.word	0x40020440
 8002e28:	40020458 	.word	0x40020458
 8002e2c:	40020470 	.word	0x40020470
 8002e30:	40020488 	.word	0x40020488
 8002e34:	400204a0 	.word	0x400204a0
 8002e38:	400204b8 	.word	0x400204b8
 8002e3c:	58025408 	.word	0x58025408
 8002e40:	5802541c 	.word	0x5802541c
 8002e44:	58025430 	.word	0x58025430
 8002e48:	58025444 	.word	0x58025444
 8002e4c:	58025458 	.word	0x58025458
 8002e50:	5802546c 	.word	0x5802546c
 8002e54:	58025480 	.word	0x58025480
 8002e58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d160      	bne.n	8002f28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a8c      	ldr	r2, [pc, #560]	; (800309c <HAL_DMA_IRQHandler+0xca8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d04a      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a8a      	ldr	r2, [pc, #552]	; (80030a0 <HAL_DMA_IRQHandler+0xcac>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d045      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a89      	ldr	r2, [pc, #548]	; (80030a4 <HAL_DMA_IRQHandler+0xcb0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d040      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a87      	ldr	r2, [pc, #540]	; (80030a8 <HAL_DMA_IRQHandler+0xcb4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d03b      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a86      	ldr	r2, [pc, #536]	; (80030ac <HAL_DMA_IRQHandler+0xcb8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d036      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a84      	ldr	r2, [pc, #528]	; (80030b0 <HAL_DMA_IRQHandler+0xcbc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d031      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <HAL_DMA_IRQHandler+0xcc0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d02c      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a81      	ldr	r2, [pc, #516]	; (80030b8 <HAL_DMA_IRQHandler+0xcc4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d027      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a80      	ldr	r2, [pc, #512]	; (80030bc <HAL_DMA_IRQHandler+0xcc8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d022      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a7e      	ldr	r2, [pc, #504]	; (80030c0 <HAL_DMA_IRQHandler+0xccc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7d      	ldr	r2, [pc, #500]	; (80030c4 <HAL_DMA_IRQHandler+0xcd0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d018      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a7b      	ldr	r2, [pc, #492]	; (80030c8 <HAL_DMA_IRQHandler+0xcd4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7a      	ldr	r2, [pc, #488]	; (80030cc <HAL_DMA_IRQHandler+0xcd8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <HAL_DMA_IRQHandler+0xcdc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a77      	ldr	r2, [pc, #476]	; (80030d4 <HAL_DMA_IRQHandler+0xce0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xb12>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_DMA_IRQHandler+0xce4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <HAL_DMA_IRQHandler+0xb24>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e007      	b.n	8002f28 <HAL_DMA_IRQHandler+0xb34>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0204 	bic.w	r2, r2, #4
 8002f26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8165 	beq.w	80031fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f3a:	e15f      	b.n	80031fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2202      	movs	r2, #2
 8002f46:	409a      	lsls	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80c5 	beq.w	80030dc <HAL_DMA_IRQHandler+0xce8>
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80bf 	beq.w	80030dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2202      	movs	r2, #2
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d018      	beq.n	8002faa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 813a 	beq.w	8003200 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f94:	e134      	b.n	8003200 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8130 	beq.w	8003200 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002fa8:	e12a      	b.n	8003200 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d168      	bne.n	8003086 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a38      	ldr	r2, [pc, #224]	; (800309c <HAL_DMA_IRQHandler+0xca8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d04a      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a37      	ldr	r2, [pc, #220]	; (80030a0 <HAL_DMA_IRQHandler+0xcac>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d045      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a35      	ldr	r2, [pc, #212]	; (80030a4 <HAL_DMA_IRQHandler+0xcb0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d040      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_DMA_IRQHandler+0xcb4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d03b      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a32      	ldr	r2, [pc, #200]	; (80030ac <HAL_DMA_IRQHandler+0xcb8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d036      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a31      	ldr	r2, [pc, #196]	; (80030b0 <HAL_DMA_IRQHandler+0xcbc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d031      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <HAL_DMA_IRQHandler+0xcc0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02c      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <HAL_DMA_IRQHandler+0xcc4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d027      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <HAL_DMA_IRQHandler+0xcc8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2b      	ldr	r2, [pc, #172]	; (80030c0 <HAL_DMA_IRQHandler+0xccc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01d      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_DMA_IRQHandler+0xcd0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d018      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a28      	ldr	r2, [pc, #160]	; (80030c8 <HAL_DMA_IRQHandler+0xcd4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <HAL_DMA_IRQHandler+0xcd8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00e      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a25      	ldr	r2, [pc, #148]	; (80030d0 <HAL_DMA_IRQHandler+0xcdc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <HAL_DMA_IRQHandler+0xce0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_DMA_IRQHandler+0xc60>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_DMA_IRQHandler+0xce4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d108      	bne.n	8003066 <HAL_DMA_IRQHandler+0xc72>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0214 	bic.w	r2, r2, #20
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e007      	b.n	8003076 <HAL_DMA_IRQHandler+0xc82>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 020a 	bic.w	r2, r2, #10
 8003074:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80b8 	beq.w	8003200 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003098:	e0b2      	b.n	8003200 <HAL_DMA_IRQHandler+0xe0c>
 800309a:	bf00      	nop
 800309c:	40020010 	.word	0x40020010
 80030a0:	40020028 	.word	0x40020028
 80030a4:	40020040 	.word	0x40020040
 80030a8:	40020058 	.word	0x40020058
 80030ac:	40020070 	.word	0x40020070
 80030b0:	40020088 	.word	0x40020088
 80030b4:	400200a0 	.word	0x400200a0
 80030b8:	400200b8 	.word	0x400200b8
 80030bc:	40020410 	.word	0x40020410
 80030c0:	40020428 	.word	0x40020428
 80030c4:	40020440 	.word	0x40020440
 80030c8:	40020458 	.word	0x40020458
 80030cc:	40020470 	.word	0x40020470
 80030d0:	40020488 	.word	0x40020488
 80030d4:	400204a0 	.word	0x400204a0
 80030d8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2208      	movs	r2, #8
 80030e6:	409a      	lsls	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8088 	beq.w	8003202 <HAL_DMA_IRQHandler+0xe0e>
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8082 	beq.w	8003202 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a41      	ldr	r2, [pc, #260]	; (8003208 <HAL_DMA_IRQHandler+0xe14>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d04a      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a3f      	ldr	r2, [pc, #252]	; (800320c <HAL_DMA_IRQHandler+0xe18>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d045      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <HAL_DMA_IRQHandler+0xe1c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d040      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_DMA_IRQHandler+0xe20>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d03b      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3b      	ldr	r2, [pc, #236]	; (8003218 <HAL_DMA_IRQHandler+0xe24>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d036      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a39      	ldr	r2, [pc, #228]	; (800321c <HAL_DMA_IRQHandler+0xe28>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d031      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a38      	ldr	r2, [pc, #224]	; (8003220 <HAL_DMA_IRQHandler+0xe2c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d02c      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a36      	ldr	r2, [pc, #216]	; (8003224 <HAL_DMA_IRQHandler+0xe30>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d027      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a35      	ldr	r2, [pc, #212]	; (8003228 <HAL_DMA_IRQHandler+0xe34>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d022      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a33      	ldr	r2, [pc, #204]	; (800322c <HAL_DMA_IRQHandler+0xe38>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01d      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a32      	ldr	r2, [pc, #200]	; (8003230 <HAL_DMA_IRQHandler+0xe3c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d018      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a30      	ldr	r2, [pc, #192]	; (8003234 <HAL_DMA_IRQHandler+0xe40>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <HAL_DMA_IRQHandler+0xe44>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2d      	ldr	r2, [pc, #180]	; (800323c <HAL_DMA_IRQHandler+0xe48>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2c      	ldr	r2, [pc, #176]	; (8003240 <HAL_DMA_IRQHandler+0xe4c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_DMA_IRQHandler+0xdaa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_DMA_IRQHandler+0xe50>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d108      	bne.n	80031b0 <HAL_DMA_IRQHandler+0xdbc>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 021c 	bic.w	r2, r2, #28
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e007      	b.n	80031c0 <HAL_DMA_IRQHandler+0xdcc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 020e 	bic.w	r2, r2, #14
 80031be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2201      	movs	r2, #1
 80031ca:	409a      	lsls	r2, r3
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
 80031f6:	e004      	b.n	8003202 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80031f8:	bf00      	nop
 80031fa:	e002      	b.n	8003202 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003200:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40020010 	.word	0x40020010
 800320c:	40020028 	.word	0x40020028
 8003210:	40020040 	.word	0x40020040
 8003214:	40020058 	.word	0x40020058
 8003218:	40020070 	.word	0x40020070
 800321c:	40020088 	.word	0x40020088
 8003220:	400200a0 	.word	0x400200a0
 8003224:	400200b8 	.word	0x400200b8
 8003228:	40020410 	.word	0x40020410
 800322c:	40020428 	.word	0x40020428
 8003230:	40020440 	.word	0x40020440
 8003234:	40020458 	.word	0x40020458
 8003238:	40020470 	.word	0x40020470
 800323c:	40020488 	.word	0x40020488
 8003240:	400204a0 	.word	0x400204a0
 8003244:	400204b8 	.word	0x400204b8

08003248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a42      	ldr	r2, [pc, #264]	; (8003360 <DMA_CalcBaseAndBitshift+0x118>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d04a      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a41      	ldr	r2, [pc, #260]	; (8003364 <DMA_CalcBaseAndBitshift+0x11c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d045      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <DMA_CalcBaseAndBitshift+0x120>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d040      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a3e      	ldr	r2, [pc, #248]	; (800336c <DMA_CalcBaseAndBitshift+0x124>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d03b      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a3c      	ldr	r2, [pc, #240]	; (8003370 <DMA_CalcBaseAndBitshift+0x128>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d036      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3b      	ldr	r2, [pc, #236]	; (8003374 <DMA_CalcBaseAndBitshift+0x12c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d031      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a39      	ldr	r2, [pc, #228]	; (8003378 <DMA_CalcBaseAndBitshift+0x130>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d02c      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a38      	ldr	r2, [pc, #224]	; (800337c <DMA_CalcBaseAndBitshift+0x134>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d027      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a36      	ldr	r2, [pc, #216]	; (8003380 <DMA_CalcBaseAndBitshift+0x138>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a35      	ldr	r2, [pc, #212]	; (8003384 <DMA_CalcBaseAndBitshift+0x13c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d01d      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a33      	ldr	r2, [pc, #204]	; (8003388 <DMA_CalcBaseAndBitshift+0x140>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a32      	ldr	r2, [pc, #200]	; (800338c <DMA_CalcBaseAndBitshift+0x144>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a30      	ldr	r2, [pc, #192]	; (8003390 <DMA_CalcBaseAndBitshift+0x148>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2f      	ldr	r2, [pc, #188]	; (8003394 <DMA_CalcBaseAndBitshift+0x14c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2d      	ldr	r2, [pc, #180]	; (8003398 <DMA_CalcBaseAndBitshift+0x150>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <DMA_CalcBaseAndBitshift+0xa8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2c      	ldr	r2, [pc, #176]	; (800339c <DMA_CalcBaseAndBitshift+0x154>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <DMA_CalcBaseAndBitshift+0xac>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <DMA_CalcBaseAndBitshift+0xae>
 80032f4:	2300      	movs	r3, #0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d024      	beq.n	8003344 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3b10      	subs	r3, #16
 8003302:	4a27      	ldr	r2, [pc, #156]	; (80033a0 <DMA_CalcBaseAndBitshift+0x158>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d908      	bls.n	8003334 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <DMA_CalcBaseAndBitshift+0x160>)
 800332a:	4013      	ands	r3, r2
 800332c:	1d1a      	adds	r2, r3, #4
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	659a      	str	r2, [r3, #88]	; 0x58
 8003332:	e00d      	b.n	8003350 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <DMA_CalcBaseAndBitshift+0x160>)
 800333c:	4013      	ands	r3, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
 8003342:	e005      	b.n	8003350 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40020010 	.word	0x40020010
 8003364:	40020028 	.word	0x40020028
 8003368:	40020040 	.word	0x40020040
 800336c:	40020058 	.word	0x40020058
 8003370:	40020070 	.word	0x40020070
 8003374:	40020088 	.word	0x40020088
 8003378:	400200a0 	.word	0x400200a0
 800337c:	400200b8 	.word	0x400200b8
 8003380:	40020410 	.word	0x40020410
 8003384:	40020428 	.word	0x40020428
 8003388:	40020440 	.word	0x40020440
 800338c:	40020458 	.word	0x40020458
 8003390:	40020470 	.word	0x40020470
 8003394:	40020488 	.word	0x40020488
 8003398:	400204a0 	.word	0x400204a0
 800339c:	400204b8 	.word	0x400204b8
 80033a0:	aaaaaaab 	.word	0xaaaaaaab
 80033a4:	0800f858 	.word	0x0800f858
 80033a8:	fffffc00 	.word	0xfffffc00

080033ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d120      	bne.n	8003402 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d858      	bhi.n	800347a <DMA_CheckFifoParam+0xce>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <DMA_CheckFifoParam+0x24>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033f3 	.word	0x080033f3
 80033d8:	080033e1 	.word	0x080033e1
 80033dc:	0800347b 	.word	0x0800347b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d048      	beq.n	800347e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80033f0:	e045      	b.n	800347e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033fa:	d142      	bne.n	8003482 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003400:	e03f      	b.n	8003482 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	d123      	bne.n	8003454 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	2b03      	cmp	r3, #3
 8003412:	d838      	bhi.n	8003486 <DMA_CheckFifoParam+0xda>
 8003414:	a201      	add	r2, pc, #4	; (adr r2, 800341c <DMA_CheckFifoParam+0x70>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	0800342d 	.word	0x0800342d
 8003420:	08003433 	.word	0x08003433
 8003424:	0800342d 	.word	0x0800342d
 8003428:	08003445 	.word	0x08003445
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
        break;
 8003430:	e030      	b.n	8003494 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d025      	beq.n	800348a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003442:	e022      	b.n	800348a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800344c:	d11f      	bne.n	800348e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003452:	e01c      	b.n	800348e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	2b02      	cmp	r3, #2
 800345a:	d902      	bls.n	8003462 <DMA_CheckFifoParam+0xb6>
 800345c:	2b03      	cmp	r3, #3
 800345e:	d003      	beq.n	8003468 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003460:	e018      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
        break;
 8003466:	e015      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
    break;
 8003478:	e00b      	b.n	8003492 <DMA_CheckFifoParam+0xe6>
        break;
 800347a:	bf00      	nop
 800347c:	e00a      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
        break;
 800347e:	bf00      	nop
 8003480:	e008      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
        break;
 8003482:	bf00      	nop
 8003484:	e006      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
        break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
        break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
        break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <DMA_CheckFifoParam+0xe8>
    break;
 8003492:	bf00      	nop
    }
  }

  return status;
 8003494:	7bfb      	ldrb	r3, [r7, #15]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop

080034a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a38      	ldr	r2, [pc, #224]	; (8003598 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a36      	ldr	r2, [pc, #216]	; (800359c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a33      	ldr	r2, [pc, #204]	; (80035a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a32      	ldr	r2, [pc, #200]	; (80035a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a30      	ldr	r2, [pc, #192]	; (80035ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2f      	ldr	r2, [pc, #188]	; (80035b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a2d      	ldr	r2, [pc, #180]	; (80035b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01a      	beq.n	8003542 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	3b08      	subs	r3, #8
 8003514:	4a28      	ldr	r2, [pc, #160]	; (80035b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4b26      	ldr	r3, [pc, #152]	; (80035bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	461a      	mov	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a24      	ldr	r2, [pc, #144]	; (80035c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003530:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	2201      	movs	r2, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003540:	e024      	b.n	800358c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3b10      	subs	r3, #16
 800354a:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d806      	bhi.n	800356a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d902      	bls.n	800356a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3308      	adds	r3, #8
 8003568:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	461a      	mov	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a16      	ldr	r2, [pc, #88]	; (80035d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800357c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	2201      	movs	r2, #1
 8003586:	409a      	lsls	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	58025408 	.word	0x58025408
 800359c:	5802541c 	.word	0x5802541c
 80035a0:	58025430 	.word	0x58025430
 80035a4:	58025444 	.word	0x58025444
 80035a8:	58025458 	.word	0x58025458
 80035ac:	5802546c 	.word	0x5802546c
 80035b0:	58025480 	.word	0x58025480
 80035b4:	58025494 	.word	0x58025494
 80035b8:	cccccccd 	.word	0xcccccccd
 80035bc:	16009600 	.word	0x16009600
 80035c0:	58025880 	.word	0x58025880
 80035c4:	aaaaaaab 	.word	0xaaaaaaab
 80035c8:	400204b8 	.word	0x400204b8
 80035cc:	4002040f 	.word	0x4002040f
 80035d0:	10008200 	.word	0x10008200
 80035d4:	40020880 	.word	0x40020880

080035d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d04a      	beq.n	8003684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d847      	bhi.n	8003684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a25      	ldr	r2, [pc, #148]	; (8003690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a24      	ldr	r2, [pc, #144]	; (8003694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d01d      	beq.n	8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a22      	ldr	r2, [pc, #136]	; (8003698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	461a      	mov	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003660:	671a      	str	r2, [r3, #112]	; 0x70
 8003662:	e009      	b.n	8003678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	461a      	mov	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a11      	ldr	r2, [pc, #68]	; (80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003676:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	3b01      	subs	r3, #1
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	58025408 	.word	0x58025408
 8003694:	5802541c 	.word	0x5802541c
 8003698:	58025430 	.word	0x58025430
 800369c:	58025444 	.word	0x58025444
 80036a0:	58025458 	.word	0x58025458
 80036a4:	5802546c 	.word	0x5802546c
 80036a8:	58025480 	.word	0x58025480
 80036ac:	58025494 	.word	0x58025494
 80036b0:	1600963f 	.word	0x1600963f
 80036b4:	58025940 	.word	0x58025940
 80036b8:	1000823f 	.word	0x1000823f
 80036bc:	40020940 	.word	0x40020940

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036ce:	4b89      	ldr	r3, [pc, #548]	; (80038f4 <HAL_GPIO_Init+0x234>)
 80036d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036d2:	e194      	b.n	80039fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	2101      	movs	r1, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8186 	beq.w	80039f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d00b      	beq.n	800370c <HAL_GPIO_Init+0x4c>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d007      	beq.n	800370c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003700:	2b11      	cmp	r3, #17
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b12      	cmp	r3, #18
 800370a:	d130      	bne.n	800376e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003742:	2201      	movs	r2, #1
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0201 	and.w	r2, r3, #1
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0xee>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b12      	cmp	r3, #18
 80037ac:	d123      	bne.n	80037f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	08da      	lsrs	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3208      	adds	r2, #8
 80037b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	220f      	movs	r2, #15
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	08da      	lsrs	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3208      	adds	r2, #8
 80037f0:	69b9      	ldr	r1, [r7, #24]
 80037f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	2203      	movs	r2, #3
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0203 	and.w	r2, r3, #3
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80e0 	beq.w	80039f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003838:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_GPIO_Init+0x238>)
 800383a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800383e:	4a2e      	ldr	r2, [pc, #184]	; (80038f8 <HAL_GPIO_Init+0x238>)
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003848:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_GPIO_Init+0x238>)
 800384a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003856:	4a29      	ldr	r2, [pc, #164]	; (80038fc <HAL_GPIO_Init+0x23c>)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	220f      	movs	r2, #15
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a20      	ldr	r2, [pc, #128]	; (8003900 <HAL_GPIO_Init+0x240>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d052      	beq.n	8003928 <HAL_GPIO_Init+0x268>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_GPIO_Init+0x244>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d031      	beq.n	80038ee <HAL_GPIO_Init+0x22e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <HAL_GPIO_Init+0x248>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d02b      	beq.n	80038ea <HAL_GPIO_Init+0x22a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <HAL_GPIO_Init+0x24c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d025      	beq.n	80038e6 <HAL_GPIO_Init+0x226>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <HAL_GPIO_Init+0x250>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01f      	beq.n	80038e2 <HAL_GPIO_Init+0x222>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_GPIO_Init+0x254>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d019      	beq.n	80038de <HAL_GPIO_Init+0x21e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <HAL_GPIO_Init+0x258>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <HAL_GPIO_Init+0x21a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <HAL_GPIO_Init+0x25c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00d      	beq.n	80038d6 <HAL_GPIO_Init+0x216>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_GPIO_Init+0x260>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <HAL_GPIO_Init+0x212>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_GPIO_Init+0x264>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_GPIO_Init+0x20e>
 80038ca:	2309      	movs	r3, #9
 80038cc:	e02d      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038ce:	230a      	movs	r3, #10
 80038d0:	e02b      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038d2:	2308      	movs	r3, #8
 80038d4:	e029      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038d6:	2307      	movs	r3, #7
 80038d8:	e027      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038da:	2306      	movs	r3, #6
 80038dc:	e025      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038de:	2305      	movs	r3, #5
 80038e0:	e023      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e021      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038e6:	2303      	movs	r3, #3
 80038e8:	e01f      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e01d      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e01b      	b.n	800392a <HAL_GPIO_Init+0x26a>
 80038f2:	bf00      	nop
 80038f4:	58000080 	.word	0x58000080
 80038f8:	58024400 	.word	0x58024400
 80038fc:	58000400 	.word	0x58000400
 8003900:	58020000 	.word	0x58020000
 8003904:	58020400 	.word	0x58020400
 8003908:	58020800 	.word	0x58020800
 800390c:	58020c00 	.word	0x58020c00
 8003910:	58021000 	.word	0x58021000
 8003914:	58021400 	.word	0x58021400
 8003918:	58021800 	.word	0x58021800
 800391c:	58021c00 	.word	0x58021c00
 8003920:	58022000 	.word	0x58022000
 8003924:	58022400 	.word	0x58022400
 8003928:	2300      	movs	r3, #0
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f002 0203 	and.w	r2, r2, #3
 8003930:	0092      	lsls	r2, r2, #2
 8003932:	4093      	lsls	r3, r2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800393a:	4938      	ldr	r1, [pc, #224]	; (8003a1c <HAL_GPIO_Init+0x35c>)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	3301      	adds	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f47f ae63 	bne.w	80036d4 <HAL_GPIO_Init+0x14>
  }
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	3724      	adds	r7, #36	; 0x24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	58000400 	.word	0x58000400

08003a20 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_HSEM_FastTake+0x2c>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3320      	adds	r3, #32
 8003a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_HSEM_FastTake+0x30>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	58026400 	.word	0x58026400
 8003a50:	80000300 	.word	0x80000300

08003a54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003a5e:	4906      	ldr	r1, [pc, #24]	; (8003a78 <HAL_HSEM_Release+0x24>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	58026400 	.word	0x58026400

08003a7c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	4906      	ldr	r1, [pc, #24]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <HAL_HSEM_IRQHandler+0x30>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f807 	bl	8003ab0 <HAL_HSEM_FreeCallback>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	58026500 	.word	0x58026500

08003ab0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac6:	b08f      	sub	sp, #60	; 0x3c
 8003ac8:	af0a      	add	r7, sp, #40	; 0x28
 8003aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e116      	b.n	8003d04 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f00b fb03 	bl	800f0fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f005 fcca 	bl	80094ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	687e      	ldr	r6, [r7, #4]
 8003b22:	466d      	mov	r5, sp
 8003b24:	f106 0410 	add.w	r4, r6, #16
 8003b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b34:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b38:	1d33      	adds	r3, r6, #4
 8003b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b3c:	6838      	ldr	r0, [r7, #0]
 8003b3e:	f005 fb95 	bl	800926c <USB_CoreInit>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0d7      	b.n	8003d04 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f005 fcb8 	bl	80094d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e04a      	b.n	8003bfc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	333d      	adds	r3, #61	; 0x3d
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	333c      	adds	r3, #60	; 0x3c
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	b298      	uxth	r0, r3
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3342      	adds	r3, #66	; 0x42
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	333f      	adds	r3, #63	; 0x3f
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bba:	7bfa      	ldrb	r2, [r7, #15]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3344      	adds	r3, #68	; 0x44
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bce:	7bfa      	ldrb	r2, [r7, #15]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3348      	adds	r3, #72	; 0x48
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3350      	adds	r3, #80	; 0x50
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3af      	bcc.n	8003b66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	e044      	b.n	8003c96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c38:	7bfa      	ldrb	r2, [r7, #15]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	3301      	adds	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d3b5      	bcc.n	8003c0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	687e      	ldr	r6, [r7, #4]
 8003ca8:	466d      	mov	r5, sp
 8003caa:	f106 0410 	add.w	r4, r6, #16
 8003cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cba:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cbe:	1d33      	adds	r3, r6, #4
 8003cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f005 fc2e 	bl	8009524 <USB_DevInit>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e014      	b.n	8003d04 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d102      	bne.n	8003cf8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f001 f892 	bl	8004e1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f006 fcae 	bl	800a65e <USB_DevDisconnect>

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_PCD_Start+0x1c>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e020      	b.n	8003d6a <HAL_PCD_Start+0x5e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d109      	bne.n	8003d4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d005      	beq.n	8003d4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f005 fb9b 	bl	800948c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f006 fc5e 	bl	800a61c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d72:	b590      	push	{r4, r7, lr}
 8003d74:	b08d      	sub	sp, #52	; 0x34
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f006 fd1c 	bl	800a7c6 <USB_GetMode>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 83ca 	bne.w	800452a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f006 fc80 	bl	800a6a0 <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 83c0 	beq.w	8004528 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f006 fc77 	bl	800a6a0 <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d107      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f002 0202 	and.w	r2, r2, #2
 8003dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f006 fc65 	bl	800a6a0 <USB_ReadInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	d161      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0210 	bic.w	r2, r2, #16
 8003dee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	0c5b      	lsrs	r3, r3, #17
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d124      	bne.n	8003e66 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d035      	beq.n	8003e94 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6a38      	ldr	r0, [r7, #32]
 8003e3c:	f006 fa9c 	bl	800a378 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	091b      	lsrs	r3, r3, #4
 8003e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e4c:	441a      	add	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e5e:	441a      	add	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	619a      	str	r2, [r3, #24]
 8003e64:	e016      	b.n	8003e94 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	0c5b      	lsrs	r3, r3, #17
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d110      	bne.n	8003e94 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e78:	2208      	movs	r2, #8
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6a38      	ldr	r0, [r7, #32]
 8003e7e:	f006 fa7b 	bl	800a378 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8e:	441a      	add	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0210 	orr.w	r2, r2, #16
 8003ea2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f006 fbf9 	bl	800a6a0 <USB_ReadInterrupts>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003eb8:	d16e      	bne.n	8003f98 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f006 fbff 	bl	800a6c6 <USB_ReadDevAllOutEpInterrupt>
 8003ec8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003eca:	e062      	b.n	8003f92 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d057      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f006 fc24 	bl	800a72e <USB_ReadDevOutEPInterrupt>
 8003ee6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efe:	461a      	mov	r2, r3
 8003f00:	2301      	movs	r3, #1
 8003f02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fdde 	bl	8004ac8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00c      	beq.n	8003f30 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	461a      	mov	r2, r3
 8003f24:	2308      	movs	r3, #8
 8003f26:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fed8 	bl	8004ce0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f46:	461a      	mov	r2, r3
 8003f48:	2310      	movs	r3, #16
 8003f4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f62:	461a      	mov	r2, r3
 8003f64:	2320      	movs	r3, #32
 8003f66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	3301      	adds	r3, #1
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d199      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f006 fb7f 	bl	800a6a0 <USB_ReadInterrupts>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fac:	f040 80c0 	bne.w	8004130 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f006 fba0 	bl	800a6fa <USB_ReadDevAllInEpInterrupt>
 8003fba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fc0:	e0b2      	b.n	8004128 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a7 	beq.w	800411c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f006 fbc6 	bl	800a76a <USB_ReadDevInEPInterrupt>
 8003fde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d057      	beq.n	800409a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	43db      	mvns	r3, r3
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800400a:	4013      	ands	r3, r2
 800400c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	461a      	mov	r2, r3
 800401c:	2301      	movs	r3, #1
 800401e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d132      	bne.n	800408e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3348      	adds	r3, #72	; 0x48
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4403      	add	r3, r0
 8004048:	3344      	adds	r3, #68	; 0x44
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4419      	add	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4403      	add	r3, r0
 800405c:	3348      	adds	r3, #72	; 0x48
 800405e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	d113      	bne.n	800408e <HAL_PCD_IRQHandler+0x31c>
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3350      	adds	r3, #80	; 0x50
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d108      	bne.n	800408e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004086:	461a      	mov	r2, r3
 8004088:	2101      	movs	r1, #1
 800408a:	f006 fbcf 	bl	800a82c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	b2db      	uxtb	r3, r3
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f00b f8b2 	bl	800f1fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	461a      	mov	r2, r3
 80040b2:	2308      	movs	r3, #8
 80040b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	461a      	mov	r2, r3
 80040ce:	2310      	movs	r3, #16
 80040d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	461a      	mov	r2, r3
 80040ea:	2340      	movs	r3, #64	; 0x40
 80040ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004104:	461a      	mov	r2, r3
 8004106:	2302      	movs	r3, #2
 8004108:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fc48 	bl	80049ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	3301      	adds	r3, #1
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	085b      	lsrs	r3, r3, #1
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	f47f af49 	bne.w	8003fc2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f006 fab3 	bl	800a6a0 <USB_ReadInterrupts>
 800413a:	4603      	mov	r3, r0
 800413c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004144:	d122      	bne.n	800418c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004160:	2b01      	cmp	r3, #1
 8004162:	d108      	bne.n	8004176 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800416c:	2100      	movs	r1, #0
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fe78 	bl	8004e64 <HAL_PCDEx_LPM_Callback>
 8004174:	e002      	b.n	800417c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f00b f8b8 	bl	800f2ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695a      	ldr	r2, [r3, #20]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800418a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f006 fa85 	bl	800a6a0 <USB_ReadInterrupts>
 8004196:	4603      	mov	r3, r0
 8004198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a0:	d112      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d102      	bne.n	80041b8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f00b f874 	bl	800f2a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f006 fa67 	bl	800a6a0 <USB_ReadInterrupts>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041dc:	d121      	bne.n	8004222 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80041ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d111      	bne.n	800421c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	089b      	lsrs	r3, r3, #2
 8004208:	f003 020f 	and.w	r2, r3, #15
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004212:	2101      	movs	r1, #1
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fe25 	bl	8004e64 <HAL_PCDEx_LPM_Callback>
 800421a:	e002      	b.n	8004222 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f00b f83f 	bl	800f2a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f006 fa3a 	bl	800a6a0 <USB_ReadInterrupts>
 800422c:	4603      	mov	r3, r0
 800422e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004236:	f040 80c7 	bne.w	80043c8 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2110      	movs	r1, #16
 8004254:	4618      	mov	r0, r3
 8004256:	f005 fac3 	bl	80097e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800425a:	2300      	movs	r3, #0
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425e:	e056      	b.n	800430e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	461a      	mov	r2, r3
 800426e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004272:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004284:	0151      	lsls	r1, r2, #5
 8004286:	69fa      	ldr	r2, [r7, #28]
 8004288:	440a      	add	r2, r1
 800428a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004292:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a4:	0151      	lsls	r1, r2, #5
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	440a      	add	r2, r1
 80042aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c0:	461a      	mov	r2, r3
 80042c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004306:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	3301      	adds	r3, #1
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004314:	429a      	cmp	r2, r3
 8004316:	d3a3      	bcc.n	8004260 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004326:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800432a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	2b00      	cmp	r3, #0
 8004332:	d016      	beq.n	8004362 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004344:	f043 030b 	orr.w	r3, r3, #11
 8004348:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435a:	f043 030b 	orr.w	r3, r3, #11
 800435e:	6453      	str	r3, [r2, #68]	; 0x44
 8004360:	e015      	b.n	800438e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004370:	4619      	mov	r1, r3
 8004372:	f242 032b 	movw	r3, #8235	; 0x202b
 8004376:	4313      	orrs	r3, r2
 8004378:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004388:	f043 030b 	orr.w	r3, r3, #11
 800438c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043b2:	461a      	mov	r2, r3
 80043b4:	f006 fa3a 	bl	800a82c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80043c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 f967 	bl	800a6a0 <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043dc:	d124      	bne.n	8004428 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f006 f9fe 	bl	800a7e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f005 fa58 	bl	80098a2 <USB_GetDevSpeed>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681c      	ldr	r4, [r3, #0]
 80043fe:	f001 fce7 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8004402:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	4620      	mov	r0, r4
 800440e:	f004 ff9b 	bl	8009348 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f00a ff1b 	bl	800f24e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004426:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f006 f937 	bl	800a6a0 <USB_ReadInterrupts>
 8004432:	4603      	mov	r3, r0
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d10a      	bne.n	8004452 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f00a fef8 	bl	800f232 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f002 0208 	and.w	r2, r2, #8
 8004450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f006 f922 	bl	800a6a0 <USB_ReadInterrupts>
 800445c:	4603      	mov	r3, r0
 800445e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004466:	d10f      	bne.n	8004488 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	b2db      	uxtb	r3, r3
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f00a ff5a 	bl	800f32c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f006 f907 	bl	800a6a0 <USB_ReadInterrupts>
 8004492:	4603      	mov	r3, r0
 8004494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449c:	d10f      	bne.n	80044be <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f00a ff2d 	bl	800f308 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f006 f8ec 	bl	800a6a0 <USB_ReadInterrupts>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d10a      	bne.n	80044ea <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f00a ff3b 	bl	800f350 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f006 f8d6 	bl	800a6a0 <USB_ReadInterrupts>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d115      	bne.n	800452a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f00a ff2b 	bl	800f36c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	e000      	b.n	800452a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004528:	bf00      	nop
    }
  }
}
 800452a:	3734      	adds	r7, #52	; 0x34
 800452c:	46bd      	mov	sp, r7
 800452e:	bd90      	pop	{r4, r7, pc}

08004530 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_PCD_SetAddress+0x1a>
 8004546:	2302      	movs	r3, #2
 8004548:	e013      	b.n	8004572 <HAL_PCD_SetAddress+0x42>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f006 f834 	bl	800a5d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	4608      	mov	r0, r1
 8004584:	4611      	mov	r1, r2
 8004586:	461a      	mov	r2, r3
 8004588:	4603      	mov	r3, r0
 800458a:	70fb      	strb	r3, [r7, #3]
 800458c:	460b      	mov	r3, r1
 800458e:	803b      	strh	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800459c:	2b00      	cmp	r3, #0
 800459e:	da0f      	bge.n	80045c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	f003 020f 	and.w	r2, r3, #15
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	3338      	adds	r3, #56	; 0x38
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	3304      	adds	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	705a      	strb	r2, [r3, #1]
 80045be:	e00f      	b.n	80045e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	3304      	adds	r3, #4
 80045d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045ec:	883a      	ldrh	r2, [r7, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	78ba      	ldrb	r2, [r7, #2]
 80045f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	785b      	ldrb	r3, [r3, #1]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800460a:	78bb      	ldrb	r3, [r7, #2]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d102      	bne.n	8004616 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_PCD_EP_Open+0xaa>
 8004620:	2302      	movs	r3, #2
 8004622:	e00e      	b.n	8004642 <HAL_PCD_EP_Open+0xc8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68f9      	ldr	r1, [r7, #12]
 8004632:	4618      	mov	r0, r3
 8004634:	f005 f95a 	bl	80098ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004640:	7afb      	ldrb	r3, [r7, #11]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800465a:	2b00      	cmp	r3, #0
 800465c:	da0f      	bge.n	800467e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	f003 020f 	and.w	r2, r3, #15
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	3338      	adds	r3, #56	; 0x38
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	3304      	adds	r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	705a      	strb	r2, [r3, #1]
 800467c:	e00f      	b.n	800469e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_PCD_EP_Close+0x6e>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e00e      	b.n	80046d6 <HAL_PCD_EP_Close+0x8c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68f9      	ldr	r1, [r7, #12]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f005 f998 	bl	80099fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	460b      	mov	r3, r1
 80046ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046ee:	7afb      	ldrb	r3, [r7, #11]
 80046f0:	f003 020f 	and.w	r2, r3, #15
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	3304      	adds	r3, #4
 8004706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2200      	movs	r2, #0
 8004718:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004720:	7afb      	ldrb	r3, [r7, #11]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	b2da      	uxtb	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800473a:	7afb      	ldrb	r3, [r7, #11]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	f005 fc7b 	bl	800a04c <USB_EP0StartXfer>
 8004756:	e008      	b.n	800476a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	f005 fa25 	bl	8009bb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	f003 020f 	and.w	r2, r3, #15
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	460b      	mov	r3, r1
 80047b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b4:	7afb      	ldrb	r3, [r7, #11]
 80047b6:	f003 020f 	and.w	r2, r3, #15
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	3338      	adds	r3, #56	; 0x38
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	3304      	adds	r3, #4
 80047ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2200      	movs	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2201      	movs	r2, #1
 80047e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d102      	bne.n	80047fe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	6979      	ldr	r1, [r7, #20]
 8004816:	f005 fc19 	bl	800a04c <USB_EP0StartXfer>
 800481a:	e008      	b.n	800482e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	6979      	ldr	r1, [r7, #20]
 800482a:	f005 f9c3 	bl	8009bb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	f003 020f 	and.w	r2, r3, #15
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d901      	bls.n	8004856 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e050      	b.n	80048f8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800485a:	2b00      	cmp	r3, #0
 800485c:	da0f      	bge.n	800487e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	f003 020f 	and.w	r2, r3, #15
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	3338      	adds	r3, #56	; 0x38
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	3304      	adds	r3, #4
 8004874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	705a      	strb	r2, [r3, #1]
 800487c:	e00d      	b.n	800489a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	4413      	add	r3, r2
 8004890:	3304      	adds	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_PCD_EP_SetStall+0x82>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e01e      	b.n	80048f8 <HAL_PCD_EP_SetStall+0xc0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f005 fdad 	bl	800a428 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	b2d9      	uxtb	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048e8:	461a      	mov	r2, r3
 80048ea:	f005 ff9f 	bl	800a82c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	f003 020f 	and.w	r2, r3, #15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	429a      	cmp	r2, r3
 8004918:	d901      	bls.n	800491e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e042      	b.n	80049a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800491e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004922:	2b00      	cmp	r3, #0
 8004924:	da0f      	bge.n	8004946 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 020f 	and.w	r2, r3, #15
 800492c:	4613      	mov	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	3338      	adds	r3, #56	; 0x38
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	3304      	adds	r3, #4
 800493c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	705a      	strb	r2, [r3, #1]
 8004944:	e00f      	b.n	8004966 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	4613      	mov	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	4413      	add	r3, r2
 800495c:	3304      	adds	r3, #4
 800495e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	b2da      	uxtb	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_PCD_EP_ClrStall+0x86>
 8004982:	2302      	movs	r3, #2
 8004984:	e00e      	b.n	80049a4 <HAL_PCD_EP_ClrStall+0xa4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68f9      	ldr	r1, [r7, #12]
 8004994:	4618      	mov	r0, r3
 8004996:	f005 fdb5 	bl	800a504 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3338      	adds	r3, #56	; 0x38
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d901      	bls.n	80049e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e06c      	b.n	8004abe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d902      	bls.n	8004a00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3303      	adds	r3, #3
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a08:	e02b      	b.n	8004a62 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d902      	bls.n	8004a26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3303      	adds	r3, #3
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68d9      	ldr	r1, [r3, #12]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	4603      	mov	r3, r0
 8004a44:	6978      	ldr	r0, [r7, #20]
 8004a46:	f005 fc59 	bl	800a2fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	441a      	add	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	441a      	add	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d809      	bhi.n	8004a8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	699a      	ldr	r2, [r3, #24]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d203      	bcs.n	8004a8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1be      	bne.n	8004a0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d811      	bhi.n	8004abc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	6939      	ldr	r1, [r7, #16]
 8004ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab8:	4013      	ands	r3, r2
 8004aba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	333c      	adds	r3, #60	; 0x3c
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	f040 80a0 	bne.w	8004c40 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d015      	beq.n	8004b36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a72      	ldr	r2, [pc, #456]	; (8004cd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	f240 80dd 	bls.w	8004cce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80d7 	beq.w	8004cce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b32:	6093      	str	r3, [r2, #8]
 8004b34:	e0cb      	b.n	8004cce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d009      	beq.n	8004b54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2320      	movs	r3, #32
 8004b50:	6093      	str	r3, [r2, #8]
 8004b52:	e0bc      	b.n	8004cce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 80b7 	bne.w	8004cce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a5d      	ldr	r2, [pc, #372]	; (8004cd8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d90f      	bls.n	8004b88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b84:	6093      	str	r3, [r2, #8]
 8004b86:	e0a2      	b.n	8004cce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	0159      	lsls	r1, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004bae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4403      	add	r3, r0
 8004bbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004bc2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004bd6:	6819      	ldr	r1, [r3, #0]
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4403      	add	r3, r0
 8004be6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4419      	add	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4403      	add	r3, r0
 8004bfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c00:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d114      	bne.n	8004c32 <PCD_EP_OutXfrComplete_int+0x16a>
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d108      	bne.n	8004c32 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	f005 fdfd 	bl	800a82c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f00a fac5 	bl	800f1c8 <HAL_PCD_DataOutStageCallback>
 8004c3e:	e046      	b.n	8004cce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a26      	ldr	r2, [pc, #152]	; (8004cdc <PCD_EP_OutXfrComplete_int+0x214>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d124      	bne.n	8004c92 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c64:	6093      	str	r3, [r2, #8]
 8004c66:	e032      	b.n	8004cce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2320      	movs	r3, #32
 8004c82:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4619      	mov	r1, r3
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f00a fa9c 	bl	800f1c8 <HAL_PCD_DataOutStageCallback>
 8004c90:	e01d      	b.n	8004cce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d114      	bne.n	8004cc2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d108      	bne.n	8004cc2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	f005 fdb5 	bl	800a82c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f00a fa7d 	bl	800f1c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	4f54300a 	.word	0x4f54300a
 8004cdc:	4f54310a 	.word	0x4f54310a

08004ce0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	333c      	adds	r3, #60	; 0x3c
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d90e      	bls.n	8004d34 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d32:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f00a fa35 	bl	800f1a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d90c      	bls.n	8004d5c <PCD_EP_OutSetupPacket_int+0x7c>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d108      	bne.n	8004d5c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d54:	461a      	mov	r2, r3
 8004d56:	2101      	movs	r1, #1
 8004d58:	f005 fd68 	bl	800a82c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	4f54300a 	.word	0x4f54300a

08004d6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d8a:	883b      	ldrh	r3, [r7, #0]
 8004d8c:	0419      	lsls	r1, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
 8004d98:	e028      	b.n	8004dec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	4413      	add	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]
 8004dac:	e00d      	b.n	8004dca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	3340      	adds	r3, #64	; 0x40
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	73fb      	strb	r3, [r7, #15]
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d3ec      	bcc.n	8004dae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004dd4:	883b      	ldrh	r3, [r7, #0]
 8004dd6:	0418      	lsls	r0, r3, #16
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	4302      	orrs	r2, r0
 8004de4:	3340      	adds	r3, #64	; 0x40
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	460b      	mov	r3, r1
 8004e04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_PCDEx_ActivateLPM+0x44>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	10000003 	.word	0x10000003

08004e64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004e84:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e90:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d001      	beq.n	8004ea2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e040      	b.n	8004f24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e03e      	b.n	8004f24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ea6:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004eae:	491f      	ldr	r1, [pc, #124]	; (8004f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004eb6:	f7fc f8c3 	bl	8001040 <HAL_GetTick>
 8004eba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ebc:	e009      	b.n	8004ed2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ebe:	f7fc f8bf 	bl	8001040 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ecc:	d901      	bls.n	8004ed2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e028      	b.n	8004f24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ed2:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ede:	d1ee      	bne.n	8004ebe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b1e      	cmp	r3, #30
 8004ee4:	d008      	beq.n	8004ef8 <HAL_PWREx_ConfigSupply+0x7c>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8004eea:	d005      	beq.n	8004ef8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b1d      	cmp	r3, #29
 8004ef0:	d002      	beq.n	8004ef8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b2d      	cmp	r3, #45	; 0x2d
 8004ef6:	d114      	bne.n	8004f22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004ef8:	f7fc f8a2 	bl	8001040 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004efe:	e009      	b.n	8004f14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004f00:	f7fc f89e 	bl	8001040 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f0e:	d901      	bls.n	8004f14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e007      	b.n	8004f24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_PWREx_ConfigSupply+0xb0>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d1ee      	bne.n	8004f00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	58024800 	.word	0x58024800

08004f30 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	60d3      	str	r3, [r2, #12]
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	58024800 	.word	0x58024800

08004f50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	; 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e3ff      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8087 	beq.w	800507e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f70:	4b99      	ldr	r3, [pc, #612]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f7a:	4b97      	ldr	r3, [pc, #604]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	d007      	beq.n	8004f96 <HAL_RCC_OscConfig+0x46>
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	2b18      	cmp	r3, #24
 8004f8a:	d110      	bne.n	8004fae <HAL_RCC_OscConfig+0x5e>
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d10b      	bne.n	8004fae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f96:	4b90      	ldr	r3, [pc, #576]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d06c      	beq.n	800507c <HAL_RCC_OscConfig+0x12c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d168      	bne.n	800507c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e3d9      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb6:	d106      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x76>
 8004fb8:	4b87      	ldr	r3, [pc, #540]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a86      	ldr	r2, [pc, #536]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e02e      	b.n	8005024 <HAL_RCC_OscConfig+0xd4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x98>
 8004fce:	4b82      	ldr	r3, [pc, #520]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a81      	ldr	r2, [pc, #516]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4b7f      	ldr	r3, [pc, #508]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7e      	ldr	r2, [pc, #504]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e01d      	b.n	8005024 <HAL_RCC_OscConfig+0xd4>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff0:	d10c      	bne.n	800500c <HAL_RCC_OscConfig+0xbc>
 8004ff2:	4b79      	ldr	r3, [pc, #484]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a78      	ldr	r2, [pc, #480]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8004ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a75      	ldr	r2, [pc, #468]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	e00b      	b.n	8005024 <HAL_RCC_OscConfig+0xd4>
 800500c:	4b72      	ldr	r3, [pc, #456]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a71      	ldr	r2, [pc, #452]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	4b6f      	ldr	r3, [pc, #444]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6e      	ldr	r2, [pc, #440]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 800501e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d013      	beq.n	8005054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502c:	f7fc f808 	bl	8001040 <HAL_GetTick>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005034:	f7fc f804 	bl	8001040 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b64      	cmp	r3, #100	; 0x64
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e38d      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005046:	4b64      	ldr	r3, [pc, #400]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0xe4>
 8005052:	e014      	b.n	800507e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fb fff4 	bl	8001040 <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800505c:	f7fb fff0 	bl	8001040 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b64      	cmp	r3, #100	; 0x64
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e379      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800506e:	4b5a      	ldr	r3, [pc, #360]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f0      	bne.n	800505c <HAL_RCC_OscConfig+0x10c>
 800507a:	e000      	b.n	800507e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80ae 	beq.w	80051e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508c:	4b52      	ldr	r3, [pc, #328]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005094:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005096:	4b50      	ldr	r3, [pc, #320]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_RCC_OscConfig+0x162>
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2b18      	cmp	r3, #24
 80050a6:	d13a      	bne.n	800511e <HAL_RCC_OscConfig+0x1ce>
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d135      	bne.n	800511e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b2:	4b49      	ldr	r3, [pc, #292]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_RCC_OscConfig+0x17a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e34b      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ca:	f7fb ffe9 	bl	80010a0 <HAL_GetREVID>
 80050ce:	4603      	mov	r3, r0
 80050d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d817      	bhi.n	8005108 <HAL_RCC_OscConfig+0x1b8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d108      	bne.n	80050f2 <HAL_RCC_OscConfig+0x1a2>
 80050e0:	4b3d      	ldr	r3, [pc, #244]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80050e8:	4a3b      	ldr	r2, [pc, #236]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 80050ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f0:	e07a      	b.n	80051e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f2:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	031b      	lsls	r3, r3, #12
 8005100:	4935      	ldr	r1, [pc, #212]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005102:	4313      	orrs	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005106:	e06f      	b.n	80051e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005108:	4b33      	ldr	r3, [pc, #204]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	4930      	ldr	r1, [pc, #192]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800511c:	e064      	b.n	80051e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d045      	beq.n	80051b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005126:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 0219 	bic.w	r2, r3, #25
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4929      	ldr	r1, [pc, #164]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005134:	4313      	orrs	r3, r2
 8005136:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fb ff82 	bl	8001040 <HAL_GetTick>
 800513c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005140:	f7fb ff7e 	bl	8001040 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e307      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515e:	f7fb ff9f 	bl	80010a0 <HAL_GetREVID>
 8005162:	4603      	mov	r3, r0
 8005164:	f241 0203 	movw	r2, #4099	; 0x1003
 8005168:	4293      	cmp	r3, r2
 800516a:	d817      	bhi.n	800519c <HAL_RCC_OscConfig+0x24c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d108      	bne.n	8005186 <HAL_RCC_OscConfig+0x236>
 8005174:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800517c:	4a16      	ldr	r2, [pc, #88]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 800517e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005182:	6053      	str	r3, [r2, #4]
 8005184:	e030      	b.n	80051e8 <HAL_RCC_OscConfig+0x298>
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	031b      	lsls	r3, r3, #12
 8005194:	4910      	ldr	r1, [pc, #64]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
 800519a:	e025      	b.n	80051e8 <HAL_RCC_OscConfig+0x298>
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	061b      	lsls	r3, r3, #24
 80051aa:	490b      	ldr	r1, [pc, #44]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	604b      	str	r3, [r1, #4]
 80051b0:	e01a      	b.n	80051e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <HAL_RCC_OscConfig+0x288>)
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051be:	f7fb ff3f 	bl	8001040 <HAL_GetTick>
 80051c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c6:	f7fb ff3b 	bl	8001040 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d903      	bls.n	80051dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e2c4      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
 80051d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051dc:	4ba4      	ldr	r3, [pc, #656]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80a9 	beq.w	8005348 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051f6:	4b9e      	ldr	r3, [pc, #632]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005200:	4b9b      	ldr	r3, [pc, #620]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d007      	beq.n	800521c <HAL_RCC_OscConfig+0x2cc>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b18      	cmp	r3, #24
 8005210:	d13a      	bne.n	8005288 <HAL_RCC_OscConfig+0x338>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d135      	bne.n	8005288 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800521c:	4b94      	ldr	r3, [pc, #592]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d005      	beq.n	8005234 <HAL_RCC_OscConfig+0x2e4>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d001      	beq.n	8005234 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e296      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005234:	f7fb ff34 	bl	80010a0 <HAL_GetREVID>
 8005238:	4603      	mov	r3, r0
 800523a:	f241 0203 	movw	r2, #4099	; 0x1003
 800523e:	4293      	cmp	r3, r2
 8005240:	d817      	bhi.n	8005272 <HAL_RCC_OscConfig+0x322>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	2b20      	cmp	r3, #32
 8005248:	d108      	bne.n	800525c <HAL_RCC_OscConfig+0x30c>
 800524a:	4b89      	ldr	r3, [pc, #548]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005252:	4a87      	ldr	r2, [pc, #540]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005258:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800525a:	e075      	b.n	8005348 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800525c:	4b84      	ldr	r3, [pc, #528]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	069b      	lsls	r3, r3, #26
 800526a:	4981      	ldr	r1, [pc, #516]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800526c:	4313      	orrs	r3, r2
 800526e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005270:	e06a      	b.n	8005348 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005272:	4b7f      	ldr	r3, [pc, #508]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	497b      	ldr	r1, [pc, #492]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005282:	4313      	orrs	r3, r2
 8005284:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005286:	e05f      	b.n	8005348 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d042      	beq.n	8005316 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005290:	4b77      	ldr	r3, [pc, #476]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a76      	ldr	r2, [pc, #472]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fb fed0 	bl	8001040 <HAL_GetTick>
 80052a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052a4:	f7fb fecc 	bl	8001040 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e255      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052b6:	4b6e      	ldr	r3, [pc, #440]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052c2:	f7fb feed 	bl	80010a0 <HAL_GetREVID>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d817      	bhi.n	8005300 <HAL_RCC_OscConfig+0x3b0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d108      	bne.n	80052ea <HAL_RCC_OscConfig+0x39a>
 80052d8:	4b65      	ldr	r3, [pc, #404]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80052e0:	4a63      	ldr	r2, [pc, #396]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80052e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e6:	6053      	str	r3, [r2, #4]
 80052e8:	e02e      	b.n	8005348 <HAL_RCC_OscConfig+0x3f8>
 80052ea:	4b61      	ldr	r3, [pc, #388]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	069b      	lsls	r3, r3, #26
 80052f8:	495d      	ldr	r1, [pc, #372]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]
 80052fe:	e023      	b.n	8005348 <HAL_RCC_OscConfig+0x3f8>
 8005300:	4b5b      	ldr	r3, [pc, #364]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	061b      	lsls	r3, r3, #24
 800530e:	4958      	ldr	r1, [pc, #352]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005310:	4313      	orrs	r3, r2
 8005312:	60cb      	str	r3, [r1, #12]
 8005314:	e018      	b.n	8005348 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005316:	4b56      	ldr	r3, [pc, #344]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a55      	ldr	r2, [pc, #340]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800531c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fb fe8d 	bl	8001040 <HAL_GetTick>
 8005326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800532a:	f7fb fe89 	bl	8001040 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e212      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800533c:	4b4c      	ldr	r3, [pc, #304]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d036      	beq.n	80053c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d019      	beq.n	8005390 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800535c:	4b44      	ldr	r3, [pc, #272]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800535e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005360:	4a43      	ldr	r2, [pc, #268]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fb fe6a 	bl	8001040 <HAL_GetTick>
 800536c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005370:	f7fb fe66 	bl	8001040 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e1ef      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005382:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x420>
 800538e:	e018      	b.n	80053c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005390:	4b37      	ldr	r3, [pc, #220]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005394:	4a36      	ldr	r2, [pc, #216]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fb fe50 	bl	8001040 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053a4:	f7fb fe4c 	bl	8001040 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1d5      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80053b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d036      	beq.n	800543c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d019      	beq.n	800540a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053d6:	4b26      	ldr	r3, [pc, #152]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a25      	ldr	r2, [pc, #148]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80053dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053e2:	f7fb fe2d 	bl	8001040 <HAL_GetTick>
 80053e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053e8:	e008      	b.n	80053fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053ea:	f7fb fe29 	bl	8001040 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d901      	bls.n	80053fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e1b2      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053fc:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <HAL_RCC_OscConfig+0x49a>
 8005408:	e018      	b.n	800543c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800540a:	4b19      	ldr	r3, [pc, #100]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a18      	ldr	r2, [pc, #96]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005410:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005414:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005416:	f7fb fe13 	bl	8001040 <HAL_GetTick>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800541e:	f7fb fe0f 	bl	8001040 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e198      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005430:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <HAL_RCC_OscConfig+0x520>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f0      	bne.n	800541e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8085 	beq.w	8005554 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800544a:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <HAL_RCC_OscConfig+0x524>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a09      	ldr	r2, [pc, #36]	; (8005474 <HAL_RCC_OscConfig+0x524>)
 8005450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005456:	f7fb fdf3 	bl	8001040 <HAL_GetTick>
 800545a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800545c:	e00c      	b.n	8005478 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800545e:	f7fb fdef 	bl	8001040 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b64      	cmp	r3, #100	; 0x64
 800546a:	d905      	bls.n	8005478 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e178      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
 8005470:	58024400 	.word	0x58024400
 8005474:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005478:	4b96      	ldr	r3, [pc, #600]	; (80056d4 <HAL_RCC_OscConfig+0x784>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0ec      	beq.n	800545e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d106      	bne.n	800549a <HAL_RCC_OscConfig+0x54a>
 800548c:	4b92      	ldr	r3, [pc, #584]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	4a91      	ldr	r2, [pc, #580]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	6713      	str	r3, [r2, #112]	; 0x70
 8005498:	e02d      	b.n	80054f6 <HAL_RCC_OscConfig+0x5a6>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <HAL_RCC_OscConfig+0x56c>
 80054a2:	4b8d      	ldr	r3, [pc, #564]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	4a8c      	ldr	r2, [pc, #560]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6713      	str	r3, [r2, #112]	; 0x70
 80054ae:	4b8a      	ldr	r3, [pc, #552]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	4a89      	ldr	r2, [pc, #548]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ba:	e01c      	b.n	80054f6 <HAL_RCC_OscConfig+0x5a6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b05      	cmp	r3, #5
 80054c2:	d10c      	bne.n	80054de <HAL_RCC_OscConfig+0x58e>
 80054c4:	4b84      	ldr	r3, [pc, #528]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c8:	4a83      	ldr	r2, [pc, #524]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6713      	str	r3, [r2, #112]	; 0x70
 80054d0:	4b81      	ldr	r3, [pc, #516]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	4a80      	ldr	r2, [pc, #512]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	6713      	str	r3, [r2, #112]	; 0x70
 80054dc:	e00b      	b.n	80054f6 <HAL_RCC_OscConfig+0x5a6>
 80054de:	4b7e      	ldr	r3, [pc, #504]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	4a7d      	ldr	r2, [pc, #500]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ea:	4b7b      	ldr	r3, [pc, #492]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ee:	4a7a      	ldr	r2, [pc, #488]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80054f0:	f023 0304 	bic.w	r3, r3, #4
 80054f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d015      	beq.n	800552a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fb fd9f 	bl	8001040 <HAL_GetTick>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005504:	e00a      	b.n	800551c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fb fd9b 	bl	8001040 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	; 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e122      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800551c:	4b6e      	ldr	r3, [pc, #440]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800551e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ee      	beq.n	8005506 <HAL_RCC_OscConfig+0x5b6>
 8005528:	e014      	b.n	8005554 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552a:	f7fb fd89 	bl	8001040 <HAL_GetTick>
 800552e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005530:	e00a      	b.n	8005548 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005532:	f7fb fd85 	bl	8001040 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	4293      	cmp	r3, r2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e10c      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005548:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1ee      	bne.n	8005532 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8101 	beq.w	8005760 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800555e:	4b5e      	ldr	r3, [pc, #376]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005566:	2b18      	cmp	r3, #24
 8005568:	f000 80bc 	beq.w	80056e4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b02      	cmp	r3, #2
 8005572:	f040 8095 	bne.w	80056a0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005576:	4b58      	ldr	r3, [pc, #352]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a57      	ldr	r2, [pc, #348]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005582:	f7fb fd5d 	bl	8001040 <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800558a:	f7fb fd59 	bl	8001040 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e0e2      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800559c:	4b4e      	ldr	r3, [pc, #312]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f0      	bne.n	800558a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055a8:	4b4b      	ldr	r3, [pc, #300]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80055aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ac:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <HAL_RCC_OscConfig+0x78c>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055b8:	0112      	lsls	r2, r2, #4
 80055ba:	430a      	orrs	r2, r1
 80055bc:	4946      	ldr	r1, [pc, #280]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	628b      	str	r3, [r1, #40]	; 0x28
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	3b01      	subs	r3, #1
 80055c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	3b01      	subs	r3, #1
 80055d2:	025b      	lsls	r3, r3, #9
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	3b01      	subs	r3, #1
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	3b01      	subs	r3, #1
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055f2:	4939      	ldr	r1, [pc, #228]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80055f8:	4b37      	ldr	r3, [pc, #220]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	4a36      	ldr	r2, [pc, #216]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005604:	4b34      	ldr	r3, [pc, #208]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <HAL_RCC_OscConfig+0x790>)
 800560a:	4013      	ands	r3, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005610:	00d2      	lsls	r2, r2, #3
 8005612:	4931      	ldr	r1, [pc, #196]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005614:	4313      	orrs	r3, r2
 8005616:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005618:	4b2f      	ldr	r3, [pc, #188]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	f023 020c 	bic.w	r2, r3, #12
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	492c      	ldr	r1, [pc, #176]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005626:	4313      	orrs	r3, r2
 8005628:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800562a:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	f023 0202 	bic.w	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	4928      	ldr	r1, [pc, #160]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005638:	4313      	orrs	r3, r2
 800563a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800563c:	4b26      	ldr	r3, [pc, #152]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a25      	ldr	r2, [pc, #148]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b23      	ldr	r3, [pc, #140]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a22      	ldr	r2, [pc, #136]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005654:	4b20      	ldr	r3, [pc, #128]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800565a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800565e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005660:	4b1d      	ldr	r3, [pc, #116]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566c:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fb fce2 	bl	8001040 <HAL_GetTick>
 800567c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005680:	f7fb fcde 	bl	8001040 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e067      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005692:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0f0      	beq.n	8005680 <HAL_RCC_OscConfig+0x730>
 800569e:	e05f      	b.n	8005760 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a0c      	ldr	r2, [pc, #48]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80056a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fb fcc8 	bl	8001040 <HAL_GetTick>
 80056b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fb fcc4 	bl	8001040 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e04d      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056c6:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <HAL_RCC_OscConfig+0x788>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x764>
 80056d2:	e045      	b.n	8005760 <HAL_RCC_OscConfig+0x810>
 80056d4:	58024800 	.word	0x58024800
 80056d8:	58024400 	.word	0x58024400
 80056dc:	fffffc0c 	.word	0xfffffc0c
 80056e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056e4:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCC_OscConfig+0x81c>)
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056ea:	4b20      	ldr	r3, [pc, #128]	; (800576c <HAL_RCC_OscConfig+0x81c>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d031      	beq.n	800575c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f003 0203 	and.w	r2, r3, #3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d12a      	bne.n	800575c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d122      	bne.n	800575c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d11a      	bne.n	800575c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	0a5b      	lsrs	r3, r3, #9
 800572a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d111      	bne.n	800575c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005746:	429a      	cmp	r2, r3
 8005748:	d108      	bne.n	800575c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	0e1b      	lsrs	r3, r3, #24
 800574e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005756:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005758:	429a      	cmp	r2, r3
 800575a:	d001      	beq.n	8005760 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3730      	adds	r7, #48	; 0x30
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	58024400 	.word	0x58024400

08005770 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e19c      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005784:	4b8a      	ldr	r3, [pc, #552]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d910      	bls.n	80057b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005792:	4b87      	ldr	r3, [pc, #540]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f023 020f 	bic.w	r2, r3, #15
 800579a:	4985      	ldr	r1, [pc, #532]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a2:	4b83      	ldr	r3, [pc, #524]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d001      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e184      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	4b7b      	ldr	r3, [pc, #492]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d908      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057d0:	4b78      	ldr	r3, [pc, #480]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	4975      	ldr	r1, [pc, #468]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0308 	and.w	r3, r3, #8
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	4b70      	ldr	r3, [pc, #448]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d908      	bls.n	8005810 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057fe:	4b6d      	ldr	r3, [pc, #436]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	496a      	ldr	r1, [pc, #424]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800580c:	4313      	orrs	r3, r2
 800580e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	4b64      	ldr	r3, [pc, #400]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005828:	429a      	cmp	r2, r3
 800582a:	d908      	bls.n	800583e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800582c:	4b61      	ldr	r3, [pc, #388]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	495e      	ldr	r1, [pc, #376]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800583a:	4313      	orrs	r3, r2
 800583c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d010      	beq.n	800586c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69da      	ldr	r2, [r3, #28]
 800584e:	4b59      	ldr	r3, [pc, #356]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005856:	429a      	cmp	r2, r3
 8005858:	d908      	bls.n	800586c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800585a:	4b56      	ldr	r3, [pc, #344]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	4953      	ldr	r1, [pc, #332]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005868:	4313      	orrs	r3, r2
 800586a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d010      	beq.n	800589a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	4b4d      	ldr	r3, [pc, #308]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	429a      	cmp	r2, r3
 8005886:	d908      	bls.n	800589a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005888:	4b4a      	ldr	r3, [pc, #296]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f023 020f 	bic.w	r2, r3, #15
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4947      	ldr	r1, [pc, #284]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005896:	4313      	orrs	r3, r2
 8005898:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d055      	beq.n	8005952 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058a6:	4b43      	ldr	r3, [pc, #268]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	4940      	ldr	r1, [pc, #256]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d107      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058c0:	4b3c      	ldr	r3, [pc, #240]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d121      	bne.n	8005910 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0f6      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d107      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058d8:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d115      	bne.n	8005910 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0ea      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f0:	4b30      	ldr	r3, [pc, #192]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0de      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005900:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0d6      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005910:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f023 0207 	bic.w	r2, r3, #7
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4925      	ldr	r1, [pc, #148]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800591e:	4313      	orrs	r3, r2
 8005920:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fb fb8d 	bl	8001040 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005928:	e00a      	b.n	8005940 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592a:	f7fb fb89 	bl	8001040 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e0be      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005940:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	429a      	cmp	r2, r3
 8005950:	d1eb      	bne.n	800592a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d010      	beq.n	8005980 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	429a      	cmp	r2, r3
 800596c:	d208      	bcs.n	8005980 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f023 020f 	bic.w	r2, r3, #15
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	490e      	ldr	r1, [pc, #56]	; (80059b4 <HAL_RCC_ClockConfig+0x244>)
 800597c:	4313      	orrs	r3, r2
 800597e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 030f 	and.w	r3, r3, #15
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d214      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b08      	ldr	r3, [pc, #32]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f023 020f 	bic.w	r2, r3, #15
 8005996:	4906      	ldr	r1, [pc, #24]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599e:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d005      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e086      	b.n	8005abe <HAL_RCC_ClockConfig+0x34e>
 80059b0:	52002000 	.word	0x52002000
 80059b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	4b3f      	ldr	r3, [pc, #252]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d208      	bcs.n	80059e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059d4:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	4939      	ldr	r1, [pc, #228]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d010      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	4b34      	ldr	r3, [pc, #208]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d208      	bcs.n	8005a14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a02:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	492e      	ldr	r1, [pc, #184]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d010      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d208      	bcs.n	8005a42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	4922      	ldr	r1, [pc, #136]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d010      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	4b1d      	ldr	r3, [pc, #116]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d208      	bcs.n	8005a70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	4917      	ldr	r1, [pc, #92]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a70:	f000 f834 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	4912      	ldr	r1, [pc, #72]	; (8005acc <HAL_RCC_ClockConfig+0x35c>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <HAL_RCC_ClockConfig+0x358>)
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <HAL_RCC_ClockConfig+0x35c>)
 8005a98:	5cd3      	ldrb	r3, [r2, r3]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa4:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <HAL_RCC_ClockConfig+0x360>)
 8005aa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aa8:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <HAL_RCC_ClockConfig+0x364>)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005aae:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <HAL_RCC_ClockConfig+0x368>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fb f864 	bl	8000b80 <HAL_InitTick>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	0800f824 	.word	0x0800f824
 8005ad0:	20000004 	.word	0x20000004
 8005ad4:	20000000 	.word	0x20000000
 8005ad8:	20000008 	.word	0x20000008

08005adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae2:	4bb3      	ldr	r3, [pc, #716]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aea:	2b18      	cmp	r3, #24
 8005aec:	f200 8155 	bhi.w	8005d9a <HAL_RCC_GetSysClockFreq+0x2be>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b5d 	.word	0x08005b5d
 8005afc:	08005d9b 	.word	0x08005d9b
 8005b00:	08005d9b 	.word	0x08005d9b
 8005b04:	08005d9b 	.word	0x08005d9b
 8005b08:	08005d9b 	.word	0x08005d9b
 8005b0c:	08005d9b 	.word	0x08005d9b
 8005b10:	08005d9b 	.word	0x08005d9b
 8005b14:	08005d9b 	.word	0x08005d9b
 8005b18:	08005b83 	.word	0x08005b83
 8005b1c:	08005d9b 	.word	0x08005d9b
 8005b20:	08005d9b 	.word	0x08005d9b
 8005b24:	08005d9b 	.word	0x08005d9b
 8005b28:	08005d9b 	.word	0x08005d9b
 8005b2c:	08005d9b 	.word	0x08005d9b
 8005b30:	08005d9b 	.word	0x08005d9b
 8005b34:	08005d9b 	.word	0x08005d9b
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005d9b 	.word	0x08005d9b
 8005b40:	08005d9b 	.word	0x08005d9b
 8005b44:	08005d9b 	.word	0x08005d9b
 8005b48:	08005d9b 	.word	0x08005d9b
 8005b4c:	08005d9b 	.word	0x08005d9b
 8005b50:	08005d9b 	.word	0x08005d9b
 8005b54:	08005d9b 	.word	0x08005d9b
 8005b58:	08005b8f 	.word	0x08005b8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b5c:	4b94      	ldr	r3, [pc, #592]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0320 	and.w	r3, r3, #32
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b68:	4b91      	ldr	r3, [pc, #580]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	08db      	lsrs	r3, r3, #3
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	4a90      	ldr	r2, [pc, #576]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
 8005b78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b7a:	e111      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b7c:	4b8d      	ldr	r3, [pc, #564]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b7e:	61bb      	str	r3, [r7, #24]
    break;
 8005b80:	e10e      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b82:	4b8d      	ldr	r3, [pc, #564]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b84:	61bb      	str	r3, [r7, #24]
    break;
 8005b86:	e10b      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005b88:	4b8c      	ldr	r3, [pc, #560]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b8a:	61bb      	str	r3, [r7, #24]
    break;
 8005b8c:	e108      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b8e:	4b88      	ldr	r3, [pc, #544]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005b98:	4b85      	ldr	r3, [pc, #532]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	091b      	lsrs	r3, r3, #4
 8005b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ba4:	4b82      	ldr	r3, [pc, #520]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005bae:	4b80      	ldr	r3, [pc, #512]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	08db      	lsrs	r3, r3, #3
 8005bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	ee07 3a90 	vmov	s15, r3
 8005bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80e1 	beq.w	8005d94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	f000 8083 	beq.w	8005ce0 <HAL_RCC_GetSysClockFreq+0x204>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	f200 80a1 	bhi.w	8005d24 <HAL_RCC_GetSysClockFreq+0x248>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x114>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d056      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bee:	e099      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bf0:	4b6f      	ldr	r3, [pc, #444]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0320 	and.w	r3, r3, #32
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d02d      	beq.n	8005c58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bfc:	4b6c      	ldr	r3, [pc, #432]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	08db      	lsrs	r3, r3, #3
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	4a6b      	ldr	r2, [pc, #428]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	ee07 3a90 	vmov	s15, r3
 8005c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c26:	4b62      	ldr	r3, [pc, #392]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2e:	ee07 3a90 	vmov	s15, r3
 8005c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c36:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005c56:	e087      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005dc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c6a:	4b51      	ldr	r3, [pc, #324]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c9a:	e065      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cae:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb6:	ee07 3a90 	vmov	s15, r3
 8005cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cde:	e043      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005dcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf2:	4b2f      	ldr	r3, [pc, #188]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d22:	e021      	b.n	8005d68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d36:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005dc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005d68:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	0a5b      	lsrs	r3, r3, #9
 8005d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d72:	3301      	adds	r3, #1
 8005d74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	ee07 3a90 	vmov	s15, r3
 8005d7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8c:	ee17 3a90 	vmov	r3, s15
 8005d90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005d92:	e005      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61bb      	str	r3, [r7, #24]
    break;
 8005d98:	e002      	b.n	8005da0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d9c:	61bb      	str	r3, [r7, #24]
    break;
 8005d9e:	bf00      	nop
  }

  return sysclockfreq;
 8005da0:	69bb      	ldr	r3, [r7, #24]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	58024400 	.word	0x58024400
 8005db4:	03d09000 	.word	0x03d09000
 8005db8:	003d0900 	.word	0x003d0900
 8005dbc:	00f42400 	.word	0x00f42400
 8005dc0:	46000000 	.word	0x46000000
 8005dc4:	4c742400 	.word	0x4c742400
 8005dc8:	4a742400 	.word	0x4a742400
 8005dcc:	4b742400 	.word	0x4b742400

08005dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dd6:	f7ff fe81 	bl	8005adc <HAL_RCC_GetSysClockFreq>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	490f      	ldr	r1, [pc, #60]	; (8005e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005de8:	5ccb      	ldrb	r3, [r1, r3]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	fa22 f303 	lsr.w	r3, r2, r3
 8005df2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df4:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <HAL_RCC_GetHCLKFreq+0x50>)
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <HAL_RCC_GetHCLKFreq+0x54>)
 8005dfe:	5cd3      	ldrb	r3, [r2, r3]
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e0e:	4a07      	ldr	r2, [pc, #28]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e14:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e16:	681b      	ldr	r3, [r3, #0]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	58024400 	.word	0x58024400
 8005e24:	0800f824 	.word	0x0800f824
 8005e28:	20000004 	.word	0x20000004
 8005e2c:	20000000 	.word	0x20000000

08005e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e34:	f7ff ffcc 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	4904      	ldr	r1, [pc, #16]	; (8005e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	58024400 	.word	0x58024400
 8005e58:	0800f824 	.word	0x0800f824

08005e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e60:	f7ff ffb6 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005e64:	4602      	mov	r2, r0
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	4904      	ldr	r1, [pc, #16]	; (8005e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e72:	5ccb      	ldrb	r3, [r1, r3]
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	58024400 	.word	0x58024400
 8005e84:	0800f824 	.word	0x0800f824

08005e88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	223f      	movs	r2, #63	; 0x3f
 8005e96:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <HAL_RCC_GetClockConfig+0x7c>)
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	f003 0207 	and.w	r2, r3, #7
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005ea4:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <HAL_RCC_GetClockConfig+0x7c>)
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <HAL_RCC_GetClockConfig+0x7c>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <HAL_RCC_GetClockConfig+0x7c>)
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005ec8:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <HAL_RCC_GetClockConfig+0x7c>)
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCC_GetClockConfig+0x7c>)
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005ee0:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_RCC_GetClockConfig+0x7c>)
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <HAL_RCC_GetClockConfig+0x80>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	601a      	str	r2, [r3, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	58024400 	.word	0x58024400
 8005f08:	52002000 	.word	0x52002000

08005f0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f14:	2300      	movs	r3, #0
 8005f16:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d03f      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f30:	d02a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f36:	d824      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f3c:	d018      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f42:	d81e      	bhi.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f4c:	d007      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005f4e:	e018      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f50:	4bab      	ldr	r3, [pc, #684]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	4aaa      	ldr	r2, [pc, #680]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f5c:	e015      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3304      	adds	r3, #4
 8005f62:	2102      	movs	r1, #2
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f9cf 	bl	8007308 <RCCEx_PLL2_Config>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f6e:	e00c      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3324      	adds	r3, #36	; 0x24
 8005f74:	2102      	movs	r1, #2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fa78 	bl	800746c <RCCEx_PLL3_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f80:	e003      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
      break;
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d109      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f90:	4b9b      	ldr	r3, [pc, #620]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f9c:	4998      	ldr	r1, [pc, #608]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	650b      	str	r3, [r1, #80]	; 0x50
 8005fa2:	e001      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
 8005fa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d03d      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d826      	bhi.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08005fd9 	.word	0x08005fd9
 8005fc8:	08005fe7 	.word	0x08005fe7
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	08006011 	.word	0x08006011
 8005fd4:	08006011 	.word	0x08006011
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fd8:	4b89      	ldr	r3, [pc, #548]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4a88      	ldr	r2, [pc, #544]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005fe4:	e015      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 f98b 	bl	8007308 <RCCEx_PLL2_Config>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ff6:	e00c      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3324      	adds	r3, #36	; 0x24
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fa34 	bl	800746c <RCCEx_PLL3_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006008:	e003      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
      break;
 800600e:	e000      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006018:	4b79      	ldr	r3, [pc, #484]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800601a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601c:	f023 0207 	bic.w	r2, r3, #7
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	4976      	ldr	r1, [pc, #472]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006026:	4313      	orrs	r3, r2
 8006028:	650b      	str	r3, [r1, #80]	; 0x50
 800602a:	e001      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006038:	2b00      	cmp	r3, #0
 800603a:	d042      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006044:	d02b      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604a:	d825      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800604c:	2bc0      	cmp	r3, #192	; 0xc0
 800604e:	d028      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006050:	2bc0      	cmp	r3, #192	; 0xc0
 8006052:	d821      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006054:	2b80      	cmp	r3, #128	; 0x80
 8006056:	d016      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006058:	2b80      	cmp	r3, #128	; 0x80
 800605a:	d81d      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d007      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006064:	e018      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006066:	4b66      	ldr	r3, [pc, #408]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	4a65      	ldr	r2, [pc, #404]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800606c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006070:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006072:	e017      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3304      	adds	r3, #4
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f944 	bl	8007308 <RCCEx_PLL2_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006084:	e00e      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3324      	adds	r3, #36	; 0x24
 800608a:	2100      	movs	r1, #0
 800608c:	4618      	mov	r0, r3
 800608e:	f001 f9ed 	bl	800746c <RCCEx_PLL3_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006096:	e005      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	75fb      	strb	r3, [r7, #23]
      break;
 800609c:	e002      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800609e:	bf00      	nop
 80060a0:	e000      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80060a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060aa:	4b55      	ldr	r3, [pc, #340]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	4952      	ldr	r1, [pc, #328]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	650b      	str	r3, [r1, #80]	; 0x50
 80060bc:	e001      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d049      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060d8:	d030      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80060da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060de:	d82a      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060e4:	d02c      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80060e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060ea:	d824      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f0:	d018      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80060f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f6:	d81e      	bhi.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80060fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006100:	d007      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006102:	e018      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006104:	4b3e      	ldr	r3, [pc, #248]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	4a3d      	ldr	r2, [pc, #244]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800610a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800610e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006110:	e017      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3304      	adds	r3, #4
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f001 f8f5 	bl	8007308 <RCCEx_PLL2_Config>
 800611e:	4603      	mov	r3, r0
 8006120:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006122:	e00e      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3324      	adds	r3, #36	; 0x24
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f001 f99e 	bl	800746c <RCCEx_PLL3_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006134:	e005      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	75fb      	strb	r3, [r7, #23]
      break;
 800613a:	e002      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006148:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006156:	492a      	ldr	r1, [pc, #168]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006158:	4313      	orrs	r3, r2
 800615a:	658b      	str	r3, [r1, #88]	; 0x58
 800615c:	e001      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800616a:	2b00      	cmp	r3, #0
 800616c:	d04c      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006178:	d030      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800617a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800617e:	d82a      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006180:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006184:	d02c      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006186:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800618a:	d824      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800618c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006190:	d018      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006196:	d81e      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800619c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061a0:	d007      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80061a2:	e018      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a4:	4b16      	ldr	r3, [pc, #88]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	4a15      	ldr	r2, [pc, #84]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061b0:	e017      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3304      	adds	r3, #4
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f8a5 	bl	8007308 <RCCEx_PLL2_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80061c2:	e00e      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3324      	adds	r3, #36	; 0x24
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f94e 	bl	800746c <RCCEx_PLL3_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061d4:	e005      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
      break;
 80061da:	e002      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80061dc:	bf00      	nop
 80061de:	e000      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80061e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10d      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061f6:	4902      	ldr	r1, [pc, #8]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	658b      	str	r3, [r1, #88]	; 0x58
 80061fc:	e004      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80061fe:	bf00      	nop
 8006200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
 8006206:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d032      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006218:	2b30      	cmp	r3, #48	; 0x30
 800621a:	d01c      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d817      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006220:	2b20      	cmp	r3, #32
 8006222:	d00c      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d813      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d016      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800622c:	2b10      	cmp	r3, #16
 800622e:	d10f      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4baf      	ldr	r3, [pc, #700]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	4aae      	ldr	r2, [pc, #696]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800623c:	e00e      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3304      	adds	r3, #4
 8006242:	2102      	movs	r1, #2
 8006244:	4618      	mov	r0, r3
 8006246:	f001 f85f 	bl	8007308 <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800624e:	e005      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	75fb      	strb	r3, [r7, #23]
      break;
 8006254:	e002      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800625a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006262:	4ba3      	ldr	r3, [pc, #652]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	49a0      	ldr	r1, [pc, #640]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006270:	4313      	orrs	r3, r2
 8006272:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006274:	e001      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d047      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800628e:	d030      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006294:	d82a      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800629a:	d02c      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800629c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062a0:	d824      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80062a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a6:	d018      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d81e      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80062b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b6:	d007      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80062b8:	e018      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ba:	4b8d      	ldr	r3, [pc, #564]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	4a8c      	ldr	r2, [pc, #560]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80062c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80062c6:	e017      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 f81a 	bl	8007308 <RCCEx_PLL2_Config>
 80062d4:	4603      	mov	r3, r0
 80062d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80062d8:	e00e      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3324      	adds	r3, #36	; 0x24
 80062de:	2100      	movs	r1, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 f8c3 	bl	800746c <RCCEx_PLL3_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80062ea:	e005      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	75fb      	strb	r3, [r7, #23]
      break;
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80062f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80062fe:	4b7c      	ldr	r3, [pc, #496]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006302:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	4979      	ldr	r1, [pc, #484]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800630c:	4313      	orrs	r3, r2
 800630e:	650b      	str	r3, [r1, #80]	; 0x50
 8006310:	e001      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d049      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006326:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800632a:	d02e      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800632c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006330:	d828      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006336:	d02a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800633c:	d822      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800633e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006342:	d026      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006344:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006348:	d81c      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800634a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800634e:	d010      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006354:	d816      	bhi.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01d      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800635a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635e:	d111      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f000 ffce 	bl	8007308 <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006370:	e012      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3324      	adds	r3, #36	; 0x24
 8006376:	2101      	movs	r1, #1
 8006378:	4618      	mov	r0, r3
 800637a:	f001 f877 	bl	800746c <RCCEx_PLL3_Config>
 800637e:	4603      	mov	r3, r0
 8006380:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006382:	e009      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
      break;
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800638a:	bf00      	nop
 800638c:	e004      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800639e:	4b54      	ldr	r3, [pc, #336]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063aa:	4951      	ldr	r1, [pc, #324]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	650b      	str	r3, [r1, #80]	; 0x50
 80063b0:	e001      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
 80063b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d04b      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063cc:	d02e      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80063ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d2:	d828      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80063d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d8:	d02a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063de:	d822      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80063e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063e4:	d026      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80063e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063ea:	d81c      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80063ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f0:	d010      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80063f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f6:	d816      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01d      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80063fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006400:	d111      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	2101      	movs	r1, #1
 8006408:	4618      	mov	r0, r3
 800640a:	f000 ff7d 	bl	8007308 <RCCEx_PLL2_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006412:	e012      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	2101      	movs	r1, #1
 800641a:	4618      	mov	r0, r3
 800641c:	f001 f826 	bl	800746c <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006424:	e009      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
      break;
 800642a:	e006      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800642c:	bf00      	nop
 800642e:	e004      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006440:	4b2b      	ldr	r3, [pc, #172]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006444:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800644e:	4928      	ldr	r1, [pc, #160]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006450:	4313      	orrs	r3, r2
 8006452:	658b      	str	r3, [r1, #88]	; 0x58
 8006454:	e001      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d02f      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800646e:	d00e      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006474:	d814      	bhi.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d015      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800647a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800647e:	d10f      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b1b      	ldr	r3, [pc, #108]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a1a      	ldr	r2, [pc, #104]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800648c:	e00c      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f000 ff37 	bl	8007308 <RCCEx_PLL2_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800649e:	e003      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80064a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80064ae:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ba:	490d      	ldr	r1, [pc, #52]	; (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	650b      	str	r3, [r1, #80]	; 0x50
 80064c0:	e001      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d033      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d81c      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	0800651b 	.word	0x0800651b
 80064e4:	080064f5 	.word	0x080064f5
 80064e8:	08006503 	.word	0x08006503
 80064ec:	0800651b 	.word	0x0800651b
 80064f0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064f4:	4bb8      	ldr	r3, [pc, #736]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	4ab7      	ldr	r2, [pc, #732]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80064fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006500:	e00c      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	2102      	movs	r1, #2
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fefd 	bl	8007308 <RCCEx_PLL2_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006512:	e003      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	75fb      	strb	r3, [r7, #23]
      break;
 8006518:	e000      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800651a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800651c:	7dfb      	ldrb	r3, [r7, #23]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006522:	4bad      	ldr	r3, [pc, #692]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	f023 0203 	bic.w	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	49aa      	ldr	r1, [pc, #680]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006530:	4313      	orrs	r3, r2
 8006532:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006534:	e001      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8086 	beq.w	8006654 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006548:	4ba4      	ldr	r3, [pc, #656]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4aa3      	ldr	r2, [pc, #652]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800654e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006554:	f7fa fd74 	bl	8001040 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800655a:	e009      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800655c:	f7fa fd70 	bl	8001040 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d902      	bls.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	75fb      	strb	r3, [r7, #23]
        break;
 800656e:	e005      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006570:	4b9a      	ldr	r3, [pc, #616]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0ef      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800657c:	7dfb      	ldrb	r3, [r7, #23]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d166      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006582:	4b95      	ldr	r3, [pc, #596]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800658c:	4053      	eors	r3, r2
 800658e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006592:	2b00      	cmp	r3, #0
 8006594:	d013      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006596:	4b90      	ldr	r3, [pc, #576]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065a0:	4b8d      	ldr	r3, [pc, #564]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	4a8c      	ldr	r2, [pc, #560]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065ac:	4b8a      	ldr	r3, [pc, #552]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b0:	4a89      	ldr	r2, [pc, #548]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80065b8:	4a87      	ldr	r2, [pc, #540]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c8:	d115      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fa fd39 	bl	8001040 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065d0:	e00b      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d2:	f7fa fd35 	bl	8001040 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d902      	bls.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	75fb      	strb	r3, [r7, #23]
            break;
 80065e8:	e005      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065ea:	4b7b      	ldr	r3, [pc, #492]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0ed      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d126      	bne.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800660a:	d10d      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800660c:	4b72      	ldr	r3, [pc, #456]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800661a:	0919      	lsrs	r1, r3, #4
 800661c:	4b70      	ldr	r3, [pc, #448]	; (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800661e:	400b      	ands	r3, r1
 8006620:	496d      	ldr	r1, [pc, #436]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006622:	4313      	orrs	r3, r2
 8006624:	610b      	str	r3, [r1, #16]
 8006626:	e005      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006628:	4b6b      	ldr	r3, [pc, #428]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	4a6a      	ldr	r2, [pc, #424]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800662e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006632:	6113      	str	r3, [r2, #16]
 8006634:	4b68      	ldr	r3, [pc, #416]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006636:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800663e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006642:	4965      	ldr	r1, [pc, #404]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006644:	4313      	orrs	r3, r2
 8006646:	670b      	str	r3, [r1, #112]	; 0x70
 8006648:	e004      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	75bb      	strb	r3, [r7, #22]
 800664e:	e001      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d07e      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006664:	2b28      	cmp	r3, #40	; 0x28
 8006666:	d867      	bhi.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	0800673f 	.word	0x0800673f
 8006674:	08006739 	.word	0x08006739
 8006678:	08006739 	.word	0x08006739
 800667c:	08006739 	.word	0x08006739
 8006680:	08006739 	.word	0x08006739
 8006684:	08006739 	.word	0x08006739
 8006688:	08006739 	.word	0x08006739
 800668c:	08006739 	.word	0x08006739
 8006690:	08006715 	.word	0x08006715
 8006694:	08006739 	.word	0x08006739
 8006698:	08006739 	.word	0x08006739
 800669c:	08006739 	.word	0x08006739
 80066a0:	08006739 	.word	0x08006739
 80066a4:	08006739 	.word	0x08006739
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006727 	.word	0x08006727
 80066b4:	08006739 	.word	0x08006739
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	08006739 	.word	0x08006739
 80066c8:	08006739 	.word	0x08006739
 80066cc:	08006739 	.word	0x08006739
 80066d0:	0800673f 	.word	0x0800673f
 80066d4:	08006739 	.word	0x08006739
 80066d8:	08006739 	.word	0x08006739
 80066dc:	08006739 	.word	0x08006739
 80066e0:	08006739 	.word	0x08006739
 80066e4:	08006739 	.word	0x08006739
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	0800673f 	.word	0x0800673f
 80066f4:	08006739 	.word	0x08006739
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006739 	.word	0x08006739
 8006708:	08006739 	.word	0x08006739
 800670c:	08006739 	.word	0x08006739
 8006710:	0800673f 	.word	0x0800673f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3304      	adds	r3, #4
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fdf4 	bl	8007308 <RCCEx_PLL2_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006724:	e00c      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3324      	adds	r3, #36	; 0x24
 800672a:	2101      	movs	r1, #1
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fe9d 	bl	800746c <RCCEx_PLL3_Config>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006736:	e003      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	75fb      	strb	r3, [r7, #23]
      break;
 800673c:	e000      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800673e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006746:	4b24      	ldr	r3, [pc, #144]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006752:	4921      	ldr	r1, [pc, #132]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006754:	4313      	orrs	r3, r2
 8006756:	654b      	str	r3, [r1, #84]	; 0x54
 8006758:	e001      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	7dfb      	ldrb	r3, [r7, #23]
 800675c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d03e      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676e:	2b05      	cmp	r3, #5
 8006770:	d820      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	080067bb 	.word	0x080067bb
 800677c:	08006791 	.word	0x08006791
 8006780:	080067a3 	.word	0x080067a3
 8006784:	080067bb 	.word	0x080067bb
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067bb 	.word	0x080067bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	2101      	movs	r1, #1
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fdb6 	bl	8007308 <RCCEx_PLL2_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80067a0:	e00c      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3324      	adds	r3, #36	; 0x24
 80067a6:	2101      	movs	r1, #1
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fe5f 	bl	800746c <RCCEx_PLL3_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80067b2:	e003      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	75fb      	strb	r3, [r7, #23]
      break;
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80067ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d110      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	f023 0207 	bic.w	r2, r3, #7
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ce:	4902      	ldr	r1, [pc, #8]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	654b      	str	r3, [r1, #84]	; 0x54
 80067d4:	e008      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80067d6:	bf00      	nop
 80067d8:	58024400 	.word	0x58024400
 80067dc:	58024800 	.word	0x58024800
 80067e0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	7dfb      	ldrb	r3, [r7, #23]
 80067e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d039      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	d820      	bhi.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80067fe:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006847 	.word	0x08006847
 8006808:	0800681d 	.word	0x0800681d
 800680c:	0800682f 	.word	0x0800682f
 8006810:	08006847 	.word	0x08006847
 8006814:	08006847 	.word	0x08006847
 8006818:	08006847 	.word	0x08006847
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2101      	movs	r1, #1
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fd70 	bl	8007308 <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800682c:	e00c      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3324      	adds	r3, #36	; 0x24
 8006832:	2101      	movs	r1, #1
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fe19 	bl	800746c <RCCEx_PLL3_Config>
 800683a:	4603      	mov	r3, r0
 800683c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800683e:	e003      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
      break;
 8006844:	e000      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800684e:	4bb7      	ldr	r3, [pc, #732]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006852:	f023 0207 	bic.w	r2, r3, #7
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685c:	49b3      	ldr	r1, [pc, #716]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800685e:	4313      	orrs	r3, r2
 8006860:	658b      	str	r3, [r1, #88]	; 0x58
 8006862:	e001      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0320 	and.w	r3, r3, #32
 8006870:	2b00      	cmp	r3, #0
 8006872:	d04b      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800687a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800687e:	d02e      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006884:	d828      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688a:	d02a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800688c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006890:	d822      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006896:	d026      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006898:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800689c:	d81c      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800689e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a2:	d010      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80068a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a8:	d816      	bhi.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01d      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80068ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068b2:	d111      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fd24 	bl	8007308 <RCCEx_PLL2_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80068c4:	e012      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3324      	adds	r3, #36	; 0x24
 80068ca:	2102      	movs	r1, #2
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fdcd 	bl	800746c <RCCEx_PLL3_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80068d6:	e009      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	75fb      	strb	r3, [r7, #23]
      break;
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80068de:	bf00      	nop
 80068e0:	e004      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80068e2:	bf00      	nop
 80068e4:	e002      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80068ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068f2:	4b8e      	ldr	r3, [pc, #568]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006900:	498a      	ldr	r1, [pc, #552]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006902:	4313      	orrs	r3, r2
 8006904:	654b      	str	r3, [r1, #84]	; 0x54
 8006906:	e001      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	d04b      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800691e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006922:	d02e      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006924:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006928:	d828      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800692a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692e:	d02a      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006934:	d822      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800693a:	d026      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800693c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006940:	d81c      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006946:	d010      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800694c:	d816      	bhi.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01d      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006956:	d111      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3304      	adds	r3, #4
 800695c:	2100      	movs	r1, #0
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fcd2 	bl	8007308 <RCCEx_PLL2_Config>
 8006964:	4603      	mov	r3, r0
 8006966:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006968:	e012      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3324      	adds	r3, #36	; 0x24
 800696e:	2102      	movs	r1, #2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fd7b 	bl	800746c <RCCEx_PLL3_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800697a:	e009      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	75fb      	strb	r3, [r7, #23]
      break;
 8006980:	e006      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006982:	bf00      	nop
 8006984:	e004      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006986:	bf00      	nop
 8006988:	e002      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800698a:	bf00      	nop
 800698c:	e000      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800698e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006996:	4b65      	ldr	r3, [pc, #404]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069a4:	4961      	ldr	r1, [pc, #388]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	658b      	str	r3, [r1, #88]	; 0x58
 80069aa:	e001      	b.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d04b      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069c6:	d02e      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80069c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80069cc:	d828      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80069ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d2:	d02a      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80069d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069d8:	d822      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80069da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069de:	d026      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80069e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80069e4:	d81c      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80069e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ea:	d010      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80069ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f0:	d816      	bhi.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01d      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	d111      	bne.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fc80 	bl	8007308 <RCCEx_PLL2_Config>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a0c:	e012      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3324      	adds	r3, #36	; 0x24
 8006a12:	2102      	movs	r1, #2
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fd29 	bl	800746c <RCCEx_PLL3_Config>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a1e:	e009      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	75fb      	strb	r3, [r7, #23]
      break;
 8006a24:	e006      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a26:	bf00      	nop
 8006a28:	e004      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a2a:	bf00      	nop
 8006a2c:	e002      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a2e:	bf00      	nop
 8006a30:	e000      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a3a:	4b3c      	ldr	r3, [pc, #240]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a48:	4938      	ldr	r1, [pc, #224]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8006a4e:	e001      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01a      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6a:	d10a      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3324      	adds	r3, #36	; 0x24
 8006a70:	2102      	movs	r1, #2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fcfa 	bl	800746c <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a82:	4b2a      	ldr	r3, [pc, #168]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a90:	4926      	ldr	r1, [pc, #152]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01a      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aac:	d10a      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3324      	adds	r3, #36	; 0x24
 8006ab2:	2102      	movs	r1, #2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fcd9 	bl	800746c <RCCEx_PLL3_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad2:	4916      	ldr	r1, [pc, #88]	; (8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d036      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aee:	d01f      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af4:	d817      	bhi.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afe:	d009      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006b00:	e011      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3304      	adds	r3, #4
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fbfd 	bl	8007308 <RCCEx_PLL2_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b12:	e00e      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3324      	adds	r3, #36	; 0x24
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fca6 	bl	800746c <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b24:	e005      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2a:	e002      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006b2c:	58024400 	.word	0x58024400
      break;
 8006b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b32:	7dfb      	ldrb	r3, [r7, #23]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b38:	4b93      	ldr	r3, [pc, #588]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b46:	4990      	ldr	r1, [pc, #576]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	658b      	str	r3, [r1, #88]	; 0x58
 8006b4c:	e001      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
 8006b50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d033      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b68:	d01c      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006b6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b6e:	d816      	bhi.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b74:	d003      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006b76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b7a:	d007      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006b7c:	e00f      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7e:	4b82      	ldr	r3, [pc, #520]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	4a81      	ldr	r2, [pc, #516]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b8a:	e00c      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	2101      	movs	r1, #1
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fc6a 	bl	800746c <RCCEx_PLL3_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b9c:	e003      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba2:	e000      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bac:	4b76      	ldr	r3, [pc, #472]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bba:	4973      	ldr	r1, [pc, #460]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	654b      	str	r3, [r1, #84]	; 0x54
 8006bc0:	e001      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d029      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bde:	d007      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006be0:	e00f      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be2:	4b69      	ldr	r3, [pc, #420]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	4a68      	ldr	r2, [pc, #416]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006bee:	e00b      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fb86 	bl	8007308 <RCCEx_PLL2_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c00:	e002      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
      break;
 8006c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c0e:	4b5e      	ldr	r3, [pc, #376]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	495b      	ldr	r1, [pc, #364]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c20:	e001      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3324      	adds	r3, #36	; 0x24
 8006c36:	2102      	movs	r1, #2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fc17 	bl	800746c <RCCEx_PLL3_Config>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d030      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c5c:	d017      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c62:	d811      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c68:	d013      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d80b      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d010      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c78:	d106      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7a:	4b43      	ldr	r3, [pc, #268]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	4a42      	ldr	r2, [pc, #264]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006c86:	e007      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c9e:	4b3a      	ldr	r3, [pc, #232]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006caa:	4937      	ldr	r1, [pc, #220]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	654b      	str	r3, [r1, #84]	; 0x54
 8006cb0:	e001      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cc2:	4b31      	ldr	r3, [pc, #196]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	492e      	ldr	r1, [pc, #184]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d009      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ce0:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006cee:	4926      	ldr	r1, [pc, #152]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d0c:	491e      	ldr	r1, [pc, #120]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d1e:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	4a19      	ldr	r2, [pc, #100]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d28:	6113      	str	r3, [r2, #16]
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d34:	4914      	ldr	r1, [pc, #80]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	da08      	bge.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d42:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4e:	490e      	ldr	r1, [pc, #56]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d009      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d60:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6e:	4906      	ldr	r1, [pc, #24]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006d74:	7dbb      	ldrb	r3, [r7, #22]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e000      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58024400 	.word	0x58024400

08006d8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d90:	f7ff f81e 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8006d94:	4602      	mov	r2, r0
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	4904      	ldr	r1, [pc, #16]	; (8006db4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006da2:	5ccb      	ldrb	r3, [r1, r3]
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	58024400 	.word	0x58024400
 8006db4:	0800f824 	.word	0x0800f824

08006db8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b089      	sub	sp, #36	; 0x24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dc0:	4ba1      	ldr	r3, [pc, #644]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006dca:	4b9f      	ldr	r3, [pc, #636]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	0b1b      	lsrs	r3, r3, #12
 8006dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006dd6:	4b9c      	ldr	r3, [pc, #624]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	091b      	lsrs	r3, r3, #4
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006de2:	4b99      	ldr	r3, [pc, #612]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	08db      	lsrs	r3, r3, #3
 8006de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8111 	beq.w	8007028 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	f000 8083 	beq.w	8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	f200 80a1 	bhi.w	8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d056      	beq.n	8006ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006e22:	e099      	b.n	8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e24:	4b88      	ldr	r3, [pc, #544]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d02d      	beq.n	8006e8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e30:	4b85      	ldr	r3, [pc, #532]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	08db      	lsrs	r3, r3, #3
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	4a84      	ldr	r2, [pc, #528]	; (800704c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e40:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5a:	4b7b      	ldr	r3, [pc, #492]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e8a:	e087      	b.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007054 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9e:	4b6a      	ldr	r3, [pc, #424]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ece:	e065      	b.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee2:	4b59      	ldr	r3, [pc, #356]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ef6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f12:	e043      	b.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800705c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f26:	4b48      	ldr	r3, [pc, #288]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f56:	e021      	b.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6a:	4b37      	ldr	r3, [pc, #220]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	0a5b      	lsrs	r3, r3, #9
 8006fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc2:	ee17 2a90 	vmov	r2, s15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006fca:	4b1f      	ldr	r3, [pc, #124]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	0c1b      	lsrs	r3, r3, #16
 8006fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff0:	ee17 2a90 	vmov	r2, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ff8:	4b13      	ldr	r3, [pc, #76]	; (8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	0e1b      	lsrs	r3, r3, #24
 8006ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800700e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007012:	edd7 6a07 	vldr	s13, [r7, #28]
 8007016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701e:	ee17 2a90 	vmov	r2, s15
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007026:	e008      	b.n	800703a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	609a      	str	r2, [r3, #8]
}
 800703a:	bf00      	nop
 800703c:	3724      	adds	r7, #36	; 0x24
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	46000000 	.word	0x46000000
 8007054:	4c742400 	.word	0x4c742400
 8007058:	4a742400 	.word	0x4a742400
 800705c:	4b742400 	.word	0x4b742400

08007060 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007060:	b480      	push	{r7}
 8007062:	b089      	sub	sp, #36	; 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007068:	4ba1      	ldr	r3, [pc, #644]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007072:	4b9f      	ldr	r3, [pc, #636]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007076:	0d1b      	lsrs	r3, r3, #20
 8007078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800707c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800707e:	4b9c      	ldr	r3, [pc, #624]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800708a:	4b99      	ldr	r3, [pc, #612]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	08db      	lsrs	r3, r3, #3
 8007090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	fb02 f303 	mul.w	r3, r2, r3
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8111 	beq.w	80072d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	f000 8083 	beq.w	80071bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	f200 80a1 	bhi.w	8007200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d056      	beq.n	8007178 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80070ca:	e099      	b.n	8007200 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070cc:	4b88      	ldr	r3, [pc, #544]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d02d      	beq.n	8007134 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070d8:	4b85      	ldr	r3, [pc, #532]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	08db      	lsrs	r3, r3, #3
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	4a84      	ldr	r2, [pc, #528]	; (80072f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	ee07 3a90 	vmov	s15, r3
 80070f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b7b      	ldr	r3, [pc, #492]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a03 	vldr	s12, [r7, #12]
 8007116:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007132:	e087      	b.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b6a      	ldr	r3, [pc, #424]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a03 	vldr	s12, [r7, #12]
 800715a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007176:	e065      	b.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b59      	ldr	r3, [pc, #356]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a03 	vldr	s12, [r7, #12]
 800719e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ba:	e043      	b.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b48      	ldr	r3, [pc, #288]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071fe:	e021      	b.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800720e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007212:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007222:	ed97 6a03 	vldr	s12, [r7, #12]
 8007226:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800722a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007242:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007244:	4b2a      	ldr	r3, [pc, #168]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	0a5b      	lsrs	r3, r3, #9
 800724a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800725a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800725e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800726a:	ee17 2a90 	vmov	r2, s15
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007272:	4b1f      	ldr	r3, [pc, #124]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	0c1b      	lsrs	r3, r3, #16
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007288:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007298:	ee17 2a90 	vmov	r2, s15
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80072a0:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	0e1b      	lsrs	r3, r3, #24
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80072ce:	e008      	b.n	80072e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	609a      	str	r2, [r3, #8]
}
 80072e2:	bf00      	nop
 80072e4:	3724      	adds	r7, #36	; 0x24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	58024400 	.word	0x58024400
 80072f4:	03d09000 	.word	0x03d09000
 80072f8:	46000000 	.word	0x46000000
 80072fc:	4c742400 	.word	0x4c742400
 8007300:	4a742400 	.word	0x4a742400
 8007304:	4b742400 	.word	0x4b742400

08007308 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007316:	4b53      	ldr	r3, [pc, #332]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d101      	bne.n	8007326 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e099      	b.n	800745a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007326:	4b4f      	ldr	r3, [pc, #316]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a4e      	ldr	r2, [pc, #312]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800732c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007332:	f7f9 fe85 	bl	8001040 <HAL_GetTick>
 8007336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007338:	e008      	b.n	800734c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800733a:	f7f9 fe81 	bl	8001040 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e086      	b.n	800745a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800734c:	4b45      	ldr	r3, [pc, #276]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f0      	bne.n	800733a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007358:	4b42      	ldr	r3, [pc, #264]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	031b      	lsls	r3, r3, #12
 8007366:	493f      	ldr	r1, [pc, #252]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 8007368:	4313      	orrs	r3, r2
 800736a:	628b      	str	r3, [r1, #40]	; 0x28
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	3b01      	subs	r3, #1
 8007372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	025b      	lsls	r3, r3, #9
 800737e:	b29b      	uxth	r3, r3
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	3b01      	subs	r3, #1
 8007396:	061b      	lsls	r3, r3, #24
 8007398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800739c:	4931      	ldr	r1, [pc, #196]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073a2:	4b30      	ldr	r3, [pc, #192]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	492d      	ldr	r1, [pc, #180]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073b4:	4b2b      	ldr	r3, [pc, #172]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	f023 0220 	bic.w	r2, r3, #32
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	4928      	ldr	r1, [pc, #160]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073c6:	4b27      	ldr	r3, [pc, #156]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	4a26      	ldr	r2, [pc, #152]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073cc:	f023 0310 	bic.w	r3, r3, #16
 80073d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073d2:	4b24      	ldr	r3, [pc, #144]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073d6:	4b24      	ldr	r3, [pc, #144]	; (8007468 <RCCEx_PLL2_Config+0x160>)
 80073d8:	4013      	ands	r3, r2
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	69d2      	ldr	r2, [r2, #28]
 80073de:	00d2      	lsls	r2, r2, #3
 80073e0:	4920      	ldr	r1, [pc, #128]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073e6:	4b1f      	ldr	r3, [pc, #124]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	4a1e      	ldr	r2, [pc, #120]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	f043 0310 	orr.w	r3, r3, #16
 80073f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073f8:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	4a19      	ldr	r2, [pc, #100]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 80073fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007402:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007404:	e00f      	b.n	8007426 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d106      	bne.n	800741a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800740c:	4b15      	ldr	r3, [pc, #84]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4a14      	ldr	r2, [pc, #80]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 8007412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007416:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007418:	e005      	b.n	8007426 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800741a:	4b12      	ldr	r3, [pc, #72]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	4a11      	ldr	r2, [pc, #68]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 8007420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007424:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a0e      	ldr	r2, [pc, #56]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800742c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007432:	f7f9 fe05 	bl	8001040 <HAL_GetTick>
 8007436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007438:	e008      	b.n	800744c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800743a:	f7f9 fe01 	bl	8001040 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e006      	b.n	800745a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <RCCEx_PLL2_Config+0x15c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f0      	beq.n	800743a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
 8007468:	ffff0007 	.word	0xffff0007

0800746c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800747a:	4b53      	ldr	r3, [pc, #332]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d101      	bne.n	800748a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e099      	b.n	80075be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800748a:	4b4f      	ldr	r3, [pc, #316]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a4e      	ldr	r2, [pc, #312]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007496:	f7f9 fdd3 	bl	8001040 <HAL_GetTick>
 800749a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800749c:	e008      	b.n	80074b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800749e:	f7f9 fdcf 	bl	8001040 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d901      	bls.n	80074b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e086      	b.n	80075be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074b0:	4b45      	ldr	r3, [pc, #276]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1f0      	bne.n	800749e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074bc:	4b42      	ldr	r3, [pc, #264]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	051b      	lsls	r3, r3, #20
 80074ca:	493f      	ldr	r1, [pc, #252]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	628b      	str	r3, [r1, #40]	; 0x28
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	3b01      	subs	r3, #1
 80074e0:	025b      	lsls	r3, r3, #9
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	041b      	lsls	r3, r3, #16
 80074ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	061b      	lsls	r3, r3, #24
 80074fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007500:	4931      	ldr	r1, [pc, #196]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007502:	4313      	orrs	r3, r2
 8007504:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007506:	4b30      	ldr	r3, [pc, #192]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	492d      	ldr	r1, [pc, #180]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007514:	4313      	orrs	r3, r2
 8007516:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007518:	4b2b      	ldr	r3, [pc, #172]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	4928      	ldr	r1, [pc, #160]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007526:	4313      	orrs	r3, r2
 8007528:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800752a:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	4a26      	ldr	r2, [pc, #152]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007536:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753a:	4b24      	ldr	r3, [pc, #144]	; (80075cc <RCCEx_PLL3_Config+0x160>)
 800753c:	4013      	ands	r3, r2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	69d2      	ldr	r2, [r2, #28]
 8007542:	00d2      	lsls	r2, r2, #3
 8007544:	4920      	ldr	r1, [pc, #128]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007546:	4313      	orrs	r3, r2
 8007548:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800754a:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 800754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754e:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d106      	bne.n	800756a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800755c:	4b1a      	ldr	r3, [pc, #104]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a19      	ldr	r2, [pc, #100]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007566:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007568:	e00f      	b.n	800758a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d106      	bne.n	800757e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007570:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007574:	4a14      	ldr	r2, [pc, #80]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007576:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800757a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800757c:	e005      	b.n	800758a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800757e:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	4a11      	ldr	r2, [pc, #68]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007584:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800758a:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a0e      	ldr	r2, [pc, #56]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 8007590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007596:	f7f9 fd53 	bl	8001040 <HAL_GetTick>
 800759a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800759c:	e008      	b.n	80075b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800759e:	f7f9 fd4f 	bl	8001040 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e006      	b.n	80075be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <RCCEx_PLL3_Config+0x15c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0f0      	beq.n	800759e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	58024400 	.word	0x58024400
 80075cc:	ffff0007 	.word	0xffff0007

080075d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e049      	b.n	8007676 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f841 	bl	800767e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f000 f9f8 	bl	8007a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d001      	beq.n	80076ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e04f      	b.n	800774c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a23      	ldr	r2, [pc, #140]	; (8007758 <HAL_TIM_Base_Start_IT+0xc4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d01d      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x76>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d6:	d018      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x76>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a1f      	ldr	r2, [pc, #124]	; (800775c <HAL_TIM_Base_Start_IT+0xc8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x76>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <HAL_TIM_Base_Start_IT+0xcc>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x76>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <HAL_TIM_Base_Start_IT+0xd0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d009      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x76>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1b      	ldr	r2, [pc, #108]	; (8007768 <HAL_TIM_Base_Start_IT+0xd4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x76>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a19      	ldr	r2, [pc, #100]	; (800776c <HAL_TIM_Base_Start_IT+0xd8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d115      	bne.n	8007736 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	4b17      	ldr	r3, [pc, #92]	; (8007770 <HAL_TIM_Base_Start_IT+0xdc>)
 8007712:	4013      	ands	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b06      	cmp	r3, #6
 800771a:	d015      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0xb4>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007722:	d011      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007734:	e008      	b.n	8007748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0201 	orr.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	e000      	b.n	800774a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40010000 	.word	0x40010000
 800775c:	40000400 	.word	0x40000400
 8007760:	40000800 	.word	0x40000800
 8007764:	40000c00 	.word	0x40000c00
 8007768:	40010400 	.word	0x40010400
 800776c:	40001800 	.word	0x40001800
 8007770:	00010007 	.word	0x00010007

08007774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b02      	cmp	r3, #2
 8007788:	d122      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b02      	cmp	r3, #2
 8007796:	d11b      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0202 	mvn.w	r2, #2
 80077a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f905 	bl	80079c6 <HAL_TIM_IC_CaptureCallback>
 80077bc:	e005      	b.n	80077ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8f7 	bl	80079b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f908 	bl	80079da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d122      	bne.n	8007824 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d11b      	bne.n	8007824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0204 	mvn.w	r2, #4
 80077f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2202      	movs	r2, #2
 80077fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f8db 	bl	80079c6 <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f8cd 	bl	80079b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f8de 	bl	80079da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b08      	cmp	r3, #8
 8007830:	d122      	bne.n	8007878 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b08      	cmp	r3, #8
 800783e:	d11b      	bne.n	8007878 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0208 	mvn.w	r2, #8
 8007848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2204      	movs	r2, #4
 800784e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f8b1 	bl	80079c6 <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f8a3 	bl	80079b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f8b4 	bl	80079da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b10      	cmp	r3, #16
 8007884:	d122      	bne.n	80078cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b10      	cmp	r3, #16
 8007892:	d11b      	bne.n	80078cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0210 	mvn.w	r2, #16
 800789c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2208      	movs	r2, #8
 80078a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f887 	bl	80079c6 <HAL_TIM_IC_CaptureCallback>
 80078b8:	e005      	b.n	80078c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f879 	bl	80079b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f88a 	bl	80079da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d10e      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d107      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0201 	mvn.w	r2, #1
 80078f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7f9 f8fc 	bl	8000af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007902:	2b80      	cmp	r3, #128	; 0x80
 8007904:	d10e      	bne.n	8007924 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007910:	2b80      	cmp	r3, #128	; 0x80
 8007912:	d107      	bne.n	8007924 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800791c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f914 	bl	8007b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007932:	d10e      	bne.n	8007952 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d107      	bne.n	8007952 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800794a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f907 	bl	8007b60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d10e      	bne.n	800797e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	d107      	bne.n	800797e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f838 	bl	80079ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b20      	cmp	r3, #32
 800798a:	d10e      	bne.n	80079aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b20      	cmp	r3, #32
 8007998:	d107      	bne.n	80079aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f06f 0220 	mvn.w	r2, #32
 80079a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f8c7 	bl	8007b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a40      	ldr	r2, [pc, #256]	; (8007b18 <TIM_Base_SetConfig+0x114>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d013      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a22:	d00f      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a3d      	ldr	r2, [pc, #244]	; (8007b1c <TIM_Base_SetConfig+0x118>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00b      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a3c      	ldr	r2, [pc, #240]	; (8007b20 <TIM_Base_SetConfig+0x11c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a3b      	ldr	r2, [pc, #236]	; (8007b24 <TIM_Base_SetConfig+0x120>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a3a      	ldr	r2, [pc, #232]	; (8007b28 <TIM_Base_SetConfig+0x124>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d108      	bne.n	8007a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2f      	ldr	r2, [pc, #188]	; (8007b18 <TIM_Base_SetConfig+0x114>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d01f      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a64:	d01b      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2c      	ldr	r2, [pc, #176]	; (8007b1c <TIM_Base_SetConfig+0x118>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d017      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2b      	ldr	r2, [pc, #172]	; (8007b20 <TIM_Base_SetConfig+0x11c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2a      	ldr	r2, [pc, #168]	; (8007b24 <TIM_Base_SetConfig+0x120>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00f      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a29      	ldr	r2, [pc, #164]	; (8007b28 <TIM_Base_SetConfig+0x124>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00b      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a28      	ldr	r2, [pc, #160]	; (8007b2c <TIM_Base_SetConfig+0x128>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a27      	ldr	r2, [pc, #156]	; (8007b30 <TIM_Base_SetConfig+0x12c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_Base_SetConfig+0x9a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a26      	ldr	r2, [pc, #152]	; (8007b34 <TIM_Base_SetConfig+0x130>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d108      	bne.n	8007ab0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a10      	ldr	r2, [pc, #64]	; (8007b18 <TIM_Base_SetConfig+0x114>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00f      	beq.n	8007afc <TIM_Base_SetConfig+0xf8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a12      	ldr	r2, [pc, #72]	; (8007b28 <TIM_Base_SetConfig+0x124>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00b      	beq.n	8007afc <TIM_Base_SetConfig+0xf8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <TIM_Base_SetConfig+0x128>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d007      	beq.n	8007afc <TIM_Base_SetConfig+0xf8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <TIM_Base_SetConfig+0x12c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_Base_SetConfig+0xf8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a0f      	ldr	r2, [pc, #60]	; (8007b34 <TIM_Base_SetConfig+0x130>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d103      	bne.n	8007b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	615a      	str	r2, [r3, #20]
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40010400 	.word	0x40010400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400
 8007b34:	40014800 	.word	0x40014800

08007b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e042      	b.n	8007c0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d106      	bne.n	8007b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7f9 f905 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2224      	movs	r2, #36	; 0x24
 8007ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0201 	bic.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fb06 	bl	80081c8 <UART_SetConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e022      	b.n	8007c0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d002      	beq.n	8007bd4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f85a 	bl	8008c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 f8e1 	bl	8008dcc <UART_CheckIdleState>
 8007c0a:	4603      	mov	r3, r0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b088      	sub	sp, #32
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	f640 030f 	movw	r3, #2063	; 0x80f
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d118      	bne.n	8007c76 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d013      	beq.n	8007c76 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d009      	beq.n	8007c76 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8282 	beq.w	8008170 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
      }
      return;
 8007c74:	e27c      	b.n	8008170 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80ef 	beq.w	8007e5c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4b73      	ldr	r3, [pc, #460]	; (8007e50 <HAL_UART_IRQHandler+0x23c>)
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d105      	bne.n	8007c94 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	4b72      	ldr	r3, [pc, #456]	; (8007e54 <HAL_UART_IRQHandler+0x240>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 80e4 	beq.w	8007e5c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d010      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xac>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2201      	movs	r2, #1
 8007cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb6:	f043 0201 	orr.w	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d010      	beq.n	8007cec <HAL_UART_IRQHandler+0xd8>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00b      	beq.n	8007cec <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ce2:	f043 0204 	orr.w	r2, r3, #4
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d010      	beq.n	8007d18 <HAL_UART_IRQHandler+0x104>
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2204      	movs	r2, #4
 8007d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d0e:	f043 0202 	orr.w	r2, r3, #2
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d015      	beq.n	8007d4e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d104      	bne.n	8007d36 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4b48      	ldr	r3, [pc, #288]	; (8007e50 <HAL_UART_IRQHandler+0x23c>)
 8007d30:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d44:	f043 0208 	orr.w	r2, r3, #8
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d011      	beq.n	8007d7c <HAL_UART_IRQHandler+0x168>
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00c      	beq.n	8007d7c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d72:	f043 0220 	orr.w	r2, r3, #32
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 81f6 	beq.w	8008174 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d011      	beq.n	8007db6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d007      	beq.n	8007db6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc8:	2b40      	cmp	r3, #64	; 0x40
 8007dca:	d004      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d031      	beq.n	8007e3a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 f8c4 	bl	8008f64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de6:	2b40      	cmp	r3, #64	; 0x40
 8007de8:	d123      	bne.n	8007e32 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d013      	beq.n	8007e2a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e06:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <HAL_UART_IRQHandler+0x244>)
 8007e08:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fa f8ac 	bl	8001f6c <HAL_DMA_Abort_IT>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d017      	beq.n	8007e4a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007e24:	4610      	mov	r0, r2
 8007e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e28:	e00f      	b.n	8007e4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9b6 	bl	800819c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e30:	e00b      	b.n	8007e4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f9b2 	bl	800819c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e38:	e007      	b.n	8007e4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9ae 	bl	800819c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007e48:	e194      	b.n	8008174 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4a:	bf00      	nop
    return;
 8007e4c:	e192      	b.n	8008174 <HAL_UART_IRQHandler+0x560>
 8007e4e:	bf00      	nop
 8007e50:	10000001 	.word	0x10000001
 8007e54:	04000120 	.word	0x04000120
 8007e58:	08008fc9 	.word	0x08008fc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	f040 810f 	bne.w	8008084 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f003 0310 	and.w	r3, r3, #16
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8109 	beq.w	8008084 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 8103 	beq.w	8008084 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2210      	movs	r2, #16
 8007e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	f040 80bb 	bne.w	800800c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a96      	ldr	r2, [pc, #600]	; (80080f8 <HAL_UART_IRQHandler+0x4e4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d059      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a94      	ldr	r2, [pc, #592]	; (80080fc <HAL_UART_IRQHandler+0x4e8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d053      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a92      	ldr	r2, [pc, #584]	; (8008100 <HAL_UART_IRQHandler+0x4ec>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d04d      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a90      	ldr	r2, [pc, #576]	; (8008104 <HAL_UART_IRQHandler+0x4f0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d047      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a8e      	ldr	r2, [pc, #568]	; (8008108 <HAL_UART_IRQHandler+0x4f4>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d041      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a8c      	ldr	r2, [pc, #560]	; (800810c <HAL_UART_IRQHandler+0x4f8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d03b      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a8a      	ldr	r2, [pc, #552]	; (8008110 <HAL_UART_IRQHandler+0x4fc>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d035      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a88      	ldr	r2, [pc, #544]	; (8008114 <HAL_UART_IRQHandler+0x500>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d02f      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a86      	ldr	r2, [pc, #536]	; (8008118 <HAL_UART_IRQHandler+0x504>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d029      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a84      	ldr	r2, [pc, #528]	; (800811c <HAL_UART_IRQHandler+0x508>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d023      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a82      	ldr	r2, [pc, #520]	; (8008120 <HAL_UART_IRQHandler+0x50c>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d01d      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a80      	ldr	r2, [pc, #512]	; (8008124 <HAL_UART_IRQHandler+0x510>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d017      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a7e      	ldr	r2, [pc, #504]	; (8008128 <HAL_UART_IRQHandler+0x514>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d011      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a7c      	ldr	r2, [pc, #496]	; (800812c <HAL_UART_IRQHandler+0x518>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00b      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a7a      	ldr	r2, [pc, #488]	; (8008130 <HAL_UART_IRQHandler+0x51c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d005      	beq.n	8007f56 <HAL_UART_IRQHandler+0x342>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a78      	ldr	r2, [pc, #480]	; (8008134 <HAL_UART_IRQHandler+0x520>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d105      	bne.n	8007f62 <HAL_UART_IRQHandler+0x34e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	e004      	b.n	8007f6c <HAL_UART_IRQHandler+0x358>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007f6e:	893b      	ldrh	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8101 	beq.w	8008178 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f7c:	893a      	ldrh	r2, [r7, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	f080 80fa 	bcs.w	8008178 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	893a      	ldrh	r2, [r7, #8]
 8007f88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f96:	d02b      	beq.n	8007ff0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fa6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689a      	ldr	r2, [r3, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0210 	bic.w	r2, r2, #16
 8007fe4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7f9 fca0 	bl	8001930 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	b29b      	uxth	r3, r3
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f8d3 	bl	80081b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800800a:	e0b5      	b.n	8008178 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008018:	b29b      	uxth	r3, r3
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008024:	b29b      	uxth	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 80a8 	beq.w	800817c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800802c:	897b      	ldrh	r3, [r7, #10]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80a4 	beq.w	800817c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008042:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6899      	ldr	r1, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	4b3a      	ldr	r3, [pc, #232]	; (8008138 <HAL_UART_IRQHandler+0x524>)
 8008050:	400b      	ands	r3, r1
 8008052:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0210 	bic.w	r2, r2, #16
 8008076:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008078:	897b      	ldrh	r3, [r7, #10]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f897 	bl	80081b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008082:	e07b      	b.n	800817c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00d      	beq.n	80080aa <HAL_UART_IRQHandler+0x496>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d008      	beq.n	80080aa <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 ffc0 	bl	8009028 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080a8:	e06b      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d012      	beq.n	80080da <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d104      	bne.n	80080c8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d057      	beq.n	8008180 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
    }
    return;
 80080d8:	e052      	b.n	8008180 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d02b      	beq.n	800813c <HAL_UART_IRQHandler+0x528>
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d026      	beq.n	800813c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 ff80 	bl	8008ff4 <UART_EndTransmit_IT>
    return;
 80080f4:	e045      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
 80080f6:	bf00      	nop
 80080f8:	40020010 	.word	0x40020010
 80080fc:	40020028 	.word	0x40020028
 8008100:	40020040 	.word	0x40020040
 8008104:	40020058 	.word	0x40020058
 8008108:	40020070 	.word	0x40020070
 800810c:	40020088 	.word	0x40020088
 8008110:	400200a0 	.word	0x400200a0
 8008114:	400200b8 	.word	0x400200b8
 8008118:	40020410 	.word	0x40020410
 800811c:	40020428 	.word	0x40020428
 8008120:	40020440 	.word	0x40020440
 8008124:	40020458 	.word	0x40020458
 8008128:	40020470 	.word	0x40020470
 800812c:	40020488 	.word	0x40020488
 8008130:	400204a0 	.word	0x400204a0
 8008134:	400204b8 	.word	0x400204b8
 8008138:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d008      	beq.n	8008158 <HAL_UART_IRQHandler+0x544>
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 ff7d 	bl	8009050 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008156:	e014      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00f      	beq.n	8008182 <HAL_UART_IRQHandler+0x56e>
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da0c      	bge.n	8008182 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 ff67 	bl	800903c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800816e:	e008      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
      return;
 8008170:	bf00      	nop
 8008172:	e006      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
    return;
 8008174:	bf00      	nop
 8008176:	e004      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
      return;
 8008178:	bf00      	nop
 800817a:	e002      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
      return;
 800817c:	bf00      	nop
 800817e:	e000      	b.n	8008182 <HAL_UART_IRQHandler+0x56e>
    return;
 8008180:	bf00      	nop
  }
}
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081c8:	b5b0      	push	{r4, r5, r7, lr}
 80081ca:	b08e      	sub	sp, #56	; 0x38
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689a      	ldr	r2, [r3, #8]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	431a      	orrs	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	4bbf      	ldr	r3, [pc, #764]	; (80084f4 <UART_SetConfig+0x32c>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	6812      	ldr	r2, [r2, #0]
 80081fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081fe:	430b      	orrs	r3, r1
 8008200:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68da      	ldr	r2, [r3, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4ab5      	ldr	r2, [pc, #724]	; (80084f8 <UART_SetConfig+0x330>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d004      	beq.n	8008232 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800822e:	4313      	orrs	r3, r2
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	4bb0      	ldr	r3, [pc, #704]	; (80084fc <UART_SetConfig+0x334>)
 800823a:	4013      	ands	r3, r2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008242:	430b      	orrs	r3, r1
 8008244:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	f023 010f 	bic.w	r1, r3, #15
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4aa7      	ldr	r2, [pc, #668]	; (8008500 <UART_SetConfig+0x338>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d176      	bne.n	8008354 <UART_SetConfig+0x18c>
 8008266:	4ba7      	ldr	r3, [pc, #668]	; (8008504 <UART_SetConfig+0x33c>)
 8008268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800826e:	2b28      	cmp	r3, #40	; 0x28
 8008270:	d86c      	bhi.n	800834c <UART_SetConfig+0x184>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <UART_SetConfig+0xb0>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	0800831d 	.word	0x0800831d
 800827c:	0800834d 	.word	0x0800834d
 8008280:	0800834d 	.word	0x0800834d
 8008284:	0800834d 	.word	0x0800834d
 8008288:	0800834d 	.word	0x0800834d
 800828c:	0800834d 	.word	0x0800834d
 8008290:	0800834d 	.word	0x0800834d
 8008294:	0800834d 	.word	0x0800834d
 8008298:	08008325 	.word	0x08008325
 800829c:	0800834d 	.word	0x0800834d
 80082a0:	0800834d 	.word	0x0800834d
 80082a4:	0800834d 	.word	0x0800834d
 80082a8:	0800834d 	.word	0x0800834d
 80082ac:	0800834d 	.word	0x0800834d
 80082b0:	0800834d 	.word	0x0800834d
 80082b4:	0800834d 	.word	0x0800834d
 80082b8:	0800832d 	.word	0x0800832d
 80082bc:	0800834d 	.word	0x0800834d
 80082c0:	0800834d 	.word	0x0800834d
 80082c4:	0800834d 	.word	0x0800834d
 80082c8:	0800834d 	.word	0x0800834d
 80082cc:	0800834d 	.word	0x0800834d
 80082d0:	0800834d 	.word	0x0800834d
 80082d4:	0800834d 	.word	0x0800834d
 80082d8:	08008335 	.word	0x08008335
 80082dc:	0800834d 	.word	0x0800834d
 80082e0:	0800834d 	.word	0x0800834d
 80082e4:	0800834d 	.word	0x0800834d
 80082e8:	0800834d 	.word	0x0800834d
 80082ec:	0800834d 	.word	0x0800834d
 80082f0:	0800834d 	.word	0x0800834d
 80082f4:	0800834d 	.word	0x0800834d
 80082f8:	0800833d 	.word	0x0800833d
 80082fc:	0800834d 	.word	0x0800834d
 8008300:	0800834d 	.word	0x0800834d
 8008304:	0800834d 	.word	0x0800834d
 8008308:	0800834d 	.word	0x0800834d
 800830c:	0800834d 	.word	0x0800834d
 8008310:	0800834d 	.word	0x0800834d
 8008314:	0800834d 	.word	0x0800834d
 8008318:	08008345 	.word	0x08008345
 800831c:	2301      	movs	r3, #1
 800831e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008322:	e222      	b.n	800876a <UART_SetConfig+0x5a2>
 8008324:	2304      	movs	r3, #4
 8008326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800832a:	e21e      	b.n	800876a <UART_SetConfig+0x5a2>
 800832c:	2308      	movs	r3, #8
 800832e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008332:	e21a      	b.n	800876a <UART_SetConfig+0x5a2>
 8008334:	2310      	movs	r3, #16
 8008336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800833a:	e216      	b.n	800876a <UART_SetConfig+0x5a2>
 800833c:	2320      	movs	r3, #32
 800833e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008342:	e212      	b.n	800876a <UART_SetConfig+0x5a2>
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800834a:	e20e      	b.n	800876a <UART_SetConfig+0x5a2>
 800834c:	2380      	movs	r3, #128	; 0x80
 800834e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008352:	e20a      	b.n	800876a <UART_SetConfig+0x5a2>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a6b      	ldr	r2, [pc, #428]	; (8008508 <UART_SetConfig+0x340>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d130      	bne.n	80083c0 <UART_SetConfig+0x1f8>
 800835e:	4b69      	ldr	r3, [pc, #420]	; (8008504 <UART_SetConfig+0x33c>)
 8008360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	2b05      	cmp	r3, #5
 8008368:	d826      	bhi.n	80083b8 <UART_SetConfig+0x1f0>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x1a8>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	08008389 	.word	0x08008389
 8008374:	08008391 	.word	0x08008391
 8008378:	08008399 	.word	0x08008399
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838e:	e1ec      	b.n	800876a <UART_SetConfig+0x5a2>
 8008390:	2304      	movs	r3, #4
 8008392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008396:	e1e8      	b.n	800876a <UART_SetConfig+0x5a2>
 8008398:	2308      	movs	r3, #8
 800839a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800839e:	e1e4      	b.n	800876a <UART_SetConfig+0x5a2>
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083a6:	e1e0      	b.n	800876a <UART_SetConfig+0x5a2>
 80083a8:	2320      	movs	r3, #32
 80083aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ae:	e1dc      	b.n	800876a <UART_SetConfig+0x5a2>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083b6:	e1d8      	b.n	800876a <UART_SetConfig+0x5a2>
 80083b8:	2380      	movs	r3, #128	; 0x80
 80083ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083be:	e1d4      	b.n	800876a <UART_SetConfig+0x5a2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a51      	ldr	r2, [pc, #324]	; (800850c <UART_SetConfig+0x344>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d130      	bne.n	800842c <UART_SetConfig+0x264>
 80083ca:	4b4e      	ldr	r3, [pc, #312]	; (8008504 <UART_SetConfig+0x33c>)
 80083cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b05      	cmp	r3, #5
 80083d4:	d826      	bhi.n	8008424 <UART_SetConfig+0x25c>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <UART_SetConfig+0x214>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	080083f5 	.word	0x080083f5
 80083e0:	080083fd 	.word	0x080083fd
 80083e4:	08008405 	.word	0x08008405
 80083e8:	0800840d 	.word	0x0800840d
 80083ec:	08008415 	.word	0x08008415
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083fa:	e1b6      	b.n	800876a <UART_SetConfig+0x5a2>
 80083fc:	2304      	movs	r3, #4
 80083fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008402:	e1b2      	b.n	800876a <UART_SetConfig+0x5a2>
 8008404:	2308      	movs	r3, #8
 8008406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800840a:	e1ae      	b.n	800876a <UART_SetConfig+0x5a2>
 800840c:	2310      	movs	r3, #16
 800840e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008412:	e1aa      	b.n	800876a <UART_SetConfig+0x5a2>
 8008414:	2320      	movs	r3, #32
 8008416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800841a:	e1a6      	b.n	800876a <UART_SetConfig+0x5a2>
 800841c:	2340      	movs	r3, #64	; 0x40
 800841e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008422:	e1a2      	b.n	800876a <UART_SetConfig+0x5a2>
 8008424:	2380      	movs	r3, #128	; 0x80
 8008426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842a:	e19e      	b.n	800876a <UART_SetConfig+0x5a2>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a37      	ldr	r2, [pc, #220]	; (8008510 <UART_SetConfig+0x348>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d130      	bne.n	8008498 <UART_SetConfig+0x2d0>
 8008436:	4b33      	ldr	r3, [pc, #204]	; (8008504 <UART_SetConfig+0x33c>)
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	2b05      	cmp	r3, #5
 8008440:	d826      	bhi.n	8008490 <UART_SetConfig+0x2c8>
 8008442:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <UART_SetConfig+0x280>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	08008461 	.word	0x08008461
 800844c:	08008469 	.word	0x08008469
 8008450:	08008471 	.word	0x08008471
 8008454:	08008479 	.word	0x08008479
 8008458:	08008481 	.word	0x08008481
 800845c:	08008489 	.word	0x08008489
 8008460:	2300      	movs	r3, #0
 8008462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008466:	e180      	b.n	800876a <UART_SetConfig+0x5a2>
 8008468:	2304      	movs	r3, #4
 800846a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800846e:	e17c      	b.n	800876a <UART_SetConfig+0x5a2>
 8008470:	2308      	movs	r3, #8
 8008472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008476:	e178      	b.n	800876a <UART_SetConfig+0x5a2>
 8008478:	2310      	movs	r3, #16
 800847a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800847e:	e174      	b.n	800876a <UART_SetConfig+0x5a2>
 8008480:	2320      	movs	r3, #32
 8008482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008486:	e170      	b.n	800876a <UART_SetConfig+0x5a2>
 8008488:	2340      	movs	r3, #64	; 0x40
 800848a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800848e:	e16c      	b.n	800876a <UART_SetConfig+0x5a2>
 8008490:	2380      	movs	r3, #128	; 0x80
 8008492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008496:	e168      	b.n	800876a <UART_SetConfig+0x5a2>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a1d      	ldr	r2, [pc, #116]	; (8008514 <UART_SetConfig+0x34c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d142      	bne.n	8008528 <UART_SetConfig+0x360>
 80084a2:	4b18      	ldr	r3, [pc, #96]	; (8008504 <UART_SetConfig+0x33c>)
 80084a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	2b05      	cmp	r3, #5
 80084ac:	d838      	bhi.n	8008520 <UART_SetConfig+0x358>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <UART_SetConfig+0x2ec>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084cd 	.word	0x080084cd
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	080084dd 	.word	0x080084dd
 80084c0:	080084e5 	.word	0x080084e5
 80084c4:	080084ed 	.word	0x080084ed
 80084c8:	08008519 	.word	0x08008519
 80084cc:	2300      	movs	r3, #0
 80084ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084d2:	e14a      	b.n	800876a <UART_SetConfig+0x5a2>
 80084d4:	2304      	movs	r3, #4
 80084d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084da:	e146      	b.n	800876a <UART_SetConfig+0x5a2>
 80084dc:	2308      	movs	r3, #8
 80084de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e2:	e142      	b.n	800876a <UART_SetConfig+0x5a2>
 80084e4:	2310      	movs	r3, #16
 80084e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ea:	e13e      	b.n	800876a <UART_SetConfig+0x5a2>
 80084ec:	2320      	movs	r3, #32
 80084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f2:	e13a      	b.n	800876a <UART_SetConfig+0x5a2>
 80084f4:	cfff69f3 	.word	0xcfff69f3
 80084f8:	58000c00 	.word	0x58000c00
 80084fc:	11fff4ff 	.word	0x11fff4ff
 8008500:	40011000 	.word	0x40011000
 8008504:	58024400 	.word	0x58024400
 8008508:	40004400 	.word	0x40004400
 800850c:	40004800 	.word	0x40004800
 8008510:	40004c00 	.word	0x40004c00
 8008514:	40005000 	.word	0x40005000
 8008518:	2340      	movs	r3, #64	; 0x40
 800851a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800851e:	e124      	b.n	800876a <UART_SetConfig+0x5a2>
 8008520:	2380      	movs	r3, #128	; 0x80
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008526:	e120      	b.n	800876a <UART_SetConfig+0x5a2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4acc      	ldr	r2, [pc, #816]	; (8008860 <UART_SetConfig+0x698>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d176      	bne.n	8008620 <UART_SetConfig+0x458>
 8008532:	4bcc      	ldr	r3, [pc, #816]	; (8008864 <UART_SetConfig+0x69c>)
 8008534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800853a:	2b28      	cmp	r3, #40	; 0x28
 800853c:	d86c      	bhi.n	8008618 <UART_SetConfig+0x450>
 800853e:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <UART_SetConfig+0x37c>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	080085e9 	.word	0x080085e9
 8008548:	08008619 	.word	0x08008619
 800854c:	08008619 	.word	0x08008619
 8008550:	08008619 	.word	0x08008619
 8008554:	08008619 	.word	0x08008619
 8008558:	08008619 	.word	0x08008619
 800855c:	08008619 	.word	0x08008619
 8008560:	08008619 	.word	0x08008619
 8008564:	080085f1 	.word	0x080085f1
 8008568:	08008619 	.word	0x08008619
 800856c:	08008619 	.word	0x08008619
 8008570:	08008619 	.word	0x08008619
 8008574:	08008619 	.word	0x08008619
 8008578:	08008619 	.word	0x08008619
 800857c:	08008619 	.word	0x08008619
 8008580:	08008619 	.word	0x08008619
 8008584:	080085f9 	.word	0x080085f9
 8008588:	08008619 	.word	0x08008619
 800858c:	08008619 	.word	0x08008619
 8008590:	08008619 	.word	0x08008619
 8008594:	08008619 	.word	0x08008619
 8008598:	08008619 	.word	0x08008619
 800859c:	08008619 	.word	0x08008619
 80085a0:	08008619 	.word	0x08008619
 80085a4:	08008601 	.word	0x08008601
 80085a8:	08008619 	.word	0x08008619
 80085ac:	08008619 	.word	0x08008619
 80085b0:	08008619 	.word	0x08008619
 80085b4:	08008619 	.word	0x08008619
 80085b8:	08008619 	.word	0x08008619
 80085bc:	08008619 	.word	0x08008619
 80085c0:	08008619 	.word	0x08008619
 80085c4:	08008609 	.word	0x08008609
 80085c8:	08008619 	.word	0x08008619
 80085cc:	08008619 	.word	0x08008619
 80085d0:	08008619 	.word	0x08008619
 80085d4:	08008619 	.word	0x08008619
 80085d8:	08008619 	.word	0x08008619
 80085dc:	08008619 	.word	0x08008619
 80085e0:	08008619 	.word	0x08008619
 80085e4:	08008611 	.word	0x08008611
 80085e8:	2301      	movs	r3, #1
 80085ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ee:	e0bc      	b.n	800876a <UART_SetConfig+0x5a2>
 80085f0:	2304      	movs	r3, #4
 80085f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085f6:	e0b8      	b.n	800876a <UART_SetConfig+0x5a2>
 80085f8:	2308      	movs	r3, #8
 80085fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085fe:	e0b4      	b.n	800876a <UART_SetConfig+0x5a2>
 8008600:	2310      	movs	r3, #16
 8008602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008606:	e0b0      	b.n	800876a <UART_SetConfig+0x5a2>
 8008608:	2320      	movs	r3, #32
 800860a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800860e:	e0ac      	b.n	800876a <UART_SetConfig+0x5a2>
 8008610:	2340      	movs	r3, #64	; 0x40
 8008612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008616:	e0a8      	b.n	800876a <UART_SetConfig+0x5a2>
 8008618:	2380      	movs	r3, #128	; 0x80
 800861a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800861e:	e0a4      	b.n	800876a <UART_SetConfig+0x5a2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a90      	ldr	r2, [pc, #576]	; (8008868 <UART_SetConfig+0x6a0>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d130      	bne.n	800868c <UART_SetConfig+0x4c4>
 800862a:	4b8e      	ldr	r3, [pc, #568]	; (8008864 <UART_SetConfig+0x69c>)
 800862c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	2b05      	cmp	r3, #5
 8008634:	d826      	bhi.n	8008684 <UART_SetConfig+0x4bc>
 8008636:	a201      	add	r2, pc, #4	; (adr r2, 800863c <UART_SetConfig+0x474>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008655 	.word	0x08008655
 8008640:	0800865d 	.word	0x0800865d
 8008644:	08008665 	.word	0x08008665
 8008648:	0800866d 	.word	0x0800866d
 800864c:	08008675 	.word	0x08008675
 8008650:	0800867d 	.word	0x0800867d
 8008654:	2300      	movs	r3, #0
 8008656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800865a:	e086      	b.n	800876a <UART_SetConfig+0x5a2>
 800865c:	2304      	movs	r3, #4
 800865e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008662:	e082      	b.n	800876a <UART_SetConfig+0x5a2>
 8008664:	2308      	movs	r3, #8
 8008666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800866a:	e07e      	b.n	800876a <UART_SetConfig+0x5a2>
 800866c:	2310      	movs	r3, #16
 800866e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008672:	e07a      	b.n	800876a <UART_SetConfig+0x5a2>
 8008674:	2320      	movs	r3, #32
 8008676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800867a:	e076      	b.n	800876a <UART_SetConfig+0x5a2>
 800867c:	2340      	movs	r3, #64	; 0x40
 800867e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008682:	e072      	b.n	800876a <UART_SetConfig+0x5a2>
 8008684:	2380      	movs	r3, #128	; 0x80
 8008686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800868a:	e06e      	b.n	800876a <UART_SetConfig+0x5a2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a76      	ldr	r2, [pc, #472]	; (800886c <UART_SetConfig+0x6a4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d130      	bne.n	80086f8 <UART_SetConfig+0x530>
 8008696:	4b73      	ldr	r3, [pc, #460]	; (8008864 <UART_SetConfig+0x69c>)
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	2b05      	cmp	r3, #5
 80086a0:	d826      	bhi.n	80086f0 <UART_SetConfig+0x528>
 80086a2:	a201      	add	r2, pc, #4	; (adr r2, 80086a8 <UART_SetConfig+0x4e0>)
 80086a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a8:	080086c1 	.word	0x080086c1
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	080086d1 	.word	0x080086d1
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086e1 	.word	0x080086e1
 80086bc:	080086e9 	.word	0x080086e9
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086c6:	e050      	b.n	800876a <UART_SetConfig+0x5a2>
 80086c8:	2304      	movs	r3, #4
 80086ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ce:	e04c      	b.n	800876a <UART_SetConfig+0x5a2>
 80086d0:	2308      	movs	r3, #8
 80086d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086d6:	e048      	b.n	800876a <UART_SetConfig+0x5a2>
 80086d8:	2310      	movs	r3, #16
 80086da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086de:	e044      	b.n	800876a <UART_SetConfig+0x5a2>
 80086e0:	2320      	movs	r3, #32
 80086e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086e6:	e040      	b.n	800876a <UART_SetConfig+0x5a2>
 80086e8:	2340      	movs	r3, #64	; 0x40
 80086ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086ee:	e03c      	b.n	800876a <UART_SetConfig+0x5a2>
 80086f0:	2380      	movs	r3, #128	; 0x80
 80086f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80086f6:	e038      	b.n	800876a <UART_SetConfig+0x5a2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a5c      	ldr	r2, [pc, #368]	; (8008870 <UART_SetConfig+0x6a8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d130      	bne.n	8008764 <UART_SetConfig+0x59c>
 8008702:	4b58      	ldr	r3, [pc, #352]	; (8008864 <UART_SetConfig+0x69c>)
 8008704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	2b05      	cmp	r3, #5
 800870c:	d826      	bhi.n	800875c <UART_SetConfig+0x594>
 800870e:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <UART_SetConfig+0x54c>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	0800872d 	.word	0x0800872d
 8008718:	08008735 	.word	0x08008735
 800871c:	0800873d 	.word	0x0800873d
 8008720:	08008745 	.word	0x08008745
 8008724:	0800874d 	.word	0x0800874d
 8008728:	08008755 	.word	0x08008755
 800872c:	2302      	movs	r3, #2
 800872e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008732:	e01a      	b.n	800876a <UART_SetConfig+0x5a2>
 8008734:	2304      	movs	r3, #4
 8008736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800873a:	e016      	b.n	800876a <UART_SetConfig+0x5a2>
 800873c:	2308      	movs	r3, #8
 800873e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008742:	e012      	b.n	800876a <UART_SetConfig+0x5a2>
 8008744:	2310      	movs	r3, #16
 8008746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800874a:	e00e      	b.n	800876a <UART_SetConfig+0x5a2>
 800874c:	2320      	movs	r3, #32
 800874e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008752:	e00a      	b.n	800876a <UART_SetConfig+0x5a2>
 8008754:	2340      	movs	r3, #64	; 0x40
 8008756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800875a:	e006      	b.n	800876a <UART_SetConfig+0x5a2>
 800875c:	2380      	movs	r3, #128	; 0x80
 800875e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008762:	e002      	b.n	800876a <UART_SetConfig+0x5a2>
 8008764:	2380      	movs	r3, #128	; 0x80
 8008766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a40      	ldr	r2, [pc, #256]	; (8008870 <UART_SetConfig+0x6a8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	f040 80ef 	bne.w	8008954 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800877a:	2b20      	cmp	r3, #32
 800877c:	dc46      	bgt.n	800880c <UART_SetConfig+0x644>
 800877e:	2b02      	cmp	r3, #2
 8008780:	f2c0 8081 	blt.w	8008886 <UART_SetConfig+0x6be>
 8008784:	3b02      	subs	r3, #2
 8008786:	2b1e      	cmp	r3, #30
 8008788:	d87d      	bhi.n	8008886 <UART_SetConfig+0x6be>
 800878a:	a201      	add	r2, pc, #4	; (adr r2, 8008790 <UART_SetConfig+0x5c8>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	08008813 	.word	0x08008813
 8008794:	08008887 	.word	0x08008887
 8008798:	0800881b 	.word	0x0800881b
 800879c:	08008887 	.word	0x08008887
 80087a0:	08008887 	.word	0x08008887
 80087a4:	08008887 	.word	0x08008887
 80087a8:	0800882b 	.word	0x0800882b
 80087ac:	08008887 	.word	0x08008887
 80087b0:	08008887 	.word	0x08008887
 80087b4:	08008887 	.word	0x08008887
 80087b8:	08008887 	.word	0x08008887
 80087bc:	08008887 	.word	0x08008887
 80087c0:	08008887 	.word	0x08008887
 80087c4:	08008887 	.word	0x08008887
 80087c8:	0800883b 	.word	0x0800883b
 80087cc:	08008887 	.word	0x08008887
 80087d0:	08008887 	.word	0x08008887
 80087d4:	08008887 	.word	0x08008887
 80087d8:	08008887 	.word	0x08008887
 80087dc:	08008887 	.word	0x08008887
 80087e0:	08008887 	.word	0x08008887
 80087e4:	08008887 	.word	0x08008887
 80087e8:	08008887 	.word	0x08008887
 80087ec:	08008887 	.word	0x08008887
 80087f0:	08008887 	.word	0x08008887
 80087f4:	08008887 	.word	0x08008887
 80087f8:	08008887 	.word	0x08008887
 80087fc:	08008887 	.word	0x08008887
 8008800:	08008887 	.word	0x08008887
 8008804:	08008887 	.word	0x08008887
 8008808:	08008879 	.word	0x08008879
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	d036      	beq.n	800887e <UART_SetConfig+0x6b6>
 8008810:	e039      	b.n	8008886 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008812:	f7fe fabb 	bl	8006d8c <HAL_RCCEx_GetD3PCLK1Freq>
 8008816:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008818:	e03b      	b.n	8008892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800881a:	f107 0314 	add.w	r3, r7, #20
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe faca 	bl	8006db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008828:	e033      	b.n	8008892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fc16 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008838:	e02b      	b.n	8008892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800883a:	4b0a      	ldr	r3, [pc, #40]	; (8008864 <UART_SetConfig+0x69c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0320 	and.w	r3, r3, #32
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008846:	4b07      	ldr	r3, [pc, #28]	; (8008864 <UART_SetConfig+0x69c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	08db      	lsrs	r3, r3, #3
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	4a08      	ldr	r2, [pc, #32]	; (8008874 <UART_SetConfig+0x6ac>)
 8008852:	fa22 f303 	lsr.w	r3, r2, r3
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008858:	e01b      	b.n	8008892 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800885a:	4b06      	ldr	r3, [pc, #24]	; (8008874 <UART_SetConfig+0x6ac>)
 800885c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800885e:	e018      	b.n	8008892 <UART_SetConfig+0x6ca>
 8008860:	40011400 	.word	0x40011400
 8008864:	58024400 	.word	0x58024400
 8008868:	40007800 	.word	0x40007800
 800886c:	40007c00 	.word	0x40007c00
 8008870:	58000c00 	.word	0x58000c00
 8008874:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008878:	4bc4      	ldr	r3, [pc, #784]	; (8008b8c <UART_SetConfig+0x9c4>)
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800887c:	e009      	b.n	8008892 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008884:	e005      	b.n	8008892 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 81da 	beq.w	8008c4e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	4abc      	ldr	r2, [pc, #752]	; (8008b90 <UART_SetConfig+0x9c8>)
 80088a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	4613      	mov	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4413      	add	r3, r2
 80088b8:	6a3a      	ldr	r2, [r7, #32]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d305      	bcc.n	80088ca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088c4:	6a3a      	ldr	r2, [r7, #32]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d903      	bls.n	80088d2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80088d0:	e1bd      	b.n	8008c4e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	4618      	mov	r0, r3
 80088d6:	f04f 0100 	mov.w	r1, #0
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	4aac      	ldr	r2, [pc, #688]	; (8008b90 <UART_SetConfig+0x9c8>)
 80088e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	f04f 0300 	mov.w	r3, #0
 80088ea:	f7f7 fcf9 	bl	80002e0 <__aeabi_uldivmod>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	4610      	mov	r0, r2
 80088f4:	4619      	mov	r1, r3
 80088f6:	f04f 0200 	mov.w	r2, #0
 80088fa:	f04f 0300 	mov.w	r3, #0
 80088fe:	020b      	lsls	r3, r1, #8
 8008900:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008904:	0202      	lsls	r2, r0, #8
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	6849      	ldr	r1, [r1, #4]
 800890a:	0849      	lsrs	r1, r1, #1
 800890c:	4608      	mov	r0, r1
 800890e:	f04f 0100 	mov.w	r1, #0
 8008912:	1814      	adds	r4, r2, r0
 8008914:	eb43 0501 	adc.w	r5, r3, r1
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	461a      	mov	r2, r3
 800891e:	f04f 0300 	mov.w	r3, #0
 8008922:	4620      	mov	r0, r4
 8008924:	4629      	mov	r1, r5
 8008926:	f7f7 fcdb 	bl	80002e0 <__aeabi_uldivmod>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4613      	mov	r3, r2
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008938:	d308      	bcc.n	800894c <UART_SetConfig+0x784>
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008940:	d204      	bcs.n	800894c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008948:	60da      	str	r2, [r3, #12]
 800894a:	e180      	b.n	8008c4e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008952:	e17c      	b.n	8008c4e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800895c:	f040 80bf 	bne.w	8008ade <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8008960:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008964:	2b20      	cmp	r3, #32
 8008966:	dc49      	bgt.n	80089fc <UART_SetConfig+0x834>
 8008968:	2b00      	cmp	r3, #0
 800896a:	db7c      	blt.n	8008a66 <UART_SetConfig+0x89e>
 800896c:	2b20      	cmp	r3, #32
 800896e:	d87a      	bhi.n	8008a66 <UART_SetConfig+0x89e>
 8008970:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x7b0>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	08008a03 	.word	0x08008a03
 800897c:	08008a0b 	.word	0x08008a0b
 8008980:	08008a67 	.word	0x08008a67
 8008984:	08008a67 	.word	0x08008a67
 8008988:	08008a13 	.word	0x08008a13
 800898c:	08008a67 	.word	0x08008a67
 8008990:	08008a67 	.word	0x08008a67
 8008994:	08008a67 	.word	0x08008a67
 8008998:	08008a23 	.word	0x08008a23
 800899c:	08008a67 	.word	0x08008a67
 80089a0:	08008a67 	.word	0x08008a67
 80089a4:	08008a67 	.word	0x08008a67
 80089a8:	08008a67 	.word	0x08008a67
 80089ac:	08008a67 	.word	0x08008a67
 80089b0:	08008a67 	.word	0x08008a67
 80089b4:	08008a67 	.word	0x08008a67
 80089b8:	08008a33 	.word	0x08008a33
 80089bc:	08008a67 	.word	0x08008a67
 80089c0:	08008a67 	.word	0x08008a67
 80089c4:	08008a67 	.word	0x08008a67
 80089c8:	08008a67 	.word	0x08008a67
 80089cc:	08008a67 	.word	0x08008a67
 80089d0:	08008a67 	.word	0x08008a67
 80089d4:	08008a67 	.word	0x08008a67
 80089d8:	08008a67 	.word	0x08008a67
 80089dc:	08008a67 	.word	0x08008a67
 80089e0:	08008a67 	.word	0x08008a67
 80089e4:	08008a67 	.word	0x08008a67
 80089e8:	08008a67 	.word	0x08008a67
 80089ec:	08008a67 	.word	0x08008a67
 80089f0:	08008a67 	.word	0x08008a67
 80089f4:	08008a67 	.word	0x08008a67
 80089f8:	08008a59 	.word	0x08008a59
 80089fc:	2b40      	cmp	r3, #64	; 0x40
 80089fe:	d02e      	beq.n	8008a5e <UART_SetConfig+0x896>
 8008a00:	e031      	b.n	8008a66 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a02:	f7fd fa15 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8008a06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a08:	e033      	b.n	8008a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a0a:	f7fd fa27 	bl	8005e5c <HAL_RCC_GetPCLK2Freq>
 8008a0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a10:	e02f      	b.n	8008a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a12:	f107 0314 	add.w	r3, r7, #20
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe f9ce 	bl	8006db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a20:	e027      	b.n	8008a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a22:	f107 0308 	add.w	r3, r7, #8
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fb1a 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a30:	e01f      	b.n	8008a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a32:	4b58      	ldr	r3, [pc, #352]	; (8008b94 <UART_SetConfig+0x9cc>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a3e:	4b55      	ldr	r3, [pc, #340]	; (8008b94 <UART_SetConfig+0x9cc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	08db      	lsrs	r3, r3, #3
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	4a53      	ldr	r2, [pc, #332]	; (8008b98 <UART_SetConfig+0x9d0>)
 8008a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a50:	e00f      	b.n	8008a72 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8008a52:	4b51      	ldr	r3, [pc, #324]	; (8008b98 <UART_SetConfig+0x9d0>)
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a56:	e00c      	b.n	8008a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a58:	4b4c      	ldr	r3, [pc, #304]	; (8008b8c <UART_SetConfig+0x9c4>)
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a5c:	e009      	b.n	8008a72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a64:	e005      	b.n	8008a72 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80ea 	beq.w	8008c4e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	4a44      	ldr	r2, [pc, #272]	; (8008b90 <UART_SetConfig+0x9c8>)
 8008a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a8c:	005a      	lsls	r2, r3, #1
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	441a      	add	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	2b0f      	cmp	r3, #15
 8008aa6:	d916      	bls.n	8008ad6 <UART_SetConfig+0x90e>
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aae:	d212      	bcs.n	8008ad6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	f023 030f 	bic.w	r3, r3, #15
 8008ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	085b      	lsrs	r3, r3, #1
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008ad2:	60da      	str	r2, [r3, #12]
 8008ad4:	e0bb      	b.n	8008c4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008adc:	e0b7      	b.n	8008c4e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ade:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	dc4a      	bgt.n	8008b7c <UART_SetConfig+0x9b4>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f2c0 8086 	blt.w	8008bf8 <UART_SetConfig+0xa30>
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	f200 8083 	bhi.w	8008bf8 <UART_SetConfig+0xa30>
 8008af2:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <UART_SetConfig+0x930>)
 8008af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af8:	08008b83 	.word	0x08008b83
 8008afc:	08008b9d 	.word	0x08008b9d
 8008b00:	08008bf9 	.word	0x08008bf9
 8008b04:	08008bf9 	.word	0x08008bf9
 8008b08:	08008ba5 	.word	0x08008ba5
 8008b0c:	08008bf9 	.word	0x08008bf9
 8008b10:	08008bf9 	.word	0x08008bf9
 8008b14:	08008bf9 	.word	0x08008bf9
 8008b18:	08008bb5 	.word	0x08008bb5
 8008b1c:	08008bf9 	.word	0x08008bf9
 8008b20:	08008bf9 	.word	0x08008bf9
 8008b24:	08008bf9 	.word	0x08008bf9
 8008b28:	08008bf9 	.word	0x08008bf9
 8008b2c:	08008bf9 	.word	0x08008bf9
 8008b30:	08008bf9 	.word	0x08008bf9
 8008b34:	08008bf9 	.word	0x08008bf9
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008bf9 	.word	0x08008bf9
 8008b40:	08008bf9 	.word	0x08008bf9
 8008b44:	08008bf9 	.word	0x08008bf9
 8008b48:	08008bf9 	.word	0x08008bf9
 8008b4c:	08008bf9 	.word	0x08008bf9
 8008b50:	08008bf9 	.word	0x08008bf9
 8008b54:	08008bf9 	.word	0x08008bf9
 8008b58:	08008bf9 	.word	0x08008bf9
 8008b5c:	08008bf9 	.word	0x08008bf9
 8008b60:	08008bf9 	.word	0x08008bf9
 8008b64:	08008bf9 	.word	0x08008bf9
 8008b68:	08008bf9 	.word	0x08008bf9
 8008b6c:	08008bf9 	.word	0x08008bf9
 8008b70:	08008bf9 	.word	0x08008bf9
 8008b74:	08008bf9 	.word	0x08008bf9
 8008b78:	08008beb 	.word	0x08008beb
 8008b7c:	2b40      	cmp	r3, #64	; 0x40
 8008b7e:	d037      	beq.n	8008bf0 <UART_SetConfig+0xa28>
 8008b80:	e03a      	b.n	8008bf8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b82:	f7fd f955 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 8008b86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008b88:	e03c      	b.n	8008c04 <UART_SetConfig+0xa3c>
 8008b8a:	bf00      	nop
 8008b8c:	003d0900 	.word	0x003d0900
 8008b90:	0800f860 	.word	0x0800f860
 8008b94:	58024400 	.word	0x58024400
 8008b98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b9c:	f7fd f95e 	bl	8005e5c <HAL_RCC_GetPCLK2Freq>
 8008ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008ba2:	e02f      	b.n	8008c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba4:	f107 0314 	add.w	r3, r7, #20
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe f905 	bl	8006db8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bb2:	e027      	b.n	8008c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb4:	f107 0308 	add.w	r3, r7, #8
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fe fa51 	bl	8007060 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bc2:	e01f      	b.n	8008c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bc4:	4b2c      	ldr	r3, [pc, #176]	; (8008c78 <UART_SetConfig+0xab0>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0320 	and.w	r3, r3, #32
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d009      	beq.n	8008be4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008bd0:	4b29      	ldr	r3, [pc, #164]	; (8008c78 <UART_SetConfig+0xab0>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	08db      	lsrs	r3, r3, #3
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	4a28      	ldr	r2, [pc, #160]	; (8008c7c <UART_SetConfig+0xab4>)
 8008bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008be2:	e00f      	b.n	8008c04 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8008be4:	4b25      	ldr	r3, [pc, #148]	; (8008c7c <UART_SetConfig+0xab4>)
 8008be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008be8:	e00c      	b.n	8008c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008bea:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <UART_SetConfig+0xab8>)
 8008bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bee:	e009      	b.n	8008c04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bf6:	e005      	b.n	8008c04 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008c02:	bf00      	nop
    }

    if (pclk != 0U)
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d021      	beq.n	8008c4e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <UART_SetConfig+0xabc>)
 8008c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c14:	461a      	mov	r2, r3
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	085b      	lsrs	r3, r3, #1
 8008c22:	441a      	add	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c32:	2b0f      	cmp	r3, #15
 8008c34:	d908      	bls.n	8008c48 <UART_SetConfig+0xa80>
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3c:	d204      	bcs.n	8008c48 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c44:	60da      	str	r2, [r3, #12]
 8008c46:	e002      	b.n	8008c4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008c6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3738      	adds	r7, #56	; 0x38
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bdb0      	pop	{r4, r5, r7, pc}
 8008c76:	bf00      	nop
 8008c78:	58024400 	.word	0x58024400
 8008c7c:	03d09000 	.word	0x03d09000
 8008c80:	003d0900 	.word	0x003d0900
 8008c84:	0800f860 	.word	0x0800f860

08008c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00a      	beq.n	8008cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01a      	beq.n	8008d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d86:	d10a      	bne.n	8008d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00a      	beq.n	8008dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	605a      	str	r2, [r3, #4]
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ddc:	f7f8 f930 	bl	8001040 <HAL_GetTick>
 8008de0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d10e      	bne.n	8008e0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f82f 	bl	8008e62 <UART_WaitOnFlagUntilTimeout>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e025      	b.n	8008e5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d10e      	bne.n	8008e3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f819 	bl	8008e62 <UART_WaitOnFlagUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e00f      	b.n	8008e5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	603b      	str	r3, [r7, #0]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e72:	e062      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d05e      	beq.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e7c:	f7f8 f8e0 	bl	8001040 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d302      	bcc.n	8008e92 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d11d      	bne.n	8008ece <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ea0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0201 	bic.w	r2, r2, #1
 8008eb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e045      	b.n	8008f5a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0304 	and.w	r3, r3, #4
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d02e      	beq.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eea:	d126      	bne.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ef4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f04:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 0201 	bic.w	r2, r2, #1
 8008f14:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2220      	movs	r2, #32
 8008f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e00f      	b.n	8008f5a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69da      	ldr	r2, [r3, #28]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	4013      	ands	r3, r2
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	bf0c      	ite	eq
 8008f4a:	2301      	moveq	r3, #1
 8008f4c:	2300      	movne	r3, #0
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	461a      	mov	r2, r3
 8008f52:	79fb      	ldrb	r3, [r7, #7]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d08d      	beq.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f7a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6899      	ldr	r1, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <UART_EndRxTransfer+0x60>)
 8008f88:	400b      	ands	r3, r1
 8008f8a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d107      	bne.n	8008fa4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0210 	bic.w	r2, r2, #16
 8008fa2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	effffffe 	.word	0xeffffffe

08008fc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff f8d8 	bl	800819c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fec:	bf00      	nop
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800900a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff f8b4 	bl	8008188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009072:	2b01      	cmp	r3, #1
 8009074:	d101      	bne.n	800907a <HAL_UARTEx_DisableFifoMode+0x16>
 8009076:	2302      	movs	r3, #2
 8009078:	e027      	b.n	80090ca <HAL_UARTEx_DisableFifoMode+0x66>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2224      	movs	r2, #36	; 0x24
 8009086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0201 	bic.w	r2, r2, #1
 80090a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2220      	movs	r2, #32
 80090bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090ea:	2302      	movs	r3, #2
 80090ec:	e02d      	b.n	800914a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2224      	movs	r2, #36	; 0x24
 80090fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0201 	bic.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	430a      	orrs	r2, r1
 8009128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f850 	bl	80091d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2220      	movs	r2, #32
 800913c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009166:	2302      	movs	r3, #2
 8009168:	e02d      	b.n	80091c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2224      	movs	r2, #36	; 0x24
 8009176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0201 	bic.w	r2, r2, #1
 8009190:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f812 	bl	80091d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2220      	movs	r2, #32
 80091b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d108      	bne.n	80091f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091f0:	e031      	b.n	8009256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091f2:	2310      	movs	r3, #16
 80091f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091f6:	2310      	movs	r3, #16
 80091f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	0e5b      	lsrs	r3, r3, #25
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	0f5b      	lsrs	r3, r3, #29
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	7b3a      	ldrb	r2, [r7, #12]
 800921e:	4911      	ldr	r1, [pc, #68]	; (8009264 <UARTEx_SetNbDataToProcess+0x94>)
 8009220:	5c8a      	ldrb	r2, [r1, r2]
 8009222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009226:	7b3a      	ldrb	r2, [r7, #12]
 8009228:	490f      	ldr	r1, [pc, #60]	; (8009268 <UARTEx_SetNbDataToProcess+0x98>)
 800922a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800922c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009230:	b29a      	uxth	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	7b7a      	ldrb	r2, [r7, #13]
 800923c:	4909      	ldr	r1, [pc, #36]	; (8009264 <UARTEx_SetNbDataToProcess+0x94>)
 800923e:	5c8a      	ldrb	r2, [r1, r2]
 8009240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009244:	7b7a      	ldrb	r2, [r7, #13]
 8009246:	4908      	ldr	r1, [pc, #32]	; (8009268 <UARTEx_SetNbDataToProcess+0x98>)
 8009248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800924a:	fb93 f3f2 	sdiv	r3, r3, r2
 800924e:	b29a      	uxth	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009256:	bf00      	nop
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	0800f878 	.word	0x0800f878
 8009268:	0800f880 	.word	0x0800f880

0800926c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800926c:	b084      	sub	sp, #16
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	f107 001c 	add.w	r0, r7, #28
 800927a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	2b01      	cmp	r3, #1
 8009282:	d120      	bne.n	80092c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	4b2a      	ldr	r3, [pc, #168]	; (8009340 <USB_CoreInit+0xd4>)
 8009296:	4013      	ands	r3, r2
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d105      	bne.n	80092ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f001 fb14 	bl	800a8e8 <USB_CoreReset>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
 80092c4:	e01a      	b.n	80092fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f001 fb08 	bl	800a8e8 <USB_CoreReset>
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80092dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
 80092ee:	e005      	b.n	80092fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d116      	bne.n	8009330 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009306:	b29a      	uxth	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009310:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <USB_CoreInit+0xd8>)
 8009312:	4313      	orrs	r3, r2
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f043 0206 	orr.w	r2, r3, #6
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f043 0220 	orr.w	r2, r3, #32
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009330:	7bfb      	ldrb	r3, [r7, #15]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800933c:	b004      	add	sp, #16
 800933e:	4770      	bx	lr
 8009340:	ffbdffbf 	.word	0xffbdffbf
 8009344:	03ee0000 	.word	0x03ee0000

08009348 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4613      	mov	r3, r2
 8009354:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	2b02      	cmp	r3, #2
 800935a:	d165      	bne.n	8009428 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	4a41      	ldr	r2, [pc, #260]	; (8009464 <USB_SetTurnaroundTime+0x11c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d906      	bls.n	8009372 <USB_SetTurnaroundTime+0x2a>
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	4a40      	ldr	r2, [pc, #256]	; (8009468 <USB_SetTurnaroundTime+0x120>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d202      	bcs.n	8009372 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800936c:	230f      	movs	r3, #15
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	e062      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4a3c      	ldr	r2, [pc, #240]	; (8009468 <USB_SetTurnaroundTime+0x120>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d306      	bcc.n	8009388 <USB_SetTurnaroundTime+0x40>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4a3b      	ldr	r2, [pc, #236]	; (800946c <USB_SetTurnaroundTime+0x124>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d202      	bcs.n	8009388 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009382:	230e      	movs	r3, #14
 8009384:	617b      	str	r3, [r7, #20]
 8009386:	e057      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	4a38      	ldr	r2, [pc, #224]	; (800946c <USB_SetTurnaroundTime+0x124>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d306      	bcc.n	800939e <USB_SetTurnaroundTime+0x56>
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	4a37      	ldr	r2, [pc, #220]	; (8009470 <USB_SetTurnaroundTime+0x128>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d202      	bcs.n	800939e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009398:	230d      	movs	r3, #13
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e04c      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	4a33      	ldr	r2, [pc, #204]	; (8009470 <USB_SetTurnaroundTime+0x128>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d306      	bcc.n	80093b4 <USB_SetTurnaroundTime+0x6c>
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4a32      	ldr	r2, [pc, #200]	; (8009474 <USB_SetTurnaroundTime+0x12c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d802      	bhi.n	80093b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80093ae:	230c      	movs	r3, #12
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	e041      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4a2f      	ldr	r2, [pc, #188]	; (8009474 <USB_SetTurnaroundTime+0x12c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d906      	bls.n	80093ca <USB_SetTurnaroundTime+0x82>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4a2e      	ldr	r2, [pc, #184]	; (8009478 <USB_SetTurnaroundTime+0x130>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d802      	bhi.n	80093ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80093c4:	230b      	movs	r3, #11
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	e036      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	4a2a      	ldr	r2, [pc, #168]	; (8009478 <USB_SetTurnaroundTime+0x130>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d906      	bls.n	80093e0 <USB_SetTurnaroundTime+0x98>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4a29      	ldr	r2, [pc, #164]	; (800947c <USB_SetTurnaroundTime+0x134>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d802      	bhi.n	80093e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80093da:	230a      	movs	r3, #10
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	e02b      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	4a26      	ldr	r2, [pc, #152]	; (800947c <USB_SetTurnaroundTime+0x134>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d906      	bls.n	80093f6 <USB_SetTurnaroundTime+0xae>
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4a25      	ldr	r2, [pc, #148]	; (8009480 <USB_SetTurnaroundTime+0x138>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d202      	bcs.n	80093f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80093f0:	2309      	movs	r3, #9
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	e020      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	4a21      	ldr	r2, [pc, #132]	; (8009480 <USB_SetTurnaroundTime+0x138>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d306      	bcc.n	800940c <USB_SetTurnaroundTime+0xc4>
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4a20      	ldr	r2, [pc, #128]	; (8009484 <USB_SetTurnaroundTime+0x13c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d802      	bhi.n	800940c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009406:	2308      	movs	r3, #8
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	e015      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4a1d      	ldr	r2, [pc, #116]	; (8009484 <USB_SetTurnaroundTime+0x13c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d906      	bls.n	8009422 <USB_SetTurnaroundTime+0xda>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4a1c      	ldr	r2, [pc, #112]	; (8009488 <USB_SetTurnaroundTime+0x140>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d202      	bcs.n	8009422 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800941c:	2307      	movs	r3, #7
 800941e:	617b      	str	r3, [r7, #20]
 8009420:	e00a      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009422:	2306      	movs	r3, #6
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	e007      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800942e:	2309      	movs	r3, #9
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e001      	b.n	8009438 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009434:	2309      	movs	r3, #9
 8009436:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	029b      	lsls	r3, r3, #10
 800944c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009450:	431a      	orrs	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	00d8acbf 	.word	0x00d8acbf
 8009468:	00e4e1c0 	.word	0x00e4e1c0
 800946c:	00f42400 	.word	0x00f42400
 8009470:	01067380 	.word	0x01067380
 8009474:	011a499f 	.word	0x011a499f
 8009478:	01312cff 	.word	0x01312cff
 800947c:	014ca43f 	.word	0x014ca43f
 8009480:	016e3600 	.word	0x016e3600
 8009484:	01a6ab1f 	.word	0x01a6ab1f
 8009488:	01e84800 	.word	0x01e84800

0800948c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f043 0201 	orr.w	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f023 0201 	bic.w	r2, r3, #1
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d106      	bne.n	80094fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	60da      	str	r2, [r3, #12]
 80094fa:	e00b      	b.n	8009514 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
 800950e:	e001      	b.n	8009514 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e003      	b.n	800951c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009514:	2032      	movs	r0, #50	; 0x32
 8009516:	f7f7 fd9f 	bl	8001058 <HAL_Delay>

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009524:	b084      	sub	sp, #16
 8009526:	b580      	push	{r7, lr}
 8009528:	b086      	sub	sp, #24
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	e009      	b.n	8009558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	3340      	adds	r3, #64	; 0x40
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	2200      	movs	r2, #0
 8009550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	3301      	adds	r3, #1
 8009556:	613b      	str	r3, [r7, #16]
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2b0e      	cmp	r3, #14
 800955c:	d9f2      	bls.n	8009544 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800955e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d11c      	bne.n	800959e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009572:	f043 0302 	orr.w	r3, r3, #2
 8009576:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	e005      	b.n	80095aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095b0:	461a      	mov	r2, r3
 80095b2:	2300      	movs	r3, #0
 80095b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095bc:	4619      	mov	r1, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c4:	461a      	mov	r2, r3
 80095c6:	680b      	ldr	r3, [r1, #0]
 80095c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d10c      	bne.n	80095ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d104      	bne.n	80095e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095d6:	2100      	movs	r1, #0
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f949 	bl	8009870 <USB_SetDevSpeed>
 80095de:	e008      	b.n	80095f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095e0:	2101      	movs	r1, #1
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f944 	bl	8009870 <USB_SetDevSpeed>
 80095e8:	e003      	b.n	80095f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095ea:	2103      	movs	r1, #3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f93f 	bl	8009870 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095f2:	2110      	movs	r1, #16
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f8f3 	bl	80097e0 <USB_FlushTxFifo>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f911 	bl	800982c <USB_FlushRxFifo>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961a:	461a      	mov	r2, r3
 800961c:	2300      	movs	r3, #0
 800961e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009626:	461a      	mov	r2, r3
 8009628:	2300      	movs	r3, #0
 800962a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009632:	461a      	mov	r2, r3
 8009634:	2300      	movs	r3, #0
 8009636:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009638:	2300      	movs	r3, #0
 800963a:	613b      	str	r3, [r7, #16]
 800963c:	e043      	b.n	80096c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009654:	d118      	bne.n	8009688 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009668:	461a      	mov	r2, r3
 800966a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	e013      	b.n	800969a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	461a      	mov	r2, r3
 8009680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	e008      	b.n	800969a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009694:	461a      	mov	r2, r3
 8009696:	2300      	movs	r3, #0
 8009698:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	015a      	lsls	r2, r3, #5
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	4413      	add	r3, r2
 80096a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a6:	461a      	mov	r2, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b8:	461a      	mov	r2, r3
 80096ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	3301      	adds	r3, #1
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d3b7      	bcc.n	800963e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096ce:	2300      	movs	r3, #0
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	e043      	b.n	800975c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096ea:	d118      	bne.n	800971e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fe:	461a      	mov	r2, r3
 8009700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	e013      	b.n	8009730 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009714:	461a      	mov	r2, r3
 8009716:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	e008      	b.n	8009730 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972a:	461a      	mov	r2, r3
 800972c:	2300      	movs	r3, #0
 800972e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	461a      	mov	r2, r3
 800973e:	2300      	movs	r3, #0
 8009740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4413      	add	r3, r2
 800974a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974e:	461a      	mov	r2, r3
 8009750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009754:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	3301      	adds	r3, #1
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	429a      	cmp	r2, r3
 8009762:	d3b7      	bcc.n	80096d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009776:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009784:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	2b00      	cmp	r3, #0
 800978a:	d105      	bne.n	8009798 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	f043 0210 	orr.w	r2, r3, #16
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699a      	ldr	r2, [r3, #24]
 800979c:	4b0e      	ldr	r3, [pc, #56]	; (80097d8 <USB_DevInit+0x2b4>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d005      	beq.n	80097b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	f043 0208 	orr.w	r2, r3, #8
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d105      	bne.n	80097c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699a      	ldr	r2, [r3, #24]
 80097c0:	4b06      	ldr	r3, [pc, #24]	; (80097dc <USB_DevInit+0x2b8>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097d4:	b004      	add	sp, #16
 80097d6:	4770      	bx	lr
 80097d8:	803c3800 	.word	0x803c3800
 80097dc:	40000004 	.word	0x40000004

080097e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	019b      	lsls	r3, r3, #6
 80097f2:	f043 0220 	orr.w	r2, r3, #32
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a09      	ldr	r2, [pc, #36]	; (8009828 <USB_FlushTxFifo+0x48>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d901      	bls.n	800980c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e006      	b.n	800981a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b20      	cmp	r3, #32
 8009816:	d0f0      	beq.n	80097fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	00030d40 	.word	0x00030d40

0800982c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2210      	movs	r2, #16
 800983c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3301      	adds	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4a09      	ldr	r2, [pc, #36]	; (800986c <USB_FlushRxFifo+0x40>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d901      	bls.n	8009850 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e006      	b.n	800985e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f003 0310 	and.w	r3, r3, #16
 8009858:	2b10      	cmp	r3, #16
 800985a:	d0f0      	beq.n	800983e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	00030d40 	.word	0x00030d40

08009870 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	68f9      	ldr	r1, [r7, #12]
 800988c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009890:	4313      	orrs	r3, r2
 8009892:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b087      	sub	sp, #28
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f003 0306 	and.w	r3, r3, #6
 80098ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80098c2:	2300      	movs	r3, #0
 80098c4:	75fb      	strb	r3, [r7, #23]
 80098c6:	e00a      	b.n	80098de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d002      	beq.n	80098d4 <USB_GetDevSpeed+0x32>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	d102      	bne.n	80098da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80098d4:	2302      	movs	r3, #2
 80098d6:	75fb      	strb	r3, [r7, #23]
 80098d8:	e001      	b.n	80098de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80098da:	230f      	movs	r3, #15
 80098dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	785b      	ldrb	r3, [r3, #1]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d139      	bne.n	800997c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990e:	69da      	ldr	r2, [r3, #28]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	2101      	movs	r1, #1
 800991a:	fa01 f303 	lsl.w	r3, r1, r3
 800991e:	b29b      	uxth	r3, r3
 8009920:	68f9      	ldr	r1, [r7, #12]
 8009922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009926:	4313      	orrs	r3, r2
 8009928:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d153      	bne.n	80099e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	78db      	ldrb	r3, [r3, #3]
 800995a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800995c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	059b      	lsls	r3, r3, #22
 8009962:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009964:	431a      	orrs	r2, r3
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	0159      	lsls	r1, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	440b      	add	r3, r1
 800996e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009972:	4619      	mov	r1, r3
 8009974:	4b20      	ldr	r3, [pc, #128]	; (80099f8 <USB_ActivateEndpoint+0x10c>)
 8009976:	4313      	orrs	r3, r2
 8009978:	600b      	str	r3, [r1, #0]
 800997a:	e035      	b.n	80099e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009982:	69da      	ldr	r2, [r3, #28]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 030f 	and.w	r3, r3, #15
 800998c:	2101      	movs	r1, #1
 800998e:	fa01 f303 	lsl.w	r3, r1, r3
 8009992:	041b      	lsls	r3, r3, #16
 8009994:	68f9      	ldr	r1, [r7, #12]
 8009996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800999a:	4313      	orrs	r3, r2
 800999c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	015a      	lsls	r2, r3, #5
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	4413      	add	r3, r2
 80099a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d119      	bne.n	80099e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	78db      	ldrb	r3, [r3, #3]
 80099ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80099d0:	430b      	orrs	r3, r1
 80099d2:	431a      	orrs	r2, r3
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	0159      	lsls	r1, r3, #5
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	440b      	add	r3, r1
 80099dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e0:	4619      	mov	r1, r3
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <USB_ActivateEndpoint+0x10c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	10008000 	.word	0x10008000

080099fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	785b      	ldrb	r3, [r3, #1]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d161      	bne.n	8009adc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a2e:	d11f      	bne.n	8009a70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	0151      	lsls	r1, r2, #5
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	440a      	add	r2, r1
 8009a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	0151      	lsls	r1, r2, #5
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	440a      	add	r2, r1
 8009a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 030f 	and.w	r3, r3, #15
 8009a80:	2101      	movs	r1, #1
 8009a82:	fa01 f303 	lsl.w	r3, r1, r3
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	43db      	mvns	r3, r3
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a90:	4013      	ands	r3, r2
 8009a92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a9a:	69da      	ldr	r2, [r3, #28]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	f003 030f 	and.w	r3, r3, #15
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	43db      	mvns	r3, r3
 8009aae:	68f9      	ldr	r1, [r7, #12]
 8009ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	0159      	lsls	r1, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	440b      	add	r3, r1
 8009ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	4b35      	ldr	r3, [pc, #212]	; (8009bac <USB_DeactivateEndpoint+0x1b0>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	600b      	str	r3, [r1, #0]
 8009ada:	e060      	b.n	8009b9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009af2:	d11f      	bne.n	8009b34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	0151      	lsls	r1, r2, #5
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	440a      	add	r2, r1
 8009b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	0151      	lsls	r1, r2, #5
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	440a      	add	r2, r1
 8009b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	f003 030f 	and.w	r3, r3, #15
 8009b44:	2101      	movs	r1, #1
 8009b46:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4a:	041b      	lsls	r3, r3, #16
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b54:	4013      	ands	r3, r2
 8009b56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5e:	69da      	ldr	r2, [r3, #28]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	f003 030f 	and.w	r3, r3, #15
 8009b68:	2101      	movs	r1, #1
 8009b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6e:	041b      	lsls	r3, r3, #16
 8009b70:	43db      	mvns	r3, r3
 8009b72:	68f9      	ldr	r1, [r7, #12]
 8009b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b78:	4013      	ands	r3, r2
 8009b7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	015a      	lsls	r2, r3, #5
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	0159      	lsls	r1, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	440b      	add	r3, r1
 8009b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b96:	4619      	mov	r1, r3
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <USB_DeactivateEndpoint+0x1b4>)
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	ec337800 	.word	0xec337800
 8009bb0:	eff37800 	.word	0xeff37800

08009bb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08a      	sub	sp, #40	; 0x28
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	f040 8163 	bne.w	8009e9c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d132      	bne.n	8009c44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bea:	691a      	ldr	r2, [r3, #16]
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	0159      	lsls	r1, r3, #5
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	440b      	add	r3, r1
 8009bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4ba5      	ldr	r3, [pc, #660]	; (8009e90 <USB_EPStartXfer+0x2dc>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c2c:	691a      	ldr	r2, [r3, #16]
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	0159      	lsls	r1, r3, #5
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	440b      	add	r3, r1
 8009c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4b95      	ldr	r3, [pc, #596]	; (8009e94 <USB_EPStartXfer+0x2e0>)
 8009c3e:	4013      	ands	r3, r2
 8009c40:	610b      	str	r3, [r1, #16]
 8009c42:	e074      	b.n	8009d2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	015a      	lsls	r2, r3, #5
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c50:	691a      	ldr	r2, [r3, #16]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	0159      	lsls	r1, r3, #5
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	440b      	add	r3, r1
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5e:	4619      	mov	r1, r3
 8009c60:	4b8c      	ldr	r3, [pc, #560]	; (8009e94 <USB_EPStartXfer+0x2e0>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c72:	691a      	ldr	r2, [r3, #16]
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	0159      	lsls	r1, r3, #5
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	440b      	add	r3, r1
 8009c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c80:	4619      	mov	r1, r3
 8009c82:	4b83      	ldr	r3, [pc, #524]	; (8009e90 <USB_EPStartXfer+0x2dc>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c94:	691a      	ldr	r2, [r3, #16]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	6959      	ldr	r1, [r3, #20]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	440b      	add	r3, r1
 8009ca0:	1e59      	subs	r1, r3, #1
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8009caa:	04d9      	lsls	r1, r3, #19
 8009cac:	4b7a      	ldr	r3, [pc, #488]	; (8009e98 <USB_EPStartXfer+0x2e4>)
 8009cae:	400b      	ands	r3, r1
 8009cb0:	69b9      	ldr	r1, [r7, #24]
 8009cb2:	0148      	lsls	r0, r1, #5
 8009cb4:	69f9      	ldr	r1, [r7, #28]
 8009cb6:	4401      	add	r1, r0
 8009cb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd6:	69b9      	ldr	r1, [r7, #24]
 8009cd8:	0148      	lsls	r0, r1, #5
 8009cda:	69f9      	ldr	r1, [r7, #28]
 8009cdc:	4401      	add	r1, r0
 8009cde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	78db      	ldrb	r3, [r3, #3]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d11f      	bne.n	8009d2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	0151      	lsls	r1, r2, #5
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	440a      	add	r2, r1
 8009d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009d0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	015a      	lsls	r2, r3, #5
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	4413      	add	r3, r2
 8009d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	0151      	lsls	r1, r2, #5
 8009d20:	69fa      	ldr	r2, [r7, #28]
 8009d22:	440a      	add	r2, r1
 8009d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009d2e:	79fb      	ldrb	r3, [r7, #7]
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d14b      	bne.n	8009dcc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	461a      	mov	r2, r3
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	78db      	ldrb	r3, [r3, #3]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d128      	bne.n	8009daa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d110      	bne.n	8009d8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	69fa      	ldr	r2, [r7, #28]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	e00f      	b.n	8009daa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	015a      	lsls	r2, r3, #5
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69ba      	ldr	r2, [r7, #24]
 8009d9a:	0151      	lsls	r1, r2, #5
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	440a      	add	r2, r1
 8009da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009da8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	e133      	b.n	800a034 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	0151      	lsls	r1, r2, #5
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	440a      	add	r2, r1
 8009de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009dea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	78db      	ldrb	r3, [r3, #3]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d015      	beq.n	8009e20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 811b 	beq.w	800a034 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	f003 030f 	and.w	r3, r3, #15
 8009e0e:	2101      	movs	r1, #1
 8009e10:	fa01 f303 	lsl.w	r3, r1, r3
 8009e14:	69f9      	ldr	r1, [r7, #28]
 8009e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	634b      	str	r3, [r1, #52]	; 0x34
 8009e1e:	e109      	b.n	800a034 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d110      	bne.n	8009e52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69ba      	ldr	r2, [r7, #24]
 8009e40:	0151      	lsls	r1, r2, #5
 8009e42:	69fa      	ldr	r2, [r7, #28]
 8009e44:	440a      	add	r2, r1
 8009e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	e00f      	b.n	8009e72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69ba      	ldr	r2, [r7, #24]
 8009e62:	0151      	lsls	r1, r2, #5
 8009e64:	69fa      	ldr	r2, [r7, #28]
 8009e66:	440a      	add	r2, r1
 8009e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	68d9      	ldr	r1, [r3, #12]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	781a      	ldrb	r2, [r3, #0]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	b298      	uxth	r0, r3
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4603      	mov	r3, r0
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 fa38 	bl	800a2fc <USB_WritePacket>
 8009e8c:	e0d2      	b.n	800a034 <USB_EPStartXfer+0x480>
 8009e8e:	bf00      	nop
 8009e90:	e007ffff 	.word	0xe007ffff
 8009e94:	fff80000 	.word	0xfff80000
 8009e98:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	0159      	lsls	r1, r3, #5
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	440b      	add	r3, r1
 8009eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	4b61      	ldr	r3, [pc, #388]	; (800a040 <USB_EPStartXfer+0x48c>)
 8009eba:	4013      	ands	r3, r2
 8009ebc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	0159      	lsls	r1, r3, #5
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	440b      	add	r3, r1
 8009ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4b5a      	ldr	r3, [pc, #360]	; (800a044 <USB_EPStartXfer+0x490>)
 8009edc:	4013      	ands	r3, r2
 8009ede:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d123      	bne.n	8009f30 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef4:	691a      	ldr	r2, [r3, #16]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009efe:	69b9      	ldr	r1, [r7, #24]
 8009f00:	0148      	lsls	r0, r1, #5
 8009f02:	69f9      	ldr	r1, [r7, #28]
 8009f04:	4401      	add	r1, r0
 8009f06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	015a      	lsls	r2, r3, #5
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	4413      	add	r3, r2
 8009f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	0151      	lsls	r1, r2, #5
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	440a      	add	r2, r1
 8009f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f2c:	6113      	str	r3, [r2, #16]
 8009f2e:	e033      	b.n	8009f98 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	695a      	ldr	r2, [r3, #20]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	4413      	add	r3, r2
 8009f3a:	1e5a      	subs	r2, r3, #1
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f52:	691a      	ldr	r2, [r3, #16]
 8009f54:	8afb      	ldrh	r3, [r7, #22]
 8009f56:	04d9      	lsls	r1, r3, #19
 8009f58:	4b3b      	ldr	r3, [pc, #236]	; (800a048 <USB_EPStartXfer+0x494>)
 8009f5a:	400b      	ands	r3, r1
 8009f5c:	69b9      	ldr	r1, [r7, #24]
 8009f5e:	0148      	lsls	r0, r1, #5
 8009f60:	69f9      	ldr	r1, [r7, #28]
 8009f62:	4401      	add	r1, r0
 8009f64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f78:	691a      	ldr	r2, [r3, #16]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	8af9      	ldrh	r1, [r7, #22]
 8009f80:	fb01 f303 	mul.w	r3, r1, r3
 8009f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f88:	69b9      	ldr	r1, [r7, #24]
 8009f8a:	0148      	lsls	r0, r1, #5
 8009f8c:	69f9      	ldr	r1, [r7, #28]
 8009f8e:	4401      	add	r1, r0
 8009f90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f94:	4313      	orrs	r3, r2
 8009f96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d10d      	bne.n	8009fba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d009      	beq.n	8009fba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	68d9      	ldr	r1, [r3, #12]
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb6:	460a      	mov	r2, r1
 8009fb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	78db      	ldrb	r3, [r3, #3]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d128      	bne.n	800a014 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d110      	bne.n	8009ff4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	e00f      	b.n	800a014 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	0151      	lsls	r1, r2, #5
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	440a      	add	r2, r1
 800a00a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a00e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a012:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	0151      	lsls	r1, r2, #5
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	440a      	add	r2, r1
 800a02a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a02e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a032:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3720      	adds	r7, #32
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	fff80000 	.word	0xfff80000
 800a044:	e007ffff 	.word	0xe007ffff
 800a048:	1ff80000 	.word	0x1ff80000

0800a04c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	785b      	ldrb	r3, [r3, #1]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	f040 80cd 	bne.w	800a208 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d132      	bne.n	800a0dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	015a      	lsls	r2, r3, #5
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	4413      	add	r3, r2
 800a07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a082:	691a      	ldr	r2, [r3, #16]
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	0159      	lsls	r1, r3, #5
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	440b      	add	r3, r1
 800a08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a090:	4619      	mov	r1, r3
 800a092:	4b98      	ldr	r3, [pc, #608]	; (800a2f4 <USB_EP0StartXfer+0x2a8>)
 800a094:	4013      	ands	r3, r2
 800a096:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	0151      	lsls	r1, r2, #5
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	440a      	add	r2, r1
 800a0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c4:	691a      	ldr	r2, [r3, #16]
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	0159      	lsls	r1, r3, #5
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	440b      	add	r3, r1
 800a0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4b88      	ldr	r3, [pc, #544]	; (800a2f8 <USB_EP0StartXfer+0x2ac>)
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	610b      	str	r3, [r1, #16]
 800a0da:	e04e      	b.n	800a17a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e8:	691a      	ldr	r2, [r3, #16]
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	0159      	lsls	r1, r3, #5
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	440b      	add	r3, r1
 800a0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4b7f      	ldr	r3, [pc, #508]	; (800a2f8 <USB_EP0StartXfer+0x2ac>)
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10a:	691a      	ldr	r2, [r3, #16]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	0159      	lsls	r1, r3, #5
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	440b      	add	r3, r1
 800a114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a118:	4619      	mov	r1, r3
 800a11a:	4b76      	ldr	r3, [pc, #472]	; (800a2f4 <USB_EP0StartXfer+0x2a8>)
 800a11c:	4013      	ands	r3, r2
 800a11e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	695a      	ldr	r2, [r3, #20]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d903      	bls.n	800a134 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	0151      	lsls	r1, r2, #5
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	440a      	add	r2, r1
 800a14a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a16a:	6939      	ldr	r1, [r7, #16]
 800a16c:	0148      	lsls	r0, r1, #5
 800a16e:	6979      	ldr	r1, [r7, #20]
 800a170:	4401      	add	r1, r0
 800a172:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a176:	4313      	orrs	r3, r2
 800a178:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d11e      	bne.n	800a1be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d009      	beq.n	800a19c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a194:	461a      	mov	r2, r3
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	015a      	lsls	r2, r3, #5
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	0151      	lsls	r1, r2, #5
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	440a      	add	r2, r1
 800a1b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	e092      	b.n	800a2e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	0151      	lsls	r1, r2, #5
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	440a      	add	r2, r1
 800a1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d07e      	beq.n	800a2e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	f003 030f 	and.w	r3, r3, #15
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fc:	6979      	ldr	r1, [r7, #20]
 800a1fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a202:	4313      	orrs	r3, r2
 800a204:	634b      	str	r3, [r1, #52]	; 0x34
 800a206:	e06d      	b.n	800a2e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a214:	691a      	ldr	r2, [r3, #16]
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	0159      	lsls	r1, r3, #5
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	440b      	add	r3, r1
 800a21e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a222:	4619      	mov	r1, r3
 800a224:	4b34      	ldr	r3, [pc, #208]	; (800a2f8 <USB_EP0StartXfer+0x2ac>)
 800a226:	4013      	ands	r3, r2
 800a228:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	0159      	lsls	r1, r3, #5
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	440b      	add	r3, r1
 800a240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a244:	4619      	mov	r1, r3
 800a246:	4b2b      	ldr	r3, [pc, #172]	; (800a2f4 <USB_EP0StartXfer+0x2a8>)
 800a248:	4013      	ands	r3, r2
 800a24a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	4413      	add	r3, r2
 800a264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	0151      	lsls	r1, r2, #5
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	440a      	add	r2, r1
 800a272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a27a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a288:	691a      	ldr	r2, [r3, #16]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a292:	6939      	ldr	r1, [r7, #16]
 800a294:	0148      	lsls	r0, r1, #5
 800a296:	6979      	ldr	r1, [r7, #20]
 800a298:	4401      	add	r1, r0
 800a29a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a2a2:	79fb      	ldrb	r3, [r7, #7]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d10d      	bne.n	800a2c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d009      	beq.n	800a2c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	68d9      	ldr	r1, [r3, #12]
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	693a      	ldr	r2, [r7, #16]
 800a2d4:	0151      	lsls	r1, r2, #5
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	440a      	add	r2, r1
 800a2da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a2e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	e007ffff 	.word	0xe007ffff
 800a2f8:	fff80000 	.word	0xfff80000

0800a2fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b089      	sub	sp, #36	; 0x24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4611      	mov	r1, r2
 800a308:	461a      	mov	r2, r3
 800a30a:	460b      	mov	r3, r1
 800a30c:	71fb      	strb	r3, [r7, #7]
 800a30e:	4613      	mov	r3, r2
 800a310:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a31a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d123      	bne.n	800a36a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a322:	88bb      	ldrh	r3, [r7, #4]
 800a324:	3303      	adds	r3, #3
 800a326:	089b      	lsrs	r3, r3, #2
 800a328:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a32a:	2300      	movs	r3, #0
 800a32c:	61bb      	str	r3, [r7, #24]
 800a32e:	e018      	b.n	800a362 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	031a      	lsls	r2, r3, #12
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	4413      	add	r3, r2
 800a338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a33c:	461a      	mov	r2, r3
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3301      	adds	r3, #1
 800a348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3301      	adds	r3, #1
 800a34e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3301      	adds	r3, #1
 800a354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	3301      	adds	r3, #1
 800a35a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	3301      	adds	r3, #1
 800a360:	61bb      	str	r3, [r7, #24]
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	429a      	cmp	r2, r3
 800a368:	d3e2      	bcc.n	800a330 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3724      	adds	r7, #36	; 0x24
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a378:	b480      	push	{r7}
 800a37a:	b08b      	sub	sp, #44	; 0x2c
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	089b      	lsrs	r3, r3, #2
 800a392:	b29b      	uxth	r3, r3
 800a394:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a39e:	2300      	movs	r3, #0
 800a3a0:	623b      	str	r3, [r7, #32]
 800a3a2:	e014      	b.n	800a3ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	3301      	adds	r3, #1
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	623b      	str	r3, [r7, #32]
 800a3ce:	6a3a      	ldr	r2, [r7, #32]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d3e6      	bcc.n	800a3a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a3d6:	8bfb      	ldrh	r3, [r7, #30]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01e      	beq.n	800a41a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f107 0310 	add.w	r3, r7, #16
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	00db      	lsls	r3, r3, #3
 800a3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a400:	701a      	strb	r2, [r3, #0]
      i++;
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	3301      	adds	r3, #1
 800a406:	623b      	str	r3, [r7, #32]
      pDest++;
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	3301      	adds	r3, #1
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a40e:	8bfb      	ldrh	r3, [r7, #30]
 800a410:	3b01      	subs	r3, #1
 800a412:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a414:	8bfb      	ldrh	r3, [r7, #30]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1ea      	bne.n	800a3f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	372c      	adds	r7, #44	; 0x2c
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d12c      	bne.n	800a49e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	db12      	blt.n	800a47c <USB_EPSetStall+0x54>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00f      	beq.n	800a47c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a47a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	0151      	lsls	r1, r2, #5
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	440a      	add	r2, r1
 800a492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	e02b      	b.n	800a4f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	db12      	blt.n	800a4d6 <USB_EPSetStall+0xae>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00f      	beq.n	800a4d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	0151      	lsls	r1, r2, #5
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d128      	bne.n	800a572 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	0151      	lsls	r1, r2, #5
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	440a      	add	r2, r1
 800a536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a53a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a53e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	78db      	ldrb	r3, [r3, #3]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d003      	beq.n	800a550 <USB_EPClearStall+0x4c>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	78db      	ldrb	r3, [r3, #3]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d138      	bne.n	800a5c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	0151      	lsls	r1, r2, #5
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	440a      	add	r2, r1
 800a566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	e027      	b.n	800a5c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	440a      	add	r2, r1
 800a588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a58c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a590:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	78db      	ldrb	r3, [r3, #3]
 800a596:	2b03      	cmp	r3, #3
 800a598:	d003      	beq.n	800a5a2 <USB_EPClearStall+0x9e>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	78db      	ldrb	r3, [r3, #3]
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d10f      	bne.n	800a5c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	015a      	lsls	r2, r3, #5
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	0151      	lsls	r1, r2, #5
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	440a      	add	r2, r1
 800a5b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a5f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	78fb      	ldrb	r3, [r7, #3]
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a604:	68f9      	ldr	r1, [r7, #12]
 800a606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a60a:	4313      	orrs	r3, r2
 800a60c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a64a:	f023 0302 	bic.w	r3, r3, #2
 800a64e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a678:	f023 0303 	bic.w	r3, r3, #3
 800a67c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a68c:	f043 0302 	orr.w	r3, r3, #2
 800a690:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	0c1b      	lsrs	r3, r3, #16
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	4013      	ands	r3, r2
 800a71c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	b29b      	uxth	r3, r3
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a72e:	b480      	push	{r7}
 800a730:	b085      	sub	sp, #20
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	460b      	mov	r3, r1
 800a738:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	4013      	ands	r3, r2
 800a75a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a75c:	68bb      	ldr	r3, [r7, #8]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b087      	sub	sp, #28
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a78e:	78fb      	ldrb	r3, [r7, #3]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	fa22 f303 	lsr.w	r3, r2, r3
 800a79a:	01db      	lsls	r3, r3, #7
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	371c      	adds	r7, #28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0301 	and.w	r3, r3, #1
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fe:	4619      	mov	r1, r3
 800a800:	4b09      	ldr	r3, [pc, #36]	; (800a828 <USB_ActivateSetup+0x44>)
 800a802:	4013      	ands	r3, r2
 800a804:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	fffff800 	.word	0xfffff800

0800a82c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b087      	sub	sp, #28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	460b      	mov	r3, r1
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	333c      	adds	r3, #60	; 0x3c
 800a842:	3304      	adds	r3, #4
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	4a26      	ldr	r2, [pc, #152]	; (800a8e4 <USB_EP0_OutStart+0xb8>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d90a      	bls.n	800a866 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a85c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a860:	d101      	bne.n	800a866 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	e037      	b.n	800a8d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a86c:	461a      	mov	r2, r3
 800a86e:	2300      	movs	r3, #0
 800a870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a894:	f043 0318 	orr.w	r3, r3, #24
 800a898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	697a      	ldr	r2, [r7, #20]
 800a8a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a8ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d10f      	bne.n	800a8d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	697a      	ldr	r2, [r7, #20]
 800a8ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a8d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	4f54300a 	.word	0x4f54300a

0800a8e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	4a13      	ldr	r2, [pc, #76]	; (800a94c <USB_CoreReset+0x64>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d901      	bls.n	800a906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e01b      	b.n	800a93e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	daf2      	bge.n	800a8f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	f043 0201 	orr.w	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3301      	adds	r3, #1
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	4a09      	ldr	r2, [pc, #36]	; (800a94c <USB_CoreReset+0x64>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d901      	bls.n	800a930 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e006      	b.n	800a93e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d0f0      	beq.n	800a91e <USB_CoreReset+0x36>

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	00030d40 	.word	0x00030d40

0800a950 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a95c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a960:	f004 fea0 	bl	800f6a4 <USBD_static_malloc>
 800a964:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d105      	bne.n	800a978 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a974:	2302      	movs	r3, #2
 800a976:	e066      	b.n	800aa46 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	7c1b      	ldrb	r3, [r3, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d119      	bne.n	800a9bc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a98c:	2202      	movs	r2, #2
 800a98e:	2181      	movs	r1, #129	; 0x81
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f004 fd64 	bl	800f45e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a99c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9a0:	2202      	movs	r2, #2
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f004 fd5a 	bl	800f45e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2210      	movs	r2, #16
 800a9b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a9ba:	e016      	b.n	800a9ea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a9bc:	2340      	movs	r3, #64	; 0x40
 800a9be:	2202      	movs	r2, #2
 800a9c0:	2181      	movs	r1, #129	; 0x81
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f004 fd4b 	bl	800f45e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a9ce:	2340      	movs	r3, #64	; 0x40
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f004 fd42 	bl	800f45e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2210      	movs	r2, #16
 800a9e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	2203      	movs	r2, #3
 800a9ee:	2182      	movs	r1, #130	; 0x82
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f004 fd34 	bl	800f45e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2200      	movs	r2, #0
 800aa14:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	7c1b      	ldrb	r3, [r3, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d109      	bne.n	800aa34 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f004 fe05 	bl	800f63c <USBD_LL_PrepareReceive>
 800aa32:	e007      	b.n	800aa44 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa3a:	2340      	movs	r3, #64	; 0x40
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f004 fdfc 	bl	800f63c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aa5a:	2181      	movs	r1, #129	; 0x81
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f004 fd24 	bl	800f4aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aa68:	2101      	movs	r1, #1
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f004 fd1d 	bl	800f4aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa78:	2182      	movs	r1, #130	; 0x82
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f004 fd15 	bl	800f4aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00e      	beq.n	800aab8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f004 fe08 	bl	800f6c0 <USBD_static_free>
    pdev->pClassData = NULL;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
	...

0800aac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aad4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e0af      	b.n	800ac4c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d03f      	beq.n	800ab78 <USBD_CDC_Setup+0xb4>
 800aaf8:	2b20      	cmp	r3, #32
 800aafa:	f040 809f 	bne.w	800ac3c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	88db      	ldrh	r3, [r3, #6]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d02e      	beq.n	800ab64 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	b25b      	sxtb	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	da16      	bge.n	800ab3e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ab1c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	88d2      	ldrh	r2, [r2, #6]
 800ab22:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	88db      	ldrh	r3, [r3, #6]
 800ab28:	2b07      	cmp	r3, #7
 800ab2a:	bf28      	it	cs
 800ab2c:	2307      	movcs	r3, #7
 800ab2e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	89fa      	ldrh	r2, [r7, #14]
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f001 fae9 	bl	800c10e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ab3c:	e085      	b.n	800ac4a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	785a      	ldrb	r2, [r3, #1]
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	88db      	ldrh	r3, [r3, #6]
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ab54:	6939      	ldr	r1, [r7, #16]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	88db      	ldrh	r3, [r3, #6]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f001 fb02 	bl	800c166 <USBD_CtlPrepareRx>
      break;
 800ab62:	e072      	b.n	800ac4a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	7850      	ldrb	r0, [r2, #1]
 800ab70:	2200      	movs	r2, #0
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	4798      	blx	r3
      break;
 800ab76:	e068      	b.n	800ac4a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	785b      	ldrb	r3, [r3, #1]
 800ab7c:	2b0b      	cmp	r3, #11
 800ab7e:	d852      	bhi.n	800ac26 <USBD_CDC_Setup+0x162>
 800ab80:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <USBD_CDC_Setup+0xc4>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800abb9 	.word	0x0800abb9
 800ab8c:	0800ac35 	.word	0x0800ac35
 800ab90:	0800ac27 	.word	0x0800ac27
 800ab94:	0800ac27 	.word	0x0800ac27
 800ab98:	0800ac27 	.word	0x0800ac27
 800ab9c:	0800ac27 	.word	0x0800ac27
 800aba0:	0800ac27 	.word	0x0800ac27
 800aba4:	0800ac27 	.word	0x0800ac27
 800aba8:	0800ac27 	.word	0x0800ac27
 800abac:	0800ac27 	.word	0x0800ac27
 800abb0:	0800abe3 	.word	0x0800abe3
 800abb4:	0800ac0d 	.word	0x0800ac0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d107      	bne.n	800abd4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800abc4:	f107 030a 	add.w	r3, r7, #10
 800abc8:	2202      	movs	r2, #2
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f001 fa9e 	bl	800c10e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800abd2:	e032      	b.n	800ac3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f001 fa28 	bl	800c02c <USBD_CtlError>
            ret = USBD_FAIL;
 800abdc:	2303      	movs	r3, #3
 800abde:	75fb      	strb	r3, [r7, #23]
          break;
 800abe0:	e02b      	b.n	800ac3a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b03      	cmp	r3, #3
 800abec:	d107      	bne.n	800abfe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800abee:	f107 030d 	add.w	r3, r7, #13
 800abf2:	2201      	movs	r2, #1
 800abf4:	4619      	mov	r1, r3
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f001 fa89 	bl	800c10e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800abfc:	e01d      	b.n	800ac3a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 fa13 	bl	800c02c <USBD_CtlError>
            ret = USBD_FAIL;
 800ac06:	2303      	movs	r3, #3
 800ac08:	75fb      	strb	r3, [r7, #23]
          break;
 800ac0a:	e016      	b.n	800ac3a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b03      	cmp	r3, #3
 800ac16:	d00f      	beq.n	800ac38 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f001 fa06 	bl	800c02c <USBD_CtlError>
            ret = USBD_FAIL;
 800ac20:	2303      	movs	r3, #3
 800ac22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac24:	e008      	b.n	800ac38 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f001 f9ff 	bl	800c02c <USBD_CtlError>
          ret = USBD_FAIL;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	75fb      	strb	r3, [r7, #23]
          break;
 800ac32:	e002      	b.n	800ac3a <USBD_CDC_Setup+0x176>
          break;
 800ac34:	bf00      	nop
 800ac36:	e008      	b.n	800ac4a <USBD_CDC_Setup+0x186>
          break;
 800ac38:	bf00      	nop
      }
      break;
 800ac3a:	e006      	b.n	800ac4a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f001 f9f4 	bl	800c02c <USBD_CtlError>
      ret = USBD_FAIL;
 800ac44:	2303      	movs	r3, #3
 800ac46:	75fb      	strb	r3, [r7, #23]
      break;
 800ac48:	bf00      	nop
  }

  return (uint8_t)ret;
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e04f      	b.n	800ad16 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ac7e:	78fa      	ldrb	r2, [r7, #3]
 800ac80:	6879      	ldr	r1, [r7, #4]
 800ac82:	4613      	mov	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3318      	adds	r3, #24
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d029      	beq.n	800ace8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ac94:	78fa      	ldrb	r2, [r7, #3]
 800ac96:	6879      	ldr	r1, [r7, #4]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	440b      	add	r3, r1
 800aca2:	3318      	adds	r3, #24
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	78f9      	ldrb	r1, [r7, #3]
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	460b      	mov	r3, r1
 800acac:	00db      	lsls	r3, r3, #3
 800acae:	1a5b      	subs	r3, r3, r1
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4403      	add	r3, r0
 800acb4:	3344      	adds	r3, #68	; 0x44
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	fbb2 f1f3 	udiv	r1, r2, r3
 800acbc:	fb03 f301 	mul.w	r3, r3, r1
 800acc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d110      	bne.n	800ace8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	3318      	adds	r3, #24
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800acda:	78f9      	ldrb	r1, [r7, #3]
 800acdc:	2300      	movs	r3, #0
 800acde:	2200      	movs	r2, #0
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f004 fc8a 	bl	800f5fa <USBD_LL_Transmit>
 800ace6:	e015      	b.n	800ad14 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2200      	movs	r2, #0
 800acec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad02:	691b      	ldr	r3, [r3, #16]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ad10:	78fa      	ldrb	r2, [r7, #3]
 800ad12:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b084      	sub	sp, #16
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e015      	b.n	800ad6c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f004 fc9a 	bl	800f67e <USBD_LL_GetRxDataSize>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ad66:	4611      	mov	r1, r2
 800ad68:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	e01b      	b.n	800adc6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d015      	beq.n	800adc4 <USBD_CDC_EP0_RxReady+0x50>
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad9e:	2bff      	cmp	r3, #255	; 0xff
 800ada0:	d010      	beq.n	800adc4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800adb0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800adb8:	b292      	uxth	r2, r2
 800adba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	22ff      	movs	r2, #255	; 0xff
 800adc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2243      	movs	r2, #67	; 0x43
 800addc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800adde:	4b03      	ldr	r3, [pc, #12]	; (800adec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	20000098 	.word	0x20000098

0800adf0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2243      	movs	r2, #67	; 0x43
 800adfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800adfe:	4b03      	ldr	r3, [pc, #12]	; (800ae0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	20000054 	.word	0x20000054

0800ae10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2243      	movs	r2, #67	; 0x43
 800ae1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ae1e:	4b03      	ldr	r3, [pc, #12]	; (800ae2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	200000dc 	.word	0x200000dc

0800ae30 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae3e:	4b03      	ldr	r3, [pc, #12]	; (800ae4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	20000010 	.word	0x20000010

0800ae50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae60:	2303      	movs	r3, #3
 800ae62:	e004      	b.n	800ae6e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b087      	sub	sp, #28
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	60b9      	str	r1, [r7, #8]
 800ae84:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae8c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e008      	b.n	800aeaa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	371c      	adds	r7, #28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
 800aebe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aec6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800aece:	2303      	movs	r3, #3
 800aed0:	e004      	b.n	800aedc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800af02:	2303      	movs	r3, #3
 800af04:	e016      	b.n	800af34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	7c1b      	ldrb	r3, [r3, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d109      	bne.n	800af22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af18:	2101      	movs	r1, #1
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f004 fb8e 	bl	800f63c <USBD_LL_PrepareReceive>
 800af20:	e007      	b.n	800af32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af28:	2340      	movs	r3, #64	; 0x40
 800af2a:	2101      	movs	r1, #1
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f004 fb85 	bl	800f63c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	4613      	mov	r3, r2
 800af48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800af50:	2303      	movs	r3, #3
 800af52:	e01f      	b.n	800af94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	79fa      	ldrb	r2, [r7, #7]
 800af86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f004 f9fd 	bl	800f388 <USBD_LL_Init>
 800af8e:	4603      	mov	r3, r0
 800af90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e016      	b.n	800afe2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00b      	beq.n	800afe0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	f107 020e 	add.w	r2, r7, #14
 800afd4:	4610      	mov	r0, r2
 800afd6:	4798      	blx	r3
 800afd8:	4602      	mov	r2, r0
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f004 fa18 	bl	800f428 <USBD_LL_Start>
 800aff8:	4603      	mov	r3, r0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b024:	2303      	movs	r3, #3
 800b026:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d009      	beq.n	800b046 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	78fa      	ldrb	r2, [r7, #3]
 800b03c:	4611      	mov	r1, r2
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	4798      	blx	r3
 800b042:	4603      	mov	r3, r0
 800b044:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b046:	7bfb      	ldrb	r3, [r7, #15]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	460b      	mov	r3, r1
 800b05a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d007      	beq.n	800b076 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	78fa      	ldrb	r2, [r7, #3]
 800b070:	4611      	mov	r1, r2
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	4798      	blx	r3
  }

  return USBD_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f000 ff90 	bl	800bfb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0b4:	f003 031f 	and.w	r3, r3, #31
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d01a      	beq.n	800b0f2 <USBD_LL_SetupStage+0x72>
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d822      	bhi.n	800b106 <USBD_LL_SetupStage+0x86>
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <USBD_LL_SetupStage+0x4a>
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d00a      	beq.n	800b0de <USBD_LL_SetupStage+0x5e>
 800b0c8:	e01d      	b.n	800b106 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fa62 	bl	800b59c <USBD_StdDevReq>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]
      break;
 800b0dc:	e020      	b.n	800b120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 fac6 	bl	800b678 <USBD_StdItfReq>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b0f0:	e016      	b.n	800b120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fb05 	bl	800b70a <USBD_StdEPReq>
 800b100:	4603      	mov	r3, r0
 800b102:	73fb      	strb	r3, [r7, #15]
      break;
 800b104:	e00c      	b.n	800b120 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b10c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b110:	b2db      	uxtb	r3, r3
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f004 f9e7 	bl	800f4e8 <USBD_LL_StallEP>
 800b11a:	4603      	mov	r3, r0
 800b11c:	73fb      	strb	r3, [r7, #15]
      break;
 800b11e:	bf00      	nop
  }

  return ret;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}

0800b12a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b12a:	b580      	push	{r7, lr}
 800b12c:	b086      	sub	sp, #24
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	460b      	mov	r3, r1
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b138:	7afb      	ldrb	r3, [r7, #11]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d138      	bne.n	800b1b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b144:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d14a      	bne.n	800b1e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	689a      	ldr	r2, [r3, #8]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d913      	bls.n	800b184 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	689a      	ldr	r2, [r3, #8]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	1ad2      	subs	r2, r2, r3
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	4293      	cmp	r3, r2
 800b174:	bf28      	it	cs
 800b176:	4613      	movcs	r3, r2
 800b178:	461a      	mov	r2, r3
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f001 f80f 	bl	800c1a0 <USBD_CtlContinueRx>
 800b182:	e030      	b.n	800b1e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d10b      	bne.n	800b1a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f001 f80a 	bl	800c1c2 <USBD_CtlSendStatus>
 800b1ae:	e01a      	b.n	800b1e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d114      	bne.n	800b1e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00e      	beq.n	800b1e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	7afa      	ldrb	r2, [r7, #11]
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	4798      	blx	r3
 800b1d8:	4603      	mov	r3, r0
 800b1da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	e000      	b.n	800b1e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b1fe:	7afb      	ldrb	r3, [r7, #11]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d16b      	bne.n	800b2dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3314      	adds	r3, #20
 800b208:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b210:	2b02      	cmp	r3, #2
 800b212:	d156      	bne.n	800b2c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	689a      	ldr	r2, [r3, #8]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d914      	bls.n	800b24a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	689a      	ldr	r2, [r3, #8]
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	1ad2      	subs	r2, r2, r3
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	461a      	mov	r2, r3
 800b234:	6879      	ldr	r1, [r7, #4]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 ff84 	bl	800c144 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b23c:	2300      	movs	r3, #0
 800b23e:	2200      	movs	r2, #0
 800b240:	2100      	movs	r1, #0
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f004 f9fa 	bl	800f63c <USBD_LL_PrepareReceive>
 800b248:	e03b      	b.n	800b2c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	68da      	ldr	r2, [r3, #12]
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	429a      	cmp	r2, r3
 800b254:	d11c      	bne.n	800b290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b25e:	429a      	cmp	r2, r3
 800b260:	d316      	bcc.n	800b290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d20f      	bcs.n	800b290 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b270:	2200      	movs	r2, #0
 800b272:	2100      	movs	r1, #0
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 ff65 	bl	800c144 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b282:	2300      	movs	r3, #0
 800b284:	2200      	movs	r2, #0
 800b286:	2100      	movs	r1, #0
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f004 f9d7 	bl	800f63c <USBD_LL_PrepareReceive>
 800b28e:	e018      	b.n	800b2c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d10b      	bne.n	800b2b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d005      	beq.n	800b2b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2b4:	2180      	movs	r1, #128	; 0x80
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f004 f916 	bl	800f4e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f000 ff93 	bl	800c1e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d122      	bne.n	800b312 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f7ff fe98 	bl	800b002 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b2da:	e01a      	b.n	800b312 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d114      	bne.n	800b312 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00e      	beq.n	800b312 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	7afa      	ldrb	r2, [r7, #11]
 800b2fe:	4611      	mov	r1, r2
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	4798      	blx	r3
 800b304:	4603      	mov	r3, r0
 800b306:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	e000      	b.n	800b314 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b34c:	2303      	movs	r3, #3
 800b34e:	e02f      	b.n	800b3b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00f      	beq.n	800b37a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d009      	beq.n	800b37a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	6852      	ldr	r2, [r2, #4]
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	4611      	mov	r1, r2
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b37a:	2340      	movs	r3, #64	; 0x40
 800b37c:	2200      	movs	r2, #0
 800b37e:	2100      	movs	r1, #0
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f004 f86c 	bl	800f45e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2201      	movs	r2, #1
 800b38a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2240      	movs	r2, #64	; 0x40
 800b392:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b396:	2340      	movs	r3, #64	; 0x40
 800b398:	2200      	movs	r2, #0
 800b39a:	2180      	movs	r1, #128	; 0x80
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f004 f85e 	bl	800f45e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2240      	movs	r2, #64	; 0x40
 800b3ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	78fa      	ldrb	r2, [r7, #3]
 800b3c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e6:	b2da      	uxtb	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2204      	movs	r2, #4
 800b3f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b04      	cmp	r3, #4
 800b416:	d106      	bne.n	800b426 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b446:	2303      	movs	r3, #3
 800b448:	e012      	b.n	800b470 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b03      	cmp	r3, #3
 800b454:	d10b      	bne.n	800b46e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d005      	beq.n	800b46e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	460b      	mov	r3, r1
 800b482:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b48e:	2303      	movs	r3, #3
 800b490:	e014      	b.n	800b4bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b03      	cmp	r3, #3
 800b49c:	d10d      	bne.n	800b4ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d007      	beq.n	800b4ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	78fa      	ldrb	r2, [r7, #3]
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	e014      	b.n	800b508 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d10d      	bne.n	800b506 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d007      	beq.n	800b506 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fe:	78fa      	ldrb	r2, [r7, #3]
 800b500:	4611      	mov	r1, r2
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	370c      	adds	r7, #12
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b082      	sub	sp, #8
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d009      	beq.n	800b554 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	6852      	ldr	r2, [r2, #4]
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	4611      	mov	r1, r2
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	4798      	blx	r3
  }

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b55e:	b480      	push	{r7}
 800b560:	b087      	sub	sp, #28
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	3301      	adds	r3, #1
 800b574:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b57c:	8a3b      	ldrh	r3, [r7, #16]
 800b57e:	021b      	lsls	r3, r3, #8
 800b580:	b21a      	sxth	r2, r3
 800b582:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b586:	4313      	orrs	r3, r2
 800b588:	b21b      	sxth	r3, r3
 800b58a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b58c:	89fb      	ldrh	r3, [r7, #14]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	371c      	adds	r7, #28
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
	...

0800b59c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5b2:	2b40      	cmp	r3, #64	; 0x40
 800b5b4:	d005      	beq.n	800b5c2 <USBD_StdDevReq+0x26>
 800b5b6:	2b40      	cmp	r3, #64	; 0x40
 800b5b8:	d853      	bhi.n	800b662 <USBD_StdDevReq+0xc6>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <USBD_StdDevReq+0x3a>
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d14f      	bne.n	800b662 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	4798      	blx	r3
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5d4:	e04a      	b.n	800b66c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	785b      	ldrb	r3, [r3, #1]
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d83b      	bhi.n	800b656 <USBD_StdDevReq+0xba>
 800b5de:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <USBD_StdDevReq+0x48>)
 800b5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e4:	0800b639 	.word	0x0800b639
 800b5e8:	0800b64d 	.word	0x0800b64d
 800b5ec:	0800b657 	.word	0x0800b657
 800b5f0:	0800b643 	.word	0x0800b643
 800b5f4:	0800b657 	.word	0x0800b657
 800b5f8:	0800b617 	.word	0x0800b617
 800b5fc:	0800b60d 	.word	0x0800b60d
 800b600:	0800b657 	.word	0x0800b657
 800b604:	0800b62f 	.word	0x0800b62f
 800b608:	0800b621 	.word	0x0800b621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9de 	bl	800b9d0 <USBD_GetDescriptor>
          break;
 800b614:	e024      	b.n	800b660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fb43 	bl	800bca4 <USBD_SetAddress>
          break;
 800b61e:	e01f      	b.n	800b660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fb82 	bl	800bd2c <USBD_SetConfig>
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]
          break;
 800b62c:	e018      	b.n	800b660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fc21 	bl	800be78 <USBD_GetConfig>
          break;
 800b636:	e013      	b.n	800b660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fc52 	bl	800bee4 <USBD_GetStatus>
          break;
 800b640:	e00e      	b.n	800b660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fc81 	bl	800bf4c <USBD_SetFeature>
          break;
 800b64a:	e009      	b.n	800b660 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fc90 	bl	800bf74 <USBD_ClrFeature>
          break;
 800b654:	e004      	b.n	800b660 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 fce7 	bl	800c02c <USBD_CtlError>
          break;
 800b65e:	bf00      	nop
      }
      break;
 800b660:	e004      	b.n	800b66c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fce1 	bl	800c02c <USBD_CtlError>
      break;
 800b66a:	bf00      	nop
  }

  return ret;
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop

0800b678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b68e:	2b40      	cmp	r3, #64	; 0x40
 800b690:	d005      	beq.n	800b69e <USBD_StdItfReq+0x26>
 800b692:	2b40      	cmp	r3, #64	; 0x40
 800b694:	d82f      	bhi.n	800b6f6 <USBD_StdItfReq+0x7e>
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <USBD_StdItfReq+0x26>
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	d12b      	bne.n	800b6f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d81d      	bhi.n	800b6e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	889b      	ldrh	r3, [r3, #4]
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d813      	bhi.n	800b6de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	4798      	blx	r3
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	88db      	ldrh	r3, [r3, #6]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d110      	bne.n	800b6f2 <USBD_StdItfReq+0x7a>
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10d      	bne.n	800b6f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fd73 	bl	800c1c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b6dc:	e009      	b.n	800b6f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fca3 	bl	800c02c <USBD_CtlError>
          break;
 800b6e6:	e004      	b.n	800b6f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fc9e 	bl	800c02c <USBD_CtlError>
          break;
 800b6f0:	e000      	b.n	800b6f4 <USBD_StdItfReq+0x7c>
          break;
 800b6f2:	bf00      	nop
      }
      break;
 800b6f4:	e004      	b.n	800b700 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fc97 	bl	800c02c <USBD_CtlError>
      break;
 800b6fe:	bf00      	nop
  }

  return ret;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	889b      	ldrh	r3, [r3, #4]
 800b71c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b726:	2b40      	cmp	r3, #64	; 0x40
 800b728:	d007      	beq.n	800b73a <USBD_StdEPReq+0x30>
 800b72a:	2b40      	cmp	r3, #64	; 0x40
 800b72c:	f200 8145 	bhi.w	800b9ba <USBD_StdEPReq+0x2b0>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00c      	beq.n	800b74e <USBD_StdEPReq+0x44>
 800b734:	2b20      	cmp	r3, #32
 800b736:	f040 8140 	bne.w	800b9ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	6839      	ldr	r1, [r7, #0]
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	4798      	blx	r3
 800b748:	4603      	mov	r3, r0
 800b74a:	73fb      	strb	r3, [r7, #15]
      break;
 800b74c:	e13a      	b.n	800b9c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	785b      	ldrb	r3, [r3, #1]
 800b752:	2b03      	cmp	r3, #3
 800b754:	d007      	beq.n	800b766 <USBD_StdEPReq+0x5c>
 800b756:	2b03      	cmp	r3, #3
 800b758:	f300 8129 	bgt.w	800b9ae <USBD_StdEPReq+0x2a4>
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d07f      	beq.n	800b860 <USBD_StdEPReq+0x156>
 800b760:	2b01      	cmp	r3, #1
 800b762:	d03c      	beq.n	800b7de <USBD_StdEPReq+0xd4>
 800b764:	e123      	b.n	800b9ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d002      	beq.n	800b778 <USBD_StdEPReq+0x6e>
 800b772:	2b03      	cmp	r3, #3
 800b774:	d016      	beq.n	800b7a4 <USBD_StdEPReq+0x9a>
 800b776:	e02c      	b.n	800b7d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b778:	7bbb      	ldrb	r3, [r7, #14]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d00d      	beq.n	800b79a <USBD_StdEPReq+0x90>
 800b77e:	7bbb      	ldrb	r3, [r7, #14]
 800b780:	2b80      	cmp	r3, #128	; 0x80
 800b782:	d00a      	beq.n	800b79a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b784:	7bbb      	ldrb	r3, [r7, #14]
 800b786:	4619      	mov	r1, r3
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f003 fead 	bl	800f4e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b78e:	2180      	movs	r1, #128	; 0x80
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f003 fea9 	bl	800f4e8 <USBD_LL_StallEP>
 800b796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b798:	e020      	b.n	800b7dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fc45 	bl	800c02c <USBD_CtlError>
              break;
 800b7a2:	e01b      	b.n	800b7dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	885b      	ldrh	r3, [r3, #2]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10e      	bne.n	800b7ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00b      	beq.n	800b7ca <USBD_StdEPReq+0xc0>
 800b7b2:	7bbb      	ldrb	r3, [r7, #14]
 800b7b4:	2b80      	cmp	r3, #128	; 0x80
 800b7b6:	d008      	beq.n	800b7ca <USBD_StdEPReq+0xc0>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	88db      	ldrh	r3, [r3, #6]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d104      	bne.n	800b7ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7c0:	7bbb      	ldrb	r3, [r7, #14]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f003 fe8f 	bl	800f4e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fcf9 	bl	800c1c2 <USBD_CtlSendStatus>

              break;
 800b7d0:	e004      	b.n	800b7dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 fc29 	bl	800c02c <USBD_CtlError>
              break;
 800b7da:	bf00      	nop
          }
          break;
 800b7dc:	e0ec      	b.n	800b9b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d002      	beq.n	800b7f0 <USBD_StdEPReq+0xe6>
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d016      	beq.n	800b81c <USBD_StdEPReq+0x112>
 800b7ee:	e030      	b.n	800b852 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00d      	beq.n	800b812 <USBD_StdEPReq+0x108>
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b80      	cmp	r3, #128	; 0x80
 800b7fa:	d00a      	beq.n	800b812 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f003 fe71 	bl	800f4e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b806:	2180      	movs	r1, #128	; 0x80
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f003 fe6d 	bl	800f4e8 <USBD_LL_StallEP>
 800b80e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b810:	e025      	b.n	800b85e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fc09 	bl	800c02c <USBD_CtlError>
              break;
 800b81a:	e020      	b.n	800b85e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	885b      	ldrh	r3, [r3, #2]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d11b      	bne.n	800b85c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b824:	7bbb      	ldrb	r3, [r7, #14]
 800b826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	4619      	mov	r1, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f003 fe77 	bl	800f526 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fcc2 	bl	800c1c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	6839      	ldr	r1, [r7, #0]
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b850:	e004      	b.n	800b85c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fbe9 	bl	800c02c <USBD_CtlError>
              break;
 800b85a:	e000      	b.n	800b85e <USBD_StdEPReq+0x154>
              break;
 800b85c:	bf00      	nop
          }
          break;
 800b85e:	e0ab      	b.n	800b9b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d002      	beq.n	800b872 <USBD_StdEPReq+0x168>
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	d032      	beq.n	800b8d6 <USBD_StdEPReq+0x1cc>
 800b870:	e097      	b.n	800b9a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d007      	beq.n	800b888 <USBD_StdEPReq+0x17e>
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2b80      	cmp	r3, #128	; 0x80
 800b87c:	d004      	beq.n	800b888 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 fbd3 	bl	800c02c <USBD_CtlError>
                break;
 800b886:	e091      	b.n	800b9ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	da0b      	bge.n	800b8a8 <USBD_StdEPReq+0x19e>
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	3310      	adds	r3, #16
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	e00b      	b.n	800b8c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8a8:	7bbb      	ldrb	r3, [r7, #14]
 800b8aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	4413      	add	r3, r2
 800b8be:	3304      	adds	r3, #4
 800b8c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fc1d 	bl	800c10e <USBD_CtlSendData>
              break;
 800b8d4:	e06a      	b.n	800b9ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b8d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	da11      	bge.n	800b902 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
 800b8e0:	f003 020f 	and.w	r2, r3, #15
 800b8e4:	6879      	ldr	r1, [r7, #4]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	440b      	add	r3, r1
 800b8f0:	3324      	adds	r3, #36	; 0x24
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d117      	bne.n	800b928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fb96 	bl	800c02c <USBD_CtlError>
                  break;
 800b900:	e054      	b.n	800b9ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b902:	7bbb      	ldrb	r3, [r7, #14]
 800b904:	f003 020f 	and.w	r2, r3, #15
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d104      	bne.n	800b928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fb83 	bl	800c02c <USBD_CtlError>
                  break;
 800b926:	e041      	b.n	800b9ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	da0b      	bge.n	800b948 <USBD_StdEPReq+0x23e>
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	3310      	adds	r3, #16
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	4413      	add	r3, r2
 800b944:	3304      	adds	r3, #4
 800b946:	e00b      	b.n	800b960 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	3304      	adds	r3, #4
 800b960:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <USBD_StdEPReq+0x264>
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2b80      	cmp	r3, #128	; 0x80
 800b96c:	d103      	bne.n	800b976 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]
 800b974:	e00e      	b.n	800b994 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f003 fdf2 	bl	800f564 <USBD_LL_IsStallEP>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2201      	movs	r2, #1
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	e002      	b.n	800b994 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	2202      	movs	r2, #2
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fbb7 	bl	800c10e <USBD_CtlSendData>
              break;
 800b9a0:	e004      	b.n	800b9ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fb41 	bl	800c02c <USBD_CtlError>
              break;
 800b9aa:	bf00      	nop
          }
          break;
 800b9ac:	e004      	b.n	800b9b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 fb3b 	bl	800c02c <USBD_CtlError>
          break;
 800b9b6:	bf00      	nop
      }
      break;
 800b9b8:	e004      	b.n	800b9c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b9ba:	6839      	ldr	r1, [r7, #0]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fb35 	bl	800c02c <USBD_CtlError>
      break;
 800b9c2:	bf00      	nop
  }

  return ret;
 800b9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	885b      	ldrh	r3, [r3, #2]
 800b9ea:	0a1b      	lsrs	r3, r3, #8
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	2b06      	cmp	r3, #6
 800b9f2:	f200 8128 	bhi.w	800bc46 <USBD_GetDescriptor+0x276>
 800b9f6:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <USBD_GetDescriptor+0x2c>)
 800b9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fc:	0800ba19 	.word	0x0800ba19
 800ba00:	0800ba31 	.word	0x0800ba31
 800ba04:	0800ba71 	.word	0x0800ba71
 800ba08:	0800bc47 	.word	0x0800bc47
 800ba0c:	0800bc47 	.word	0x0800bc47
 800ba10:	0800bbe7 	.word	0x0800bbe7
 800ba14:	0800bc13 	.word	0x0800bc13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	7c12      	ldrb	r2, [r2, #16]
 800ba24:	f107 0108 	add.w	r1, r7, #8
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
 800ba2c:	60f8      	str	r0, [r7, #12]
      break;
 800ba2e:	e112      	b.n	800bc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	7c1b      	ldrb	r3, [r3, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10d      	bne.n	800ba54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba40:	f107 0208 	add.w	r2, r7, #8
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	2202      	movs	r2, #2
 800ba50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba52:	e100      	b.n	800bc56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	f107 0208 	add.w	r2, r7, #8
 800ba60:	4610      	mov	r0, r2
 800ba62:	4798      	blx	r3
 800ba64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	701a      	strb	r2, [r3, #0]
      break;
 800ba6e:	e0f2      	b.n	800bc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	885b      	ldrh	r3, [r3, #2]
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b05      	cmp	r3, #5
 800ba78:	f200 80ac 	bhi.w	800bbd4 <USBD_GetDescriptor+0x204>
 800ba7c:	a201      	add	r2, pc, #4	; (adr r2, 800ba84 <USBD_GetDescriptor+0xb4>)
 800ba7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba82:	bf00      	nop
 800ba84:	0800ba9d 	.word	0x0800ba9d
 800ba88:	0800bad1 	.word	0x0800bad1
 800ba8c:	0800bb05 	.word	0x0800bb05
 800ba90:	0800bb39 	.word	0x0800bb39
 800ba94:	0800bb6d 	.word	0x0800bb6d
 800ba98:	0800bba1 	.word	0x0800bba1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00b      	beq.n	800bac0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	7c12      	ldrb	r2, [r2, #16]
 800bab4:	f107 0108 	add.w	r1, r7, #8
 800bab8:	4610      	mov	r0, r2
 800baba:	4798      	blx	r3
 800babc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800babe:	e091      	b.n	800bbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fab2 	bl	800c02c <USBD_CtlError>
            err++;
 800bac8:	7afb      	ldrb	r3, [r7, #11]
 800baca:	3301      	adds	r3, #1
 800bacc:	72fb      	strb	r3, [r7, #11]
          break;
 800bace:	e089      	b.n	800bbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00b      	beq.n	800baf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	7c12      	ldrb	r2, [r2, #16]
 800bae8:	f107 0108 	add.w	r1, r7, #8
 800baec:	4610      	mov	r0, r2
 800baee:	4798      	blx	r3
 800baf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baf2:	e077      	b.n	800bbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fa98 	bl	800c02c <USBD_CtlError>
            err++;
 800bafc:	7afb      	ldrb	r3, [r7, #11]
 800bafe:	3301      	adds	r3, #1
 800bb00:	72fb      	strb	r3, [r7, #11]
          break;
 800bb02:	e06f      	b.n	800bbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	7c12      	ldrb	r2, [r2, #16]
 800bb1c:	f107 0108 	add.w	r1, r7, #8
 800bb20:	4610      	mov	r0, r2
 800bb22:	4798      	blx	r3
 800bb24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb26:	e05d      	b.n	800bbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb28:	6839      	ldr	r1, [r7, #0]
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fa7e 	bl	800c02c <USBD_CtlError>
            err++;
 800bb30:	7afb      	ldrb	r3, [r7, #11]
 800bb32:	3301      	adds	r3, #1
 800bb34:	72fb      	strb	r3, [r7, #11]
          break;
 800bb36:	e055      	b.n	800bbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	7c12      	ldrb	r2, [r2, #16]
 800bb50:	f107 0108 	add.w	r1, r7, #8
 800bb54:	4610      	mov	r0, r2
 800bb56:	4798      	blx	r3
 800bb58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb5a:	e043      	b.n	800bbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa64 	bl	800c02c <USBD_CtlError>
            err++;
 800bb64:	7afb      	ldrb	r3, [r7, #11]
 800bb66:	3301      	adds	r3, #1
 800bb68:	72fb      	strb	r3, [r7, #11]
          break;
 800bb6a:	e03b      	b.n	800bbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb72:	695b      	ldr	r3, [r3, #20]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00b      	beq.n	800bb90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	7c12      	ldrb	r2, [r2, #16]
 800bb84:	f107 0108 	add.w	r1, r7, #8
 800bb88:	4610      	mov	r0, r2
 800bb8a:	4798      	blx	r3
 800bb8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb8e:	e029      	b.n	800bbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fa4a 	bl	800c02c <USBD_CtlError>
            err++;
 800bb98:	7afb      	ldrb	r3, [r7, #11]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb9e:	e021      	b.n	800bbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00b      	beq.n	800bbc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	7c12      	ldrb	r2, [r2, #16]
 800bbb8:	f107 0108 	add.w	r1, r7, #8
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4798      	blx	r3
 800bbc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbc2:	e00f      	b.n	800bbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbc4:	6839      	ldr	r1, [r7, #0]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fa30 	bl	800c02c <USBD_CtlError>
            err++;
 800bbcc:	7afb      	ldrb	r3, [r7, #11]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	72fb      	strb	r3, [r7, #11]
          break;
 800bbd2:	e007      	b.n	800bbe4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bbd4:	6839      	ldr	r1, [r7, #0]
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fa28 	bl	800c02c <USBD_CtlError>
          err++;
 800bbdc:	7afb      	ldrb	r3, [r7, #11]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bbe2:	bf00      	nop
      }
      break;
 800bbe4:	e037      	b.n	800bc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	7c1b      	ldrb	r3, [r3, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d109      	bne.n	800bc02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf6:	f107 0208 	add.w	r2, r7, #8
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	4798      	blx	r3
 800bbfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc00:	e029      	b.n	800bc56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fa11 	bl	800c02c <USBD_CtlError>
        err++;
 800bc0a:	7afb      	ldrb	r3, [r7, #11]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	72fb      	strb	r3, [r7, #11]
      break;
 800bc10:	e021      	b.n	800bc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7c1b      	ldrb	r3, [r3, #16]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10d      	bne.n	800bc36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc22:	f107 0208 	add.w	r2, r7, #8
 800bc26:	4610      	mov	r0, r2
 800bc28:	4798      	blx	r3
 800bc2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	2207      	movs	r2, #7
 800bc32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc34:	e00f      	b.n	800bc56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f9f7 	bl	800c02c <USBD_CtlError>
        err++;
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
 800bc40:	3301      	adds	r3, #1
 800bc42:	72fb      	strb	r3, [r7, #11]
      break;
 800bc44:	e007      	b.n	800bc56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f9ef 	bl	800c02c <USBD_CtlError>
      err++;
 800bc4e:	7afb      	ldrb	r3, [r7, #11]
 800bc50:	3301      	adds	r3, #1
 800bc52:	72fb      	strb	r3, [r7, #11]
      break;
 800bc54:	bf00      	nop
  }

  if (err != 0U)
 800bc56:	7afb      	ldrb	r3, [r7, #11]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d11e      	bne.n	800bc9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	88db      	ldrh	r3, [r3, #6]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d016      	beq.n	800bc92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bc64:	893b      	ldrh	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00e      	beq.n	800bc88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	88da      	ldrh	r2, [r3, #6]
 800bc6e:	893b      	ldrh	r3, [r7, #8]
 800bc70:	4293      	cmp	r3, r2
 800bc72:	bf28      	it	cs
 800bc74:	4613      	movcs	r3, r2
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc7a:	893b      	ldrh	r3, [r7, #8]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa44 	bl	800c10e <USBD_CtlSendData>
 800bc86:	e009      	b.n	800bc9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc88:	6839      	ldr	r1, [r7, #0]
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f9ce 	bl	800c02c <USBD_CtlError>
 800bc90:	e004      	b.n	800bc9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fa95 	bl	800c1c2 <USBD_CtlSendStatus>
 800bc98:	e000      	b.n	800bc9c <USBD_GetDescriptor+0x2cc>
    return;
 800bc9a:	bf00      	nop
  }
}
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop

0800bca4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	889b      	ldrh	r3, [r3, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d131      	bne.n	800bd1a <USBD_SetAddress+0x76>
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	88db      	ldrh	r3, [r3, #6]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d12d      	bne.n	800bd1a <USBD_SetAddress+0x76>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	885b      	ldrh	r3, [r3, #2]
 800bcc2:	2b7f      	cmp	r3, #127	; 0x7f
 800bcc4:	d829      	bhi.n	800bd1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	885b      	ldrh	r3, [r3, #2]
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d104      	bne.n	800bce8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f9a3 	bl	800c02c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce6:	e01d      	b.n	800bd24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7bfa      	ldrb	r2, [r7, #15]
 800bcec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f003 fc61 	bl	800f5bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fa61 	bl	800c1c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d004      	beq.n	800bd10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2202      	movs	r2, #2
 800bd0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0e:	e009      	b.n	800bd24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd18:	e004      	b.n	800bd24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f985 	bl	800c02c <USBD_CtlError>
  }
}
 800bd22:	bf00      	nop
 800bd24:	bf00      	nop
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	885b      	ldrh	r3, [r3, #2]
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	4b4c      	ldr	r3, [pc, #304]	; (800be74 <USBD_SetConfig+0x148>)
 800bd42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd44:	4b4b      	ldr	r3, [pc, #300]	; (800be74 <USBD_SetConfig+0x148>)
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d905      	bls.n	800bd58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f96c 	bl	800c02c <USBD_CtlError>
    return USBD_FAIL;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e088      	b.n	800be6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d002      	beq.n	800bd6a <USBD_SetConfig+0x3e>
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d025      	beq.n	800bdb4 <USBD_SetConfig+0x88>
 800bd68:	e071      	b.n	800be4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd6a:	4b42      	ldr	r3, [pc, #264]	; (800be74 <USBD_SetConfig+0x148>)
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d01c      	beq.n	800bdac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bd72:	4b40      	ldr	r3, [pc, #256]	; (800be74 <USBD_SetConfig+0x148>)
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd7c:	4b3d      	ldr	r3, [pc, #244]	; (800be74 <USBD_SetConfig+0x148>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7ff f948 	bl	800b018 <USBD_SetClassConfig>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d004      	beq.n	800bd9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 f949 	bl	800c02c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bd9a:	e065      	b.n	800be68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fa10 	bl	800c1c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2203      	movs	r2, #3
 800bda6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bdaa:	e05d      	b.n	800be68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fa08 	bl	800c1c2 <USBD_CtlSendStatus>
      break;
 800bdb2:	e059      	b.n	800be68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bdb4:	4b2f      	ldr	r3, [pc, #188]	; (800be74 <USBD_SetConfig+0x148>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d112      	bne.n	800bde2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bdc4:	4b2b      	ldr	r3, [pc, #172]	; (800be74 <USBD_SetConfig+0x148>)
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bdce:	4b29      	ldr	r3, [pc, #164]	; (800be74 <USBD_SetConfig+0x148>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7ff f93b 	bl	800b050 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f9f1 	bl	800c1c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bde0:	e042      	b.n	800be68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bde2:	4b24      	ldr	r3, [pc, #144]	; (800be74 <USBD_SetConfig+0x148>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	461a      	mov	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d02a      	beq.n	800be46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7ff f929 	bl	800b050 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bdfe:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <USBD_SetConfig+0x148>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be08:	4b1a      	ldr	r3, [pc, #104]	; (800be74 <USBD_SetConfig+0x148>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7ff f902 	bl	800b018 <USBD_SetClassConfig>
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00f      	beq.n	800be3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f903 	bl	800c02c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7ff f90e 	bl	800b050 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be3c:	e014      	b.n	800be68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f9bf 	bl	800c1c2 <USBD_CtlSendStatus>
      break;
 800be44:	e010      	b.n	800be68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f9bb 	bl	800c1c2 <USBD_CtlSendStatus>
      break;
 800be4c:	e00c      	b.n	800be68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f8eb 	bl	800c02c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be56:	4b07      	ldr	r3, [pc, #28]	; (800be74 <USBD_SetConfig+0x148>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	4619      	mov	r1, r3
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff f8f7 	bl	800b050 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be62:	2303      	movs	r3, #3
 800be64:	73fb      	strb	r3, [r7, #15]
      break;
 800be66:	bf00      	nop
  }

  return ret;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	200001a4 	.word	0x200001a4

0800be78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	88db      	ldrh	r3, [r3, #6]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d004      	beq.n	800be94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 f8cd 	bl	800c02c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be92:	e023      	b.n	800bedc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	dc02      	bgt.n	800bea6 <USBD_GetConfig+0x2e>
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	dc03      	bgt.n	800beac <USBD_GetConfig+0x34>
 800bea4:	e015      	b.n	800bed2 <USBD_GetConfig+0x5a>
 800bea6:	2b03      	cmp	r3, #3
 800bea8:	d00b      	beq.n	800bec2 <USBD_GetConfig+0x4a>
 800beaa:	e012      	b.n	800bed2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	3308      	adds	r3, #8
 800beb6:	2201      	movs	r2, #1
 800beb8:	4619      	mov	r1, r3
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f927 	bl	800c10e <USBD_CtlSendData>
        break;
 800bec0:	e00c      	b.n	800bedc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	3304      	adds	r3, #4
 800bec6:	2201      	movs	r2, #1
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f91f 	bl	800c10e <USBD_CtlSendData>
        break;
 800bed0:	e004      	b.n	800bedc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f8a9 	bl	800c02c <USBD_CtlError>
        break;
 800beda:	bf00      	nop
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	3b01      	subs	r3, #1
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d81e      	bhi.n	800bf3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	88db      	ldrh	r3, [r3, #6]
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d004      	beq.n	800bf0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f890 	bl	800c02c <USBD_CtlError>
        break;
 800bf0c:	e01a      	b.n	800bf44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2201      	movs	r2, #1
 800bf12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d005      	beq.n	800bf2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68db      	ldr	r3, [r3, #12]
 800bf22:	f043 0202 	orr.w	r2, r3, #2
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	330c      	adds	r3, #12
 800bf2e:	2202      	movs	r2, #2
 800bf30:	4619      	mov	r1, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f8eb 	bl	800c10e <USBD_CtlSendData>
      break;
 800bf38:	e004      	b.n	800bf44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f875 	bl	800c02c <USBD_CtlError>
      break;
 800bf42:	bf00      	nop
  }
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	885b      	ldrh	r3, [r3, #2]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d106      	bne.n	800bf6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f92b 	bl	800c1c2 <USBD_CtlSendStatus>
  }
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	3b01      	subs	r3, #1
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d80b      	bhi.n	800bfa4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	885b      	ldrh	r3, [r3, #2]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d10c      	bne.n	800bfae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 f910 	bl	800c1c2 <USBD_CtlSendStatus>
      }
      break;
 800bfa2:	e004      	b.n	800bfae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f840 	bl	800c02c <USBD_CtlError>
      break;
 800bfac:	e000      	b.n	800bfb0 <USBD_ClrFeature+0x3c>
      break;
 800bfae:	bf00      	nop
  }
}
 800bfb0:	bf00      	nop
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	781a      	ldrb	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	781a      	ldrb	r2, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff fabb 	bl	800b55e <SWAPBYTE>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3301      	adds	r3, #1
 800bff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff faae 	bl	800b55e <SWAPBYTE>
 800c002:	4603      	mov	r3, r0
 800c004:	461a      	mov	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	3301      	adds	r3, #1
 800c00e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3301      	adds	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff faa1 	bl	800b55e <SWAPBYTE>
 800c01c:	4603      	mov	r3, r0
 800c01e:	461a      	mov	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	80da      	strh	r2, [r3, #6]
}
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c036:	2180      	movs	r1, #128	; 0x80
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f003 fa55 	bl	800f4e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c03e:	2100      	movs	r1, #0
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f003 fa51 	bl	800f4e8 <USBD_LL_StallEP>
}
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b086      	sub	sp, #24
 800c052:	af00      	add	r7, sp, #0
 800c054:	60f8      	str	r0, [r7, #12]
 800c056:	60b9      	str	r1, [r7, #8]
 800c058:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c05a:	2300      	movs	r3, #0
 800c05c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d036      	beq.n	800c0d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c068:	6938      	ldr	r0, [r7, #16]
 800c06a:	f000 f836 	bl	800c0da <USBD_GetLen>
 800c06e:	4603      	mov	r3, r0
 800c070:	3301      	adds	r3, #1
 800c072:	b29b      	uxth	r3, r3
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	b29a      	uxth	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c07c:	7dfb      	ldrb	r3, [r7, #23]
 800c07e:	68ba      	ldr	r2, [r7, #8]
 800c080:	4413      	add	r3, r2
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	7812      	ldrb	r2, [r2, #0]
 800c086:	701a      	strb	r2, [r3, #0]
  idx++;
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	3301      	adds	r3, #1
 800c08c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	4413      	add	r3, r2
 800c094:	2203      	movs	r2, #3
 800c096:	701a      	strb	r2, [r3, #0]
  idx++;
 800c098:	7dfb      	ldrb	r3, [r7, #23]
 800c09a:	3301      	adds	r3, #1
 800c09c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c09e:	e013      	b.n	800c0c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c0a0:	7dfb      	ldrb	r3, [r7, #23]
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	7812      	ldrb	r2, [r2, #0]
 800c0aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	613b      	str	r3, [r7, #16]
    idx++;
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c0b8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	4413      	add	r3, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1e7      	bne.n	800c0a0 <USBD_GetString+0x52>
 800c0d0:	e000      	b.n	800c0d4 <USBD_GetString+0x86>
    return;
 800c0d2:	bf00      	nop
  }
}
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b085      	sub	sp, #20
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c0ea:	e005      	b.n	800c0f8 <USBD_GetLen+0x1e>
  {
    len++;
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1f5      	bne.n	800c0ec <USBD_GetLen+0x12>
  }

  return len;
 800c100:	7bfb      	ldrb	r3, [r7, #15]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2202      	movs	r2, #2
 800c11e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	68ba      	ldr	r2, [r7, #8]
 800c132:	2100      	movs	r1, #0
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f003 fa60 	bl	800f5fa <USBD_LL_Transmit>

  return USBD_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	2100      	movs	r1, #0
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f003 fa4f 	bl	800f5fa <USBD_LL_Transmit>

  return USBD_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2203      	movs	r2, #3
 800c176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	2100      	movs	r1, #0
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f003 fa53 	bl	800f63c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f003 fa42 	bl	800f63c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2204      	movs	r2, #4
 800c1ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f003 fa0e 	bl	800f5fa <USBD_LL_Transmit>

  return USBD_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2205      	movs	r2, #5
 800c1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f003 fa1c 	bl	800f63c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <__NVIC_SetPriority>:
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	6039      	str	r1, [r7, #0]
 800c21a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c21c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c220:	2b00      	cmp	r3, #0
 800c222:	db0a      	blt.n	800c23a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	b2da      	uxtb	r2, r3
 800c228:	490c      	ldr	r1, [pc, #48]	; (800c25c <__NVIC_SetPriority+0x4c>)
 800c22a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c22e:	0112      	lsls	r2, r2, #4
 800c230:	b2d2      	uxtb	r2, r2
 800c232:	440b      	add	r3, r1
 800c234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c238:	e00a      	b.n	800c250 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	4908      	ldr	r1, [pc, #32]	; (800c260 <__NVIC_SetPriority+0x50>)
 800c240:	88fb      	ldrh	r3, [r7, #6]
 800c242:	f003 030f 	and.w	r3, r3, #15
 800c246:	3b04      	subs	r3, #4
 800c248:	0112      	lsls	r2, r2, #4
 800c24a:	b2d2      	uxtb	r2, r2
 800c24c:	440b      	add	r3, r1
 800c24e:	761a      	strb	r2, [r3, #24]
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	e000e100 	.word	0xe000e100
 800c260:	e000ed00 	.word	0xe000ed00

0800c264 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c264:	b580      	push	{r7, lr}
 800c266:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c268:	4b05      	ldr	r3, [pc, #20]	; (800c280 <SysTick_Handler+0x1c>)
 800c26a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c26c:	f002 f936 	bl	800e4dc <xTaskGetSchedulerState>
 800c270:	4603      	mov	r3, r0
 800c272:	2b01      	cmp	r3, #1
 800c274:	d001      	beq.n	800c27a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c276:	f000 fd97 	bl	800cda8 <xPortSysTickHandler>
  }
}
 800c27a:	bf00      	nop
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	e000e010 	.word	0xe000e010

0800c284 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c288:	2100      	movs	r1, #0
 800c28a:	f06f 0004 	mvn.w	r0, #4
 800c28e:	f7ff ffbf 	bl	800c210 <__NVIC_SetPriority>
#endif
}
 800c292:	bf00      	nop
 800c294:	bd80      	pop	{r7, pc}
	...

0800c298 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c29e:	f3ef 8305 	mrs	r3, IPSR
 800c2a2:	603b      	str	r3, [r7, #0]
  return(result);
 800c2a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d003      	beq.n	800c2b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2aa:	f06f 0305 	mvn.w	r3, #5
 800c2ae:	607b      	str	r3, [r7, #4]
 800c2b0:	e00c      	b.n	800c2cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2b2:	4b0a      	ldr	r3, [pc, #40]	; (800c2dc <osKernelInitialize+0x44>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d105      	bne.n	800c2c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c2ba:	4b08      	ldr	r3, [pc, #32]	; (800c2dc <osKernelInitialize+0x44>)
 800c2bc:	2201      	movs	r2, #1
 800c2be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	607b      	str	r3, [r7, #4]
 800c2c4:	e002      	b.n	800c2cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2cc:	687b      	ldr	r3, [r7, #4]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	200001a8 	.word	0x200001a8

0800c2e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2e6:	f3ef 8305 	mrs	r3, IPSR
 800c2ea:	603b      	str	r3, [r7, #0]
  return(result);
 800c2ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2f2:	f06f 0305 	mvn.w	r3, #5
 800c2f6:	607b      	str	r3, [r7, #4]
 800c2f8:	e010      	b.n	800c31c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c2fa:	4b0b      	ldr	r3, [pc, #44]	; (800c328 <osKernelStart+0x48>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d109      	bne.n	800c316 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c302:	f7ff ffbf 	bl	800c284 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c306:	4b08      	ldr	r3, [pc, #32]	; (800c328 <osKernelStart+0x48>)
 800c308:	2202      	movs	r2, #2
 800c30a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c30c:	f001 fc9e 	bl	800dc4c <vTaskStartScheduler>
      stat = osOK;
 800c310:	2300      	movs	r3, #0
 800c312:	607b      	str	r3, [r7, #4]
 800c314:	e002      	b.n	800c31c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c316:	f04f 33ff 	mov.w	r3, #4294967295
 800c31a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c31c:	687b      	ldr	r3, [r7, #4]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	200001a8 	.word	0x200001a8

0800c32c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08e      	sub	sp, #56	; 0x38
 800c330:	af04      	add	r7, sp, #16
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c33c:	f3ef 8305 	mrs	r3, IPSR
 800c340:	617b      	str	r3, [r7, #20]
  return(result);
 800c342:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c344:	2b00      	cmp	r3, #0
 800c346:	d17e      	bne.n	800c446 <osThreadNew+0x11a>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d07b      	beq.n	800c446 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c34e:	2380      	movs	r3, #128	; 0x80
 800c350:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c352:	2318      	movs	r3, #24
 800c354:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c356:	2300      	movs	r3, #0
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c35a:	f04f 33ff 	mov.w	r3, #4294967295
 800c35e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d045      	beq.n	800c3f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <osThreadNew+0x48>
        name = attr->name;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	699b      	ldr	r3, [r3, #24]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	699b      	ldr	r3, [r3, #24]
 800c380:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d008      	beq.n	800c39a <osThreadNew+0x6e>
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	2b38      	cmp	r3, #56	; 0x38
 800c38c:	d805      	bhi.n	800c39a <osThreadNew+0x6e>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <osThreadNew+0x72>
        return (NULL);
 800c39a:	2300      	movs	r3, #0
 800c39c:	e054      	b.n	800c448 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	089b      	lsrs	r3, r3, #2
 800c3ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00e      	beq.n	800c3d4 <osThreadNew+0xa8>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	2b5b      	cmp	r3, #91	; 0x5b
 800c3bc:	d90a      	bls.n	800c3d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d006      	beq.n	800c3d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	695b      	ldr	r3, [r3, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <osThreadNew+0xa8>
        mem = 1;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	61bb      	str	r3, [r7, #24]
 800c3d2:	e010      	b.n	800c3f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10c      	bne.n	800c3f6 <osThreadNew+0xca>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d108      	bne.n	800c3f6 <osThreadNew+0xca>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d104      	bne.n	800c3f6 <osThreadNew+0xca>
          mem = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	61bb      	str	r3, [r7, #24]
 800c3f0:	e001      	b.n	800c3f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d110      	bne.n	800c41e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c404:	9202      	str	r2, [sp, #8]
 800c406:	9301      	str	r3, [sp, #4]
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	6a3a      	ldr	r2, [r7, #32]
 800c410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f001 fa44 	bl	800d8a0 <xTaskCreateStatic>
 800c418:	4603      	mov	r3, r0
 800c41a:	613b      	str	r3, [r7, #16]
 800c41c:	e013      	b.n	800c446 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d110      	bne.n	800c446 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	b29a      	uxth	r2, r3
 800c428:	f107 0310 	add.w	r3, r7, #16
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f001 fa8f 	bl	800d95a <xTaskCreate>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d001      	beq.n	800c446 <osThreadNew+0x11a>
            hTask = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c446:	693b      	ldr	r3, [r7, #16]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3728      	adds	r7, #40	; 0x28
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c458:	f3ef 8305 	mrs	r3, IPSR
 800c45c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c45e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <osDelay+0x1c>
    stat = osErrorISR;
 800c464:	f06f 0305 	mvn.w	r3, #5
 800c468:	60fb      	str	r3, [r7, #12]
 800c46a:	e007      	b.n	800c47c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d002      	beq.n	800c47c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f001 fbb4 	bl	800dbe4 <vTaskDelay>
    }
  }

  return (stat);
 800c47c:	68fb      	ldr	r3, [r7, #12]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4a07      	ldr	r2, [pc, #28]	; (800c4b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	4a06      	ldr	r2, [pc, #24]	; (800c4b8 <vApplicationGetIdleTaskMemory+0x30>)
 800c49e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2280      	movs	r2, #128	; 0x80
 800c4a4:	601a      	str	r2, [r3, #0]
}
 800c4a6:	bf00      	nop
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	200001ac 	.word	0x200001ac
 800c4b8:	20000208 	.word	0x20000208

0800c4bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	4a07      	ldr	r2, [pc, #28]	; (800c4e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c4cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	4a06      	ldr	r2, [pc, #24]	; (800c4ec <vApplicationGetTimerTaskMemory+0x30>)
 800c4d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4da:	601a      	str	r2, [r3, #0]
}
 800c4dc:	bf00      	nop
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	20000408 	.word	0x20000408
 800c4ec:	20000464 	.word	0x20000464

0800c4f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	; 0x28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4fc:	f001 fc0c 	bl	800dd18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c500:	4b5b      	ldr	r3, [pc, #364]	; (800c670 <pvPortMalloc+0x180>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c508:	f000 f920 	bl	800c74c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c50c:	4b59      	ldr	r3, [pc, #356]	; (800c674 <pvPortMalloc+0x184>)
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4013      	ands	r3, r2
 800c514:	2b00      	cmp	r3, #0
 800c516:	f040 8093 	bne.w	800c640 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d01d      	beq.n	800c55c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c520:	2208      	movs	r2, #8
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4413      	add	r3, r2
 800c526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f003 0307 	and.w	r3, r3, #7
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d014      	beq.n	800c55c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f023 0307 	bic.w	r3, r3, #7
 800c538:	3308      	adds	r3, #8
 800c53a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f003 0307 	and.w	r3, r3, #7
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00a      	beq.n	800c55c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54a:	f383 8811 	msr	BASEPRI, r3
 800c54e:	f3bf 8f6f 	isb	sy
 800c552:	f3bf 8f4f 	dsb	sy
 800c556:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c558:	bf00      	nop
 800c55a:	e7fe      	b.n	800c55a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d06e      	beq.n	800c640 <pvPortMalloc+0x150>
 800c562:	4b45      	ldr	r3, [pc, #276]	; (800c678 <pvPortMalloc+0x188>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d869      	bhi.n	800c640 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c56c:	4b43      	ldr	r3, [pc, #268]	; (800c67c <pvPortMalloc+0x18c>)
 800c56e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c570:	4b42      	ldr	r3, [pc, #264]	; (800c67c <pvPortMalloc+0x18c>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c576:	e004      	b.n	800c582 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d903      	bls.n	800c594 <pvPortMalloc+0xa4>
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1f1      	bne.n	800c578 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c594:	4b36      	ldr	r3, [pc, #216]	; (800c670 <pvPortMalloc+0x180>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d050      	beq.n	800c640 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	4413      	add	r3, r2
 800c5a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	6a3b      	ldr	r3, [r7, #32]
 800c5ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	685a      	ldr	r2, [r3, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	1ad2      	subs	r2, r2, r3
 800c5b8:	2308      	movs	r3, #8
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d91f      	bls.n	800c600 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	f003 0307 	and.w	r3, r3, #7
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d00a      	beq.n	800c5e8 <pvPortMalloc+0xf8>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	613b      	str	r3, [r7, #16]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	1ad2      	subs	r2, r2, r3
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	687a      	ldr	r2, [r7, #4]
 800c5f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5fa:	69b8      	ldr	r0, [r7, #24]
 800c5fc:	f000 f908 	bl	800c810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c600:	4b1d      	ldr	r3, [pc, #116]	; (800c678 <pvPortMalloc+0x188>)
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	4a1b      	ldr	r2, [pc, #108]	; (800c678 <pvPortMalloc+0x188>)
 800c60c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c60e:	4b1a      	ldr	r3, [pc, #104]	; (800c678 <pvPortMalloc+0x188>)
 800c610:	681a      	ldr	r2, [r3, #0]
 800c612:	4b1b      	ldr	r3, [pc, #108]	; (800c680 <pvPortMalloc+0x190>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d203      	bcs.n	800c622 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c61a:	4b17      	ldr	r3, [pc, #92]	; (800c678 <pvPortMalloc+0x188>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a18      	ldr	r2, [pc, #96]	; (800c680 <pvPortMalloc+0x190>)
 800c620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	4b13      	ldr	r3, [pc, #76]	; (800c674 <pvPortMalloc+0x184>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	431a      	orrs	r2, r3
 800c62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	2200      	movs	r2, #0
 800c634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c636:	4b13      	ldr	r3, [pc, #76]	; (800c684 <pvPortMalloc+0x194>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3301      	adds	r3, #1
 800c63c:	4a11      	ldr	r2, [pc, #68]	; (800c684 <pvPortMalloc+0x194>)
 800c63e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c640:	f001 fb78 	bl	800dd34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	f003 0307 	and.w	r3, r3, #7
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00a      	beq.n	800c664 <pvPortMalloc+0x174>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	60fb      	str	r3, [r7, #12]
}
 800c660:	bf00      	nop
 800c662:	e7fe      	b.n	800c662 <pvPortMalloc+0x172>
	return pvReturn;
 800c664:	69fb      	ldr	r3, [r7, #28]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3728      	adds	r7, #40	; 0x28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	2000446c 	.word	0x2000446c
 800c674:	20004480 	.word	0x20004480
 800c678:	20004470 	.word	0x20004470
 800c67c:	20004464 	.word	0x20004464
 800c680:	20004474 	.word	0x20004474
 800c684:	20004478 	.word	0x20004478

0800c688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d04d      	beq.n	800c736 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c69a:	2308      	movs	r3, #8
 800c69c:	425b      	negs	r3, r3
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	4b24      	ldr	r3, [pc, #144]	; (800c740 <vPortFree+0xb8>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10a      	bne.n	800c6cc <vPortFree+0x44>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	60fb      	str	r3, [r7, #12]
}
 800c6c8:	bf00      	nop
 800c6ca:	e7fe      	b.n	800c6ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00a      	beq.n	800c6ea <vPortFree+0x62>
	__asm volatile
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	60bb      	str	r3, [r7, #8]
}
 800c6e6:	bf00      	nop
 800c6e8:	e7fe      	b.n	800c6e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	4b14      	ldr	r3, [pc, #80]	; (800c740 <vPortFree+0xb8>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d01e      	beq.n	800c736 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d11a      	bne.n	800c736 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	4b0e      	ldr	r3, [pc, #56]	; (800c740 <vPortFree+0xb8>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	43db      	mvns	r3, r3
 800c70a:	401a      	ands	r2, r3
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c710:	f001 fb02 	bl	800dd18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	4b0a      	ldr	r3, [pc, #40]	; (800c744 <vPortFree+0xbc>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4413      	add	r3, r2
 800c71e:	4a09      	ldr	r2, [pc, #36]	; (800c744 <vPortFree+0xbc>)
 800c720:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c722:	6938      	ldr	r0, [r7, #16]
 800c724:	f000 f874 	bl	800c810 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c728:	4b07      	ldr	r3, [pc, #28]	; (800c748 <vPortFree+0xc0>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3301      	adds	r3, #1
 800c72e:	4a06      	ldr	r2, [pc, #24]	; (800c748 <vPortFree+0xc0>)
 800c730:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c732:	f001 faff 	bl	800dd34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c736:	bf00      	nop
 800c738:	3718      	adds	r7, #24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20004480 	.word	0x20004480
 800c744:	20004470 	.word	0x20004470
 800c748:	2000447c 	.word	0x2000447c

0800c74c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c752:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c758:	4b27      	ldr	r3, [pc, #156]	; (800c7f8 <prvHeapInit+0xac>)
 800c75a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00c      	beq.n	800c780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3307      	adds	r3, #7
 800c76a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f023 0307 	bic.w	r3, r3, #7
 800c772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	4a1f      	ldr	r2, [pc, #124]	; (800c7f8 <prvHeapInit+0xac>)
 800c77c:	4413      	add	r3, r2
 800c77e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c784:	4a1d      	ldr	r2, [pc, #116]	; (800c7fc <prvHeapInit+0xb0>)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c78a:	4b1c      	ldr	r3, [pc, #112]	; (800c7fc <prvHeapInit+0xb0>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	4413      	add	r3, r2
 800c796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c798:	2208      	movs	r2, #8
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	1a9b      	subs	r3, r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0307 	bic.w	r3, r3, #7
 800c7a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4a15      	ldr	r2, [pc, #84]	; (800c800 <prvHeapInit+0xb4>)
 800c7ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7ae:	4b14      	ldr	r3, [pc, #80]	; (800c800 <prvHeapInit+0xb4>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7b6:	4b12      	ldr	r3, [pc, #72]	; (800c800 <prvHeapInit+0xb4>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	1ad2      	subs	r2, r2, r3
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7cc:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <prvHeapInit+0xb4>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	4a0a      	ldr	r2, [pc, #40]	; (800c804 <prvHeapInit+0xb8>)
 800c7da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	4a09      	ldr	r2, [pc, #36]	; (800c808 <prvHeapInit+0xbc>)
 800c7e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7e4:	4b09      	ldr	r3, [pc, #36]	; (800c80c <prvHeapInit+0xc0>)
 800c7e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7ea:	601a      	str	r2, [r3, #0]
}
 800c7ec:	bf00      	nop
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr
 800c7f8:	20000864 	.word	0x20000864
 800c7fc:	20004464 	.word	0x20004464
 800c800:	2000446c 	.word	0x2000446c
 800c804:	20004474 	.word	0x20004474
 800c808:	20004470 	.word	0x20004470
 800c80c:	20004480 	.word	0x20004480

0800c810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c818:	4b28      	ldr	r3, [pc, #160]	; (800c8bc <prvInsertBlockIntoFreeList+0xac>)
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	e002      	b.n	800c824 <prvInsertBlockIntoFreeList+0x14>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	60fb      	str	r3, [r7, #12]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d8f7      	bhi.n	800c81e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	4413      	add	r3, r2
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d108      	bne.n	800c852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	441a      	add	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d118      	bne.n	800c898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	4b15      	ldr	r3, [pc, #84]	; (800c8c0 <prvInsertBlockIntoFreeList+0xb0>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d00d      	beq.n	800c88e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	441a      	add	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	e008      	b.n	800c8a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c88e:	4b0c      	ldr	r3, [pc, #48]	; (800c8c0 <prvInsertBlockIntoFreeList+0xb0>)
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	e003      	b.n	800c8a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d002      	beq.n	800c8ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8ae:	bf00      	nop
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	20004464 	.word	0x20004464
 800c8c0:	2000446c 	.word	0x2000446c

0800c8c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f103 0208 	add.w	r2, r3, #8
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f103 0208 	add.w	r2, r3, #8
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f103 0208 	add.w	r2, r3, #8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c912:	bf00      	nop
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	689a      	ldr	r2, [r3, #8]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	683a      	ldr	r2, [r7, #0]
 800c942:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	683a      	ldr	r2, [r7, #0]
 800c948:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	601a      	str	r2, [r3, #0]
}
 800c95a:	bf00      	nop
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c966:	b480      	push	{r7}
 800c968:	b085      	sub	sp, #20
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97c:	d103      	bne.n	800c986 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	e00c      	b.n	800c9a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3308      	adds	r3, #8
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	e002      	b.n	800c994 <vListInsert+0x2e>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d2f6      	bcs.n	800c98e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	685a      	ldr	r2, [r3, #4]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	601a      	str	r2, [r3, #0]
}
 800c9cc:	bf00      	nop
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	6892      	ldr	r2, [r2, #8]
 800c9ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	6852      	ldr	r2, [r2, #4]
 800c9f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d103      	bne.n	800ca0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689a      	ldr	r2, [r3, #8]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	1e5a      	subs	r2, r3, #1
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3714      	adds	r7, #20
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3b04      	subs	r3, #4
 800ca3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	3b04      	subs	r3, #4
 800ca4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	f023 0201 	bic.w	r2, r3, #1
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3b04      	subs	r3, #4
 800ca5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca5c:	4a0c      	ldr	r2, [pc, #48]	; (800ca90 <pxPortInitialiseStack+0x64>)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3b14      	subs	r3, #20
 800ca66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	3b04      	subs	r3, #4
 800ca72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f06f 0202 	mvn.w	r2, #2
 800ca7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3b20      	subs	r3, #32
 800ca80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca82:	68fb      	ldr	r3, [r7, #12]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	0800ca95 	.word	0x0800ca95

0800ca94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca9e:	4b12      	ldr	r3, [pc, #72]	; (800cae8 <prvTaskExitError+0x54>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa6:	d00a      	beq.n	800cabe <prvTaskExitError+0x2a>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	60fb      	str	r3, [r7, #12]
}
 800caba:	bf00      	nop
 800cabc:	e7fe      	b.n	800cabc <prvTaskExitError+0x28>
	__asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	60bb      	str	r3, [r7, #8]
}
 800cad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cad2:	bf00      	nop
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0fc      	beq.n	800cad4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cada:	bf00      	nop
 800cadc:	bf00      	nop
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	20000120 	.word	0x20000120
 800caec:	00000000 	.word	0x00000000

0800caf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <pxCurrentTCBConst2>)
 800caf2:	6819      	ldr	r1, [r3, #0]
 800caf4:	6808      	ldr	r0, [r1, #0]
 800caf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafa:	f380 8809 	msr	PSP, r0
 800cafe:	f3bf 8f6f 	isb	sy
 800cb02:	f04f 0000 	mov.w	r0, #0
 800cb06:	f380 8811 	msr	BASEPRI, r0
 800cb0a:	4770      	bx	lr
 800cb0c:	f3af 8000 	nop.w

0800cb10 <pxCurrentTCBConst2>:
 800cb10:	2000448c 	.word	0x2000448c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop

0800cb18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb18:	4808      	ldr	r0, [pc, #32]	; (800cb3c <prvPortStartFirstTask+0x24>)
 800cb1a:	6800      	ldr	r0, [r0, #0]
 800cb1c:	6800      	ldr	r0, [r0, #0]
 800cb1e:	f380 8808 	msr	MSP, r0
 800cb22:	f04f 0000 	mov.w	r0, #0
 800cb26:	f380 8814 	msr	CONTROL, r0
 800cb2a:	b662      	cpsie	i
 800cb2c:	b661      	cpsie	f
 800cb2e:	f3bf 8f4f 	dsb	sy
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	df00      	svc	0
 800cb38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb3a:	bf00      	nop
 800cb3c:	e000ed08 	.word	0xe000ed08

0800cb40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb46:	4b46      	ldr	r3, [pc, #280]	; (800cc60 <xPortStartScheduler+0x120>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a46      	ldr	r2, [pc, #280]	; (800cc64 <xPortStartScheduler+0x124>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d10a      	bne.n	800cb66 <xPortStartScheduler+0x26>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	613b      	str	r3, [r7, #16]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb66:	4b3e      	ldr	r3, [pc, #248]	; (800cc60 <xPortStartScheduler+0x120>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4a3f      	ldr	r2, [pc, #252]	; (800cc68 <xPortStartScheduler+0x128>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d10a      	bne.n	800cb86 <xPortStartScheduler+0x46>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60fb      	str	r3, [r7, #12]
}
 800cb82:	bf00      	nop
 800cb84:	e7fe      	b.n	800cb84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb86:	4b39      	ldr	r3, [pc, #228]	; (800cc6c <xPortStartScheduler+0x12c>)
 800cb88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	22ff      	movs	r2, #255	; 0xff
 800cb96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cba0:	78fb      	ldrb	r3, [r7, #3]
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	4b31      	ldr	r3, [pc, #196]	; (800cc70 <xPortStartScheduler+0x130>)
 800cbac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbae:	4b31      	ldr	r3, [pc, #196]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbb0:	2207      	movs	r2, #7
 800cbb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbb4:	e009      	b.n	800cbca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbb6:	4b2f      	ldr	r3, [pc, #188]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	4a2d      	ldr	r2, [pc, #180]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbca:	78fb      	ldrb	r3, [r7, #3]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd2:	2b80      	cmp	r3, #128	; 0x80
 800cbd4:	d0ef      	beq.n	800cbb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbd6:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f1c3 0307 	rsb	r3, r3, #7
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d00a      	beq.n	800cbf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	f383 8811 	msr	BASEPRI, r3
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	60bb      	str	r3, [r7, #8]
}
 800cbf4:	bf00      	nop
 800cbf6:	e7fe      	b.n	800cbf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbf8:	4b1e      	ldr	r3, [pc, #120]	; (800cc74 <xPortStartScheduler+0x134>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	021b      	lsls	r3, r3, #8
 800cbfe:	4a1d      	ldr	r2, [pc, #116]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc02:	4b1c      	ldr	r3, [pc, #112]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc0a:	4a1a      	ldr	r2, [pc, #104]	; (800cc74 <xPortStartScheduler+0x134>)
 800cc0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc16:	4b18      	ldr	r3, [pc, #96]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a14      	ldr	r2, [pc, #80]	; (800cc78 <xPortStartScheduler+0x138>)
 800cc28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc2e:	f000 f8dd 	bl	800cdec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc32:	4b12      	ldr	r3, [pc, #72]	; (800cc7c <xPortStartScheduler+0x13c>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc38:	f000 f8fc 	bl	800ce34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc3c:	4b10      	ldr	r3, [pc, #64]	; (800cc80 <xPortStartScheduler+0x140>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a0f      	ldr	r2, [pc, #60]	; (800cc80 <xPortStartScheduler+0x140>)
 800cc42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc48:	f7ff ff66 	bl	800cb18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc4c:	f001 f9da 	bl	800e004 <vTaskSwitchContext>
	prvTaskExitError();
 800cc50:	f7ff ff20 	bl	800ca94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	e000ed00 	.word	0xe000ed00
 800cc64:	410fc271 	.word	0x410fc271
 800cc68:	410fc270 	.word	0x410fc270
 800cc6c:	e000e400 	.word	0xe000e400
 800cc70:	20004484 	.word	0x20004484
 800cc74:	20004488 	.word	0x20004488
 800cc78:	e000ed20 	.word	0xe000ed20
 800cc7c:	20000120 	.word	0x20000120
 800cc80:	e000ef34 	.word	0xe000ef34

0800cc84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	f383 8811 	msr	BASEPRI, r3
 800cc92:	f3bf 8f6f 	isb	sy
 800cc96:	f3bf 8f4f 	dsb	sy
 800cc9a:	607b      	str	r3, [r7, #4]
}
 800cc9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	; (800ccdc <vPortEnterCritical+0x58>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	3301      	adds	r3, #1
 800cca4:	4a0d      	ldr	r2, [pc, #52]	; (800ccdc <vPortEnterCritical+0x58>)
 800cca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cca8:	4b0c      	ldr	r3, [pc, #48]	; (800ccdc <vPortEnterCritical+0x58>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d10f      	bne.n	800ccd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccb0:	4b0b      	ldr	r3, [pc, #44]	; (800cce0 <vPortEnterCritical+0x5c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	603b      	str	r3, [r7, #0]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <vPortEnterCritical+0x4a>
	}
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	20000120 	.word	0x20000120
 800cce0:	e000ed04 	.word	0xe000ed04

0800cce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccea:	4b12      	ldr	r3, [pc, #72]	; (800cd34 <vPortExitCritical+0x50>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <vPortExitCritical+0x24>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	607b      	str	r3, [r7, #4]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd08:	4b0a      	ldr	r3, [pc, #40]	; (800cd34 <vPortExitCritical+0x50>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	4a09      	ldr	r2, [pc, #36]	; (800cd34 <vPortExitCritical+0x50>)
 800cd10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd12:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <vPortExitCritical+0x50>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <vPortExitCritical+0x42>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd26:	bf00      	nop
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr
 800cd32:	bf00      	nop
 800cd34:	20000120 	.word	0x20000120
	...

0800cd40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd40:	f3ef 8009 	mrs	r0, PSP
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	4b15      	ldr	r3, [pc, #84]	; (800cda0 <pxCurrentTCBConst>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	f01e 0f10 	tst.w	lr, #16
 800cd50:	bf08      	it	eq
 800cd52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	6010      	str	r0, [r2, #0]
 800cd5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd64:	f380 8811 	msr	BASEPRI, r0
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f001 f948 	bl	800e004 <vTaskSwitchContext>
 800cd74:	f04f 0000 	mov.w	r0, #0
 800cd78:	f380 8811 	msr	BASEPRI, r0
 800cd7c:	bc09      	pop	{r0, r3}
 800cd7e:	6819      	ldr	r1, [r3, #0]
 800cd80:	6808      	ldr	r0, [r1, #0]
 800cd82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd86:	f01e 0f10 	tst.w	lr, #16
 800cd8a:	bf08      	it	eq
 800cd8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd90:	f380 8809 	msr	PSP, r0
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	f3af 8000 	nop.w

0800cda0 <pxCurrentTCBConst>:
 800cda0:	2000448c 	.word	0x2000448c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop

0800cda8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	607b      	str	r3, [r7, #4]
}
 800cdc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cdc2:	f001 f865 	bl	800de90 <xTaskIncrementTick>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cdcc:	4b06      	ldr	r3, [pc, #24]	; (800cde8 <xPortSysTickHandler+0x40>)
 800cdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	f383 8811 	msr	BASEPRI, r3
}
 800cdde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	e000ed04 	.word	0xe000ed04

0800cdec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdec:	b480      	push	{r7}
 800cdee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdf0:	4b0b      	ldr	r3, [pc, #44]	; (800ce20 <vPortSetupTimerInterrupt+0x34>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdf6:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <vPortSetupTimerInterrupt+0x38>)
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <vPortSetupTimerInterrupt+0x3c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a0a      	ldr	r2, [pc, #40]	; (800ce2c <vPortSetupTimerInterrupt+0x40>)
 800ce02:	fba2 2303 	umull	r2, r3, r2, r3
 800ce06:	099b      	lsrs	r3, r3, #6
 800ce08:	4a09      	ldr	r2, [pc, #36]	; (800ce30 <vPortSetupTimerInterrupt+0x44>)
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce0e:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <vPortSetupTimerInterrupt+0x34>)
 800ce10:	2207      	movs	r2, #7
 800ce12:	601a      	str	r2, [r3, #0]
}
 800ce14:	bf00      	nop
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	e000e010 	.word	0xe000e010
 800ce24:	e000e018 	.word	0xe000e018
 800ce28:	20000000 	.word	0x20000000
 800ce2c:	10624dd3 	.word	0x10624dd3
 800ce30:	e000e014 	.word	0xe000e014

0800ce34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce44 <vPortEnableVFP+0x10>
 800ce38:	6801      	ldr	r1, [r0, #0]
 800ce3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce3e:	6001      	str	r1, [r0, #0]
 800ce40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce42:	bf00      	nop
 800ce44:	e000ed88 	.word	0xe000ed88

0800ce48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce4e:	f3ef 8305 	mrs	r3, IPSR
 800ce52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b0f      	cmp	r3, #15
 800ce58:	d914      	bls.n	800ce84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce5a:	4a17      	ldr	r2, [pc, #92]	; (800ceb8 <vPortValidateInterruptPriority+0x70>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce64:	4b15      	ldr	r3, [pc, #84]	; (800cebc <vPortValidateInterruptPriority+0x74>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	7afa      	ldrb	r2, [r7, #11]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d20a      	bcs.n	800ce84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce84:	4b0e      	ldr	r3, [pc, #56]	; (800cec0 <vPortValidateInterruptPriority+0x78>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce8c:	4b0d      	ldr	r3, [pc, #52]	; (800cec4 <vPortValidateInterruptPriority+0x7c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d90a      	bls.n	800ceaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	603b      	str	r3, [r7, #0]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <vPortValidateInterruptPriority+0x60>
	}
 800ceaa:	bf00      	nop
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	e000e3f0 	.word	0xe000e3f0
 800cebc:	20004484 	.word	0x20004484
 800cec0:	e000ed0c 	.word	0xe000ed0c
 800cec4:	20004488 	.word	0x20004488

0800cec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10a      	bne.n	800cef2 <xQueueGenericReset+0x2a>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	60bb      	str	r3, [r7, #8]
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cef2:	f7ff fec7 	bl	800cc84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cefe:	68f9      	ldr	r1, [r7, #12]
 800cf00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf02:	fb01 f303 	mul.w	r3, r1, r3
 800cf06:	441a      	add	r2, r3
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf22:	3b01      	subs	r3, #1
 800cf24:	68f9      	ldr	r1, [r7, #12]
 800cf26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf28:	fb01 f303 	mul.w	r3, r1, r3
 800cf2c:	441a      	add	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	22ff      	movs	r2, #255	; 0xff
 800cf36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	22ff      	movs	r2, #255	; 0xff
 800cf3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d114      	bne.n	800cf72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d01a      	beq.n	800cf86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	3310      	adds	r3, #16
 800cf54:	4618      	mov	r0, r3
 800cf56:	f001 f903 	bl	800e160 <xTaskRemoveFromEventList>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d012      	beq.n	800cf86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf60:	4b0c      	ldr	r3, [pc, #48]	; (800cf94 <xQueueGenericReset+0xcc>)
 800cf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	f3bf 8f4f 	dsb	sy
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	e009      	b.n	800cf86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	3310      	adds	r3, #16
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff fca4 	bl	800c8c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	3324      	adds	r3, #36	; 0x24
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7ff fc9f 	bl	800c8c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf86:	f7ff fead 	bl	800cce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf8a:	2301      	movs	r3, #1
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	e000ed04 	.word	0xe000ed04

0800cf98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08e      	sub	sp, #56	; 0x38
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10a      	bne.n	800cfc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfbe:	bf00      	nop
 800cfc0:	e7fe      	b.n	800cfc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10a      	bne.n	800cfde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <xQueueGenericCreateStatic+0x52>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <xQueueGenericCreateStatic+0x56>
 800cfea:	2301      	movs	r3, #1
 800cfec:	e000      	b.n	800cff0 <xQueueGenericCreateStatic+0x58>
 800cfee:	2300      	movs	r3, #0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10a      	bne.n	800d00a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	623b      	str	r3, [r7, #32]
}
 800d006:	bf00      	nop
 800d008:	e7fe      	b.n	800d008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <xQueueGenericCreateStatic+0x7e>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <xQueueGenericCreateStatic+0x82>
 800d016:	2301      	movs	r3, #1
 800d018:	e000      	b.n	800d01c <xQueueGenericCreateStatic+0x84>
 800d01a:	2300      	movs	r3, #0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10a      	bne.n	800d036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	61fb      	str	r3, [r7, #28]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d036:	2350      	movs	r3, #80	; 0x50
 800d038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2b50      	cmp	r3, #80	; 0x50
 800d03e:	d00a      	beq.n	800d056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	61bb      	str	r3, [r7, #24]
}
 800d052:	bf00      	nop
 800d054:	e7fe      	b.n	800d054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00d      	beq.n	800d07e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	2201      	movs	r2, #1
 800d066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d06a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	4613      	mov	r3, r2
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 f805 	bl	800d088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d080:	4618      	mov	r0, r3
 800d082:	3730      	adds	r7, #48	; 0x30
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d103      	bne.n	800d0a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	e002      	b.n	800d0aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	69b8      	ldr	r0, [r7, #24]
 800d0ba:	f7ff ff05 	bl	800cec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	78fa      	ldrb	r2, [r7, #3]
 800d0c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0c6:	bf00      	nop
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
	...

0800d0d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08e      	sub	sp, #56	; 0x38
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
 800d0dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xQueueGenericSend+0x32>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d103      	bne.n	800d110 <xQueueGenericSend+0x40>
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <xQueueGenericSend+0x44>
 800d110:	2301      	movs	r3, #1
 800d112:	e000      	b.n	800d116 <xQueueGenericSend+0x46>
 800d114:	2300      	movs	r3, #0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d10a      	bne.n	800d130 <xQueueGenericSend+0x60>
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d103      	bne.n	800d13e <xQueueGenericSend+0x6e>
 800d136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13a:	2b01      	cmp	r3, #1
 800d13c:	d101      	bne.n	800d142 <xQueueGenericSend+0x72>
 800d13e:	2301      	movs	r3, #1
 800d140:	e000      	b.n	800d144 <xQueueGenericSend+0x74>
 800d142:	2300      	movs	r3, #0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10a      	bne.n	800d15e <xQueueGenericSend+0x8e>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	623b      	str	r3, [r7, #32]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d15e:	f001 f9bd 	bl	800e4dc <xTaskGetSchedulerState>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d102      	bne.n	800d16e <xQueueGenericSend+0x9e>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <xQueueGenericSend+0xa2>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <xQueueGenericSend+0xa4>
 800d172:	2300      	movs	r3, #0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10a      	bne.n	800d18e <xQueueGenericSend+0xbe>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	61fb      	str	r3, [r7, #28]
}
 800d18a:	bf00      	nop
 800d18c:	e7fe      	b.n	800d18c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d18e:	f7ff fd79 	bl	800cc84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d302      	bcc.n	800d1a4 <xQueueGenericSend+0xd4>
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d129      	bne.n	800d1f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	68b9      	ldr	r1, [r7, #8]
 800d1a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1aa:	f000 fa0b 	bl	800d5c4 <prvCopyDataToQueue>
 800d1ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d010      	beq.n	800d1da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ba:	3324      	adds	r3, #36	; 0x24
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f000 ffcf 	bl	800e160 <xTaskRemoveFromEventList>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d013      	beq.n	800d1f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1c8:	4b3f      	ldr	r3, [pc, #252]	; (800d2c8 <xQueueGenericSend+0x1f8>)
 800d1ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ce:	601a      	str	r2, [r3, #0]
 800d1d0:	f3bf 8f4f 	dsb	sy
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	e00a      	b.n	800d1f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1e0:	4b39      	ldr	r3, [pc, #228]	; (800d2c8 <xQueueGenericSend+0x1f8>)
 800d1e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1e6:	601a      	str	r2, [r3, #0]
 800d1e8:	f3bf 8f4f 	dsb	sy
 800d1ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1f0:	f7ff fd78 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	e063      	b.n	800d2c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d103      	bne.n	800d206 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1fe:	f7ff fd71 	bl	800cce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d202:	2300      	movs	r3, #0
 800d204:	e05c      	b.n	800d2c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d106      	bne.n	800d21a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d20c:	f107 0314 	add.w	r3, r7, #20
 800d210:	4618      	mov	r0, r3
 800d212:	f001 f809 	bl	800e228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d216:	2301      	movs	r3, #1
 800d218:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d21a:	f7ff fd63 	bl	800cce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d21e:	f000 fd7b 	bl	800dd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d222:	f7ff fd2f 	bl	800cc84 <vPortEnterCritical>
 800d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d22c:	b25b      	sxtb	r3, r3
 800d22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d232:	d103      	bne.n	800d23c <xQueueGenericSend+0x16c>
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	2200      	movs	r2, #0
 800d238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d242:	b25b      	sxtb	r3, r3
 800d244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d248:	d103      	bne.n	800d252 <xQueueGenericSend+0x182>
 800d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d252:	f7ff fd47 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d256:	1d3a      	adds	r2, r7, #4
 800d258:	f107 0314 	add.w	r3, r7, #20
 800d25c:	4611      	mov	r1, r2
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 fff8 	bl	800e254 <xTaskCheckForTimeOut>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d124      	bne.n	800d2b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d26a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d26c:	f000 faa2 	bl	800d7b4 <prvIsQueueFull>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d018      	beq.n	800d2a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	3310      	adds	r3, #16
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 ff1e 	bl	800e0c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d286:	f000 fa2d 	bl	800d6e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d28a:	f000 fd53 	bl	800dd34 <xTaskResumeAll>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	f47f af7c 	bne.w	800d18e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d296:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <xQueueGenericSend+0x1f8>)
 800d298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	e772      	b.n	800d18e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2aa:	f000 fa1b 	bl	800d6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ae:	f000 fd41 	bl	800dd34 <xTaskResumeAll>
 800d2b2:	e76c      	b.n	800d18e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2b6:	f000 fa15 	bl	800d6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2ba:	f000 fd3b 	bl	800dd34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3738      	adds	r7, #56	; 0x38
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	e000ed04 	.word	0xe000ed04

0800d2cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b090      	sub	sp, #64	; 0x40
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
 800d2d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10a      	bne.n	800d2fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e8:	f383 8811 	msr	BASEPRI, r3
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2f6:	bf00      	nop
 800d2f8:	e7fe      	b.n	800d2f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d103      	bne.n	800d308 <xQueueGenericSendFromISR+0x3c>
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <xQueueGenericSendFromISR+0x40>
 800d308:	2301      	movs	r3, #1
 800d30a:	e000      	b.n	800d30e <xQueueGenericSendFromISR+0x42>
 800d30c:	2300      	movs	r3, #0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10a      	bne.n	800d328 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d324:	bf00      	nop
 800d326:	e7fe      	b.n	800d326 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	2b02      	cmp	r3, #2
 800d32c:	d103      	bne.n	800d336 <xQueueGenericSendFromISR+0x6a>
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d332:	2b01      	cmp	r3, #1
 800d334:	d101      	bne.n	800d33a <xQueueGenericSendFromISR+0x6e>
 800d336:	2301      	movs	r3, #1
 800d338:	e000      	b.n	800d33c <xQueueGenericSendFromISR+0x70>
 800d33a:	2300      	movs	r3, #0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10a      	bne.n	800d356 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	f383 8811 	msr	BASEPRI, r3
 800d348:	f3bf 8f6f 	isb	sy
 800d34c:	f3bf 8f4f 	dsb	sy
 800d350:	623b      	str	r3, [r7, #32]
}
 800d352:	bf00      	nop
 800d354:	e7fe      	b.n	800d354 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d356:	f7ff fd77 	bl	800ce48 <vPortValidateInterruptPriority>
	__asm volatile
 800d35a:	f3ef 8211 	mrs	r2, BASEPRI
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	61fa      	str	r2, [r7, #28]
 800d370:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d372:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d374:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d37e:	429a      	cmp	r2, r3
 800d380:	d302      	bcc.n	800d388 <xQueueGenericSendFromISR+0xbc>
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	2b02      	cmp	r3, #2
 800d386:	d12f      	bne.n	800d3e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d398:	683a      	ldr	r2, [r7, #0]
 800d39a:	68b9      	ldr	r1, [r7, #8]
 800d39c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d39e:	f000 f911 	bl	800d5c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3aa:	d112      	bne.n	800d3d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d016      	beq.n	800d3e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b6:	3324      	adds	r3, #36	; 0x24
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f000 fed1 	bl	800e160 <xTaskRemoveFromEventList>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00e      	beq.n	800d3e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00b      	beq.n	800d3e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	601a      	str	r2, [r3, #0]
 800d3d0:	e007      	b.n	800d3e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	b25a      	sxtb	r2, r3
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d3e6:	e001      	b.n	800d3ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ee:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	f383 8811 	msr	BASEPRI, r3
}
 800d3f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3740      	adds	r7, #64	; 0x40
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
	...

0800d404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08c      	sub	sp, #48	; 0x30
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d410:	2300      	movs	r3, #0
 800d412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10a      	bne.n	800d434 <xQueueReceive+0x30>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	623b      	str	r3, [r7, #32]
}
 800d430:	bf00      	nop
 800d432:	e7fe      	b.n	800d432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d103      	bne.n	800d442 <xQueueReceive+0x3e>
 800d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <xQueueReceive+0x42>
 800d442:	2301      	movs	r3, #1
 800d444:	e000      	b.n	800d448 <xQueueReceive+0x44>
 800d446:	2300      	movs	r3, #0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <xQueueReceive+0x5e>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	61fb      	str	r3, [r7, #28]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d462:	f001 f83b 	bl	800e4dc <xTaskGetSchedulerState>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d102      	bne.n	800d472 <xQueueReceive+0x6e>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <xQueueReceive+0x72>
 800d472:	2301      	movs	r3, #1
 800d474:	e000      	b.n	800d478 <xQueueReceive+0x74>
 800d476:	2300      	movs	r3, #0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <xQueueReceive+0x8e>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	61bb      	str	r3, [r7, #24]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d492:	f7ff fbf7 	bl	800cc84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d49a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d01f      	beq.n	800d4e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d4a6:	f000 f8f7 	bl	800d698 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	1e5a      	subs	r2, r3, #1
 800d4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00f      	beq.n	800d4da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	3310      	adds	r3, #16
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 fe4e 	bl	800e160 <xTaskRemoveFromEventList>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d007      	beq.n	800d4da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4ca:	4b3d      	ldr	r3, [pc, #244]	; (800d5c0 <xQueueReceive+0x1bc>)
 800d4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4da:	f7ff fc03 	bl	800cce4 <vPortExitCritical>
				return pdPASS;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e069      	b.n	800d5b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d103      	bne.n	800d4f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4e8:	f7ff fbfc 	bl	800cce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e062      	b.n	800d5b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d106      	bne.n	800d504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4f6:	f107 0310 	add.w	r3, r7, #16
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 fe94 	bl	800e228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d500:	2301      	movs	r3, #1
 800d502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d504:	f7ff fbee 	bl	800cce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d508:	f000 fc06 	bl	800dd18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d50c:	f7ff fbba 	bl	800cc84 <vPortEnterCritical>
 800d510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d516:	b25b      	sxtb	r3, r3
 800d518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51c:	d103      	bne.n	800d526 <xQueueReceive+0x122>
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	2200      	movs	r2, #0
 800d522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d52c:	b25b      	sxtb	r3, r3
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d532:	d103      	bne.n	800d53c <xQueueReceive+0x138>
 800d534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d536:	2200      	movs	r2, #0
 800d538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d53c:	f7ff fbd2 	bl	800cce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d540:	1d3a      	adds	r2, r7, #4
 800d542:	f107 0310 	add.w	r3, r7, #16
 800d546:	4611      	mov	r1, r2
 800d548:	4618      	mov	r0, r3
 800d54a:	f000 fe83 	bl	800e254 <xTaskCheckForTimeOut>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d123      	bne.n	800d59c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d556:	f000 f917 	bl	800d788 <prvIsQueueEmpty>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d017      	beq.n	800d590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	3324      	adds	r3, #36	; 0x24
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	4611      	mov	r1, r2
 800d568:	4618      	mov	r0, r3
 800d56a:	f000 fda9 	bl	800e0c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d56e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d570:	f000 f8b8 	bl	800d6e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d574:	f000 fbde 	bl	800dd34 <xTaskResumeAll>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d189      	bne.n	800d492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d57e:	4b10      	ldr	r3, [pc, #64]	; (800d5c0 <xQueueReceive+0x1bc>)
 800d580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	e780      	b.n	800d492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d592:	f000 f8a7 	bl	800d6e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d596:	f000 fbcd 	bl	800dd34 <xTaskResumeAll>
 800d59a:	e77a      	b.n	800d492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d59e:	f000 f8a1 	bl	800d6e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5a2:	f000 fbc7 	bl	800dd34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5a8:	f000 f8ee 	bl	800d788 <prvIsQueueEmpty>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f43f af6f 	beq.w	800d492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d5b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3730      	adds	r7, #48	; 0x30
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	e000ed04 	.word	0xe000ed04

0800d5c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10d      	bne.n	800d5fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d14d      	bne.n	800d686 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 ff92 	bl	800e518 <xTaskPriorityDisinherit>
 800d5f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	609a      	str	r2, [r3, #8]
 800d5fc:	e043      	b.n	800d686 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d119      	bne.n	800d638 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	6858      	ldr	r0, [r3, #4]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60c:	461a      	mov	r2, r3
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	f002 f8b0 	bl	800f774 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	685a      	ldr	r2, [r3, #4]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61c:	441a      	add	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	685a      	ldr	r2, [r3, #4]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d32b      	bcc.n	800d686 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681a      	ldr	r2, [r3, #0]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	605a      	str	r2, [r3, #4]
 800d636:	e026      	b.n	800d686 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	68d8      	ldr	r0, [r3, #12]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d640:	461a      	mov	r2, r3
 800d642:	68b9      	ldr	r1, [r7, #8]
 800d644:	f002 f896 	bl	800f774 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	68da      	ldr	r2, [r3, #12]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d650:	425b      	negs	r3, r3
 800d652:	441a      	add	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	68da      	ldr	r2, [r3, #12]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d207      	bcs.n	800d674 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66c:	425b      	negs	r3, r3
 800d66e:	441a      	add	r2, r3
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b02      	cmp	r3, #2
 800d678:	d105      	bne.n	800d686 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	3b01      	subs	r3, #1
 800d684:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	1c5a      	adds	r2, r3, #1
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d68e:	697b      	ldr	r3, [r7, #20]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3718      	adds	r7, #24
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d018      	beq.n	800d6dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68da      	ldr	r2, [r3, #12]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	441a      	add	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	68da      	ldr	r2, [r3, #12]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d303      	bcc.n	800d6cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	68d9      	ldr	r1, [r3, #12]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	6838      	ldr	r0, [r7, #0]
 800d6d8:	f002 f84c 	bl	800f774 <memcpy>
	}
}
 800d6dc:	bf00      	nop
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d6ec:	f7ff faca 	bl	800cc84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6f8:	e011      	b.n	800d71e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d012      	beq.n	800d728 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	3324      	adds	r3, #36	; 0x24
 800d706:	4618      	mov	r0, r3
 800d708:	f000 fd2a 	bl	800e160 <xTaskRemoveFromEventList>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d712:	f000 fe01 	bl	800e318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	3b01      	subs	r3, #1
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d722:	2b00      	cmp	r3, #0
 800d724:	dce9      	bgt.n	800d6fa <prvUnlockQueue+0x16>
 800d726:	e000      	b.n	800d72a <prvUnlockQueue+0x46>
					break;
 800d728:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	22ff      	movs	r2, #255	; 0xff
 800d72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d732:	f7ff fad7 	bl	800cce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d736:	f7ff faa5 	bl	800cc84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d740:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d742:	e011      	b.n	800d768 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d012      	beq.n	800d772 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3310      	adds	r3, #16
 800d750:	4618      	mov	r0, r3
 800d752:	f000 fd05 	bl	800e160 <xTaskRemoveFromEventList>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d75c:	f000 fddc 	bl	800e318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d760:	7bbb      	ldrb	r3, [r7, #14]
 800d762:	3b01      	subs	r3, #1
 800d764:	b2db      	uxtb	r3, r3
 800d766:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d768:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	dce9      	bgt.n	800d744 <prvUnlockQueue+0x60>
 800d770:	e000      	b.n	800d774 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d772:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	22ff      	movs	r2, #255	; 0xff
 800d778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d77c:	f7ff fab2 	bl	800cce4 <vPortExitCritical>
}
 800d780:	bf00      	nop
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d790:	f7ff fa78 	bl	800cc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d102      	bne.n	800d7a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d79c:	2301      	movs	r3, #1
 800d79e:	60fb      	str	r3, [r7, #12]
 800d7a0:	e001      	b.n	800d7a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7a6:	f7ff fa9d 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7bc:	f7ff fa62 	bl	800cc84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d102      	bne.n	800d7d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	60fb      	str	r3, [r7, #12]
 800d7d0:	e001      	b.n	800d7d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7d6:	f7ff fa85 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800d7da:	68fb      	ldr	r3, [r7, #12]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3710      	adds	r7, #16
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	60fb      	str	r3, [r7, #12]
 800d7f2:	e014      	b.n	800d81e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d7f4:	4a0f      	ldr	r2, [pc, #60]	; (800d834 <vQueueAddToRegistry+0x50>)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10b      	bne.n	800d818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d800:	490c      	ldr	r1, [pc, #48]	; (800d834 <vQueueAddToRegistry+0x50>)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	683a      	ldr	r2, [r7, #0]
 800d806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d80a:	4a0a      	ldr	r2, [pc, #40]	; (800d834 <vQueueAddToRegistry+0x50>)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	4413      	add	r3, r2
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d816:	e006      	b.n	800d826 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	3301      	adds	r3, #1
 800d81c:	60fb      	str	r3, [r7, #12]
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b07      	cmp	r3, #7
 800d822:	d9e7      	bls.n	800d7f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	20004eac 	.word	0x20004eac

0800d838 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b086      	sub	sp, #24
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d848:	f7ff fa1c 	bl	800cc84 <vPortEnterCritical>
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d852:	b25b      	sxtb	r3, r3
 800d854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d858:	d103      	bne.n	800d862 <vQueueWaitForMessageRestricted+0x2a>
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d868:	b25b      	sxtb	r3, r3
 800d86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d86e:	d103      	bne.n	800d878 <vQueueWaitForMessageRestricted+0x40>
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2200      	movs	r2, #0
 800d874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d878:	f7ff fa34 	bl	800cce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d880:	2b00      	cmp	r3, #0
 800d882:	d106      	bne.n	800d892 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	3324      	adds	r3, #36	; 0x24
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	68b9      	ldr	r1, [r7, #8]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f000 fc3b 	bl	800e108 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d892:	6978      	ldr	r0, [r7, #20]
 800d894:	f7ff ff26 	bl	800d6e4 <prvUnlockQueue>
	}
 800d898:	bf00      	nop
 800d89a:	3718      	adds	r7, #24
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b08e      	sub	sp, #56	; 0x38
 800d8a4:	af04      	add	r7, sp, #16
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
 800d8ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10a      	bne.n	800d8ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	623b      	str	r3, [r7, #32]
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d10a      	bne.n	800d8e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d4:	f383 8811 	msr	BASEPRI, r3
 800d8d8:	f3bf 8f6f 	isb	sy
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	61fb      	str	r3, [r7, #28]
}
 800d8e2:	bf00      	nop
 800d8e4:	e7fe      	b.n	800d8e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8e6:	235c      	movs	r3, #92	; 0x5c
 800d8e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	2b5c      	cmp	r3, #92	; 0x5c
 800d8ee:	d00a      	beq.n	800d906 <xTaskCreateStatic+0x66>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	61bb      	str	r3, [r7, #24]
}
 800d902:	bf00      	nop
 800d904:	e7fe      	b.n	800d904 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d906:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d01e      	beq.n	800d94c <xTaskCreateStatic+0xac>
 800d90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d910:	2b00      	cmp	r3, #0
 800d912:	d01b      	beq.n	800d94c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d916:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d91c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d920:	2202      	movs	r2, #2
 800d922:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d926:	2300      	movs	r3, #0
 800d928:	9303      	str	r3, [sp, #12]
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	9302      	str	r3, [sp, #8]
 800d92e:	f107 0314 	add.w	r3, r7, #20
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	68b9      	ldr	r1, [r7, #8]
 800d93e:	68f8      	ldr	r0, [r7, #12]
 800d940:	f000 f850 	bl	800d9e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d946:	f000 f8dd 	bl	800db04 <prvAddNewTaskToReadyList>
 800d94a:	e001      	b.n	800d950 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d94c:	2300      	movs	r3, #0
 800d94e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d950:	697b      	ldr	r3, [r7, #20]
	}
 800d952:	4618      	mov	r0, r3
 800d954:	3728      	adds	r7, #40	; 0x28
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b08c      	sub	sp, #48	; 0x30
 800d95e:	af04      	add	r7, sp, #16
 800d960:	60f8      	str	r0, [r7, #12]
 800d962:	60b9      	str	r1, [r7, #8]
 800d964:	603b      	str	r3, [r7, #0]
 800d966:	4613      	mov	r3, r2
 800d968:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d96a:	88fb      	ldrh	r3, [r7, #6]
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe fdbe 	bl	800c4f0 <pvPortMalloc>
 800d974:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00e      	beq.n	800d99a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d97c:	205c      	movs	r0, #92	; 0x5c
 800d97e:	f7fe fdb7 	bl	800c4f0 <pvPortMalloc>
 800d982:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d003      	beq.n	800d992 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	697a      	ldr	r2, [r7, #20]
 800d98e:	631a      	str	r2, [r3, #48]	; 0x30
 800d990:	e005      	b.n	800d99e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d992:	6978      	ldr	r0, [r7, #20]
 800d994:	f7fe fe78 	bl	800c688 <vPortFree>
 800d998:	e001      	b.n	800d99e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d99a:	2300      	movs	r3, #0
 800d99c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d017      	beq.n	800d9d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d9ac:	88fa      	ldrh	r2, [r7, #6]
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	9303      	str	r3, [sp, #12]
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	9302      	str	r3, [sp, #8]
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	9301      	str	r3, [sp, #4]
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68b9      	ldr	r1, [r7, #8]
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	f000 f80e 	bl	800d9e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9c8:	69f8      	ldr	r0, [r7, #28]
 800d9ca:	f000 f89b 	bl	800db04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	e002      	b.n	800d9da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d9da:	69bb      	ldr	r3, [r7, #24]
	}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3720      	adds	r7, #32
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b088      	sub	sp, #32
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	607a      	str	r2, [r7, #4]
 800d9f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	21a5      	movs	r1, #165	; 0xa5
 800d9fe:	f001 fec7 	bl	800f790 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800da0c:	440b      	add	r3, r1
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	f023 0307 	bic.w	r3, r3, #7
 800da1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	f003 0307 	and.w	r3, r3, #7
 800da22:	2b00      	cmp	r3, #0
 800da24:	d00a      	beq.n	800da3c <prvInitialiseNewTask+0x58>
	__asm volatile
 800da26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2a:	f383 8811 	msr	BASEPRI, r3
 800da2e:	f3bf 8f6f 	isb	sy
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	617b      	str	r3, [r7, #20]
}
 800da38:	bf00      	nop
 800da3a:	e7fe      	b.n	800da3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d01f      	beq.n	800da82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da42:	2300      	movs	r3, #0
 800da44:	61fb      	str	r3, [r7, #28]
 800da46:	e012      	b.n	800da6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	4413      	add	r3, r2
 800da4e:	7819      	ldrb	r1, [r3, #0]
 800da50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	4413      	add	r3, r2
 800da56:	3334      	adds	r3, #52	; 0x34
 800da58:	460a      	mov	r2, r1
 800da5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da5c:	68ba      	ldr	r2, [r7, #8]
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	4413      	add	r3, r2
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d006      	beq.n	800da76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	3301      	adds	r3, #1
 800da6c:	61fb      	str	r3, [r7, #28]
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	2b0f      	cmp	r3, #15
 800da72:	d9e9      	bls.n	800da48 <prvInitialiseNewTask+0x64>
 800da74:	e000      	b.n	800da78 <prvInitialiseNewTask+0x94>
			{
				break;
 800da76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	2200      	movs	r2, #0
 800da7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da80:	e003      	b.n	800da8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8c:	2b37      	cmp	r3, #55	; 0x37
 800da8e:	d901      	bls.n	800da94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da90:	2337      	movs	r3, #55	; 0x37
 800da92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800daa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa2:	2200      	movs	r2, #0
 800daa4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800daa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa8:	3304      	adds	r3, #4
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe ff2a 	bl	800c904 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab2:	3318      	adds	r3, #24
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fe ff25 	bl	800c904 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800daba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dabe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800daca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dace:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	2200      	movs	r2, #0
 800dad4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad8:	2200      	movs	r2, #0
 800dada:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	68f9      	ldr	r1, [r7, #12]
 800dae2:	69b8      	ldr	r0, [r7, #24]
 800dae4:	f7fe ffa2 	bl	800ca2c <pxPortInitialiseStack>
 800dae8:	4602      	mov	r2, r0
 800daea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800daee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dafa:	bf00      	nop
 800dafc:	3720      	adds	r7, #32
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
	...

0800db04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db0c:	f7ff f8ba 	bl	800cc84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db10:	4b2d      	ldr	r3, [pc, #180]	; (800dbc8 <prvAddNewTaskToReadyList+0xc4>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	3301      	adds	r3, #1
 800db16:	4a2c      	ldr	r2, [pc, #176]	; (800dbc8 <prvAddNewTaskToReadyList+0xc4>)
 800db18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db1a:	4b2c      	ldr	r3, [pc, #176]	; (800dbcc <prvAddNewTaskToReadyList+0xc8>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d109      	bne.n	800db36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db22:	4a2a      	ldr	r2, [pc, #168]	; (800dbcc <prvAddNewTaskToReadyList+0xc8>)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db28:	4b27      	ldr	r3, [pc, #156]	; (800dbc8 <prvAddNewTaskToReadyList+0xc4>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d110      	bne.n	800db52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db30:	f000 fc16 	bl	800e360 <prvInitialiseTaskLists>
 800db34:	e00d      	b.n	800db52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db36:	4b26      	ldr	r3, [pc, #152]	; (800dbd0 <prvAddNewTaskToReadyList+0xcc>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d109      	bne.n	800db52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db3e:	4b23      	ldr	r3, [pc, #140]	; (800dbcc <prvAddNewTaskToReadyList+0xc8>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db48:	429a      	cmp	r2, r3
 800db4a:	d802      	bhi.n	800db52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db4c:	4a1f      	ldr	r2, [pc, #124]	; (800dbcc <prvAddNewTaskToReadyList+0xc8>)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db52:	4b20      	ldr	r3, [pc, #128]	; (800dbd4 <prvAddNewTaskToReadyList+0xd0>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	3301      	adds	r3, #1
 800db58:	4a1e      	ldr	r2, [pc, #120]	; (800dbd4 <prvAddNewTaskToReadyList+0xd0>)
 800db5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db5c:	4b1d      	ldr	r3, [pc, #116]	; (800dbd4 <prvAddNewTaskToReadyList+0xd0>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db68:	4b1b      	ldr	r3, [pc, #108]	; (800dbd8 <prvAddNewTaskToReadyList+0xd4>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d903      	bls.n	800db78 <prvAddNewTaskToReadyList+0x74>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db74:	4a18      	ldr	r2, [pc, #96]	; (800dbd8 <prvAddNewTaskToReadyList+0xd4>)
 800db76:	6013      	str	r3, [r2, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7c:	4613      	mov	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	4a15      	ldr	r2, [pc, #84]	; (800dbdc <prvAddNewTaskToReadyList+0xd8>)
 800db86:	441a      	add	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	3304      	adds	r3, #4
 800db8c:	4619      	mov	r1, r3
 800db8e:	4610      	mov	r0, r2
 800db90:	f7fe fec5 	bl	800c91e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db94:	f7ff f8a6 	bl	800cce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db98:	4b0d      	ldr	r3, [pc, #52]	; (800dbd0 <prvAddNewTaskToReadyList+0xcc>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00e      	beq.n	800dbbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dba0:	4b0a      	ldr	r3, [pc, #40]	; (800dbcc <prvAddNewTaskToReadyList+0xc8>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d207      	bcs.n	800dbbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dbae:	4b0c      	ldr	r3, [pc, #48]	; (800dbe0 <prvAddNewTaskToReadyList+0xdc>)
 800dbb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbbe:	bf00      	nop
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20004960 	.word	0x20004960
 800dbcc:	2000448c 	.word	0x2000448c
 800dbd0:	2000496c 	.word	0x2000496c
 800dbd4:	2000497c 	.word	0x2000497c
 800dbd8:	20004968 	.word	0x20004968
 800dbdc:	20004490 	.word	0x20004490
 800dbe0:	e000ed04 	.word	0xe000ed04

0800dbe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dbec:	2300      	movs	r3, #0
 800dbee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d017      	beq.n	800dc26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dbf6:	4b13      	ldr	r3, [pc, #76]	; (800dc44 <vTaskDelay+0x60>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00a      	beq.n	800dc14 <vTaskDelay+0x30>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	60bb      	str	r3, [r7, #8]
}
 800dc10:	bf00      	nop
 800dc12:	e7fe      	b.n	800dc12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc14:	f000 f880 	bl	800dd18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc18:	2100      	movs	r1, #0
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f000 fcea 	bl	800e5f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc20:	f000 f888 	bl	800dd34 <xTaskResumeAll>
 800dc24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d107      	bne.n	800dc3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc2c:	4b06      	ldr	r3, [pc, #24]	; (800dc48 <vTaskDelay+0x64>)
 800dc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc3c:	bf00      	nop
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	20004988 	.word	0x20004988
 800dc48:	e000ed04 	.word	0xe000ed04

0800dc4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08a      	sub	sp, #40	; 0x28
 800dc50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc52:	2300      	movs	r3, #0
 800dc54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc56:	2300      	movs	r3, #0
 800dc58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc5a:	463a      	mov	r2, r7
 800dc5c:	1d39      	adds	r1, r7, #4
 800dc5e:	f107 0308 	add.w	r3, r7, #8
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fe fc10 	bl	800c488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	9202      	str	r2, [sp, #8]
 800dc70:	9301      	str	r3, [sp, #4]
 800dc72:	2300      	movs	r3, #0
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	2300      	movs	r3, #0
 800dc78:	460a      	mov	r2, r1
 800dc7a:	4921      	ldr	r1, [pc, #132]	; (800dd00 <vTaskStartScheduler+0xb4>)
 800dc7c:	4821      	ldr	r0, [pc, #132]	; (800dd04 <vTaskStartScheduler+0xb8>)
 800dc7e:	f7ff fe0f 	bl	800d8a0 <xTaskCreateStatic>
 800dc82:	4603      	mov	r3, r0
 800dc84:	4a20      	ldr	r2, [pc, #128]	; (800dd08 <vTaskStartScheduler+0xbc>)
 800dc86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc88:	4b1f      	ldr	r3, [pc, #124]	; (800dd08 <vTaskStartScheduler+0xbc>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d002      	beq.n	800dc96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc90:	2301      	movs	r3, #1
 800dc92:	617b      	str	r3, [r7, #20]
 800dc94:	e001      	b.n	800dc9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc96:	2300      	movs	r3, #0
 800dc98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d102      	bne.n	800dca6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dca0:	f000 fcfc 	bl	800e69c <xTimerCreateTimerTask>
 800dca4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d116      	bne.n	800dcda <vTaskStartScheduler+0x8e>
	__asm volatile
 800dcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb0:	f383 8811 	msr	BASEPRI, r3
 800dcb4:	f3bf 8f6f 	isb	sy
 800dcb8:	f3bf 8f4f 	dsb	sy
 800dcbc:	613b      	str	r3, [r7, #16]
}
 800dcbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dcc0:	4b12      	ldr	r3, [pc, #72]	; (800dd0c <vTaskStartScheduler+0xc0>)
 800dcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800dcc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dcc8:	4b11      	ldr	r3, [pc, #68]	; (800dd10 <vTaskStartScheduler+0xc4>)
 800dcca:	2201      	movs	r2, #1
 800dccc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcce:	4b11      	ldr	r3, [pc, #68]	; (800dd14 <vTaskStartScheduler+0xc8>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dcd4:	f7fe ff34 	bl	800cb40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dcd8:	e00e      	b.n	800dcf8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce0:	d10a      	bne.n	800dcf8 <vTaskStartScheduler+0xac>
	__asm volatile
 800dce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	60fb      	str	r3, [r7, #12]
}
 800dcf4:	bf00      	nop
 800dcf6:	e7fe      	b.n	800dcf6 <vTaskStartScheduler+0xaa>
}
 800dcf8:	bf00      	nop
 800dcfa:	3718      	adds	r7, #24
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	0800f7c4 	.word	0x0800f7c4
 800dd04:	0800e331 	.word	0x0800e331
 800dd08:	20004984 	.word	0x20004984
 800dd0c:	20004980 	.word	0x20004980
 800dd10:	2000496c 	.word	0x2000496c
 800dd14:	20004964 	.word	0x20004964

0800dd18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd18:	b480      	push	{r7}
 800dd1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd1c:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <vTaskSuspendAll+0x18>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3301      	adds	r3, #1
 800dd22:	4a03      	ldr	r2, [pc, #12]	; (800dd30 <vTaskSuspendAll+0x18>)
 800dd24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd26:	bf00      	nop
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	20004988 	.word	0x20004988

0800dd34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd42:	4b42      	ldr	r3, [pc, #264]	; (800de4c <xTaskResumeAll+0x118>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10a      	bne.n	800dd60 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	603b      	str	r3, [r7, #0]
}
 800dd5c:	bf00      	nop
 800dd5e:	e7fe      	b.n	800dd5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd60:	f7fe ff90 	bl	800cc84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd64:	4b39      	ldr	r3, [pc, #228]	; (800de4c <xTaskResumeAll+0x118>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	4a38      	ldr	r2, [pc, #224]	; (800de4c <xTaskResumeAll+0x118>)
 800dd6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd6e:	4b37      	ldr	r3, [pc, #220]	; (800de4c <xTaskResumeAll+0x118>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d162      	bne.n	800de3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd76:	4b36      	ldr	r3, [pc, #216]	; (800de50 <xTaskResumeAll+0x11c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d05e      	beq.n	800de3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd7e:	e02f      	b.n	800dde0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd80:	4b34      	ldr	r3, [pc, #208]	; (800de54 <xTaskResumeAll+0x120>)
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3318      	adds	r3, #24
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fe fe23 	bl	800c9d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	3304      	adds	r3, #4
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe fe1e 	bl	800c9d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda0:	4b2d      	ldr	r3, [pc, #180]	; (800de58 <xTaskResumeAll+0x124>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d903      	bls.n	800ddb0 <xTaskResumeAll+0x7c>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddac:	4a2a      	ldr	r2, [pc, #168]	; (800de58 <xTaskResumeAll+0x124>)
 800ddae:	6013      	str	r3, [r2, #0]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb4:	4613      	mov	r3, r2
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4a27      	ldr	r2, [pc, #156]	; (800de5c <xTaskResumeAll+0x128>)
 800ddbe:	441a      	add	r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	4610      	mov	r0, r2
 800ddc8:	f7fe fda9 	bl	800c91e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd0:	4b23      	ldr	r3, [pc, #140]	; (800de60 <xTaskResumeAll+0x12c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d302      	bcc.n	800dde0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ddda:	4b22      	ldr	r3, [pc, #136]	; (800de64 <xTaskResumeAll+0x130>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dde0:	4b1c      	ldr	r3, [pc, #112]	; (800de54 <xTaskResumeAll+0x120>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1cb      	bne.n	800dd80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ddee:	f000 fb55 	bl	800e49c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ddf2:	4b1d      	ldr	r3, [pc, #116]	; (800de68 <xTaskResumeAll+0x134>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d010      	beq.n	800de20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ddfe:	f000 f847 	bl	800de90 <xTaskIncrementTick>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de08:	4b16      	ldr	r3, [pc, #88]	; (800de64 <xTaskResumeAll+0x130>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	3b01      	subs	r3, #1
 800de12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1f1      	bne.n	800ddfe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800de1a:	4b13      	ldr	r3, [pc, #76]	; (800de68 <xTaskResumeAll+0x134>)
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de20:	4b10      	ldr	r3, [pc, #64]	; (800de64 <xTaskResumeAll+0x130>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d009      	beq.n	800de3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de28:	2301      	movs	r3, #1
 800de2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de2c:	4b0f      	ldr	r3, [pc, #60]	; (800de6c <xTaskResumeAll+0x138>)
 800de2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de32:	601a      	str	r2, [r3, #0]
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de3c:	f7fe ff52 	bl	800cce4 <vPortExitCritical>

	return xAlreadyYielded;
 800de40:	68bb      	ldr	r3, [r7, #8]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	20004988 	.word	0x20004988
 800de50:	20004960 	.word	0x20004960
 800de54:	20004920 	.word	0x20004920
 800de58:	20004968 	.word	0x20004968
 800de5c:	20004490 	.word	0x20004490
 800de60:	2000448c 	.word	0x2000448c
 800de64:	20004974 	.word	0x20004974
 800de68:	20004970 	.word	0x20004970
 800de6c:	e000ed04 	.word	0xe000ed04

0800de70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de76:	4b05      	ldr	r3, [pc, #20]	; (800de8c <xTaskGetTickCount+0x1c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de7c:	687b      	ldr	r3, [r7, #4]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	20004964 	.word	0x20004964

0800de90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de96:	2300      	movs	r3, #0
 800de98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de9a:	4b4f      	ldr	r3, [pc, #316]	; (800dfd8 <xTaskIncrementTick+0x148>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f040 808f 	bne.w	800dfc2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dea4:	4b4d      	ldr	r3, [pc, #308]	; (800dfdc <xTaskIncrementTick+0x14c>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	3301      	adds	r3, #1
 800deaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800deac:	4a4b      	ldr	r2, [pc, #300]	; (800dfdc <xTaskIncrementTick+0x14c>)
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d120      	bne.n	800defa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800deb8:	4b49      	ldr	r3, [pc, #292]	; (800dfe0 <xTaskIncrementTick+0x150>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00a      	beq.n	800ded8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	603b      	str	r3, [r7, #0]
}
 800ded4:	bf00      	nop
 800ded6:	e7fe      	b.n	800ded6 <xTaskIncrementTick+0x46>
 800ded8:	4b41      	ldr	r3, [pc, #260]	; (800dfe0 <xTaskIncrementTick+0x150>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	4b41      	ldr	r3, [pc, #260]	; (800dfe4 <xTaskIncrementTick+0x154>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a3f      	ldr	r2, [pc, #252]	; (800dfe0 <xTaskIncrementTick+0x150>)
 800dee4:	6013      	str	r3, [r2, #0]
 800dee6:	4a3f      	ldr	r2, [pc, #252]	; (800dfe4 <xTaskIncrementTick+0x154>)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6013      	str	r3, [r2, #0]
 800deec:	4b3e      	ldr	r3, [pc, #248]	; (800dfe8 <xTaskIncrementTick+0x158>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	3301      	adds	r3, #1
 800def2:	4a3d      	ldr	r2, [pc, #244]	; (800dfe8 <xTaskIncrementTick+0x158>)
 800def4:	6013      	str	r3, [r2, #0]
 800def6:	f000 fad1 	bl	800e49c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800defa:	4b3c      	ldr	r3, [pc, #240]	; (800dfec <xTaskIncrementTick+0x15c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	429a      	cmp	r2, r3
 800df02:	d349      	bcc.n	800df98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df04:	4b36      	ldr	r3, [pc, #216]	; (800dfe0 <xTaskIncrementTick+0x150>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d104      	bne.n	800df18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df0e:	4b37      	ldr	r3, [pc, #220]	; (800dfec <xTaskIncrementTick+0x15c>)
 800df10:	f04f 32ff 	mov.w	r2, #4294967295
 800df14:	601a      	str	r2, [r3, #0]
					break;
 800df16:	e03f      	b.n	800df98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df18:	4b31      	ldr	r3, [pc, #196]	; (800dfe0 <xTaskIncrementTick+0x150>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d203      	bcs.n	800df38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df30:	4a2e      	ldr	r2, [pc, #184]	; (800dfec <xTaskIncrementTick+0x15c>)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df36:	e02f      	b.n	800df98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	3304      	adds	r3, #4
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fe fd4b 	bl	800c9d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df46:	2b00      	cmp	r3, #0
 800df48:	d004      	beq.n	800df54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	3318      	adds	r3, #24
 800df4e:	4618      	mov	r0, r3
 800df50:	f7fe fd42 	bl	800c9d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df58:	4b25      	ldr	r3, [pc, #148]	; (800dff0 <xTaskIncrementTick+0x160>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d903      	bls.n	800df68 <xTaskIncrementTick+0xd8>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df64:	4a22      	ldr	r2, [pc, #136]	; (800dff0 <xTaskIncrementTick+0x160>)
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df6c:	4613      	mov	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4413      	add	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4a1f      	ldr	r2, [pc, #124]	; (800dff4 <xTaskIncrementTick+0x164>)
 800df76:	441a      	add	r2, r3
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	3304      	adds	r3, #4
 800df7c:	4619      	mov	r1, r3
 800df7e:	4610      	mov	r0, r2
 800df80:	f7fe fccd 	bl	800c91e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df88:	4b1b      	ldr	r3, [pc, #108]	; (800dff8 <xTaskIncrementTick+0x168>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8e:	429a      	cmp	r2, r3
 800df90:	d3b8      	bcc.n	800df04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800df92:	2301      	movs	r3, #1
 800df94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df96:	e7b5      	b.n	800df04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df98:	4b17      	ldr	r3, [pc, #92]	; (800dff8 <xTaskIncrementTick+0x168>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9e:	4915      	ldr	r1, [pc, #84]	; (800dff4 <xTaskIncrementTick+0x164>)
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	440b      	add	r3, r1
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d901      	bls.n	800dfb4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dfb4:	4b11      	ldr	r3, [pc, #68]	; (800dffc <xTaskIncrementTick+0x16c>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d007      	beq.n	800dfcc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	617b      	str	r3, [r7, #20]
 800dfc0:	e004      	b.n	800dfcc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dfc2:	4b0f      	ldr	r3, [pc, #60]	; (800e000 <xTaskIncrementTick+0x170>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	4a0d      	ldr	r2, [pc, #52]	; (800e000 <xTaskIncrementTick+0x170>)
 800dfca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dfcc:	697b      	ldr	r3, [r7, #20]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	20004988 	.word	0x20004988
 800dfdc:	20004964 	.word	0x20004964
 800dfe0:	20004918 	.word	0x20004918
 800dfe4:	2000491c 	.word	0x2000491c
 800dfe8:	20004978 	.word	0x20004978
 800dfec:	20004980 	.word	0x20004980
 800dff0:	20004968 	.word	0x20004968
 800dff4:	20004490 	.word	0x20004490
 800dff8:	2000448c 	.word	0x2000448c
 800dffc:	20004974 	.word	0x20004974
 800e000:	20004970 	.word	0x20004970

0800e004 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e00a:	4b28      	ldr	r3, [pc, #160]	; (800e0ac <vTaskSwitchContext+0xa8>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d003      	beq.n	800e01a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e012:	4b27      	ldr	r3, [pc, #156]	; (800e0b0 <vTaskSwitchContext+0xac>)
 800e014:	2201      	movs	r2, #1
 800e016:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e018:	e041      	b.n	800e09e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e01a:	4b25      	ldr	r3, [pc, #148]	; (800e0b0 <vTaskSwitchContext+0xac>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e020:	4b24      	ldr	r3, [pc, #144]	; (800e0b4 <vTaskSwitchContext+0xb0>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	e010      	b.n	800e04a <vTaskSwitchContext+0x46>
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d10a      	bne.n	800e044 <vTaskSwitchContext+0x40>
	__asm volatile
 800e02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	607b      	str	r3, [r7, #4]
}
 800e040:	bf00      	nop
 800e042:	e7fe      	b.n	800e042 <vTaskSwitchContext+0x3e>
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3b01      	subs	r3, #1
 800e048:	60fb      	str	r3, [r7, #12]
 800e04a:	491b      	ldr	r1, [pc, #108]	; (800e0b8 <vTaskSwitchContext+0xb4>)
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	4613      	mov	r3, r2
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	4413      	add	r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	440b      	add	r3, r1
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d0e4      	beq.n	800e028 <vTaskSwitchContext+0x24>
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	4613      	mov	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4413      	add	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4a13      	ldr	r2, [pc, #76]	; (800e0b8 <vTaskSwitchContext+0xb4>)
 800e06a:	4413      	add	r3, r2
 800e06c:	60bb      	str	r3, [r7, #8]
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	685a      	ldr	r2, [r3, #4]
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	605a      	str	r2, [r3, #4]
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	3308      	adds	r3, #8
 800e080:	429a      	cmp	r2, r3
 800e082:	d104      	bne.n	800e08e <vTaskSwitchContext+0x8a>
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	685a      	ldr	r2, [r3, #4]
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	605a      	str	r2, [r3, #4]
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	4a09      	ldr	r2, [pc, #36]	; (800e0bc <vTaskSwitchContext+0xb8>)
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	4a06      	ldr	r2, [pc, #24]	; (800e0b4 <vTaskSwitchContext+0xb0>)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6013      	str	r3, [r2, #0]
}
 800e09e:	bf00      	nop
 800e0a0:	3714      	adds	r7, #20
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	20004988 	.word	0x20004988
 800e0b0:	20004974 	.word	0x20004974
 800e0b4:	20004968 	.word	0x20004968
 800e0b8:	20004490 	.word	0x20004490
 800e0bc:	2000448c 	.word	0x2000448c

0800e0c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10a      	bne.n	800e0e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	60fb      	str	r3, [r7, #12]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0e6:	4b07      	ldr	r3, [pc, #28]	; (800e104 <vTaskPlaceOnEventList+0x44>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	3318      	adds	r3, #24
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7fe fc39 	bl	800c966 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	6838      	ldr	r0, [r7, #0]
 800e0f8:	f000 fa7c 	bl	800e5f4 <prvAddCurrentTaskToDelayedList>
}
 800e0fc:	bf00      	nop
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	2000448c 	.word	0x2000448c

0800e108 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10a      	bne.n	800e130 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	617b      	str	r3, [r7, #20]
}
 800e12c:	bf00      	nop
 800e12e:	e7fe      	b.n	800e12e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e130:	4b0a      	ldr	r3, [pc, #40]	; (800e15c <vTaskPlaceOnEventListRestricted+0x54>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	3318      	adds	r3, #24
 800e136:	4619      	mov	r1, r3
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f7fe fbf0 	bl	800c91e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e144:	f04f 33ff 	mov.w	r3, #4294967295
 800e148:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e14a:	6879      	ldr	r1, [r7, #4]
 800e14c:	68b8      	ldr	r0, [r7, #8]
 800e14e:	f000 fa51 	bl	800e5f4 <prvAddCurrentTaskToDelayedList>
	}
 800e152:	bf00      	nop
 800e154:	3718      	adds	r7, #24
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	2000448c 	.word	0x2000448c

0800e160 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b086      	sub	sp, #24
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10a      	bne.n	800e18c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17a:	f383 8811 	msr	BASEPRI, r3
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f3bf 8f4f 	dsb	sy
 800e186:	60fb      	str	r3, [r7, #12]
}
 800e188:	bf00      	nop
 800e18a:	e7fe      	b.n	800e18a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	3318      	adds	r3, #24
 800e190:	4618      	mov	r0, r3
 800e192:	f7fe fc21 	bl	800c9d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e196:	4b1e      	ldr	r3, [pc, #120]	; (800e210 <xTaskRemoveFromEventList+0xb0>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d11d      	bne.n	800e1da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	3304      	adds	r3, #4
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe fc18 	bl	800c9d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ac:	4b19      	ldr	r3, [pc, #100]	; (800e214 <xTaskRemoveFromEventList+0xb4>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d903      	bls.n	800e1bc <xTaskRemoveFromEventList+0x5c>
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b8:	4a16      	ldr	r2, [pc, #88]	; (800e214 <xTaskRemoveFromEventList+0xb4>)
 800e1ba:	6013      	str	r3, [r2, #0]
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4413      	add	r3, r2
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	4a13      	ldr	r2, [pc, #76]	; (800e218 <xTaskRemoveFromEventList+0xb8>)
 800e1ca:	441a      	add	r2, r3
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f7fe fba3 	bl	800c91e <vListInsertEnd>
 800e1d8:	e005      	b.n	800e1e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	3318      	adds	r3, #24
 800e1de:	4619      	mov	r1, r3
 800e1e0:	480e      	ldr	r0, [pc, #56]	; (800e21c <xTaskRemoveFromEventList+0xbc>)
 800e1e2:	f7fe fb9c 	bl	800c91e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <xTaskRemoveFromEventList+0xc0>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d905      	bls.n	800e200 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1f8:	4b0a      	ldr	r3, [pc, #40]	; (800e224 <xTaskRemoveFromEventList+0xc4>)
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	e001      	b.n	800e204 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e200:	2300      	movs	r3, #0
 800e202:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e204:	697b      	ldr	r3, [r7, #20]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3718      	adds	r7, #24
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	20004988 	.word	0x20004988
 800e214:	20004968 	.word	0x20004968
 800e218:	20004490 	.word	0x20004490
 800e21c:	20004920 	.word	0x20004920
 800e220:	2000448c 	.word	0x2000448c
 800e224:	20004974 	.word	0x20004974

0800e228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e230:	4b06      	ldr	r3, [pc, #24]	; (800e24c <vTaskInternalSetTimeOutState+0x24>)
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e238:	4b05      	ldr	r3, [pc, #20]	; (800e250 <vTaskInternalSetTimeOutState+0x28>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	605a      	str	r2, [r3, #4]
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	20004978 	.word	0x20004978
 800e250:	20004964 	.word	0x20004964

0800e254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b088      	sub	sp, #32
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10a      	bne.n	800e27a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e268:	f383 8811 	msr	BASEPRI, r3
 800e26c:	f3bf 8f6f 	isb	sy
 800e270:	f3bf 8f4f 	dsb	sy
 800e274:	613b      	str	r3, [r7, #16]
}
 800e276:	bf00      	nop
 800e278:	e7fe      	b.n	800e278 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d10a      	bne.n	800e296 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	60fb      	str	r3, [r7, #12]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e296:	f7fe fcf5 	bl	800cc84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e29a:	4b1d      	ldr	r3, [pc, #116]	; (800e310 <xTaskCheckForTimeOut+0xbc>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	69ba      	ldr	r2, [r7, #24]
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b2:	d102      	bne.n	800e2ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	61fb      	str	r3, [r7, #28]
 800e2b8:	e023      	b.n	800e302 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	4b15      	ldr	r3, [pc, #84]	; (800e314 <xTaskCheckForTimeOut+0xc0>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d007      	beq.n	800e2d6 <xTaskCheckForTimeOut+0x82>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	69ba      	ldr	r2, [r7, #24]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d302      	bcc.n	800e2d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	61fb      	str	r3, [r7, #28]
 800e2d4:	e015      	b.n	800e302 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	697a      	ldr	r2, [r7, #20]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d20b      	bcs.n	800e2f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	1ad2      	subs	r2, r2, r3
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff ff9b 	bl	800e228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	61fb      	str	r3, [r7, #28]
 800e2f6:	e004      	b.n	800e302 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2fe:	2301      	movs	r3, #1
 800e300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e302:	f7fe fcef 	bl	800cce4 <vPortExitCritical>

	return xReturn;
 800e306:	69fb      	ldr	r3, [r7, #28]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3720      	adds	r7, #32
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	20004964 	.word	0x20004964
 800e314:	20004978 	.word	0x20004978

0800e318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e318:	b480      	push	{r7}
 800e31a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e31c:	4b03      	ldr	r3, [pc, #12]	; (800e32c <vTaskMissedYield+0x14>)
 800e31e:	2201      	movs	r2, #1
 800e320:	601a      	str	r2, [r3, #0]
}
 800e322:	bf00      	nop
 800e324:	46bd      	mov	sp, r7
 800e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32a:	4770      	bx	lr
 800e32c:	20004974 	.word	0x20004974

0800e330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e338:	f000 f852 	bl	800e3e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e33c:	4b06      	ldr	r3, [pc, #24]	; (800e358 <prvIdleTask+0x28>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d9f9      	bls.n	800e338 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <prvIdleTask+0x2c>)
 800e346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e354:	e7f0      	b.n	800e338 <prvIdleTask+0x8>
 800e356:	bf00      	nop
 800e358:	20004490 	.word	0x20004490
 800e35c:	e000ed04 	.word	0xe000ed04

0800e360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e366:	2300      	movs	r3, #0
 800e368:	607b      	str	r3, [r7, #4]
 800e36a:	e00c      	b.n	800e386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	4613      	mov	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	4a12      	ldr	r2, [pc, #72]	; (800e3c0 <prvInitialiseTaskLists+0x60>)
 800e378:	4413      	add	r3, r2
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fe faa2 	bl	800c8c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	3301      	adds	r3, #1
 800e384:	607b      	str	r3, [r7, #4]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b37      	cmp	r3, #55	; 0x37
 800e38a:	d9ef      	bls.n	800e36c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e38c:	480d      	ldr	r0, [pc, #52]	; (800e3c4 <prvInitialiseTaskLists+0x64>)
 800e38e:	f7fe fa99 	bl	800c8c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e392:	480d      	ldr	r0, [pc, #52]	; (800e3c8 <prvInitialiseTaskLists+0x68>)
 800e394:	f7fe fa96 	bl	800c8c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e398:	480c      	ldr	r0, [pc, #48]	; (800e3cc <prvInitialiseTaskLists+0x6c>)
 800e39a:	f7fe fa93 	bl	800c8c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e39e:	480c      	ldr	r0, [pc, #48]	; (800e3d0 <prvInitialiseTaskLists+0x70>)
 800e3a0:	f7fe fa90 	bl	800c8c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3a4:	480b      	ldr	r0, [pc, #44]	; (800e3d4 <prvInitialiseTaskLists+0x74>)
 800e3a6:	f7fe fa8d 	bl	800c8c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	; (800e3d8 <prvInitialiseTaskLists+0x78>)
 800e3ac:	4a05      	ldr	r2, [pc, #20]	; (800e3c4 <prvInitialiseTaskLists+0x64>)
 800e3ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e3b0:	4b0a      	ldr	r3, [pc, #40]	; (800e3dc <prvInitialiseTaskLists+0x7c>)
 800e3b2:	4a05      	ldr	r2, [pc, #20]	; (800e3c8 <prvInitialiseTaskLists+0x68>)
 800e3b4:	601a      	str	r2, [r3, #0]
}
 800e3b6:	bf00      	nop
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	20004490 	.word	0x20004490
 800e3c4:	200048f0 	.word	0x200048f0
 800e3c8:	20004904 	.word	0x20004904
 800e3cc:	20004920 	.word	0x20004920
 800e3d0:	20004934 	.word	0x20004934
 800e3d4:	2000494c 	.word	0x2000494c
 800e3d8:	20004918 	.word	0x20004918
 800e3dc:	2000491c 	.word	0x2000491c

0800e3e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3e6:	e019      	b.n	800e41c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3e8:	f7fe fc4c 	bl	800cc84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ec:	4b10      	ldr	r3, [pc, #64]	; (800e430 <prvCheckTasksWaitingTermination+0x50>)
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3304      	adds	r3, #4
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fe faed 	bl	800c9d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3fe:	4b0d      	ldr	r3, [pc, #52]	; (800e434 <prvCheckTasksWaitingTermination+0x54>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	3b01      	subs	r3, #1
 800e404:	4a0b      	ldr	r2, [pc, #44]	; (800e434 <prvCheckTasksWaitingTermination+0x54>)
 800e406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e408:	4b0b      	ldr	r3, [pc, #44]	; (800e438 <prvCheckTasksWaitingTermination+0x58>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	4a0a      	ldr	r2, [pc, #40]	; (800e438 <prvCheckTasksWaitingTermination+0x58>)
 800e410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e412:	f7fe fc67 	bl	800cce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f810 	bl	800e43c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e41c:	4b06      	ldr	r3, [pc, #24]	; (800e438 <prvCheckTasksWaitingTermination+0x58>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d1e1      	bne.n	800e3e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop
 800e428:	3708      	adds	r7, #8
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	20004934 	.word	0x20004934
 800e434:	20004960 	.word	0x20004960
 800e438:	20004948 	.word	0x20004948

0800e43c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d108      	bne.n	800e460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e452:	4618      	mov	r0, r3
 800e454:	f7fe f918 	bl	800c688 <vPortFree>
				vPortFree( pxTCB );
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7fe f915 	bl	800c688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e45e:	e018      	b.n	800e492 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e466:	2b01      	cmp	r3, #1
 800e468:	d103      	bne.n	800e472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7fe f90c 	bl	800c688 <vPortFree>
	}
 800e470:	e00f      	b.n	800e492 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e478:	2b02      	cmp	r3, #2
 800e47a:	d00a      	beq.n	800e492 <prvDeleteTCB+0x56>
	__asm volatile
 800e47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e480:	f383 8811 	msr	BASEPRI, r3
 800e484:	f3bf 8f6f 	isb	sy
 800e488:	f3bf 8f4f 	dsb	sy
 800e48c:	60fb      	str	r3, [r7, #12]
}
 800e48e:	bf00      	nop
 800e490:	e7fe      	b.n	800e490 <prvDeleteTCB+0x54>
	}
 800e492:	bf00      	nop
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
	...

0800e49c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4a2:	4b0c      	ldr	r3, [pc, #48]	; (800e4d4 <prvResetNextTaskUnblockTime+0x38>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d104      	bne.n	800e4b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4ac:	4b0a      	ldr	r3, [pc, #40]	; (800e4d8 <prvResetNextTaskUnblockTime+0x3c>)
 800e4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4b4:	e008      	b.n	800e4c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b6:	4b07      	ldr	r3, [pc, #28]	; (800e4d4 <prvResetNextTaskUnblockTime+0x38>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	68db      	ldr	r3, [r3, #12]
 800e4be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	4a04      	ldr	r2, [pc, #16]	; (800e4d8 <prvResetNextTaskUnblockTime+0x3c>)
 800e4c6:	6013      	str	r3, [r2, #0]
}
 800e4c8:	bf00      	nop
 800e4ca:	370c      	adds	r7, #12
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr
 800e4d4:	20004918 	.word	0x20004918
 800e4d8:	20004980 	.word	0x20004980

0800e4dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e4e2:	4b0b      	ldr	r3, [pc, #44]	; (800e510 <xTaskGetSchedulerState+0x34>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d102      	bne.n	800e4f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	607b      	str	r3, [r7, #4]
 800e4ee:	e008      	b.n	800e502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4f0:	4b08      	ldr	r3, [pc, #32]	; (800e514 <xTaskGetSchedulerState+0x38>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d102      	bne.n	800e4fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e4f8:	2302      	movs	r3, #2
 800e4fa:	607b      	str	r3, [r7, #4]
 800e4fc:	e001      	b.n	800e502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e4fe:	2300      	movs	r3, #0
 800e500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e502:	687b      	ldr	r3, [r7, #4]
	}
 800e504:	4618      	mov	r0, r3
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr
 800e510:	2000496c 	.word	0x2000496c
 800e514:	20004988 	.word	0x20004988

0800e518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e524:	2300      	movs	r3, #0
 800e526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d056      	beq.n	800e5dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e52e:	4b2e      	ldr	r3, [pc, #184]	; (800e5e8 <xTaskPriorityDisinherit+0xd0>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	693a      	ldr	r2, [r7, #16]
 800e534:	429a      	cmp	r2, r3
 800e536:	d00a      	beq.n	800e54e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	60fb      	str	r3, [r7, #12]
}
 800e54a:	bf00      	nop
 800e54c:	e7fe      	b.n	800e54c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10a      	bne.n	800e56c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	60bb      	str	r3, [r7, #8]
}
 800e568:	bf00      	nop
 800e56a:	e7fe      	b.n	800e56a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e570:	1e5a      	subs	r2, r3, #1
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e57e:	429a      	cmp	r2, r3
 800e580:	d02c      	beq.n	800e5dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e586:	2b00      	cmp	r3, #0
 800e588:	d128      	bne.n	800e5dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	3304      	adds	r3, #4
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fe fa22 	bl	800c9d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ac:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <xTaskPriorityDisinherit+0xd4>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d903      	bls.n	800e5bc <xTaskPriorityDisinherit+0xa4>
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b8:	4a0c      	ldr	r2, [pc, #48]	; (800e5ec <xTaskPriorityDisinherit+0xd4>)
 800e5ba:	6013      	str	r3, [r2, #0]
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c0:	4613      	mov	r3, r2
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	4413      	add	r3, r2
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4a09      	ldr	r2, [pc, #36]	; (800e5f0 <xTaskPriorityDisinherit+0xd8>)
 800e5ca:	441a      	add	r2, r3
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	4610      	mov	r0, r2
 800e5d4:	f7fe f9a3 	bl	800c91e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5dc:	697b      	ldr	r3, [r7, #20]
	}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	2000448c 	.word	0x2000448c
 800e5ec:	20004968 	.word	0x20004968
 800e5f0:	20004490 	.word	0x20004490

0800e5f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e5fe:	4b21      	ldr	r3, [pc, #132]	; (800e684 <prvAddCurrentTaskToDelayedList+0x90>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e604:	4b20      	ldr	r3, [pc, #128]	; (800e688 <prvAddCurrentTaskToDelayedList+0x94>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	3304      	adds	r3, #4
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe f9e4 	bl	800c9d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e616:	d10a      	bne.n	800e62e <prvAddCurrentTaskToDelayedList+0x3a>
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d007      	beq.n	800e62e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e61e:	4b1a      	ldr	r3, [pc, #104]	; (800e688 <prvAddCurrentTaskToDelayedList+0x94>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3304      	adds	r3, #4
 800e624:	4619      	mov	r1, r3
 800e626:	4819      	ldr	r0, [pc, #100]	; (800e68c <prvAddCurrentTaskToDelayedList+0x98>)
 800e628:	f7fe f979 	bl	800c91e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e62c:	e026      	b.n	800e67c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4413      	add	r3, r2
 800e634:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e636:	4b14      	ldr	r3, [pc, #80]	; (800e688 <prvAddCurrentTaskToDelayedList+0x94>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	429a      	cmp	r2, r3
 800e644:	d209      	bcs.n	800e65a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e646:	4b12      	ldr	r3, [pc, #72]	; (800e690 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	4b0f      	ldr	r3, [pc, #60]	; (800e688 <prvAddCurrentTaskToDelayedList+0x94>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	3304      	adds	r3, #4
 800e650:	4619      	mov	r1, r3
 800e652:	4610      	mov	r0, r2
 800e654:	f7fe f987 	bl	800c966 <vListInsert>
}
 800e658:	e010      	b.n	800e67c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e65a:	4b0e      	ldr	r3, [pc, #56]	; (800e694 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	4b0a      	ldr	r3, [pc, #40]	; (800e688 <prvAddCurrentTaskToDelayedList+0x94>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3304      	adds	r3, #4
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fe f97d 	bl	800c966 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e66c:	4b0a      	ldr	r3, [pc, #40]	; (800e698 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68ba      	ldr	r2, [r7, #8]
 800e672:	429a      	cmp	r2, r3
 800e674:	d202      	bcs.n	800e67c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e676:	4a08      	ldr	r2, [pc, #32]	; (800e698 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	6013      	str	r3, [r2, #0]
}
 800e67c:	bf00      	nop
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	20004964 	.word	0x20004964
 800e688:	2000448c 	.word	0x2000448c
 800e68c:	2000494c 	.word	0x2000494c
 800e690:	2000491c 	.word	0x2000491c
 800e694:	20004918 	.word	0x20004918
 800e698:	20004980 	.word	0x20004980

0800e69c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b08a      	sub	sp, #40	; 0x28
 800e6a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e6a6:	f000 fb07 	bl	800ecb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e6aa:	4b1c      	ldr	r3, [pc, #112]	; (800e71c <xTimerCreateTimerTask+0x80>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d021      	beq.n	800e6f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e6ba:	1d3a      	adds	r2, r7, #4
 800e6bc:	f107 0108 	add.w	r1, r7, #8
 800e6c0:	f107 030c 	add.w	r3, r7, #12
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7fd fef9 	bl	800c4bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	68fa      	ldr	r2, [r7, #12]
 800e6d0:	9202      	str	r2, [sp, #8]
 800e6d2:	9301      	str	r3, [sp, #4]
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	9300      	str	r3, [sp, #0]
 800e6d8:	2300      	movs	r3, #0
 800e6da:	460a      	mov	r2, r1
 800e6dc:	4910      	ldr	r1, [pc, #64]	; (800e720 <xTimerCreateTimerTask+0x84>)
 800e6de:	4811      	ldr	r0, [pc, #68]	; (800e724 <xTimerCreateTimerTask+0x88>)
 800e6e0:	f7ff f8de 	bl	800d8a0 <xTaskCreateStatic>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	4a10      	ldr	r2, [pc, #64]	; (800e728 <xTimerCreateTimerTask+0x8c>)
 800e6e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e6ea:	4b0f      	ldr	r3, [pc, #60]	; (800e728 <xTimerCreateTimerTask+0x8c>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d10a      	bne.n	800e712 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e700:	f383 8811 	msr	BASEPRI, r3
 800e704:	f3bf 8f6f 	isb	sy
 800e708:	f3bf 8f4f 	dsb	sy
 800e70c:	613b      	str	r3, [r7, #16]
}
 800e70e:	bf00      	nop
 800e710:	e7fe      	b.n	800e710 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e712:	697b      	ldr	r3, [r7, #20]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	200049bc 	.word	0x200049bc
 800e720:	0800f7cc 	.word	0x0800f7cc
 800e724:	0800e861 	.word	0x0800e861
 800e728:	200049c0 	.word	0x200049c0

0800e72c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b08a      	sub	sp, #40	; 0x28
 800e730:	af00      	add	r7, sp, #0
 800e732:	60f8      	str	r0, [r7, #12]
 800e734:	60b9      	str	r1, [r7, #8]
 800e736:	607a      	str	r2, [r7, #4]
 800e738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e73a:	2300      	movs	r3, #0
 800e73c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d10a      	bne.n	800e75a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e748:	f383 8811 	msr	BASEPRI, r3
 800e74c:	f3bf 8f6f 	isb	sy
 800e750:	f3bf 8f4f 	dsb	sy
 800e754:	623b      	str	r3, [r7, #32]
}
 800e756:	bf00      	nop
 800e758:	e7fe      	b.n	800e758 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e75a:	4b1a      	ldr	r3, [pc, #104]	; (800e7c4 <xTimerGenericCommand+0x98>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d02a      	beq.n	800e7b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	2b05      	cmp	r3, #5
 800e772:	dc18      	bgt.n	800e7a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e774:	f7ff feb2 	bl	800e4dc <xTaskGetSchedulerState>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d109      	bne.n	800e792 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e77e:	4b11      	ldr	r3, [pc, #68]	; (800e7c4 <xTimerGenericCommand+0x98>)
 800e780:	6818      	ldr	r0, [r3, #0]
 800e782:	f107 0110 	add.w	r1, r7, #16
 800e786:	2300      	movs	r3, #0
 800e788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e78a:	f7fe fca1 	bl	800d0d0 <xQueueGenericSend>
 800e78e:	6278      	str	r0, [r7, #36]	; 0x24
 800e790:	e012      	b.n	800e7b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e792:	4b0c      	ldr	r3, [pc, #48]	; (800e7c4 <xTimerGenericCommand+0x98>)
 800e794:	6818      	ldr	r0, [r3, #0]
 800e796:	f107 0110 	add.w	r1, r7, #16
 800e79a:	2300      	movs	r3, #0
 800e79c:	2200      	movs	r2, #0
 800e79e:	f7fe fc97 	bl	800d0d0 <xQueueGenericSend>
 800e7a2:	6278      	str	r0, [r7, #36]	; 0x24
 800e7a4:	e008      	b.n	800e7b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e7a6:	4b07      	ldr	r3, [pc, #28]	; (800e7c4 <xTimerGenericCommand+0x98>)
 800e7a8:	6818      	ldr	r0, [r3, #0]
 800e7aa:	f107 0110 	add.w	r1, r7, #16
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	f7fe fd8b 	bl	800d2cc <xQueueGenericSendFromISR>
 800e7b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3728      	adds	r7, #40	; 0x28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	200049bc 	.word	0x200049bc

0800e7c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b088      	sub	sp, #32
 800e7cc:	af02      	add	r7, sp, #8
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7d2:	4b22      	ldr	r3, [pc, #136]	; (800e85c <prvProcessExpiredTimer+0x94>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	3304      	adds	r3, #4
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fe f8f9 	bl	800c9d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7ec:	f003 0304 	and.w	r3, r3, #4
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d022      	beq.n	800e83a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	699a      	ldr	r2, [r3, #24]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	18d1      	adds	r1, r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	683a      	ldr	r2, [r7, #0]
 800e800:	6978      	ldr	r0, [r7, #20]
 800e802:	f000 f8d1 	bl	800e9a8 <prvInsertTimerInActiveList>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d01f      	beq.n	800e84c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e80c:	2300      	movs	r3, #0
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	2300      	movs	r3, #0
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	2100      	movs	r1, #0
 800e816:	6978      	ldr	r0, [r7, #20]
 800e818:	f7ff ff88 	bl	800e72c <xTimerGenericCommand>
 800e81c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d113      	bne.n	800e84c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	60fb      	str	r3, [r7, #12]
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e840:	f023 0301 	bic.w	r3, r3, #1
 800e844:	b2da      	uxtb	r2, r3
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	6a1b      	ldr	r3, [r3, #32]
 800e850:	6978      	ldr	r0, [r7, #20]
 800e852:	4798      	blx	r3
}
 800e854:	bf00      	nop
 800e856:	3718      	adds	r7, #24
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	200049b4 	.word	0x200049b4

0800e860 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e868:	f107 0308 	add.w	r3, r7, #8
 800e86c:	4618      	mov	r0, r3
 800e86e:	f000 f857 	bl	800e920 <prvGetNextExpireTime>
 800e872:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4619      	mov	r1, r3
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f000 f803 	bl	800e884 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e87e:	f000 f8d5 	bl	800ea2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e882:	e7f1      	b.n	800e868 <prvTimerTask+0x8>

0800e884 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b084      	sub	sp, #16
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e88e:	f7ff fa43 	bl	800dd18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e892:	f107 0308 	add.w	r3, r7, #8
 800e896:	4618      	mov	r0, r3
 800e898:	f000 f866 	bl	800e968 <prvSampleTimeNow>
 800e89c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d130      	bne.n	800e906 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10a      	bne.n	800e8c0 <prvProcessTimerOrBlockTask+0x3c>
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d806      	bhi.n	800e8c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e8b2:	f7ff fa3f 	bl	800dd34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e8b6:	68f9      	ldr	r1, [r7, #12]
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7ff ff85 	bl	800e7c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e8be:	e024      	b.n	800e90a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d008      	beq.n	800e8d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e8c6:	4b13      	ldr	r3, [pc, #76]	; (800e914 <prvProcessTimerOrBlockTask+0x90>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d101      	bne.n	800e8d4 <prvProcessTimerOrBlockTask+0x50>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e000      	b.n	800e8d6 <prvProcessTimerOrBlockTask+0x52>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e8d8:	4b0f      	ldr	r3, [pc, #60]	; (800e918 <prvProcessTimerOrBlockTask+0x94>)
 800e8da:	6818      	ldr	r0, [r3, #0]
 800e8dc:	687a      	ldr	r2, [r7, #4]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	f7fe ffa7 	bl	800d838 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e8ea:	f7ff fa23 	bl	800dd34 <xTaskResumeAll>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10a      	bne.n	800e90a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e8f4:	4b09      	ldr	r3, [pc, #36]	; (800e91c <prvProcessTimerOrBlockTask+0x98>)
 800e8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8fa:	601a      	str	r2, [r3, #0]
 800e8fc:	f3bf 8f4f 	dsb	sy
 800e900:	f3bf 8f6f 	isb	sy
}
 800e904:	e001      	b.n	800e90a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e906:	f7ff fa15 	bl	800dd34 <xTaskResumeAll>
}
 800e90a:	bf00      	nop
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	200049b8 	.word	0x200049b8
 800e918:	200049bc 	.word	0x200049bc
 800e91c:	e000ed04 	.word	0xe000ed04

0800e920 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e928:	4b0e      	ldr	r3, [pc, #56]	; (800e964 <prvGetNextExpireTime+0x44>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d101      	bne.n	800e936 <prvGetNextExpireTime+0x16>
 800e932:	2201      	movs	r2, #1
 800e934:	e000      	b.n	800e938 <prvGetNextExpireTime+0x18>
 800e936:	2200      	movs	r2, #0
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d105      	bne.n	800e950 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e944:	4b07      	ldr	r3, [pc, #28]	; (800e964 <prvGetNextExpireTime+0x44>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	60fb      	str	r3, [r7, #12]
 800e94e:	e001      	b.n	800e954 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e950:	2300      	movs	r3, #0
 800e952:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e954:	68fb      	ldr	r3, [r7, #12]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3714      	adds	r7, #20
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	200049b4 	.word	0x200049b4

0800e968 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e970:	f7ff fa7e 	bl	800de70 <xTaskGetTickCount>
 800e974:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e976:	4b0b      	ldr	r3, [pc, #44]	; (800e9a4 <prvSampleTimeNow+0x3c>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d205      	bcs.n	800e98c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e980:	f000 f936 	bl	800ebf0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2201      	movs	r2, #1
 800e988:	601a      	str	r2, [r3, #0]
 800e98a:	e002      	b.n	800e992 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e992:	4a04      	ldr	r2, [pc, #16]	; (800e9a4 <prvSampleTimeNow+0x3c>)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e998:	68fb      	ldr	r3, [r7, #12]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	200049c4 	.word	0x200049c4

0800e9a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b086      	sub	sp, #24
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
 800e9b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d812      	bhi.n	800e9f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	1ad2      	subs	r2, r2, r3
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	699b      	ldr	r3, [r3, #24]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d302      	bcc.n	800e9e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	617b      	str	r3, [r7, #20]
 800e9e0:	e01b      	b.n	800ea1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e9e2:	4b10      	ldr	r3, [pc, #64]	; (800ea24 <prvInsertTimerInActiveList+0x7c>)
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	3304      	adds	r3, #4
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	f7fd ffba 	bl	800c966 <vListInsert>
 800e9f2:	e012      	b.n	800ea1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d206      	bcs.n	800ea0a <prvInsertTimerInActiveList+0x62>
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d302      	bcc.n	800ea0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ea04:	2301      	movs	r3, #1
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	e007      	b.n	800ea1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ea0a:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <prvInsertTimerInActiveList+0x80>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	3304      	adds	r3, #4
 800ea12:	4619      	mov	r1, r3
 800ea14:	4610      	mov	r0, r2
 800ea16:	f7fd ffa6 	bl	800c966 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ea1a:	697b      	ldr	r3, [r7, #20]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3718      	adds	r7, #24
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	200049b8 	.word	0x200049b8
 800ea28:	200049b4 	.word	0x200049b4

0800ea2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b08e      	sub	sp, #56	; 0x38
 800ea30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea32:	e0ca      	b.n	800ebca <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	da18      	bge.n	800ea6c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ea3a:	1d3b      	adds	r3, r7, #4
 800ea3c:	3304      	adds	r3, #4
 800ea3e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d10a      	bne.n	800ea5c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	61fb      	str	r3, [r7, #28]
}
 800ea58:	bf00      	nop
 800ea5a:	e7fe      	b.n	800ea5a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea62:	6850      	ldr	r0, [r2, #4]
 800ea64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea66:	6892      	ldr	r2, [r2, #8]
 800ea68:	4611      	mov	r1, r2
 800ea6a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	f2c0 80aa 	blt.w	800ebc8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7a:	695b      	ldr	r3, [r3, #20]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d004      	beq.n	800ea8a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea82:	3304      	adds	r3, #4
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fd ffa7 	bl	800c9d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea8a:	463b      	mov	r3, r7
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7ff ff6b 	bl	800e968 <prvSampleTimeNow>
 800ea92:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b09      	cmp	r3, #9
 800ea98:	f200 8097 	bhi.w	800ebca <prvProcessReceivedCommands+0x19e>
 800ea9c:	a201      	add	r2, pc, #4	; (adr r2, 800eaa4 <prvProcessReceivedCommands+0x78>)
 800ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa2:	bf00      	nop
 800eaa4:	0800eacd 	.word	0x0800eacd
 800eaa8:	0800eacd 	.word	0x0800eacd
 800eaac:	0800eacd 	.word	0x0800eacd
 800eab0:	0800eb41 	.word	0x0800eb41
 800eab4:	0800eb55 	.word	0x0800eb55
 800eab8:	0800eb9f 	.word	0x0800eb9f
 800eabc:	0800eacd 	.word	0x0800eacd
 800eac0:	0800eacd 	.word	0x0800eacd
 800eac4:	0800eb41 	.word	0x0800eb41
 800eac8:	0800eb55 	.word	0x0800eb55
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eace:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ead2:	f043 0301 	orr.w	r3, r3, #1
 800ead6:	b2da      	uxtb	r2, r3
 800ead8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eade:	68ba      	ldr	r2, [r7, #8]
 800eae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae2:	699b      	ldr	r3, [r3, #24]
 800eae4:	18d1      	adds	r1, r2, r3
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaec:	f7ff ff5c 	bl	800e9a8 <prvInsertTimerInActiveList>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d069      	beq.n	800ebca <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	6a1b      	ldr	r3, [r3, #32]
 800eafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eafc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb04:	f003 0304 	and.w	r3, r3, #4
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d05e      	beq.n	800ebca <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eb0c:	68ba      	ldr	r2, [r7, #8]
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	699b      	ldr	r3, [r3, #24]
 800eb12:	441a      	add	r2, r3
 800eb14:	2300      	movs	r3, #0
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	2300      	movs	r3, #0
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb1e:	f7ff fe05 	bl	800e72c <xTimerGenericCommand>
 800eb22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d14f      	bne.n	800ebca <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800eb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2e:	f383 8811 	msr	BASEPRI, r3
 800eb32:	f3bf 8f6f 	isb	sy
 800eb36:	f3bf 8f4f 	dsb	sy
 800eb3a:	61bb      	str	r3, [r7, #24]
}
 800eb3c:	bf00      	nop
 800eb3e:	e7fe      	b.n	800eb3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb46:	f023 0301 	bic.w	r3, r3, #1
 800eb4a:	b2da      	uxtb	r2, r3
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800eb52:	e03a      	b.n	800ebca <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb5a:	f043 0301 	orr.w	r3, r3, #1
 800eb5e:	b2da      	uxtb	r2, r3
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10a      	bne.n	800eb8a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	617b      	str	r3, [r7, #20]
}
 800eb86:	bf00      	nop
 800eb88:	e7fe      	b.n	800eb88 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8c:	699a      	ldr	r2, [r3, #24]
 800eb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb90:	18d1      	adds	r1, r2, r3
 800eb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb98:	f7ff ff06 	bl	800e9a8 <prvInsertTimerInActiveList>
					break;
 800eb9c:	e015      	b.n	800ebca <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eba4:	f003 0302 	and.w	r3, r3, #2
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d103      	bne.n	800ebb4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ebac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebae:	f7fd fd6b 	bl	800c688 <vPortFree>
 800ebb2:	e00a      	b.n	800ebca <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebba:	f023 0301 	bic.w	r3, r3, #1
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ebc6:	e000      	b.n	800ebca <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ebc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebca:	4b08      	ldr	r3, [pc, #32]	; (800ebec <prvProcessReceivedCommands+0x1c0>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	1d39      	adds	r1, r7, #4
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe fc16 	bl	800d404 <xQueueReceive>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f47f af2a 	bne.w	800ea34 <prvProcessReceivedCommands+0x8>
	}
}
 800ebe0:	bf00      	nop
 800ebe2:	bf00      	nop
 800ebe4:	3730      	adds	r7, #48	; 0x30
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	200049bc 	.word	0x200049bc

0800ebf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b088      	sub	sp, #32
 800ebf4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ebf6:	e048      	b.n	800ec8a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebf8:	4b2d      	ldr	r3, [pc, #180]	; (800ecb0 <prvSwitchTimerLists+0xc0>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec02:	4b2b      	ldr	r3, [pc, #172]	; (800ecb0 <prvSwitchTimerLists+0xc0>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fd fee1 	bl	800c9d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec24:	f003 0304 	and.w	r3, r3, #4
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d02e      	beq.n	800ec8a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	693a      	ldr	r2, [r7, #16]
 800ec32:	4413      	add	r3, r2
 800ec34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ec36:	68ba      	ldr	r2, [r7, #8]
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d90e      	bls.n	800ec5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec4a:	4b19      	ldr	r3, [pc, #100]	; (800ecb0 <prvSwitchTimerLists+0xc0>)
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	3304      	adds	r3, #4
 800ec52:	4619      	mov	r1, r3
 800ec54:	4610      	mov	r0, r2
 800ec56:	f7fd fe86 	bl	800c966 <vListInsert>
 800ec5a:	e016      	b.n	800ec8a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	2300      	movs	r3, #0
 800ec62:	693a      	ldr	r2, [r7, #16]
 800ec64:	2100      	movs	r1, #0
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f7ff fd60 	bl	800e72c <xTimerGenericCommand>
 800ec6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10a      	bne.n	800ec8a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	603b      	str	r3, [r7, #0]
}
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec8a:	4b09      	ldr	r3, [pc, #36]	; (800ecb0 <prvSwitchTimerLists+0xc0>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d1b1      	bne.n	800ebf8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ec94:	4b06      	ldr	r3, [pc, #24]	; (800ecb0 <prvSwitchTimerLists+0xc0>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ec9a:	4b06      	ldr	r3, [pc, #24]	; (800ecb4 <prvSwitchTimerLists+0xc4>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4a04      	ldr	r2, [pc, #16]	; (800ecb0 <prvSwitchTimerLists+0xc0>)
 800eca0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800eca2:	4a04      	ldr	r2, [pc, #16]	; (800ecb4 <prvSwitchTimerLists+0xc4>)
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	6013      	str	r3, [r2, #0]
}
 800eca8:	bf00      	nop
 800ecaa:	3718      	adds	r7, #24
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}
 800ecb0:	200049b4 	.word	0x200049b4
 800ecb4:	200049b8 	.word	0x200049b8

0800ecb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ecbe:	f7fd ffe1 	bl	800cc84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ecc2:	4b15      	ldr	r3, [pc, #84]	; (800ed18 <prvCheckForValidListAndQueue+0x60>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d120      	bne.n	800ed0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ecca:	4814      	ldr	r0, [pc, #80]	; (800ed1c <prvCheckForValidListAndQueue+0x64>)
 800eccc:	f7fd fdfa 	bl	800c8c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ecd0:	4813      	ldr	r0, [pc, #76]	; (800ed20 <prvCheckForValidListAndQueue+0x68>)
 800ecd2:	f7fd fdf7 	bl	800c8c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ecd6:	4b13      	ldr	r3, [pc, #76]	; (800ed24 <prvCheckForValidListAndQueue+0x6c>)
 800ecd8:	4a10      	ldr	r2, [pc, #64]	; (800ed1c <prvCheckForValidListAndQueue+0x64>)
 800ecda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ecdc:	4b12      	ldr	r3, [pc, #72]	; (800ed28 <prvCheckForValidListAndQueue+0x70>)
 800ecde:	4a10      	ldr	r2, [pc, #64]	; (800ed20 <prvCheckForValidListAndQueue+0x68>)
 800ece0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ece2:	2300      	movs	r3, #0
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	4b11      	ldr	r3, [pc, #68]	; (800ed2c <prvCheckForValidListAndQueue+0x74>)
 800ece8:	4a11      	ldr	r2, [pc, #68]	; (800ed30 <prvCheckForValidListAndQueue+0x78>)
 800ecea:	2110      	movs	r1, #16
 800ecec:	200a      	movs	r0, #10
 800ecee:	f7fe f953 	bl	800cf98 <xQueueGenericCreateStatic>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	4a08      	ldr	r2, [pc, #32]	; (800ed18 <prvCheckForValidListAndQueue+0x60>)
 800ecf6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ecf8:	4b07      	ldr	r3, [pc, #28]	; (800ed18 <prvCheckForValidListAndQueue+0x60>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d005      	beq.n	800ed0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ed00:	4b05      	ldr	r3, [pc, #20]	; (800ed18 <prvCheckForValidListAndQueue+0x60>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	490b      	ldr	r1, [pc, #44]	; (800ed34 <prvCheckForValidListAndQueue+0x7c>)
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fe fd6c 	bl	800d7e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed0c:	f7fd ffea 	bl	800cce4 <vPortExitCritical>
}
 800ed10:	bf00      	nop
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	200049bc 	.word	0x200049bc
 800ed1c:	2000498c 	.word	0x2000498c
 800ed20:	200049a0 	.word	0x200049a0
 800ed24:	200049b4 	.word	0x200049b4
 800ed28:	200049b8 	.word	0x200049b8
 800ed2c:	20004a68 	.word	0x20004a68
 800ed30:	200049c8 	.word	0x200049c8
 800ed34:	0800f7d4 	.word	0x0800f7d4

0800ed38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4913      	ldr	r1, [pc, #76]	; (800ed8c <MX_USB_DEVICE_Init+0x54>)
 800ed40:	4813      	ldr	r0, [pc, #76]	; (800ed90 <MX_USB_DEVICE_Init+0x58>)
 800ed42:	f7fc f8fb 	bl	800af3c <USBD_Init>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d001      	beq.n	800ed50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ed4c:	f7f1 fee2 	bl	8000b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ed50:	4910      	ldr	r1, [pc, #64]	; (800ed94 <MX_USB_DEVICE_Init+0x5c>)
 800ed52:	480f      	ldr	r0, [pc, #60]	; (800ed90 <MX_USB_DEVICE_Init+0x58>)
 800ed54:	f7fc f922 	bl	800af9c <USBD_RegisterClass>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ed5e:	f7f1 fed9 	bl	8000b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ed62:	490d      	ldr	r1, [pc, #52]	; (800ed98 <MX_USB_DEVICE_Init+0x60>)
 800ed64:	480a      	ldr	r0, [pc, #40]	; (800ed90 <MX_USB_DEVICE_Init+0x58>)
 800ed66:	f7fc f873 	bl	800ae50 <USBD_CDC_RegisterInterface>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d001      	beq.n	800ed74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ed70:	f7f1 fed0 	bl	8000b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ed74:	4806      	ldr	r0, [pc, #24]	; (800ed90 <MX_USB_DEVICE_Init+0x58>)
 800ed76:	f7fc f938 	bl	800afea <USBD_Start>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d001      	beq.n	800ed84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ed80:	f7f1 fec8 	bl	8000b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ed84:	f7f6 f8d4 	bl	8004f30 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ed88:	bf00      	nop
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20000138 	.word	0x20000138
 800ed90:	20004eec 	.word	0x20004eec
 800ed94:	2000001c 	.word	0x2000001c
 800ed98:	20000124 	.word	0x20000124

0800ed9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eda0:	2200      	movs	r2, #0
 800eda2:	4905      	ldr	r1, [pc, #20]	; (800edb8 <CDC_Init_FS+0x1c>)
 800eda4:	4805      	ldr	r0, [pc, #20]	; (800edbc <CDC_Init_FS+0x20>)
 800eda6:	f7fc f868 	bl	800ae7a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800edaa:	4905      	ldr	r1, [pc, #20]	; (800edc0 <CDC_Init_FS+0x24>)
 800edac:	4803      	ldr	r0, [pc, #12]	; (800edbc <CDC_Init_FS+0x20>)
 800edae:	f7fc f882 	bl	800aeb6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800edb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	200059bc 	.word	0x200059bc
 800edbc:	20004eec 	.word	0x20004eec
 800edc0:	200051bc 	.word	0x200051bc

0800edc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800edc4:	b480      	push	{r7}
 800edc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800edc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800edca:	4618      	mov	r0, r3
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b083      	sub	sp, #12
 800edd8:	af00      	add	r7, sp, #0
 800edda:	4603      	mov	r3, r0
 800eddc:	6039      	str	r1, [r7, #0]
 800edde:	71fb      	strb	r3, [r7, #7]
 800ede0:	4613      	mov	r3, r2
 800ede2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ede4:	79fb      	ldrb	r3, [r7, #7]
 800ede6:	2b23      	cmp	r3, #35	; 0x23
 800ede8:	d84a      	bhi.n	800ee80 <CDC_Control_FS+0xac>
 800edea:	a201      	add	r2, pc, #4	; (adr r2, 800edf0 <CDC_Control_FS+0x1c>)
 800edec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf0:	0800ee81 	.word	0x0800ee81
 800edf4:	0800ee81 	.word	0x0800ee81
 800edf8:	0800ee81 	.word	0x0800ee81
 800edfc:	0800ee81 	.word	0x0800ee81
 800ee00:	0800ee81 	.word	0x0800ee81
 800ee04:	0800ee81 	.word	0x0800ee81
 800ee08:	0800ee81 	.word	0x0800ee81
 800ee0c:	0800ee81 	.word	0x0800ee81
 800ee10:	0800ee81 	.word	0x0800ee81
 800ee14:	0800ee81 	.word	0x0800ee81
 800ee18:	0800ee81 	.word	0x0800ee81
 800ee1c:	0800ee81 	.word	0x0800ee81
 800ee20:	0800ee81 	.word	0x0800ee81
 800ee24:	0800ee81 	.word	0x0800ee81
 800ee28:	0800ee81 	.word	0x0800ee81
 800ee2c:	0800ee81 	.word	0x0800ee81
 800ee30:	0800ee81 	.word	0x0800ee81
 800ee34:	0800ee81 	.word	0x0800ee81
 800ee38:	0800ee81 	.word	0x0800ee81
 800ee3c:	0800ee81 	.word	0x0800ee81
 800ee40:	0800ee81 	.word	0x0800ee81
 800ee44:	0800ee81 	.word	0x0800ee81
 800ee48:	0800ee81 	.word	0x0800ee81
 800ee4c:	0800ee81 	.word	0x0800ee81
 800ee50:	0800ee81 	.word	0x0800ee81
 800ee54:	0800ee81 	.word	0x0800ee81
 800ee58:	0800ee81 	.word	0x0800ee81
 800ee5c:	0800ee81 	.word	0x0800ee81
 800ee60:	0800ee81 	.word	0x0800ee81
 800ee64:	0800ee81 	.word	0x0800ee81
 800ee68:	0800ee81 	.word	0x0800ee81
 800ee6c:	0800ee81 	.word	0x0800ee81
 800ee70:	0800ee81 	.word	0x0800ee81
 800ee74:	0800ee81 	.word	0x0800ee81
 800ee78:	0800ee81 	.word	0x0800ee81
 800ee7c:	0800ee81 	.word	0x0800ee81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee80:	bf00      	nop
  }

  return (USBD_OK);
 800ee82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee9a:	6879      	ldr	r1, [r7, #4]
 800ee9c:	4805      	ldr	r0, [pc, #20]	; (800eeb4 <CDC_Receive_FS+0x24>)
 800ee9e:	f7fc f80a 	bl	800aeb6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eea2:	4804      	ldr	r0, [pc, #16]	; (800eeb4 <CDC_Receive_FS+0x24>)
 800eea4:	f7fc f820 	bl	800aee8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eea8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3708      	adds	r7, #8
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20004eec 	.word	0x20004eec

0800eeb8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b087      	sub	sp, #28
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eeca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eece:	4618      	mov	r0, r3
 800eed0:	371c      	adds	r7, #28
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr
	...

0800eedc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	4603      	mov	r3, r0
 800eee4:	6039      	str	r1, [r7, #0]
 800eee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	2212      	movs	r2, #18
 800eeec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eeee:	4b03      	ldr	r3, [pc, #12]	; (800eefc <USBD_FS_DeviceDescriptor+0x20>)
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	370c      	adds	r7, #12
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	20000154 	.word	0x20000154

0800ef00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	4603      	mov	r3, r0
 800ef08:	6039      	str	r1, [r7, #0]
 800ef0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	2204      	movs	r2, #4
 800ef10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ef12:	4b03      	ldr	r3, [pc, #12]	; (800ef20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr
 800ef20:	20000168 	.word	0x20000168

0800ef24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	6039      	str	r1, [r7, #0]
 800ef2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef30:	79fb      	ldrb	r3, [r7, #7]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d105      	bne.n	800ef42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef36:	683a      	ldr	r2, [r7, #0]
 800ef38:	4907      	ldr	r1, [pc, #28]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef3a:	4808      	ldr	r0, [pc, #32]	; (800ef5c <USBD_FS_ProductStrDescriptor+0x38>)
 800ef3c:	f7fd f887 	bl	800c04e <USBD_GetString>
 800ef40:	e004      	b.n	800ef4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef42:	683a      	ldr	r2, [r7, #0]
 800ef44:	4904      	ldr	r1, [pc, #16]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef46:	4805      	ldr	r0, [pc, #20]	; (800ef5c <USBD_FS_ProductStrDescriptor+0x38>)
 800ef48:	f7fd f881 	bl	800c04e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef4c:	4b02      	ldr	r3, [pc, #8]	; (800ef58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	200061bc 	.word	0x200061bc
 800ef5c:	0800f7dc 	.word	0x0800f7dc

0800ef60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	4603      	mov	r3, r0
 800ef68:	6039      	str	r1, [r7, #0]
 800ef6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef6c:	683a      	ldr	r2, [r7, #0]
 800ef6e:	4904      	ldr	r1, [pc, #16]	; (800ef80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef70:	4804      	ldr	r0, [pc, #16]	; (800ef84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef72:	f7fd f86c 	bl	800c04e <USBD_GetString>
  return USBD_StrDesc;
 800ef76:	4b02      	ldr	r3, [pc, #8]	; (800ef80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}
 800ef80:	200061bc 	.word	0x200061bc
 800ef84:	0800f7f4 	.word	0x0800f7f4

0800ef88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	6039      	str	r1, [r7, #0]
 800ef92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	221a      	movs	r2, #26
 800ef98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef9a:	f000 f843 	bl	800f024 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef9e:	4b02      	ldr	r3, [pc, #8]	; (800efa8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}
 800efa8:	2000016c 	.word	0x2000016c

0800efac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	4603      	mov	r3, r0
 800efb4:	6039      	str	r1, [r7, #0]
 800efb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800efb8:	79fb      	ldrb	r3, [r7, #7]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d105      	bne.n	800efca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efbe:	683a      	ldr	r2, [r7, #0]
 800efc0:	4907      	ldr	r1, [pc, #28]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800efc2:	4808      	ldr	r0, [pc, #32]	; (800efe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efc4:	f7fd f843 	bl	800c04e <USBD_GetString>
 800efc8:	e004      	b.n	800efd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efca:	683a      	ldr	r2, [r7, #0]
 800efcc:	4904      	ldr	r1, [pc, #16]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800efce:	4805      	ldr	r0, [pc, #20]	; (800efe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efd0:	f7fd f83d 	bl	800c04e <USBD_GetString>
  }
  return USBD_StrDesc;
 800efd4:	4b02      	ldr	r3, [pc, #8]	; (800efe0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3708      	adds	r7, #8
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	200061bc 	.word	0x200061bc
 800efe4:	0800f808 	.word	0x0800f808

0800efe8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	6039      	str	r1, [r7, #0]
 800eff2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eff4:	79fb      	ldrb	r3, [r7, #7]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d105      	bne.n	800f006 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800effa:	683a      	ldr	r2, [r7, #0]
 800effc:	4907      	ldr	r1, [pc, #28]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800effe:	4808      	ldr	r0, [pc, #32]	; (800f020 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f000:	f7fd f825 	bl	800c04e <USBD_GetString>
 800f004:	e004      	b.n	800f010 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	4904      	ldr	r1, [pc, #16]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f00a:	4805      	ldr	r0, [pc, #20]	; (800f020 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f00c:	f7fd f81f 	bl	800c04e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f010:	4b02      	ldr	r3, [pc, #8]	; (800f01c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f012:	4618      	mov	r0, r3
 800f014:	3708      	adds	r7, #8
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	200061bc 	.word	0x200061bc
 800f020:	0800f814 	.word	0x0800f814

0800f024 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f02a:	4b0f      	ldr	r3, [pc, #60]	; (800f068 <Get_SerialNum+0x44>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f030:	4b0e      	ldr	r3, [pc, #56]	; (800f06c <Get_SerialNum+0x48>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f036:	4b0e      	ldr	r3, [pc, #56]	; (800f070 <Get_SerialNum+0x4c>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4413      	add	r3, r2
 800f042:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d009      	beq.n	800f05e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f04a:	2208      	movs	r2, #8
 800f04c:	4909      	ldr	r1, [pc, #36]	; (800f074 <Get_SerialNum+0x50>)
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f000 f814 	bl	800f07c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f054:	2204      	movs	r2, #4
 800f056:	4908      	ldr	r1, [pc, #32]	; (800f078 <Get_SerialNum+0x54>)
 800f058:	68b8      	ldr	r0, [r7, #8]
 800f05a:	f000 f80f 	bl	800f07c <IntToUnicode>
  }
}
 800f05e:	bf00      	nop
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	1ff1e800 	.word	0x1ff1e800
 800f06c:	1ff1e804 	.word	0x1ff1e804
 800f070:	1ff1e808 	.word	0x1ff1e808
 800f074:	2000016e 	.word	0x2000016e
 800f078:	2000017e 	.word	0x2000017e

0800f07c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b087      	sub	sp, #28
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	4613      	mov	r3, r2
 800f088:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f08a:	2300      	movs	r3, #0
 800f08c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f08e:	2300      	movs	r3, #0
 800f090:	75fb      	strb	r3, [r7, #23]
 800f092:	e027      	b.n	800f0e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	0f1b      	lsrs	r3, r3, #28
 800f098:	2b09      	cmp	r3, #9
 800f09a:	d80b      	bhi.n	800f0b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	0f1b      	lsrs	r3, r3, #28
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
 800f0a4:	005b      	lsls	r3, r3, #1
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	440b      	add	r3, r1
 800f0ac:	3230      	adds	r2, #48	; 0x30
 800f0ae:	b2d2      	uxtb	r2, r2
 800f0b0:	701a      	strb	r2, [r3, #0]
 800f0b2:	e00a      	b.n	800f0ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	0f1b      	lsrs	r3, r3, #28
 800f0b8:	b2da      	uxtb	r2, r3
 800f0ba:	7dfb      	ldrb	r3, [r7, #23]
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	4619      	mov	r1, r3
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	440b      	add	r3, r1
 800f0c4:	3237      	adds	r2, #55	; 0x37
 800f0c6:	b2d2      	uxtb	r2, r2
 800f0c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	011b      	lsls	r3, r3, #4
 800f0ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	4413      	add	r3, r2
 800f0da:	2200      	movs	r2, #0
 800f0dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f0de:	7dfb      	ldrb	r3, [r7, #23]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	75fb      	strb	r3, [r7, #23]
 800f0e4:	7dfa      	ldrb	r2, [r7, #23]
 800f0e6:	79fb      	ldrb	r3, [r7, #7]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d3d3      	bcc.n	800f094 <IntToUnicode+0x18>
  }
}
 800f0ec:	bf00      	nop
 800f0ee:	bf00      	nop
 800f0f0:	371c      	adds	r7, #28
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr
	...

0800f0fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08a      	sub	sp, #40	; 0x28
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f104:	f107 0314 	add.w	r3, r7, #20
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	605a      	str	r2, [r3, #4]
 800f10e:	609a      	str	r2, [r3, #8]
 800f110:	60da      	str	r2, [r3, #12]
 800f112:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a1f      	ldr	r2, [pc, #124]	; (800f198 <HAL_PCD_MspInit+0x9c>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d138      	bne.n	800f190 <HAL_PCD_MspInit+0x94>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800f11e:	f7f5 ff07 	bl	8004f30 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f122:	4b1e      	ldr	r3, [pc, #120]	; (800f19c <HAL_PCD_MspInit+0xa0>)
 800f124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f128:	4a1c      	ldr	r2, [pc, #112]	; (800f19c <HAL_PCD_MspInit+0xa0>)
 800f12a:	f043 0301 	orr.w	r3, r3, #1
 800f12e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f132:	4b1a      	ldr	r3, [pc, #104]	; (800f19c <HAL_PCD_MspInit+0xa0>)
 800f134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f138:	f003 0301 	and.w	r3, r3, #1
 800f13c:	613b      	str	r3, [r7, #16]
 800f13e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f140:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f146:	2302      	movs	r3, #2
 800f148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f14a:	2300      	movs	r3, #0
 800f14c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f14e:	2300      	movs	r3, #0
 800f150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f152:	230a      	movs	r3, #10
 800f154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f156:	f107 0314 	add.w	r3, r7, #20
 800f15a:	4619      	mov	r1, r3
 800f15c:	4810      	ldr	r0, [pc, #64]	; (800f1a0 <HAL_PCD_MspInit+0xa4>)
 800f15e:	f7f4 faaf 	bl	80036c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f162:	4b0e      	ldr	r3, [pc, #56]	; (800f19c <HAL_PCD_MspInit+0xa0>)
 800f164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f168:	4a0c      	ldr	r2, [pc, #48]	; (800f19c <HAL_PCD_MspInit+0xa0>)
 800f16a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f16e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f172:	4b0a      	ldr	r3, [pc, #40]	; (800f19c <HAL_PCD_MspInit+0xa0>)
 800f174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f17c:	60fb      	str	r3, [r7, #12]
 800f17e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f180:	2200      	movs	r2, #0
 800f182:	2105      	movs	r1, #5
 800f184:	2065      	movs	r0, #101	; 0x65
 800f186:	f7f2 f84f 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f18a:	2065      	movs	r0, #101	; 0x65
 800f18c:	f7f2 f866 	bl	800125c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f190:	bf00      	nop
 800f192:	3728      	adds	r7, #40	; 0x28
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	40080000 	.word	0x40080000
 800f19c:	58024400 	.word	0x58024400
 800f1a0:	58020000 	.word	0x58020000

0800f1a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	f7fb ff60 	bl	800b080 <USBD_LL_SetupStage>
}
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f1da:	78fa      	ldrb	r2, [r7, #3]
 800f1dc:	6879      	ldr	r1, [r7, #4]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	1a9b      	subs	r3, r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	440b      	add	r3, r1
 800f1e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	78fb      	ldrb	r3, [r7, #3]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	f7fb ff9a 	bl	800b12a <USBD_LL_DataOutStage>
}
 800f1f6:	bf00      	nop
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b082      	sub	sp, #8
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
 800f206:	460b      	mov	r3, r1
 800f208:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f210:	78fa      	ldrb	r2, [r7, #3]
 800f212:	6879      	ldr	r1, [r7, #4]
 800f214:	4613      	mov	r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	1a9b      	subs	r3, r3, r2
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	440b      	add	r3, r1
 800f21e:	3348      	adds	r3, #72	; 0x48
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	78fb      	ldrb	r3, [r7, #3]
 800f224:	4619      	mov	r1, r3
 800f226:	f7fb ffe3 	bl	800b1f0 <USBD_LL_DataInStage>
}
 800f22a:	bf00      	nop
 800f22c:	3708      	adds	r7, #8
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b082      	sub	sp, #8
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f240:	4618      	mov	r0, r3
 800f242:	f7fc f8f7 	bl	800b434 <USBD_LL_SOF>
}
 800f246:	bf00      	nop
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b084      	sub	sp, #16
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f256:	2301      	movs	r3, #1
 800f258:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d102      	bne.n	800f268 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f262:	2300      	movs	r3, #0
 800f264:	73fb      	strb	r3, [r7, #15]
 800f266:	e008      	b.n	800f27a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d102      	bne.n	800f276 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f270:	2301      	movs	r3, #1
 800f272:	73fb      	strb	r3, [r7, #15]
 800f274:	e001      	b.n	800f27a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f276:	f7f1 fc4d 	bl	8000b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f280:	7bfa      	ldrb	r2, [r7, #15]
 800f282:	4611      	mov	r1, r2
 800f284:	4618      	mov	r0, r3
 800f286:	f7fc f897 	bl	800b3b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f290:	4618      	mov	r0, r3
 800f292:	f7fc f843 	bl	800b31c <USBD_LL_Reset>
}
 800f296:	bf00      	nop
 800f298:	3710      	adds	r7, #16
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
	...

0800f2a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fc f892 	bl	800b3d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	6812      	ldr	r2, [r2, #0]
 800f2c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f2c6:	f043 0301 	orr.w	r3, r3, #1
 800f2ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6a1b      	ldr	r3, [r3, #32]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d005      	beq.n	800f2e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2d4:	4b04      	ldr	r3, [pc, #16]	; (800f2e8 <HAL_PCD_SuspendCallback+0x48>)
 800f2d6:	691b      	ldr	r3, [r3, #16]
 800f2d8:	4a03      	ldr	r2, [pc, #12]	; (800f2e8 <HAL_PCD_SuspendCallback+0x48>)
 800f2da:	f043 0306 	orr.w	r3, r3, #6
 800f2de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2e0:	bf00      	nop
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	e000ed00 	.word	0xe000ed00

0800f2ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fc f882 	bl	800b404 <USBD_LL_Resume>
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	460b      	mov	r3, r1
 800f312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f31a:	78fa      	ldrb	r2, [r7, #3]
 800f31c:	4611      	mov	r1, r2
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fc f8d0 	bl	800b4c4 <USBD_LL_IsoOUTIncomplete>
}
 800f324:	bf00      	nop
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	460b      	mov	r3, r1
 800f336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f33e:	78fa      	ldrb	r2, [r7, #3]
 800f340:	4611      	mov	r1, r2
 800f342:	4618      	mov	r0, r3
 800f344:	f7fc f898 	bl	800b478 <USBD_LL_IsoINIncomplete>
}
 800f348:	bf00      	nop
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fc f8d6 	bl	800b510 <USBD_LL_DevConnected>
}
 800f364:	bf00      	nop
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fc f8d3 	bl	800b526 <USBD_LL_DevDisconnected>
}
 800f380:	bf00      	nop
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d13e      	bne.n	800f416 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f398:	4a21      	ldr	r2, [pc, #132]	; (800f420 <USBD_LL_Init+0x98>)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a1f      	ldr	r2, [pc, #124]	; (800f420 <USBD_LL_Init+0x98>)
 800f3a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f3a8:	4b1d      	ldr	r3, [pc, #116]	; (800f420 <USBD_LL_Init+0x98>)
 800f3aa:	4a1e      	ldr	r2, [pc, #120]	; (800f424 <USBD_LL_Init+0x9c>)
 800f3ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f3ae:	4b1c      	ldr	r3, [pc, #112]	; (800f420 <USBD_LL_Init+0x98>)
 800f3b0:	2209      	movs	r2, #9
 800f3b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f3b4:	4b1a      	ldr	r3, [pc, #104]	; (800f420 <USBD_LL_Init+0x98>)
 800f3b6:	2202      	movs	r2, #2
 800f3b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3ba:	4b19      	ldr	r3, [pc, #100]	; (800f420 <USBD_LL_Init+0x98>)
 800f3bc:	2200      	movs	r2, #0
 800f3be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f3c0:	4b17      	ldr	r3, [pc, #92]	; (800f420 <USBD_LL_Init+0x98>)
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3c6:	4b16      	ldr	r3, [pc, #88]	; (800f420 <USBD_LL_Init+0x98>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f3cc:	4b14      	ldr	r3, [pc, #80]	; (800f420 <USBD_LL_Init+0x98>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3d2:	4b13      	ldr	r3, [pc, #76]	; (800f420 <USBD_LL_Init+0x98>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f3d8:	4b11      	ldr	r3, [pc, #68]	; (800f420 <USBD_LL_Init+0x98>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3de:	4b10      	ldr	r3, [pc, #64]	; (800f420 <USBD_LL_Init+0x98>)
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3e4:	4b0e      	ldr	r3, [pc, #56]	; (800f420 <USBD_LL_Init+0x98>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3ea:	480d      	ldr	r0, [pc, #52]	; (800f420 <USBD_LL_Init+0x98>)
 800f3ec:	f7f4 fb6a 	bl	8003ac4 <HAL_PCD_Init>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d001      	beq.n	800f3fa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f3f6:	f7f1 fb8d 	bl	8000b14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3fa:	2180      	movs	r1, #128	; 0x80
 800f3fc:	4808      	ldr	r0, [pc, #32]	; (800f420 <USBD_LL_Init+0x98>)
 800f3fe:	f7f5 fcfc 	bl	8004dfa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f402:	2240      	movs	r2, #64	; 0x40
 800f404:	2100      	movs	r1, #0
 800f406:	4806      	ldr	r0, [pc, #24]	; (800f420 <USBD_LL_Init+0x98>)
 800f408:	f7f5 fcb0 	bl	8004d6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f40c:	2280      	movs	r2, #128	; 0x80
 800f40e:	2101      	movs	r1, #1
 800f410:	4803      	ldr	r0, [pc, #12]	; (800f420 <USBD_LL_Init+0x98>)
 800f412:	f7f5 fcab 	bl	8004d6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f416:	2300      	movs	r3, #0
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3708      	adds	r7, #8
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	200063bc 	.word	0x200063bc
 800f424:	40080000 	.word	0x40080000

0800f428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f430:	2300      	movs	r3, #0
 800f432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f434:	2300      	movs	r3, #0
 800f436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f43e:	4618      	mov	r0, r3
 800f440:	f7f4 fc64 	bl	8003d0c <HAL_PCD_Start>
 800f444:	4603      	mov	r3, r0
 800f446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f448:	7bfb      	ldrb	r3, [r7, #15]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 f942 	bl	800f6d4 <USBD_Get_USB_Status>
 800f450:	4603      	mov	r3, r0
 800f452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f454:	7bbb      	ldrb	r3, [r7, #14]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b084      	sub	sp, #16
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	4608      	mov	r0, r1
 800f468:	4611      	mov	r1, r2
 800f46a:	461a      	mov	r2, r3
 800f46c:	4603      	mov	r3, r0
 800f46e:	70fb      	strb	r3, [r7, #3]
 800f470:	460b      	mov	r3, r1
 800f472:	70bb      	strb	r3, [r7, #2]
 800f474:	4613      	mov	r3, r2
 800f476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f478:	2300      	movs	r3, #0
 800f47a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f486:	78bb      	ldrb	r3, [r7, #2]
 800f488:	883a      	ldrh	r2, [r7, #0]
 800f48a:	78f9      	ldrb	r1, [r7, #3]
 800f48c:	f7f5 f875 	bl	800457a <HAL_PCD_EP_Open>
 800f490:	4603      	mov	r3, r0
 800f492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f494:	7bfb      	ldrb	r3, [r7, #15]
 800f496:	4618      	mov	r0, r3
 800f498:	f000 f91c 	bl	800f6d4 <USBD_Get_USB_Status>
 800f49c:	4603      	mov	r3, r0
 800f49e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}

0800f4aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b084      	sub	sp, #16
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	6078      	str	r0, [r7, #4]
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4c4:	78fa      	ldrb	r2, [r7, #3]
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7f5 f8be 	bl	800464a <HAL_PCD_EP_Close>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4d2:	7bfb      	ldrb	r3, [r7, #15]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 f8fd 	bl	800f6d4 <USBD_Get_USB_Status>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f502:	78fa      	ldrb	r2, [r7, #3]
 800f504:	4611      	mov	r1, r2
 800f506:	4618      	mov	r0, r3
 800f508:	f7f5 f996 	bl	8004838 <HAL_PCD_EP_SetStall>
 800f50c:	4603      	mov	r3, r0
 800f50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	4618      	mov	r0, r3
 800f514:	f000 f8de 	bl	800f6d4 <USBD_Get_USB_Status>
 800f518:	4603      	mov	r3, r0
 800f51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3710      	adds	r7, #16
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b084      	sub	sp, #16
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	460b      	mov	r3, r1
 800f530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f532:	2300      	movs	r3, #0
 800f534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f536:	2300      	movs	r3, #0
 800f538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f540:	78fa      	ldrb	r2, [r7, #3]
 800f542:	4611      	mov	r1, r2
 800f544:	4618      	mov	r0, r3
 800f546:	f7f5 f9db 	bl	8004900 <HAL_PCD_EP_ClrStall>
 800f54a:	4603      	mov	r3, r0
 800f54c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f54e:	7bfb      	ldrb	r3, [r7, #15]
 800f550:	4618      	mov	r0, r3
 800f552:	f000 f8bf 	bl	800f6d4 <USBD_Get_USB_Status>
 800f556:	4603      	mov	r3, r0
 800f558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f55a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3710      	adds	r7, #16
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	460b      	mov	r3, r1
 800f56e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	da0b      	bge.n	800f598 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f580:	78fb      	ldrb	r3, [r7, #3]
 800f582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	4613      	mov	r3, r2
 800f58a:	00db      	lsls	r3, r3, #3
 800f58c:	1a9b      	subs	r3, r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	440b      	add	r3, r1
 800f592:	333e      	adds	r3, #62	; 0x3e
 800f594:	781b      	ldrb	r3, [r3, #0]
 800f596:	e00b      	b.n	800f5b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f598:	78fb      	ldrb	r3, [r7, #3]
 800f59a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f59e:	68f9      	ldr	r1, [r7, #12]
 800f5a0:	4613      	mov	r3, r2
 800f5a2:	00db      	lsls	r3, r3, #3
 800f5a4:	1a9b      	subs	r3, r3, r2
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	440b      	add	r3, r1
 800f5aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3714      	adds	r7, #20
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f5d6:	78fa      	ldrb	r2, [r7, #3]
 800f5d8:	4611      	mov	r1, r2
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f4 ffa8 	bl	8004530 <HAL_PCD_SetAddress>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5e4:	7bfb      	ldrb	r3, [r7, #15]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f000 f874 	bl	800f6d4 <USBD_Get_USB_Status>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b086      	sub	sp, #24
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	60f8      	str	r0, [r7, #12]
 800f602:	607a      	str	r2, [r7, #4]
 800f604:	603b      	str	r3, [r7, #0]
 800f606:	460b      	mov	r3, r1
 800f608:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f60a:	2300      	movs	r3, #0
 800f60c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f60e:	2300      	movs	r3, #0
 800f610:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f618:	7af9      	ldrb	r1, [r7, #11]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	f7f5 f8c1 	bl	80047a4 <HAL_PCD_EP_Transmit>
 800f622:	4603      	mov	r3, r0
 800f624:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	4618      	mov	r0, r3
 800f62a:	f000 f853 	bl	800f6d4 <USBD_Get_USB_Status>
 800f62e:	4603      	mov	r3, r0
 800f630:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f632:	7dbb      	ldrb	r3, [r7, #22]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3718      	adds	r7, #24
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b086      	sub	sp, #24
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	607a      	str	r2, [r7, #4]
 800f646:	603b      	str	r3, [r7, #0]
 800f648:	460b      	mov	r3, r1
 800f64a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f64c:	2300      	movs	r3, #0
 800f64e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f65a:	7af9      	ldrb	r1, [r7, #11]
 800f65c:	683b      	ldr	r3, [r7, #0]
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	f7f5 f83d 	bl	80046de <HAL_PCD_EP_Receive>
 800f664:	4603      	mov	r3, r0
 800f666:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f668:	7dfb      	ldrb	r3, [r7, #23]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 f832 	bl	800f6d4 <USBD_Get_USB_Status>
 800f670:	4603      	mov	r3, r0
 800f672:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f674:	7dbb      	ldrb	r3, [r7, #22]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3718      	adds	r7, #24
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b082      	sub	sp, #8
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
 800f686:	460b      	mov	r3, r1
 800f688:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f690:	78fa      	ldrb	r2, [r7, #3]
 800f692:	4611      	mov	r1, r2
 800f694:	4618      	mov	r0, r3
 800f696:	f7f5 f86d 	bl	8004774 <HAL_PCD_EP_GetRxCount>
 800f69a:	4603      	mov	r3, r0
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f6ac:	4b03      	ldr	r3, [pc, #12]	; (800f6bc <USBD_static_malloc+0x18>)
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	370c      	adds	r7, #12
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	20004ab8 	.word	0x20004ab8

0800f6c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]

}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6e2:	79fb      	ldrb	r3, [r7, #7]
 800f6e4:	2b03      	cmp	r3, #3
 800f6e6:	d817      	bhi.n	800f718 <USBD_Get_USB_Status+0x44>
 800f6e8:	a201      	add	r2, pc, #4	; (adr r2, 800f6f0 <USBD_Get_USB_Status+0x1c>)
 800f6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ee:	bf00      	nop
 800f6f0:	0800f701 	.word	0x0800f701
 800f6f4:	0800f707 	.word	0x0800f707
 800f6f8:	0800f70d 	.word	0x0800f70d
 800f6fc:	0800f713 	.word	0x0800f713
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f700:	2300      	movs	r3, #0
 800f702:	73fb      	strb	r3, [r7, #15]
    break;
 800f704:	e00b      	b.n	800f71e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f706:	2303      	movs	r3, #3
 800f708:	73fb      	strb	r3, [r7, #15]
    break;
 800f70a:	e008      	b.n	800f71e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f70c:	2301      	movs	r3, #1
 800f70e:	73fb      	strb	r3, [r7, #15]
    break;
 800f710:	e005      	b.n	800f71e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f712:	2303      	movs	r3, #3
 800f714:	73fb      	strb	r3, [r7, #15]
    break;
 800f716:	e002      	b.n	800f71e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f718:	2303      	movs	r3, #3
 800f71a:	73fb      	strb	r3, [r7, #15]
    break;
 800f71c:	bf00      	nop
  }
  return usb_status;
 800f71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f720:	4618      	mov	r0, r3
 800f722:	3714      	adds	r7, #20
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr

0800f72c <__libc_init_array>:
 800f72c:	b570      	push	{r4, r5, r6, lr}
 800f72e:	4d0d      	ldr	r5, [pc, #52]	; (800f764 <__libc_init_array+0x38>)
 800f730:	4c0d      	ldr	r4, [pc, #52]	; (800f768 <__libc_init_array+0x3c>)
 800f732:	1b64      	subs	r4, r4, r5
 800f734:	10a4      	asrs	r4, r4, #2
 800f736:	2600      	movs	r6, #0
 800f738:	42a6      	cmp	r6, r4
 800f73a:	d109      	bne.n	800f750 <__libc_init_array+0x24>
 800f73c:	4d0b      	ldr	r5, [pc, #44]	; (800f76c <__libc_init_array+0x40>)
 800f73e:	4c0c      	ldr	r4, [pc, #48]	; (800f770 <__libc_init_array+0x44>)
 800f740:	f000 f82e 	bl	800f7a0 <_init>
 800f744:	1b64      	subs	r4, r4, r5
 800f746:	10a4      	asrs	r4, r4, #2
 800f748:	2600      	movs	r6, #0
 800f74a:	42a6      	cmp	r6, r4
 800f74c:	d105      	bne.n	800f75a <__libc_init_array+0x2e>
 800f74e:	bd70      	pop	{r4, r5, r6, pc}
 800f750:	f855 3b04 	ldr.w	r3, [r5], #4
 800f754:	4798      	blx	r3
 800f756:	3601      	adds	r6, #1
 800f758:	e7ee      	b.n	800f738 <__libc_init_array+0xc>
 800f75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f75e:	4798      	blx	r3
 800f760:	3601      	adds	r6, #1
 800f762:	e7f2      	b.n	800f74a <__libc_init_array+0x1e>
 800f764:	0800f890 	.word	0x0800f890
 800f768:	0800f890 	.word	0x0800f890
 800f76c:	0800f890 	.word	0x0800f890
 800f770:	0800f894 	.word	0x0800f894

0800f774 <memcpy>:
 800f774:	440a      	add	r2, r1
 800f776:	4291      	cmp	r1, r2
 800f778:	f100 33ff 	add.w	r3, r0, #4294967295
 800f77c:	d100      	bne.n	800f780 <memcpy+0xc>
 800f77e:	4770      	bx	lr
 800f780:	b510      	push	{r4, lr}
 800f782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f78a:	4291      	cmp	r1, r2
 800f78c:	d1f9      	bne.n	800f782 <memcpy+0xe>
 800f78e:	bd10      	pop	{r4, pc}

0800f790 <memset>:
 800f790:	4402      	add	r2, r0
 800f792:	4603      	mov	r3, r0
 800f794:	4293      	cmp	r3, r2
 800f796:	d100      	bne.n	800f79a <memset+0xa>
 800f798:	4770      	bx	lr
 800f79a:	f803 1b01 	strb.w	r1, [r3], #1
 800f79e:	e7f9      	b.n	800f794 <memset+0x4>

0800f7a0 <_init>:
 800f7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a2:	bf00      	nop
 800f7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7a6:	bc08      	pop	{r3}
 800f7a8:	469e      	mov	lr, r3
 800f7aa:	4770      	bx	lr

0800f7ac <_fini>:
 800f7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ae:	bf00      	nop
 800f7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7b2:	bc08      	pop	{r3}
 800f7b4:	469e      	mov	lr, r3
 800f7b6:	4770      	bx	lr
