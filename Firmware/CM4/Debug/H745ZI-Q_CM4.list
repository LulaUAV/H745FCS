
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135c0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08113860  08113860  00023860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08113ce4  08113ce4  00023ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08113cec  08113cec  00023cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08113cf0  08113cf0  00023cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  10000000  08113cf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006db4  100001e4  08113ed8  000301e4  2**2
                  ALLOC
  8 .RAM_D3       00000000  38000000  38000000  000301e4  2**0
                  CONTENTS
  9 ._user_heap_stack 00000600  10006f98  10006f98  00036f98  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004f284  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000807b  00000000  00000000  0007f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000028d0  00000000  00000000  00087518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002618  00000000  00000000  00089de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004491b  00000000  00000000  0008c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003682d  00000000  00000000  000d0d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ae488  00000000  00000000  00107548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002b59d0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000bca4  00000000  00000000  002b5a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e4 	.word	0x100001e4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08113848 	.word	0x08113848

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e8 	.word	0x100001e8
 81002dc:	08113848 	.word	0x08113848

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_uldivmod>:
 8100cb8:	b953      	cbnz	r3, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cba:	b94a      	cbnz	r2, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bf08      	it	eq
 8100cc0:	2800      	cmpeq	r0, #0
 8100cc2:	bf1c      	itt	ne
 8100cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100ccc:	f000 b96e 	b.w	8100fac <__aeabi_idiv0>
 8100cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100cd8:	f000 f806 	bl	8100ce8 <__udivmoddi4>
 8100cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ce4:	b004      	add	sp, #16
 8100ce6:	4770      	bx	lr

08100ce8 <__udivmoddi4>:
 8100ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cec:	9d08      	ldr	r5, [sp, #32]
 8100cee:	4604      	mov	r4, r0
 8100cf0:	468c      	mov	ip, r1
 8100cf2:	2b00      	cmp	r3, #0
 8100cf4:	f040 8083 	bne.w	8100dfe <__udivmoddi4+0x116>
 8100cf8:	428a      	cmp	r2, r1
 8100cfa:	4617      	mov	r7, r2
 8100cfc:	d947      	bls.n	8100d8e <__udivmoddi4+0xa6>
 8100cfe:	fab2 f282 	clz	r2, r2
 8100d02:	b142      	cbz	r2, 8100d16 <__udivmoddi4+0x2e>
 8100d04:	f1c2 0020 	rsb	r0, r2, #32
 8100d08:	fa24 f000 	lsr.w	r0, r4, r0
 8100d0c:	4091      	lsls	r1, r2
 8100d0e:	4097      	lsls	r7, r2
 8100d10:	ea40 0c01 	orr.w	ip, r0, r1
 8100d14:	4094      	lsls	r4, r2
 8100d16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100d1a:	0c23      	lsrs	r3, r4, #16
 8100d1c:	fbbc f6f8 	udiv	r6, ip, r8
 8100d20:	fa1f fe87 	uxth.w	lr, r7
 8100d24:	fb08 c116 	mls	r1, r8, r6, ip
 8100d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d2c:	fb06 f10e 	mul.w	r1, r6, lr
 8100d30:	4299      	cmp	r1, r3
 8100d32:	d909      	bls.n	8100d48 <__udivmoddi4+0x60>
 8100d34:	18fb      	adds	r3, r7, r3
 8100d36:	f106 30ff 	add.w	r0, r6, #4294967295
 8100d3a:	f080 8119 	bcs.w	8100f70 <__udivmoddi4+0x288>
 8100d3e:	4299      	cmp	r1, r3
 8100d40:	f240 8116 	bls.w	8100f70 <__udivmoddi4+0x288>
 8100d44:	3e02      	subs	r6, #2
 8100d46:	443b      	add	r3, r7
 8100d48:	1a5b      	subs	r3, r3, r1
 8100d4a:	b2a4      	uxth	r4, r4
 8100d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100d50:	fb08 3310 	mls	r3, r8, r0, r3
 8100d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100d58:	fb00 fe0e 	mul.w	lr, r0, lr
 8100d5c:	45a6      	cmp	lr, r4
 8100d5e:	d909      	bls.n	8100d74 <__udivmoddi4+0x8c>
 8100d60:	193c      	adds	r4, r7, r4
 8100d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8100d66:	f080 8105 	bcs.w	8100f74 <__udivmoddi4+0x28c>
 8100d6a:	45a6      	cmp	lr, r4
 8100d6c:	f240 8102 	bls.w	8100f74 <__udivmoddi4+0x28c>
 8100d70:	3802      	subs	r0, #2
 8100d72:	443c      	add	r4, r7
 8100d74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100d78:	eba4 040e 	sub.w	r4, r4, lr
 8100d7c:	2600      	movs	r6, #0
 8100d7e:	b11d      	cbz	r5, 8100d88 <__udivmoddi4+0xa0>
 8100d80:	40d4      	lsrs	r4, r2
 8100d82:	2300      	movs	r3, #0
 8100d84:	e9c5 4300 	strd	r4, r3, [r5]
 8100d88:	4631      	mov	r1, r6
 8100d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d8e:	b902      	cbnz	r2, 8100d92 <__udivmoddi4+0xaa>
 8100d90:	deff      	udf	#255	; 0xff
 8100d92:	fab2 f282 	clz	r2, r2
 8100d96:	2a00      	cmp	r2, #0
 8100d98:	d150      	bne.n	8100e3c <__udivmoddi4+0x154>
 8100d9a:	1bcb      	subs	r3, r1, r7
 8100d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100da0:	fa1f f887 	uxth.w	r8, r7
 8100da4:	2601      	movs	r6, #1
 8100da6:	fbb3 fcfe 	udiv	ip, r3, lr
 8100daa:	0c21      	lsrs	r1, r4, #16
 8100dac:	fb0e 331c 	mls	r3, lr, ip, r3
 8100db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100db4:	fb08 f30c 	mul.w	r3, r8, ip
 8100db8:	428b      	cmp	r3, r1
 8100dba:	d907      	bls.n	8100dcc <__udivmoddi4+0xe4>
 8100dbc:	1879      	adds	r1, r7, r1
 8100dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100dc2:	d202      	bcs.n	8100dca <__udivmoddi4+0xe2>
 8100dc4:	428b      	cmp	r3, r1
 8100dc6:	f200 80e9 	bhi.w	8100f9c <__udivmoddi4+0x2b4>
 8100dca:	4684      	mov	ip, r0
 8100dcc:	1ac9      	subs	r1, r1, r3
 8100dce:	b2a3      	uxth	r3, r4
 8100dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8100dd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8100dd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100ddc:	fb08 f800 	mul.w	r8, r8, r0
 8100de0:	45a0      	cmp	r8, r4
 8100de2:	d907      	bls.n	8100df4 <__udivmoddi4+0x10c>
 8100de4:	193c      	adds	r4, r7, r4
 8100de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100dea:	d202      	bcs.n	8100df2 <__udivmoddi4+0x10a>
 8100dec:	45a0      	cmp	r8, r4
 8100dee:	f200 80d9 	bhi.w	8100fa4 <__udivmoddi4+0x2bc>
 8100df2:	4618      	mov	r0, r3
 8100df4:	eba4 0408 	sub.w	r4, r4, r8
 8100df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100dfc:	e7bf      	b.n	8100d7e <__udivmoddi4+0x96>
 8100dfe:	428b      	cmp	r3, r1
 8100e00:	d909      	bls.n	8100e16 <__udivmoddi4+0x12e>
 8100e02:	2d00      	cmp	r5, #0
 8100e04:	f000 80b1 	beq.w	8100f6a <__udivmoddi4+0x282>
 8100e08:	2600      	movs	r6, #0
 8100e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8100e0e:	4630      	mov	r0, r6
 8100e10:	4631      	mov	r1, r6
 8100e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e16:	fab3 f683 	clz	r6, r3
 8100e1a:	2e00      	cmp	r6, #0
 8100e1c:	d14a      	bne.n	8100eb4 <__udivmoddi4+0x1cc>
 8100e1e:	428b      	cmp	r3, r1
 8100e20:	d302      	bcc.n	8100e28 <__udivmoddi4+0x140>
 8100e22:	4282      	cmp	r2, r0
 8100e24:	f200 80b8 	bhi.w	8100f98 <__udivmoddi4+0x2b0>
 8100e28:	1a84      	subs	r4, r0, r2
 8100e2a:	eb61 0103 	sbc.w	r1, r1, r3
 8100e2e:	2001      	movs	r0, #1
 8100e30:	468c      	mov	ip, r1
 8100e32:	2d00      	cmp	r5, #0
 8100e34:	d0a8      	beq.n	8100d88 <__udivmoddi4+0xa0>
 8100e36:	e9c5 4c00 	strd	r4, ip, [r5]
 8100e3a:	e7a5      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100e3c:	f1c2 0320 	rsb	r3, r2, #32
 8100e40:	fa20 f603 	lsr.w	r6, r0, r3
 8100e44:	4097      	lsls	r7, r2
 8100e46:	fa01 f002 	lsl.w	r0, r1, r2
 8100e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100e4e:	40d9      	lsrs	r1, r3
 8100e50:	4330      	orrs	r0, r6
 8100e52:	0c03      	lsrs	r3, r0, #16
 8100e54:	fbb1 f6fe 	udiv	r6, r1, lr
 8100e58:	fa1f f887 	uxth.w	r8, r7
 8100e5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e64:	fb06 f108 	mul.w	r1, r6, r8
 8100e68:	4299      	cmp	r1, r3
 8100e6a:	fa04 f402 	lsl.w	r4, r4, r2
 8100e6e:	d909      	bls.n	8100e84 <__udivmoddi4+0x19c>
 8100e70:	18fb      	adds	r3, r7, r3
 8100e72:	f106 3cff 	add.w	ip, r6, #4294967295
 8100e76:	f080 808d 	bcs.w	8100f94 <__udivmoddi4+0x2ac>
 8100e7a:	4299      	cmp	r1, r3
 8100e7c:	f240 808a 	bls.w	8100f94 <__udivmoddi4+0x2ac>
 8100e80:	3e02      	subs	r6, #2
 8100e82:	443b      	add	r3, r7
 8100e84:	1a5b      	subs	r3, r3, r1
 8100e86:	b281      	uxth	r1, r0
 8100e88:	fbb3 f0fe 	udiv	r0, r3, lr
 8100e8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8100e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e94:	fb00 f308 	mul.w	r3, r0, r8
 8100e98:	428b      	cmp	r3, r1
 8100e9a:	d907      	bls.n	8100eac <__udivmoddi4+0x1c4>
 8100e9c:	1879      	adds	r1, r7, r1
 8100e9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8100ea2:	d273      	bcs.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea4:	428b      	cmp	r3, r1
 8100ea6:	d971      	bls.n	8100f8c <__udivmoddi4+0x2a4>
 8100ea8:	3802      	subs	r0, #2
 8100eaa:	4439      	add	r1, r7
 8100eac:	1acb      	subs	r3, r1, r3
 8100eae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100eb2:	e778      	b.n	8100da6 <__udivmoddi4+0xbe>
 8100eb4:	f1c6 0c20 	rsb	ip, r6, #32
 8100eb8:	fa03 f406 	lsl.w	r4, r3, r6
 8100ebc:	fa22 f30c 	lsr.w	r3, r2, ip
 8100ec0:	431c      	orrs	r4, r3
 8100ec2:	fa20 f70c 	lsr.w	r7, r0, ip
 8100ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8100eca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100ece:	fa21 f10c 	lsr.w	r1, r1, ip
 8100ed2:	431f      	orrs	r7, r3
 8100ed4:	0c3b      	lsrs	r3, r7, #16
 8100ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8100eda:	fa1f f884 	uxth.w	r8, r4
 8100ede:	fb0e 1119 	mls	r1, lr, r9, r1
 8100ee2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100ee6:	fb09 fa08 	mul.w	sl, r9, r8
 8100eea:	458a      	cmp	sl, r1
 8100eec:	fa02 f206 	lsl.w	r2, r2, r6
 8100ef0:	fa00 f306 	lsl.w	r3, r0, r6
 8100ef4:	d908      	bls.n	8100f08 <__udivmoddi4+0x220>
 8100ef6:	1861      	adds	r1, r4, r1
 8100ef8:	f109 30ff 	add.w	r0, r9, #4294967295
 8100efc:	d248      	bcs.n	8100f90 <__udivmoddi4+0x2a8>
 8100efe:	458a      	cmp	sl, r1
 8100f00:	d946      	bls.n	8100f90 <__udivmoddi4+0x2a8>
 8100f02:	f1a9 0902 	sub.w	r9, r9, #2
 8100f06:	4421      	add	r1, r4
 8100f08:	eba1 010a 	sub.w	r1, r1, sl
 8100f0c:	b2bf      	uxth	r7, r7
 8100f0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f12:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8100f1a:	fb00 f808 	mul.w	r8, r0, r8
 8100f1e:	45b8      	cmp	r8, r7
 8100f20:	d907      	bls.n	8100f32 <__udivmoddi4+0x24a>
 8100f22:	19e7      	adds	r7, r4, r7
 8100f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f28:	d22e      	bcs.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2a:	45b8      	cmp	r8, r7
 8100f2c:	d92c      	bls.n	8100f88 <__udivmoddi4+0x2a0>
 8100f2e:	3802      	subs	r0, #2
 8100f30:	4427      	add	r7, r4
 8100f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100f36:	eba7 0708 	sub.w	r7, r7, r8
 8100f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8100f3e:	454f      	cmp	r7, r9
 8100f40:	46c6      	mov	lr, r8
 8100f42:	4649      	mov	r1, r9
 8100f44:	d31a      	bcc.n	8100f7c <__udivmoddi4+0x294>
 8100f46:	d017      	beq.n	8100f78 <__udivmoddi4+0x290>
 8100f48:	b15d      	cbz	r5, 8100f62 <__udivmoddi4+0x27a>
 8100f4a:	ebb3 020e 	subs.w	r2, r3, lr
 8100f4e:	eb67 0701 	sbc.w	r7, r7, r1
 8100f52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100f56:	40f2      	lsrs	r2, r6
 8100f58:	ea4c 0202 	orr.w	r2, ip, r2
 8100f5c:	40f7      	lsrs	r7, r6
 8100f5e:	e9c5 2700 	strd	r2, r7, [r5]
 8100f62:	2600      	movs	r6, #0
 8100f64:	4631      	mov	r1, r6
 8100f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f6a:	462e      	mov	r6, r5
 8100f6c:	4628      	mov	r0, r5
 8100f6e:	e70b      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100f70:	4606      	mov	r6, r0
 8100f72:	e6e9      	b.n	8100d48 <__udivmoddi4+0x60>
 8100f74:	4618      	mov	r0, r3
 8100f76:	e6fd      	b.n	8100d74 <__udivmoddi4+0x8c>
 8100f78:	4543      	cmp	r3, r8
 8100f7a:	d2e5      	bcs.n	8100f48 <__udivmoddi4+0x260>
 8100f7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8100f80:	eb69 0104 	sbc.w	r1, r9, r4
 8100f84:	3801      	subs	r0, #1
 8100f86:	e7df      	b.n	8100f48 <__udivmoddi4+0x260>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	e7d2      	b.n	8100f32 <__udivmoddi4+0x24a>
 8100f8c:	4660      	mov	r0, ip
 8100f8e:	e78d      	b.n	8100eac <__udivmoddi4+0x1c4>
 8100f90:	4681      	mov	r9, r0
 8100f92:	e7b9      	b.n	8100f08 <__udivmoddi4+0x220>
 8100f94:	4666      	mov	r6, ip
 8100f96:	e775      	b.n	8100e84 <__udivmoddi4+0x19c>
 8100f98:	4630      	mov	r0, r6
 8100f9a:	e74a      	b.n	8100e32 <__udivmoddi4+0x14a>
 8100f9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8100fa0:	4439      	add	r1, r7
 8100fa2:	e713      	b.n	8100dcc <__udivmoddi4+0xe4>
 8100fa4:	3802      	subs	r0, #2
 8100fa6:	443c      	add	r4, r7
 8100fa8:	e724      	b.n	8100df4 <__udivmoddi4+0x10c>
 8100faa:	bf00      	nop

08100fac <__aeabi_idiv0>:
 8100fac:	4770      	bx	lr
 8100fae:	bf00      	nop

08100fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fb0:	b480      	push	{r7}
 8100fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fb4:	4b0b      	ldr	r3, [pc, #44]	; (8100fe4 <SystemInit+0x34>)
 8100fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100fba:	4a0a      	ldr	r2, [pc, #40]	; (8100fe4 <SystemInit+0x34>)
 8100fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8100fc4:	4b07      	ldr	r3, [pc, #28]	; (8100fe4 <SystemInit+0x34>)
 8100fc6:	691b      	ldr	r3, [r3, #16]
 8100fc8:	4a06      	ldr	r2, [pc, #24]	; (8100fe4 <SystemInit+0x34>)
 8100fca:	f043 0304 	orr.w	r3, r3, #4
 8100fce:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100fd0:	4b04      	ldr	r3, [pc, #16]	; (8100fe4 <SystemInit+0x34>)
 8100fd2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100fd6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100fd8:	bf00      	nop
 8100fda:	46bd      	mov	sp, r7
 8100fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe0:	4770      	bx	lr
 8100fe2:	bf00      	nop
 8100fe4:	e000ed00 	.word	0xe000ed00

08100fe8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8100fe8:	b580      	push	{r7, lr}
 8100fea:	b08a      	sub	sp, #40	; 0x28
 8100fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100fee:	f107 031c 	add.w	r3, r7, #28
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	601a      	str	r2, [r3, #0]
 8100ff6:	605a      	str	r2, [r3, #4]
 8100ff8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100ffa:	463b      	mov	r3, r7
 8100ffc:	2200      	movs	r2, #0
 8100ffe:	601a      	str	r2, [r3, #0]
 8101000:	605a      	str	r2, [r3, #4]
 8101002:	609a      	str	r2, [r3, #8]
 8101004:	60da      	str	r2, [r3, #12]
 8101006:	611a      	str	r2, [r3, #16]
 8101008:	615a      	str	r2, [r3, #20]
 810100a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 810100c:	4b30      	ldr	r3, [pc, #192]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810100e:	4a31      	ldr	r2, [pc, #196]	; (81010d4 <MX_ADC1_Init+0xec>)
 8101010:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8101012:	4b2f      	ldr	r3, [pc, #188]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101014:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8101018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 810101a:	4b2d      	ldr	r3, [pc, #180]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810101c:	2200      	movs	r2, #0
 810101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8101020:	4b2b      	ldr	r3, [pc, #172]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101022:	2200      	movs	r2, #0
 8101024:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8101026:	4b2a      	ldr	r3, [pc, #168]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101028:	2204      	movs	r2, #4
 810102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 810102c:	4b28      	ldr	r3, [pc, #160]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810102e:	2200      	movs	r2, #0
 8101030:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8101032:	4b27      	ldr	r3, [pc, #156]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101034:	2201      	movs	r2, #1
 8101036:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8101038:	4b25      	ldr	r3, [pc, #148]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810103a:	2201      	movs	r2, #1
 810103c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810103e:	4b24      	ldr	r3, [pc, #144]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101040:	2200      	movs	r2, #0
 8101042:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8101044:	4b22      	ldr	r3, [pc, #136]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101046:	2200      	movs	r2, #0
 8101048:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810104a:	4b21      	ldr	r3, [pc, #132]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810104c:	2200      	movs	r2, #0
 810104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8101050:	4b1f      	ldr	r3, [pc, #124]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101052:	2203      	movs	r2, #3
 8101054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8101056:	4b1e      	ldr	r3, [pc, #120]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101058:	2200      	movs	r2, #0
 810105a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810105c:	4b1c      	ldr	r3, [pc, #112]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810105e:	2200      	movs	r2, #0
 8101060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8101062:	4b1b      	ldr	r3, [pc, #108]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101064:	2200      	movs	r2, #0
 8101066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810106a:	4819      	ldr	r0, [pc, #100]	; (81010d0 <MX_ADC1_Init+0xe8>)
 810106c:	f001 fb34 	bl	81026d8 <HAL_ADC_Init>
 8101070:	4603      	mov	r3, r0
 8101072:	2b00      	cmp	r3, #0
 8101074:	d001      	beq.n	810107a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8101076:	f000 fb55 	bl	8101724 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810107a:	2300      	movs	r3, #0
 810107c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810107e:	f107 031c 	add.w	r3, r7, #28
 8101082:	4619      	mov	r1, r3
 8101084:	4812      	ldr	r0, [pc, #72]	; (81010d0 <MX_ADC1_Init+0xe8>)
 8101086:	f002 fbd1 	bl	810382c <HAL_ADCEx_MultiModeConfigChannel>
 810108a:	4603      	mov	r3, r0
 810108c:	2b00      	cmp	r3, #0
 810108e:	d001      	beq.n	8101094 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8101090:	f000 fb48 	bl	8101724 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8101094:	4b10      	ldr	r3, [pc, #64]	; (81010d8 <MX_ADC1_Init+0xf0>)
 8101096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8101098:	2306      	movs	r3, #6
 810109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810109c:	2300      	movs	r3, #0
 810109e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81010a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81010a6:	2304      	movs	r3, #4
 81010a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81010aa:	2300      	movs	r3, #0
 81010ac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81010ae:	2300      	movs	r3, #0
 81010b0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81010b2:	463b      	mov	r3, r7
 81010b4:	4619      	mov	r1, r3
 81010b6:	4806      	ldr	r0, [pc, #24]	; (81010d0 <MX_ADC1_Init+0xe8>)
 81010b8:	f001 ff06 	bl	8102ec8 <HAL_ADC_ConfigChannel>
 81010bc:	4603      	mov	r3, r0
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d001      	beq.n	81010c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 81010c2:	f000 fb2f 	bl	8101724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81010c6:	bf00      	nop
 81010c8:	3728      	adds	r7, #40	; 0x28
 81010ca:	46bd      	mov	sp, r7
 81010cc:	bd80      	pop	{r7, pc}
 81010ce:	bf00      	nop
 81010d0:	10004b2c 	.word	0x10004b2c
 81010d4:	40022000 	.word	0x40022000
 81010d8:	08600004 	.word	0x08600004

081010dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 81010dc:	b580      	push	{r7, lr}
 81010de:	b08a      	sub	sp, #40	; 0x28
 81010e0:	af00      	add	r7, sp, #0
 81010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010e4:	f107 0314 	add.w	r3, r7, #20
 81010e8:	2200      	movs	r2, #0
 81010ea:	601a      	str	r2, [r3, #0]
 81010ec:	605a      	str	r2, [r3, #4]
 81010ee:	609a      	str	r2, [r3, #8]
 81010f0:	60da      	str	r2, [r3, #12]
 81010f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	681b      	ldr	r3, [r3, #0]
 81010f8:	4a34      	ldr	r2, [pc, #208]	; (81011cc <HAL_ADC_MspInit+0xf0>)
 81010fa:	4293      	cmp	r3, r2
 81010fc:	d162      	bne.n	81011c4 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81010fe:	4b34      	ldr	r3, [pc, #208]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101104:	4a32      	ldr	r2, [pc, #200]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101106:	f043 0320 	orr.w	r3, r3, #32
 810110a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810110e:	4b30      	ldr	r3, [pc, #192]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101114:	f003 0320 	and.w	r3, r3, #32
 8101118:	613b      	str	r3, [r7, #16]
 810111a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 810111c:	4b2c      	ldr	r3, [pc, #176]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101122:	4a2b      	ldr	r2, [pc, #172]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 8101124:	f043 0320 	orr.w	r3, r3, #32
 8101128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810112c:	4b28      	ldr	r3, [pc, #160]	; (81011d0 <HAL_ADC_MspInit+0xf4>)
 810112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101132:	f003 0320 	and.w	r3, r3, #32
 8101136:	60fb      	str	r3, [r7, #12]
 8101138:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 810113a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101140:	2303      	movs	r3, #3
 8101142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101144:	2300      	movs	r3, #0
 8101146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101148:	f107 0314 	add.w	r3, r7, #20
 810114c:	4619      	mov	r1, r3
 810114e:	4821      	ldr	r0, [pc, #132]	; (81011d4 <HAL_ADC_MspInit+0xf8>)
 8101150:	f004 fc46 	bl	81059e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 8101154:	4b20      	ldr	r3, [pc, #128]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101156:	4a21      	ldr	r2, [pc, #132]	; (81011dc <HAL_ADC_MspInit+0x100>)
 8101158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 810115a:	4b1f      	ldr	r3, [pc, #124]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810115c:	2209      	movs	r2, #9
 810115e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101160:	4b1d      	ldr	r3, [pc, #116]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101162:	2200      	movs	r2, #0
 8101164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8101166:	4b1c      	ldr	r3, [pc, #112]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101168:	2200      	movs	r2, #0
 810116a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 810116c:	4b1a      	ldr	r3, [pc, #104]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101174:	4b18      	ldr	r3, [pc, #96]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810117a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 810117c:	4b16      	ldr	r3, [pc, #88]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8101184:	4b14      	ldr	r3, [pc, #80]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101186:	f44f 7280 	mov.w	r2, #256	; 0x100
 810118a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 810118c:	4b12      	ldr	r3, [pc, #72]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810118e:	2200      	movs	r2, #0
 8101190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101192:	4b11      	ldr	r3, [pc, #68]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 8101194:	2200      	movs	r2, #0
 8101196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8101198:	480f      	ldr	r0, [pc, #60]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 810119a:	f002 fd1d 	bl	8103bd8 <HAL_DMA_Init>
 810119e:	4603      	mov	r3, r0
 81011a0:	2b00      	cmp	r3, #0
 81011a2:	d001      	beq.n	81011a8 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 81011a4:	f000 fabe 	bl	8101724 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	4a0b      	ldr	r2, [pc, #44]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011ac:	64da      	str	r2, [r3, #76]	; 0x4c
 81011ae:	4a0a      	ldr	r2, [pc, #40]	; (81011d8 <HAL_ADC_MspInit+0xfc>)
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 81011b4:	2200      	movs	r2, #0
 81011b6:	2105      	movs	r1, #5
 81011b8:	2012      	movs	r0, #18
 81011ba:	f002 fcd1 	bl	8103b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 81011be:	2012      	movs	r0, #18
 81011c0:	f002 fce8 	bl	8103b94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 81011c4:	bf00      	nop
 81011c6:	3728      	adds	r7, #40	; 0x28
 81011c8:	46bd      	mov	sp, r7
 81011ca:	bd80      	pop	{r7, pc}
 81011cc:	40022000 	.word	0x40022000
 81011d0:	58024400 	.word	0x58024400
 81011d4:	58021400 	.word	0x58021400
 81011d8:	10004b90 	.word	0x10004b90
 81011dc:	40020070 	.word	0x40020070

081011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 81011e0:	b580      	push	{r7, lr}
 81011e2:	b082      	sub	sp, #8
 81011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 81011e6:	4b0d      	ldr	r3, [pc, #52]	; (810121c <MX_DMA_Init+0x3c>)
 81011e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011ec:	4a0b      	ldr	r2, [pc, #44]	; (810121c <MX_DMA_Init+0x3c>)
 81011ee:	f043 0301 	orr.w	r3, r3, #1
 81011f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81011f6:	4b09      	ldr	r3, [pc, #36]	; (810121c <MX_DMA_Init+0x3c>)
 81011f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011fc:	f003 0301 	and.w	r3, r3, #1
 8101200:	607b      	str	r3, [r7, #4]
 8101202:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8101204:	2200      	movs	r2, #0
 8101206:	2105      	movs	r1, #5
 8101208:	200f      	movs	r0, #15
 810120a:	f002 fca9 	bl	8103b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 810120e:	200f      	movs	r0, #15
 8101210:	f002 fcc0 	bl	8103b94 <HAL_NVIC_EnableIRQ>

}
 8101214:	bf00      	nop
 8101216:	3708      	adds	r7, #8
 8101218:	46bd      	mov	sp, r7
 810121a:	bd80      	pop	{r7, pc}
 810121c:	58024400 	.word	0x58024400

08101220 <MX_FREERTOS_Init>:

void StartLEDTask(void *argument);


void MX_FREERTOS_Init(void)
{
 8101220:	b580      	push	{r7, lr}
 8101222:	af00      	add	r7, sp, #0

    heartbeatTaskHandle = osThreadNew(StartLEDTask, NULL, &heartbeatTask_attributes);
 8101224:	4a04      	ldr	r2, [pc, #16]	; (8101238 <MX_FREERTOS_Init+0x18>)
 8101226:	2100      	movs	r1, #0
 8101228:	4804      	ldr	r0, [pc, #16]	; (810123c <MX_FREERTOS_Init+0x1c>)
 810122a:	f00c ff08 	bl	810e03e <osThreadNew>
 810122e:	4603      	mov	r3, r0
 8101230:	4a03      	ldr	r2, [pc, #12]	; (8101240 <MX_FREERTOS_Init+0x20>)
 8101232:	6013      	str	r3, [r2, #0]

}
 8101234:	bf00      	nop
 8101236:	bd80      	pop	{r7, pc}
 8101238:	08113898 	.word	0x08113898
 810123c:	08101245 	.word	0x08101245
 8101240:	10004c08 	.word	0x10004c08

08101244 <StartLEDTask>:


void StartLEDTask(void *argument)
{
 8101244:	b580      	push	{r7, lr}
 8101246:	b082      	sub	sp, #8
 8101248:	af00      	add	r7, sp, #0
 810124a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 810124c:	2180      	movs	r1, #128	; 0x80
 810124e:	4804      	ldr	r0, [pc, #16]	; (8101260 <StartLEDTask+0x1c>)
 8101250:	f004 fd8f 	bl	8105d72 <HAL_GPIO_TogglePin>
		osDelay(LED_DT_MS);
 8101254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101258:	4618      	mov	r0, r3
 810125a:	f00c ff82 	bl	810e162 <osDelay>
		HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 810125e:	e7f5      	b.n	810124c <StartLEDTask+0x8>
 8101260:	58021000 	.word	0x58021000

08101264 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8101264:	b580      	push	{r7, lr}
 8101266:	b086      	sub	sp, #24
 8101268:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810126a:	4b30      	ldr	r3, [pc, #192]	; (810132c <MX_GPIO_Init+0xc8>)
 810126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101270:	4a2e      	ldr	r2, [pc, #184]	; (810132c <MX_GPIO_Init+0xc8>)
 8101272:	f043 0301 	orr.w	r3, r3, #1
 8101276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810127a:	4b2c      	ldr	r3, [pc, #176]	; (810132c <MX_GPIO_Init+0xc8>)
 810127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101280:	f003 0301 	and.w	r3, r3, #1
 8101284:	617b      	str	r3, [r7, #20]
 8101286:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101288:	4b28      	ldr	r3, [pc, #160]	; (810132c <MX_GPIO_Init+0xc8>)
 810128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810128e:	4a27      	ldr	r2, [pc, #156]	; (810132c <MX_GPIO_Init+0xc8>)
 8101290:	f043 0320 	orr.w	r3, r3, #32
 8101294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101298:	4b24      	ldr	r3, [pc, #144]	; (810132c <MX_GPIO_Init+0xc8>)
 810129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810129e:	f003 0320 	and.w	r3, r3, #32
 81012a2:	613b      	str	r3, [r7, #16]
 81012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81012a6:	4b21      	ldr	r3, [pc, #132]	; (810132c <MX_GPIO_Init+0xc8>)
 81012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ac:	4a1f      	ldr	r2, [pc, #124]	; (810132c <MX_GPIO_Init+0xc8>)
 81012ae:	f043 0310 	orr.w	r3, r3, #16
 81012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b6:	4b1d      	ldr	r3, [pc, #116]	; (810132c <MX_GPIO_Init+0xc8>)
 81012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012bc:	f003 0310 	and.w	r3, r3, #16
 81012c0:	60fb      	str	r3, [r7, #12]
 81012c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012c4:	4b19      	ldr	r3, [pc, #100]	; (810132c <MX_GPIO_Init+0xc8>)
 81012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ca:	4a18      	ldr	r2, [pc, #96]	; (810132c <MX_GPIO_Init+0xc8>)
 81012cc:	f043 0302 	orr.w	r3, r3, #2
 81012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d4:	4b15      	ldr	r3, [pc, #84]	; (810132c <MX_GPIO_Init+0xc8>)
 81012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012da:	f003 0302 	and.w	r3, r3, #2
 81012de:	60bb      	str	r3, [r7, #8]
 81012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012e2:	4b12      	ldr	r3, [pc, #72]	; (810132c <MX_GPIO_Init+0xc8>)
 81012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e8:	4a10      	ldr	r2, [pc, #64]	; (810132c <MX_GPIO_Init+0xc8>)
 81012ea:	f043 0308 	orr.w	r3, r3, #8
 81012ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012f2:	4b0e      	ldr	r3, [pc, #56]	; (810132c <MX_GPIO_Init+0xc8>)
 81012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f8:	f003 0308 	and.w	r3, r3, #8
 81012fc:	607b      	str	r3, [r7, #4]
 81012fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101300:	4b0a      	ldr	r3, [pc, #40]	; (810132c <MX_GPIO_Init+0xc8>)
 8101302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101306:	4a09      	ldr	r2, [pc, #36]	; (810132c <MX_GPIO_Init+0xc8>)
 8101308:	f043 0304 	orr.w	r3, r3, #4
 810130c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101310:	4b06      	ldr	r3, [pc, #24]	; (810132c <MX_GPIO_Init+0xc8>)
 8101312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101316:	f003 0304 	and.w	r3, r3, #4
 810131a:	603b      	str	r3, [r7, #0]
 810131c:	683b      	ldr	r3, [r7, #0]

  GPIO_Port_Config();
 810131e:	f000 f807 	bl	8101330 <GPIO_Port_Config>


}
 8101322:	bf00      	nop
 8101324:	3718      	adds	r7, #24
 8101326:	46bd      	mov	sp, r7
 8101328:	bd80      	pop	{r7, pc}
 810132a:	bf00      	nop
 810132c:	58024400 	.word	0x58024400

08101330 <GPIO_Port_Config>:

void GPIO_Port_Config(void)
{
 8101330:	b580      	push	{r7, lr}
 8101332:	b086      	sub	sp, #24
 8101334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101336:	1d3b      	adds	r3, r7, #4
 8101338:	2200      	movs	r2, #0
 810133a:	601a      	str	r2, [r3, #0]
 810133c:	605a      	str	r2, [r3, #4]
 810133e:	609a      	str	r2, [r3, #8]
 8101340:	60da      	str	r2, [r3, #12]
 8101342:	611a      	str	r2, [r3, #16]

	// Configure GPIO Pin Output Level:
	//LEDS
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8101344:	2200      	movs	r2, #0
 8101346:	2180      	movs	r1, #128	; 0x80
 8101348:	4827      	ldr	r0, [pc, #156]	; (81013e8 <GPIO_Port_Config+0xb8>)
 810134a:	f004 fcf9 	bl	8105d40 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_A_Pin;
 810134e:	2380      	movs	r3, #128	; 0x80
 8101350:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101352:	2301      	movs	r3, #1
 8101354:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101356:	2300      	movs	r3, #0
 8101358:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810135a:	2300      	movs	r3, #0
 810135c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_A_GPIO_Port, &GPIO_InitStruct);
 810135e:	1d3b      	adds	r3, r7, #4
 8101360:	4619      	mov	r1, r3
 8101362:	4821      	ldr	r0, [pc, #132]	; (81013e8 <GPIO_Port_Config+0xb8>)
 8101364:	f004 fb3c 	bl	81059e0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8101368:	2200      	movs	r2, #0
 810136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 810136e:	481e      	ldr	r0, [pc, #120]	; (81013e8 <GPIO_Port_Config+0xb8>)
 8101370:	f004 fce6 	bl	8105d40 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_B_Pin;
 8101374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101378:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810137a:	2301      	movs	r3, #1
 810137c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 810137e:	2300      	movs	r3, #0
 8101380:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101382:	2300      	movs	r3, #0
 8101384:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8101386:	1d3b      	adds	r3, r7, #4
 8101388:	4619      	mov	r1, r3
 810138a:	4817      	ldr	r0, [pc, #92]	; (81013e8 <GPIO_Port_Config+0xb8>)
 810138c:	f004 fb28 	bl	81059e0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 8101390:	2200      	movs	r2, #0
 8101392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8101396:	4815      	ldr	r0, [pc, #84]	; (81013ec <GPIO_Port_Config+0xbc>)
 8101398:	f004 fcd2 	bl	8105d40 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_C_Pin;
 810139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 81013a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013a2:	2301      	movs	r3, #1
 81013a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013a6:	2300      	movs	r3, #0
 81013a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013aa:	2300      	movs	r3, #0
 81013ac:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_C_GPIO_Port, &GPIO_InitStruct);
 81013ae:	1d3b      	adds	r3, r7, #4
 81013b0:	4619      	mov	r1, r3
 81013b2:	480e      	ldr	r0, [pc, #56]	; (81013ec <GPIO_Port_Config+0xbc>)
 81013b4:	f004 fb14 	bl	81059e0 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 81013b8:	2200      	movs	r2, #0
 81013ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 81013be:	480b      	ldr	r0, [pc, #44]	; (81013ec <GPIO_Port_Config+0xbc>)
 81013c0:	f004 fcbe 	bl	8105d40 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_D_Pin;
 81013c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 81013c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81013ca:	2301      	movs	r3, #1
 81013cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013ce:	2300      	movs	r3, #0
 81013d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013d2:	2300      	movs	r3, #0
 81013d4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_D_GPIO_Port, &GPIO_InitStruct);
 81013d6:	1d3b      	adds	r3, r7, #4
 81013d8:	4619      	mov	r1, r3
 81013da:	4804      	ldr	r0, [pc, #16]	; (81013ec <GPIO_Port_Config+0xbc>)
 81013dc:	f004 fb00 	bl	81059e0 <HAL_GPIO_Init>



}
 81013e0:	bf00      	nop
 81013e2:	3718      	adds	r7, #24
 81013e4:	46bd      	mov	sp, r7
 81013e6:	bd80      	pop	{r7, pc}
 81013e8:	58021000 	.word	0x58021000
 81013ec:	58021400 	.word	0x58021400

081013f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 81013f0:	b580      	push	{r7, lr}
 81013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81013f4:	4b1b      	ldr	r3, [pc, #108]	; (8101464 <MX_I2C1_Init+0x74>)
 81013f6:	4a1c      	ldr	r2, [pc, #112]	; (8101468 <MX_I2C1_Init+0x78>)
 81013f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x302027FF;
 81013fa:	4b1a      	ldr	r3, [pc, #104]	; (8101464 <MX_I2C1_Init+0x74>)
 81013fc:	4a1b      	ldr	r2, [pc, #108]	; (810146c <MX_I2C1_Init+0x7c>)
 81013fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101400:	4b18      	ldr	r3, [pc, #96]	; (8101464 <MX_I2C1_Init+0x74>)
 8101402:	2200      	movs	r2, #0
 8101404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101406:	4b17      	ldr	r3, [pc, #92]	; (8101464 <MX_I2C1_Init+0x74>)
 8101408:	2201      	movs	r2, #1
 810140a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810140c:	4b15      	ldr	r3, [pc, #84]	; (8101464 <MX_I2C1_Init+0x74>)
 810140e:	2200      	movs	r2, #0
 8101410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101412:	4b14      	ldr	r3, [pc, #80]	; (8101464 <MX_I2C1_Init+0x74>)
 8101414:	2200      	movs	r2, #0
 8101416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101418:	4b12      	ldr	r3, [pc, #72]	; (8101464 <MX_I2C1_Init+0x74>)
 810141a:	2200      	movs	r2, #0
 810141c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810141e:	4b11      	ldr	r3, [pc, #68]	; (8101464 <MX_I2C1_Init+0x74>)
 8101420:	2200      	movs	r2, #0
 8101422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101424:	4b0f      	ldr	r3, [pc, #60]	; (8101464 <MX_I2C1_Init+0x74>)
 8101426:	2200      	movs	r2, #0
 8101428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810142a:	480e      	ldr	r0, [pc, #56]	; (8101464 <MX_I2C1_Init+0x74>)
 810142c:	f004 fcf2 	bl	8105e14 <HAL_I2C_Init>
 8101430:	4603      	mov	r3, r0
 8101432:	2b00      	cmp	r3, #0
 8101434:	d001      	beq.n	810143a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101436:	f000 f975 	bl	8101724 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810143a:	2100      	movs	r1, #0
 810143c:	4809      	ldr	r0, [pc, #36]	; (8101464 <MX_I2C1_Init+0x74>)
 810143e:	f004 fd78 	bl	8105f32 <HAL_I2CEx_ConfigAnalogFilter>
 8101442:	4603      	mov	r3, r0
 8101444:	2b00      	cmp	r3, #0
 8101446:	d001      	beq.n	810144c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101448:	f000 f96c 	bl	8101724 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 810144c:	2100      	movs	r1, #0
 810144e:	4805      	ldr	r0, [pc, #20]	; (8101464 <MX_I2C1_Init+0x74>)
 8101450:	f004 fdba 	bl	8105fc8 <HAL_I2CEx_ConfigDigitalFilter>
 8101454:	4603      	mov	r3, r0
 8101456:	2b00      	cmp	r3, #0
 8101458:	d001      	beq.n	810145e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810145a:	f000 f963 	bl	8101724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810145e:	bf00      	nop
 8101460:	bd80      	pop	{r7, pc}
 8101462:	bf00      	nop
 8101464:	10004c0c 	.word	0x10004c0c
 8101468:	40005400 	.word	0x40005400
 810146c:	302027ff 	.word	0x302027ff

08101470 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8101470:	b580      	push	{r7, lr}
 8101472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8101474:	4b1b      	ldr	r3, [pc, #108]	; (81014e4 <MX_I2C2_Init+0x74>)
 8101476:	4a1c      	ldr	r2, [pc, #112]	; (81014e8 <MX_I2C2_Init+0x78>)
 8101478:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 810147a:	4b1a      	ldr	r3, [pc, #104]	; (81014e4 <MX_I2C2_Init+0x74>)
 810147c:	4a1b      	ldr	r2, [pc, #108]	; (81014ec <MX_I2C2_Init+0x7c>)
 810147e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8101480:	4b18      	ldr	r3, [pc, #96]	; (81014e4 <MX_I2C2_Init+0x74>)
 8101482:	2200      	movs	r2, #0
 8101484:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101486:	4b17      	ldr	r3, [pc, #92]	; (81014e4 <MX_I2C2_Init+0x74>)
 8101488:	2201      	movs	r2, #1
 810148a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810148c:	4b15      	ldr	r3, [pc, #84]	; (81014e4 <MX_I2C2_Init+0x74>)
 810148e:	2200      	movs	r2, #0
 8101490:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8101492:	4b14      	ldr	r3, [pc, #80]	; (81014e4 <MX_I2C2_Init+0x74>)
 8101494:	2200      	movs	r2, #0
 8101496:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101498:	4b12      	ldr	r3, [pc, #72]	; (81014e4 <MX_I2C2_Init+0x74>)
 810149a:	2200      	movs	r2, #0
 810149c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810149e:	4b11      	ldr	r3, [pc, #68]	; (81014e4 <MX_I2C2_Init+0x74>)
 81014a0:	2200      	movs	r2, #0
 81014a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81014a4:	4b0f      	ldr	r3, [pc, #60]	; (81014e4 <MX_I2C2_Init+0x74>)
 81014a6:	2200      	movs	r2, #0
 81014a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 81014aa:	480e      	ldr	r0, [pc, #56]	; (81014e4 <MX_I2C2_Init+0x74>)
 81014ac:	f004 fcb2 	bl	8105e14 <HAL_I2C_Init>
 81014b0:	4603      	mov	r3, r0
 81014b2:	2b00      	cmp	r3, #0
 81014b4:	d001      	beq.n	81014ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 81014b6:	f000 f935 	bl	8101724 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81014ba:	2100      	movs	r1, #0
 81014bc:	4809      	ldr	r0, [pc, #36]	; (81014e4 <MX_I2C2_Init+0x74>)
 81014be:	f004 fd38 	bl	8105f32 <HAL_I2CEx_ConfigAnalogFilter>
 81014c2:	4603      	mov	r3, r0
 81014c4:	2b00      	cmp	r3, #0
 81014c6:	d001      	beq.n	81014cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 81014c8:	f000 f92c 	bl	8101724 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 81014cc:	2100      	movs	r1, #0
 81014ce:	4805      	ldr	r0, [pc, #20]	; (81014e4 <MX_I2C2_Init+0x74>)
 81014d0:	f004 fd7a 	bl	8105fc8 <HAL_I2CEx_ConfigDigitalFilter>
 81014d4:	4603      	mov	r3, r0
 81014d6:	2b00      	cmp	r3, #0
 81014d8:	d001      	beq.n	81014de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81014da:	f000 f923 	bl	8101724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81014de:	bf00      	nop
 81014e0:	bd80      	pop	{r7, pc}
 81014e2:	bf00      	nop
 81014e4:	10004c58 	.word	0x10004c58
 81014e8:	40005800 	.word	0x40005800
 81014ec:	307075b1 	.word	0x307075b1

081014f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81014f0:	b580      	push	{r7, lr}
 81014f2:	b0ba      	sub	sp, #232	; 0xe8
 81014f4:	af00      	add	r7, sp, #0
 81014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81014f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81014fc:	2200      	movs	r2, #0
 81014fe:	601a      	str	r2, [r3, #0]
 8101500:	605a      	str	r2, [r3, #4]
 8101502:	609a      	str	r2, [r3, #8]
 8101504:	60da      	str	r2, [r3, #12]
 8101506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101508:	f107 0318 	add.w	r3, r7, #24
 810150c:	22bc      	movs	r2, #188	; 0xbc
 810150e:	2100      	movs	r1, #0
 8101510:	4618      	mov	r0, r3
 8101512:	f00f fccd 	bl	8110eb0 <memset>
  if(i2cHandle->Instance==I2C1)
 8101516:	687b      	ldr	r3, [r7, #4]
 8101518:	681b      	ldr	r3, [r3, #0]
 810151a:	4a49      	ldr	r2, [pc, #292]	; (8101640 <HAL_I2C_MspInit+0x150>)
 810151c:	4293      	cmp	r3, r2
 810151e:	d143      	bne.n	81015a8 <HAL_I2C_MspInit+0xb8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101520:	2308      	movs	r3, #8
 8101522:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101524:	2300      	movs	r3, #0
 8101526:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810152a:	f107 0318 	add.w	r3, r7, #24
 810152e:	4618      	mov	r0, r3
 8101530:	f005 f838 	bl	81065a4 <HAL_RCCEx_PeriphCLKConfig>
 8101534:	4603      	mov	r3, r0
 8101536:	2b00      	cmp	r3, #0
 8101538:	d001      	beq.n	810153e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 810153a:	f000 f8f3 	bl	8101724 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810153e:	4b41      	ldr	r3, [pc, #260]	; (8101644 <HAL_I2C_MspInit+0x154>)
 8101540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101544:	4a3f      	ldr	r2, [pc, #252]	; (8101644 <HAL_I2C_MspInit+0x154>)
 8101546:	f043 0302 	orr.w	r3, r3, #2
 810154a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810154e:	4b3d      	ldr	r3, [pc, #244]	; (8101644 <HAL_I2C_MspInit+0x154>)
 8101550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101554:	f003 0302 	and.w	r3, r3, #2
 8101558:	617b      	str	r3, [r7, #20]
 810155a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810155c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101564:	2312      	movs	r3, #18
 8101566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810156a:	2300      	movs	r3, #0
 810156c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101570:	2300      	movs	r3, #0
 8101572:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101576:	2304      	movs	r3, #4
 8101578:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810157c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101580:	4619      	mov	r1, r3
 8101582:	4831      	ldr	r0, [pc, #196]	; (8101648 <HAL_I2C_MspInit+0x158>)
 8101584:	f004 fa2c 	bl	81059e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101588:	4b2e      	ldr	r3, [pc, #184]	; (8101644 <HAL_I2C_MspInit+0x154>)
 810158a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810158e:	4a2d      	ldr	r2, [pc, #180]	; (8101644 <HAL_I2C_MspInit+0x154>)
 8101590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101594:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101598:	4b2a      	ldr	r3, [pc, #168]	; (8101644 <HAL_I2C_MspInit+0x154>)
 810159a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810159e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81015a2:	613b      	str	r3, [r7, #16]
 81015a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 81015a6:	e047      	b.n	8101638 <HAL_I2C_MspInit+0x148>
  else if(i2cHandle->Instance==I2C2)
 81015a8:	687b      	ldr	r3, [r7, #4]
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	4a27      	ldr	r2, [pc, #156]	; (810164c <HAL_I2C_MspInit+0x15c>)
 81015ae:	4293      	cmp	r3, r2
 81015b0:	d142      	bne.n	8101638 <HAL_I2C_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 81015b2:	2308      	movs	r3, #8
 81015b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81015b6:	2300      	movs	r3, #0
 81015b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81015bc:	f107 0318 	add.w	r3, r7, #24
 81015c0:	4618      	mov	r0, r3
 81015c2:	f004 ffef 	bl	81065a4 <HAL_RCCEx_PeriphCLKConfig>
 81015c6:	4603      	mov	r3, r0
 81015c8:	2b00      	cmp	r3, #0
 81015ca:	d001      	beq.n	81015d0 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 81015cc:	f000 f8aa 	bl	8101724 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81015d0:	4b1c      	ldr	r3, [pc, #112]	; (8101644 <HAL_I2C_MspInit+0x154>)
 81015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015d6:	4a1b      	ldr	r2, [pc, #108]	; (8101644 <HAL_I2C_MspInit+0x154>)
 81015d8:	f043 0302 	orr.w	r3, r3, #2
 81015dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015e0:	4b18      	ldr	r3, [pc, #96]	; (8101644 <HAL_I2C_MspInit+0x154>)
 81015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015e6:	f003 0302 	and.w	r3, r3, #2
 81015ea:	60fb      	str	r3, [r7, #12]
 81015ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81015ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81015f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81015f6:	2312      	movs	r3, #18
 81015f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015fc:	2300      	movs	r3, #0
 81015fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101602:	2300      	movs	r3, #0
 8101604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8101608:	2304      	movs	r3, #4
 810160a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810160e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101612:	4619      	mov	r1, r3
 8101614:	480c      	ldr	r0, [pc, #48]	; (8101648 <HAL_I2C_MspInit+0x158>)
 8101616:	f004 f9e3 	bl	81059e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 810161a:	4b0a      	ldr	r3, [pc, #40]	; (8101644 <HAL_I2C_MspInit+0x154>)
 810161c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101620:	4a08      	ldr	r2, [pc, #32]	; (8101644 <HAL_I2C_MspInit+0x154>)
 8101622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101626:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810162a:	4b06      	ldr	r3, [pc, #24]	; (8101644 <HAL_I2C_MspInit+0x154>)
 810162c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101634:	60bb      	str	r3, [r7, #8]
 8101636:	68bb      	ldr	r3, [r7, #8]
}
 8101638:	bf00      	nop
 810163a:	37e8      	adds	r7, #232	; 0xe8
 810163c:	46bd      	mov	sp, r7
 810163e:	bd80      	pop	{r7, pc}
 8101640:	40005400 	.word	0x40005400
 8101644:	58024400 	.word	0x58024400
 8101648:	58020400 	.word	0x58020400
 810164c:	40005800 	.word	0x40005800

08101650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101650:	b580      	push	{r7, lr}
 8101652:	b082      	sub	sp, #8
 8101654:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101656:	4b27      	ldr	r3, [pc, #156]	; (81016f4 <main+0xa4>)
 8101658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810165c:	4a25      	ldr	r2, [pc, #148]	; (81016f4 <main+0xa4>)
 810165e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101666:	4b23      	ldr	r3, [pc, #140]	; (81016f4 <main+0xa4>)
 8101668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810166c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101670:	607b      	str	r3, [r7, #4]
 8101672:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101674:	2001      	movs	r0, #1
 8101676:	f004 fb97 	bl	8105da8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810167a:	f004 fd6b 	bl	8106154 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810167e:	2201      	movs	r2, #1
 8101680:	2102      	movs	r1, #2
 8101682:	2000      	movs	r0, #0
 8101684:	f004 fcec 	bl	8106060 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101688:	4b1b      	ldr	r3, [pc, #108]	; (81016f8 <main+0xa8>)
 810168a:	681b      	ldr	r3, [r3, #0]
 810168c:	091b      	lsrs	r3, r3, #4
 810168e:	f003 030f 	and.w	r3, r3, #15
 8101692:	2b07      	cmp	r3, #7
 8101694:	d108      	bne.n	81016a8 <main+0x58>
 8101696:	4b19      	ldr	r3, [pc, #100]	; (81016fc <main+0xac>)
 8101698:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810169c:	4a17      	ldr	r2, [pc, #92]	; (81016fc <main+0xac>)
 810169e:	f043 0301 	orr.w	r3, r3, #1
 81016a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016a6:	e007      	b.n	81016b8 <main+0x68>
 81016a8:	4b14      	ldr	r3, [pc, #80]	; (81016fc <main+0xac>)
 81016aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016ae:	4a13      	ldr	r2, [pc, #76]	; (81016fc <main+0xac>)
 81016b0:	f043 0301 	orr.w	r3, r3, #1
 81016b4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016b8:	f000 fd92 	bl	81021e0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016bc:	f7ff fdd2 	bl	8101264 <MX_GPIO_Init>
  MX_DMA_Init();
 81016c0:	f7ff fd8e 	bl	81011e0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 81016c4:	f000 fcb0 	bl	8102028 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 81016c8:	f000 fb5e 	bl	8101d88 <MX_TIM1_Init>
  MX_I2C1_Init();
 81016cc:	f7ff fe90 	bl	81013f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 81016d0:	f000 f8ea 	bl	81018a8 <MX_SPI1_Init>
  MX_ADC1_Init();
 81016d4:	f7ff fc88 	bl	8100fe8 <MX_ADC1_Init>
  MX_I2C2_Init();
 81016d8:	f7ff feca 	bl	8101470 <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 81016dc:	f000 f82a 	bl	8101734 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 81016e0:	f00c f948 	bl	810d974 <MX_FATFS_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81016e4:	f00c fc2a 	bl	810df3c <osKernelInitialize>
  MX_FREERTOS_Init();
 81016e8:	f7ff fd9a 	bl	8101220 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81016ec:	f00c fc6c 	bl	810dfc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81016f0:	e7fe      	b.n	81016f0 <main+0xa0>
 81016f2:	bf00      	nop
 81016f4:	58024400 	.word	0x58024400
 81016f8:	e000ed00 	.word	0xe000ed00
 81016fc:	58026400 	.word	0x58026400

08101700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101700:	b580      	push	{r7, lr}
 8101702:	b082      	sub	sp, #8
 8101704:	af00      	add	r7, sp, #0
 8101706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8101708:	687b      	ldr	r3, [r7, #4]
 810170a:	681b      	ldr	r3, [r3, #0]
 810170c:	4a04      	ldr	r2, [pc, #16]	; (8101720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810170e:	4293      	cmp	r3, r2
 8101710:	d101      	bne.n	8101716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101712:	f000 fdc3 	bl	810229c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101716:	bf00      	nop
 8101718:	3708      	adds	r7, #8
 810171a:	46bd      	mov	sp, r7
 810171c:	bd80      	pop	{r7, pc}
 810171e:	bf00      	nop
 8101720:	40001400 	.word	0x40001400

08101724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101724:	b480      	push	{r7}
 8101726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101728:	bf00      	nop
 810172a:	46bd      	mov	sp, r7
 810172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101730:	4770      	bx	lr
	...

08101734 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8101734:	b580      	push	{r7, lr}
 8101736:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8101738:	4b0f      	ldr	r3, [pc, #60]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 810173a:	4a10      	ldr	r2, [pc, #64]	; (810177c <MX_SDMMC1_SD_Init+0x48>)
 810173c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 810173e:	4b0e      	ldr	r3, [pc, #56]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 8101740:	2200      	movs	r2, #0
 8101742:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8101744:	4b0c      	ldr	r3, [pc, #48]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 8101746:	2200      	movs	r2, #0
 8101748:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 810174a:	4b0b      	ldr	r3, [pc, #44]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 810174c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8101750:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8101752:	4b09      	ldr	r3, [pc, #36]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 8101754:	2200      	movs	r2, #0
 8101756:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8101758:	4b07      	ldr	r3, [pc, #28]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 810175a:	2204      	movs	r2, #4
 810175c:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 810175e:	4b06      	ldr	r3, [pc, #24]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 8101760:	2201      	movs	r2, #1
 8101762:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8101764:	4804      	ldr	r0, [pc, #16]	; (8101778 <MX_SDMMC1_SD_Init+0x44>)
 8101766:	f007 f8a3 	bl	81088b0 <HAL_SD_Init>
 810176a:	4603      	mov	r3, r0
 810176c:	2b00      	cmp	r3, #0
 810176e:	d001      	beq.n	8101774 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8101770:	f7ff ffd8 	bl	8101724 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8101774:	bf00      	nop
 8101776:	bd80      	pop	{r7, pc}
 8101778:	10004ca4 	.word	0x10004ca4
 810177c:	52007000 	.word	0x52007000

08101780 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8101780:	b580      	push	{r7, lr}
 8101782:	b0ba      	sub	sp, #232	; 0xe8
 8101784:	af00      	add	r7, sp, #0
 8101786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101788:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810178c:	2200      	movs	r2, #0
 810178e:	601a      	str	r2, [r3, #0]
 8101790:	605a      	str	r2, [r3, #4]
 8101792:	609a      	str	r2, [r3, #8]
 8101794:	60da      	str	r2, [r3, #12]
 8101796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101798:	f107 0318 	add.w	r3, r7, #24
 810179c:	22bc      	movs	r2, #188	; 0xbc
 810179e:	2100      	movs	r1, #0
 81017a0:	4618      	mov	r0, r3
 81017a2:	f00f fb85 	bl	8110eb0 <memset>
  if(sdHandle->Instance==SDMMC1)
 81017a6:	687b      	ldr	r3, [r7, #4]
 81017a8:	681b      	ldr	r3, [r3, #0]
 81017aa:	4a3b      	ldr	r2, [pc, #236]	; (8101898 <HAL_SD_MspInit+0x118>)
 81017ac:	4293      	cmp	r3, r2
 81017ae:	d16e      	bne.n	810188e <HAL_SD_MspInit+0x10e>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 81017b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 81017b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 81017b6:	2300      	movs	r3, #0
 81017b8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017ba:	f107 0318 	add.w	r3, r7, #24
 81017be:	4618      	mov	r0, r3
 81017c0:	f004 fef0 	bl	81065a4 <HAL_RCCEx_PeriphCLKConfig>
 81017c4:	4603      	mov	r3, r0
 81017c6:	2b00      	cmp	r3, #0
 81017c8:	d001      	beq.n	81017ce <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 81017ca:	f7ff ffab 	bl	8101724 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 81017ce:	4b33      	ldr	r3, [pc, #204]	; (810189c <HAL_SD_MspInit+0x11c>)
 81017d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81017d4:	4a31      	ldr	r2, [pc, #196]	; (810189c <HAL_SD_MspInit+0x11c>)
 81017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81017da:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 81017de:	4b2f      	ldr	r3, [pc, #188]	; (810189c <HAL_SD_MspInit+0x11c>)
 81017e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81017e8:	617b      	str	r3, [r7, #20]
 81017ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81017ec:	4b2b      	ldr	r3, [pc, #172]	; (810189c <HAL_SD_MspInit+0x11c>)
 81017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017f2:	4a2a      	ldr	r2, [pc, #168]	; (810189c <HAL_SD_MspInit+0x11c>)
 81017f4:	f043 0304 	orr.w	r3, r3, #4
 81017f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017fc:	4b27      	ldr	r3, [pc, #156]	; (810189c <HAL_SD_MspInit+0x11c>)
 81017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101802:	f003 0304 	and.w	r3, r3, #4
 8101806:	613b      	str	r3, [r7, #16]
 8101808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810180a:	4b24      	ldr	r3, [pc, #144]	; (810189c <HAL_SD_MspInit+0x11c>)
 810180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101810:	4a22      	ldr	r2, [pc, #136]	; (810189c <HAL_SD_MspInit+0x11c>)
 8101812:	f043 0308 	orr.w	r3, r3, #8
 8101816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810181a:	4b20      	ldr	r3, [pc, #128]	; (810189c <HAL_SD_MspInit+0x11c>)
 810181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101820:	f003 0308 	and.w	r3, r3, #8
 8101824:	60fb      	str	r3, [r7, #12]
 8101826:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8101828:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 810182c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101830:	2302      	movs	r3, #2
 8101832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101836:	2300      	movs	r3, #0
 8101838:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810183c:	2303      	movs	r3, #3
 810183e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101842:	230c      	movs	r3, #12
 8101844:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101848:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810184c:	4619      	mov	r1, r3
 810184e:	4814      	ldr	r0, [pc, #80]	; (81018a0 <HAL_SD_MspInit+0x120>)
 8101850:	f004 f8c6 	bl	81059e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8101854:	2304      	movs	r3, #4
 8101856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810185a:	2302      	movs	r3, #2
 810185c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101860:	2300      	movs	r3, #0
 8101862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101866:	2303      	movs	r3, #3
 8101868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 810186c:	230c      	movs	r3, #12
 810186e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101872:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101876:	4619      	mov	r1, r3
 8101878:	480a      	ldr	r0, [pc, #40]	; (81018a4 <HAL_SD_MspInit+0x124>)
 810187a:	f004 f8b1 	bl	81059e0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 810187e:	2200      	movs	r2, #0
 8101880:	2105      	movs	r1, #5
 8101882:	2031      	movs	r0, #49	; 0x31
 8101884:	f002 f96c 	bl	8103b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8101888:	2031      	movs	r0, #49	; 0x31
 810188a:	f002 f983 	bl	8103b94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 810188e:	bf00      	nop
 8101890:	37e8      	adds	r7, #232	; 0xe8
 8101892:	46bd      	mov	sp, r7
 8101894:	bd80      	pop	{r7, pc}
 8101896:	bf00      	nop
 8101898:	52007000 	.word	0x52007000
 810189c:	58024400 	.word	0x58024400
 81018a0:	58020800 	.word	0x58020800
 81018a4:	58020c00 	.word	0x58020c00

081018a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 81018a8:	b580      	push	{r7, lr}
 81018aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 81018ac:	4b27      	ldr	r3, [pc, #156]	; (810194c <MX_SPI1_Init+0xa4>)
 81018ae:	4a28      	ldr	r2, [pc, #160]	; (8101950 <MX_SPI1_Init+0xa8>)
 81018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81018b2:	4b26      	ldr	r3, [pc, #152]	; (810194c <MX_SPI1_Init+0xa4>)
 81018b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81018ba:	4b24      	ldr	r3, [pc, #144]	; (810194c <MX_SPI1_Init+0xa4>)
 81018bc:	2200      	movs	r2, #0
 81018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 81018c0:	4b22      	ldr	r3, [pc, #136]	; (810194c <MX_SPI1_Init+0xa4>)
 81018c2:	2207      	movs	r2, #7
 81018c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81018c6:	4b21      	ldr	r3, [pc, #132]	; (810194c <MX_SPI1_Init+0xa4>)
 81018c8:	2200      	movs	r2, #0
 81018ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018cc:	4b1f      	ldr	r3, [pc, #124]	; (810194c <MX_SPI1_Init+0xa4>)
 81018ce:	2200      	movs	r2, #0
 81018d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81018d2:	4b1e      	ldr	r3, [pc, #120]	; (810194c <MX_SPI1_Init+0xa4>)
 81018d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 81018da:	4b1c      	ldr	r3, [pc, #112]	; (810194c <MX_SPI1_Init+0xa4>)
 81018dc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 81018e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018e2:	4b1a      	ldr	r3, [pc, #104]	; (810194c <MX_SPI1_Init+0xa4>)
 81018e4:	2200      	movs	r2, #0
 81018e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81018e8:	4b18      	ldr	r3, [pc, #96]	; (810194c <MX_SPI1_Init+0xa4>)
 81018ea:	2200      	movs	r2, #0
 81018ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018ee:	4b17      	ldr	r3, [pc, #92]	; (810194c <MX_SPI1_Init+0xa4>)
 81018f0:	2200      	movs	r2, #0
 81018f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81018f4:	4b15      	ldr	r3, [pc, #84]	; (810194c <MX_SPI1_Init+0xa4>)
 81018f6:	2200      	movs	r2, #0
 81018f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 81018fa:	4b14      	ldr	r3, [pc, #80]	; (810194c <MX_SPI1_Init+0xa4>)
 81018fc:	2200      	movs	r2, #0
 81018fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101900:	4b12      	ldr	r3, [pc, #72]	; (810194c <MX_SPI1_Init+0xa4>)
 8101902:	2200      	movs	r2, #0
 8101904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101906:	4b11      	ldr	r3, [pc, #68]	; (810194c <MX_SPI1_Init+0xa4>)
 8101908:	2200      	movs	r2, #0
 810190a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810190c:	4b0f      	ldr	r3, [pc, #60]	; (810194c <MX_SPI1_Init+0xa4>)
 810190e:	2200      	movs	r2, #0
 8101910:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101912:	4b0e      	ldr	r3, [pc, #56]	; (810194c <MX_SPI1_Init+0xa4>)
 8101914:	2200      	movs	r2, #0
 8101916:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101918:	4b0c      	ldr	r3, [pc, #48]	; (810194c <MX_SPI1_Init+0xa4>)
 810191a:	2200      	movs	r2, #0
 810191c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810191e:	4b0b      	ldr	r3, [pc, #44]	; (810194c <MX_SPI1_Init+0xa4>)
 8101920:	2200      	movs	r2, #0
 8101922:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101924:	4b09      	ldr	r3, [pc, #36]	; (810194c <MX_SPI1_Init+0xa4>)
 8101926:	2200      	movs	r2, #0
 8101928:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810192a:	4b08      	ldr	r3, [pc, #32]	; (810194c <MX_SPI1_Init+0xa4>)
 810192c:	2200      	movs	r2, #0
 810192e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101930:	4b06      	ldr	r3, [pc, #24]	; (810194c <MX_SPI1_Init+0xa4>)
 8101932:	2200      	movs	r2, #0
 8101934:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101936:	4805      	ldr	r0, [pc, #20]	; (810194c <MX_SPI1_Init+0xa4>)
 8101938:	f008 fc96 	bl	810a268 <HAL_SPI_Init>
 810193c:	4603      	mov	r3, r0
 810193e:	2b00      	cmp	r3, #0
 8101940:	d001      	beq.n	8101946 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8101942:	f7ff feef 	bl	8101724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101946:	bf00      	nop
 8101948:	bd80      	pop	{r7, pc}
 810194a:	bf00      	nop
 810194c:	10004d24 	.word	0x10004d24
 8101950:	40013000 	.word	0x40013000

08101954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8101954:	b580      	push	{r7, lr}
 8101956:	b0b8      	sub	sp, #224	; 0xe0
 8101958:	af00      	add	r7, sp, #0
 810195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810195c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101960:	2200      	movs	r2, #0
 8101962:	601a      	str	r2, [r3, #0]
 8101964:	605a      	str	r2, [r3, #4]
 8101966:	609a      	str	r2, [r3, #8]
 8101968:	60da      	str	r2, [r3, #12]
 810196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810196c:	f107 0310 	add.w	r3, r7, #16
 8101970:	22bc      	movs	r2, #188	; 0xbc
 8101972:	2100      	movs	r1, #0
 8101974:	4618      	mov	r0, r3
 8101976:	f00f fa9b 	bl	8110eb0 <memset>
  if(spiHandle->Instance==SPI1)
 810197a:	687b      	ldr	r3, [r7, #4]
 810197c:	681b      	ldr	r3, [r3, #0]
 810197e:	4a28      	ldr	r2, [pc, #160]	; (8101a20 <HAL_SPI_MspInit+0xcc>)
 8101980:	4293      	cmp	r3, r2
 8101982:	d149      	bne.n	8101a18 <HAL_SPI_MspInit+0xc4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8101984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101988:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 810198a:	2300      	movs	r3, #0
 810198c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810198e:	f107 0310 	add.w	r3, r7, #16
 8101992:	4618      	mov	r0, r3
 8101994:	f004 fe06 	bl	81065a4 <HAL_RCCEx_PeriphCLKConfig>
 8101998:	4603      	mov	r3, r0
 810199a:	2b00      	cmp	r3, #0
 810199c:	d001      	beq.n	81019a2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 810199e:	f7ff fec1 	bl	8101724 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 81019a2:	4b20      	ldr	r3, [pc, #128]	; (8101a24 <HAL_SPI_MspInit+0xd0>)
 81019a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019a8:	4a1e      	ldr	r2, [pc, #120]	; (8101a24 <HAL_SPI_MspInit+0xd0>)
 81019aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81019ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81019b2:	4b1c      	ldr	r3, [pc, #112]	; (8101a24 <HAL_SPI_MspInit+0xd0>)
 81019b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019bc:	60fb      	str	r3, [r7, #12]
 81019be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81019c0:	4b18      	ldr	r3, [pc, #96]	; (8101a24 <HAL_SPI_MspInit+0xd0>)
 81019c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019c6:	4a17      	ldr	r2, [pc, #92]	; (8101a24 <HAL_SPI_MspInit+0xd0>)
 81019c8:	f043 0301 	orr.w	r3, r3, #1
 81019cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019d0:	4b14      	ldr	r3, [pc, #80]	; (8101a24 <HAL_SPI_MspInit+0xd0>)
 81019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019d6:	f003 0301 	and.w	r3, r3, #1
 81019da:	60bb      	str	r3, [r7, #8]
 81019dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 81019de:	23e0      	movs	r3, #224	; 0xe0
 81019e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81019e4:	2302      	movs	r3, #2
 81019e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019ea:	2300      	movs	r3, #0
 81019ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019f0:	2300      	movs	r3, #0
 81019f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81019f6:	2305      	movs	r3, #5
 81019f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81019fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a00:	4619      	mov	r1, r3
 8101a02:	4809      	ldr	r0, [pc, #36]	; (8101a28 <HAL_SPI_MspInit+0xd4>)
 8101a04:	f003 ffec 	bl	81059e0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8101a08:	2200      	movs	r2, #0
 8101a0a:	2105      	movs	r1, #5
 8101a0c:	2023      	movs	r0, #35	; 0x23
 8101a0e:	f002 f8a7 	bl	8103b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8101a12:	2023      	movs	r0, #35	; 0x23
 8101a14:	f002 f8be 	bl	8103b94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8101a18:	bf00      	nop
 8101a1a:	37e0      	adds	r7, #224	; 0xe0
 8101a1c:	46bd      	mov	sp, r7
 8101a1e:	bd80      	pop	{r7, pc}
 8101a20:	40013000 	.word	0x40013000
 8101a24:	58024400 	.word	0x58024400
 8101a28:	58020000 	.word	0x58020000

08101a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101a2c:	b580      	push	{r7, lr}
 8101a2e:	b082      	sub	sp, #8
 8101a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a32:	4b14      	ldr	r3, [pc, #80]	; (8101a84 <HAL_MspInit+0x58>)
 8101a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a38:	4a12      	ldr	r2, [pc, #72]	; (8101a84 <HAL_MspInit+0x58>)
 8101a3a:	f043 0302 	orr.w	r3, r3, #2
 8101a3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a42:	4b10      	ldr	r3, [pc, #64]	; (8101a84 <HAL_MspInit+0x58>)
 8101a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a48:	f003 0302 	and.w	r3, r3, #2
 8101a4c:	607b      	str	r3, [r7, #4]
 8101a4e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101a50:	2200      	movs	r2, #0
 8101a52:	210f      	movs	r1, #15
 8101a54:	f06f 0001 	mvn.w	r0, #1
 8101a58:	f002 f882 	bl	8103b60 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 8101a5c:	2200      	movs	r2, #0
 8101a5e:	2105      	movs	r1, #5
 8101a60:	2040      	movs	r0, #64	; 0x40
 8101a62:	f002 f87d 	bl	8103b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101a66:	2040      	movs	r0, #64	; 0x40
 8101a68:	f002 f894 	bl	8103b94 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101a6c:	2200      	movs	r2, #0
 8101a6e:	2105      	movs	r1, #5
 8101a70:	207e      	movs	r0, #126	; 0x7e
 8101a72:	f002 f875 	bl	8103b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101a76:	207e      	movs	r0, #126	; 0x7e
 8101a78:	f002 f88c 	bl	8103b94 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101a7c:	bf00      	nop
 8101a7e:	3708      	adds	r7, #8
 8101a80:	46bd      	mov	sp, r7
 8101a82:	bd80      	pop	{r7, pc}
 8101a84:	58024400 	.word	0x58024400

08101a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101a88:	b580      	push	{r7, lr}
 8101a8a:	b090      	sub	sp, #64	; 0x40
 8101a8c:	af00      	add	r7, sp, #0
 8101a8e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	2b0f      	cmp	r3, #15
 8101a94:	d827      	bhi.n	8101ae6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8101a96:	2200      	movs	r2, #0
 8101a98:	6879      	ldr	r1, [r7, #4]
 8101a9a:	2037      	movs	r0, #55	; 0x37
 8101a9c:	f002 f860 	bl	8103b60 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8101aa0:	2037      	movs	r0, #55	; 0x37
 8101aa2:	f002 f877 	bl	8103b94 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8101aa6:	4a29      	ldr	r2, [pc, #164]	; (8101b4c <HAL_InitTick+0xc4>)
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8101aac:	4b28      	ldr	r3, [pc, #160]	; (8101b50 <HAL_InitTick+0xc8>)
 8101aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ab2:	4a27      	ldr	r2, [pc, #156]	; (8101b50 <HAL_InitTick+0xc8>)
 8101ab4:	f043 0320 	orr.w	r3, r3, #32
 8101ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101abc:	4b24      	ldr	r3, [pc, #144]	; (8101b50 <HAL_InitTick+0xc8>)
 8101abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ac2:	f003 0320 	and.w	r3, r3, #32
 8101ac6:	60fb      	str	r3, [r7, #12]
 8101ac8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101aca:	f107 0210 	add.w	r2, r7, #16
 8101ace:	f107 0314 	add.w	r3, r7, #20
 8101ad2:	4611      	mov	r1, r2
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f004 fd23 	bl	8106520 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8101ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101adc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8101ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101ae0:	2b00      	cmp	r3, #0
 8101ae2:	d106      	bne.n	8101af2 <HAL_InitTick+0x6a>
 8101ae4:	e001      	b.n	8101aea <HAL_InitTick+0x62>
    return HAL_ERROR;
 8101ae6:	2301      	movs	r3, #1
 8101ae8:	e02b      	b.n	8101b42 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8101aea:	f004 fced 	bl	81064c8 <HAL_RCC_GetPCLK1Freq>
 8101aee:	63f8      	str	r0, [r7, #60]	; 0x3c
 8101af0:	e004      	b.n	8101afc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8101af2:	f004 fce9 	bl	81064c8 <HAL_RCC_GetPCLK1Freq>
 8101af6:	4603      	mov	r3, r0
 8101af8:	005b      	lsls	r3, r3, #1
 8101afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101afe:	4a15      	ldr	r2, [pc, #84]	; (8101b54 <HAL_InitTick+0xcc>)
 8101b00:	fba2 2303 	umull	r2, r3, r2, r3
 8101b04:	0c9b      	lsrs	r3, r3, #18
 8101b06:	3b01      	subs	r3, #1
 8101b08:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8101b0a:	4b13      	ldr	r3, [pc, #76]	; (8101b58 <HAL_InitTick+0xd0>)
 8101b0c:	4a13      	ldr	r2, [pc, #76]	; (8101b5c <HAL_InitTick+0xd4>)
 8101b0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8101b10:	4b11      	ldr	r3, [pc, #68]	; (8101b58 <HAL_InitTick+0xd0>)
 8101b12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101b16:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8101b18:	4a0f      	ldr	r2, [pc, #60]	; (8101b58 <HAL_InitTick+0xd0>)
 8101b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101b1c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8101b1e:	4b0e      	ldr	r3, [pc, #56]	; (8101b58 <HAL_InitTick+0xd0>)
 8101b20:	2200      	movs	r2, #0
 8101b22:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101b24:	4b0c      	ldr	r3, [pc, #48]	; (8101b58 <HAL_InitTick+0xd0>)
 8101b26:	2200      	movs	r2, #0
 8101b28:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8101b2a:	480b      	ldr	r0, [pc, #44]	; (8101b58 <HAL_InitTick+0xd0>)
 8101b2c:	f008 ff7b 	bl	810aa26 <HAL_TIM_Base_Init>
 8101b30:	4603      	mov	r3, r0
 8101b32:	2b00      	cmp	r3, #0
 8101b34:	d104      	bne.n	8101b40 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8101b36:	4808      	ldr	r0, [pc, #32]	; (8101b58 <HAL_InitTick+0xd0>)
 8101b38:	f008 ffcc 	bl	810aad4 <HAL_TIM_Base_Start_IT>
 8101b3c:	4603      	mov	r3, r0
 8101b3e:	e000      	b.n	8101b42 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8101b40:	2301      	movs	r3, #1
}
 8101b42:	4618      	mov	r0, r3
 8101b44:	3740      	adds	r7, #64	; 0x40
 8101b46:	46bd      	mov	sp, r7
 8101b48:	bd80      	pop	{r7, pc}
 8101b4a:	bf00      	nop
 8101b4c:	10000008 	.word	0x10000008
 8101b50:	58024400 	.word	0x58024400
 8101b54:	431bde83 	.word	0x431bde83
 8101b58:	10004dac 	.word	0x10004dac
 8101b5c:	40001400 	.word	0x40001400

08101b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101b60:	b480      	push	{r7}
 8101b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8101b64:	bf00      	nop
 8101b66:	46bd      	mov	sp, r7
 8101b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b6c:	4770      	bx	lr

08101b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101b6e:	b480      	push	{r7}
 8101b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101b72:	e7fe      	b.n	8101b72 <HardFault_Handler+0x4>

08101b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101b74:	b480      	push	{r7}
 8101b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101b78:	e7fe      	b.n	8101b78 <MemManage_Handler+0x4>

08101b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101b7a:	b480      	push	{r7}
 8101b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101b7e:	e7fe      	b.n	8101b7e <BusFault_Handler+0x4>

08101b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101b80:	b480      	push	{r7}
 8101b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101b84:	e7fe      	b.n	8101b84 <UsageFault_Handler+0x4>

08101b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101b86:	b480      	push	{r7}
 8101b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101b8a:	bf00      	nop
 8101b8c:	46bd      	mov	sp, r7
 8101b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b92:	4770      	bx	lr

08101b94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8101b94:	b580      	push	{r7, lr}
 8101b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8101b98:	4802      	ldr	r0, [pc, #8]	; (8101ba4 <DMA1_Stream4_IRQHandler+0x10>)
 8101b9a:	f002 fdbb 	bl	8104714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8101b9e:	bf00      	nop
 8101ba0:	bd80      	pop	{r7, pc}
 8101ba2:	bf00      	nop
 8101ba4:	10004b90 	.word	0x10004b90

08101ba8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8101ba8:	b580      	push	{r7, lr}
 8101baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8101bac:	4802      	ldr	r0, [pc, #8]	; (8101bb8 <ADC_IRQHandler+0x10>)
 8101bae:	f000 ff33 	bl	8102a18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8101bb2:	bf00      	nop
 8101bb4:	bd80      	pop	{r7, pc}
 8101bb6:	bf00      	nop
 8101bb8:	10004b2c 	.word	0x10004b2c

08101bbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8101bbc:	b580      	push	{r7, lr}
 8101bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8101bc0:	4802      	ldr	r0, [pc, #8]	; (8101bcc <SPI1_IRQHandler+0x10>)
 8101bc2:	f008 fc53 	bl	810a46c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8101bc6:	bf00      	nop
 8101bc8:	bd80      	pop	{r7, pc}
 8101bca:	bf00      	nop
 8101bcc:	10004d24 	.word	0x10004d24

08101bd0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8101bd0:	b580      	push	{r7, lr}
 8101bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8101bd4:	4802      	ldr	r0, [pc, #8]	; (8101be0 <SDMMC1_IRQHandler+0x10>)
 8101bd6:	f007 f8e7 	bl	8108da8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8101bda:	bf00      	nop
 8101bdc:	bd80      	pop	{r7, pc}
 8101bde:	bf00      	nop
 8101be0:	10004ca4 	.word	0x10004ca4

08101be4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8101be4:	b580      	push	{r7, lr}
 8101be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8101be8:	4802      	ldr	r0, [pc, #8]	; (8101bf4 <TIM7_IRQHandler+0x10>)
 8101bea:	f009 f844 	bl	810ac76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8101bee:	bf00      	nop
 8101bf0:	bd80      	pop	{r7, pc}
 8101bf2:	bf00      	nop
 8101bf4:	10004dac 	.word	0x10004dac

08101bf8 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101bf8:	b480      	push	{r7}
 8101bfa:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8101bfc:	bf00      	nop
 8101bfe:	46bd      	mov	sp, r7
 8101c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c04:	4770      	bx	lr

08101c06 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101c06:	b580      	push	{r7, lr}
 8101c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101c0a:	f004 f8df 	bl	8105dcc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101c0e:	bf00      	nop
 8101c10:	bd80      	pop	{r7, pc}

08101c12 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101c12:	b480      	push	{r7}
 8101c14:	af00      	add	r7, sp, #0
	return 1;
 8101c16:	2301      	movs	r3, #1
}
 8101c18:	4618      	mov	r0, r3
 8101c1a:	46bd      	mov	sp, r7
 8101c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c20:	4770      	bx	lr

08101c22 <_kill>:

int _kill(int pid, int sig)
{
 8101c22:	b580      	push	{r7, lr}
 8101c24:	b082      	sub	sp, #8
 8101c26:	af00      	add	r7, sp, #0
 8101c28:	6078      	str	r0, [r7, #4]
 8101c2a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101c2c:	f00f f908 	bl	8110e40 <__errno>
 8101c30:	4603      	mov	r3, r0
 8101c32:	2216      	movs	r2, #22
 8101c34:	601a      	str	r2, [r3, #0]
	return -1;
 8101c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101c3a:	4618      	mov	r0, r3
 8101c3c:	3708      	adds	r7, #8
 8101c3e:	46bd      	mov	sp, r7
 8101c40:	bd80      	pop	{r7, pc}

08101c42 <_exit>:

void _exit (int status)
{
 8101c42:	b580      	push	{r7, lr}
 8101c44:	b082      	sub	sp, #8
 8101c46:	af00      	add	r7, sp, #0
 8101c48:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8101c4e:	6878      	ldr	r0, [r7, #4]
 8101c50:	f7ff ffe7 	bl	8101c22 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101c54:	e7fe      	b.n	8101c54 <_exit+0x12>

08101c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101c56:	b580      	push	{r7, lr}
 8101c58:	b086      	sub	sp, #24
 8101c5a:	af00      	add	r7, sp, #0
 8101c5c:	60f8      	str	r0, [r7, #12]
 8101c5e:	60b9      	str	r1, [r7, #8]
 8101c60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c62:	2300      	movs	r3, #0
 8101c64:	617b      	str	r3, [r7, #20]
 8101c66:	e00a      	b.n	8101c7e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101c68:	f3af 8000 	nop.w
 8101c6c:	4601      	mov	r1, r0
 8101c6e:	68bb      	ldr	r3, [r7, #8]
 8101c70:	1c5a      	adds	r2, r3, #1
 8101c72:	60ba      	str	r2, [r7, #8]
 8101c74:	b2ca      	uxtb	r2, r1
 8101c76:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c78:	697b      	ldr	r3, [r7, #20]
 8101c7a:	3301      	adds	r3, #1
 8101c7c:	617b      	str	r3, [r7, #20]
 8101c7e:	697a      	ldr	r2, [r7, #20]
 8101c80:	687b      	ldr	r3, [r7, #4]
 8101c82:	429a      	cmp	r2, r3
 8101c84:	dbf0      	blt.n	8101c68 <_read+0x12>
	}

return len;
 8101c86:	687b      	ldr	r3, [r7, #4]
}
 8101c88:	4618      	mov	r0, r3
 8101c8a:	3718      	adds	r7, #24
 8101c8c:	46bd      	mov	sp, r7
 8101c8e:	bd80      	pop	{r7, pc}

08101c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101c90:	b580      	push	{r7, lr}
 8101c92:	b086      	sub	sp, #24
 8101c94:	af00      	add	r7, sp, #0
 8101c96:	60f8      	str	r0, [r7, #12]
 8101c98:	60b9      	str	r1, [r7, #8]
 8101c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101c9c:	2300      	movs	r3, #0
 8101c9e:	617b      	str	r3, [r7, #20]
 8101ca0:	e009      	b.n	8101cb6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101ca2:	68bb      	ldr	r3, [r7, #8]
 8101ca4:	1c5a      	adds	r2, r3, #1
 8101ca6:	60ba      	str	r2, [r7, #8]
 8101ca8:	781b      	ldrb	r3, [r3, #0]
 8101caa:	4618      	mov	r0, r3
 8101cac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cb0:	697b      	ldr	r3, [r7, #20]
 8101cb2:	3301      	adds	r3, #1
 8101cb4:	617b      	str	r3, [r7, #20]
 8101cb6:	697a      	ldr	r2, [r7, #20]
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	429a      	cmp	r2, r3
 8101cbc:	dbf1      	blt.n	8101ca2 <_write+0x12>
	}
	return len;
 8101cbe:	687b      	ldr	r3, [r7, #4]
}
 8101cc0:	4618      	mov	r0, r3
 8101cc2:	3718      	adds	r7, #24
 8101cc4:	46bd      	mov	sp, r7
 8101cc6:	bd80      	pop	{r7, pc}

08101cc8 <_close>:

int _close(int file)
{
 8101cc8:	b480      	push	{r7}
 8101cca:	b083      	sub	sp, #12
 8101ccc:	af00      	add	r7, sp, #0
 8101cce:	6078      	str	r0, [r7, #4]
	return -1;
 8101cd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	370c      	adds	r7, #12
 8101cd8:	46bd      	mov	sp, r7
 8101cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cde:	4770      	bx	lr

08101ce0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101ce0:	b480      	push	{r7}
 8101ce2:	b083      	sub	sp, #12
 8101ce4:	af00      	add	r7, sp, #0
 8101ce6:	6078      	str	r0, [r7, #4]
 8101ce8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101cea:	683b      	ldr	r3, [r7, #0]
 8101cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101cf0:	605a      	str	r2, [r3, #4]
	return 0;
 8101cf2:	2300      	movs	r3, #0
}
 8101cf4:	4618      	mov	r0, r3
 8101cf6:	370c      	adds	r7, #12
 8101cf8:	46bd      	mov	sp, r7
 8101cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cfe:	4770      	bx	lr

08101d00 <_isatty>:

int _isatty(int file)
{
 8101d00:	b480      	push	{r7}
 8101d02:	b083      	sub	sp, #12
 8101d04:	af00      	add	r7, sp, #0
 8101d06:	6078      	str	r0, [r7, #4]
	return 1;
 8101d08:	2301      	movs	r3, #1
}
 8101d0a:	4618      	mov	r0, r3
 8101d0c:	370c      	adds	r7, #12
 8101d0e:	46bd      	mov	sp, r7
 8101d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d14:	4770      	bx	lr

08101d16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101d16:	b480      	push	{r7}
 8101d18:	b085      	sub	sp, #20
 8101d1a:	af00      	add	r7, sp, #0
 8101d1c:	60f8      	str	r0, [r7, #12]
 8101d1e:	60b9      	str	r1, [r7, #8]
 8101d20:	607a      	str	r2, [r7, #4]
	return 0;
 8101d22:	2300      	movs	r3, #0
}
 8101d24:	4618      	mov	r0, r3
 8101d26:	3714      	adds	r7, #20
 8101d28:	46bd      	mov	sp, r7
 8101d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d2e:	4770      	bx	lr

08101d30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8101d30:	b580      	push	{r7, lr}
 8101d32:	b084      	sub	sp, #16
 8101d34:	af00      	add	r7, sp, #0
 8101d36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8101d38:	4b11      	ldr	r3, [pc, #68]	; (8101d80 <_sbrk+0x50>)
 8101d3a:	681b      	ldr	r3, [r3, #0]
 8101d3c:	2b00      	cmp	r3, #0
 8101d3e:	d102      	bne.n	8101d46 <_sbrk+0x16>
		heap_end = &end;
 8101d40:	4b0f      	ldr	r3, [pc, #60]	; (8101d80 <_sbrk+0x50>)
 8101d42:	4a10      	ldr	r2, [pc, #64]	; (8101d84 <_sbrk+0x54>)
 8101d44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8101d46:	4b0e      	ldr	r3, [pc, #56]	; (8101d80 <_sbrk+0x50>)
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8101d4c:	4b0c      	ldr	r3, [pc, #48]	; (8101d80 <_sbrk+0x50>)
 8101d4e:	681a      	ldr	r2, [r3, #0]
 8101d50:	687b      	ldr	r3, [r7, #4]
 8101d52:	4413      	add	r3, r2
 8101d54:	466a      	mov	r2, sp
 8101d56:	4293      	cmp	r3, r2
 8101d58:	d907      	bls.n	8101d6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8101d5a:	f00f f871 	bl	8110e40 <__errno>
 8101d5e:	4603      	mov	r3, r0
 8101d60:	220c      	movs	r2, #12
 8101d62:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8101d64:	f04f 33ff 	mov.w	r3, #4294967295
 8101d68:	e006      	b.n	8101d78 <_sbrk+0x48>
	}

	heap_end += incr;
 8101d6a:	4b05      	ldr	r3, [pc, #20]	; (8101d80 <_sbrk+0x50>)
 8101d6c:	681a      	ldr	r2, [r3, #0]
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	4413      	add	r3, r2
 8101d72:	4a03      	ldr	r2, [pc, #12]	; (8101d80 <_sbrk+0x50>)
 8101d74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8101d76:	68fb      	ldr	r3, [r7, #12]
}
 8101d78:	4618      	mov	r0, r3
 8101d7a:	3710      	adds	r7, #16
 8101d7c:	46bd      	mov	sp, r7
 8101d7e:	bd80      	pop	{r7, pc}
 8101d80:	10000200 	.word	0x10000200
 8101d84:	10006f98 	.word	0x10006f98

08101d88 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8101d88:	b580      	push	{r7, lr}
 8101d8a:	b09a      	sub	sp, #104	; 0x68
 8101d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101d92:	2200      	movs	r2, #0
 8101d94:	601a      	str	r2, [r3, #0]
 8101d96:	605a      	str	r2, [r3, #4]
 8101d98:	609a      	str	r2, [r3, #8]
 8101d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101d9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101da0:	2200      	movs	r2, #0
 8101da2:	601a      	str	r2, [r3, #0]
 8101da4:	605a      	str	r2, [r3, #4]
 8101da6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101da8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101dac:	2200      	movs	r2, #0
 8101dae:	601a      	str	r2, [r3, #0]
 8101db0:	605a      	str	r2, [r3, #4]
 8101db2:	609a      	str	r2, [r3, #8]
 8101db4:	60da      	str	r2, [r3, #12]
 8101db6:	611a      	str	r2, [r3, #16]
 8101db8:	615a      	str	r2, [r3, #20]
 8101dba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101dbc:	1d3b      	adds	r3, r7, #4
 8101dbe:	222c      	movs	r2, #44	; 0x2c
 8101dc0:	2100      	movs	r1, #0
 8101dc2:	4618      	mov	r0, r3
 8101dc4:	f00f f874 	bl	8110eb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101dc8:	4b55      	ldr	r3, [pc, #340]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101dca:	4a56      	ldr	r2, [pc, #344]	; (8101f24 <MX_TIM1_Init+0x19c>)
 8101dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 8101dce:	4b54      	ldr	r3, [pc, #336]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101dd0:	2236      	movs	r2, #54	; 0x36
 8101dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101dd4:	4b52      	ldr	r3, [pc, #328]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101dd6:	2200      	movs	r2, #0
 8101dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 8101dda:	4b51      	ldr	r3, [pc, #324]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101ddc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8101de0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101de2:	4b4f      	ldr	r3, [pc, #316]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101de4:	2200      	movs	r2, #0
 8101de6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101de8:	4b4d      	ldr	r3, [pc, #308]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101dea:	2200      	movs	r2, #0
 8101dec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101dee:	4b4c      	ldr	r3, [pc, #304]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101df0:	2200      	movs	r2, #0
 8101df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101df4:	484a      	ldr	r0, [pc, #296]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101df6:	f008 fe16 	bl	810aa26 <HAL_TIM_Base_Init>
 8101dfa:	4603      	mov	r3, r0
 8101dfc:	2b00      	cmp	r3, #0
 8101dfe:	d001      	beq.n	8101e04 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101e00:	f7ff fc90 	bl	8101724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101e08:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101e0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101e0e:	4619      	mov	r1, r3
 8101e10:	4843      	ldr	r0, [pc, #268]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101e12:	f009 f95f 	bl	810b0d4 <HAL_TIM_ConfigClockSource>
 8101e16:	4603      	mov	r3, r0
 8101e18:	2b00      	cmp	r3, #0
 8101e1a:	d001      	beq.n	8101e20 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101e1c:	f7ff fc82 	bl	8101724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101e20:	483f      	ldr	r0, [pc, #252]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101e22:	f008 fec7 	bl	810abb4 <HAL_TIM_PWM_Init>
 8101e26:	4603      	mov	r3, r0
 8101e28:	2b00      	cmp	r3, #0
 8101e2a:	d001      	beq.n	8101e30 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101e2c:	f7ff fc7a 	bl	8101724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101e30:	2300      	movs	r3, #0
 8101e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101e34:	2300      	movs	r3, #0
 8101e36:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101e38:	2300      	movs	r3, #0
 8101e3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101e3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101e40:	4619      	mov	r1, r3
 8101e42:	4837      	ldr	r0, [pc, #220]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101e44:	f009 fe66 	bl	810bb14 <HAL_TIMEx_MasterConfigSynchronization>
 8101e48:	4603      	mov	r3, r0
 8101e4a:	2b00      	cmp	r3, #0
 8101e4c:	d001      	beq.n	8101e52 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101e4e:	f7ff fc69 	bl	8101724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101e52:	2360      	movs	r3, #96	; 0x60
 8101e54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8101e56:	2332      	movs	r3, #50	; 0x32
 8101e58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101e5a:	2300      	movs	r3, #0
 8101e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101e5e:	2300      	movs	r3, #0
 8101e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101e62:	2300      	movs	r3, #0
 8101e64:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101e66:	2300      	movs	r3, #0
 8101e68:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101e6a:	2300      	movs	r3, #0
 8101e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101e6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101e72:	2200      	movs	r2, #0
 8101e74:	4619      	mov	r1, r3
 8101e76:	482a      	ldr	r0, [pc, #168]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101e78:	f009 f81c 	bl	810aeb4 <HAL_TIM_PWM_ConfigChannel>
 8101e7c:	4603      	mov	r3, r0
 8101e7e:	2b00      	cmp	r3, #0
 8101e80:	d001      	beq.n	8101e86 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8101e82:	f7ff fc4f 	bl	8101724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101e86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101e8a:	2204      	movs	r2, #4
 8101e8c:	4619      	mov	r1, r3
 8101e8e:	4824      	ldr	r0, [pc, #144]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101e90:	f009 f810 	bl	810aeb4 <HAL_TIM_PWM_ConfigChannel>
 8101e94:	4603      	mov	r3, r0
 8101e96:	2b00      	cmp	r3, #0
 8101e98:	d001      	beq.n	8101e9e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101e9a:	f7ff fc43 	bl	8101724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101ea2:	2208      	movs	r2, #8
 8101ea4:	4619      	mov	r1, r3
 8101ea6:	481e      	ldr	r0, [pc, #120]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101ea8:	f009 f804 	bl	810aeb4 <HAL_TIM_PWM_ConfigChannel>
 8101eac:	4603      	mov	r3, r0
 8101eae:	2b00      	cmp	r3, #0
 8101eb0:	d001      	beq.n	8101eb6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8101eb2:	f7ff fc37 	bl	8101724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101eb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101eba:	220c      	movs	r2, #12
 8101ebc:	4619      	mov	r1, r3
 8101ebe:	4818      	ldr	r0, [pc, #96]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101ec0:	f008 fff8 	bl	810aeb4 <HAL_TIM_PWM_ConfigChannel>
 8101ec4:	4603      	mov	r3, r0
 8101ec6:	2b00      	cmp	r3, #0
 8101ec8:	d001      	beq.n	8101ece <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8101eca:	f7ff fc2b 	bl	8101724 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101ece:	2300      	movs	r3, #0
 8101ed0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101ed2:	2300      	movs	r3, #0
 8101ed4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101ed6:	2300      	movs	r3, #0
 8101ed8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101eda:	2300      	movs	r3, #0
 8101edc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101ede:	2300      	movs	r3, #0
 8101ee0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101ee6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101ee8:	2300      	movs	r3, #0
 8101eea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101eec:	2300      	movs	r3, #0
 8101eee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101ef4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101ef6:	2300      	movs	r3, #0
 8101ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101efa:	2300      	movs	r3, #0
 8101efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101efe:	1d3b      	adds	r3, r7, #4
 8101f00:	4619      	mov	r1, r3
 8101f02:	4807      	ldr	r0, [pc, #28]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101f04:	f009 fe8e 	bl	810bc24 <HAL_TIMEx_ConfigBreakDeadTime>
 8101f08:	4603      	mov	r3, r0
 8101f0a:	2b00      	cmp	r3, #0
 8101f0c:	d001      	beq.n	8101f12 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8101f0e:	f7ff fc09 	bl	8101724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101f12:	4803      	ldr	r0, [pc, #12]	; (8101f20 <MX_TIM1_Init+0x198>)
 8101f14:	f000 f82a 	bl	8101f6c <HAL_TIM_MspPostInit>

}
 8101f18:	bf00      	nop
 8101f1a:	3768      	adds	r7, #104	; 0x68
 8101f1c:	46bd      	mov	sp, r7
 8101f1e:	bd80      	pop	{r7, pc}
 8101f20:	10004df8 	.word	0x10004df8
 8101f24:	40010000 	.word	0x40010000

08101f28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8101f28:	b480      	push	{r7}
 8101f2a:	b085      	sub	sp, #20
 8101f2c:	af00      	add	r7, sp, #0
 8101f2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	4a0b      	ldr	r2, [pc, #44]	; (8101f64 <HAL_TIM_Base_MspInit+0x3c>)
 8101f36:	4293      	cmp	r3, r2
 8101f38:	d10e      	bne.n	8101f58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101f3a:	4b0b      	ldr	r3, [pc, #44]	; (8101f68 <HAL_TIM_Base_MspInit+0x40>)
 8101f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101f40:	4a09      	ldr	r2, [pc, #36]	; (8101f68 <HAL_TIM_Base_MspInit+0x40>)
 8101f42:	f043 0301 	orr.w	r3, r3, #1
 8101f46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101f4a:	4b07      	ldr	r3, [pc, #28]	; (8101f68 <HAL_TIM_Base_MspInit+0x40>)
 8101f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101f50:	f003 0301 	and.w	r3, r3, #1
 8101f54:	60fb      	str	r3, [r7, #12]
 8101f56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8101f58:	bf00      	nop
 8101f5a:	3714      	adds	r7, #20
 8101f5c:	46bd      	mov	sp, r7
 8101f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f62:	4770      	bx	lr
 8101f64:	40010000 	.word	0x40010000
 8101f68:	58024400 	.word	0x58024400

08101f6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8101f6c:	b580      	push	{r7, lr}
 8101f6e:	b08a      	sub	sp, #40	; 0x28
 8101f70:	af00      	add	r7, sp, #0
 8101f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f74:	f107 0314 	add.w	r3, r7, #20
 8101f78:	2200      	movs	r2, #0
 8101f7a:	601a      	str	r2, [r3, #0]
 8101f7c:	605a      	str	r2, [r3, #4]
 8101f7e:	609a      	str	r2, [r3, #8]
 8101f80:	60da      	str	r2, [r3, #12]
 8101f82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	681b      	ldr	r3, [r3, #0]
 8101f88:	4a23      	ldr	r2, [pc, #140]	; (8102018 <HAL_TIM_MspPostInit+0xac>)
 8101f8a:	4293      	cmp	r3, r2
 8101f8c:	d13f      	bne.n	810200e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101f8e:	4b23      	ldr	r3, [pc, #140]	; (810201c <HAL_TIM_MspPostInit+0xb0>)
 8101f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f94:	4a21      	ldr	r2, [pc, #132]	; (810201c <HAL_TIM_MspPostInit+0xb0>)
 8101f96:	f043 0310 	orr.w	r3, r3, #16
 8101f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f9e:	4b1f      	ldr	r3, [pc, #124]	; (810201c <HAL_TIM_MspPostInit+0xb0>)
 8101fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fa4:	f003 0310 	and.w	r3, r3, #16
 8101fa8:	613b      	str	r3, [r7, #16]
 8101faa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101fac:	4b1b      	ldr	r3, [pc, #108]	; (810201c <HAL_TIM_MspPostInit+0xb0>)
 8101fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fb2:	4a1a      	ldr	r2, [pc, #104]	; (810201c <HAL_TIM_MspPostInit+0xb0>)
 8101fb4:	f043 0301 	orr.w	r3, r3, #1
 8101fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fbc:	4b17      	ldr	r3, [pc, #92]	; (810201c <HAL_TIM_MspPostInit+0xb0>)
 8101fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fc2:	f003 0301 	and.w	r3, r3, #1
 8101fc6:	60fb      	str	r3, [r7, #12]
 8101fc8:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8101fca:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8101fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fd0:	2302      	movs	r3, #2
 8101fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fd4:	2300      	movs	r3, #0
 8101fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101fd8:	2300      	movs	r3, #0
 8101fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101fdc:	2301      	movs	r3, #1
 8101fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101fe0:	f107 0314 	add.w	r3, r7, #20
 8101fe4:	4619      	mov	r1, r3
 8101fe6:	480e      	ldr	r0, [pc, #56]	; (8102020 <HAL_TIM_MspPostInit+0xb4>)
 8101fe8:	f003 fcfa 	bl	81059e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8101fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ff2:	2302      	movs	r3, #2
 8101ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ff6:	2300      	movs	r3, #0
 8101ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ffa:	2300      	movs	r3, #0
 8101ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101ffe:	2301      	movs	r3, #1
 8102000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102002:	f107 0314 	add.w	r3, r7, #20
 8102006:	4619      	mov	r1, r3
 8102008:	4806      	ldr	r0, [pc, #24]	; (8102024 <HAL_TIM_MspPostInit+0xb8>)
 810200a:	f003 fce9 	bl	81059e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810200e:	bf00      	nop
 8102010:	3728      	adds	r7, #40	; 0x28
 8102012:	46bd      	mov	sp, r7
 8102014:	bd80      	pop	{r7, pc}
 8102016:	bf00      	nop
 8102018:	40010000 	.word	0x40010000
 810201c:	58024400 	.word	0x58024400
 8102020:	58021000 	.word	0x58021000
 8102024:	58020000 	.word	0x58020000

08102028 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102028:	b580      	push	{r7, lr}
 810202a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810202c:	4b22      	ldr	r3, [pc, #136]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 810202e:	4a23      	ldr	r2, [pc, #140]	; (81020bc <MX_USART3_UART_Init+0x94>)
 8102030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102032:	4b21      	ldr	r3, [pc, #132]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810203a:	4b1f      	ldr	r3, [pc, #124]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 810203c:	2200      	movs	r2, #0
 810203e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102040:	4b1d      	ldr	r3, [pc, #116]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102042:	2200      	movs	r2, #0
 8102044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102046:	4b1c      	ldr	r3, [pc, #112]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102048:	2200      	movs	r2, #0
 810204a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810204c:	4b1a      	ldr	r3, [pc, #104]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 810204e:	220c      	movs	r2, #12
 8102050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102052:	4b19      	ldr	r3, [pc, #100]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102054:	2200      	movs	r2, #0
 8102056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102058:	4b17      	ldr	r3, [pc, #92]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 810205a:	2200      	movs	r2, #0
 810205c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810205e:	4b16      	ldr	r3, [pc, #88]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102060:	2200      	movs	r2, #0
 8102062:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102064:	4b14      	ldr	r3, [pc, #80]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102066:	2200      	movs	r2, #0
 8102068:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810206a:	4b13      	ldr	r3, [pc, #76]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 810206c:	2200      	movs	r2, #0
 810206e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102070:	4811      	ldr	r0, [pc, #68]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102072:	f009 fe73 	bl	810bd5c <HAL_UART_Init>
 8102076:	4603      	mov	r3, r0
 8102078:	2b00      	cmp	r3, #0
 810207a:	d001      	beq.n	8102080 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810207c:	f7ff fb52 	bl	8101724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102080:	2100      	movs	r1, #0
 8102082:	480d      	ldr	r0, [pc, #52]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102084:	f00a fdc0 	bl	810cc08 <HAL_UARTEx_SetTxFifoThreshold>
 8102088:	4603      	mov	r3, r0
 810208a:	2b00      	cmp	r3, #0
 810208c:	d001      	beq.n	8102092 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810208e:	f7ff fb49 	bl	8101724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102092:	2100      	movs	r1, #0
 8102094:	4808      	ldr	r0, [pc, #32]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 8102096:	f00a fdf5 	bl	810cc84 <HAL_UARTEx_SetRxFifoThreshold>
 810209a:	4603      	mov	r3, r0
 810209c:	2b00      	cmp	r3, #0
 810209e:	d001      	beq.n	81020a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81020a0:	f7ff fb40 	bl	8101724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81020a4:	4804      	ldr	r0, [pc, #16]	; (81020b8 <MX_USART3_UART_Init+0x90>)
 81020a6:	f00a fd76 	bl	810cb96 <HAL_UARTEx_DisableFifoMode>
 81020aa:	4603      	mov	r3, r0
 81020ac:	2b00      	cmp	r3, #0
 81020ae:	d001      	beq.n	81020b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81020b0:	f7ff fb38 	bl	8101724 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81020b4:	bf00      	nop
 81020b6:	bd80      	pop	{r7, pc}
 81020b8:	10004e44 	.word	0x10004e44
 81020bc:	40004800 	.word	0x40004800

081020c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81020c0:	b580      	push	{r7, lr}
 81020c2:	b0b8      	sub	sp, #224	; 0xe0
 81020c4:	af00      	add	r7, sp, #0
 81020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81020cc:	2200      	movs	r2, #0
 81020ce:	601a      	str	r2, [r3, #0]
 81020d0:	605a      	str	r2, [r3, #4]
 81020d2:	609a      	str	r2, [r3, #8]
 81020d4:	60da      	str	r2, [r3, #12]
 81020d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81020d8:	f107 0310 	add.w	r3, r7, #16
 81020dc:	22bc      	movs	r2, #188	; 0xbc
 81020de:	2100      	movs	r1, #0
 81020e0:	4618      	mov	r0, r3
 81020e2:	f00e fee5 	bl	8110eb0 <memset>
  if(uartHandle->Instance==USART3)
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	681b      	ldr	r3, [r3, #0]
 81020ea:	4a25      	ldr	r2, [pc, #148]	; (8102180 <HAL_UART_MspInit+0xc0>)
 81020ec:	4293      	cmp	r3, r2
 81020ee:	d142      	bne.n	8102176 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81020f0:	2302      	movs	r3, #2
 81020f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81020f4:	2300      	movs	r3, #0
 81020f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81020fa:	f107 0310 	add.w	r3, r7, #16
 81020fe:	4618      	mov	r0, r3
 8102100:	f004 fa50 	bl	81065a4 <HAL_RCCEx_PeriphCLKConfig>
 8102104:	4603      	mov	r3, r0
 8102106:	2b00      	cmp	r3, #0
 8102108:	d001      	beq.n	810210e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 810210a:	f7ff fb0b 	bl	8101724 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810210e:	4b1d      	ldr	r3, [pc, #116]	; (8102184 <HAL_UART_MspInit+0xc4>)
 8102110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102114:	4a1b      	ldr	r2, [pc, #108]	; (8102184 <HAL_UART_MspInit+0xc4>)
 8102116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810211a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810211e:	4b19      	ldr	r3, [pc, #100]	; (8102184 <HAL_UART_MspInit+0xc4>)
 8102120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102128:	60fb      	str	r3, [r7, #12]
 810212a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 810212c:	4b15      	ldr	r3, [pc, #84]	; (8102184 <HAL_UART_MspInit+0xc4>)
 810212e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102132:	4a14      	ldr	r2, [pc, #80]	; (8102184 <HAL_UART_MspInit+0xc4>)
 8102134:	f043 0308 	orr.w	r3, r3, #8
 8102138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810213c:	4b11      	ldr	r3, [pc, #68]	; (8102184 <HAL_UART_MspInit+0xc4>)
 810213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102142:	f003 0308 	and.w	r3, r3, #8
 8102146:	60bb      	str	r3, [r7, #8]
 8102148:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810214a:	f44f 7340 	mov.w	r3, #768	; 0x300
 810214e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102152:	2302      	movs	r3, #2
 8102154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102158:	2300      	movs	r3, #0
 810215a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810215e:	2300      	movs	r3, #0
 8102160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102164:	2307      	movs	r3, #7
 8102166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810216a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810216e:	4619      	mov	r1, r3
 8102170:	4805      	ldr	r0, [pc, #20]	; (8102188 <HAL_UART_MspInit+0xc8>)
 8102172:	f003 fc35 	bl	81059e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8102176:	bf00      	nop
 8102178:	37e0      	adds	r7, #224	; 0xe0
 810217a:	46bd      	mov	sp, r7
 810217c:	bd80      	pop	{r7, pc}
 810217e:	bf00      	nop
 8102180:	40004800 	.word	0x40004800
 8102184:	58024400 	.word	0x58024400
 8102188:	58020c00 	.word	0x58020c00

0810218c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 810218c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81021c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102190:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8102192:	e003      	b.n	810219c <LoopCopyDataInit>

08102194 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102194:	4b0c      	ldr	r3, [pc, #48]	; (81021c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8102196:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8102198:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810219a:	3104      	adds	r1, #4

0810219c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 810219c:	480b      	ldr	r0, [pc, #44]	; (81021cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 810219e:	4b0c      	ldr	r3, [pc, #48]	; (81021d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 81021a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81021a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81021a4:	d3f6      	bcc.n	8102194 <CopyDataInit>
  ldr  r2, =_sbss
 81021a6:	4a0b      	ldr	r2, [pc, #44]	; (81021d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 81021a8:	e002      	b.n	81021b0 <LoopFillZerobss>

081021aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81021aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81021ac:	f842 3b04 	str.w	r3, [r2], #4

081021b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81021b0:	4b09      	ldr	r3, [pc, #36]	; (81021d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 81021b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81021b4:	d3f9      	bcc.n	81021aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 81021b6:	f7fe fefb 	bl	8100fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 81021ba:	f00e fe47 	bl	8110e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81021be:	f7ff fa47 	bl	8101650 <main>
  bx  lr    
 81021c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81021c4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81021c8:	08113cf4 	.word	0x08113cf4
  ldr  r0, =_sdata
 81021cc:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81021d0:	100001e4 	.word	0x100001e4
  ldr  r2, =_sbss
 81021d4:	100001e4 	.word	0x100001e4
  ldr  r3, = _ebss
 81021d8:	10006f98 	.word	0x10006f98

081021dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81021dc:	e7fe      	b.n	81021dc <ADC3_IRQHandler>
	...

081021e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81021e0:	b580      	push	{r7, lr}
 81021e2:	b082      	sub	sp, #8
 81021e4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81021e6:	4b28      	ldr	r3, [pc, #160]	; (8102288 <HAL_Init+0xa8>)
 81021e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021ec:	4a26      	ldr	r2, [pc, #152]	; (8102288 <HAL_Init+0xa8>)
 81021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81021f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81021f6:	4b24      	ldr	r3, [pc, #144]	; (8102288 <HAL_Init+0xa8>)
 81021f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102200:	603b      	str	r3, [r7, #0]
 8102202:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102204:	4b21      	ldr	r3, [pc, #132]	; (810228c <HAL_Init+0xac>)
 8102206:	681b      	ldr	r3, [r3, #0]
 8102208:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810220c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102210:	4a1e      	ldr	r2, [pc, #120]	; (810228c <HAL_Init+0xac>)
 8102212:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102216:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102218:	4b1c      	ldr	r3, [pc, #112]	; (810228c <HAL_Init+0xac>)
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	4a1b      	ldr	r2, [pc, #108]	; (810228c <HAL_Init+0xac>)
 810221e:	f043 0301 	orr.w	r3, r3, #1
 8102222:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102224:	2003      	movs	r0, #3
 8102226:	f001 fc90 	bl	8103b4a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810222a:	f003 ffa1 	bl	8106170 <HAL_RCC_GetSysClockFreq>
 810222e:	4602      	mov	r2, r0
 8102230:	4b15      	ldr	r3, [pc, #84]	; (8102288 <HAL_Init+0xa8>)
 8102232:	699b      	ldr	r3, [r3, #24]
 8102234:	0a1b      	lsrs	r3, r3, #8
 8102236:	f003 030f 	and.w	r3, r3, #15
 810223a:	4915      	ldr	r1, [pc, #84]	; (8102290 <HAL_Init+0xb0>)
 810223c:	5ccb      	ldrb	r3, [r1, r3]
 810223e:	f003 031f 	and.w	r3, r3, #31
 8102242:	fa22 f303 	lsr.w	r3, r2, r3
 8102246:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102248:	4b0f      	ldr	r3, [pc, #60]	; (8102288 <HAL_Init+0xa8>)
 810224a:	699b      	ldr	r3, [r3, #24]
 810224c:	f003 030f 	and.w	r3, r3, #15
 8102250:	4a0f      	ldr	r2, [pc, #60]	; (8102290 <HAL_Init+0xb0>)
 8102252:	5cd3      	ldrb	r3, [r2, r3]
 8102254:	f003 031f 	and.w	r3, r3, #31
 8102258:	687a      	ldr	r2, [r7, #4]
 810225a:	fa22 f303 	lsr.w	r3, r2, r3
 810225e:	4a0d      	ldr	r2, [pc, #52]	; (8102294 <HAL_Init+0xb4>)
 8102260:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102262:	4b0c      	ldr	r3, [pc, #48]	; (8102294 <HAL_Init+0xb4>)
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	4a0c      	ldr	r2, [pc, #48]	; (8102298 <HAL_Init+0xb8>)
 8102268:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810226a:	2000      	movs	r0, #0
 810226c:	f7ff fc0c 	bl	8101a88 <HAL_InitTick>
 8102270:	4603      	mov	r3, r0
 8102272:	2b00      	cmp	r3, #0
 8102274:	d001      	beq.n	810227a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102276:	2301      	movs	r3, #1
 8102278:	e002      	b.n	8102280 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810227a:	f7ff fbd7 	bl	8101a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810227e:	2300      	movs	r3, #0
}
 8102280:	4618      	mov	r0, r3
 8102282:	3708      	adds	r7, #8
 8102284:	46bd      	mov	sp, r7
 8102286:	bd80      	pop	{r7, pc}
 8102288:	58024400 	.word	0x58024400
 810228c:	40024400 	.word	0x40024400
 8102290:	08113888 	.word	0x08113888
 8102294:	10000004 	.word	0x10000004
 8102298:	10000000 	.word	0x10000000

0810229c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810229c:	b480      	push	{r7}
 810229e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81022a0:	4b06      	ldr	r3, [pc, #24]	; (81022bc <HAL_IncTick+0x20>)
 81022a2:	781b      	ldrb	r3, [r3, #0]
 81022a4:	461a      	mov	r2, r3
 81022a6:	4b06      	ldr	r3, [pc, #24]	; (81022c0 <HAL_IncTick+0x24>)
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	4413      	add	r3, r2
 81022ac:	4a04      	ldr	r2, [pc, #16]	; (81022c0 <HAL_IncTick+0x24>)
 81022ae:	6013      	str	r3, [r2, #0]
}
 81022b0:	bf00      	nop
 81022b2:	46bd      	mov	sp, r7
 81022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b8:	4770      	bx	lr
 81022ba:	bf00      	nop
 81022bc:	1000000c 	.word	0x1000000c
 81022c0:	10004ed4 	.word	0x10004ed4

081022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81022c4:	b480      	push	{r7}
 81022c6:	af00      	add	r7, sp, #0
  return uwTick;
 81022c8:	4b03      	ldr	r3, [pc, #12]	; (81022d8 <HAL_GetTick+0x14>)
 81022ca:	681b      	ldr	r3, [r3, #0]
}
 81022cc:	4618      	mov	r0, r3
 81022ce:	46bd      	mov	sp, r7
 81022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022d4:	4770      	bx	lr
 81022d6:	bf00      	nop
 81022d8:	10004ed4 	.word	0x10004ed4

081022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81022dc:	b580      	push	{r7, lr}
 81022de:	b084      	sub	sp, #16
 81022e0:	af00      	add	r7, sp, #0
 81022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81022e4:	f7ff ffee 	bl	81022c4 <HAL_GetTick>
 81022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81022ee:	68fb      	ldr	r3, [r7, #12]
 81022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81022f4:	d005      	beq.n	8102302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81022f6:	4b0a      	ldr	r3, [pc, #40]	; (8102320 <HAL_Delay+0x44>)
 81022f8:	781b      	ldrb	r3, [r3, #0]
 81022fa:	461a      	mov	r2, r3
 81022fc:	68fb      	ldr	r3, [r7, #12]
 81022fe:	4413      	add	r3, r2
 8102300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102302:	bf00      	nop
 8102304:	f7ff ffde 	bl	81022c4 <HAL_GetTick>
 8102308:	4602      	mov	r2, r0
 810230a:	68bb      	ldr	r3, [r7, #8]
 810230c:	1ad3      	subs	r3, r2, r3
 810230e:	68fa      	ldr	r2, [r7, #12]
 8102310:	429a      	cmp	r2, r3
 8102312:	d8f7      	bhi.n	8102304 <HAL_Delay+0x28>
  {
  }
}
 8102314:	bf00      	nop
 8102316:	bf00      	nop
 8102318:	3710      	adds	r7, #16
 810231a:	46bd      	mov	sp, r7
 810231c:	bd80      	pop	{r7, pc}
 810231e:	bf00      	nop
 8102320:	1000000c 	.word	0x1000000c

08102324 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102324:	b480      	push	{r7}
 8102326:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102328:	4b03      	ldr	r3, [pc, #12]	; (8102338 <HAL_GetREVID+0x14>)
 810232a:	681b      	ldr	r3, [r3, #0]
 810232c:	0c1b      	lsrs	r3, r3, #16
}
 810232e:	4618      	mov	r0, r3
 8102330:	46bd      	mov	sp, r7
 8102332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102336:	4770      	bx	lr
 8102338:	5c001000 	.word	0x5c001000

0810233c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 810233c:	b480      	push	{r7}
 810233e:	b083      	sub	sp, #12
 8102340:	af00      	add	r7, sp, #0
 8102342:	6078      	str	r0, [r7, #4]
 8102344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	689b      	ldr	r3, [r3, #8]
 810234a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 810234e:	683b      	ldr	r3, [r7, #0]
 8102350:	431a      	orrs	r2, r3
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	609a      	str	r2, [r3, #8]
}
 8102356:	bf00      	nop
 8102358:	370c      	adds	r7, #12
 810235a:	46bd      	mov	sp, r7
 810235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102360:	4770      	bx	lr

08102362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102362:	b480      	push	{r7}
 8102364:	b083      	sub	sp, #12
 8102366:	af00      	add	r7, sp, #0
 8102368:	6078      	str	r0, [r7, #4]
 810236a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	689b      	ldr	r3, [r3, #8]
 8102370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8102374:	683b      	ldr	r3, [r7, #0]
 8102376:	431a      	orrs	r2, r3
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	609a      	str	r2, [r3, #8]
}
 810237c:	bf00      	nop
 810237e:	370c      	adds	r7, #12
 8102380:	46bd      	mov	sp, r7
 8102382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102386:	4770      	bx	lr

08102388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102388:	b480      	push	{r7}
 810238a:	b083      	sub	sp, #12
 810238c:	af00      	add	r7, sp, #0
 810238e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	689b      	ldr	r3, [r3, #8]
 8102394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8102398:	4618      	mov	r0, r3
 810239a:	370c      	adds	r7, #12
 810239c:	46bd      	mov	sp, r7
 810239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023a2:	4770      	bx	lr

081023a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 81023a4:	b480      	push	{r7}
 81023a6:	b087      	sub	sp, #28
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	60f8      	str	r0, [r7, #12]
 81023ac:	60b9      	str	r1, [r7, #8]
 81023ae:	607a      	str	r2, [r7, #4]
 81023b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81023b2:	68fb      	ldr	r3, [r7, #12]
 81023b4:	3360      	adds	r3, #96	; 0x60
 81023b6:	461a      	mov	r2, r3
 81023b8:	68bb      	ldr	r3, [r7, #8]
 81023ba:	009b      	lsls	r3, r3, #2
 81023bc:	4413      	add	r3, r2
 81023be:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 81023c0:	697b      	ldr	r3, [r7, #20]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 81023ce:	683b      	ldr	r3, [r7, #0]
 81023d0:	430b      	orrs	r3, r1
 81023d2:	431a      	orrs	r2, r3
 81023d4:	697b      	ldr	r3, [r7, #20]
 81023d6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 81023d8:	bf00      	nop
 81023da:	371c      	adds	r7, #28
 81023dc:	46bd      	mov	sp, r7
 81023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023e2:	4770      	bx	lr

081023e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 81023e4:	b480      	push	{r7}
 81023e6:	b085      	sub	sp, #20
 81023e8:	af00      	add	r7, sp, #0
 81023ea:	60f8      	str	r0, [r7, #12]
 81023ec:	60b9      	str	r1, [r7, #8]
 81023ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	691b      	ldr	r3, [r3, #16]
 81023f4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 81023f8:	68bb      	ldr	r3, [r7, #8]
 81023fa:	f003 031f 	and.w	r3, r3, #31
 81023fe:	6879      	ldr	r1, [r7, #4]
 8102400:	fa01 f303 	lsl.w	r3, r1, r3
 8102404:	431a      	orrs	r2, r3
 8102406:	68fb      	ldr	r3, [r7, #12]
 8102408:	611a      	str	r2, [r3, #16]
}
 810240a:	bf00      	nop
 810240c:	3714      	adds	r7, #20
 810240e:	46bd      	mov	sp, r7
 8102410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102414:	4770      	bx	lr

08102416 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102416:	b480      	push	{r7}
 8102418:	b087      	sub	sp, #28
 810241a:	af00      	add	r7, sp, #0
 810241c:	60f8      	str	r0, [r7, #12]
 810241e:	60b9      	str	r1, [r7, #8]
 8102420:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102422:	68fb      	ldr	r3, [r7, #12]
 8102424:	3360      	adds	r3, #96	; 0x60
 8102426:	461a      	mov	r2, r3
 8102428:	68bb      	ldr	r3, [r7, #8]
 810242a:	009b      	lsls	r3, r3, #2
 810242c:	4413      	add	r3, r2
 810242e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102430:	697b      	ldr	r3, [r7, #20]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	431a      	orrs	r2, r3
 810243c:	697b      	ldr	r3, [r7, #20]
 810243e:	601a      	str	r2, [r3, #0]
  }
}
 8102440:	bf00      	nop
 8102442:	371c      	adds	r7, #28
 8102444:	46bd      	mov	sp, r7
 8102446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244a:	4770      	bx	lr

0810244c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 810244c:	b480      	push	{r7}
 810244e:	b083      	sub	sp, #12
 8102450:	af00      	add	r7, sp, #0
 8102452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	68db      	ldr	r3, [r3, #12]
 8102458:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 810245c:	2b00      	cmp	r3, #0
 810245e:	d101      	bne.n	8102464 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8102460:	2301      	movs	r3, #1
 8102462:	e000      	b.n	8102466 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8102464:	2300      	movs	r3, #0
}
 8102466:	4618      	mov	r0, r3
 8102468:	370c      	adds	r7, #12
 810246a:	46bd      	mov	sp, r7
 810246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102470:	4770      	bx	lr

08102472 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102472:	b480      	push	{r7}
 8102474:	b087      	sub	sp, #28
 8102476:	af00      	add	r7, sp, #0
 8102478:	60f8      	str	r0, [r7, #12]
 810247a:	60b9      	str	r1, [r7, #8]
 810247c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 810247e:	68fb      	ldr	r3, [r7, #12]
 8102480:	3330      	adds	r3, #48	; 0x30
 8102482:	461a      	mov	r2, r3
 8102484:	68bb      	ldr	r3, [r7, #8]
 8102486:	0a1b      	lsrs	r3, r3, #8
 8102488:	009b      	lsls	r3, r3, #2
 810248a:	f003 030c 	and.w	r3, r3, #12
 810248e:	4413      	add	r3, r2
 8102490:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102492:	697b      	ldr	r3, [r7, #20]
 8102494:	681a      	ldr	r2, [r3, #0]
 8102496:	68bb      	ldr	r3, [r7, #8]
 8102498:	f003 031f 	and.w	r3, r3, #31
 810249c:	211f      	movs	r1, #31
 810249e:	fa01 f303 	lsl.w	r3, r1, r3
 81024a2:	43db      	mvns	r3, r3
 81024a4:	401a      	ands	r2, r3
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	0e9b      	lsrs	r3, r3, #26
 81024aa:	f003 011f 	and.w	r1, r3, #31
 81024ae:	68bb      	ldr	r3, [r7, #8]
 81024b0:	f003 031f 	and.w	r3, r3, #31
 81024b4:	fa01 f303 	lsl.w	r3, r1, r3
 81024b8:	431a      	orrs	r2, r3
 81024ba:	697b      	ldr	r3, [r7, #20]
 81024bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 81024be:	bf00      	nop
 81024c0:	371c      	adds	r7, #28
 81024c2:	46bd      	mov	sp, r7
 81024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024c8:	4770      	bx	lr

081024ca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81024ca:	b480      	push	{r7}
 81024cc:	b083      	sub	sp, #12
 81024ce:	af00      	add	r7, sp, #0
 81024d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81024d6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d101      	bne.n	81024e2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 81024de:	2301      	movs	r3, #1
 81024e0:	e000      	b.n	81024e4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 81024e2:	2300      	movs	r3, #0
}
 81024e4:	4618      	mov	r0, r3
 81024e6:	370c      	adds	r7, #12
 81024e8:	46bd      	mov	sp, r7
 81024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ee:	4770      	bx	lr

081024f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 81024f0:	b480      	push	{r7}
 81024f2:	b087      	sub	sp, #28
 81024f4:	af00      	add	r7, sp, #0
 81024f6:	60f8      	str	r0, [r7, #12]
 81024f8:	60b9      	str	r1, [r7, #8]
 81024fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81024fc:	68fb      	ldr	r3, [r7, #12]
 81024fe:	3314      	adds	r3, #20
 8102500:	461a      	mov	r2, r3
 8102502:	68bb      	ldr	r3, [r7, #8]
 8102504:	0e5b      	lsrs	r3, r3, #25
 8102506:	009b      	lsls	r3, r3, #2
 8102508:	f003 0304 	and.w	r3, r3, #4
 810250c:	4413      	add	r3, r2
 810250e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102510:	697b      	ldr	r3, [r7, #20]
 8102512:	681a      	ldr	r2, [r3, #0]
 8102514:	68bb      	ldr	r3, [r7, #8]
 8102516:	0d1b      	lsrs	r3, r3, #20
 8102518:	f003 031f 	and.w	r3, r3, #31
 810251c:	2107      	movs	r1, #7
 810251e:	fa01 f303 	lsl.w	r3, r1, r3
 8102522:	43db      	mvns	r3, r3
 8102524:	401a      	ands	r2, r3
 8102526:	68bb      	ldr	r3, [r7, #8]
 8102528:	0d1b      	lsrs	r3, r3, #20
 810252a:	f003 031f 	and.w	r3, r3, #31
 810252e:	6879      	ldr	r1, [r7, #4]
 8102530:	fa01 f303 	lsl.w	r3, r1, r3
 8102534:	431a      	orrs	r2, r3
 8102536:	697b      	ldr	r3, [r7, #20]
 8102538:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810253a:	bf00      	nop
 810253c:	371c      	adds	r7, #28
 810253e:	46bd      	mov	sp, r7
 8102540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102544:	4770      	bx	lr
	...

08102548 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102548:	b480      	push	{r7}
 810254a:	b085      	sub	sp, #20
 810254c:	af00      	add	r7, sp, #0
 810254e:	60f8      	str	r0, [r7, #12]
 8102550:	60b9      	str	r1, [r7, #8]
 8102552:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102554:	68fb      	ldr	r3, [r7, #12]
 8102556:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 810255a:	68bb      	ldr	r3, [r7, #8]
 810255c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102560:	43db      	mvns	r3, r3
 8102562:	401a      	ands	r2, r3
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	f003 0318 	and.w	r3, r3, #24
 810256a:	4908      	ldr	r1, [pc, #32]	; (810258c <LL_ADC_SetChannelSingleDiff+0x44>)
 810256c:	40d9      	lsrs	r1, r3
 810256e:	68bb      	ldr	r3, [r7, #8]
 8102570:	400b      	ands	r3, r1
 8102572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102576:	431a      	orrs	r2, r3
 8102578:	68fb      	ldr	r3, [r7, #12]
 810257a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 810257e:	bf00      	nop
 8102580:	3714      	adds	r7, #20
 8102582:	46bd      	mov	sp, r7
 8102584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102588:	4770      	bx	lr
 810258a:	bf00      	nop
 810258c:	000fffff 	.word	0x000fffff

08102590 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102590:	b480      	push	{r7}
 8102592:	b083      	sub	sp, #12
 8102594:	af00      	add	r7, sp, #0
 8102596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	689b      	ldr	r3, [r3, #8]
 810259c:	f003 031f 	and.w	r3, r3, #31
}
 81025a0:	4618      	mov	r0, r3
 81025a2:	370c      	adds	r7, #12
 81025a4:	46bd      	mov	sp, r7
 81025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025aa:	4770      	bx	lr

081025ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81025ac:	b480      	push	{r7}
 81025ae:	b083      	sub	sp, #12
 81025b0:	af00      	add	r7, sp, #0
 81025b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	689b      	ldr	r3, [r3, #8]
 81025b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 81025bc:	4618      	mov	r0, r3
 81025be:	370c      	adds	r7, #12
 81025c0:	46bd      	mov	sp, r7
 81025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025c6:	4770      	bx	lr

081025c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81025c8:	b480      	push	{r7}
 81025ca:	b083      	sub	sp, #12
 81025cc:	af00      	add	r7, sp, #0
 81025ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	689b      	ldr	r3, [r3, #8]
 81025d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81025d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81025dc:	687a      	ldr	r2, [r7, #4]
 81025de:	6093      	str	r3, [r2, #8]
}
 81025e0:	bf00      	nop
 81025e2:	370c      	adds	r7, #12
 81025e4:	46bd      	mov	sp, r7
 81025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025ea:	4770      	bx	lr

081025ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81025ec:	b480      	push	{r7}
 81025ee:	b083      	sub	sp, #12
 81025f0:	af00      	add	r7, sp, #0
 81025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	689b      	ldr	r3, [r3, #8]
 81025f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81025fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102600:	d101      	bne.n	8102606 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102602:	2301      	movs	r3, #1
 8102604:	e000      	b.n	8102608 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102606:	2300      	movs	r3, #0
}
 8102608:	4618      	mov	r0, r3
 810260a:	370c      	adds	r7, #12
 810260c:	46bd      	mov	sp, r7
 810260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102612:	4770      	bx	lr

08102614 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102614:	b480      	push	{r7}
 8102616:	b083      	sub	sp, #12
 8102618:	af00      	add	r7, sp, #0
 810261a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	689b      	ldr	r3, [r3, #8]
 8102620:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8102624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102628:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8102630:	bf00      	nop
 8102632:	370c      	adds	r7, #12
 8102634:	46bd      	mov	sp, r7
 8102636:	f85d 7b04 	ldr.w	r7, [sp], #4
 810263a:	4770      	bx	lr

0810263c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 810263c:	b480      	push	{r7}
 810263e:	b083      	sub	sp, #12
 8102640:	af00      	add	r7, sp, #0
 8102642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8102644:	687b      	ldr	r3, [r7, #4]
 8102646:	689b      	ldr	r3, [r3, #8]
 8102648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810264c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102650:	d101      	bne.n	8102656 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8102652:	2301      	movs	r3, #1
 8102654:	e000      	b.n	8102658 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8102656:	2300      	movs	r3, #0
}
 8102658:	4618      	mov	r0, r3
 810265a:	370c      	adds	r7, #12
 810265c:	46bd      	mov	sp, r7
 810265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102662:	4770      	bx	lr

08102664 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8102664:	b480      	push	{r7}
 8102666:	b083      	sub	sp, #12
 8102668:	af00      	add	r7, sp, #0
 810266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	689b      	ldr	r3, [r3, #8]
 8102670:	f003 0301 	and.w	r3, r3, #1
 8102674:	2b01      	cmp	r3, #1
 8102676:	d101      	bne.n	810267c <LL_ADC_IsEnabled+0x18>
 8102678:	2301      	movs	r3, #1
 810267a:	e000      	b.n	810267e <LL_ADC_IsEnabled+0x1a>
 810267c:	2300      	movs	r3, #0
}
 810267e:	4618      	mov	r0, r3
 8102680:	370c      	adds	r7, #12
 8102682:	46bd      	mov	sp, r7
 8102684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102688:	4770      	bx	lr

0810268a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810268a:	b480      	push	{r7}
 810268c:	b083      	sub	sp, #12
 810268e:	af00      	add	r7, sp, #0
 8102690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	689b      	ldr	r3, [r3, #8]
 8102696:	f003 0304 	and.w	r3, r3, #4
 810269a:	2b04      	cmp	r3, #4
 810269c:	d101      	bne.n	81026a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 810269e:	2301      	movs	r3, #1
 81026a0:	e000      	b.n	81026a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81026a2:	2300      	movs	r3, #0
}
 81026a4:	4618      	mov	r0, r3
 81026a6:	370c      	adds	r7, #12
 81026a8:	46bd      	mov	sp, r7
 81026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026ae:	4770      	bx	lr

081026b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81026b0:	b480      	push	{r7}
 81026b2:	b083      	sub	sp, #12
 81026b4:	af00      	add	r7, sp, #0
 81026b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	689b      	ldr	r3, [r3, #8]
 81026bc:	f003 0308 	and.w	r3, r3, #8
 81026c0:	2b08      	cmp	r3, #8
 81026c2:	d101      	bne.n	81026c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81026c4:	2301      	movs	r3, #1
 81026c6:	e000      	b.n	81026ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81026c8:	2300      	movs	r3, #0
}
 81026ca:	4618      	mov	r0, r3
 81026cc:	370c      	adds	r7, #12
 81026ce:	46bd      	mov	sp, r7
 81026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026d4:	4770      	bx	lr
	...

081026d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81026d8:	b590      	push	{r4, r7, lr}
 81026da:	b089      	sub	sp, #36	; 0x24
 81026dc:	af00      	add	r7, sp, #0
 81026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81026e0:	2300      	movs	r3, #0
 81026e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81026e4:	2300      	movs	r3, #0
 81026e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81026e8:	687b      	ldr	r3, [r7, #4]
 81026ea:	2b00      	cmp	r3, #0
 81026ec:	d101      	bne.n	81026f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81026ee:	2301      	movs	r3, #1
 81026f0:	e18e      	b.n	8102a10 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	68db      	ldr	r3, [r3, #12]
 81026f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81026fc:	2b00      	cmp	r3, #0
 81026fe:	d109      	bne.n	8102714 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102700:	6878      	ldr	r0, [r7, #4]
 8102702:	f7fe fceb 	bl	81010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	2200      	movs	r2, #0
 810270a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	2200      	movs	r2, #0
 8102710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	681b      	ldr	r3, [r3, #0]
 8102718:	4618      	mov	r0, r3
 810271a:	f7ff ff67 	bl	81025ec <LL_ADC_IsDeepPowerDownEnabled>
 810271e:	4603      	mov	r3, r0
 8102720:	2b00      	cmp	r3, #0
 8102722:	d004      	beq.n	810272e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	681b      	ldr	r3, [r3, #0]
 8102728:	4618      	mov	r0, r3
 810272a:	f7ff ff4d 	bl	81025c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810272e:	687b      	ldr	r3, [r7, #4]
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	4618      	mov	r0, r3
 8102734:	f7ff ff82 	bl	810263c <LL_ADC_IsInternalRegulatorEnabled>
 8102738:	4603      	mov	r3, r0
 810273a:	2b00      	cmp	r3, #0
 810273c:	d114      	bne.n	8102768 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	4618      	mov	r0, r3
 8102744:	f7ff ff66 	bl	8102614 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102748:	4b9b      	ldr	r3, [pc, #620]	; (81029b8 <HAL_ADC_Init+0x2e0>)
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	099b      	lsrs	r3, r3, #6
 810274e:	4a9b      	ldr	r2, [pc, #620]	; (81029bc <HAL_ADC_Init+0x2e4>)
 8102750:	fba2 2303 	umull	r2, r3, r2, r3
 8102754:	099b      	lsrs	r3, r3, #6
 8102756:	3301      	adds	r3, #1
 8102758:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810275a:	e002      	b.n	8102762 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810275c:	68bb      	ldr	r3, [r7, #8]
 810275e:	3b01      	subs	r3, #1
 8102760:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102762:	68bb      	ldr	r3, [r7, #8]
 8102764:	2b00      	cmp	r3, #0
 8102766:	d1f9      	bne.n	810275c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	681b      	ldr	r3, [r3, #0]
 810276c:	4618      	mov	r0, r3
 810276e:	f7ff ff65 	bl	810263c <LL_ADC_IsInternalRegulatorEnabled>
 8102772:	4603      	mov	r3, r0
 8102774:	2b00      	cmp	r3, #0
 8102776:	d10d      	bne.n	8102794 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810277c:	f043 0210 	orr.w	r2, r3, #16
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102788:	f043 0201 	orr.w	r2, r3, #1
 810278c:	687b      	ldr	r3, [r7, #4]
 810278e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102790:	2301      	movs	r3, #1
 8102792:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	4618      	mov	r0, r3
 810279a:	f7ff ff76 	bl	810268a <LL_ADC_REG_IsConversionOngoing>
 810279e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027a4:	f003 0310 	and.w	r3, r3, #16
 81027a8:	2b00      	cmp	r3, #0
 81027aa:	f040 8128 	bne.w	81029fe <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81027ae:	697b      	ldr	r3, [r7, #20]
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	f040 8124 	bne.w	81029fe <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81027b6:	687b      	ldr	r3, [r7, #4]
 81027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81027ba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81027be:	f043 0202 	orr.w	r2, r3, #2
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	4618      	mov	r0, r3
 81027cc:	f7ff ff4a 	bl	8102664 <LL_ADC_IsEnabled>
 81027d0:	4603      	mov	r3, r0
 81027d2:	2b00      	cmp	r3, #0
 81027d4:	d136      	bne.n	8102844 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	681b      	ldr	r3, [r3, #0]
 81027da:	4a79      	ldr	r2, [pc, #484]	; (81029c0 <HAL_ADC_Init+0x2e8>)
 81027dc:	4293      	cmp	r3, r2
 81027de:	d004      	beq.n	81027ea <HAL_ADC_Init+0x112>
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	4a77      	ldr	r2, [pc, #476]	; (81029c4 <HAL_ADC_Init+0x2ec>)
 81027e6:	4293      	cmp	r3, r2
 81027e8:	d10e      	bne.n	8102808 <HAL_ADC_Init+0x130>
 81027ea:	4875      	ldr	r0, [pc, #468]	; (81029c0 <HAL_ADC_Init+0x2e8>)
 81027ec:	f7ff ff3a 	bl	8102664 <LL_ADC_IsEnabled>
 81027f0:	4604      	mov	r4, r0
 81027f2:	4874      	ldr	r0, [pc, #464]	; (81029c4 <HAL_ADC_Init+0x2ec>)
 81027f4:	f7ff ff36 	bl	8102664 <LL_ADC_IsEnabled>
 81027f8:	4603      	mov	r3, r0
 81027fa:	4323      	orrs	r3, r4
 81027fc:	2b00      	cmp	r3, #0
 81027fe:	bf0c      	ite	eq
 8102800:	2301      	moveq	r3, #1
 8102802:	2300      	movne	r3, #0
 8102804:	b2db      	uxtb	r3, r3
 8102806:	e008      	b.n	810281a <HAL_ADC_Init+0x142>
 8102808:	486f      	ldr	r0, [pc, #444]	; (81029c8 <HAL_ADC_Init+0x2f0>)
 810280a:	f7ff ff2b 	bl	8102664 <LL_ADC_IsEnabled>
 810280e:	4603      	mov	r3, r0
 8102810:	2b00      	cmp	r3, #0
 8102812:	bf0c      	ite	eq
 8102814:	2301      	moveq	r3, #1
 8102816:	2300      	movne	r3, #0
 8102818:	b2db      	uxtb	r3, r3
 810281a:	2b00      	cmp	r3, #0
 810281c:	d012      	beq.n	8102844 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	4a67      	ldr	r2, [pc, #412]	; (81029c0 <HAL_ADC_Init+0x2e8>)
 8102824:	4293      	cmp	r3, r2
 8102826:	d004      	beq.n	8102832 <HAL_ADC_Init+0x15a>
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	4a65      	ldr	r2, [pc, #404]	; (81029c4 <HAL_ADC_Init+0x2ec>)
 810282e:	4293      	cmp	r3, r2
 8102830:	d101      	bne.n	8102836 <HAL_ADC_Init+0x15e>
 8102832:	4a66      	ldr	r2, [pc, #408]	; (81029cc <HAL_ADC_Init+0x2f4>)
 8102834:	e000      	b.n	8102838 <HAL_ADC_Init+0x160>
 8102836:	4a66      	ldr	r2, [pc, #408]	; (81029d0 <HAL_ADC_Init+0x2f8>)
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	685b      	ldr	r3, [r3, #4]
 810283c:	4619      	mov	r1, r3
 810283e:	4610      	mov	r0, r2
 8102840:	f7ff fd7c 	bl	810233c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102844:	f7ff fd6e 	bl	8102324 <HAL_GetREVID>
 8102848:	4603      	mov	r3, r0
 810284a:	f241 0203 	movw	r2, #4099	; 0x1003
 810284e:	4293      	cmp	r3, r2
 8102850:	d914      	bls.n	810287c <HAL_ADC_Init+0x1a4>
 8102852:	687b      	ldr	r3, [r7, #4]
 8102854:	689b      	ldr	r3, [r3, #8]
 8102856:	2b10      	cmp	r3, #16
 8102858:	d110      	bne.n	810287c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810285a:	687b      	ldr	r3, [r7, #4]
 810285c:	7d5b      	ldrb	r3, [r3, #21]
 810285e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102864:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810286a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	7f1b      	ldrb	r3, [r3, #28]
 8102870:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102872:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102874:	f043 030c 	orr.w	r3, r3, #12
 8102878:	61bb      	str	r3, [r7, #24]
 810287a:	e00d      	b.n	8102898 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	7d5b      	ldrb	r3, [r3, #21]
 8102880:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102886:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810288c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810288e:	687b      	ldr	r3, [r7, #4]
 8102890:	7f1b      	ldrb	r3, [r3, #28]
 8102892:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102894:	4313      	orrs	r3, r2
 8102896:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	7f1b      	ldrb	r3, [r3, #28]
 810289c:	2b01      	cmp	r3, #1
 810289e:	d106      	bne.n	81028ae <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	6a1b      	ldr	r3, [r3, #32]
 81028a4:	3b01      	subs	r3, #1
 81028a6:	045b      	lsls	r3, r3, #17
 81028a8:	69ba      	ldr	r2, [r7, #24]
 81028aa:	4313      	orrs	r3, r2
 81028ac:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028b2:	2b00      	cmp	r3, #0
 81028b4:	d009      	beq.n	81028ca <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81028b6:	687b      	ldr	r3, [r7, #4]
 81028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028ba:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81028c2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81028c4:	69ba      	ldr	r2, [r7, #24]
 81028c6:	4313      	orrs	r3, r2
 81028c8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	68da      	ldr	r2, [r3, #12]
 81028d0:	4b40      	ldr	r3, [pc, #256]	; (81029d4 <HAL_ADC_Init+0x2fc>)
 81028d2:	4013      	ands	r3, r2
 81028d4:	687a      	ldr	r2, [r7, #4]
 81028d6:	6812      	ldr	r2, [r2, #0]
 81028d8:	69b9      	ldr	r1, [r7, #24]
 81028da:	430b      	orrs	r3, r1
 81028dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	4618      	mov	r0, r3
 81028e4:	f7ff fed1 	bl	810268a <LL_ADC_REG_IsConversionOngoing>
 81028e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	4618      	mov	r0, r3
 81028f0:	f7ff fede 	bl	81026b0 <LL_ADC_INJ_IsConversionOngoing>
 81028f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81028f6:	693b      	ldr	r3, [r7, #16]
 81028f8:	2b00      	cmp	r3, #0
 81028fa:	d14c      	bne.n	8102996 <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81028fc:	68fb      	ldr	r3, [r7, #12]
 81028fe:	2b00      	cmp	r3, #0
 8102900:	d149      	bne.n	8102996 <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	7d1b      	ldrb	r3, [r3, #20]
 8102906:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 810290c:	4313      	orrs	r3, r2
 810290e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102910:	687b      	ldr	r3, [r7, #4]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	68db      	ldr	r3, [r3, #12]
 8102916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810291a:	f023 0303 	bic.w	r3, r3, #3
 810291e:	687a      	ldr	r2, [r7, #4]
 8102920:	6812      	ldr	r2, [r2, #0]
 8102922:	69b9      	ldr	r1, [r7, #24]
 8102924:	430b      	orrs	r3, r1
 8102926:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102928:	687b      	ldr	r3, [r7, #4]
 810292a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810292e:	2b01      	cmp	r3, #1
 8102930:	d11b      	bne.n	810296a <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102932:	687b      	ldr	r3, [r7, #4]
 8102934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102936:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	691a      	ldr	r2, [r3, #16]
 810293e:	4b26      	ldr	r3, [pc, #152]	; (81029d8 <HAL_ADC_Init+0x300>)
 8102940:	4013      	ands	r3, r2
 8102942:	687a      	ldr	r2, [r7, #4]
 8102944:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102946:	3a01      	subs	r2, #1
 8102948:	0411      	lsls	r1, r2, #16
 810294a:	687a      	ldr	r2, [r7, #4]
 810294c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810294e:	4311      	orrs	r1, r2
 8102950:	687a      	ldr	r2, [r7, #4]
 8102952:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102954:	4311      	orrs	r1, r2
 8102956:	687a      	ldr	r2, [r7, #4]
 8102958:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810295a:	430a      	orrs	r2, r1
 810295c:	431a      	orrs	r2, r3
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	f042 0201 	orr.w	r2, r2, #1
 8102966:	611a      	str	r2, [r3, #16]
 8102968:	e007      	b.n	810297a <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810296a:	687b      	ldr	r3, [r7, #4]
 810296c:	681b      	ldr	r3, [r3, #0]
 810296e:	691a      	ldr	r2, [r3, #16]
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	f022 0201 	bic.w	r2, r2, #1
 8102978:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	691b      	ldr	r3, [r3, #16]
 8102980:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	430a      	orrs	r2, r1
 810298e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102990:	6878      	ldr	r0, [r7, #4]
 8102992:	f000 fde9 	bl	8103568 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	68db      	ldr	r3, [r3, #12]
 810299a:	2b01      	cmp	r3, #1
 810299c:	d11e      	bne.n	81029dc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81029a4:	f023 010f 	bic.w	r1, r3, #15
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	699b      	ldr	r3, [r3, #24]
 81029ac:	1e5a      	subs	r2, r3, #1
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	430a      	orrs	r2, r1
 81029b4:	631a      	str	r2, [r3, #48]	; 0x30
 81029b6:	e019      	b.n	81029ec <HAL_ADC_Init+0x314>
 81029b8:	10000000 	.word	0x10000000
 81029bc:	053e2d63 	.word	0x053e2d63
 81029c0:	40022000 	.word	0x40022000
 81029c4:	40022100 	.word	0x40022100
 81029c8:	58026000 	.word	0x58026000
 81029cc:	40022300 	.word	0x40022300
 81029d0:	58026300 	.word	0x58026300
 81029d4:	fff0c003 	.word	0xfff0c003
 81029d8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81029e2:	687b      	ldr	r3, [r7, #4]
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	f022 020f 	bic.w	r2, r2, #15
 81029ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029f0:	f023 0303 	bic.w	r3, r3, #3
 81029f4:	f043 0201 	orr.w	r2, r3, #1
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	655a      	str	r2, [r3, #84]	; 0x54
 81029fc:	e007      	b.n	8102a0e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a02:	f043 0210 	orr.w	r2, r3, #16
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102a0a:	2301      	movs	r3, #1
 8102a0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8102a10:	4618      	mov	r0, r3
 8102a12:	3724      	adds	r7, #36	; 0x24
 8102a14:	46bd      	mov	sp, r7
 8102a16:	bd90      	pop	{r4, r7, pc}

08102a18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8102a18:	b580      	push	{r7, lr}
 8102a1a:	b08a      	sub	sp, #40	; 0x28
 8102a1c:	af00      	add	r7, sp, #0
 8102a1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8102a20:	2300      	movs	r3, #0
 8102a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	685b      	ldr	r3, [r3, #4]
 8102a32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	4a87      	ldr	r2, [pc, #540]	; (8102c58 <HAL_ADC_IRQHandler+0x240>)
 8102a3a:	4293      	cmp	r3, r2
 8102a3c:	d004      	beq.n	8102a48 <HAL_ADC_IRQHandler+0x30>
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	4a86      	ldr	r2, [pc, #536]	; (8102c5c <HAL_ADC_IRQHandler+0x244>)
 8102a44:	4293      	cmp	r3, r2
 8102a46:	d101      	bne.n	8102a4c <HAL_ADC_IRQHandler+0x34>
 8102a48:	4b85      	ldr	r3, [pc, #532]	; (8102c60 <HAL_ADC_IRQHandler+0x248>)
 8102a4a:	e000      	b.n	8102a4e <HAL_ADC_IRQHandler+0x36>
 8102a4c:	4b85      	ldr	r3, [pc, #532]	; (8102c64 <HAL_ADC_IRQHandler+0x24c>)
 8102a4e:	4618      	mov	r0, r3
 8102a50:	f7ff fd9e 	bl	8102590 <LL_ADC_GetMultimode>
 8102a54:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8102a56:	69fb      	ldr	r3, [r7, #28]
 8102a58:	f003 0302 	and.w	r3, r3, #2
 8102a5c:	2b00      	cmp	r3, #0
 8102a5e:	d017      	beq.n	8102a90 <HAL_ADC_IRQHandler+0x78>
 8102a60:	69bb      	ldr	r3, [r7, #24]
 8102a62:	f003 0302 	and.w	r3, r3, #2
 8102a66:	2b00      	cmp	r3, #0
 8102a68:	d012      	beq.n	8102a90 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a6e:	f003 0310 	and.w	r3, r3, #16
 8102a72:	2b00      	cmp	r3, #0
 8102a74:	d105      	bne.n	8102a82 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a7a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8102a7e:	687b      	ldr	r3, [r7, #4]
 8102a80:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8102a82:	6878      	ldr	r0, [r7, #4]
 8102a84:	f000 fec8 	bl	8103818 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	2202      	movs	r2, #2
 8102a8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8102a90:	69fb      	ldr	r3, [r7, #28]
 8102a92:	f003 0304 	and.w	r3, r3, #4
 8102a96:	2b00      	cmp	r3, #0
 8102a98:	d004      	beq.n	8102aa4 <HAL_ADC_IRQHandler+0x8c>
 8102a9a:	69bb      	ldr	r3, [r7, #24]
 8102a9c:	f003 0304 	and.w	r3, r3, #4
 8102aa0:	2b00      	cmp	r3, #0
 8102aa2:	d10a      	bne.n	8102aba <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8102aa4:	69fb      	ldr	r3, [r7, #28]
 8102aa6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8102aaa:	2b00      	cmp	r3, #0
 8102aac:	f000 8083 	beq.w	8102bb6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8102ab0:	69bb      	ldr	r3, [r7, #24]
 8102ab2:	f003 0308 	and.w	r3, r3, #8
 8102ab6:	2b00      	cmp	r3, #0
 8102ab8:	d07d      	beq.n	8102bb6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102abe:	f003 0310 	and.w	r3, r3, #16
 8102ac2:	2b00      	cmp	r3, #0
 8102ac4:	d105      	bne.n	8102ad2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8102ace:	687b      	ldr	r3, [r7, #4]
 8102ad0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	4618      	mov	r0, r3
 8102ad8:	f7ff fcb8 	bl	810244c <LL_ADC_REG_IsTriggerSourceSWStart>
 8102adc:	4603      	mov	r3, r0
 8102ade:	2b00      	cmp	r3, #0
 8102ae0:	d062      	beq.n	8102ba8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	4a5d      	ldr	r2, [pc, #372]	; (8102c5c <HAL_ADC_IRQHandler+0x244>)
 8102ae8:	4293      	cmp	r3, r2
 8102aea:	d002      	beq.n	8102af2 <HAL_ADC_IRQHandler+0xda>
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	e000      	b.n	8102af4 <HAL_ADC_IRQHandler+0xdc>
 8102af2:	4b59      	ldr	r3, [pc, #356]	; (8102c58 <HAL_ADC_IRQHandler+0x240>)
 8102af4:	687a      	ldr	r2, [r7, #4]
 8102af6:	6812      	ldr	r2, [r2, #0]
 8102af8:	4293      	cmp	r3, r2
 8102afa:	d008      	beq.n	8102b0e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102afc:	697b      	ldr	r3, [r7, #20]
 8102afe:	2b00      	cmp	r3, #0
 8102b00:	d005      	beq.n	8102b0e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102b02:	697b      	ldr	r3, [r7, #20]
 8102b04:	2b05      	cmp	r3, #5
 8102b06:	d002      	beq.n	8102b0e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102b08:	697b      	ldr	r3, [r7, #20]
 8102b0a:	2b09      	cmp	r3, #9
 8102b0c:	d104      	bne.n	8102b18 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	68db      	ldr	r3, [r3, #12]
 8102b14:	623b      	str	r3, [r7, #32]
 8102b16:	e00c      	b.n	8102b32 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	4a4f      	ldr	r2, [pc, #316]	; (8102c5c <HAL_ADC_IRQHandler+0x244>)
 8102b1e:	4293      	cmp	r3, r2
 8102b20:	d002      	beq.n	8102b28 <HAL_ADC_IRQHandler+0x110>
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	e000      	b.n	8102b2a <HAL_ADC_IRQHandler+0x112>
 8102b28:	4b4b      	ldr	r3, [pc, #300]	; (8102c58 <HAL_ADC_IRQHandler+0x240>)
 8102b2a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102b2c:	693b      	ldr	r3, [r7, #16]
 8102b2e:	68db      	ldr	r3, [r3, #12]
 8102b30:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8102b32:	6a3b      	ldr	r3, [r7, #32]
 8102b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102b38:	2b00      	cmp	r3, #0
 8102b3a:	d135      	bne.n	8102ba8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	681b      	ldr	r3, [r3, #0]
 8102b42:	f003 0308 	and.w	r3, r3, #8
 8102b46:	2b08      	cmp	r3, #8
 8102b48:	d12e      	bne.n	8102ba8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4618      	mov	r0, r3
 8102b50:	f7ff fd9b 	bl	810268a <LL_ADC_REG_IsConversionOngoing>
 8102b54:	4603      	mov	r3, r0
 8102b56:	2b00      	cmp	r3, #0
 8102b58:	d11a      	bne.n	8102b90 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	681b      	ldr	r3, [r3, #0]
 8102b5e:	685a      	ldr	r2, [r3, #4]
 8102b60:	687b      	ldr	r3, [r7, #4]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	f022 020c 	bic.w	r2, r2, #12
 8102b68:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d112      	bne.n	8102ba8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b86:	f043 0201 	orr.w	r2, r3, #1
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	655a      	str	r2, [r3, #84]	; 0x54
 8102b8e:	e00b      	b.n	8102ba8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b94:	f043 0210 	orr.w	r2, r3, #16
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ba0:	f043 0201 	orr.w	r2, r3, #1
 8102ba4:	687b      	ldr	r3, [r7, #4]
 8102ba6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8102ba8:	6878      	ldr	r0, [r7, #4]
 8102baa:	f000 f96f 	bl	8102e8c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	681b      	ldr	r3, [r3, #0]
 8102bb2:	220c      	movs	r2, #12
 8102bb4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8102bb6:	69fb      	ldr	r3, [r7, #28]
 8102bb8:	f003 0320 	and.w	r3, r3, #32
 8102bbc:	2b00      	cmp	r3, #0
 8102bbe:	d004      	beq.n	8102bca <HAL_ADC_IRQHandler+0x1b2>
 8102bc0:	69bb      	ldr	r3, [r7, #24]
 8102bc2:	f003 0320 	and.w	r3, r3, #32
 8102bc6:	2b00      	cmp	r3, #0
 8102bc8:	d10b      	bne.n	8102be2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8102bca:	69fb      	ldr	r3, [r7, #28]
 8102bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8102bd0:	2b00      	cmp	r3, #0
 8102bd2:	f000 80a0 	beq.w	8102d16 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8102bd6:	69bb      	ldr	r3, [r7, #24]
 8102bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102bdc:	2b00      	cmp	r3, #0
 8102bde:	f000 809a 	beq.w	8102d16 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102be6:	f003 0310 	and.w	r3, r3, #16
 8102bea:	2b00      	cmp	r3, #0
 8102bec:	d105      	bne.n	8102bfa <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bf2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	4618      	mov	r0, r3
 8102c00:	f7ff fc63 	bl	81024ca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8102c04:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	4618      	mov	r0, r3
 8102c0c:	f7ff fc1e 	bl	810244c <LL_ADC_REG_IsTriggerSourceSWStart>
 8102c10:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	681b      	ldr	r3, [r3, #0]
 8102c16:	4a11      	ldr	r2, [pc, #68]	; (8102c5c <HAL_ADC_IRQHandler+0x244>)
 8102c18:	4293      	cmp	r3, r2
 8102c1a:	d002      	beq.n	8102c22 <HAL_ADC_IRQHandler+0x20a>
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	681b      	ldr	r3, [r3, #0]
 8102c20:	e000      	b.n	8102c24 <HAL_ADC_IRQHandler+0x20c>
 8102c22:	4b0d      	ldr	r3, [pc, #52]	; (8102c58 <HAL_ADC_IRQHandler+0x240>)
 8102c24:	687a      	ldr	r2, [r7, #4]
 8102c26:	6812      	ldr	r2, [r2, #0]
 8102c28:	4293      	cmp	r3, r2
 8102c2a:	d008      	beq.n	8102c3e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102c2c:	697b      	ldr	r3, [r7, #20]
 8102c2e:	2b00      	cmp	r3, #0
 8102c30:	d005      	beq.n	8102c3e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8102c32:	697b      	ldr	r3, [r7, #20]
 8102c34:	2b06      	cmp	r3, #6
 8102c36:	d002      	beq.n	8102c3e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8102c38:	697b      	ldr	r3, [r7, #20]
 8102c3a:	2b07      	cmp	r3, #7
 8102c3c:	d104      	bne.n	8102c48 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8102c3e:	687b      	ldr	r3, [r7, #4]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	68db      	ldr	r3, [r3, #12]
 8102c44:	623b      	str	r3, [r7, #32]
 8102c46:	e014      	b.n	8102c72 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	4a03      	ldr	r2, [pc, #12]	; (8102c5c <HAL_ADC_IRQHandler+0x244>)
 8102c4e:	4293      	cmp	r3, r2
 8102c50:	d00a      	beq.n	8102c68 <HAL_ADC_IRQHandler+0x250>
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	e008      	b.n	8102c6a <HAL_ADC_IRQHandler+0x252>
 8102c58:	40022000 	.word	0x40022000
 8102c5c:	40022100 	.word	0x40022100
 8102c60:	40022300 	.word	0x40022300
 8102c64:	58026300 	.word	0x58026300
 8102c68:	4b84      	ldr	r3, [pc, #528]	; (8102e7c <HAL_ADC_IRQHandler+0x464>)
 8102c6a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102c6c:	693b      	ldr	r3, [r7, #16]
 8102c6e:	68db      	ldr	r3, [r3, #12]
 8102c70:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8102c72:	68fb      	ldr	r3, [r7, #12]
 8102c74:	2b00      	cmp	r3, #0
 8102c76:	d10c      	bne.n	8102c92 <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8102c78:	6a3b      	ldr	r3, [r7, #32]
 8102c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8102c7e:	2b00      	cmp	r3, #0
 8102c80:	d142      	bne.n	8102d08 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8102c82:	68bb      	ldr	r3, [r7, #8]
 8102c84:	2b00      	cmp	r3, #0
 8102c86:	d03f      	beq.n	8102d08 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8102c88:	6a3b      	ldr	r3, [r7, #32]
 8102c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	d13a      	bne.n	8102d08 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8102c92:	687b      	ldr	r3, [r7, #4]
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102c9c:	2b40      	cmp	r3, #64	; 0x40
 8102c9e:	d133      	bne.n	8102d08 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8102ca0:	6a3b      	ldr	r3, [r7, #32]
 8102ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102ca6:	2b00      	cmp	r3, #0
 8102ca8:	d12e      	bne.n	8102d08 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8102caa:	687b      	ldr	r3, [r7, #4]
 8102cac:	681b      	ldr	r3, [r3, #0]
 8102cae:	4618      	mov	r0, r3
 8102cb0:	f7ff fcfe 	bl	81026b0 <LL_ADC_INJ_IsConversionOngoing>
 8102cb4:	4603      	mov	r3, r0
 8102cb6:	2b00      	cmp	r3, #0
 8102cb8:	d11a      	bne.n	8102cf0 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	681b      	ldr	r3, [r3, #0]
 8102cbe:	685a      	ldr	r2, [r3, #4]
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	681b      	ldr	r3, [r3, #0]
 8102cc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8102cc8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102cde:	2b00      	cmp	r3, #0
 8102ce0:	d112      	bne.n	8102d08 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ce6:	f043 0201 	orr.w	r2, r3, #1
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	655a      	str	r2, [r3, #84]	; 0x54
 8102cee:	e00b      	b.n	8102d08 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cf4:	f043 0210 	orr.w	r2, r3, #16
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d00:	f043 0201 	orr.w	r2, r3, #1
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8102d08:	6878      	ldr	r0, [r7, #4]
 8102d0a:	f000 fd5d 	bl	81037c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8102d0e:	687b      	ldr	r3, [r7, #4]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	2260      	movs	r2, #96	; 0x60
 8102d14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8102d16:	69fb      	ldr	r3, [r7, #28]
 8102d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	d011      	beq.n	8102d44 <HAL_ADC_IRQHandler+0x32c>
 8102d20:	69bb      	ldr	r3, [r7, #24]
 8102d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102d26:	2b00      	cmp	r3, #0
 8102d28:	d00c      	beq.n	8102d44 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8102d36:	6878      	ldr	r0, [r7, #4]
 8102d38:	f000 f8b2 	bl	8102ea0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	2280      	movs	r2, #128	; 0x80
 8102d42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8102d44:	69fb      	ldr	r3, [r7, #28]
 8102d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d4a:	2b00      	cmp	r3, #0
 8102d4c:	d012      	beq.n	8102d74 <HAL_ADC_IRQHandler+0x35c>
 8102d4e:	69bb      	ldr	r3, [r7, #24]
 8102d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d54:	2b00      	cmp	r3, #0
 8102d56:	d00d      	beq.n	8102d74 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8102d64:	6878      	ldr	r0, [r7, #4]
 8102d66:	f000 fd43 	bl	81037f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102d72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8102d74:	69fb      	ldr	r3, [r7, #28]
 8102d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102d7a:	2b00      	cmp	r3, #0
 8102d7c:	d012      	beq.n	8102da4 <HAL_ADC_IRQHandler+0x38c>
 8102d7e:	69bb      	ldr	r3, [r7, #24]
 8102d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102d84:	2b00      	cmp	r3, #0
 8102d86:	d00d      	beq.n	8102da4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8102d94:	6878      	ldr	r0, [r7, #4]
 8102d96:	f000 fd35 	bl	8103804 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8102d9a:	687b      	ldr	r3, [r7, #4]
 8102d9c:	681b      	ldr	r3, [r3, #0]
 8102d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102da2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8102da4:	69fb      	ldr	r3, [r7, #28]
 8102da6:	f003 0310 	and.w	r3, r3, #16
 8102daa:	2b00      	cmp	r3, #0
 8102dac:	d043      	beq.n	8102e36 <HAL_ADC_IRQHandler+0x41e>
 8102dae:	69bb      	ldr	r3, [r7, #24]
 8102db0:	f003 0310 	and.w	r3, r3, #16
 8102db4:	2b00      	cmp	r3, #0
 8102db6:	d03e      	beq.n	8102e36 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102dbc:	2b00      	cmp	r3, #0
 8102dbe:	d102      	bne.n	8102dc6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8102dc0:	2301      	movs	r3, #1
 8102dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8102dc4:	e021      	b.n	8102e0a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8102dc6:	697b      	ldr	r3, [r7, #20]
 8102dc8:	2b00      	cmp	r3, #0
 8102dca:	d015      	beq.n	8102df8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	4a2a      	ldr	r2, [pc, #168]	; (8102e7c <HAL_ADC_IRQHandler+0x464>)
 8102dd2:	4293      	cmp	r3, r2
 8102dd4:	d004      	beq.n	8102de0 <HAL_ADC_IRQHandler+0x3c8>
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a29      	ldr	r2, [pc, #164]	; (8102e80 <HAL_ADC_IRQHandler+0x468>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d101      	bne.n	8102de4 <HAL_ADC_IRQHandler+0x3cc>
 8102de0:	4b28      	ldr	r3, [pc, #160]	; (8102e84 <HAL_ADC_IRQHandler+0x46c>)
 8102de2:	e000      	b.n	8102de6 <HAL_ADC_IRQHandler+0x3ce>
 8102de4:	4b28      	ldr	r3, [pc, #160]	; (8102e88 <HAL_ADC_IRQHandler+0x470>)
 8102de6:	4618      	mov	r0, r3
 8102de8:	f7ff fbe0 	bl	81025ac <LL_ADC_GetMultiDMATransfer>
 8102dec:	4603      	mov	r3, r0
 8102dee:	2b00      	cmp	r3, #0
 8102df0:	d00b      	beq.n	8102e0a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8102df2:	2301      	movs	r3, #1
 8102df4:	627b      	str	r3, [r7, #36]	; 0x24
 8102df6:	e008      	b.n	8102e0a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	68db      	ldr	r3, [r3, #12]
 8102dfe:	f003 0303 	and.w	r3, r3, #3
 8102e02:	2b00      	cmp	r3, #0
 8102e04:	d001      	beq.n	8102e0a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8102e06:	2301      	movs	r3, #1
 8102e08:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8102e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102e0c:	2b01      	cmp	r3, #1
 8102e0e:	d10e      	bne.n	8102e2e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8102e10:	687b      	ldr	r3, [r7, #4]
 8102e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e20:	f043 0202 	orr.w	r2, r3, #2
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8102e28:	6878      	ldr	r0, [r7, #4]
 8102e2a:	f000 f843 	bl	8102eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	2210      	movs	r2, #16
 8102e34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8102e36:	69fb      	ldr	r3, [r7, #28]
 8102e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102e3c:	2b00      	cmp	r3, #0
 8102e3e:	d018      	beq.n	8102e72 <HAL_ADC_IRQHandler+0x45a>
 8102e40:	69bb      	ldr	r3, [r7, #24]
 8102e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102e46:	2b00      	cmp	r3, #0
 8102e48:	d013      	beq.n	8102e72 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e4e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e5a:	f043 0208 	orr.w	r2, r3, #8
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8102e6a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8102e6c:	6878      	ldr	r0, [r7, #4]
 8102e6e:	f000 fcb5 	bl	81037dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8102e72:	bf00      	nop
 8102e74:	3728      	adds	r7, #40	; 0x28
 8102e76:	46bd      	mov	sp, r7
 8102e78:	bd80      	pop	{r7, pc}
 8102e7a:	bf00      	nop
 8102e7c:	40022000 	.word	0x40022000
 8102e80:	40022100 	.word	0x40022100
 8102e84:	40022300 	.word	0x40022300
 8102e88:	58026300 	.word	0x58026300

08102e8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8102e8c:	b480      	push	{r7}
 8102e8e:	b083      	sub	sp, #12
 8102e90:	af00      	add	r7, sp, #0
 8102e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8102e94:	bf00      	nop
 8102e96:	370c      	adds	r7, #12
 8102e98:	46bd      	mov	sp, r7
 8102e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e9e:	4770      	bx	lr

08102ea0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8102ea0:	b480      	push	{r7}
 8102ea2:	b083      	sub	sp, #12
 8102ea4:	af00      	add	r7, sp, #0
 8102ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8102ea8:	bf00      	nop
 8102eaa:	370c      	adds	r7, #12
 8102eac:	46bd      	mov	sp, r7
 8102eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb2:	4770      	bx	lr

08102eb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8102eb4:	b480      	push	{r7}
 8102eb6:	b083      	sub	sp, #12
 8102eb8:	af00      	add	r7, sp, #0
 8102eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8102ebc:	bf00      	nop
 8102ebe:	370c      	adds	r7, #12
 8102ec0:	46bd      	mov	sp, r7
 8102ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec6:	4770      	bx	lr

08102ec8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102ec8:	b590      	push	{r4, r7, lr}
 8102eca:	b0a1      	sub	sp, #132	; 0x84
 8102ecc:	af00      	add	r7, sp, #0
 8102ece:	6078      	str	r0, [r7, #4]
 8102ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102ed2:	2300      	movs	r3, #0
 8102ed4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102ed8:	2300      	movs	r3, #0
 8102eda:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102edc:	683b      	ldr	r3, [r7, #0]
 8102ede:	68db      	ldr	r3, [r3, #12]
 8102ee0:	4a9d      	ldr	r2, [pc, #628]	; (8103158 <HAL_ADC_ConfigChannel+0x290>)
 8102ee2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102eea:	2b01      	cmp	r3, #1
 8102eec:	d101      	bne.n	8102ef2 <HAL_ADC_ConfigChannel+0x2a>
 8102eee:	2302      	movs	r3, #2
 8102ef0:	e321      	b.n	8103536 <HAL_ADC_ConfigChannel+0x66e>
 8102ef2:	687b      	ldr	r3, [r7, #4]
 8102ef4:	2201      	movs	r2, #1
 8102ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4618      	mov	r0, r3
 8102f00:	f7ff fbc3 	bl	810268a <LL_ADC_REG_IsConversionOngoing>
 8102f04:	4603      	mov	r3, r0
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	f040 8306 	bne.w	8103518 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102f0c:	683b      	ldr	r3, [r7, #0]
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f14:	2b00      	cmp	r3, #0
 8102f16:	d108      	bne.n	8102f2a <HAL_ADC_ConfigChannel+0x62>
 8102f18:	683b      	ldr	r3, [r7, #0]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	0e9b      	lsrs	r3, r3, #26
 8102f1e:	f003 031f 	and.w	r3, r3, #31
 8102f22:	2201      	movs	r2, #1
 8102f24:	fa02 f303 	lsl.w	r3, r2, r3
 8102f28:	e016      	b.n	8102f58 <HAL_ADC_ConfigChannel+0x90>
 8102f2a:	683b      	ldr	r3, [r7, #0]
 8102f2c:	681b      	ldr	r3, [r3, #0]
 8102f2e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8102f32:	fa93 f3a3 	rbit	r3, r3
 8102f36:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102f38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102f3a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d101      	bne.n	8102f46 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8102f42:	2320      	movs	r3, #32
 8102f44:	e003      	b.n	8102f4e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8102f46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102f48:	fab3 f383 	clz	r3, r3
 8102f4c:	b2db      	uxtb	r3, r3
 8102f4e:	f003 031f 	and.w	r3, r3, #31
 8102f52:	2201      	movs	r2, #1
 8102f54:	fa02 f303 	lsl.w	r3, r2, r3
 8102f58:	687a      	ldr	r2, [r7, #4]
 8102f5a:	6812      	ldr	r2, [r2, #0]
 8102f5c:	69d1      	ldr	r1, [r2, #28]
 8102f5e:	687a      	ldr	r2, [r7, #4]
 8102f60:	6812      	ldr	r2, [r2, #0]
 8102f62:	430b      	orrs	r3, r1
 8102f64:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8102f66:	687b      	ldr	r3, [r7, #4]
 8102f68:	6818      	ldr	r0, [r3, #0]
 8102f6a:	683b      	ldr	r3, [r7, #0]
 8102f6c:	6859      	ldr	r1, [r3, #4]
 8102f6e:	683b      	ldr	r3, [r7, #0]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	461a      	mov	r2, r3
 8102f74:	f7ff fa7d 	bl	8102472 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	681b      	ldr	r3, [r3, #0]
 8102f7c:	4618      	mov	r0, r3
 8102f7e:	f7ff fb84 	bl	810268a <LL_ADC_REG_IsConversionOngoing>
 8102f82:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	681b      	ldr	r3, [r3, #0]
 8102f88:	4618      	mov	r0, r3
 8102f8a:	f7ff fb91 	bl	81026b0 <LL_ADC_INJ_IsConversionOngoing>
 8102f8e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102f92:	2b00      	cmp	r3, #0
 8102f94:	f040 80b3 	bne.w	81030fe <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8102f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102f9a:	2b00      	cmp	r3, #0
 8102f9c:	f040 80af 	bne.w	81030fe <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	6818      	ldr	r0, [r3, #0]
 8102fa4:	683b      	ldr	r3, [r7, #0]
 8102fa6:	6819      	ldr	r1, [r3, #0]
 8102fa8:	683b      	ldr	r3, [r7, #0]
 8102faa:	689b      	ldr	r3, [r3, #8]
 8102fac:	461a      	mov	r2, r3
 8102fae:	f7ff fa9f 	bl	81024f0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102fb2:	4b6a      	ldr	r3, [pc, #424]	; (810315c <HAL_ADC_ConfigChannel+0x294>)
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102fbe:	d10b      	bne.n	8102fd8 <HAL_ADC_ConfigChannel+0x110>
 8102fc0:	683b      	ldr	r3, [r7, #0]
 8102fc2:	695a      	ldr	r2, [r3, #20]
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	68db      	ldr	r3, [r3, #12]
 8102fca:	089b      	lsrs	r3, r3, #2
 8102fcc:	f003 0307 	and.w	r3, r3, #7
 8102fd0:	005b      	lsls	r3, r3, #1
 8102fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8102fd6:	e01d      	b.n	8103014 <HAL_ADC_ConfigChannel+0x14c>
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	68db      	ldr	r3, [r3, #12]
 8102fde:	f003 0310 	and.w	r3, r3, #16
 8102fe2:	2b00      	cmp	r3, #0
 8102fe4:	d10b      	bne.n	8102ffe <HAL_ADC_ConfigChannel+0x136>
 8102fe6:	683b      	ldr	r3, [r7, #0]
 8102fe8:	695a      	ldr	r2, [r3, #20]
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	681b      	ldr	r3, [r3, #0]
 8102fee:	68db      	ldr	r3, [r3, #12]
 8102ff0:	089b      	lsrs	r3, r3, #2
 8102ff2:	f003 0307 	and.w	r3, r3, #7
 8102ff6:	005b      	lsls	r3, r3, #1
 8102ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8102ffc:	e00a      	b.n	8103014 <HAL_ADC_ConfigChannel+0x14c>
 8102ffe:	683b      	ldr	r3, [r7, #0]
 8103000:	695a      	ldr	r2, [r3, #20]
 8103002:	687b      	ldr	r3, [r7, #4]
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	68db      	ldr	r3, [r3, #12]
 8103008:	089b      	lsrs	r3, r3, #2
 810300a:	f003 0304 	and.w	r3, r3, #4
 810300e:	005b      	lsls	r3, r3, #1
 8103010:	fa02 f303 	lsl.w	r3, r2, r3
 8103014:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103016:	683b      	ldr	r3, [r7, #0]
 8103018:	691b      	ldr	r3, [r3, #16]
 810301a:	2b04      	cmp	r3, #4
 810301c:	d027      	beq.n	810306e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	6818      	ldr	r0, [r3, #0]
 8103022:	683b      	ldr	r3, [r7, #0]
 8103024:	6919      	ldr	r1, [r3, #16]
 8103026:	683b      	ldr	r3, [r7, #0]
 8103028:	681a      	ldr	r2, [r3, #0]
 810302a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810302c:	f7ff f9ba 	bl	81023a4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	6818      	ldr	r0, [r3, #0]
 8103034:	683b      	ldr	r3, [r7, #0]
 8103036:	6919      	ldr	r1, [r3, #16]
 8103038:	683b      	ldr	r3, [r7, #0]
 810303a:	7e5b      	ldrb	r3, [r3, #25]
 810303c:	2b01      	cmp	r3, #1
 810303e:	d102      	bne.n	8103046 <HAL_ADC_ConfigChannel+0x17e>
 8103040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8103044:	e000      	b.n	8103048 <HAL_ADC_ConfigChannel+0x180>
 8103046:	2300      	movs	r3, #0
 8103048:	461a      	mov	r2, r3
 810304a:	f7ff f9e4 	bl	8102416 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	6818      	ldr	r0, [r3, #0]
 8103052:	683b      	ldr	r3, [r7, #0]
 8103054:	6919      	ldr	r1, [r3, #16]
 8103056:	683b      	ldr	r3, [r7, #0]
 8103058:	7e1b      	ldrb	r3, [r3, #24]
 810305a:	2b01      	cmp	r3, #1
 810305c:	d102      	bne.n	8103064 <HAL_ADC_ConfigChannel+0x19c>
 810305e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103062:	e000      	b.n	8103066 <HAL_ADC_ConfigChannel+0x19e>
 8103064:	2300      	movs	r3, #0
 8103066:	461a      	mov	r2, r3
 8103068:	f7ff f9bc 	bl	81023e4 <LL_ADC_SetDataRightShift>
 810306c:	e047      	b.n	81030fe <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8103078:	683b      	ldr	r3, [r7, #0]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	069b      	lsls	r3, r3, #26
 810307e:	429a      	cmp	r2, r3
 8103080:	d107      	bne.n	8103092 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	681b      	ldr	r3, [r3, #0]
 810308c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8103090:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	681b      	ldr	r3, [r3, #0]
 8103096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103098:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810309c:	683b      	ldr	r3, [r7, #0]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	069b      	lsls	r3, r3, #26
 81030a2:	429a      	cmp	r2, r3
 81030a4:	d107      	bne.n	81030b6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81030a6:	687b      	ldr	r3, [r7, #4]
 81030a8:	681b      	ldr	r3, [r3, #0]
 81030aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81030b4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81030bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81030c0:	683b      	ldr	r3, [r7, #0]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	069b      	lsls	r3, r3, #26
 81030c6:	429a      	cmp	r2, r3
 81030c8:	d107      	bne.n	81030da <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81030d8:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81030e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81030e4:	683b      	ldr	r3, [r7, #0]
 81030e6:	681b      	ldr	r3, [r3, #0]
 81030e8:	069b      	lsls	r3, r3, #26
 81030ea:	429a      	cmp	r2, r3
 81030ec:	d107      	bne.n	81030fe <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81030fc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81030fe:	687b      	ldr	r3, [r7, #4]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	4618      	mov	r0, r3
 8103104:	f7ff faae 	bl	8102664 <LL_ADC_IsEnabled>
 8103108:	4603      	mov	r3, r0
 810310a:	2b00      	cmp	r3, #0
 810310c:	f040 820d 	bne.w	810352a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	6818      	ldr	r0, [r3, #0]
 8103114:	683b      	ldr	r3, [r7, #0]
 8103116:	6819      	ldr	r1, [r3, #0]
 8103118:	683b      	ldr	r3, [r7, #0]
 810311a:	68db      	ldr	r3, [r3, #12]
 810311c:	461a      	mov	r2, r3
 810311e:	f7ff fa13 	bl	8102548 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8103122:	683b      	ldr	r3, [r7, #0]
 8103124:	68db      	ldr	r3, [r3, #12]
 8103126:	4a0c      	ldr	r2, [pc, #48]	; (8103158 <HAL_ADC_ConfigChannel+0x290>)
 8103128:	4293      	cmp	r3, r2
 810312a:	f040 8133 	bne.w	8103394 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103132:	683b      	ldr	r3, [r7, #0]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810313a:	2b00      	cmp	r3, #0
 810313c:	d110      	bne.n	8103160 <HAL_ADC_ConfigChannel+0x298>
 810313e:	683b      	ldr	r3, [r7, #0]
 8103140:	681b      	ldr	r3, [r3, #0]
 8103142:	0e9b      	lsrs	r3, r3, #26
 8103144:	3301      	adds	r3, #1
 8103146:	f003 031f 	and.w	r3, r3, #31
 810314a:	2b09      	cmp	r3, #9
 810314c:	bf94      	ite	ls
 810314e:	2301      	movls	r3, #1
 8103150:	2300      	movhi	r3, #0
 8103152:	b2db      	uxtb	r3, r3
 8103154:	e01e      	b.n	8103194 <HAL_ADC_ConfigChannel+0x2cc>
 8103156:	bf00      	nop
 8103158:	47ff0000 	.word	0x47ff0000
 810315c:	5c001000 	.word	0x5c001000
 8103160:	683b      	ldr	r3, [r7, #0]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8103168:	fa93 f3a3 	rbit	r3, r3
 810316c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 810316e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103170:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8103172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103174:	2b00      	cmp	r3, #0
 8103176:	d101      	bne.n	810317c <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8103178:	2320      	movs	r3, #32
 810317a:	e003      	b.n	8103184 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 810317c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810317e:	fab3 f383 	clz	r3, r3
 8103182:	b2db      	uxtb	r3, r3
 8103184:	3301      	adds	r3, #1
 8103186:	f003 031f 	and.w	r3, r3, #31
 810318a:	2b09      	cmp	r3, #9
 810318c:	bf94      	ite	ls
 810318e:	2301      	movls	r3, #1
 8103190:	2300      	movhi	r3, #0
 8103192:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103194:	2b00      	cmp	r3, #0
 8103196:	d079      	beq.n	810328c <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8103198:	683b      	ldr	r3, [r7, #0]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81031a0:	2b00      	cmp	r3, #0
 81031a2:	d107      	bne.n	81031b4 <HAL_ADC_ConfigChannel+0x2ec>
 81031a4:	683b      	ldr	r3, [r7, #0]
 81031a6:	681b      	ldr	r3, [r3, #0]
 81031a8:	0e9b      	lsrs	r3, r3, #26
 81031aa:	3301      	adds	r3, #1
 81031ac:	069b      	lsls	r3, r3, #26
 81031ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81031b2:	e015      	b.n	81031e0 <HAL_ADC_ConfigChannel+0x318>
 81031b4:	683b      	ldr	r3, [r7, #0]
 81031b6:	681b      	ldr	r3, [r3, #0]
 81031b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81031bc:	fa93 f3a3 	rbit	r3, r3
 81031c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 81031c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81031c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 81031c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81031c8:	2b00      	cmp	r3, #0
 81031ca:	d101      	bne.n	81031d0 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 81031cc:	2320      	movs	r3, #32
 81031ce:	e003      	b.n	81031d8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 81031d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81031d2:	fab3 f383 	clz	r3, r3
 81031d6:	b2db      	uxtb	r3, r3
 81031d8:	3301      	adds	r3, #1
 81031da:	069b      	lsls	r3, r3, #26
 81031dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81031e0:	683b      	ldr	r3, [r7, #0]
 81031e2:	681b      	ldr	r3, [r3, #0]
 81031e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81031e8:	2b00      	cmp	r3, #0
 81031ea:	d109      	bne.n	8103200 <HAL_ADC_ConfigChannel+0x338>
 81031ec:	683b      	ldr	r3, [r7, #0]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	0e9b      	lsrs	r3, r3, #26
 81031f2:	3301      	adds	r3, #1
 81031f4:	f003 031f 	and.w	r3, r3, #31
 81031f8:	2101      	movs	r1, #1
 81031fa:	fa01 f303 	lsl.w	r3, r1, r3
 81031fe:	e017      	b.n	8103230 <HAL_ADC_ConfigChannel+0x368>
 8103200:	683b      	ldr	r3, [r7, #0]
 8103202:	681b      	ldr	r3, [r3, #0]
 8103204:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103208:	fa93 f3a3 	rbit	r3, r3
 810320c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 810320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103210:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8103212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103214:	2b00      	cmp	r3, #0
 8103216:	d101      	bne.n	810321c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8103218:	2320      	movs	r3, #32
 810321a:	e003      	b.n	8103224 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 810321c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810321e:	fab3 f383 	clz	r3, r3
 8103222:	b2db      	uxtb	r3, r3
 8103224:	3301      	adds	r3, #1
 8103226:	f003 031f 	and.w	r3, r3, #31
 810322a:	2101      	movs	r1, #1
 810322c:	fa01 f303 	lsl.w	r3, r1, r3
 8103230:	ea42 0103 	orr.w	r1, r2, r3
 8103234:	683b      	ldr	r3, [r7, #0]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810323c:	2b00      	cmp	r3, #0
 810323e:	d10a      	bne.n	8103256 <HAL_ADC_ConfigChannel+0x38e>
 8103240:	683b      	ldr	r3, [r7, #0]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	0e9b      	lsrs	r3, r3, #26
 8103246:	3301      	adds	r3, #1
 8103248:	f003 021f 	and.w	r2, r3, #31
 810324c:	4613      	mov	r3, r2
 810324e:	005b      	lsls	r3, r3, #1
 8103250:	4413      	add	r3, r2
 8103252:	051b      	lsls	r3, r3, #20
 8103254:	e018      	b.n	8103288 <HAL_ADC_ConfigChannel+0x3c0>
 8103256:	683b      	ldr	r3, [r7, #0]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810325e:	fa93 f3a3 	rbit	r3, r3
 8103262:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8103264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103266:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8103268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810326a:	2b00      	cmp	r3, #0
 810326c:	d101      	bne.n	8103272 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 810326e:	2320      	movs	r3, #32
 8103270:	e003      	b.n	810327a <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8103272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103274:	fab3 f383 	clz	r3, r3
 8103278:	b2db      	uxtb	r3, r3
 810327a:	3301      	adds	r3, #1
 810327c:	f003 021f 	and.w	r2, r3, #31
 8103280:	4613      	mov	r3, r2
 8103282:	005b      	lsls	r3, r3, #1
 8103284:	4413      	add	r3, r2
 8103286:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103288:	430b      	orrs	r3, r1
 810328a:	e07e      	b.n	810338a <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810328c:	683b      	ldr	r3, [r7, #0]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103294:	2b00      	cmp	r3, #0
 8103296:	d107      	bne.n	81032a8 <HAL_ADC_ConfigChannel+0x3e0>
 8103298:	683b      	ldr	r3, [r7, #0]
 810329a:	681b      	ldr	r3, [r3, #0]
 810329c:	0e9b      	lsrs	r3, r3, #26
 810329e:	3301      	adds	r3, #1
 81032a0:	069b      	lsls	r3, r3, #26
 81032a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81032a6:	e015      	b.n	81032d4 <HAL_ADC_ConfigChannel+0x40c>
 81032a8:	683b      	ldr	r3, [r7, #0]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81032b0:	fa93 f3a3 	rbit	r3, r3
 81032b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 81032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 81032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d101      	bne.n	81032c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 81032c0:	2320      	movs	r3, #32
 81032c2:	e003      	b.n	81032cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 81032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81032c6:	fab3 f383 	clz	r3, r3
 81032ca:	b2db      	uxtb	r3, r3
 81032cc:	3301      	adds	r3, #1
 81032ce:	069b      	lsls	r3, r3, #26
 81032d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81032d4:	683b      	ldr	r3, [r7, #0]
 81032d6:	681b      	ldr	r3, [r3, #0]
 81032d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81032dc:	2b00      	cmp	r3, #0
 81032de:	d109      	bne.n	81032f4 <HAL_ADC_ConfigChannel+0x42c>
 81032e0:	683b      	ldr	r3, [r7, #0]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	0e9b      	lsrs	r3, r3, #26
 81032e6:	3301      	adds	r3, #1
 81032e8:	f003 031f 	and.w	r3, r3, #31
 81032ec:	2101      	movs	r1, #1
 81032ee:	fa01 f303 	lsl.w	r3, r1, r3
 81032f2:	e017      	b.n	8103324 <HAL_ADC_ConfigChannel+0x45c>
 81032f4:	683b      	ldr	r3, [r7, #0]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81032fa:	69fb      	ldr	r3, [r7, #28]
 81032fc:	fa93 f3a3 	rbit	r3, r3
 8103300:	61bb      	str	r3, [r7, #24]
  return result;
 8103302:	69bb      	ldr	r3, [r7, #24]
 8103304:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8103306:	6a3b      	ldr	r3, [r7, #32]
 8103308:	2b00      	cmp	r3, #0
 810330a:	d101      	bne.n	8103310 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 810330c:	2320      	movs	r3, #32
 810330e:	e003      	b.n	8103318 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8103310:	6a3b      	ldr	r3, [r7, #32]
 8103312:	fab3 f383 	clz	r3, r3
 8103316:	b2db      	uxtb	r3, r3
 8103318:	3301      	adds	r3, #1
 810331a:	f003 031f 	and.w	r3, r3, #31
 810331e:	2101      	movs	r1, #1
 8103320:	fa01 f303 	lsl.w	r3, r1, r3
 8103324:	ea42 0103 	orr.w	r1, r2, r3
 8103328:	683b      	ldr	r3, [r7, #0]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103330:	2b00      	cmp	r3, #0
 8103332:	d10d      	bne.n	8103350 <HAL_ADC_ConfigChannel+0x488>
 8103334:	683b      	ldr	r3, [r7, #0]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	0e9b      	lsrs	r3, r3, #26
 810333a:	3301      	adds	r3, #1
 810333c:	f003 021f 	and.w	r2, r3, #31
 8103340:	4613      	mov	r3, r2
 8103342:	005b      	lsls	r3, r3, #1
 8103344:	4413      	add	r3, r2
 8103346:	3b1e      	subs	r3, #30
 8103348:	051b      	lsls	r3, r3, #20
 810334a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810334e:	e01b      	b.n	8103388 <HAL_ADC_ConfigChannel+0x4c0>
 8103350:	683b      	ldr	r3, [r7, #0]
 8103352:	681b      	ldr	r3, [r3, #0]
 8103354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103356:	693b      	ldr	r3, [r7, #16]
 8103358:	fa93 f3a3 	rbit	r3, r3
 810335c:	60fb      	str	r3, [r7, #12]
  return result;
 810335e:	68fb      	ldr	r3, [r7, #12]
 8103360:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8103362:	697b      	ldr	r3, [r7, #20]
 8103364:	2b00      	cmp	r3, #0
 8103366:	d101      	bne.n	810336c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8103368:	2320      	movs	r3, #32
 810336a:	e003      	b.n	8103374 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 810336c:	697b      	ldr	r3, [r7, #20]
 810336e:	fab3 f383 	clz	r3, r3
 8103372:	b2db      	uxtb	r3, r3
 8103374:	3301      	adds	r3, #1
 8103376:	f003 021f 	and.w	r2, r3, #31
 810337a:	4613      	mov	r3, r2
 810337c:	005b      	lsls	r3, r3, #1
 810337e:	4413      	add	r3, r2
 8103380:	3b1e      	subs	r3, #30
 8103382:	051b      	lsls	r3, r3, #20
 8103384:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8103388:	430b      	orrs	r3, r1
 810338a:	683a      	ldr	r2, [r7, #0]
 810338c:	6892      	ldr	r2, [r2, #8]
 810338e:	4619      	mov	r1, r3
 8103390:	f7ff f8ae 	bl	81024f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8103394:	683b      	ldr	r3, [r7, #0]
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	2b00      	cmp	r3, #0
 810339a:	f280 80c6 	bge.w	810352a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	681b      	ldr	r3, [r3, #0]
 81033a2:	4a67      	ldr	r2, [pc, #412]	; (8103540 <HAL_ADC_ConfigChannel+0x678>)
 81033a4:	4293      	cmp	r3, r2
 81033a6:	d004      	beq.n	81033b2 <HAL_ADC_ConfigChannel+0x4ea>
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	4a65      	ldr	r2, [pc, #404]	; (8103544 <HAL_ADC_ConfigChannel+0x67c>)
 81033ae:	4293      	cmp	r3, r2
 81033b0:	d101      	bne.n	81033b6 <HAL_ADC_ConfigChannel+0x4ee>
 81033b2:	4b65      	ldr	r3, [pc, #404]	; (8103548 <HAL_ADC_ConfigChannel+0x680>)
 81033b4:	e000      	b.n	81033b8 <HAL_ADC_ConfigChannel+0x4f0>
 81033b6:	4b65      	ldr	r3, [pc, #404]	; (810354c <HAL_ADC_ConfigChannel+0x684>)
 81033b8:	4618      	mov	r0, r3
 81033ba:	f7fe ffe5 	bl	8102388 <LL_ADC_GetCommonPathInternalCh>
 81033be:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	681b      	ldr	r3, [r3, #0]
 81033c4:	4a5e      	ldr	r2, [pc, #376]	; (8103540 <HAL_ADC_ConfigChannel+0x678>)
 81033c6:	4293      	cmp	r3, r2
 81033c8:	d004      	beq.n	81033d4 <HAL_ADC_ConfigChannel+0x50c>
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	4a5d      	ldr	r2, [pc, #372]	; (8103544 <HAL_ADC_ConfigChannel+0x67c>)
 81033d0:	4293      	cmp	r3, r2
 81033d2:	d10e      	bne.n	81033f2 <HAL_ADC_ConfigChannel+0x52a>
 81033d4:	485a      	ldr	r0, [pc, #360]	; (8103540 <HAL_ADC_ConfigChannel+0x678>)
 81033d6:	f7ff f945 	bl	8102664 <LL_ADC_IsEnabled>
 81033da:	4604      	mov	r4, r0
 81033dc:	4859      	ldr	r0, [pc, #356]	; (8103544 <HAL_ADC_ConfigChannel+0x67c>)
 81033de:	f7ff f941 	bl	8102664 <LL_ADC_IsEnabled>
 81033e2:	4603      	mov	r3, r0
 81033e4:	4323      	orrs	r3, r4
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	bf0c      	ite	eq
 81033ea:	2301      	moveq	r3, #1
 81033ec:	2300      	movne	r3, #0
 81033ee:	b2db      	uxtb	r3, r3
 81033f0:	e008      	b.n	8103404 <HAL_ADC_ConfigChannel+0x53c>
 81033f2:	4857      	ldr	r0, [pc, #348]	; (8103550 <HAL_ADC_ConfigChannel+0x688>)
 81033f4:	f7ff f936 	bl	8102664 <LL_ADC_IsEnabled>
 81033f8:	4603      	mov	r3, r0
 81033fa:	2b00      	cmp	r3, #0
 81033fc:	bf0c      	ite	eq
 81033fe:	2301      	moveq	r3, #1
 8103400:	2300      	movne	r3, #0
 8103402:	b2db      	uxtb	r3, r3
 8103404:	2b00      	cmp	r3, #0
 8103406:	d07d      	beq.n	8103504 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103408:	683b      	ldr	r3, [r7, #0]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	4a51      	ldr	r2, [pc, #324]	; (8103554 <HAL_ADC_ConfigChannel+0x68c>)
 810340e:	4293      	cmp	r3, r2
 8103410:	d130      	bne.n	8103474 <HAL_ADC_ConfigChannel+0x5ac>
 8103412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103418:	2b00      	cmp	r3, #0
 810341a:	d12b      	bne.n	8103474 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810341c:	687b      	ldr	r3, [r7, #4]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	4a4b      	ldr	r2, [pc, #300]	; (8103550 <HAL_ADC_ConfigChannel+0x688>)
 8103422:	4293      	cmp	r3, r2
 8103424:	f040 8081 	bne.w	810352a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	4a44      	ldr	r2, [pc, #272]	; (8103540 <HAL_ADC_ConfigChannel+0x678>)
 810342e:	4293      	cmp	r3, r2
 8103430:	d004      	beq.n	810343c <HAL_ADC_ConfigChannel+0x574>
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	681b      	ldr	r3, [r3, #0]
 8103436:	4a43      	ldr	r2, [pc, #268]	; (8103544 <HAL_ADC_ConfigChannel+0x67c>)
 8103438:	4293      	cmp	r3, r2
 810343a:	d101      	bne.n	8103440 <HAL_ADC_ConfigChannel+0x578>
 810343c:	4a42      	ldr	r2, [pc, #264]	; (8103548 <HAL_ADC_ConfigChannel+0x680>)
 810343e:	e000      	b.n	8103442 <HAL_ADC_ConfigChannel+0x57a>
 8103440:	4a42      	ldr	r2, [pc, #264]	; (810354c <HAL_ADC_ConfigChannel+0x684>)
 8103442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103448:	4619      	mov	r1, r3
 810344a:	4610      	mov	r0, r2
 810344c:	f7fe ff89 	bl	8102362 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8103450:	4b41      	ldr	r3, [pc, #260]	; (8103558 <HAL_ADC_ConfigChannel+0x690>)
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	099b      	lsrs	r3, r3, #6
 8103456:	4a41      	ldr	r2, [pc, #260]	; (810355c <HAL_ADC_ConfigChannel+0x694>)
 8103458:	fba2 2303 	umull	r2, r3, r2, r3
 810345c:	099b      	lsrs	r3, r3, #6
 810345e:	3301      	adds	r3, #1
 8103460:	005b      	lsls	r3, r3, #1
 8103462:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8103464:	e002      	b.n	810346c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8103466:	68bb      	ldr	r3, [r7, #8]
 8103468:	3b01      	subs	r3, #1
 810346a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 810346c:	68bb      	ldr	r3, [r7, #8]
 810346e:	2b00      	cmp	r3, #0
 8103470:	d1f9      	bne.n	8103466 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103472:	e05a      	b.n	810352a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8103474:	683b      	ldr	r3, [r7, #0]
 8103476:	681b      	ldr	r3, [r3, #0]
 8103478:	4a39      	ldr	r2, [pc, #228]	; (8103560 <HAL_ADC_ConfigChannel+0x698>)
 810347a:	4293      	cmp	r3, r2
 810347c:	d11e      	bne.n	81034bc <HAL_ADC_ConfigChannel+0x5f4>
 810347e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103484:	2b00      	cmp	r3, #0
 8103486:	d119      	bne.n	81034bc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	681b      	ldr	r3, [r3, #0]
 810348c:	4a30      	ldr	r2, [pc, #192]	; (8103550 <HAL_ADC_ConfigChannel+0x688>)
 810348e:	4293      	cmp	r3, r2
 8103490:	d14b      	bne.n	810352a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	681b      	ldr	r3, [r3, #0]
 8103496:	4a2a      	ldr	r2, [pc, #168]	; (8103540 <HAL_ADC_ConfigChannel+0x678>)
 8103498:	4293      	cmp	r3, r2
 810349a:	d004      	beq.n	81034a6 <HAL_ADC_ConfigChannel+0x5de>
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	681b      	ldr	r3, [r3, #0]
 81034a0:	4a28      	ldr	r2, [pc, #160]	; (8103544 <HAL_ADC_ConfigChannel+0x67c>)
 81034a2:	4293      	cmp	r3, r2
 81034a4:	d101      	bne.n	81034aa <HAL_ADC_ConfigChannel+0x5e2>
 81034a6:	4a28      	ldr	r2, [pc, #160]	; (8103548 <HAL_ADC_ConfigChannel+0x680>)
 81034a8:	e000      	b.n	81034ac <HAL_ADC_ConfigChannel+0x5e4>
 81034aa:	4a28      	ldr	r2, [pc, #160]	; (810354c <HAL_ADC_ConfigChannel+0x684>)
 81034ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81034b2:	4619      	mov	r1, r3
 81034b4:	4610      	mov	r0, r2
 81034b6:	f7fe ff54 	bl	8102362 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81034ba:	e036      	b.n	810352a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81034bc:	683b      	ldr	r3, [r7, #0]
 81034be:	681b      	ldr	r3, [r3, #0]
 81034c0:	4a28      	ldr	r2, [pc, #160]	; (8103564 <HAL_ADC_ConfigChannel+0x69c>)
 81034c2:	4293      	cmp	r3, r2
 81034c4:	d131      	bne.n	810352a <HAL_ADC_ConfigChannel+0x662>
 81034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81034cc:	2b00      	cmp	r3, #0
 81034ce:	d12c      	bne.n	810352a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	681b      	ldr	r3, [r3, #0]
 81034d4:	4a1e      	ldr	r2, [pc, #120]	; (8103550 <HAL_ADC_ConfigChannel+0x688>)
 81034d6:	4293      	cmp	r3, r2
 81034d8:	d127      	bne.n	810352a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	4a18      	ldr	r2, [pc, #96]	; (8103540 <HAL_ADC_ConfigChannel+0x678>)
 81034e0:	4293      	cmp	r3, r2
 81034e2:	d004      	beq.n	81034ee <HAL_ADC_ConfigChannel+0x626>
 81034e4:	687b      	ldr	r3, [r7, #4]
 81034e6:	681b      	ldr	r3, [r3, #0]
 81034e8:	4a16      	ldr	r2, [pc, #88]	; (8103544 <HAL_ADC_ConfigChannel+0x67c>)
 81034ea:	4293      	cmp	r3, r2
 81034ec:	d101      	bne.n	81034f2 <HAL_ADC_ConfigChannel+0x62a>
 81034ee:	4a16      	ldr	r2, [pc, #88]	; (8103548 <HAL_ADC_ConfigChannel+0x680>)
 81034f0:	e000      	b.n	81034f4 <HAL_ADC_ConfigChannel+0x62c>
 81034f2:	4a16      	ldr	r2, [pc, #88]	; (810354c <HAL_ADC_ConfigChannel+0x684>)
 81034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81034f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81034fa:	4619      	mov	r1, r3
 81034fc:	4610      	mov	r0, r2
 81034fe:	f7fe ff30 	bl	8102362 <LL_ADC_SetCommonPathInternalCh>
 8103502:	e012      	b.n	810352a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103508:	f043 0220 	orr.w	r2, r3, #32
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8103510:	2301      	movs	r3, #1
 8103512:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8103516:	e008      	b.n	810352a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810351c:	f043 0220 	orr.w	r2, r3, #32
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8103524:	2301      	movs	r3, #1
 8103526:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	2200      	movs	r2, #0
 810352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8103532:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8103536:	4618      	mov	r0, r3
 8103538:	3784      	adds	r7, #132	; 0x84
 810353a:	46bd      	mov	sp, r7
 810353c:	bd90      	pop	{r4, r7, pc}
 810353e:	bf00      	nop
 8103540:	40022000 	.word	0x40022000
 8103544:	40022100 	.word	0x40022100
 8103548:	40022300 	.word	0x40022300
 810354c:	58026300 	.word	0x58026300
 8103550:	58026000 	.word	0x58026000
 8103554:	cb840000 	.word	0xcb840000
 8103558:	10000000 	.word	0x10000000
 810355c:	053e2d63 	.word	0x053e2d63
 8103560:	c7520000 	.word	0xc7520000
 8103564:	cfb80000 	.word	0xcfb80000

08103568 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8103568:	b580      	push	{r7, lr}
 810356a:	b084      	sub	sp, #16
 810356c:	af00      	add	r7, sp, #0
 810356e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	4a79      	ldr	r2, [pc, #484]	; (810375c <ADC_ConfigureBoostMode+0x1f4>)
 8103576:	4293      	cmp	r3, r2
 8103578:	d004      	beq.n	8103584 <ADC_ConfigureBoostMode+0x1c>
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	681b      	ldr	r3, [r3, #0]
 810357e:	4a78      	ldr	r2, [pc, #480]	; (8103760 <ADC_ConfigureBoostMode+0x1f8>)
 8103580:	4293      	cmp	r3, r2
 8103582:	d109      	bne.n	8103598 <ADC_ConfigureBoostMode+0x30>
 8103584:	4b77      	ldr	r3, [pc, #476]	; (8103764 <ADC_ConfigureBoostMode+0x1fc>)
 8103586:	689b      	ldr	r3, [r3, #8]
 8103588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810358c:	2b00      	cmp	r3, #0
 810358e:	bf14      	ite	ne
 8103590:	2301      	movne	r3, #1
 8103592:	2300      	moveq	r3, #0
 8103594:	b2db      	uxtb	r3, r3
 8103596:	e008      	b.n	81035aa <ADC_ConfigureBoostMode+0x42>
 8103598:	4b73      	ldr	r3, [pc, #460]	; (8103768 <ADC_ConfigureBoostMode+0x200>)
 810359a:	689b      	ldr	r3, [r3, #8]
 810359c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81035a0:	2b00      	cmp	r3, #0
 81035a2:	bf14      	ite	ne
 81035a4:	2301      	movne	r3, #1
 81035a6:	2300      	moveq	r3, #0
 81035a8:	b2db      	uxtb	r3, r3
 81035aa:	2b00      	cmp	r3, #0
 81035ac:	d01c      	beq.n	81035e8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81035ae:	f002 ff59 	bl	8106464 <HAL_RCC_GetHCLKFreq>
 81035b2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	685b      	ldr	r3, [r3, #4]
 81035b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81035bc:	d010      	beq.n	81035e0 <ADC_ConfigureBoostMode+0x78>
 81035be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81035c2:	d871      	bhi.n	81036a8 <ADC_ConfigureBoostMode+0x140>
 81035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81035c8:	d002      	beq.n	81035d0 <ADC_ConfigureBoostMode+0x68>
 81035ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81035ce:	d16b      	bne.n	81036a8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	685b      	ldr	r3, [r3, #4]
 81035d4:	0c1b      	lsrs	r3, r3, #16
 81035d6:	68fa      	ldr	r2, [r7, #12]
 81035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 81035dc:	60fb      	str	r3, [r7, #12]
        break;
 81035de:	e066      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81035e0:	68fb      	ldr	r3, [r7, #12]
 81035e2:	089b      	lsrs	r3, r3, #2
 81035e4:	60fb      	str	r3, [r7, #12]
        break;
 81035e6:	e062      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81035e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 81035ec:	f003 ff1a 	bl	8107424 <HAL_RCCEx_GetPeriphCLKFreq>
 81035f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	685b      	ldr	r3, [r3, #4]
 81035f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81035fa:	d051      	beq.n	81036a0 <ADC_ConfigureBoostMode+0x138>
 81035fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8103600:	d854      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 8103602:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8103606:	d047      	beq.n	8103698 <ADC_ConfigureBoostMode+0x130>
 8103608:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810360c:	d84e      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 810360e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103612:	d03d      	beq.n	8103690 <ADC_ConfigureBoostMode+0x128>
 8103614:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8103618:	d848      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 810361a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810361e:	d033      	beq.n	8103688 <ADC_ConfigureBoostMode+0x120>
 8103620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103624:	d842      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 8103626:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810362a:	d029      	beq.n	8103680 <ADC_ConfigureBoostMode+0x118>
 810362c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8103630:	d83c      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 8103632:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8103636:	d01a      	beq.n	810366e <ADC_ConfigureBoostMode+0x106>
 8103638:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810363c:	d836      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 810363e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103642:	d014      	beq.n	810366e <ADC_ConfigureBoostMode+0x106>
 8103644:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8103648:	d830      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 810364a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810364e:	d00e      	beq.n	810366e <ADC_ConfigureBoostMode+0x106>
 8103650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103654:	d82a      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 8103656:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 810365a:	d008      	beq.n	810366e <ADC_ConfigureBoostMode+0x106>
 810365c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8103660:	d824      	bhi.n	81036ac <ADC_ConfigureBoostMode+0x144>
 8103662:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103666:	d002      	beq.n	810366e <ADC_ConfigureBoostMode+0x106>
 8103668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810366c:	d11e      	bne.n	81036ac <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	685b      	ldr	r3, [r3, #4]
 8103672:	0c9b      	lsrs	r3, r3, #18
 8103674:	005b      	lsls	r3, r3, #1
 8103676:	68fa      	ldr	r2, [r7, #12]
 8103678:	fbb2 f3f3 	udiv	r3, r2, r3
 810367c:	60fb      	str	r3, [r7, #12]
        break;
 810367e:	e016      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103680:	68fb      	ldr	r3, [r7, #12]
 8103682:	091b      	lsrs	r3, r3, #4
 8103684:	60fb      	str	r3, [r7, #12]
        break;
 8103686:	e012      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103688:	68fb      	ldr	r3, [r7, #12]
 810368a:	095b      	lsrs	r3, r3, #5
 810368c:	60fb      	str	r3, [r7, #12]
        break;
 810368e:	e00e      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103690:	68fb      	ldr	r3, [r7, #12]
 8103692:	099b      	lsrs	r3, r3, #6
 8103694:	60fb      	str	r3, [r7, #12]
        break;
 8103696:	e00a      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103698:	68fb      	ldr	r3, [r7, #12]
 810369a:	09db      	lsrs	r3, r3, #7
 810369c:	60fb      	str	r3, [r7, #12]
        break;
 810369e:	e006      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81036a0:	68fb      	ldr	r3, [r7, #12]
 81036a2:	0a1b      	lsrs	r3, r3, #8
 81036a4:	60fb      	str	r3, [r7, #12]
        break;
 81036a6:	e002      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
        break;
 81036a8:	bf00      	nop
 81036aa:	e000      	b.n	81036ae <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 81036ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81036ae:	f7fe fe39 	bl	8102324 <HAL_GetREVID>
 81036b2:	4603      	mov	r3, r0
 81036b4:	f241 0203 	movw	r2, #4099	; 0x1003
 81036b8:	4293      	cmp	r3, r2
 81036ba:	d815      	bhi.n	81036e8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 81036bc:	68fb      	ldr	r3, [r7, #12]
 81036be:	4a2b      	ldr	r2, [pc, #172]	; (810376c <ADC_ConfigureBoostMode+0x204>)
 81036c0:	4293      	cmp	r3, r2
 81036c2:	d908      	bls.n	81036d6 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	689a      	ldr	r2, [r3, #8]
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81036d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81036d4:	e03e      	b.n	8103754 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	681b      	ldr	r3, [r3, #0]
 81036da:	689a      	ldr	r2, [r3, #8]
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81036e4:	609a      	str	r2, [r3, #8]
}
 81036e6:	e035      	b.n	8103754 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 81036e8:	68fb      	ldr	r3, [r7, #12]
 81036ea:	085b      	lsrs	r3, r3, #1
 81036ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81036ee:	68fb      	ldr	r3, [r7, #12]
 81036f0:	4a1f      	ldr	r2, [pc, #124]	; (8103770 <ADC_ConfigureBoostMode+0x208>)
 81036f2:	4293      	cmp	r3, r2
 81036f4:	d808      	bhi.n	8103708 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	681b      	ldr	r3, [r3, #0]
 81036fa:	689a      	ldr	r2, [r3, #8]
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8103704:	609a      	str	r2, [r3, #8]
}
 8103706:	e025      	b.n	8103754 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8103708:	68fb      	ldr	r3, [r7, #12]
 810370a:	4a1a      	ldr	r2, [pc, #104]	; (8103774 <ADC_ConfigureBoostMode+0x20c>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d80a      	bhi.n	8103726 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	689b      	ldr	r3, [r3, #8]
 8103716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103722:	609a      	str	r2, [r3, #8]
}
 8103724:	e016      	b.n	8103754 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8103726:	68fb      	ldr	r3, [r7, #12]
 8103728:	4a13      	ldr	r2, [pc, #76]	; (8103778 <ADC_ConfigureBoostMode+0x210>)
 810372a:	4293      	cmp	r3, r2
 810372c:	d80a      	bhi.n	8103744 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	689b      	ldr	r3, [r3, #8]
 8103734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103740:	609a      	str	r2, [r3, #8]
}
 8103742:	e007      	b.n	8103754 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	689a      	ldr	r2, [r3, #8]
 810374a:	687b      	ldr	r3, [r7, #4]
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8103752:	609a      	str	r2, [r3, #8]
}
 8103754:	bf00      	nop
 8103756:	3710      	adds	r7, #16
 8103758:	46bd      	mov	sp, r7
 810375a:	bd80      	pop	{r7, pc}
 810375c:	40022000 	.word	0x40022000
 8103760:	40022100 	.word	0x40022100
 8103764:	40022300 	.word	0x40022300
 8103768:	58026300 	.word	0x58026300
 810376c:	01312d00 	.word	0x01312d00
 8103770:	005f5e10 	.word	0x005f5e10
 8103774:	00bebc20 	.word	0x00bebc20
 8103778:	017d7840 	.word	0x017d7840

0810377c <LL_ADC_IsEnabled>:
{
 810377c:	b480      	push	{r7}
 810377e:	b083      	sub	sp, #12
 8103780:	af00      	add	r7, sp, #0
 8103782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	689b      	ldr	r3, [r3, #8]
 8103788:	f003 0301 	and.w	r3, r3, #1
 810378c:	2b01      	cmp	r3, #1
 810378e:	d101      	bne.n	8103794 <LL_ADC_IsEnabled+0x18>
 8103790:	2301      	movs	r3, #1
 8103792:	e000      	b.n	8103796 <LL_ADC_IsEnabled+0x1a>
 8103794:	2300      	movs	r3, #0
}
 8103796:	4618      	mov	r0, r3
 8103798:	370c      	adds	r7, #12
 810379a:	46bd      	mov	sp, r7
 810379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037a0:	4770      	bx	lr

081037a2 <LL_ADC_REG_IsConversionOngoing>:
{
 81037a2:	b480      	push	{r7}
 81037a4:	b083      	sub	sp, #12
 81037a6:	af00      	add	r7, sp, #0
 81037a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	689b      	ldr	r3, [r3, #8]
 81037ae:	f003 0304 	and.w	r3, r3, #4
 81037b2:	2b04      	cmp	r3, #4
 81037b4:	d101      	bne.n	81037ba <LL_ADC_REG_IsConversionOngoing+0x18>
 81037b6:	2301      	movs	r3, #1
 81037b8:	e000      	b.n	81037bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 81037ba:	2300      	movs	r3, #0
}
 81037bc:	4618      	mov	r0, r3
 81037be:	370c      	adds	r7, #12
 81037c0:	46bd      	mov	sp, r7
 81037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037c6:	4770      	bx	lr

081037c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 81037c8:	b480      	push	{r7}
 81037ca:	b083      	sub	sp, #12
 81037cc:	af00      	add	r7, sp, #0
 81037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 81037d0:	bf00      	nop
 81037d2:	370c      	adds	r7, #12
 81037d4:	46bd      	mov	sp, r7
 81037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037da:	4770      	bx	lr

081037dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 81037dc:	b480      	push	{r7}
 81037de:	b083      	sub	sp, #12
 81037e0:	af00      	add	r7, sp, #0
 81037e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 81037e4:	bf00      	nop
 81037e6:	370c      	adds	r7, #12
 81037e8:	46bd      	mov	sp, r7
 81037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ee:	4770      	bx	lr

081037f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 81037f0:	b480      	push	{r7}
 81037f2:	b083      	sub	sp, #12
 81037f4:	af00      	add	r7, sp, #0
 81037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 81037f8:	bf00      	nop
 81037fa:	370c      	adds	r7, #12
 81037fc:	46bd      	mov	sp, r7
 81037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103802:	4770      	bx	lr

08103804 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103804:	b480      	push	{r7}
 8103806:	b083      	sub	sp, #12
 8103808:	af00      	add	r7, sp, #0
 810380a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 810380c:	bf00      	nop
 810380e:	370c      	adds	r7, #12
 8103810:	46bd      	mov	sp, r7
 8103812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103816:	4770      	bx	lr

08103818 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103818:	b480      	push	{r7}
 810381a:	b083      	sub	sp, #12
 810381c:	af00      	add	r7, sp, #0
 810381e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8103820:	bf00      	nop
 8103822:	370c      	adds	r7, #12
 8103824:	46bd      	mov	sp, r7
 8103826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810382a:	4770      	bx	lr

0810382c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 810382c:	b590      	push	{r4, r7, lr}
 810382e:	b09f      	sub	sp, #124	; 0x7c
 8103830:	af00      	add	r7, sp, #0
 8103832:	6078      	str	r0, [r7, #4]
 8103834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103836:	2300      	movs	r3, #0
 8103838:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8103842:	2b01      	cmp	r3, #1
 8103844:	d101      	bne.n	810384a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103846:	2302      	movs	r3, #2
 8103848:	e0c4      	b.n	81039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810384a:	687b      	ldr	r3, [r7, #4]
 810384c:	2201      	movs	r2, #1
 810384e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103852:	2300      	movs	r3, #0
 8103854:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103856:	2300      	movs	r3, #0
 8103858:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	4a5f      	ldr	r2, [pc, #380]	; (81039dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103860:	4293      	cmp	r3, r2
 8103862:	d102      	bne.n	810386a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103864:	4b5e      	ldr	r3, [pc, #376]	; (81039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103866:	60bb      	str	r3, [r7, #8]
 8103868:	e001      	b.n	810386e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810386a:	2300      	movs	r3, #0
 810386c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810386e:	68bb      	ldr	r3, [r7, #8]
 8103870:	2b00      	cmp	r3, #0
 8103872:	d10b      	bne.n	810388c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103878:	f043 0220 	orr.w	r2, r3, #32
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	2200      	movs	r2, #0
 8103884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8103888:	2301      	movs	r3, #1
 810388a:	e0a3      	b.n	81039d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 810388c:	68bb      	ldr	r3, [r7, #8]
 810388e:	4618      	mov	r0, r3
 8103890:	f7ff ff87 	bl	81037a2 <LL_ADC_REG_IsConversionOngoing>
 8103894:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	4618      	mov	r0, r3
 810389c:	f7ff ff81 	bl	81037a2 <LL_ADC_REG_IsConversionOngoing>
 81038a0:	4603      	mov	r3, r0
 81038a2:	2b00      	cmp	r3, #0
 81038a4:	f040 8085 	bne.w	81039b2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81038a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81038aa:	2b00      	cmp	r3, #0
 81038ac:	f040 8081 	bne.w	81039b2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	681b      	ldr	r3, [r3, #0]
 81038b4:	4a49      	ldr	r2, [pc, #292]	; (81039dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81038b6:	4293      	cmp	r3, r2
 81038b8:	d004      	beq.n	81038c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	681b      	ldr	r3, [r3, #0]
 81038be:	4a48      	ldr	r2, [pc, #288]	; (81039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81038c0:	4293      	cmp	r3, r2
 81038c2:	d101      	bne.n	81038c8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81038c4:	4b47      	ldr	r3, [pc, #284]	; (81039e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81038c6:	e000      	b.n	81038ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81038c8:	4b47      	ldr	r3, [pc, #284]	; (81039e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81038ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81038cc:	683b      	ldr	r3, [r7, #0]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	2b00      	cmp	r3, #0
 81038d2:	d03b      	beq.n	810394c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81038d6:	689b      	ldr	r3, [r3, #8]
 81038d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81038dc:	683b      	ldr	r3, [r7, #0]
 81038de:	685b      	ldr	r3, [r3, #4]
 81038e0:	431a      	orrs	r2, r3
 81038e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81038e4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	681b      	ldr	r3, [r3, #0]
 81038ea:	4a3c      	ldr	r2, [pc, #240]	; (81039dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81038ec:	4293      	cmp	r3, r2
 81038ee:	d004      	beq.n	81038fa <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	4a3a      	ldr	r2, [pc, #232]	; (81039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81038f6:	4293      	cmp	r3, r2
 81038f8:	d10e      	bne.n	8103918 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81038fa:	4838      	ldr	r0, [pc, #224]	; (81039dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81038fc:	f7ff ff3e 	bl	810377c <LL_ADC_IsEnabled>
 8103900:	4604      	mov	r4, r0
 8103902:	4837      	ldr	r0, [pc, #220]	; (81039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103904:	f7ff ff3a 	bl	810377c <LL_ADC_IsEnabled>
 8103908:	4603      	mov	r3, r0
 810390a:	4323      	orrs	r3, r4
 810390c:	2b00      	cmp	r3, #0
 810390e:	bf0c      	ite	eq
 8103910:	2301      	moveq	r3, #1
 8103912:	2300      	movne	r3, #0
 8103914:	b2db      	uxtb	r3, r3
 8103916:	e008      	b.n	810392a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103918:	4834      	ldr	r0, [pc, #208]	; (81039ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810391a:	f7ff ff2f 	bl	810377c <LL_ADC_IsEnabled>
 810391e:	4603      	mov	r3, r0
 8103920:	2b00      	cmp	r3, #0
 8103922:	bf0c      	ite	eq
 8103924:	2301      	moveq	r3, #1
 8103926:	2300      	movne	r3, #0
 8103928:	b2db      	uxtb	r3, r3
 810392a:	2b00      	cmp	r3, #0
 810392c:	d04b      	beq.n	81039c6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103930:	689b      	ldr	r3, [r3, #8]
 8103932:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103936:	f023 030f 	bic.w	r3, r3, #15
 810393a:	683a      	ldr	r2, [r7, #0]
 810393c:	6811      	ldr	r1, [r2, #0]
 810393e:	683a      	ldr	r2, [r7, #0]
 8103940:	6892      	ldr	r2, [r2, #8]
 8103942:	430a      	orrs	r2, r1
 8103944:	431a      	orrs	r2, r3
 8103946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103948:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810394a:	e03c      	b.n	81039c6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 810394c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810394e:	689b      	ldr	r3, [r3, #8]
 8103950:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103956:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	4a1f      	ldr	r2, [pc, #124]	; (81039dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810395e:	4293      	cmp	r3, r2
 8103960:	d004      	beq.n	810396c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	4a1e      	ldr	r2, [pc, #120]	; (81039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103968:	4293      	cmp	r3, r2
 810396a:	d10e      	bne.n	810398a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 810396c:	481b      	ldr	r0, [pc, #108]	; (81039dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810396e:	f7ff ff05 	bl	810377c <LL_ADC_IsEnabled>
 8103972:	4604      	mov	r4, r0
 8103974:	481a      	ldr	r0, [pc, #104]	; (81039e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103976:	f7ff ff01 	bl	810377c <LL_ADC_IsEnabled>
 810397a:	4603      	mov	r3, r0
 810397c:	4323      	orrs	r3, r4
 810397e:	2b00      	cmp	r3, #0
 8103980:	bf0c      	ite	eq
 8103982:	2301      	moveq	r3, #1
 8103984:	2300      	movne	r3, #0
 8103986:	b2db      	uxtb	r3, r3
 8103988:	e008      	b.n	810399c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810398a:	4818      	ldr	r0, [pc, #96]	; (81039ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810398c:	f7ff fef6 	bl	810377c <LL_ADC_IsEnabled>
 8103990:	4603      	mov	r3, r0
 8103992:	2b00      	cmp	r3, #0
 8103994:	bf0c      	ite	eq
 8103996:	2301      	moveq	r3, #1
 8103998:	2300      	movne	r3, #0
 810399a:	b2db      	uxtb	r3, r3
 810399c:	2b00      	cmp	r3, #0
 810399e:	d012      	beq.n	81039c6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81039a2:	689b      	ldr	r3, [r3, #8]
 81039a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81039a8:	f023 030f 	bic.w	r3, r3, #15
 81039ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81039ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81039b0:	e009      	b.n	81039c6 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039b6:	f043 0220 	orr.w	r2, r3, #32
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81039be:	2301      	movs	r3, #1
 81039c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81039c4:	e000      	b.n	81039c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81039c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	2200      	movs	r2, #0
 81039cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81039d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81039d4:	4618      	mov	r0, r3
 81039d6:	377c      	adds	r7, #124	; 0x7c
 81039d8:	46bd      	mov	sp, r7
 81039da:	bd90      	pop	{r4, r7, pc}
 81039dc:	40022000 	.word	0x40022000
 81039e0:	40022100 	.word	0x40022100
 81039e4:	40022300 	.word	0x40022300
 81039e8:	58026300 	.word	0x58026300
 81039ec:	58026000 	.word	0x58026000

081039f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81039f0:	b480      	push	{r7}
 81039f2:	b085      	sub	sp, #20
 81039f4:	af00      	add	r7, sp, #0
 81039f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	f003 0307 	and.w	r3, r3, #7
 81039fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103a00:	4b0c      	ldr	r3, [pc, #48]	; (8103a34 <__NVIC_SetPriorityGrouping+0x44>)
 8103a02:	68db      	ldr	r3, [r3, #12]
 8103a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103a06:	68ba      	ldr	r2, [r7, #8]
 8103a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103a0c:	4013      	ands	r3, r2
 8103a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103a10:	68fb      	ldr	r3, [r7, #12]
 8103a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103a14:	68bb      	ldr	r3, [r7, #8]
 8103a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103a22:	4a04      	ldr	r2, [pc, #16]	; (8103a34 <__NVIC_SetPriorityGrouping+0x44>)
 8103a24:	68bb      	ldr	r3, [r7, #8]
 8103a26:	60d3      	str	r3, [r2, #12]
}
 8103a28:	bf00      	nop
 8103a2a:	3714      	adds	r7, #20
 8103a2c:	46bd      	mov	sp, r7
 8103a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a32:	4770      	bx	lr
 8103a34:	e000ed00 	.word	0xe000ed00

08103a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103a38:	b480      	push	{r7}
 8103a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103a3c:	4b04      	ldr	r3, [pc, #16]	; (8103a50 <__NVIC_GetPriorityGrouping+0x18>)
 8103a3e:	68db      	ldr	r3, [r3, #12]
 8103a40:	0a1b      	lsrs	r3, r3, #8
 8103a42:	f003 0307 	and.w	r3, r3, #7
}
 8103a46:	4618      	mov	r0, r3
 8103a48:	46bd      	mov	sp, r7
 8103a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a4e:	4770      	bx	lr
 8103a50:	e000ed00 	.word	0xe000ed00

08103a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103a54:	b480      	push	{r7}
 8103a56:	b083      	sub	sp, #12
 8103a58:	af00      	add	r7, sp, #0
 8103a5a:	4603      	mov	r3, r0
 8103a5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103a62:	2b00      	cmp	r3, #0
 8103a64:	db0b      	blt.n	8103a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103a66:	88fb      	ldrh	r3, [r7, #6]
 8103a68:	f003 021f 	and.w	r2, r3, #31
 8103a6c:	4907      	ldr	r1, [pc, #28]	; (8103a8c <__NVIC_EnableIRQ+0x38>)
 8103a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103a72:	095b      	lsrs	r3, r3, #5
 8103a74:	2001      	movs	r0, #1
 8103a76:	fa00 f202 	lsl.w	r2, r0, r2
 8103a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103a7e:	bf00      	nop
 8103a80:	370c      	adds	r7, #12
 8103a82:	46bd      	mov	sp, r7
 8103a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a88:	4770      	bx	lr
 8103a8a:	bf00      	nop
 8103a8c:	e000e100 	.word	0xe000e100

08103a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103a90:	b480      	push	{r7}
 8103a92:	b083      	sub	sp, #12
 8103a94:	af00      	add	r7, sp, #0
 8103a96:	4603      	mov	r3, r0
 8103a98:	6039      	str	r1, [r7, #0]
 8103a9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103aa0:	2b00      	cmp	r3, #0
 8103aa2:	db0a      	blt.n	8103aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103aa4:	683b      	ldr	r3, [r7, #0]
 8103aa6:	b2da      	uxtb	r2, r3
 8103aa8:	490c      	ldr	r1, [pc, #48]	; (8103adc <__NVIC_SetPriority+0x4c>)
 8103aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103aae:	0112      	lsls	r2, r2, #4
 8103ab0:	b2d2      	uxtb	r2, r2
 8103ab2:	440b      	add	r3, r1
 8103ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103ab8:	e00a      	b.n	8103ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103aba:	683b      	ldr	r3, [r7, #0]
 8103abc:	b2da      	uxtb	r2, r3
 8103abe:	4908      	ldr	r1, [pc, #32]	; (8103ae0 <__NVIC_SetPriority+0x50>)
 8103ac0:	88fb      	ldrh	r3, [r7, #6]
 8103ac2:	f003 030f 	and.w	r3, r3, #15
 8103ac6:	3b04      	subs	r3, #4
 8103ac8:	0112      	lsls	r2, r2, #4
 8103aca:	b2d2      	uxtb	r2, r2
 8103acc:	440b      	add	r3, r1
 8103ace:	761a      	strb	r2, [r3, #24]
}
 8103ad0:	bf00      	nop
 8103ad2:	370c      	adds	r7, #12
 8103ad4:	46bd      	mov	sp, r7
 8103ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ada:	4770      	bx	lr
 8103adc:	e000e100 	.word	0xe000e100
 8103ae0:	e000ed00 	.word	0xe000ed00

08103ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103ae4:	b480      	push	{r7}
 8103ae6:	b089      	sub	sp, #36	; 0x24
 8103ae8:	af00      	add	r7, sp, #0
 8103aea:	60f8      	str	r0, [r7, #12]
 8103aec:	60b9      	str	r1, [r7, #8]
 8103aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103af0:	68fb      	ldr	r3, [r7, #12]
 8103af2:	f003 0307 	and.w	r3, r3, #7
 8103af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103af8:	69fb      	ldr	r3, [r7, #28]
 8103afa:	f1c3 0307 	rsb	r3, r3, #7
 8103afe:	2b04      	cmp	r3, #4
 8103b00:	bf28      	it	cs
 8103b02:	2304      	movcs	r3, #4
 8103b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103b06:	69fb      	ldr	r3, [r7, #28]
 8103b08:	3304      	adds	r3, #4
 8103b0a:	2b06      	cmp	r3, #6
 8103b0c:	d902      	bls.n	8103b14 <NVIC_EncodePriority+0x30>
 8103b0e:	69fb      	ldr	r3, [r7, #28]
 8103b10:	3b03      	subs	r3, #3
 8103b12:	e000      	b.n	8103b16 <NVIC_EncodePriority+0x32>
 8103b14:	2300      	movs	r3, #0
 8103b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103b18:	f04f 32ff 	mov.w	r2, #4294967295
 8103b1c:	69bb      	ldr	r3, [r7, #24]
 8103b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8103b22:	43da      	mvns	r2, r3
 8103b24:	68bb      	ldr	r3, [r7, #8]
 8103b26:	401a      	ands	r2, r3
 8103b28:	697b      	ldr	r3, [r7, #20]
 8103b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8103b30:	697b      	ldr	r3, [r7, #20]
 8103b32:	fa01 f303 	lsl.w	r3, r1, r3
 8103b36:	43d9      	mvns	r1, r3
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103b3c:	4313      	orrs	r3, r2
         );
}
 8103b3e:	4618      	mov	r0, r3
 8103b40:	3724      	adds	r7, #36	; 0x24
 8103b42:	46bd      	mov	sp, r7
 8103b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b48:	4770      	bx	lr

08103b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103b4a:	b580      	push	{r7, lr}
 8103b4c:	b082      	sub	sp, #8
 8103b4e:	af00      	add	r7, sp, #0
 8103b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103b52:	6878      	ldr	r0, [r7, #4]
 8103b54:	f7ff ff4c 	bl	81039f0 <__NVIC_SetPriorityGrouping>
}
 8103b58:	bf00      	nop
 8103b5a:	3708      	adds	r7, #8
 8103b5c:	46bd      	mov	sp, r7
 8103b5e:	bd80      	pop	{r7, pc}

08103b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103b60:	b580      	push	{r7, lr}
 8103b62:	b086      	sub	sp, #24
 8103b64:	af00      	add	r7, sp, #0
 8103b66:	4603      	mov	r3, r0
 8103b68:	60b9      	str	r1, [r7, #8]
 8103b6a:	607a      	str	r2, [r7, #4]
 8103b6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103b6e:	f7ff ff63 	bl	8103a38 <__NVIC_GetPriorityGrouping>
 8103b72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103b74:	687a      	ldr	r2, [r7, #4]
 8103b76:	68b9      	ldr	r1, [r7, #8]
 8103b78:	6978      	ldr	r0, [r7, #20]
 8103b7a:	f7ff ffb3 	bl	8103ae4 <NVIC_EncodePriority>
 8103b7e:	4602      	mov	r2, r0
 8103b80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103b84:	4611      	mov	r1, r2
 8103b86:	4618      	mov	r0, r3
 8103b88:	f7ff ff82 	bl	8103a90 <__NVIC_SetPriority>
}
 8103b8c:	bf00      	nop
 8103b8e:	3718      	adds	r7, #24
 8103b90:	46bd      	mov	sp, r7
 8103b92:	bd80      	pop	{r7, pc}

08103b94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103b94:	b580      	push	{r7, lr}
 8103b96:	b082      	sub	sp, #8
 8103b98:	af00      	add	r7, sp, #0
 8103b9a:	4603      	mov	r3, r0
 8103b9c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103ba2:	4618      	mov	r0, r3
 8103ba4:	f7ff ff56 	bl	8103a54 <__NVIC_EnableIRQ>
}
 8103ba8:	bf00      	nop
 8103baa:	3708      	adds	r7, #8
 8103bac:	46bd      	mov	sp, r7
 8103bae:	bd80      	pop	{r7, pc}

08103bb0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103bb0:	b480      	push	{r7}
 8103bb2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103bb4:	4b07      	ldr	r3, [pc, #28]	; (8103bd4 <HAL_GetCurrentCPUID+0x24>)
 8103bb6:	681b      	ldr	r3, [r3, #0]
 8103bb8:	091b      	lsrs	r3, r3, #4
 8103bba:	f003 030f 	and.w	r3, r3, #15
 8103bbe:	2b07      	cmp	r3, #7
 8103bc0:	d101      	bne.n	8103bc6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103bc2:	2303      	movs	r3, #3
 8103bc4:	e000      	b.n	8103bc8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103bc6:	2301      	movs	r3, #1
  }
}
 8103bc8:	4618      	mov	r0, r3
 8103bca:	46bd      	mov	sp, r7
 8103bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bd0:	4770      	bx	lr
 8103bd2:	bf00      	nop
 8103bd4:	e000ed00 	.word	0xe000ed00

08103bd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8103bd8:	b580      	push	{r7, lr}
 8103bda:	b086      	sub	sp, #24
 8103bdc:	af00      	add	r7, sp, #0
 8103bde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8103be0:	f7fe fb70 	bl	81022c4 <HAL_GetTick>
 8103be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d101      	bne.n	8103bf0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8103bec:	2301      	movs	r3, #1
 8103bee:	e314      	b.n	810421a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	4a66      	ldr	r2, [pc, #408]	; (8103d90 <HAL_DMA_Init+0x1b8>)
 8103bf6:	4293      	cmp	r3, r2
 8103bf8:	d04a      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	4a65      	ldr	r2, [pc, #404]	; (8103d94 <HAL_DMA_Init+0x1bc>)
 8103c00:	4293      	cmp	r3, r2
 8103c02:	d045      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	4a63      	ldr	r2, [pc, #396]	; (8103d98 <HAL_DMA_Init+0x1c0>)
 8103c0a:	4293      	cmp	r3, r2
 8103c0c:	d040      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	4a62      	ldr	r2, [pc, #392]	; (8103d9c <HAL_DMA_Init+0x1c4>)
 8103c14:	4293      	cmp	r3, r2
 8103c16:	d03b      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a60      	ldr	r2, [pc, #384]	; (8103da0 <HAL_DMA_Init+0x1c8>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d036      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	4a5f      	ldr	r2, [pc, #380]	; (8103da4 <HAL_DMA_Init+0x1cc>)
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d031      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a5d      	ldr	r2, [pc, #372]	; (8103da8 <HAL_DMA_Init+0x1d0>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d02c      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a5c      	ldr	r2, [pc, #368]	; (8103dac <HAL_DMA_Init+0x1d4>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d027      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a5a      	ldr	r2, [pc, #360]	; (8103db0 <HAL_DMA_Init+0x1d8>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d022      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a59      	ldr	r2, [pc, #356]	; (8103db4 <HAL_DMA_Init+0x1dc>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d01d      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a57      	ldr	r2, [pc, #348]	; (8103db8 <HAL_DMA_Init+0x1e0>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d018      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a56      	ldr	r2, [pc, #344]	; (8103dbc <HAL_DMA_Init+0x1e4>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d013      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a54      	ldr	r2, [pc, #336]	; (8103dc0 <HAL_DMA_Init+0x1e8>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d00e      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a53      	ldr	r2, [pc, #332]	; (8103dc4 <HAL_DMA_Init+0x1ec>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d009      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a51      	ldr	r2, [pc, #324]	; (8103dc8 <HAL_DMA_Init+0x1f0>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d004      	beq.n	8103c90 <HAL_DMA_Init+0xb8>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a50      	ldr	r2, [pc, #320]	; (8103dcc <HAL_DMA_Init+0x1f4>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d101      	bne.n	8103c94 <HAL_DMA_Init+0xbc>
 8103c90:	2301      	movs	r3, #1
 8103c92:	e000      	b.n	8103c96 <HAL_DMA_Init+0xbe>
 8103c94:	2300      	movs	r3, #0
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	f000 813b 	beq.w	8103f12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	2200      	movs	r2, #0
 8103ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	2202      	movs	r2, #2
 8103ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	681b      	ldr	r3, [r3, #0]
 8103cb0:	4a37      	ldr	r2, [pc, #220]	; (8103d90 <HAL_DMA_Init+0x1b8>)
 8103cb2:	4293      	cmp	r3, r2
 8103cb4:	d04a      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	681b      	ldr	r3, [r3, #0]
 8103cba:	4a36      	ldr	r2, [pc, #216]	; (8103d94 <HAL_DMA_Init+0x1bc>)
 8103cbc:	4293      	cmp	r3, r2
 8103cbe:	d045      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	4a34      	ldr	r2, [pc, #208]	; (8103d98 <HAL_DMA_Init+0x1c0>)
 8103cc6:	4293      	cmp	r3, r2
 8103cc8:	d040      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	4a33      	ldr	r2, [pc, #204]	; (8103d9c <HAL_DMA_Init+0x1c4>)
 8103cd0:	4293      	cmp	r3, r2
 8103cd2:	d03b      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	4a31      	ldr	r2, [pc, #196]	; (8103da0 <HAL_DMA_Init+0x1c8>)
 8103cda:	4293      	cmp	r3, r2
 8103cdc:	d036      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	4a30      	ldr	r2, [pc, #192]	; (8103da4 <HAL_DMA_Init+0x1cc>)
 8103ce4:	4293      	cmp	r3, r2
 8103ce6:	d031      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	4a2e      	ldr	r2, [pc, #184]	; (8103da8 <HAL_DMA_Init+0x1d0>)
 8103cee:	4293      	cmp	r3, r2
 8103cf0:	d02c      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	681b      	ldr	r3, [r3, #0]
 8103cf6:	4a2d      	ldr	r2, [pc, #180]	; (8103dac <HAL_DMA_Init+0x1d4>)
 8103cf8:	4293      	cmp	r3, r2
 8103cfa:	d027      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	4a2b      	ldr	r2, [pc, #172]	; (8103db0 <HAL_DMA_Init+0x1d8>)
 8103d02:	4293      	cmp	r3, r2
 8103d04:	d022      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	681b      	ldr	r3, [r3, #0]
 8103d0a:	4a2a      	ldr	r2, [pc, #168]	; (8103db4 <HAL_DMA_Init+0x1dc>)
 8103d0c:	4293      	cmp	r3, r2
 8103d0e:	d01d      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	4a28      	ldr	r2, [pc, #160]	; (8103db8 <HAL_DMA_Init+0x1e0>)
 8103d16:	4293      	cmp	r3, r2
 8103d18:	d018      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	4a27      	ldr	r2, [pc, #156]	; (8103dbc <HAL_DMA_Init+0x1e4>)
 8103d20:	4293      	cmp	r3, r2
 8103d22:	d013      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	681b      	ldr	r3, [r3, #0]
 8103d28:	4a25      	ldr	r2, [pc, #148]	; (8103dc0 <HAL_DMA_Init+0x1e8>)
 8103d2a:	4293      	cmp	r3, r2
 8103d2c:	d00e      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	4a24      	ldr	r2, [pc, #144]	; (8103dc4 <HAL_DMA_Init+0x1ec>)
 8103d34:	4293      	cmp	r3, r2
 8103d36:	d009      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	4a22      	ldr	r2, [pc, #136]	; (8103dc8 <HAL_DMA_Init+0x1f0>)
 8103d3e:	4293      	cmp	r3, r2
 8103d40:	d004      	beq.n	8103d4c <HAL_DMA_Init+0x174>
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	4a21      	ldr	r2, [pc, #132]	; (8103dcc <HAL_DMA_Init+0x1f4>)
 8103d48:	4293      	cmp	r3, r2
 8103d4a:	d108      	bne.n	8103d5e <HAL_DMA_Init+0x186>
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	681a      	ldr	r2, [r3, #0]
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	f022 0201 	bic.w	r2, r2, #1
 8103d5a:	601a      	str	r2, [r3, #0]
 8103d5c:	e007      	b.n	8103d6e <HAL_DMA_Init+0x196>
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	681b      	ldr	r3, [r3, #0]
 8103d62:	681a      	ldr	r2, [r3, #0]
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	681b      	ldr	r3, [r3, #0]
 8103d68:	f022 0201 	bic.w	r2, r2, #1
 8103d6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103d6e:	e02f      	b.n	8103dd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103d70:	f7fe faa8 	bl	81022c4 <HAL_GetTick>
 8103d74:	4602      	mov	r2, r0
 8103d76:	693b      	ldr	r3, [r7, #16]
 8103d78:	1ad3      	subs	r3, r2, r3
 8103d7a:	2b05      	cmp	r3, #5
 8103d7c:	d928      	bls.n	8103dd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	2220      	movs	r2, #32
 8103d82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	2203      	movs	r2, #3
 8103d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8103d8c:	2301      	movs	r3, #1
 8103d8e:	e244      	b.n	810421a <HAL_DMA_Init+0x642>
 8103d90:	40020010 	.word	0x40020010
 8103d94:	40020028 	.word	0x40020028
 8103d98:	40020040 	.word	0x40020040
 8103d9c:	40020058 	.word	0x40020058
 8103da0:	40020070 	.word	0x40020070
 8103da4:	40020088 	.word	0x40020088
 8103da8:	400200a0 	.word	0x400200a0
 8103dac:	400200b8 	.word	0x400200b8
 8103db0:	40020410 	.word	0x40020410
 8103db4:	40020428 	.word	0x40020428
 8103db8:	40020440 	.word	0x40020440
 8103dbc:	40020458 	.word	0x40020458
 8103dc0:	40020470 	.word	0x40020470
 8103dc4:	40020488 	.word	0x40020488
 8103dc8:	400204a0 	.word	0x400204a0
 8103dcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	f003 0301 	and.w	r3, r3, #1
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d1c8      	bne.n	8103d70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8103de6:	697a      	ldr	r2, [r7, #20]
 8103de8:	4b84      	ldr	r3, [pc, #528]	; (8103ffc <HAL_DMA_Init+0x424>)
 8103dea:	4013      	ands	r3, r2
 8103dec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8103df6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	691b      	ldr	r3, [r3, #16]
 8103dfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8103e02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	699b      	ldr	r3, [r3, #24]
 8103e08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8103e0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	6a1b      	ldr	r3, [r3, #32]
 8103e14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8103e16:	697a      	ldr	r2, [r7, #20]
 8103e18:	4313      	orrs	r3, r2
 8103e1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e20:	2b04      	cmp	r3, #4
 8103e22:	d107      	bne.n	8103e34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103e2c:	4313      	orrs	r3, r2
 8103e2e:	697a      	ldr	r2, [r7, #20]
 8103e30:	4313      	orrs	r3, r2
 8103e32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8103e34:	4b72      	ldr	r3, [pc, #456]	; (8104000 <HAL_DMA_Init+0x428>)
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	0c1b      	lsrs	r3, r3, #16
 8103e3a:	041b      	lsls	r3, r3, #16
 8103e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e40:	d328      	bcc.n	8103e94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	685b      	ldr	r3, [r3, #4]
 8103e46:	2b28      	cmp	r3, #40	; 0x28
 8103e48:	d903      	bls.n	8103e52 <HAL_DMA_Init+0x27a>
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	685b      	ldr	r3, [r3, #4]
 8103e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8103e50:	d917      	bls.n	8103e82 <HAL_DMA_Init+0x2aa>
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	685b      	ldr	r3, [r3, #4]
 8103e56:	2b3e      	cmp	r3, #62	; 0x3e
 8103e58:	d903      	bls.n	8103e62 <HAL_DMA_Init+0x28a>
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	685b      	ldr	r3, [r3, #4]
 8103e5e:	2b42      	cmp	r3, #66	; 0x42
 8103e60:	d90f      	bls.n	8103e82 <HAL_DMA_Init+0x2aa>
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	685b      	ldr	r3, [r3, #4]
 8103e66:	2b46      	cmp	r3, #70	; 0x46
 8103e68:	d903      	bls.n	8103e72 <HAL_DMA_Init+0x29a>
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	685b      	ldr	r3, [r3, #4]
 8103e6e:	2b48      	cmp	r3, #72	; 0x48
 8103e70:	d907      	bls.n	8103e82 <HAL_DMA_Init+0x2aa>
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	685b      	ldr	r3, [r3, #4]
 8103e76:	2b4e      	cmp	r3, #78	; 0x4e
 8103e78:	d905      	bls.n	8103e86 <HAL_DMA_Init+0x2ae>
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	685b      	ldr	r3, [r3, #4]
 8103e7e:	2b52      	cmp	r3, #82	; 0x52
 8103e80:	d801      	bhi.n	8103e86 <HAL_DMA_Init+0x2ae>
 8103e82:	2301      	movs	r3, #1
 8103e84:	e000      	b.n	8103e88 <HAL_DMA_Init+0x2b0>
 8103e86:	2300      	movs	r3, #0
 8103e88:	2b00      	cmp	r3, #0
 8103e8a:	d003      	beq.n	8103e94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8103e8c:	697b      	ldr	r3, [r7, #20]
 8103e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103e92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	697a      	ldr	r2, [r7, #20]
 8103e9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	695b      	ldr	r3, [r3, #20]
 8103ea2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8103ea4:	697b      	ldr	r3, [r7, #20]
 8103ea6:	f023 0307 	bic.w	r3, r3, #7
 8103eaa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103eb0:	697a      	ldr	r2, [r7, #20]
 8103eb2:	4313      	orrs	r3, r2
 8103eb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103eba:	2b04      	cmp	r3, #4
 8103ebc:	d117      	bne.n	8103eee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8103ebe:	687b      	ldr	r3, [r7, #4]
 8103ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ec2:	697a      	ldr	r2, [r7, #20]
 8103ec4:	4313      	orrs	r3, r2
 8103ec6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ecc:	2b00      	cmp	r3, #0
 8103ece:	d00e      	beq.n	8103eee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8103ed0:	6878      	ldr	r0, [r7, #4]
 8103ed2:	f001 fbfb 	bl	81056cc <DMA_CheckFifoParam>
 8103ed6:	4603      	mov	r3, r0
 8103ed8:	2b00      	cmp	r3, #0
 8103eda:	d008      	beq.n	8103eee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	2240      	movs	r2, #64	; 0x40
 8103ee0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	2201      	movs	r2, #1
 8103ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8103eea:	2301      	movs	r3, #1
 8103eec:	e195      	b.n	810421a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	697a      	ldr	r2, [r7, #20]
 8103ef4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8103ef6:	6878      	ldr	r0, [r7, #4]
 8103ef8:	f001 fb36 	bl	8105568 <DMA_CalcBaseAndBitshift>
 8103efc:	4603      	mov	r3, r0
 8103efe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103f00:	687b      	ldr	r3, [r7, #4]
 8103f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f04:	f003 031f 	and.w	r3, r3, #31
 8103f08:	223f      	movs	r2, #63	; 0x3f
 8103f0a:	409a      	lsls	r2, r3
 8103f0c:	68bb      	ldr	r3, [r7, #8]
 8103f0e:	609a      	str	r2, [r3, #8]
 8103f10:	e0cb      	b.n	81040aa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	4a3b      	ldr	r2, [pc, #236]	; (8104004 <HAL_DMA_Init+0x42c>)
 8103f18:	4293      	cmp	r3, r2
 8103f1a:	d022      	beq.n	8103f62 <HAL_DMA_Init+0x38a>
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	4a39      	ldr	r2, [pc, #228]	; (8104008 <HAL_DMA_Init+0x430>)
 8103f22:	4293      	cmp	r3, r2
 8103f24:	d01d      	beq.n	8103f62 <HAL_DMA_Init+0x38a>
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	4a38      	ldr	r2, [pc, #224]	; (810400c <HAL_DMA_Init+0x434>)
 8103f2c:	4293      	cmp	r3, r2
 8103f2e:	d018      	beq.n	8103f62 <HAL_DMA_Init+0x38a>
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4a36      	ldr	r2, [pc, #216]	; (8104010 <HAL_DMA_Init+0x438>)
 8103f36:	4293      	cmp	r3, r2
 8103f38:	d013      	beq.n	8103f62 <HAL_DMA_Init+0x38a>
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	4a35      	ldr	r2, [pc, #212]	; (8104014 <HAL_DMA_Init+0x43c>)
 8103f40:	4293      	cmp	r3, r2
 8103f42:	d00e      	beq.n	8103f62 <HAL_DMA_Init+0x38a>
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	681b      	ldr	r3, [r3, #0]
 8103f48:	4a33      	ldr	r2, [pc, #204]	; (8104018 <HAL_DMA_Init+0x440>)
 8103f4a:	4293      	cmp	r3, r2
 8103f4c:	d009      	beq.n	8103f62 <HAL_DMA_Init+0x38a>
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4a32      	ldr	r2, [pc, #200]	; (810401c <HAL_DMA_Init+0x444>)
 8103f54:	4293      	cmp	r3, r2
 8103f56:	d004      	beq.n	8103f62 <HAL_DMA_Init+0x38a>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	4a30      	ldr	r2, [pc, #192]	; (8104020 <HAL_DMA_Init+0x448>)
 8103f5e:	4293      	cmp	r3, r2
 8103f60:	d101      	bne.n	8103f66 <HAL_DMA_Init+0x38e>
 8103f62:	2301      	movs	r3, #1
 8103f64:	e000      	b.n	8103f68 <HAL_DMA_Init+0x390>
 8103f66:	2300      	movs	r3, #0
 8103f68:	2b00      	cmp	r3, #0
 8103f6a:	f000 8095 	beq.w	8104098 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	4a24      	ldr	r2, [pc, #144]	; (8104004 <HAL_DMA_Init+0x42c>)
 8103f74:	4293      	cmp	r3, r2
 8103f76:	d021      	beq.n	8103fbc <HAL_DMA_Init+0x3e4>
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	4a22      	ldr	r2, [pc, #136]	; (8104008 <HAL_DMA_Init+0x430>)
 8103f7e:	4293      	cmp	r3, r2
 8103f80:	d01c      	beq.n	8103fbc <HAL_DMA_Init+0x3e4>
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	4a21      	ldr	r2, [pc, #132]	; (810400c <HAL_DMA_Init+0x434>)
 8103f88:	4293      	cmp	r3, r2
 8103f8a:	d017      	beq.n	8103fbc <HAL_DMA_Init+0x3e4>
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	4a1f      	ldr	r2, [pc, #124]	; (8104010 <HAL_DMA_Init+0x438>)
 8103f92:	4293      	cmp	r3, r2
 8103f94:	d012      	beq.n	8103fbc <HAL_DMA_Init+0x3e4>
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4a1e      	ldr	r2, [pc, #120]	; (8104014 <HAL_DMA_Init+0x43c>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d00d      	beq.n	8103fbc <HAL_DMA_Init+0x3e4>
 8103fa0:	687b      	ldr	r3, [r7, #4]
 8103fa2:	681b      	ldr	r3, [r3, #0]
 8103fa4:	4a1c      	ldr	r2, [pc, #112]	; (8104018 <HAL_DMA_Init+0x440>)
 8103fa6:	4293      	cmp	r3, r2
 8103fa8:	d008      	beq.n	8103fbc <HAL_DMA_Init+0x3e4>
 8103faa:	687b      	ldr	r3, [r7, #4]
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	4a1b      	ldr	r2, [pc, #108]	; (810401c <HAL_DMA_Init+0x444>)
 8103fb0:	4293      	cmp	r3, r2
 8103fb2:	d003      	beq.n	8103fbc <HAL_DMA_Init+0x3e4>
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	4a19      	ldr	r2, [pc, #100]	; (8104020 <HAL_DMA_Init+0x448>)
 8103fba:	4293      	cmp	r3, r2
 8103fbc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	2200      	movs	r2, #0
 8103fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	2202      	movs	r2, #2
 8103fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8103fd6:	697b      	ldr	r3, [r7, #20]
 8103fd8:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8103fdc:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8103fe0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	689b      	ldr	r3, [r3, #8]
 8103fe6:	2b40      	cmp	r3, #64	; 0x40
 8103fe8:	d01c      	beq.n	8104024 <HAL_DMA_Init+0x44c>
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	689b      	ldr	r3, [r3, #8]
 8103fee:	2b80      	cmp	r3, #128	; 0x80
 8103ff0:	d102      	bne.n	8103ff8 <HAL_DMA_Init+0x420>
 8103ff2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103ff6:	e016      	b.n	8104026 <HAL_DMA_Init+0x44e>
 8103ff8:	2300      	movs	r3, #0
 8103ffa:	e014      	b.n	8104026 <HAL_DMA_Init+0x44e>
 8103ffc:	fe10803f 	.word	0xfe10803f
 8104000:	5c001000 	.word	0x5c001000
 8104004:	58025408 	.word	0x58025408
 8104008:	5802541c 	.word	0x5802541c
 810400c:	58025430 	.word	0x58025430
 8104010:	58025444 	.word	0x58025444
 8104014:	58025458 	.word	0x58025458
 8104018:	5802546c 	.word	0x5802546c
 810401c:	58025480 	.word	0x58025480
 8104020:	58025494 	.word	0x58025494
 8104024:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104026:	687a      	ldr	r2, [r7, #4]
 8104028:	68d2      	ldr	r2, [r2, #12]
 810402a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810402c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	691b      	ldr	r3, [r3, #16]
 8104032:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8104034:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	695b      	ldr	r3, [r3, #20]
 810403a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810403c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	699b      	ldr	r3, [r3, #24]
 8104042:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8104044:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	69db      	ldr	r3, [r3, #28]
 810404a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810404c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	6a1b      	ldr	r3, [r3, #32]
 8104052:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8104054:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8104056:	697a      	ldr	r2, [r7, #20]
 8104058:	4313      	orrs	r3, r2
 810405a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	697a      	ldr	r2, [r7, #20]
 8104062:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	461a      	mov	r2, r3
 810406a:	4b6e      	ldr	r3, [pc, #440]	; (8104224 <HAL_DMA_Init+0x64c>)
 810406c:	4413      	add	r3, r2
 810406e:	4a6e      	ldr	r2, [pc, #440]	; (8104228 <HAL_DMA_Init+0x650>)
 8104070:	fba2 2303 	umull	r2, r3, r2, r3
 8104074:	091b      	lsrs	r3, r3, #4
 8104076:	009a      	lsls	r2, r3, #2
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 810407c:	6878      	ldr	r0, [r7, #4]
 810407e:	f001 fa73 	bl	8105568 <DMA_CalcBaseAndBitshift>
 8104082:	4603      	mov	r3, r0
 8104084:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8104086:	687b      	ldr	r3, [r7, #4]
 8104088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810408a:	f003 031f 	and.w	r3, r3, #31
 810408e:	2201      	movs	r2, #1
 8104090:	409a      	lsls	r2, r3
 8104092:	68fb      	ldr	r3, [r7, #12]
 8104094:	605a      	str	r2, [r3, #4]
 8104096:	e008      	b.n	81040aa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8104098:	687b      	ldr	r3, [r7, #4]
 810409a:	2240      	movs	r2, #64	; 0x40
 810409c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	2203      	movs	r2, #3
 81040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 81040a6:	2301      	movs	r3, #1
 81040a8:	e0b7      	b.n	810421a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81040aa:	687b      	ldr	r3, [r7, #4]
 81040ac:	681b      	ldr	r3, [r3, #0]
 81040ae:	4a5f      	ldr	r2, [pc, #380]	; (810422c <HAL_DMA_Init+0x654>)
 81040b0:	4293      	cmp	r3, r2
 81040b2:	d072      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	4a5d      	ldr	r2, [pc, #372]	; (8104230 <HAL_DMA_Init+0x658>)
 81040ba:	4293      	cmp	r3, r2
 81040bc:	d06d      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	681b      	ldr	r3, [r3, #0]
 81040c2:	4a5c      	ldr	r2, [pc, #368]	; (8104234 <HAL_DMA_Init+0x65c>)
 81040c4:	4293      	cmp	r3, r2
 81040c6:	d068      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	681b      	ldr	r3, [r3, #0]
 81040cc:	4a5a      	ldr	r2, [pc, #360]	; (8104238 <HAL_DMA_Init+0x660>)
 81040ce:	4293      	cmp	r3, r2
 81040d0:	d063      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	681b      	ldr	r3, [r3, #0]
 81040d6:	4a59      	ldr	r2, [pc, #356]	; (810423c <HAL_DMA_Init+0x664>)
 81040d8:	4293      	cmp	r3, r2
 81040da:	d05e      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	4a57      	ldr	r2, [pc, #348]	; (8104240 <HAL_DMA_Init+0x668>)
 81040e2:	4293      	cmp	r3, r2
 81040e4:	d059      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	4a56      	ldr	r2, [pc, #344]	; (8104244 <HAL_DMA_Init+0x66c>)
 81040ec:	4293      	cmp	r3, r2
 81040ee:	d054      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	4a54      	ldr	r2, [pc, #336]	; (8104248 <HAL_DMA_Init+0x670>)
 81040f6:	4293      	cmp	r3, r2
 81040f8:	d04f      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	681b      	ldr	r3, [r3, #0]
 81040fe:	4a53      	ldr	r2, [pc, #332]	; (810424c <HAL_DMA_Init+0x674>)
 8104100:	4293      	cmp	r3, r2
 8104102:	d04a      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	4a51      	ldr	r2, [pc, #324]	; (8104250 <HAL_DMA_Init+0x678>)
 810410a:	4293      	cmp	r3, r2
 810410c:	d045      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	681b      	ldr	r3, [r3, #0]
 8104112:	4a50      	ldr	r2, [pc, #320]	; (8104254 <HAL_DMA_Init+0x67c>)
 8104114:	4293      	cmp	r3, r2
 8104116:	d040      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	681b      	ldr	r3, [r3, #0]
 810411c:	4a4e      	ldr	r2, [pc, #312]	; (8104258 <HAL_DMA_Init+0x680>)
 810411e:	4293      	cmp	r3, r2
 8104120:	d03b      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	681b      	ldr	r3, [r3, #0]
 8104126:	4a4d      	ldr	r2, [pc, #308]	; (810425c <HAL_DMA_Init+0x684>)
 8104128:	4293      	cmp	r3, r2
 810412a:	d036      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 810412c:	687b      	ldr	r3, [r7, #4]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	4a4b      	ldr	r2, [pc, #300]	; (8104260 <HAL_DMA_Init+0x688>)
 8104132:	4293      	cmp	r3, r2
 8104134:	d031      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	681b      	ldr	r3, [r3, #0]
 810413a:	4a4a      	ldr	r2, [pc, #296]	; (8104264 <HAL_DMA_Init+0x68c>)
 810413c:	4293      	cmp	r3, r2
 810413e:	d02c      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	681b      	ldr	r3, [r3, #0]
 8104144:	4a48      	ldr	r2, [pc, #288]	; (8104268 <HAL_DMA_Init+0x690>)
 8104146:	4293      	cmp	r3, r2
 8104148:	d027      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	4a47      	ldr	r2, [pc, #284]	; (810426c <HAL_DMA_Init+0x694>)
 8104150:	4293      	cmp	r3, r2
 8104152:	d022      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	681b      	ldr	r3, [r3, #0]
 8104158:	4a45      	ldr	r2, [pc, #276]	; (8104270 <HAL_DMA_Init+0x698>)
 810415a:	4293      	cmp	r3, r2
 810415c:	d01d      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	681b      	ldr	r3, [r3, #0]
 8104162:	4a44      	ldr	r2, [pc, #272]	; (8104274 <HAL_DMA_Init+0x69c>)
 8104164:	4293      	cmp	r3, r2
 8104166:	d018      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	4a42      	ldr	r2, [pc, #264]	; (8104278 <HAL_DMA_Init+0x6a0>)
 810416e:	4293      	cmp	r3, r2
 8104170:	d013      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	4a41      	ldr	r2, [pc, #260]	; (810427c <HAL_DMA_Init+0x6a4>)
 8104178:	4293      	cmp	r3, r2
 810417a:	d00e      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	4a3f      	ldr	r2, [pc, #252]	; (8104280 <HAL_DMA_Init+0x6a8>)
 8104182:	4293      	cmp	r3, r2
 8104184:	d009      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	4a3e      	ldr	r2, [pc, #248]	; (8104284 <HAL_DMA_Init+0x6ac>)
 810418c:	4293      	cmp	r3, r2
 810418e:	d004      	beq.n	810419a <HAL_DMA_Init+0x5c2>
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	4a3c      	ldr	r2, [pc, #240]	; (8104288 <HAL_DMA_Init+0x6b0>)
 8104196:	4293      	cmp	r3, r2
 8104198:	d101      	bne.n	810419e <HAL_DMA_Init+0x5c6>
 810419a:	2301      	movs	r3, #1
 810419c:	e000      	b.n	81041a0 <HAL_DMA_Init+0x5c8>
 810419e:	2300      	movs	r3, #0
 81041a0:	2b00      	cmp	r3, #0
 81041a2:	d032      	beq.n	810420a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 81041a4:	6878      	ldr	r0, [r7, #4]
 81041a6:	f001 fb0d 	bl	81057c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	689b      	ldr	r3, [r3, #8]
 81041ae:	2b80      	cmp	r3, #128	; 0x80
 81041b0:	d102      	bne.n	81041b8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	2200      	movs	r2, #0
 81041b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	685a      	ldr	r2, [r3, #4]
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81041c0:	b2d2      	uxtb	r2, r2
 81041c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041c8:	687a      	ldr	r2, [r7, #4]
 81041ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81041cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	685b      	ldr	r3, [r3, #4]
 81041d2:	2b00      	cmp	r3, #0
 81041d4:	d010      	beq.n	81041f8 <HAL_DMA_Init+0x620>
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	685b      	ldr	r3, [r3, #4]
 81041da:	2b08      	cmp	r3, #8
 81041dc:	d80c      	bhi.n	81041f8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 81041de:	6878      	ldr	r0, [r7, #4]
 81041e0:	f001 fb8a 	bl	81058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81041e8:	2200      	movs	r2, #0
 81041ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81041f0:	687a      	ldr	r2, [r7, #4]
 81041f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81041f4:	605a      	str	r2, [r3, #4]
 81041f6:	e008      	b.n	810420a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	2200      	movs	r2, #0
 81041fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	2200      	movs	r2, #0
 8104202:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	2200      	movs	r2, #0
 8104208:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 810420a:	687b      	ldr	r3, [r7, #4]
 810420c:	2200      	movs	r2, #0
 810420e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	2201      	movs	r2, #1
 8104214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8104218:	2300      	movs	r3, #0
}
 810421a:	4618      	mov	r0, r3
 810421c:	3718      	adds	r7, #24
 810421e:	46bd      	mov	sp, r7
 8104220:	bd80      	pop	{r7, pc}
 8104222:	bf00      	nop
 8104224:	a7fdabf8 	.word	0xa7fdabf8
 8104228:	cccccccd 	.word	0xcccccccd
 810422c:	40020010 	.word	0x40020010
 8104230:	40020028 	.word	0x40020028
 8104234:	40020040 	.word	0x40020040
 8104238:	40020058 	.word	0x40020058
 810423c:	40020070 	.word	0x40020070
 8104240:	40020088 	.word	0x40020088
 8104244:	400200a0 	.word	0x400200a0
 8104248:	400200b8 	.word	0x400200b8
 810424c:	40020410 	.word	0x40020410
 8104250:	40020428 	.word	0x40020428
 8104254:	40020440 	.word	0x40020440
 8104258:	40020458 	.word	0x40020458
 810425c:	40020470 	.word	0x40020470
 8104260:	40020488 	.word	0x40020488
 8104264:	400204a0 	.word	0x400204a0
 8104268:	400204b8 	.word	0x400204b8
 810426c:	58025408 	.word	0x58025408
 8104270:	5802541c 	.word	0x5802541c
 8104274:	58025430 	.word	0x58025430
 8104278:	58025444 	.word	0x58025444
 810427c:	58025458 	.word	0x58025458
 8104280:	5802546c 	.word	0x5802546c
 8104284:	58025480 	.word	0x58025480
 8104288:	58025494 	.word	0x58025494

0810428c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 810428c:	b580      	push	{r7, lr}
 810428e:	b084      	sub	sp, #16
 8104290:	af00      	add	r7, sp, #0
 8104292:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	2b00      	cmp	r3, #0
 8104298:	d101      	bne.n	810429e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810429a:	2301      	movs	r3, #1
 810429c:	e205      	b.n	81046aa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81042a4:	b2db      	uxtb	r3, r3
 81042a6:	2b02      	cmp	r3, #2
 81042a8:	d004      	beq.n	81042b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	2280      	movs	r2, #128	; 0x80
 81042ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81042b0:	2301      	movs	r3, #1
 81042b2:	e1fa      	b.n	81046aa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	4a8c      	ldr	r2, [pc, #560]	; (81044ec <HAL_DMA_Abort_IT+0x260>)
 81042ba:	4293      	cmp	r3, r2
 81042bc:	d04a      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a8b      	ldr	r2, [pc, #556]	; (81044f0 <HAL_DMA_Abort_IT+0x264>)
 81042c4:	4293      	cmp	r3, r2
 81042c6:	d045      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	4a89      	ldr	r2, [pc, #548]	; (81044f4 <HAL_DMA_Abort_IT+0x268>)
 81042ce:	4293      	cmp	r3, r2
 81042d0:	d040      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	4a88      	ldr	r2, [pc, #544]	; (81044f8 <HAL_DMA_Abort_IT+0x26c>)
 81042d8:	4293      	cmp	r3, r2
 81042da:	d03b      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	4a86      	ldr	r2, [pc, #536]	; (81044fc <HAL_DMA_Abort_IT+0x270>)
 81042e2:	4293      	cmp	r3, r2
 81042e4:	d036      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	4a85      	ldr	r2, [pc, #532]	; (8104500 <HAL_DMA_Abort_IT+0x274>)
 81042ec:	4293      	cmp	r3, r2
 81042ee:	d031      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	681b      	ldr	r3, [r3, #0]
 81042f4:	4a83      	ldr	r2, [pc, #524]	; (8104504 <HAL_DMA_Abort_IT+0x278>)
 81042f6:	4293      	cmp	r3, r2
 81042f8:	d02c      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	4a82      	ldr	r2, [pc, #520]	; (8104508 <HAL_DMA_Abort_IT+0x27c>)
 8104300:	4293      	cmp	r3, r2
 8104302:	d027      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	4a80      	ldr	r2, [pc, #512]	; (810450c <HAL_DMA_Abort_IT+0x280>)
 810430a:	4293      	cmp	r3, r2
 810430c:	d022      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	4a7f      	ldr	r2, [pc, #508]	; (8104510 <HAL_DMA_Abort_IT+0x284>)
 8104314:	4293      	cmp	r3, r2
 8104316:	d01d      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	4a7d      	ldr	r2, [pc, #500]	; (8104514 <HAL_DMA_Abort_IT+0x288>)
 810431e:	4293      	cmp	r3, r2
 8104320:	d018      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	4a7c      	ldr	r2, [pc, #496]	; (8104518 <HAL_DMA_Abort_IT+0x28c>)
 8104328:	4293      	cmp	r3, r2
 810432a:	d013      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	681b      	ldr	r3, [r3, #0]
 8104330:	4a7a      	ldr	r2, [pc, #488]	; (810451c <HAL_DMA_Abort_IT+0x290>)
 8104332:	4293      	cmp	r3, r2
 8104334:	d00e      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	4a79      	ldr	r2, [pc, #484]	; (8104520 <HAL_DMA_Abort_IT+0x294>)
 810433c:	4293      	cmp	r3, r2
 810433e:	d009      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	681b      	ldr	r3, [r3, #0]
 8104344:	4a77      	ldr	r2, [pc, #476]	; (8104524 <HAL_DMA_Abort_IT+0x298>)
 8104346:	4293      	cmp	r3, r2
 8104348:	d004      	beq.n	8104354 <HAL_DMA_Abort_IT+0xc8>
 810434a:	687b      	ldr	r3, [r7, #4]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	4a76      	ldr	r2, [pc, #472]	; (8104528 <HAL_DMA_Abort_IT+0x29c>)
 8104350:	4293      	cmp	r3, r2
 8104352:	d101      	bne.n	8104358 <HAL_DMA_Abort_IT+0xcc>
 8104354:	2301      	movs	r3, #1
 8104356:	e000      	b.n	810435a <HAL_DMA_Abort_IT+0xce>
 8104358:	2300      	movs	r3, #0
 810435a:	2b00      	cmp	r3, #0
 810435c:	d065      	beq.n	810442a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	2204      	movs	r2, #4
 8104362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	4a60      	ldr	r2, [pc, #384]	; (81044ec <HAL_DMA_Abort_IT+0x260>)
 810436c:	4293      	cmp	r3, r2
 810436e:	d04a      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	4a5e      	ldr	r2, [pc, #376]	; (81044f0 <HAL_DMA_Abort_IT+0x264>)
 8104376:	4293      	cmp	r3, r2
 8104378:	d045      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	4a5d      	ldr	r2, [pc, #372]	; (81044f4 <HAL_DMA_Abort_IT+0x268>)
 8104380:	4293      	cmp	r3, r2
 8104382:	d040      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a5b      	ldr	r2, [pc, #364]	; (81044f8 <HAL_DMA_Abort_IT+0x26c>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d03b      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	4a5a      	ldr	r2, [pc, #360]	; (81044fc <HAL_DMA_Abort_IT+0x270>)
 8104394:	4293      	cmp	r3, r2
 8104396:	d036      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	4a58      	ldr	r2, [pc, #352]	; (8104500 <HAL_DMA_Abort_IT+0x274>)
 810439e:	4293      	cmp	r3, r2
 81043a0:	d031      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043a2:	687b      	ldr	r3, [r7, #4]
 81043a4:	681b      	ldr	r3, [r3, #0]
 81043a6:	4a57      	ldr	r2, [pc, #348]	; (8104504 <HAL_DMA_Abort_IT+0x278>)
 81043a8:	4293      	cmp	r3, r2
 81043aa:	d02c      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043ac:	687b      	ldr	r3, [r7, #4]
 81043ae:	681b      	ldr	r3, [r3, #0]
 81043b0:	4a55      	ldr	r2, [pc, #340]	; (8104508 <HAL_DMA_Abort_IT+0x27c>)
 81043b2:	4293      	cmp	r3, r2
 81043b4:	d027      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	4a54      	ldr	r2, [pc, #336]	; (810450c <HAL_DMA_Abort_IT+0x280>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d022      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a52      	ldr	r2, [pc, #328]	; (8104510 <HAL_DMA_Abort_IT+0x284>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d01d      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a51      	ldr	r2, [pc, #324]	; (8104514 <HAL_DMA_Abort_IT+0x288>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d018      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	4a4f      	ldr	r2, [pc, #316]	; (8104518 <HAL_DMA_Abort_IT+0x28c>)
 81043da:	4293      	cmp	r3, r2
 81043dc:	d013      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	681b      	ldr	r3, [r3, #0]
 81043e2:	4a4e      	ldr	r2, [pc, #312]	; (810451c <HAL_DMA_Abort_IT+0x290>)
 81043e4:	4293      	cmp	r3, r2
 81043e6:	d00e      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	4a4c      	ldr	r2, [pc, #304]	; (8104520 <HAL_DMA_Abort_IT+0x294>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d009      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	4a4b      	ldr	r2, [pc, #300]	; (8104524 <HAL_DMA_Abort_IT+0x298>)
 81043f8:	4293      	cmp	r3, r2
 81043fa:	d004      	beq.n	8104406 <HAL_DMA_Abort_IT+0x17a>
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	4a49      	ldr	r2, [pc, #292]	; (8104528 <HAL_DMA_Abort_IT+0x29c>)
 8104402:	4293      	cmp	r3, r2
 8104404:	d108      	bne.n	8104418 <HAL_DMA_Abort_IT+0x18c>
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	681a      	ldr	r2, [r3, #0]
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	f022 0201 	bic.w	r2, r2, #1
 8104414:	601a      	str	r2, [r3, #0]
 8104416:	e147      	b.n	81046a8 <HAL_DMA_Abort_IT+0x41c>
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	681a      	ldr	r2, [r3, #0]
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	f022 0201 	bic.w	r2, r2, #1
 8104426:	601a      	str	r2, [r3, #0]
 8104428:	e13e      	b.n	81046a8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	681a      	ldr	r2, [r3, #0]
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	f022 020e 	bic.w	r2, r2, #14
 8104438:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	4a2b      	ldr	r2, [pc, #172]	; (81044ec <HAL_DMA_Abort_IT+0x260>)
 8104440:	4293      	cmp	r3, r2
 8104442:	d04a      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	4a29      	ldr	r2, [pc, #164]	; (81044f0 <HAL_DMA_Abort_IT+0x264>)
 810444a:	4293      	cmp	r3, r2
 810444c:	d045      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	4a28      	ldr	r2, [pc, #160]	; (81044f4 <HAL_DMA_Abort_IT+0x268>)
 8104454:	4293      	cmp	r3, r2
 8104456:	d040      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	4a26      	ldr	r2, [pc, #152]	; (81044f8 <HAL_DMA_Abort_IT+0x26c>)
 810445e:	4293      	cmp	r3, r2
 8104460:	d03b      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	4a25      	ldr	r2, [pc, #148]	; (81044fc <HAL_DMA_Abort_IT+0x270>)
 8104468:	4293      	cmp	r3, r2
 810446a:	d036      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	4a23      	ldr	r2, [pc, #140]	; (8104500 <HAL_DMA_Abort_IT+0x274>)
 8104472:	4293      	cmp	r3, r2
 8104474:	d031      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	4a22      	ldr	r2, [pc, #136]	; (8104504 <HAL_DMA_Abort_IT+0x278>)
 810447c:	4293      	cmp	r3, r2
 810447e:	d02c      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	4a20      	ldr	r2, [pc, #128]	; (8104508 <HAL_DMA_Abort_IT+0x27c>)
 8104486:	4293      	cmp	r3, r2
 8104488:	d027      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	681b      	ldr	r3, [r3, #0]
 810448e:	4a1f      	ldr	r2, [pc, #124]	; (810450c <HAL_DMA_Abort_IT+0x280>)
 8104490:	4293      	cmp	r3, r2
 8104492:	d022      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	4a1d      	ldr	r2, [pc, #116]	; (8104510 <HAL_DMA_Abort_IT+0x284>)
 810449a:	4293      	cmp	r3, r2
 810449c:	d01d      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	681b      	ldr	r3, [r3, #0]
 81044a2:	4a1c      	ldr	r2, [pc, #112]	; (8104514 <HAL_DMA_Abort_IT+0x288>)
 81044a4:	4293      	cmp	r3, r2
 81044a6:	d018      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	4a1a      	ldr	r2, [pc, #104]	; (8104518 <HAL_DMA_Abort_IT+0x28c>)
 81044ae:	4293      	cmp	r3, r2
 81044b0:	d013      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	4a19      	ldr	r2, [pc, #100]	; (810451c <HAL_DMA_Abort_IT+0x290>)
 81044b8:	4293      	cmp	r3, r2
 81044ba:	d00e      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	681b      	ldr	r3, [r3, #0]
 81044c0:	4a17      	ldr	r2, [pc, #92]	; (8104520 <HAL_DMA_Abort_IT+0x294>)
 81044c2:	4293      	cmp	r3, r2
 81044c4:	d009      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	4a16      	ldr	r2, [pc, #88]	; (8104524 <HAL_DMA_Abort_IT+0x298>)
 81044cc:	4293      	cmp	r3, r2
 81044ce:	d004      	beq.n	81044da <HAL_DMA_Abort_IT+0x24e>
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	4a14      	ldr	r2, [pc, #80]	; (8104528 <HAL_DMA_Abort_IT+0x29c>)
 81044d6:	4293      	cmp	r3, r2
 81044d8:	d128      	bne.n	810452c <HAL_DMA_Abort_IT+0x2a0>
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	681b      	ldr	r3, [r3, #0]
 81044de:	681a      	ldr	r2, [r3, #0]
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	681b      	ldr	r3, [r3, #0]
 81044e4:	f022 0201 	bic.w	r2, r2, #1
 81044e8:	601a      	str	r2, [r3, #0]
 81044ea:	e027      	b.n	810453c <HAL_DMA_Abort_IT+0x2b0>
 81044ec:	40020010 	.word	0x40020010
 81044f0:	40020028 	.word	0x40020028
 81044f4:	40020040 	.word	0x40020040
 81044f8:	40020058 	.word	0x40020058
 81044fc:	40020070 	.word	0x40020070
 8104500:	40020088 	.word	0x40020088
 8104504:	400200a0 	.word	0x400200a0
 8104508:	400200b8 	.word	0x400200b8
 810450c:	40020410 	.word	0x40020410
 8104510:	40020428 	.word	0x40020428
 8104514:	40020440 	.word	0x40020440
 8104518:	40020458 	.word	0x40020458
 810451c:	40020470 	.word	0x40020470
 8104520:	40020488 	.word	0x40020488
 8104524:	400204a0 	.word	0x400204a0
 8104528:	400204b8 	.word	0x400204b8
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	681a      	ldr	r2, [r3, #0]
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	f022 0201 	bic.w	r2, r2, #1
 810453a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	4a5c      	ldr	r2, [pc, #368]	; (81046b4 <HAL_DMA_Abort_IT+0x428>)
 8104542:	4293      	cmp	r3, r2
 8104544:	d072      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	4a5b      	ldr	r2, [pc, #364]	; (81046b8 <HAL_DMA_Abort_IT+0x42c>)
 810454c:	4293      	cmp	r3, r2
 810454e:	d06d      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	681b      	ldr	r3, [r3, #0]
 8104554:	4a59      	ldr	r2, [pc, #356]	; (81046bc <HAL_DMA_Abort_IT+0x430>)
 8104556:	4293      	cmp	r3, r2
 8104558:	d068      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	681b      	ldr	r3, [r3, #0]
 810455e:	4a58      	ldr	r2, [pc, #352]	; (81046c0 <HAL_DMA_Abort_IT+0x434>)
 8104560:	4293      	cmp	r3, r2
 8104562:	d063      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	4a56      	ldr	r2, [pc, #344]	; (81046c4 <HAL_DMA_Abort_IT+0x438>)
 810456a:	4293      	cmp	r3, r2
 810456c:	d05e      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a55      	ldr	r2, [pc, #340]	; (81046c8 <HAL_DMA_Abort_IT+0x43c>)
 8104574:	4293      	cmp	r3, r2
 8104576:	d059      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	4a53      	ldr	r2, [pc, #332]	; (81046cc <HAL_DMA_Abort_IT+0x440>)
 810457e:	4293      	cmp	r3, r2
 8104580:	d054      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	4a52      	ldr	r2, [pc, #328]	; (81046d0 <HAL_DMA_Abort_IT+0x444>)
 8104588:	4293      	cmp	r3, r2
 810458a:	d04f      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	4a50      	ldr	r2, [pc, #320]	; (81046d4 <HAL_DMA_Abort_IT+0x448>)
 8104592:	4293      	cmp	r3, r2
 8104594:	d04a      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	4a4f      	ldr	r2, [pc, #316]	; (81046d8 <HAL_DMA_Abort_IT+0x44c>)
 810459c:	4293      	cmp	r3, r2
 810459e:	d045      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	4a4d      	ldr	r2, [pc, #308]	; (81046dc <HAL_DMA_Abort_IT+0x450>)
 81045a6:	4293      	cmp	r3, r2
 81045a8:	d040      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	4a4c      	ldr	r2, [pc, #304]	; (81046e0 <HAL_DMA_Abort_IT+0x454>)
 81045b0:	4293      	cmp	r3, r2
 81045b2:	d03b      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	681b      	ldr	r3, [r3, #0]
 81045b8:	4a4a      	ldr	r2, [pc, #296]	; (81046e4 <HAL_DMA_Abort_IT+0x458>)
 81045ba:	4293      	cmp	r3, r2
 81045bc:	d036      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	681b      	ldr	r3, [r3, #0]
 81045c2:	4a49      	ldr	r2, [pc, #292]	; (81046e8 <HAL_DMA_Abort_IT+0x45c>)
 81045c4:	4293      	cmp	r3, r2
 81045c6:	d031      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	4a47      	ldr	r2, [pc, #284]	; (81046ec <HAL_DMA_Abort_IT+0x460>)
 81045ce:	4293      	cmp	r3, r2
 81045d0:	d02c      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	4a46      	ldr	r2, [pc, #280]	; (81046f0 <HAL_DMA_Abort_IT+0x464>)
 81045d8:	4293      	cmp	r3, r2
 81045da:	d027      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4a44      	ldr	r2, [pc, #272]	; (81046f4 <HAL_DMA_Abort_IT+0x468>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d022      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	681b      	ldr	r3, [r3, #0]
 81045ea:	4a43      	ldr	r2, [pc, #268]	; (81046f8 <HAL_DMA_Abort_IT+0x46c>)
 81045ec:	4293      	cmp	r3, r2
 81045ee:	d01d      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	4a41      	ldr	r2, [pc, #260]	; (81046fc <HAL_DMA_Abort_IT+0x470>)
 81045f6:	4293      	cmp	r3, r2
 81045f8:	d018      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 81045fa:	687b      	ldr	r3, [r7, #4]
 81045fc:	681b      	ldr	r3, [r3, #0]
 81045fe:	4a40      	ldr	r2, [pc, #256]	; (8104700 <HAL_DMA_Abort_IT+0x474>)
 8104600:	4293      	cmp	r3, r2
 8104602:	d013      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104604:	687b      	ldr	r3, [r7, #4]
 8104606:	681b      	ldr	r3, [r3, #0]
 8104608:	4a3e      	ldr	r2, [pc, #248]	; (8104704 <HAL_DMA_Abort_IT+0x478>)
 810460a:	4293      	cmp	r3, r2
 810460c:	d00e      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	4a3d      	ldr	r2, [pc, #244]	; (8104708 <HAL_DMA_Abort_IT+0x47c>)
 8104614:	4293      	cmp	r3, r2
 8104616:	d009      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	4a3b      	ldr	r2, [pc, #236]	; (810470c <HAL_DMA_Abort_IT+0x480>)
 810461e:	4293      	cmp	r3, r2
 8104620:	d004      	beq.n	810462c <HAL_DMA_Abort_IT+0x3a0>
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	4a3a      	ldr	r2, [pc, #232]	; (8104710 <HAL_DMA_Abort_IT+0x484>)
 8104628:	4293      	cmp	r3, r2
 810462a:	d101      	bne.n	8104630 <HAL_DMA_Abort_IT+0x3a4>
 810462c:	2301      	movs	r3, #1
 810462e:	e000      	b.n	8104632 <HAL_DMA_Abort_IT+0x3a6>
 8104630:	2300      	movs	r3, #0
 8104632:	2b00      	cmp	r3, #0
 8104634:	d028      	beq.n	8104688 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810463a:	681a      	ldr	r2, [r3, #0]
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8104644:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810464a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810464c:	687b      	ldr	r3, [r7, #4]
 810464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104650:	f003 031f 	and.w	r3, r3, #31
 8104654:	2201      	movs	r2, #1
 8104656:	409a      	lsls	r2, r3
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104660:	687a      	ldr	r2, [r7, #4]
 8104662:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104664:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8104666:	687b      	ldr	r3, [r7, #4]
 8104668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810466a:	2b00      	cmp	r3, #0
 810466c:	d00c      	beq.n	8104688 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104672:	681a      	ldr	r2, [r3, #0]
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810467c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104682:	687a      	ldr	r2, [r7, #4]
 8104684:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8104686:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	2200      	movs	r2, #0
 810468c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	2201      	movs	r2, #1
 8104694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810469c:	2b00      	cmp	r3, #0
 810469e:	d003      	beq.n	81046a8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81046a4:	6878      	ldr	r0, [r7, #4]
 81046a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81046a8:	2300      	movs	r3, #0
}
 81046aa:	4618      	mov	r0, r3
 81046ac:	3710      	adds	r7, #16
 81046ae:	46bd      	mov	sp, r7
 81046b0:	bd80      	pop	{r7, pc}
 81046b2:	bf00      	nop
 81046b4:	40020010 	.word	0x40020010
 81046b8:	40020028 	.word	0x40020028
 81046bc:	40020040 	.word	0x40020040
 81046c0:	40020058 	.word	0x40020058
 81046c4:	40020070 	.word	0x40020070
 81046c8:	40020088 	.word	0x40020088
 81046cc:	400200a0 	.word	0x400200a0
 81046d0:	400200b8 	.word	0x400200b8
 81046d4:	40020410 	.word	0x40020410
 81046d8:	40020428 	.word	0x40020428
 81046dc:	40020440 	.word	0x40020440
 81046e0:	40020458 	.word	0x40020458
 81046e4:	40020470 	.word	0x40020470
 81046e8:	40020488 	.word	0x40020488
 81046ec:	400204a0 	.word	0x400204a0
 81046f0:	400204b8 	.word	0x400204b8
 81046f4:	58025408 	.word	0x58025408
 81046f8:	5802541c 	.word	0x5802541c
 81046fc:	58025430 	.word	0x58025430
 8104700:	58025444 	.word	0x58025444
 8104704:	58025458 	.word	0x58025458
 8104708:	5802546c 	.word	0x5802546c
 810470c:	58025480 	.word	0x58025480
 8104710:	58025494 	.word	0x58025494

08104714 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8104714:	b580      	push	{r7, lr}
 8104716:	b08a      	sub	sp, #40	; 0x28
 8104718:	af00      	add	r7, sp, #0
 810471a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 810471c:	2300      	movs	r3, #0
 810471e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8104720:	4b67      	ldr	r3, [pc, #412]	; (81048c0 <HAL_DMA_IRQHandler+0x1ac>)
 8104722:	681b      	ldr	r3, [r3, #0]
 8104724:	4a67      	ldr	r2, [pc, #412]	; (81048c4 <HAL_DMA_IRQHandler+0x1b0>)
 8104726:	fba2 2303 	umull	r2, r3, r2, r3
 810472a:	0a9b      	lsrs	r3, r3, #10
 810472c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104732:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104738:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810473a:	6a3b      	ldr	r3, [r7, #32]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8104740:	69fb      	ldr	r3, [r7, #28]
 8104742:	681b      	ldr	r3, [r3, #0]
 8104744:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	4a5f      	ldr	r2, [pc, #380]	; (81048c8 <HAL_DMA_IRQHandler+0x1b4>)
 810474c:	4293      	cmp	r3, r2
 810474e:	d04a      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	4a5d      	ldr	r2, [pc, #372]	; (81048cc <HAL_DMA_IRQHandler+0x1b8>)
 8104756:	4293      	cmp	r3, r2
 8104758:	d045      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	4a5c      	ldr	r2, [pc, #368]	; (81048d0 <HAL_DMA_IRQHandler+0x1bc>)
 8104760:	4293      	cmp	r3, r2
 8104762:	d040      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4a5a      	ldr	r2, [pc, #360]	; (81048d4 <HAL_DMA_IRQHandler+0x1c0>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d03b      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	4a59      	ldr	r2, [pc, #356]	; (81048d8 <HAL_DMA_IRQHandler+0x1c4>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d036      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	4a57      	ldr	r2, [pc, #348]	; (81048dc <HAL_DMA_IRQHandler+0x1c8>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d031      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	681b      	ldr	r3, [r3, #0]
 8104786:	4a56      	ldr	r2, [pc, #344]	; (81048e0 <HAL_DMA_IRQHandler+0x1cc>)
 8104788:	4293      	cmp	r3, r2
 810478a:	d02c      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	4a54      	ldr	r2, [pc, #336]	; (81048e4 <HAL_DMA_IRQHandler+0x1d0>)
 8104792:	4293      	cmp	r3, r2
 8104794:	d027      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	4a53      	ldr	r2, [pc, #332]	; (81048e8 <HAL_DMA_IRQHandler+0x1d4>)
 810479c:	4293      	cmp	r3, r2
 810479e:	d022      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	4a51      	ldr	r2, [pc, #324]	; (81048ec <HAL_DMA_IRQHandler+0x1d8>)
 81047a6:	4293      	cmp	r3, r2
 81047a8:	d01d      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	4a50      	ldr	r2, [pc, #320]	; (81048f0 <HAL_DMA_IRQHandler+0x1dc>)
 81047b0:	4293      	cmp	r3, r2
 81047b2:	d018      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	4a4e      	ldr	r2, [pc, #312]	; (81048f4 <HAL_DMA_IRQHandler+0x1e0>)
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d013      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	4a4d      	ldr	r2, [pc, #308]	; (81048f8 <HAL_DMA_IRQHandler+0x1e4>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d00e      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a4b      	ldr	r2, [pc, #300]	; (81048fc <HAL_DMA_IRQHandler+0x1e8>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d009      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a4a      	ldr	r2, [pc, #296]	; (8104900 <HAL_DMA_IRQHandler+0x1ec>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d004      	beq.n	81047e6 <HAL_DMA_IRQHandler+0xd2>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a48      	ldr	r2, [pc, #288]	; (8104904 <HAL_DMA_IRQHandler+0x1f0>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d101      	bne.n	81047ea <HAL_DMA_IRQHandler+0xd6>
 81047e6:	2301      	movs	r3, #1
 81047e8:	e000      	b.n	81047ec <HAL_DMA_IRQHandler+0xd8>
 81047ea:	2300      	movs	r3, #0
 81047ec:	2b00      	cmp	r3, #0
 81047ee:	f000 842b 	beq.w	8105048 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047f6:	f003 031f 	and.w	r3, r3, #31
 81047fa:	2208      	movs	r2, #8
 81047fc:	409a      	lsls	r2, r3
 81047fe:	69bb      	ldr	r3, [r7, #24]
 8104800:	4013      	ands	r3, r2
 8104802:	2b00      	cmp	r3, #0
 8104804:	f000 80a2 	beq.w	810494c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	4a2e      	ldr	r2, [pc, #184]	; (81048c8 <HAL_DMA_IRQHandler+0x1b4>)
 810480e:	4293      	cmp	r3, r2
 8104810:	d04a      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	4a2d      	ldr	r2, [pc, #180]	; (81048cc <HAL_DMA_IRQHandler+0x1b8>)
 8104818:	4293      	cmp	r3, r2
 810481a:	d045      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	681b      	ldr	r3, [r3, #0]
 8104820:	4a2b      	ldr	r2, [pc, #172]	; (81048d0 <HAL_DMA_IRQHandler+0x1bc>)
 8104822:	4293      	cmp	r3, r2
 8104824:	d040      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	681b      	ldr	r3, [r3, #0]
 810482a:	4a2a      	ldr	r2, [pc, #168]	; (81048d4 <HAL_DMA_IRQHandler+0x1c0>)
 810482c:	4293      	cmp	r3, r2
 810482e:	d03b      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104830:	687b      	ldr	r3, [r7, #4]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	4a28      	ldr	r2, [pc, #160]	; (81048d8 <HAL_DMA_IRQHandler+0x1c4>)
 8104836:	4293      	cmp	r3, r2
 8104838:	d036      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	681b      	ldr	r3, [r3, #0]
 810483e:	4a27      	ldr	r2, [pc, #156]	; (81048dc <HAL_DMA_IRQHandler+0x1c8>)
 8104840:	4293      	cmp	r3, r2
 8104842:	d031      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	4a25      	ldr	r2, [pc, #148]	; (81048e0 <HAL_DMA_IRQHandler+0x1cc>)
 810484a:	4293      	cmp	r3, r2
 810484c:	d02c      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	4a24      	ldr	r2, [pc, #144]	; (81048e4 <HAL_DMA_IRQHandler+0x1d0>)
 8104854:	4293      	cmp	r3, r2
 8104856:	d027      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	4a22      	ldr	r2, [pc, #136]	; (81048e8 <HAL_DMA_IRQHandler+0x1d4>)
 810485e:	4293      	cmp	r3, r2
 8104860:	d022      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	4a21      	ldr	r2, [pc, #132]	; (81048ec <HAL_DMA_IRQHandler+0x1d8>)
 8104868:	4293      	cmp	r3, r2
 810486a:	d01d      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	4a1f      	ldr	r2, [pc, #124]	; (81048f0 <HAL_DMA_IRQHandler+0x1dc>)
 8104872:	4293      	cmp	r3, r2
 8104874:	d018      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	681b      	ldr	r3, [r3, #0]
 810487a:	4a1e      	ldr	r2, [pc, #120]	; (81048f4 <HAL_DMA_IRQHandler+0x1e0>)
 810487c:	4293      	cmp	r3, r2
 810487e:	d013      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	681b      	ldr	r3, [r3, #0]
 8104884:	4a1c      	ldr	r2, [pc, #112]	; (81048f8 <HAL_DMA_IRQHandler+0x1e4>)
 8104886:	4293      	cmp	r3, r2
 8104888:	d00e      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	681b      	ldr	r3, [r3, #0]
 810488e:	4a1b      	ldr	r2, [pc, #108]	; (81048fc <HAL_DMA_IRQHandler+0x1e8>)
 8104890:	4293      	cmp	r3, r2
 8104892:	d009      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	681b      	ldr	r3, [r3, #0]
 8104898:	4a19      	ldr	r2, [pc, #100]	; (8104900 <HAL_DMA_IRQHandler+0x1ec>)
 810489a:	4293      	cmp	r3, r2
 810489c:	d004      	beq.n	81048a8 <HAL_DMA_IRQHandler+0x194>
 810489e:	687b      	ldr	r3, [r7, #4]
 81048a0:	681b      	ldr	r3, [r3, #0]
 81048a2:	4a18      	ldr	r2, [pc, #96]	; (8104904 <HAL_DMA_IRQHandler+0x1f0>)
 81048a4:	4293      	cmp	r3, r2
 81048a6:	d12f      	bne.n	8104908 <HAL_DMA_IRQHandler+0x1f4>
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	681b      	ldr	r3, [r3, #0]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	f003 0304 	and.w	r3, r3, #4
 81048b2:	2b00      	cmp	r3, #0
 81048b4:	bf14      	ite	ne
 81048b6:	2301      	movne	r3, #1
 81048b8:	2300      	moveq	r3, #0
 81048ba:	b2db      	uxtb	r3, r3
 81048bc:	e02e      	b.n	810491c <HAL_DMA_IRQHandler+0x208>
 81048be:	bf00      	nop
 81048c0:	10000000 	.word	0x10000000
 81048c4:	1b4e81b5 	.word	0x1b4e81b5
 81048c8:	40020010 	.word	0x40020010
 81048cc:	40020028 	.word	0x40020028
 81048d0:	40020040 	.word	0x40020040
 81048d4:	40020058 	.word	0x40020058
 81048d8:	40020070 	.word	0x40020070
 81048dc:	40020088 	.word	0x40020088
 81048e0:	400200a0 	.word	0x400200a0
 81048e4:	400200b8 	.word	0x400200b8
 81048e8:	40020410 	.word	0x40020410
 81048ec:	40020428 	.word	0x40020428
 81048f0:	40020440 	.word	0x40020440
 81048f4:	40020458 	.word	0x40020458
 81048f8:	40020470 	.word	0x40020470
 81048fc:	40020488 	.word	0x40020488
 8104900:	400204a0 	.word	0x400204a0
 8104904:	400204b8 	.word	0x400204b8
 8104908:	687b      	ldr	r3, [r7, #4]
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	f003 0308 	and.w	r3, r3, #8
 8104912:	2b00      	cmp	r3, #0
 8104914:	bf14      	ite	ne
 8104916:	2301      	movne	r3, #1
 8104918:	2300      	moveq	r3, #0
 810491a:	b2db      	uxtb	r3, r3
 810491c:	2b00      	cmp	r3, #0
 810491e:	d015      	beq.n	810494c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	681a      	ldr	r2, [r3, #0]
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	f022 0204 	bic.w	r2, r2, #4
 810492e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104934:	f003 031f 	and.w	r3, r3, #31
 8104938:	2208      	movs	r2, #8
 810493a:	409a      	lsls	r2, r3
 810493c:	6a3b      	ldr	r3, [r7, #32]
 810493e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104944:	f043 0201 	orr.w	r2, r3, #1
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104950:	f003 031f 	and.w	r3, r3, #31
 8104954:	69ba      	ldr	r2, [r7, #24]
 8104956:	fa22 f303 	lsr.w	r3, r2, r3
 810495a:	f003 0301 	and.w	r3, r3, #1
 810495e:	2b00      	cmp	r3, #0
 8104960:	d06e      	beq.n	8104a40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	4a69      	ldr	r2, [pc, #420]	; (8104b0c <HAL_DMA_IRQHandler+0x3f8>)
 8104968:	4293      	cmp	r3, r2
 810496a:	d04a      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	4a67      	ldr	r2, [pc, #412]	; (8104b10 <HAL_DMA_IRQHandler+0x3fc>)
 8104972:	4293      	cmp	r3, r2
 8104974:	d045      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	4a66      	ldr	r2, [pc, #408]	; (8104b14 <HAL_DMA_IRQHandler+0x400>)
 810497c:	4293      	cmp	r3, r2
 810497e:	d040      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	681b      	ldr	r3, [r3, #0]
 8104984:	4a64      	ldr	r2, [pc, #400]	; (8104b18 <HAL_DMA_IRQHandler+0x404>)
 8104986:	4293      	cmp	r3, r2
 8104988:	d03b      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	681b      	ldr	r3, [r3, #0]
 810498e:	4a63      	ldr	r2, [pc, #396]	; (8104b1c <HAL_DMA_IRQHandler+0x408>)
 8104990:	4293      	cmp	r3, r2
 8104992:	d036      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	681b      	ldr	r3, [r3, #0]
 8104998:	4a61      	ldr	r2, [pc, #388]	; (8104b20 <HAL_DMA_IRQHandler+0x40c>)
 810499a:	4293      	cmp	r3, r2
 810499c:	d031      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	4a60      	ldr	r2, [pc, #384]	; (8104b24 <HAL_DMA_IRQHandler+0x410>)
 81049a4:	4293      	cmp	r3, r2
 81049a6:	d02c      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	681b      	ldr	r3, [r3, #0]
 81049ac:	4a5e      	ldr	r2, [pc, #376]	; (8104b28 <HAL_DMA_IRQHandler+0x414>)
 81049ae:	4293      	cmp	r3, r2
 81049b0:	d027      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	681b      	ldr	r3, [r3, #0]
 81049b6:	4a5d      	ldr	r2, [pc, #372]	; (8104b2c <HAL_DMA_IRQHandler+0x418>)
 81049b8:	4293      	cmp	r3, r2
 81049ba:	d022      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049bc:	687b      	ldr	r3, [r7, #4]
 81049be:	681b      	ldr	r3, [r3, #0]
 81049c0:	4a5b      	ldr	r2, [pc, #364]	; (8104b30 <HAL_DMA_IRQHandler+0x41c>)
 81049c2:	4293      	cmp	r3, r2
 81049c4:	d01d      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	4a5a      	ldr	r2, [pc, #360]	; (8104b34 <HAL_DMA_IRQHandler+0x420>)
 81049cc:	4293      	cmp	r3, r2
 81049ce:	d018      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	4a58      	ldr	r2, [pc, #352]	; (8104b38 <HAL_DMA_IRQHandler+0x424>)
 81049d6:	4293      	cmp	r3, r2
 81049d8:	d013      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	681b      	ldr	r3, [r3, #0]
 81049de:	4a57      	ldr	r2, [pc, #348]	; (8104b3c <HAL_DMA_IRQHandler+0x428>)
 81049e0:	4293      	cmp	r3, r2
 81049e2:	d00e      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049e4:	687b      	ldr	r3, [r7, #4]
 81049e6:	681b      	ldr	r3, [r3, #0]
 81049e8:	4a55      	ldr	r2, [pc, #340]	; (8104b40 <HAL_DMA_IRQHandler+0x42c>)
 81049ea:	4293      	cmp	r3, r2
 81049ec:	d009      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	681b      	ldr	r3, [r3, #0]
 81049f2:	4a54      	ldr	r2, [pc, #336]	; (8104b44 <HAL_DMA_IRQHandler+0x430>)
 81049f4:	4293      	cmp	r3, r2
 81049f6:	d004      	beq.n	8104a02 <HAL_DMA_IRQHandler+0x2ee>
 81049f8:	687b      	ldr	r3, [r7, #4]
 81049fa:	681b      	ldr	r3, [r3, #0]
 81049fc:	4a52      	ldr	r2, [pc, #328]	; (8104b48 <HAL_DMA_IRQHandler+0x434>)
 81049fe:	4293      	cmp	r3, r2
 8104a00:	d10a      	bne.n	8104a18 <HAL_DMA_IRQHandler+0x304>
 8104a02:	687b      	ldr	r3, [r7, #4]
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	695b      	ldr	r3, [r3, #20]
 8104a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104a0c:	2b00      	cmp	r3, #0
 8104a0e:	bf14      	ite	ne
 8104a10:	2301      	movne	r3, #1
 8104a12:	2300      	moveq	r3, #0
 8104a14:	b2db      	uxtb	r3, r3
 8104a16:	e003      	b.n	8104a20 <HAL_DMA_IRQHandler+0x30c>
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	2300      	movs	r3, #0
 8104a20:	2b00      	cmp	r3, #0
 8104a22:	d00d      	beq.n	8104a40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a28:	f003 031f 	and.w	r3, r3, #31
 8104a2c:	2201      	movs	r2, #1
 8104a2e:	409a      	lsls	r2, r3
 8104a30:	6a3b      	ldr	r3, [r7, #32]
 8104a32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a38:	f043 0202 	orr.w	r2, r3, #2
 8104a3c:	687b      	ldr	r3, [r7, #4]
 8104a3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a44:	f003 031f 	and.w	r3, r3, #31
 8104a48:	2204      	movs	r2, #4
 8104a4a:	409a      	lsls	r2, r3
 8104a4c:	69bb      	ldr	r3, [r7, #24]
 8104a4e:	4013      	ands	r3, r2
 8104a50:	2b00      	cmp	r3, #0
 8104a52:	f000 808f 	beq.w	8104b74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	4a2c      	ldr	r2, [pc, #176]	; (8104b0c <HAL_DMA_IRQHandler+0x3f8>)
 8104a5c:	4293      	cmp	r3, r2
 8104a5e:	d04a      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	4a2a      	ldr	r2, [pc, #168]	; (8104b10 <HAL_DMA_IRQHandler+0x3fc>)
 8104a66:	4293      	cmp	r3, r2
 8104a68:	d045      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104a6a:	687b      	ldr	r3, [r7, #4]
 8104a6c:	681b      	ldr	r3, [r3, #0]
 8104a6e:	4a29      	ldr	r2, [pc, #164]	; (8104b14 <HAL_DMA_IRQHandler+0x400>)
 8104a70:	4293      	cmp	r3, r2
 8104a72:	d040      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	681b      	ldr	r3, [r3, #0]
 8104a78:	4a27      	ldr	r2, [pc, #156]	; (8104b18 <HAL_DMA_IRQHandler+0x404>)
 8104a7a:	4293      	cmp	r3, r2
 8104a7c:	d03b      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	4a26      	ldr	r2, [pc, #152]	; (8104b1c <HAL_DMA_IRQHandler+0x408>)
 8104a84:	4293      	cmp	r3, r2
 8104a86:	d036      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104a88:	687b      	ldr	r3, [r7, #4]
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	4a24      	ldr	r2, [pc, #144]	; (8104b20 <HAL_DMA_IRQHandler+0x40c>)
 8104a8e:	4293      	cmp	r3, r2
 8104a90:	d031      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104a92:	687b      	ldr	r3, [r7, #4]
 8104a94:	681b      	ldr	r3, [r3, #0]
 8104a96:	4a23      	ldr	r2, [pc, #140]	; (8104b24 <HAL_DMA_IRQHandler+0x410>)
 8104a98:	4293      	cmp	r3, r2
 8104a9a:	d02c      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	4a21      	ldr	r2, [pc, #132]	; (8104b28 <HAL_DMA_IRQHandler+0x414>)
 8104aa2:	4293      	cmp	r3, r2
 8104aa4:	d027      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104aa6:	687b      	ldr	r3, [r7, #4]
 8104aa8:	681b      	ldr	r3, [r3, #0]
 8104aaa:	4a20      	ldr	r2, [pc, #128]	; (8104b2c <HAL_DMA_IRQHandler+0x418>)
 8104aac:	4293      	cmp	r3, r2
 8104aae:	d022      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	4a1e      	ldr	r2, [pc, #120]	; (8104b30 <HAL_DMA_IRQHandler+0x41c>)
 8104ab6:	4293      	cmp	r3, r2
 8104ab8:	d01d      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	4a1d      	ldr	r2, [pc, #116]	; (8104b34 <HAL_DMA_IRQHandler+0x420>)
 8104ac0:	4293      	cmp	r3, r2
 8104ac2:	d018      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	681b      	ldr	r3, [r3, #0]
 8104ac8:	4a1b      	ldr	r2, [pc, #108]	; (8104b38 <HAL_DMA_IRQHandler+0x424>)
 8104aca:	4293      	cmp	r3, r2
 8104acc:	d013      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	4a1a      	ldr	r2, [pc, #104]	; (8104b3c <HAL_DMA_IRQHandler+0x428>)
 8104ad4:	4293      	cmp	r3, r2
 8104ad6:	d00e      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104ad8:	687b      	ldr	r3, [r7, #4]
 8104ada:	681b      	ldr	r3, [r3, #0]
 8104adc:	4a18      	ldr	r2, [pc, #96]	; (8104b40 <HAL_DMA_IRQHandler+0x42c>)
 8104ade:	4293      	cmp	r3, r2
 8104ae0:	d009      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	4a17      	ldr	r2, [pc, #92]	; (8104b44 <HAL_DMA_IRQHandler+0x430>)
 8104ae8:	4293      	cmp	r3, r2
 8104aea:	d004      	beq.n	8104af6 <HAL_DMA_IRQHandler+0x3e2>
 8104aec:	687b      	ldr	r3, [r7, #4]
 8104aee:	681b      	ldr	r3, [r3, #0]
 8104af0:	4a15      	ldr	r2, [pc, #84]	; (8104b48 <HAL_DMA_IRQHandler+0x434>)
 8104af2:	4293      	cmp	r3, r2
 8104af4:	d12a      	bne.n	8104b4c <HAL_DMA_IRQHandler+0x438>
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	681b      	ldr	r3, [r3, #0]
 8104afc:	f003 0302 	and.w	r3, r3, #2
 8104b00:	2b00      	cmp	r3, #0
 8104b02:	bf14      	ite	ne
 8104b04:	2301      	movne	r3, #1
 8104b06:	2300      	moveq	r3, #0
 8104b08:	b2db      	uxtb	r3, r3
 8104b0a:	e023      	b.n	8104b54 <HAL_DMA_IRQHandler+0x440>
 8104b0c:	40020010 	.word	0x40020010
 8104b10:	40020028 	.word	0x40020028
 8104b14:	40020040 	.word	0x40020040
 8104b18:	40020058 	.word	0x40020058
 8104b1c:	40020070 	.word	0x40020070
 8104b20:	40020088 	.word	0x40020088
 8104b24:	400200a0 	.word	0x400200a0
 8104b28:	400200b8 	.word	0x400200b8
 8104b2c:	40020410 	.word	0x40020410
 8104b30:	40020428 	.word	0x40020428
 8104b34:	40020440 	.word	0x40020440
 8104b38:	40020458 	.word	0x40020458
 8104b3c:	40020470 	.word	0x40020470
 8104b40:	40020488 	.word	0x40020488
 8104b44:	400204a0 	.word	0x400204a0
 8104b48:	400204b8 	.word	0x400204b8
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	2300      	movs	r3, #0
 8104b54:	2b00      	cmp	r3, #0
 8104b56:	d00d      	beq.n	8104b74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b5c:	f003 031f 	and.w	r3, r3, #31
 8104b60:	2204      	movs	r2, #4
 8104b62:	409a      	lsls	r2, r3
 8104b64:	6a3b      	ldr	r3, [r7, #32]
 8104b66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b6c:	f043 0204 	orr.w	r2, r3, #4
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104b74:	687b      	ldr	r3, [r7, #4]
 8104b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104b78:	f003 031f 	and.w	r3, r3, #31
 8104b7c:	2210      	movs	r2, #16
 8104b7e:	409a      	lsls	r2, r3
 8104b80:	69bb      	ldr	r3, [r7, #24]
 8104b82:	4013      	ands	r3, r2
 8104b84:	2b00      	cmp	r3, #0
 8104b86:	f000 80a6 	beq.w	8104cd6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	4a85      	ldr	r2, [pc, #532]	; (8104da4 <HAL_DMA_IRQHandler+0x690>)
 8104b90:	4293      	cmp	r3, r2
 8104b92:	d04a      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	4a83      	ldr	r2, [pc, #524]	; (8104da8 <HAL_DMA_IRQHandler+0x694>)
 8104b9a:	4293      	cmp	r3, r2
 8104b9c:	d045      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	4a82      	ldr	r2, [pc, #520]	; (8104dac <HAL_DMA_IRQHandler+0x698>)
 8104ba4:	4293      	cmp	r3, r2
 8104ba6:	d040      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	4a80      	ldr	r2, [pc, #512]	; (8104db0 <HAL_DMA_IRQHandler+0x69c>)
 8104bae:	4293      	cmp	r3, r2
 8104bb0:	d03b      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	4a7f      	ldr	r2, [pc, #508]	; (8104db4 <HAL_DMA_IRQHandler+0x6a0>)
 8104bb8:	4293      	cmp	r3, r2
 8104bba:	d036      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	4a7d      	ldr	r2, [pc, #500]	; (8104db8 <HAL_DMA_IRQHandler+0x6a4>)
 8104bc2:	4293      	cmp	r3, r2
 8104bc4:	d031      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	681b      	ldr	r3, [r3, #0]
 8104bca:	4a7c      	ldr	r2, [pc, #496]	; (8104dbc <HAL_DMA_IRQHandler+0x6a8>)
 8104bcc:	4293      	cmp	r3, r2
 8104bce:	d02c      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	681b      	ldr	r3, [r3, #0]
 8104bd4:	4a7a      	ldr	r2, [pc, #488]	; (8104dc0 <HAL_DMA_IRQHandler+0x6ac>)
 8104bd6:	4293      	cmp	r3, r2
 8104bd8:	d027      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104bda:	687b      	ldr	r3, [r7, #4]
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	4a79      	ldr	r2, [pc, #484]	; (8104dc4 <HAL_DMA_IRQHandler+0x6b0>)
 8104be0:	4293      	cmp	r3, r2
 8104be2:	d022      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	4a77      	ldr	r2, [pc, #476]	; (8104dc8 <HAL_DMA_IRQHandler+0x6b4>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d01d      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	4a76      	ldr	r2, [pc, #472]	; (8104dcc <HAL_DMA_IRQHandler+0x6b8>)
 8104bf4:	4293      	cmp	r3, r2
 8104bf6:	d018      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104bf8:	687b      	ldr	r3, [r7, #4]
 8104bfa:	681b      	ldr	r3, [r3, #0]
 8104bfc:	4a74      	ldr	r2, [pc, #464]	; (8104dd0 <HAL_DMA_IRQHandler+0x6bc>)
 8104bfe:	4293      	cmp	r3, r2
 8104c00:	d013      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	4a73      	ldr	r2, [pc, #460]	; (8104dd4 <HAL_DMA_IRQHandler+0x6c0>)
 8104c08:	4293      	cmp	r3, r2
 8104c0a:	d00e      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	4a71      	ldr	r2, [pc, #452]	; (8104dd8 <HAL_DMA_IRQHandler+0x6c4>)
 8104c12:	4293      	cmp	r3, r2
 8104c14:	d009      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104c16:	687b      	ldr	r3, [r7, #4]
 8104c18:	681b      	ldr	r3, [r3, #0]
 8104c1a:	4a70      	ldr	r2, [pc, #448]	; (8104ddc <HAL_DMA_IRQHandler+0x6c8>)
 8104c1c:	4293      	cmp	r3, r2
 8104c1e:	d004      	beq.n	8104c2a <HAL_DMA_IRQHandler+0x516>
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	4a6e      	ldr	r2, [pc, #440]	; (8104de0 <HAL_DMA_IRQHandler+0x6cc>)
 8104c26:	4293      	cmp	r3, r2
 8104c28:	d10a      	bne.n	8104c40 <HAL_DMA_IRQHandler+0x52c>
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	f003 0308 	and.w	r3, r3, #8
 8104c34:	2b00      	cmp	r3, #0
 8104c36:	bf14      	ite	ne
 8104c38:	2301      	movne	r3, #1
 8104c3a:	2300      	moveq	r3, #0
 8104c3c:	b2db      	uxtb	r3, r3
 8104c3e:	e009      	b.n	8104c54 <HAL_DMA_IRQHandler+0x540>
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	f003 0304 	and.w	r3, r3, #4
 8104c4a:	2b00      	cmp	r3, #0
 8104c4c:	bf14      	ite	ne
 8104c4e:	2301      	movne	r3, #1
 8104c50:	2300      	moveq	r3, #0
 8104c52:	b2db      	uxtb	r3, r3
 8104c54:	2b00      	cmp	r3, #0
 8104c56:	d03e      	beq.n	8104cd6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104c5c:	f003 031f 	and.w	r3, r3, #31
 8104c60:	2210      	movs	r2, #16
 8104c62:	409a      	lsls	r2, r3
 8104c64:	6a3b      	ldr	r3, [r7, #32]
 8104c66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	681b      	ldr	r3, [r3, #0]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104c72:	2b00      	cmp	r3, #0
 8104c74:	d018      	beq.n	8104ca8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104c80:	2b00      	cmp	r3, #0
 8104c82:	d108      	bne.n	8104c96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d024      	beq.n	8104cd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8104c8c:	687b      	ldr	r3, [r7, #4]
 8104c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c90:	6878      	ldr	r0, [r7, #4]
 8104c92:	4798      	blx	r3
 8104c94:	e01f      	b.n	8104cd6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104c9a:	2b00      	cmp	r3, #0
 8104c9c:	d01b      	beq.n	8104cd6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104ca2:	6878      	ldr	r0, [r7, #4]
 8104ca4:	4798      	blx	r3
 8104ca6:	e016      	b.n	8104cd6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	681b      	ldr	r3, [r3, #0]
 8104cac:	681b      	ldr	r3, [r3, #0]
 8104cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104cb2:	2b00      	cmp	r3, #0
 8104cb4:	d107      	bne.n	8104cc6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104cb6:	687b      	ldr	r3, [r7, #4]
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	681a      	ldr	r2, [r3, #0]
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	f022 0208 	bic.w	r2, r2, #8
 8104cc4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8104cc6:	687b      	ldr	r3, [r7, #4]
 8104cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104cca:	2b00      	cmp	r3, #0
 8104ccc:	d003      	beq.n	8104cd6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104cd2:	6878      	ldr	r0, [r7, #4]
 8104cd4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104cda:	f003 031f 	and.w	r3, r3, #31
 8104cde:	2220      	movs	r2, #32
 8104ce0:	409a      	lsls	r2, r3
 8104ce2:	69bb      	ldr	r3, [r7, #24]
 8104ce4:	4013      	ands	r3, r2
 8104ce6:	2b00      	cmp	r3, #0
 8104ce8:	f000 8110 	beq.w	8104f0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	4a2c      	ldr	r2, [pc, #176]	; (8104da4 <HAL_DMA_IRQHandler+0x690>)
 8104cf2:	4293      	cmp	r3, r2
 8104cf4:	d04a      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	4a2b      	ldr	r2, [pc, #172]	; (8104da8 <HAL_DMA_IRQHandler+0x694>)
 8104cfc:	4293      	cmp	r3, r2
 8104cfe:	d045      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d00:	687b      	ldr	r3, [r7, #4]
 8104d02:	681b      	ldr	r3, [r3, #0]
 8104d04:	4a29      	ldr	r2, [pc, #164]	; (8104dac <HAL_DMA_IRQHandler+0x698>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d040      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d0a:	687b      	ldr	r3, [r7, #4]
 8104d0c:	681b      	ldr	r3, [r3, #0]
 8104d0e:	4a28      	ldr	r2, [pc, #160]	; (8104db0 <HAL_DMA_IRQHandler+0x69c>)
 8104d10:	4293      	cmp	r3, r2
 8104d12:	d03b      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	4a26      	ldr	r2, [pc, #152]	; (8104db4 <HAL_DMA_IRQHandler+0x6a0>)
 8104d1a:	4293      	cmp	r3, r2
 8104d1c:	d036      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	4a25      	ldr	r2, [pc, #148]	; (8104db8 <HAL_DMA_IRQHandler+0x6a4>)
 8104d24:	4293      	cmp	r3, r2
 8104d26:	d031      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	4a23      	ldr	r2, [pc, #140]	; (8104dbc <HAL_DMA_IRQHandler+0x6a8>)
 8104d2e:	4293      	cmp	r3, r2
 8104d30:	d02c      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	681b      	ldr	r3, [r3, #0]
 8104d36:	4a22      	ldr	r2, [pc, #136]	; (8104dc0 <HAL_DMA_IRQHandler+0x6ac>)
 8104d38:	4293      	cmp	r3, r2
 8104d3a:	d027      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	4a20      	ldr	r2, [pc, #128]	; (8104dc4 <HAL_DMA_IRQHandler+0x6b0>)
 8104d42:	4293      	cmp	r3, r2
 8104d44:	d022      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d46:	687b      	ldr	r3, [r7, #4]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	4a1f      	ldr	r2, [pc, #124]	; (8104dc8 <HAL_DMA_IRQHandler+0x6b4>)
 8104d4c:	4293      	cmp	r3, r2
 8104d4e:	d01d      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d50:	687b      	ldr	r3, [r7, #4]
 8104d52:	681b      	ldr	r3, [r3, #0]
 8104d54:	4a1d      	ldr	r2, [pc, #116]	; (8104dcc <HAL_DMA_IRQHandler+0x6b8>)
 8104d56:	4293      	cmp	r3, r2
 8104d58:	d018      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	4a1c      	ldr	r2, [pc, #112]	; (8104dd0 <HAL_DMA_IRQHandler+0x6bc>)
 8104d60:	4293      	cmp	r3, r2
 8104d62:	d013      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	4a1a      	ldr	r2, [pc, #104]	; (8104dd4 <HAL_DMA_IRQHandler+0x6c0>)
 8104d6a:	4293      	cmp	r3, r2
 8104d6c:	d00e      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	681b      	ldr	r3, [r3, #0]
 8104d72:	4a19      	ldr	r2, [pc, #100]	; (8104dd8 <HAL_DMA_IRQHandler+0x6c4>)
 8104d74:	4293      	cmp	r3, r2
 8104d76:	d009      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	4a17      	ldr	r2, [pc, #92]	; (8104ddc <HAL_DMA_IRQHandler+0x6c8>)
 8104d7e:	4293      	cmp	r3, r2
 8104d80:	d004      	beq.n	8104d8c <HAL_DMA_IRQHandler+0x678>
 8104d82:	687b      	ldr	r3, [r7, #4]
 8104d84:	681b      	ldr	r3, [r3, #0]
 8104d86:	4a16      	ldr	r2, [pc, #88]	; (8104de0 <HAL_DMA_IRQHandler+0x6cc>)
 8104d88:	4293      	cmp	r3, r2
 8104d8a:	d12b      	bne.n	8104de4 <HAL_DMA_IRQHandler+0x6d0>
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	681b      	ldr	r3, [r3, #0]
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	f003 0310 	and.w	r3, r3, #16
 8104d96:	2b00      	cmp	r3, #0
 8104d98:	bf14      	ite	ne
 8104d9a:	2301      	movne	r3, #1
 8104d9c:	2300      	moveq	r3, #0
 8104d9e:	b2db      	uxtb	r3, r3
 8104da0:	e02a      	b.n	8104df8 <HAL_DMA_IRQHandler+0x6e4>
 8104da2:	bf00      	nop
 8104da4:	40020010 	.word	0x40020010
 8104da8:	40020028 	.word	0x40020028
 8104dac:	40020040 	.word	0x40020040
 8104db0:	40020058 	.word	0x40020058
 8104db4:	40020070 	.word	0x40020070
 8104db8:	40020088 	.word	0x40020088
 8104dbc:	400200a0 	.word	0x400200a0
 8104dc0:	400200b8 	.word	0x400200b8
 8104dc4:	40020410 	.word	0x40020410
 8104dc8:	40020428 	.word	0x40020428
 8104dcc:	40020440 	.word	0x40020440
 8104dd0:	40020458 	.word	0x40020458
 8104dd4:	40020470 	.word	0x40020470
 8104dd8:	40020488 	.word	0x40020488
 8104ddc:	400204a0 	.word	0x400204a0
 8104de0:	400204b8 	.word	0x400204b8
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	681b      	ldr	r3, [r3, #0]
 8104de8:	681b      	ldr	r3, [r3, #0]
 8104dea:	f003 0302 	and.w	r3, r3, #2
 8104dee:	2b00      	cmp	r3, #0
 8104df0:	bf14      	ite	ne
 8104df2:	2301      	movne	r3, #1
 8104df4:	2300      	moveq	r3, #0
 8104df6:	b2db      	uxtb	r3, r3
 8104df8:	2b00      	cmp	r3, #0
 8104dfa:	f000 8087 	beq.w	8104f0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104dfe:	687b      	ldr	r3, [r7, #4]
 8104e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e02:	f003 031f 	and.w	r3, r3, #31
 8104e06:	2220      	movs	r2, #32
 8104e08:	409a      	lsls	r2, r3
 8104e0a:	6a3b      	ldr	r3, [r7, #32]
 8104e0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8104e0e:	687b      	ldr	r3, [r7, #4]
 8104e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104e14:	b2db      	uxtb	r3, r3
 8104e16:	2b04      	cmp	r3, #4
 8104e18:	d139      	bne.n	8104e8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	681a      	ldr	r2, [r3, #0]
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	681b      	ldr	r3, [r3, #0]
 8104e24:	f022 0216 	bic.w	r2, r2, #22
 8104e28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	695a      	ldr	r2, [r3, #20]
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8104e38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104e3e:	2b00      	cmp	r3, #0
 8104e40:	d103      	bne.n	8104e4a <HAL_DMA_IRQHandler+0x736>
 8104e42:	687b      	ldr	r3, [r7, #4]
 8104e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104e46:	2b00      	cmp	r3, #0
 8104e48:	d007      	beq.n	8104e5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8104e4a:	687b      	ldr	r3, [r7, #4]
 8104e4c:	681b      	ldr	r3, [r3, #0]
 8104e4e:	681a      	ldr	r2, [r3, #0]
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	681b      	ldr	r3, [r3, #0]
 8104e54:	f022 0208 	bic.w	r2, r2, #8
 8104e58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e5e:	f003 031f 	and.w	r3, r3, #31
 8104e62:	223f      	movs	r2, #63	; 0x3f
 8104e64:	409a      	lsls	r2, r3
 8104e66:	6a3b      	ldr	r3, [r7, #32]
 8104e68:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8104e6a:	687b      	ldr	r3, [r7, #4]
 8104e6c:	2200      	movs	r2, #0
 8104e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104e72:	687b      	ldr	r3, [r7, #4]
 8104e74:	2201      	movs	r2, #1
 8104e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e7e:	2b00      	cmp	r3, #0
 8104e80:	f000 834a 	beq.w	8105518 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e88:	6878      	ldr	r0, [r7, #4]
 8104e8a:	4798      	blx	r3
          }
          return;
 8104e8c:	e344      	b.n	8105518 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	681b      	ldr	r3, [r3, #0]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104e98:	2b00      	cmp	r3, #0
 8104e9a:	d018      	beq.n	8104ece <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	681b      	ldr	r3, [r3, #0]
 8104ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104ea6:	2b00      	cmp	r3, #0
 8104ea8:	d108      	bne.n	8104ebc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8104eaa:	687b      	ldr	r3, [r7, #4]
 8104eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d02c      	beq.n	8104f0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104eb6:	6878      	ldr	r0, [r7, #4]
 8104eb8:	4798      	blx	r3
 8104eba:	e027      	b.n	8104f0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104ec0:	2b00      	cmp	r3, #0
 8104ec2:	d023      	beq.n	8104f0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104ec8:	6878      	ldr	r0, [r7, #4]
 8104eca:	4798      	blx	r3
 8104ecc:	e01e      	b.n	8104f0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	681b      	ldr	r3, [r3, #0]
 8104ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	d10f      	bne.n	8104efc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	681a      	ldr	r2, [r3, #0]
 8104ee2:	687b      	ldr	r3, [r7, #4]
 8104ee4:	681b      	ldr	r3, [r3, #0]
 8104ee6:	f022 0210 	bic.w	r2, r2, #16
 8104eea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	2200      	movs	r2, #0
 8104ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	2201      	movs	r2, #1
 8104ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f00:	2b00      	cmp	r3, #0
 8104f02:	d003      	beq.n	8104f0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f08:	6878      	ldr	r0, [r7, #4]
 8104f0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f10:	2b00      	cmp	r3, #0
 8104f12:	f000 8306 	beq.w	8105522 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f1a:	f003 0301 	and.w	r3, r3, #1
 8104f1e:	2b00      	cmp	r3, #0
 8104f20:	f000 8088 	beq.w	8105034 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	2204      	movs	r2, #4
 8104f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	681b      	ldr	r3, [r3, #0]
 8104f30:	4a7a      	ldr	r2, [pc, #488]	; (810511c <HAL_DMA_IRQHandler+0xa08>)
 8104f32:	4293      	cmp	r3, r2
 8104f34:	d04a      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	4a79      	ldr	r2, [pc, #484]	; (8105120 <HAL_DMA_IRQHandler+0xa0c>)
 8104f3c:	4293      	cmp	r3, r2
 8104f3e:	d045      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	4a77      	ldr	r2, [pc, #476]	; (8105124 <HAL_DMA_IRQHandler+0xa10>)
 8104f46:	4293      	cmp	r3, r2
 8104f48:	d040      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	681b      	ldr	r3, [r3, #0]
 8104f4e:	4a76      	ldr	r2, [pc, #472]	; (8105128 <HAL_DMA_IRQHandler+0xa14>)
 8104f50:	4293      	cmp	r3, r2
 8104f52:	d03b      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	681b      	ldr	r3, [r3, #0]
 8104f58:	4a74      	ldr	r2, [pc, #464]	; (810512c <HAL_DMA_IRQHandler+0xa18>)
 8104f5a:	4293      	cmp	r3, r2
 8104f5c:	d036      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f5e:	687b      	ldr	r3, [r7, #4]
 8104f60:	681b      	ldr	r3, [r3, #0]
 8104f62:	4a73      	ldr	r2, [pc, #460]	; (8105130 <HAL_DMA_IRQHandler+0xa1c>)
 8104f64:	4293      	cmp	r3, r2
 8104f66:	d031      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	4a71      	ldr	r2, [pc, #452]	; (8105134 <HAL_DMA_IRQHandler+0xa20>)
 8104f6e:	4293      	cmp	r3, r2
 8104f70:	d02c      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	681b      	ldr	r3, [r3, #0]
 8104f76:	4a70      	ldr	r2, [pc, #448]	; (8105138 <HAL_DMA_IRQHandler+0xa24>)
 8104f78:	4293      	cmp	r3, r2
 8104f7a:	d027      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	4a6e      	ldr	r2, [pc, #440]	; (810513c <HAL_DMA_IRQHandler+0xa28>)
 8104f82:	4293      	cmp	r3, r2
 8104f84:	d022      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f86:	687b      	ldr	r3, [r7, #4]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	4a6d      	ldr	r2, [pc, #436]	; (8105140 <HAL_DMA_IRQHandler+0xa2c>)
 8104f8c:	4293      	cmp	r3, r2
 8104f8e:	d01d      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f90:	687b      	ldr	r3, [r7, #4]
 8104f92:	681b      	ldr	r3, [r3, #0]
 8104f94:	4a6b      	ldr	r2, [pc, #428]	; (8105144 <HAL_DMA_IRQHandler+0xa30>)
 8104f96:	4293      	cmp	r3, r2
 8104f98:	d018      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	681b      	ldr	r3, [r3, #0]
 8104f9e:	4a6a      	ldr	r2, [pc, #424]	; (8105148 <HAL_DMA_IRQHandler+0xa34>)
 8104fa0:	4293      	cmp	r3, r2
 8104fa2:	d013      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	681b      	ldr	r3, [r3, #0]
 8104fa8:	4a68      	ldr	r2, [pc, #416]	; (810514c <HAL_DMA_IRQHandler+0xa38>)
 8104faa:	4293      	cmp	r3, r2
 8104fac:	d00e      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	681b      	ldr	r3, [r3, #0]
 8104fb2:	4a67      	ldr	r2, [pc, #412]	; (8105150 <HAL_DMA_IRQHandler+0xa3c>)
 8104fb4:	4293      	cmp	r3, r2
 8104fb6:	d009      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	681b      	ldr	r3, [r3, #0]
 8104fbc:	4a65      	ldr	r2, [pc, #404]	; (8105154 <HAL_DMA_IRQHandler+0xa40>)
 8104fbe:	4293      	cmp	r3, r2
 8104fc0:	d004      	beq.n	8104fcc <HAL_DMA_IRQHandler+0x8b8>
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	4a64      	ldr	r2, [pc, #400]	; (8105158 <HAL_DMA_IRQHandler+0xa44>)
 8104fc8:	4293      	cmp	r3, r2
 8104fca:	d108      	bne.n	8104fde <HAL_DMA_IRQHandler+0x8ca>
 8104fcc:	687b      	ldr	r3, [r7, #4]
 8104fce:	681b      	ldr	r3, [r3, #0]
 8104fd0:	681a      	ldr	r2, [r3, #0]
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	f022 0201 	bic.w	r2, r2, #1
 8104fda:	601a      	str	r2, [r3, #0]
 8104fdc:	e007      	b.n	8104fee <HAL_DMA_IRQHandler+0x8da>
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	681a      	ldr	r2, [r3, #0]
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	681b      	ldr	r3, [r3, #0]
 8104fe8:	f022 0201 	bic.w	r2, r2, #1
 8104fec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8104fee:	68fb      	ldr	r3, [r7, #12]
 8104ff0:	3301      	adds	r3, #1
 8104ff2:	60fb      	str	r3, [r7, #12]
 8104ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104ff6:	429a      	cmp	r2, r3
 8104ff8:	d307      	bcc.n	810500a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	681b      	ldr	r3, [r3, #0]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	f003 0301 	and.w	r3, r3, #1
 8105004:	2b00      	cmp	r3, #0
 8105006:	d1f2      	bne.n	8104fee <HAL_DMA_IRQHandler+0x8da>
 8105008:	e000      	b.n	810500c <HAL_DMA_IRQHandler+0x8f8>
            break;
 810500a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	2200      	movs	r2, #0
 8105010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	681b      	ldr	r3, [r3, #0]
 810501a:	f003 0301 	and.w	r3, r3, #1
 810501e:	2b00      	cmp	r3, #0
 8105020:	d004      	beq.n	810502c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	2203      	movs	r2, #3
 8105026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 810502a:	e003      	b.n	8105034 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 810502c:	687b      	ldr	r3, [r7, #4]
 810502e:	2201      	movs	r2, #1
 8105030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8105034:	687b      	ldr	r3, [r7, #4]
 8105036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105038:	2b00      	cmp	r3, #0
 810503a:	f000 8272 	beq.w	8105522 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105042:	6878      	ldr	r0, [r7, #4]
 8105044:	4798      	blx	r3
 8105046:	e26c      	b.n	8105522 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	681b      	ldr	r3, [r3, #0]
 810504c:	4a43      	ldr	r2, [pc, #268]	; (810515c <HAL_DMA_IRQHandler+0xa48>)
 810504e:	4293      	cmp	r3, r2
 8105050:	d022      	beq.n	8105098 <HAL_DMA_IRQHandler+0x984>
 8105052:	687b      	ldr	r3, [r7, #4]
 8105054:	681b      	ldr	r3, [r3, #0]
 8105056:	4a42      	ldr	r2, [pc, #264]	; (8105160 <HAL_DMA_IRQHandler+0xa4c>)
 8105058:	4293      	cmp	r3, r2
 810505a:	d01d      	beq.n	8105098 <HAL_DMA_IRQHandler+0x984>
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	4a40      	ldr	r2, [pc, #256]	; (8105164 <HAL_DMA_IRQHandler+0xa50>)
 8105062:	4293      	cmp	r3, r2
 8105064:	d018      	beq.n	8105098 <HAL_DMA_IRQHandler+0x984>
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	681b      	ldr	r3, [r3, #0]
 810506a:	4a3f      	ldr	r2, [pc, #252]	; (8105168 <HAL_DMA_IRQHandler+0xa54>)
 810506c:	4293      	cmp	r3, r2
 810506e:	d013      	beq.n	8105098 <HAL_DMA_IRQHandler+0x984>
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	4a3d      	ldr	r2, [pc, #244]	; (810516c <HAL_DMA_IRQHandler+0xa58>)
 8105076:	4293      	cmp	r3, r2
 8105078:	d00e      	beq.n	8105098 <HAL_DMA_IRQHandler+0x984>
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	4a3c      	ldr	r2, [pc, #240]	; (8105170 <HAL_DMA_IRQHandler+0xa5c>)
 8105080:	4293      	cmp	r3, r2
 8105082:	d009      	beq.n	8105098 <HAL_DMA_IRQHandler+0x984>
 8105084:	687b      	ldr	r3, [r7, #4]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	4a3a      	ldr	r2, [pc, #232]	; (8105174 <HAL_DMA_IRQHandler+0xa60>)
 810508a:	4293      	cmp	r3, r2
 810508c:	d004      	beq.n	8105098 <HAL_DMA_IRQHandler+0x984>
 810508e:	687b      	ldr	r3, [r7, #4]
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	4a39      	ldr	r2, [pc, #228]	; (8105178 <HAL_DMA_IRQHandler+0xa64>)
 8105094:	4293      	cmp	r3, r2
 8105096:	d101      	bne.n	810509c <HAL_DMA_IRQHandler+0x988>
 8105098:	2301      	movs	r3, #1
 810509a:	e000      	b.n	810509e <HAL_DMA_IRQHandler+0x98a>
 810509c:	2300      	movs	r3, #0
 810509e:	2b00      	cmp	r3, #0
 81050a0:	f000 823f 	beq.w	8105522 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	681b      	ldr	r3, [r3, #0]
 81050aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81050ac:	687b      	ldr	r3, [r7, #4]
 81050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050b0:	f003 031f 	and.w	r3, r3, #31
 81050b4:	2204      	movs	r2, #4
 81050b6:	409a      	lsls	r2, r3
 81050b8:	697b      	ldr	r3, [r7, #20]
 81050ba:	4013      	ands	r3, r2
 81050bc:	2b00      	cmp	r3, #0
 81050be:	f000 80cd 	beq.w	810525c <HAL_DMA_IRQHandler+0xb48>
 81050c2:	693b      	ldr	r3, [r7, #16]
 81050c4:	f003 0304 	and.w	r3, r3, #4
 81050c8:	2b00      	cmp	r3, #0
 81050ca:	f000 80c7 	beq.w	810525c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050d2:	f003 031f 	and.w	r3, r3, #31
 81050d6:	2204      	movs	r2, #4
 81050d8:	409a      	lsls	r2, r3
 81050da:	69fb      	ldr	r3, [r7, #28]
 81050dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81050de:	693b      	ldr	r3, [r7, #16]
 81050e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81050e4:	2b00      	cmp	r3, #0
 81050e6:	d049      	beq.n	810517c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81050e8:	693b      	ldr	r3, [r7, #16]
 81050ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81050ee:	2b00      	cmp	r3, #0
 81050f0:	d109      	bne.n	8105106 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81050f6:	2b00      	cmp	r3, #0
 81050f8:	f000 8210 	beq.w	810551c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105100:	6878      	ldr	r0, [r7, #4]
 8105102:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105104:	e20a      	b.n	810551c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810510a:	2b00      	cmp	r3, #0
 810510c:	f000 8206 	beq.w	810551c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8105110:	687b      	ldr	r3, [r7, #4]
 8105112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105114:	6878      	ldr	r0, [r7, #4]
 8105116:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105118:	e200      	b.n	810551c <HAL_DMA_IRQHandler+0xe08>
 810511a:	bf00      	nop
 810511c:	40020010 	.word	0x40020010
 8105120:	40020028 	.word	0x40020028
 8105124:	40020040 	.word	0x40020040
 8105128:	40020058 	.word	0x40020058
 810512c:	40020070 	.word	0x40020070
 8105130:	40020088 	.word	0x40020088
 8105134:	400200a0 	.word	0x400200a0
 8105138:	400200b8 	.word	0x400200b8
 810513c:	40020410 	.word	0x40020410
 8105140:	40020428 	.word	0x40020428
 8105144:	40020440 	.word	0x40020440
 8105148:	40020458 	.word	0x40020458
 810514c:	40020470 	.word	0x40020470
 8105150:	40020488 	.word	0x40020488
 8105154:	400204a0 	.word	0x400204a0
 8105158:	400204b8 	.word	0x400204b8
 810515c:	58025408 	.word	0x58025408
 8105160:	5802541c 	.word	0x5802541c
 8105164:	58025430 	.word	0x58025430
 8105168:	58025444 	.word	0x58025444
 810516c:	58025458 	.word	0x58025458
 8105170:	5802546c 	.word	0x5802546c
 8105174:	58025480 	.word	0x58025480
 8105178:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810517c:	693b      	ldr	r3, [r7, #16]
 810517e:	f003 0320 	and.w	r3, r3, #32
 8105182:	2b00      	cmp	r3, #0
 8105184:	d160      	bne.n	8105248 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	4a8c      	ldr	r2, [pc, #560]	; (81053bc <HAL_DMA_IRQHandler+0xca8>)
 810518c:	4293      	cmp	r3, r2
 810518e:	d04a      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	4a8a      	ldr	r2, [pc, #552]	; (81053c0 <HAL_DMA_IRQHandler+0xcac>)
 8105196:	4293      	cmp	r3, r2
 8105198:	d045      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	4a89      	ldr	r2, [pc, #548]	; (81053c4 <HAL_DMA_IRQHandler+0xcb0>)
 81051a0:	4293      	cmp	r3, r2
 81051a2:	d040      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	4a87      	ldr	r2, [pc, #540]	; (81053c8 <HAL_DMA_IRQHandler+0xcb4>)
 81051aa:	4293      	cmp	r3, r2
 81051ac:	d03b      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	4a86      	ldr	r2, [pc, #536]	; (81053cc <HAL_DMA_IRQHandler+0xcb8>)
 81051b4:	4293      	cmp	r3, r2
 81051b6:	d036      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	4a84      	ldr	r2, [pc, #528]	; (81053d0 <HAL_DMA_IRQHandler+0xcbc>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d031      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	4a83      	ldr	r2, [pc, #524]	; (81053d4 <HAL_DMA_IRQHandler+0xcc0>)
 81051c8:	4293      	cmp	r3, r2
 81051ca:	d02c      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	4a81      	ldr	r2, [pc, #516]	; (81053d8 <HAL_DMA_IRQHandler+0xcc4>)
 81051d2:	4293      	cmp	r3, r2
 81051d4:	d027      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	4a80      	ldr	r2, [pc, #512]	; (81053dc <HAL_DMA_IRQHandler+0xcc8>)
 81051dc:	4293      	cmp	r3, r2
 81051de:	d022      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	4a7e      	ldr	r2, [pc, #504]	; (81053e0 <HAL_DMA_IRQHandler+0xccc>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d01d      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	4a7d      	ldr	r2, [pc, #500]	; (81053e4 <HAL_DMA_IRQHandler+0xcd0>)
 81051f0:	4293      	cmp	r3, r2
 81051f2:	d018      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	681b      	ldr	r3, [r3, #0]
 81051f8:	4a7b      	ldr	r2, [pc, #492]	; (81053e8 <HAL_DMA_IRQHandler+0xcd4>)
 81051fa:	4293      	cmp	r3, r2
 81051fc:	d013      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	4a7a      	ldr	r2, [pc, #488]	; (81053ec <HAL_DMA_IRQHandler+0xcd8>)
 8105204:	4293      	cmp	r3, r2
 8105206:	d00e      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	681b      	ldr	r3, [r3, #0]
 810520c:	4a78      	ldr	r2, [pc, #480]	; (81053f0 <HAL_DMA_IRQHandler+0xcdc>)
 810520e:	4293      	cmp	r3, r2
 8105210:	d009      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	4a77      	ldr	r2, [pc, #476]	; (81053f4 <HAL_DMA_IRQHandler+0xce0>)
 8105218:	4293      	cmp	r3, r2
 810521a:	d004      	beq.n	8105226 <HAL_DMA_IRQHandler+0xb12>
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	681b      	ldr	r3, [r3, #0]
 8105220:	4a75      	ldr	r2, [pc, #468]	; (81053f8 <HAL_DMA_IRQHandler+0xce4>)
 8105222:	4293      	cmp	r3, r2
 8105224:	d108      	bne.n	8105238 <HAL_DMA_IRQHandler+0xb24>
 8105226:	687b      	ldr	r3, [r7, #4]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	681a      	ldr	r2, [r3, #0]
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	f022 0208 	bic.w	r2, r2, #8
 8105234:	601a      	str	r2, [r3, #0]
 8105236:	e007      	b.n	8105248 <HAL_DMA_IRQHandler+0xb34>
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	681b      	ldr	r3, [r3, #0]
 810523c:	681a      	ldr	r2, [r3, #0]
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	f022 0204 	bic.w	r2, r2, #4
 8105246:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810524c:	2b00      	cmp	r3, #0
 810524e:	f000 8165 	beq.w	810551c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105256:	6878      	ldr	r0, [r7, #4]
 8105258:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810525a:	e15f      	b.n	810551c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105260:	f003 031f 	and.w	r3, r3, #31
 8105264:	2202      	movs	r2, #2
 8105266:	409a      	lsls	r2, r3
 8105268:	697b      	ldr	r3, [r7, #20]
 810526a:	4013      	ands	r3, r2
 810526c:	2b00      	cmp	r3, #0
 810526e:	f000 80c5 	beq.w	81053fc <HAL_DMA_IRQHandler+0xce8>
 8105272:	693b      	ldr	r3, [r7, #16]
 8105274:	f003 0302 	and.w	r3, r3, #2
 8105278:	2b00      	cmp	r3, #0
 810527a:	f000 80bf 	beq.w	81053fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 810527e:	687b      	ldr	r3, [r7, #4]
 8105280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105282:	f003 031f 	and.w	r3, r3, #31
 8105286:	2202      	movs	r2, #2
 8105288:	409a      	lsls	r2, r3
 810528a:	69fb      	ldr	r3, [r7, #28]
 810528c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810528e:	693b      	ldr	r3, [r7, #16]
 8105290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105294:	2b00      	cmp	r3, #0
 8105296:	d018      	beq.n	81052ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8105298:	693b      	ldr	r3, [r7, #16]
 810529a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810529e:	2b00      	cmp	r3, #0
 81052a0:	d109      	bne.n	81052b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81052a6:	2b00      	cmp	r3, #0
 81052a8:	f000 813a 	beq.w	8105520 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81052ac:	687b      	ldr	r3, [r7, #4]
 81052ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81052b0:	6878      	ldr	r0, [r7, #4]
 81052b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81052b4:	e134      	b.n	8105520 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81052ba:	2b00      	cmp	r3, #0
 81052bc:	f000 8130 	beq.w	8105520 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81052c4:	6878      	ldr	r0, [r7, #4]
 81052c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81052c8:	e12a      	b.n	8105520 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81052ca:	693b      	ldr	r3, [r7, #16]
 81052cc:	f003 0320 	and.w	r3, r3, #32
 81052d0:	2b00      	cmp	r3, #0
 81052d2:	d168      	bne.n	81053a6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	681b      	ldr	r3, [r3, #0]
 81052d8:	4a38      	ldr	r2, [pc, #224]	; (81053bc <HAL_DMA_IRQHandler+0xca8>)
 81052da:	4293      	cmp	r3, r2
 81052dc:	d04a      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	4a37      	ldr	r2, [pc, #220]	; (81053c0 <HAL_DMA_IRQHandler+0xcac>)
 81052e4:	4293      	cmp	r3, r2
 81052e6:	d045      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	681b      	ldr	r3, [r3, #0]
 81052ec:	4a35      	ldr	r2, [pc, #212]	; (81053c4 <HAL_DMA_IRQHandler+0xcb0>)
 81052ee:	4293      	cmp	r3, r2
 81052f0:	d040      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	681b      	ldr	r3, [r3, #0]
 81052f6:	4a34      	ldr	r2, [pc, #208]	; (81053c8 <HAL_DMA_IRQHandler+0xcb4>)
 81052f8:	4293      	cmp	r3, r2
 81052fa:	d03b      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	4a32      	ldr	r2, [pc, #200]	; (81053cc <HAL_DMA_IRQHandler+0xcb8>)
 8105302:	4293      	cmp	r3, r2
 8105304:	d036      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 8105306:	687b      	ldr	r3, [r7, #4]
 8105308:	681b      	ldr	r3, [r3, #0]
 810530a:	4a31      	ldr	r2, [pc, #196]	; (81053d0 <HAL_DMA_IRQHandler+0xcbc>)
 810530c:	4293      	cmp	r3, r2
 810530e:	d031      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	4a2f      	ldr	r2, [pc, #188]	; (81053d4 <HAL_DMA_IRQHandler+0xcc0>)
 8105316:	4293      	cmp	r3, r2
 8105318:	d02c      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	681b      	ldr	r3, [r3, #0]
 810531e:	4a2e      	ldr	r2, [pc, #184]	; (81053d8 <HAL_DMA_IRQHandler+0xcc4>)
 8105320:	4293      	cmp	r3, r2
 8105322:	d027      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	681b      	ldr	r3, [r3, #0]
 8105328:	4a2c      	ldr	r2, [pc, #176]	; (81053dc <HAL_DMA_IRQHandler+0xcc8>)
 810532a:	4293      	cmp	r3, r2
 810532c:	d022      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	4a2b      	ldr	r2, [pc, #172]	; (81053e0 <HAL_DMA_IRQHandler+0xccc>)
 8105334:	4293      	cmp	r3, r2
 8105336:	d01d      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	681b      	ldr	r3, [r3, #0]
 810533c:	4a29      	ldr	r2, [pc, #164]	; (81053e4 <HAL_DMA_IRQHandler+0xcd0>)
 810533e:	4293      	cmp	r3, r2
 8105340:	d018      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	4a28      	ldr	r2, [pc, #160]	; (81053e8 <HAL_DMA_IRQHandler+0xcd4>)
 8105348:	4293      	cmp	r3, r2
 810534a:	d013      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	681b      	ldr	r3, [r3, #0]
 8105350:	4a26      	ldr	r2, [pc, #152]	; (81053ec <HAL_DMA_IRQHandler+0xcd8>)
 8105352:	4293      	cmp	r3, r2
 8105354:	d00e      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 8105356:	687b      	ldr	r3, [r7, #4]
 8105358:	681b      	ldr	r3, [r3, #0]
 810535a:	4a25      	ldr	r2, [pc, #148]	; (81053f0 <HAL_DMA_IRQHandler+0xcdc>)
 810535c:	4293      	cmp	r3, r2
 810535e:	d009      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	4a23      	ldr	r2, [pc, #140]	; (81053f4 <HAL_DMA_IRQHandler+0xce0>)
 8105366:	4293      	cmp	r3, r2
 8105368:	d004      	beq.n	8105374 <HAL_DMA_IRQHandler+0xc60>
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	4a22      	ldr	r2, [pc, #136]	; (81053f8 <HAL_DMA_IRQHandler+0xce4>)
 8105370:	4293      	cmp	r3, r2
 8105372:	d108      	bne.n	8105386 <HAL_DMA_IRQHandler+0xc72>
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	681b      	ldr	r3, [r3, #0]
 8105378:	681a      	ldr	r2, [r3, #0]
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	f022 0214 	bic.w	r2, r2, #20
 8105382:	601a      	str	r2, [r3, #0]
 8105384:	e007      	b.n	8105396 <HAL_DMA_IRQHandler+0xc82>
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	681b      	ldr	r3, [r3, #0]
 810538a:	681a      	ldr	r2, [r3, #0]
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	681b      	ldr	r3, [r3, #0]
 8105390:	f022 020a 	bic.w	r2, r2, #10
 8105394:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8105396:	687b      	ldr	r3, [r7, #4]
 8105398:	2200      	movs	r2, #0
 810539a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	2201      	movs	r2, #1
 81053a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81053aa:	2b00      	cmp	r3, #0
 81053ac:	f000 80b8 	beq.w	8105520 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81053b4:	6878      	ldr	r0, [r7, #4]
 81053b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81053b8:	e0b2      	b.n	8105520 <HAL_DMA_IRQHandler+0xe0c>
 81053ba:	bf00      	nop
 81053bc:	40020010 	.word	0x40020010
 81053c0:	40020028 	.word	0x40020028
 81053c4:	40020040 	.word	0x40020040
 81053c8:	40020058 	.word	0x40020058
 81053cc:	40020070 	.word	0x40020070
 81053d0:	40020088 	.word	0x40020088
 81053d4:	400200a0 	.word	0x400200a0
 81053d8:	400200b8 	.word	0x400200b8
 81053dc:	40020410 	.word	0x40020410
 81053e0:	40020428 	.word	0x40020428
 81053e4:	40020440 	.word	0x40020440
 81053e8:	40020458 	.word	0x40020458
 81053ec:	40020470 	.word	0x40020470
 81053f0:	40020488 	.word	0x40020488
 81053f4:	400204a0 	.word	0x400204a0
 81053f8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105400:	f003 031f 	and.w	r3, r3, #31
 8105404:	2208      	movs	r2, #8
 8105406:	409a      	lsls	r2, r3
 8105408:	697b      	ldr	r3, [r7, #20]
 810540a:	4013      	ands	r3, r2
 810540c:	2b00      	cmp	r3, #0
 810540e:	f000 8088 	beq.w	8105522 <HAL_DMA_IRQHandler+0xe0e>
 8105412:	693b      	ldr	r3, [r7, #16]
 8105414:	f003 0308 	and.w	r3, r3, #8
 8105418:	2b00      	cmp	r3, #0
 810541a:	f000 8082 	beq.w	8105522 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	681b      	ldr	r3, [r3, #0]
 8105422:	4a41      	ldr	r2, [pc, #260]	; (8105528 <HAL_DMA_IRQHandler+0xe14>)
 8105424:	4293      	cmp	r3, r2
 8105426:	d04a      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105428:	687b      	ldr	r3, [r7, #4]
 810542a:	681b      	ldr	r3, [r3, #0]
 810542c:	4a3f      	ldr	r2, [pc, #252]	; (810552c <HAL_DMA_IRQHandler+0xe18>)
 810542e:	4293      	cmp	r3, r2
 8105430:	d045      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105432:	687b      	ldr	r3, [r7, #4]
 8105434:	681b      	ldr	r3, [r3, #0]
 8105436:	4a3e      	ldr	r2, [pc, #248]	; (8105530 <HAL_DMA_IRQHandler+0xe1c>)
 8105438:	4293      	cmp	r3, r2
 810543a:	d040      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 810543c:	687b      	ldr	r3, [r7, #4]
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	4a3c      	ldr	r2, [pc, #240]	; (8105534 <HAL_DMA_IRQHandler+0xe20>)
 8105442:	4293      	cmp	r3, r2
 8105444:	d03b      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105446:	687b      	ldr	r3, [r7, #4]
 8105448:	681b      	ldr	r3, [r3, #0]
 810544a:	4a3b      	ldr	r2, [pc, #236]	; (8105538 <HAL_DMA_IRQHandler+0xe24>)
 810544c:	4293      	cmp	r3, r2
 810544e:	d036      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105450:	687b      	ldr	r3, [r7, #4]
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	4a39      	ldr	r2, [pc, #228]	; (810553c <HAL_DMA_IRQHandler+0xe28>)
 8105456:	4293      	cmp	r3, r2
 8105458:	d031      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	4a38      	ldr	r2, [pc, #224]	; (8105540 <HAL_DMA_IRQHandler+0xe2c>)
 8105460:	4293      	cmp	r3, r2
 8105462:	d02c      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	4a36      	ldr	r2, [pc, #216]	; (8105544 <HAL_DMA_IRQHandler+0xe30>)
 810546a:	4293      	cmp	r3, r2
 810546c:	d027      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 810546e:	687b      	ldr	r3, [r7, #4]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	4a35      	ldr	r2, [pc, #212]	; (8105548 <HAL_DMA_IRQHandler+0xe34>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d022      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	4a33      	ldr	r2, [pc, #204]	; (810554c <HAL_DMA_IRQHandler+0xe38>)
 810547e:	4293      	cmp	r3, r2
 8105480:	d01d      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105482:	687b      	ldr	r3, [r7, #4]
 8105484:	681b      	ldr	r3, [r3, #0]
 8105486:	4a32      	ldr	r2, [pc, #200]	; (8105550 <HAL_DMA_IRQHandler+0xe3c>)
 8105488:	4293      	cmp	r3, r2
 810548a:	d018      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 810548c:	687b      	ldr	r3, [r7, #4]
 810548e:	681b      	ldr	r3, [r3, #0]
 8105490:	4a30      	ldr	r2, [pc, #192]	; (8105554 <HAL_DMA_IRQHandler+0xe40>)
 8105492:	4293      	cmp	r3, r2
 8105494:	d013      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 8105496:	687b      	ldr	r3, [r7, #4]
 8105498:	681b      	ldr	r3, [r3, #0]
 810549a:	4a2f      	ldr	r2, [pc, #188]	; (8105558 <HAL_DMA_IRQHandler+0xe44>)
 810549c:	4293      	cmp	r3, r2
 810549e:	d00e      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	4a2d      	ldr	r2, [pc, #180]	; (810555c <HAL_DMA_IRQHandler+0xe48>)
 81054a6:	4293      	cmp	r3, r2
 81054a8:	d009      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	4a2c      	ldr	r2, [pc, #176]	; (8105560 <HAL_DMA_IRQHandler+0xe4c>)
 81054b0:	4293      	cmp	r3, r2
 81054b2:	d004      	beq.n	81054be <HAL_DMA_IRQHandler+0xdaa>
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	681b      	ldr	r3, [r3, #0]
 81054b8:	4a2a      	ldr	r2, [pc, #168]	; (8105564 <HAL_DMA_IRQHandler+0xe50>)
 81054ba:	4293      	cmp	r3, r2
 81054bc:	d108      	bne.n	81054d0 <HAL_DMA_IRQHandler+0xdbc>
 81054be:	687b      	ldr	r3, [r7, #4]
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	681a      	ldr	r2, [r3, #0]
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	681b      	ldr	r3, [r3, #0]
 81054c8:	f022 021c 	bic.w	r2, r2, #28
 81054cc:	601a      	str	r2, [r3, #0]
 81054ce:	e007      	b.n	81054e0 <HAL_DMA_IRQHandler+0xdcc>
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	681a      	ldr	r2, [r3, #0]
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	681b      	ldr	r3, [r3, #0]
 81054da:	f022 020e 	bic.w	r2, r2, #14
 81054de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054e4:	f003 031f 	and.w	r3, r3, #31
 81054e8:	2201      	movs	r2, #1
 81054ea:	409a      	lsls	r2, r3
 81054ec:	69fb      	ldr	r3, [r7, #28]
 81054ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	2201      	movs	r2, #1
 81054f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	2200      	movs	r2, #0
 81054fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	2201      	movs	r2, #1
 8105502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810550a:	2b00      	cmp	r3, #0
 810550c:	d009      	beq.n	8105522 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105512:	6878      	ldr	r0, [r7, #4]
 8105514:	4798      	blx	r3
 8105516:	e004      	b.n	8105522 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8105518:	bf00      	nop
 810551a:	e002      	b.n	8105522 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810551c:	bf00      	nop
 810551e:	e000      	b.n	8105522 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8105520:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105522:	3728      	adds	r7, #40	; 0x28
 8105524:	46bd      	mov	sp, r7
 8105526:	bd80      	pop	{r7, pc}
 8105528:	40020010 	.word	0x40020010
 810552c:	40020028 	.word	0x40020028
 8105530:	40020040 	.word	0x40020040
 8105534:	40020058 	.word	0x40020058
 8105538:	40020070 	.word	0x40020070
 810553c:	40020088 	.word	0x40020088
 8105540:	400200a0 	.word	0x400200a0
 8105544:	400200b8 	.word	0x400200b8
 8105548:	40020410 	.word	0x40020410
 810554c:	40020428 	.word	0x40020428
 8105550:	40020440 	.word	0x40020440
 8105554:	40020458 	.word	0x40020458
 8105558:	40020470 	.word	0x40020470
 810555c:	40020488 	.word	0x40020488
 8105560:	400204a0 	.word	0x400204a0
 8105564:	400204b8 	.word	0x400204b8

08105568 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8105568:	b480      	push	{r7}
 810556a:	b085      	sub	sp, #20
 810556c:	af00      	add	r7, sp, #0
 810556e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	4a43      	ldr	r2, [pc, #268]	; (8105684 <DMA_CalcBaseAndBitshift+0x11c>)
 8105576:	4293      	cmp	r3, r2
 8105578:	d04a      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	4a42      	ldr	r2, [pc, #264]	; (8105688 <DMA_CalcBaseAndBitshift+0x120>)
 8105580:	4293      	cmp	r3, r2
 8105582:	d045      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 8105584:	687b      	ldr	r3, [r7, #4]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	4a40      	ldr	r2, [pc, #256]	; (810568c <DMA_CalcBaseAndBitshift+0x124>)
 810558a:	4293      	cmp	r3, r2
 810558c:	d040      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	4a3f      	ldr	r2, [pc, #252]	; (8105690 <DMA_CalcBaseAndBitshift+0x128>)
 8105594:	4293      	cmp	r3, r2
 8105596:	d03b      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	4a3d      	ldr	r2, [pc, #244]	; (8105694 <DMA_CalcBaseAndBitshift+0x12c>)
 810559e:	4293      	cmp	r3, r2
 81055a0:	d036      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	681b      	ldr	r3, [r3, #0]
 81055a6:	4a3c      	ldr	r2, [pc, #240]	; (8105698 <DMA_CalcBaseAndBitshift+0x130>)
 81055a8:	4293      	cmp	r3, r2
 81055aa:	d031      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055ac:	687b      	ldr	r3, [r7, #4]
 81055ae:	681b      	ldr	r3, [r3, #0]
 81055b0:	4a3a      	ldr	r2, [pc, #232]	; (810569c <DMA_CalcBaseAndBitshift+0x134>)
 81055b2:	4293      	cmp	r3, r2
 81055b4:	d02c      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055b6:	687b      	ldr	r3, [r7, #4]
 81055b8:	681b      	ldr	r3, [r3, #0]
 81055ba:	4a39      	ldr	r2, [pc, #228]	; (81056a0 <DMA_CalcBaseAndBitshift+0x138>)
 81055bc:	4293      	cmp	r3, r2
 81055be:	d027      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	4a37      	ldr	r2, [pc, #220]	; (81056a4 <DMA_CalcBaseAndBitshift+0x13c>)
 81055c6:	4293      	cmp	r3, r2
 81055c8:	d022      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	4a36      	ldr	r2, [pc, #216]	; (81056a8 <DMA_CalcBaseAndBitshift+0x140>)
 81055d0:	4293      	cmp	r3, r2
 81055d2:	d01d      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055d4:	687b      	ldr	r3, [r7, #4]
 81055d6:	681b      	ldr	r3, [r3, #0]
 81055d8:	4a34      	ldr	r2, [pc, #208]	; (81056ac <DMA_CalcBaseAndBitshift+0x144>)
 81055da:	4293      	cmp	r3, r2
 81055dc:	d018      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	4a33      	ldr	r2, [pc, #204]	; (81056b0 <DMA_CalcBaseAndBitshift+0x148>)
 81055e4:	4293      	cmp	r3, r2
 81055e6:	d013      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	4a31      	ldr	r2, [pc, #196]	; (81056b4 <DMA_CalcBaseAndBitshift+0x14c>)
 81055ee:	4293      	cmp	r3, r2
 81055f0:	d00e      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	681b      	ldr	r3, [r3, #0]
 81055f6:	4a30      	ldr	r2, [pc, #192]	; (81056b8 <DMA_CalcBaseAndBitshift+0x150>)
 81055f8:	4293      	cmp	r3, r2
 81055fa:	d009      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 81055fc:	687b      	ldr	r3, [r7, #4]
 81055fe:	681b      	ldr	r3, [r3, #0]
 8105600:	4a2e      	ldr	r2, [pc, #184]	; (81056bc <DMA_CalcBaseAndBitshift+0x154>)
 8105602:	4293      	cmp	r3, r2
 8105604:	d004      	beq.n	8105610 <DMA_CalcBaseAndBitshift+0xa8>
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	681b      	ldr	r3, [r3, #0]
 810560a:	4a2d      	ldr	r2, [pc, #180]	; (81056c0 <DMA_CalcBaseAndBitshift+0x158>)
 810560c:	4293      	cmp	r3, r2
 810560e:	d101      	bne.n	8105614 <DMA_CalcBaseAndBitshift+0xac>
 8105610:	2301      	movs	r3, #1
 8105612:	e000      	b.n	8105616 <DMA_CalcBaseAndBitshift+0xae>
 8105614:	2300      	movs	r3, #0
 8105616:	2b00      	cmp	r3, #0
 8105618:	d026      	beq.n	8105668 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	681b      	ldr	r3, [r3, #0]
 810561e:	b2db      	uxtb	r3, r3
 8105620:	3b10      	subs	r3, #16
 8105622:	4a28      	ldr	r2, [pc, #160]	; (81056c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8105624:	fba2 2303 	umull	r2, r3, r2, r3
 8105628:	091b      	lsrs	r3, r3, #4
 810562a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810562c:	68fb      	ldr	r3, [r7, #12]
 810562e:	f003 0307 	and.w	r3, r3, #7
 8105632:	4a25      	ldr	r2, [pc, #148]	; (81056c8 <DMA_CalcBaseAndBitshift+0x160>)
 8105634:	5cd3      	ldrb	r3, [r2, r3]
 8105636:	461a      	mov	r2, r3
 8105638:	687b      	ldr	r3, [r7, #4]
 810563a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 810563c:	68fb      	ldr	r3, [r7, #12]
 810563e:	2b03      	cmp	r3, #3
 8105640:	d909      	bls.n	8105656 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	681b      	ldr	r3, [r3, #0]
 8105646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810564a:	f023 0303 	bic.w	r3, r3, #3
 810564e:	1d1a      	adds	r2, r3, #4
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	659a      	str	r2, [r3, #88]	; 0x58
 8105654:	e00e      	b.n	8105674 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8105656:	687b      	ldr	r3, [r7, #4]
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810565e:	f023 0303 	bic.w	r3, r3, #3
 8105662:	687a      	ldr	r2, [r7, #4]
 8105664:	6593      	str	r3, [r2, #88]	; 0x58
 8105666:	e005      	b.n	8105674 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8105668:	687b      	ldr	r3, [r7, #4]
 810566a:	681b      	ldr	r3, [r3, #0]
 810566c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8105674:	687b      	ldr	r3, [r7, #4]
 8105676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8105678:	4618      	mov	r0, r3
 810567a:	3714      	adds	r7, #20
 810567c:	46bd      	mov	sp, r7
 810567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105682:	4770      	bx	lr
 8105684:	40020010 	.word	0x40020010
 8105688:	40020028 	.word	0x40020028
 810568c:	40020040 	.word	0x40020040
 8105690:	40020058 	.word	0x40020058
 8105694:	40020070 	.word	0x40020070
 8105698:	40020088 	.word	0x40020088
 810569c:	400200a0 	.word	0x400200a0
 81056a0:	400200b8 	.word	0x400200b8
 81056a4:	40020410 	.word	0x40020410
 81056a8:	40020428 	.word	0x40020428
 81056ac:	40020440 	.word	0x40020440
 81056b0:	40020458 	.word	0x40020458
 81056b4:	40020470 	.word	0x40020470
 81056b8:	40020488 	.word	0x40020488
 81056bc:	400204a0 	.word	0x400204a0
 81056c0:	400204b8 	.word	0x400204b8
 81056c4:	aaaaaaab 	.word	0xaaaaaaab
 81056c8:	081138bc 	.word	0x081138bc

081056cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81056cc:	b480      	push	{r7}
 81056ce:	b085      	sub	sp, #20
 81056d0:	af00      	add	r7, sp, #0
 81056d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81056d4:	2300      	movs	r3, #0
 81056d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	699b      	ldr	r3, [r3, #24]
 81056dc:	2b00      	cmp	r3, #0
 81056de:	d120      	bne.n	8105722 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81056e0:	687b      	ldr	r3, [r7, #4]
 81056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056e4:	2b03      	cmp	r3, #3
 81056e6:	d858      	bhi.n	810579a <DMA_CheckFifoParam+0xce>
 81056e8:	a201      	add	r2, pc, #4	; (adr r2, 81056f0 <DMA_CheckFifoParam+0x24>)
 81056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056ee:	bf00      	nop
 81056f0:	08105701 	.word	0x08105701
 81056f4:	08105713 	.word	0x08105713
 81056f8:	08105701 	.word	0x08105701
 81056fc:	0810579b 	.word	0x0810579b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8105700:	687b      	ldr	r3, [r7, #4]
 8105702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105708:	2b00      	cmp	r3, #0
 810570a:	d048      	beq.n	810579e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 810570c:	2301      	movs	r3, #1
 810570e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105710:	e045      	b.n	810579e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810571a:	d142      	bne.n	81057a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 810571c:	2301      	movs	r3, #1
 810571e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105720:	e03f      	b.n	81057a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	699b      	ldr	r3, [r3, #24]
 8105726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810572a:	d123      	bne.n	8105774 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105730:	2b03      	cmp	r3, #3
 8105732:	d838      	bhi.n	81057a6 <DMA_CheckFifoParam+0xda>
 8105734:	a201      	add	r2, pc, #4	; (adr r2, 810573c <DMA_CheckFifoParam+0x70>)
 8105736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810573a:	bf00      	nop
 810573c:	0810574d 	.word	0x0810574d
 8105740:	08105753 	.word	0x08105753
 8105744:	0810574d 	.word	0x0810574d
 8105748:	08105765 	.word	0x08105765
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810574c:	2301      	movs	r3, #1
 810574e:	73fb      	strb	r3, [r7, #15]
        break;
 8105750:	e030      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8105752:	687b      	ldr	r3, [r7, #4]
 8105754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810575a:	2b00      	cmp	r3, #0
 810575c:	d025      	beq.n	81057aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810575e:	2301      	movs	r3, #1
 8105760:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105762:	e022      	b.n	81057aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810576c:	d11f      	bne.n	81057ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810576e:	2301      	movs	r3, #1
 8105770:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105772:	e01c      	b.n	81057ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8105774:	687b      	ldr	r3, [r7, #4]
 8105776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105778:	2b02      	cmp	r3, #2
 810577a:	d902      	bls.n	8105782 <DMA_CheckFifoParam+0xb6>
 810577c:	2b03      	cmp	r3, #3
 810577e:	d003      	beq.n	8105788 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8105780:	e018      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8105782:	2301      	movs	r3, #1
 8105784:	73fb      	strb	r3, [r7, #15]
        break;
 8105786:	e015      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810578c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105790:	2b00      	cmp	r3, #0
 8105792:	d00e      	beq.n	81057b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8105794:	2301      	movs	r3, #1
 8105796:	73fb      	strb	r3, [r7, #15]
    break;
 8105798:	e00b      	b.n	81057b2 <DMA_CheckFifoParam+0xe6>
        break;
 810579a:	bf00      	nop
 810579c:	e00a      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
        break;
 810579e:	bf00      	nop
 81057a0:	e008      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
        break;
 81057a2:	bf00      	nop
 81057a4:	e006      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
        break;
 81057a6:	bf00      	nop
 81057a8:	e004      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
        break;
 81057aa:	bf00      	nop
 81057ac:	e002      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
        break;
 81057ae:	bf00      	nop
 81057b0:	e000      	b.n	81057b4 <DMA_CheckFifoParam+0xe8>
    break;
 81057b2:	bf00      	nop
    }
  }

  return status;
 81057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 81057b6:	4618      	mov	r0, r3
 81057b8:	3714      	adds	r7, #20
 81057ba:	46bd      	mov	sp, r7
 81057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057c0:	4770      	bx	lr
 81057c2:	bf00      	nop

081057c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81057c4:	b480      	push	{r7}
 81057c6:	b085      	sub	sp, #20
 81057c8:	af00      	add	r7, sp, #0
 81057ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81057cc:	687b      	ldr	r3, [r7, #4]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	681b      	ldr	r3, [r3, #0]
 81057d6:	4a3a      	ldr	r2, [pc, #232]	; (81058c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81057d8:	4293      	cmp	r3, r2
 81057da:	d022      	beq.n	8105822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	4a38      	ldr	r2, [pc, #224]	; (81058c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81057e2:	4293      	cmp	r3, r2
 81057e4:	d01d      	beq.n	8105822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81057e6:	687b      	ldr	r3, [r7, #4]
 81057e8:	681b      	ldr	r3, [r3, #0]
 81057ea:	4a37      	ldr	r2, [pc, #220]	; (81058c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81057ec:	4293      	cmp	r3, r2
 81057ee:	d018      	beq.n	8105822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	4a35      	ldr	r2, [pc, #212]	; (81058cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d013      	beq.n	8105822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	4a34      	ldr	r2, [pc, #208]	; (81058d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8105800:	4293      	cmp	r3, r2
 8105802:	d00e      	beq.n	8105822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105804:	687b      	ldr	r3, [r7, #4]
 8105806:	681b      	ldr	r3, [r3, #0]
 8105808:	4a32      	ldr	r2, [pc, #200]	; (81058d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810580a:	4293      	cmp	r3, r2
 810580c:	d009      	beq.n	8105822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810580e:	687b      	ldr	r3, [r7, #4]
 8105810:	681b      	ldr	r3, [r3, #0]
 8105812:	4a31      	ldr	r2, [pc, #196]	; (81058d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8105814:	4293      	cmp	r3, r2
 8105816:	d004      	beq.n	8105822 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105818:	687b      	ldr	r3, [r7, #4]
 810581a:	681b      	ldr	r3, [r3, #0]
 810581c:	4a2f      	ldr	r2, [pc, #188]	; (81058dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810581e:	4293      	cmp	r3, r2
 8105820:	d101      	bne.n	8105826 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8105822:	2301      	movs	r3, #1
 8105824:	e000      	b.n	8105828 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8105826:	2300      	movs	r3, #0
 8105828:	2b00      	cmp	r3, #0
 810582a:	d01c      	beq.n	8105866 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	681b      	ldr	r3, [r3, #0]
 8105830:	b2db      	uxtb	r3, r3
 8105832:	3b08      	subs	r3, #8
 8105834:	4a2a      	ldr	r2, [pc, #168]	; (81058e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8105836:	fba2 2303 	umull	r2, r3, r2, r3
 810583a:	091b      	lsrs	r3, r3, #4
 810583c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810583e:	68fb      	ldr	r3, [r7, #12]
 8105840:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8105844:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8105848:	009b      	lsls	r3, r3, #2
 810584a:	461a      	mov	r2, r3
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8105850:	687b      	ldr	r3, [r7, #4]
 8105852:	4a24      	ldr	r2, [pc, #144]	; (81058e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8105854:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	f003 031f 	and.w	r3, r3, #31
 810585c:	2201      	movs	r2, #1
 810585e:	409a      	lsls	r2, r3
 8105860:	687b      	ldr	r3, [r7, #4]
 8105862:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8105864:	e026      	b.n	81058b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	681b      	ldr	r3, [r3, #0]
 810586a:	b2db      	uxtb	r3, r3
 810586c:	3b10      	subs	r3, #16
 810586e:	4a1e      	ldr	r2, [pc, #120]	; (81058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8105870:	fba2 2303 	umull	r2, r3, r2, r3
 8105874:	091b      	lsrs	r3, r3, #4
 8105876:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8105878:	68bb      	ldr	r3, [r7, #8]
 810587a:	4a1c      	ldr	r2, [pc, #112]	; (81058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810587c:	4293      	cmp	r3, r2
 810587e:	d806      	bhi.n	810588e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8105880:	68bb      	ldr	r3, [r7, #8]
 8105882:	4a1b      	ldr	r2, [pc, #108]	; (81058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8105884:	4293      	cmp	r3, r2
 8105886:	d902      	bls.n	810588e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8105888:	68fb      	ldr	r3, [r7, #12]
 810588a:	3308      	adds	r3, #8
 810588c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8105894:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8105898:	009b      	lsls	r3, r3, #2
 810589a:	461a      	mov	r2, r3
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	4a14      	ldr	r2, [pc, #80]	; (81058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81058a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	f003 031f 	and.w	r3, r3, #31
 81058ac:	2201      	movs	r2, #1
 81058ae:	409a      	lsls	r2, r3
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 81058b4:	bf00      	nop
 81058b6:	3714      	adds	r7, #20
 81058b8:	46bd      	mov	sp, r7
 81058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058be:	4770      	bx	lr
 81058c0:	58025408 	.word	0x58025408
 81058c4:	5802541c 	.word	0x5802541c
 81058c8:	58025430 	.word	0x58025430
 81058cc:	58025444 	.word	0x58025444
 81058d0:	58025458 	.word	0x58025458
 81058d4:	5802546c 	.word	0x5802546c
 81058d8:	58025480 	.word	0x58025480
 81058dc:	58025494 	.word	0x58025494
 81058e0:	cccccccd 	.word	0xcccccccd
 81058e4:	58025880 	.word	0x58025880
 81058e8:	aaaaaaab 	.word	0xaaaaaaab
 81058ec:	400204b8 	.word	0x400204b8
 81058f0:	4002040f 	.word	0x4002040f
 81058f4:	40020880 	.word	0x40020880

081058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81058f8:	b480      	push	{r7}
 81058fa:	b085      	sub	sp, #20
 81058fc:	af00      	add	r7, sp, #0
 81058fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	685b      	ldr	r3, [r3, #4]
 8105904:	b2db      	uxtb	r3, r3
 8105906:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8105908:	68fb      	ldr	r3, [r7, #12]
 810590a:	2b00      	cmp	r3, #0
 810590c:	d04a      	beq.n	81059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810590e:	68fb      	ldr	r3, [r7, #12]
 8105910:	2b08      	cmp	r3, #8
 8105912:	d847      	bhi.n	81059a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	4a25      	ldr	r2, [pc, #148]	; (81059b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 810591a:	4293      	cmp	r3, r2
 810591c:	d022      	beq.n	8105964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810591e:	687b      	ldr	r3, [r7, #4]
 8105920:	681b      	ldr	r3, [r3, #0]
 8105922:	4a24      	ldr	r2, [pc, #144]	; (81059b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8105924:	4293      	cmp	r3, r2
 8105926:	d01d      	beq.n	8105964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	681b      	ldr	r3, [r3, #0]
 810592c:	4a22      	ldr	r2, [pc, #136]	; (81059b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810592e:	4293      	cmp	r3, r2
 8105930:	d018      	beq.n	8105964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105932:	687b      	ldr	r3, [r7, #4]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	4a21      	ldr	r2, [pc, #132]	; (81059bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8105938:	4293      	cmp	r3, r2
 810593a:	d013      	beq.n	8105964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	4a1f      	ldr	r2, [pc, #124]	; (81059c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8105942:	4293      	cmp	r3, r2
 8105944:	d00e      	beq.n	8105964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	4a1e      	ldr	r2, [pc, #120]	; (81059c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 810594c:	4293      	cmp	r3, r2
 810594e:	d009      	beq.n	8105964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	4a1c      	ldr	r2, [pc, #112]	; (81059c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8105956:	4293      	cmp	r3, r2
 8105958:	d004      	beq.n	8105964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	4a1b      	ldr	r2, [pc, #108]	; (81059cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8105960:	4293      	cmp	r3, r2
 8105962:	d101      	bne.n	8105968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8105964:	2301      	movs	r3, #1
 8105966:	e000      	b.n	810596a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8105968:	2300      	movs	r3, #0
 810596a:	2b00      	cmp	r3, #0
 810596c:	d00a      	beq.n	8105984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810596e:	68fa      	ldr	r2, [r7, #12]
 8105970:	4b17      	ldr	r3, [pc, #92]	; (81059d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8105972:	4413      	add	r3, r2
 8105974:	009b      	lsls	r3, r3, #2
 8105976:	461a      	mov	r2, r3
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	4a15      	ldr	r2, [pc, #84]	; (81059d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8105980:	671a      	str	r2, [r3, #112]	; 0x70
 8105982:	e009      	b.n	8105998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8105984:	68fa      	ldr	r2, [r7, #12]
 8105986:	4b14      	ldr	r3, [pc, #80]	; (81059d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8105988:	4413      	add	r3, r2
 810598a:	009b      	lsls	r3, r3, #2
 810598c:	461a      	mov	r2, r3
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8105992:	687b      	ldr	r3, [r7, #4]
 8105994:	4a11      	ldr	r2, [pc, #68]	; (81059dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8105996:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8105998:	68fb      	ldr	r3, [r7, #12]
 810599a:	3b01      	subs	r3, #1
 810599c:	2201      	movs	r2, #1
 810599e:	409a      	lsls	r2, r3
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81059a4:	bf00      	nop
 81059a6:	3714      	adds	r7, #20
 81059a8:	46bd      	mov	sp, r7
 81059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059ae:	4770      	bx	lr
 81059b0:	58025408 	.word	0x58025408
 81059b4:	5802541c 	.word	0x5802541c
 81059b8:	58025430 	.word	0x58025430
 81059bc:	58025444 	.word	0x58025444
 81059c0:	58025458 	.word	0x58025458
 81059c4:	5802546c 	.word	0x5802546c
 81059c8:	58025480 	.word	0x58025480
 81059cc:	58025494 	.word	0x58025494
 81059d0:	1600963f 	.word	0x1600963f
 81059d4:	58025940 	.word	0x58025940
 81059d8:	1000823f 	.word	0x1000823f
 81059dc:	40020940 	.word	0x40020940

081059e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81059e0:	b480      	push	{r7}
 81059e2:	b089      	sub	sp, #36	; 0x24
 81059e4:	af00      	add	r7, sp, #0
 81059e6:	6078      	str	r0, [r7, #4]
 81059e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81059ea:	2300      	movs	r3, #0
 81059ec:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81059ee:	4b89      	ldr	r3, [pc, #548]	; (8105c14 <HAL_GPIO_Init+0x234>)
 81059f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81059f2:	e194      	b.n	8105d1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81059f4:	683b      	ldr	r3, [r7, #0]
 81059f6:	681a      	ldr	r2, [r3, #0]
 81059f8:	2101      	movs	r1, #1
 81059fa:	69fb      	ldr	r3, [r7, #28]
 81059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8105a00:	4013      	ands	r3, r2
 8105a02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105a04:	693b      	ldr	r3, [r7, #16]
 8105a06:	2b00      	cmp	r3, #0
 8105a08:	f000 8186 	beq.w	8105d18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8105a0c:	683b      	ldr	r3, [r7, #0]
 8105a0e:	685b      	ldr	r3, [r3, #4]
 8105a10:	2b01      	cmp	r3, #1
 8105a12:	d00b      	beq.n	8105a2c <HAL_GPIO_Init+0x4c>
 8105a14:	683b      	ldr	r3, [r7, #0]
 8105a16:	685b      	ldr	r3, [r3, #4]
 8105a18:	2b02      	cmp	r3, #2
 8105a1a:	d007      	beq.n	8105a2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8105a1c:	683b      	ldr	r3, [r7, #0]
 8105a1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8105a20:	2b11      	cmp	r3, #17
 8105a22:	d003      	beq.n	8105a2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8105a24:	683b      	ldr	r3, [r7, #0]
 8105a26:	685b      	ldr	r3, [r3, #4]
 8105a28:	2b12      	cmp	r3, #18
 8105a2a:	d130      	bne.n	8105a8e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	689b      	ldr	r3, [r3, #8]
 8105a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105a32:	69fb      	ldr	r3, [r7, #28]
 8105a34:	005b      	lsls	r3, r3, #1
 8105a36:	2203      	movs	r2, #3
 8105a38:	fa02 f303 	lsl.w	r3, r2, r3
 8105a3c:	43db      	mvns	r3, r3
 8105a3e:	69ba      	ldr	r2, [r7, #24]
 8105a40:	4013      	ands	r3, r2
 8105a42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105a44:	683b      	ldr	r3, [r7, #0]
 8105a46:	68da      	ldr	r2, [r3, #12]
 8105a48:	69fb      	ldr	r3, [r7, #28]
 8105a4a:	005b      	lsls	r3, r3, #1
 8105a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8105a50:	69ba      	ldr	r2, [r7, #24]
 8105a52:	4313      	orrs	r3, r2
 8105a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	69ba      	ldr	r2, [r7, #24]
 8105a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	685b      	ldr	r3, [r3, #4]
 8105a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105a62:	2201      	movs	r2, #1
 8105a64:	69fb      	ldr	r3, [r7, #28]
 8105a66:	fa02 f303 	lsl.w	r3, r2, r3
 8105a6a:	43db      	mvns	r3, r3
 8105a6c:	69ba      	ldr	r2, [r7, #24]
 8105a6e:	4013      	ands	r3, r2
 8105a70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8105a72:	683b      	ldr	r3, [r7, #0]
 8105a74:	685b      	ldr	r3, [r3, #4]
 8105a76:	091b      	lsrs	r3, r3, #4
 8105a78:	f003 0201 	and.w	r2, r3, #1
 8105a7c:	69fb      	ldr	r3, [r7, #28]
 8105a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8105a82:	69ba      	ldr	r2, [r7, #24]
 8105a84:	4313      	orrs	r3, r2
 8105a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	69ba      	ldr	r2, [r7, #24]
 8105a8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	68db      	ldr	r3, [r3, #12]
 8105a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105a94:	69fb      	ldr	r3, [r7, #28]
 8105a96:	005b      	lsls	r3, r3, #1
 8105a98:	2203      	movs	r2, #3
 8105a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8105a9e:	43db      	mvns	r3, r3
 8105aa0:	69ba      	ldr	r2, [r7, #24]
 8105aa2:	4013      	ands	r3, r2
 8105aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105aa6:	683b      	ldr	r3, [r7, #0]
 8105aa8:	689a      	ldr	r2, [r3, #8]
 8105aaa:	69fb      	ldr	r3, [r7, #28]
 8105aac:	005b      	lsls	r3, r3, #1
 8105aae:	fa02 f303 	lsl.w	r3, r2, r3
 8105ab2:	69ba      	ldr	r2, [r7, #24]
 8105ab4:	4313      	orrs	r3, r2
 8105ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	69ba      	ldr	r2, [r7, #24]
 8105abc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8105abe:	683b      	ldr	r3, [r7, #0]
 8105ac0:	685b      	ldr	r3, [r3, #4]
 8105ac2:	2b02      	cmp	r3, #2
 8105ac4:	d003      	beq.n	8105ace <HAL_GPIO_Init+0xee>
 8105ac6:	683b      	ldr	r3, [r7, #0]
 8105ac8:	685b      	ldr	r3, [r3, #4]
 8105aca:	2b12      	cmp	r3, #18
 8105acc:	d123      	bne.n	8105b16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8105ace:	69fb      	ldr	r3, [r7, #28]
 8105ad0:	08da      	lsrs	r2, r3, #3
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	3208      	adds	r2, #8
 8105ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105adc:	69fb      	ldr	r3, [r7, #28]
 8105ade:	f003 0307 	and.w	r3, r3, #7
 8105ae2:	009b      	lsls	r3, r3, #2
 8105ae4:	220f      	movs	r2, #15
 8105ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8105aea:	43db      	mvns	r3, r3
 8105aec:	69ba      	ldr	r2, [r7, #24]
 8105aee:	4013      	ands	r3, r2
 8105af0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105af2:	683b      	ldr	r3, [r7, #0]
 8105af4:	691a      	ldr	r2, [r3, #16]
 8105af6:	69fb      	ldr	r3, [r7, #28]
 8105af8:	f003 0307 	and.w	r3, r3, #7
 8105afc:	009b      	lsls	r3, r3, #2
 8105afe:	fa02 f303 	lsl.w	r3, r2, r3
 8105b02:	69ba      	ldr	r2, [r7, #24]
 8105b04:	4313      	orrs	r3, r2
 8105b06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105b08:	69fb      	ldr	r3, [r7, #28]
 8105b0a:	08da      	lsrs	r2, r3, #3
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	3208      	adds	r2, #8
 8105b10:	69b9      	ldr	r1, [r7, #24]
 8105b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	681b      	ldr	r3, [r3, #0]
 8105b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105b1c:	69fb      	ldr	r3, [r7, #28]
 8105b1e:	005b      	lsls	r3, r3, #1
 8105b20:	2203      	movs	r2, #3
 8105b22:	fa02 f303 	lsl.w	r3, r2, r3
 8105b26:	43db      	mvns	r3, r3
 8105b28:	69ba      	ldr	r2, [r7, #24]
 8105b2a:	4013      	ands	r3, r2
 8105b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105b2e:	683b      	ldr	r3, [r7, #0]
 8105b30:	685b      	ldr	r3, [r3, #4]
 8105b32:	f003 0203 	and.w	r2, r3, #3
 8105b36:	69fb      	ldr	r3, [r7, #28]
 8105b38:	005b      	lsls	r3, r3, #1
 8105b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8105b3e:	69ba      	ldr	r2, [r7, #24]
 8105b40:	4313      	orrs	r3, r2
 8105b42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105b44:	687b      	ldr	r3, [r7, #4]
 8105b46:	69ba      	ldr	r2, [r7, #24]
 8105b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8105b4a:	683b      	ldr	r3, [r7, #0]
 8105b4c:	685b      	ldr	r3, [r3, #4]
 8105b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105b52:	2b00      	cmp	r3, #0
 8105b54:	f000 80e0 	beq.w	8105d18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105b58:	4b2f      	ldr	r3, [pc, #188]	; (8105c18 <HAL_GPIO_Init+0x238>)
 8105b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105b5e:	4a2e      	ldr	r2, [pc, #184]	; (8105c18 <HAL_GPIO_Init+0x238>)
 8105b60:	f043 0302 	orr.w	r3, r3, #2
 8105b64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105b68:	4b2b      	ldr	r3, [pc, #172]	; (8105c18 <HAL_GPIO_Init+0x238>)
 8105b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105b6e:	f003 0302 	and.w	r3, r3, #2
 8105b72:	60fb      	str	r3, [r7, #12]
 8105b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105b76:	4a29      	ldr	r2, [pc, #164]	; (8105c1c <HAL_GPIO_Init+0x23c>)
 8105b78:	69fb      	ldr	r3, [r7, #28]
 8105b7a:	089b      	lsrs	r3, r3, #2
 8105b7c:	3302      	adds	r3, #2
 8105b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105b84:	69fb      	ldr	r3, [r7, #28]
 8105b86:	f003 0303 	and.w	r3, r3, #3
 8105b8a:	009b      	lsls	r3, r3, #2
 8105b8c:	220f      	movs	r2, #15
 8105b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8105b92:	43db      	mvns	r3, r3
 8105b94:	69ba      	ldr	r2, [r7, #24]
 8105b96:	4013      	ands	r3, r2
 8105b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	4a20      	ldr	r2, [pc, #128]	; (8105c20 <HAL_GPIO_Init+0x240>)
 8105b9e:	4293      	cmp	r3, r2
 8105ba0:	d052      	beq.n	8105c48 <HAL_GPIO_Init+0x268>
 8105ba2:	687b      	ldr	r3, [r7, #4]
 8105ba4:	4a1f      	ldr	r2, [pc, #124]	; (8105c24 <HAL_GPIO_Init+0x244>)
 8105ba6:	4293      	cmp	r3, r2
 8105ba8:	d031      	beq.n	8105c0e <HAL_GPIO_Init+0x22e>
 8105baa:	687b      	ldr	r3, [r7, #4]
 8105bac:	4a1e      	ldr	r2, [pc, #120]	; (8105c28 <HAL_GPIO_Init+0x248>)
 8105bae:	4293      	cmp	r3, r2
 8105bb0:	d02b      	beq.n	8105c0a <HAL_GPIO_Init+0x22a>
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	4a1d      	ldr	r2, [pc, #116]	; (8105c2c <HAL_GPIO_Init+0x24c>)
 8105bb6:	4293      	cmp	r3, r2
 8105bb8:	d025      	beq.n	8105c06 <HAL_GPIO_Init+0x226>
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	4a1c      	ldr	r2, [pc, #112]	; (8105c30 <HAL_GPIO_Init+0x250>)
 8105bbe:	4293      	cmp	r3, r2
 8105bc0:	d01f      	beq.n	8105c02 <HAL_GPIO_Init+0x222>
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	4a1b      	ldr	r2, [pc, #108]	; (8105c34 <HAL_GPIO_Init+0x254>)
 8105bc6:	4293      	cmp	r3, r2
 8105bc8:	d019      	beq.n	8105bfe <HAL_GPIO_Init+0x21e>
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	4a1a      	ldr	r2, [pc, #104]	; (8105c38 <HAL_GPIO_Init+0x258>)
 8105bce:	4293      	cmp	r3, r2
 8105bd0:	d013      	beq.n	8105bfa <HAL_GPIO_Init+0x21a>
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	4a19      	ldr	r2, [pc, #100]	; (8105c3c <HAL_GPIO_Init+0x25c>)
 8105bd6:	4293      	cmp	r3, r2
 8105bd8:	d00d      	beq.n	8105bf6 <HAL_GPIO_Init+0x216>
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	4a18      	ldr	r2, [pc, #96]	; (8105c40 <HAL_GPIO_Init+0x260>)
 8105bde:	4293      	cmp	r3, r2
 8105be0:	d007      	beq.n	8105bf2 <HAL_GPIO_Init+0x212>
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	4a17      	ldr	r2, [pc, #92]	; (8105c44 <HAL_GPIO_Init+0x264>)
 8105be6:	4293      	cmp	r3, r2
 8105be8:	d101      	bne.n	8105bee <HAL_GPIO_Init+0x20e>
 8105bea:	2309      	movs	r3, #9
 8105bec:	e02d      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105bee:	230a      	movs	r3, #10
 8105bf0:	e02b      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105bf2:	2308      	movs	r3, #8
 8105bf4:	e029      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105bf6:	2307      	movs	r3, #7
 8105bf8:	e027      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105bfa:	2306      	movs	r3, #6
 8105bfc:	e025      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105bfe:	2305      	movs	r3, #5
 8105c00:	e023      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105c02:	2304      	movs	r3, #4
 8105c04:	e021      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105c06:	2303      	movs	r3, #3
 8105c08:	e01f      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105c0a:	2302      	movs	r3, #2
 8105c0c:	e01d      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105c0e:	2301      	movs	r3, #1
 8105c10:	e01b      	b.n	8105c4a <HAL_GPIO_Init+0x26a>
 8105c12:	bf00      	nop
 8105c14:	580000c0 	.word	0x580000c0
 8105c18:	58024400 	.word	0x58024400
 8105c1c:	58000400 	.word	0x58000400
 8105c20:	58020000 	.word	0x58020000
 8105c24:	58020400 	.word	0x58020400
 8105c28:	58020800 	.word	0x58020800
 8105c2c:	58020c00 	.word	0x58020c00
 8105c30:	58021000 	.word	0x58021000
 8105c34:	58021400 	.word	0x58021400
 8105c38:	58021800 	.word	0x58021800
 8105c3c:	58021c00 	.word	0x58021c00
 8105c40:	58022000 	.word	0x58022000
 8105c44:	58022400 	.word	0x58022400
 8105c48:	2300      	movs	r3, #0
 8105c4a:	69fa      	ldr	r2, [r7, #28]
 8105c4c:	f002 0203 	and.w	r2, r2, #3
 8105c50:	0092      	lsls	r2, r2, #2
 8105c52:	4093      	lsls	r3, r2
 8105c54:	69ba      	ldr	r2, [r7, #24]
 8105c56:	4313      	orrs	r3, r2
 8105c58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105c5a:	4938      	ldr	r1, [pc, #224]	; (8105d3c <HAL_GPIO_Init+0x35c>)
 8105c5c:	69fb      	ldr	r3, [r7, #28]
 8105c5e:	089b      	lsrs	r3, r3, #2
 8105c60:	3302      	adds	r3, #2
 8105c62:	69ba      	ldr	r2, [r7, #24]
 8105c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105c68:	697b      	ldr	r3, [r7, #20]
 8105c6a:	681b      	ldr	r3, [r3, #0]
 8105c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c6e:	693b      	ldr	r3, [r7, #16]
 8105c70:	43db      	mvns	r3, r3
 8105c72:	69ba      	ldr	r2, [r7, #24]
 8105c74:	4013      	ands	r3, r2
 8105c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8105c78:	683b      	ldr	r3, [r7, #0]
 8105c7a:	685b      	ldr	r3, [r3, #4]
 8105c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105c80:	2b00      	cmp	r3, #0
 8105c82:	d003      	beq.n	8105c8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8105c84:	69ba      	ldr	r2, [r7, #24]
 8105c86:	693b      	ldr	r3, [r7, #16]
 8105c88:	4313      	orrs	r3, r2
 8105c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105c8c:	697b      	ldr	r3, [r7, #20]
 8105c8e:	69ba      	ldr	r2, [r7, #24]
 8105c90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8105c92:	697b      	ldr	r3, [r7, #20]
 8105c94:	685b      	ldr	r3, [r3, #4]
 8105c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c98:	693b      	ldr	r3, [r7, #16]
 8105c9a:	43db      	mvns	r3, r3
 8105c9c:	69ba      	ldr	r2, [r7, #24]
 8105c9e:	4013      	ands	r3, r2
 8105ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8105ca2:	683b      	ldr	r3, [r7, #0]
 8105ca4:	685b      	ldr	r3, [r3, #4]
 8105ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105caa:	2b00      	cmp	r3, #0
 8105cac:	d003      	beq.n	8105cb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8105cae:	69ba      	ldr	r2, [r7, #24]
 8105cb0:	693b      	ldr	r3, [r7, #16]
 8105cb2:	4313      	orrs	r3, r2
 8105cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105cb6:	697b      	ldr	r3, [r7, #20]
 8105cb8:	69ba      	ldr	r2, [r7, #24]
 8105cba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105cc0:	681b      	ldr	r3, [r3, #0]
 8105cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105cc4:	693b      	ldr	r3, [r7, #16]
 8105cc6:	43db      	mvns	r3, r3
 8105cc8:	69ba      	ldr	r2, [r7, #24]
 8105cca:	4013      	ands	r3, r2
 8105ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8105cce:	683b      	ldr	r3, [r7, #0]
 8105cd0:	685b      	ldr	r3, [r3, #4]
 8105cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105cd6:	2b00      	cmp	r3, #0
 8105cd8:	d003      	beq.n	8105ce2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8105cda:	69ba      	ldr	r2, [r7, #24]
 8105cdc:	693b      	ldr	r3, [r7, #16]
 8105cde:	4313      	orrs	r3, r2
 8105ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105ce6:	69bb      	ldr	r3, [r7, #24]
 8105ce8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105cee:	685b      	ldr	r3, [r3, #4]
 8105cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105cf2:	693b      	ldr	r3, [r7, #16]
 8105cf4:	43db      	mvns	r3, r3
 8105cf6:	69ba      	ldr	r2, [r7, #24]
 8105cf8:	4013      	ands	r3, r2
 8105cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8105cfc:	683b      	ldr	r3, [r7, #0]
 8105cfe:	685b      	ldr	r3, [r3, #4]
 8105d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105d04:	2b00      	cmp	r3, #0
 8105d06:	d003      	beq.n	8105d10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8105d08:	69ba      	ldr	r2, [r7, #24]
 8105d0a:	693b      	ldr	r3, [r7, #16]
 8105d0c:	4313      	orrs	r3, r2
 8105d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105d14:	69bb      	ldr	r3, [r7, #24]
 8105d16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8105d18:	69fb      	ldr	r3, [r7, #28]
 8105d1a:	3301      	adds	r3, #1
 8105d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105d1e:	683b      	ldr	r3, [r7, #0]
 8105d20:	681a      	ldr	r2, [r3, #0]
 8105d22:	69fb      	ldr	r3, [r7, #28]
 8105d24:	fa22 f303 	lsr.w	r3, r2, r3
 8105d28:	2b00      	cmp	r3, #0
 8105d2a:	f47f ae63 	bne.w	81059f4 <HAL_GPIO_Init+0x14>
  }
}
 8105d2e:	bf00      	nop
 8105d30:	bf00      	nop
 8105d32:	3724      	adds	r7, #36	; 0x24
 8105d34:	46bd      	mov	sp, r7
 8105d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d3a:	4770      	bx	lr
 8105d3c:	58000400 	.word	0x58000400

08105d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105d40:	b480      	push	{r7}
 8105d42:	b083      	sub	sp, #12
 8105d44:	af00      	add	r7, sp, #0
 8105d46:	6078      	str	r0, [r7, #4]
 8105d48:	460b      	mov	r3, r1
 8105d4a:	807b      	strh	r3, [r7, #2]
 8105d4c:	4613      	mov	r3, r2
 8105d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105d50:	787b      	ldrb	r3, [r7, #1]
 8105d52:	2b00      	cmp	r3, #0
 8105d54:	d003      	beq.n	8105d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105d56:	887a      	ldrh	r2, [r7, #2]
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105d5c:	e003      	b.n	8105d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105d5e:	887b      	ldrh	r3, [r7, #2]
 8105d60:	041a      	lsls	r2, r3, #16
 8105d62:	687b      	ldr	r3, [r7, #4]
 8105d64:	619a      	str	r2, [r3, #24]
}
 8105d66:	bf00      	nop
 8105d68:	370c      	adds	r7, #12
 8105d6a:	46bd      	mov	sp, r7
 8105d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d70:	4770      	bx	lr

08105d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8105d72:	b480      	push	{r7}
 8105d74:	b085      	sub	sp, #20
 8105d76:	af00      	add	r7, sp, #0
 8105d78:	6078      	str	r0, [r7, #4]
 8105d7a:	460b      	mov	r3, r1
 8105d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	695b      	ldr	r3, [r3, #20]
 8105d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8105d84:	887a      	ldrh	r2, [r7, #2]
 8105d86:	68fb      	ldr	r3, [r7, #12]
 8105d88:	4013      	ands	r3, r2
 8105d8a:	041a      	lsls	r2, r3, #16
 8105d8c:	68fb      	ldr	r3, [r7, #12]
 8105d8e:	43d9      	mvns	r1, r3
 8105d90:	887b      	ldrh	r3, [r7, #2]
 8105d92:	400b      	ands	r3, r1
 8105d94:	431a      	orrs	r2, r3
 8105d96:	687b      	ldr	r3, [r7, #4]
 8105d98:	619a      	str	r2, [r3, #24]
}
 8105d9a:	bf00      	nop
 8105d9c:	3714      	adds	r7, #20
 8105d9e:	46bd      	mov	sp, r7
 8105da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105da4:	4770      	bx	lr
	...

08105da8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105da8:	b480      	push	{r7}
 8105daa:	b083      	sub	sp, #12
 8105dac:	af00      	add	r7, sp, #0
 8105dae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105db0:	4b05      	ldr	r3, [pc, #20]	; (8105dc8 <HAL_HSEM_ActivateNotification+0x20>)
 8105db2:	681a      	ldr	r2, [r3, #0]
 8105db4:	4904      	ldr	r1, [pc, #16]	; (8105dc8 <HAL_HSEM_ActivateNotification+0x20>)
 8105db6:	687b      	ldr	r3, [r7, #4]
 8105db8:	4313      	orrs	r3, r2
 8105dba:	600b      	str	r3, [r1, #0]
#endif
}
 8105dbc:	bf00      	nop
 8105dbe:	370c      	adds	r7, #12
 8105dc0:	46bd      	mov	sp, r7
 8105dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc6:	4770      	bx	lr
 8105dc8:	58026510 	.word	0x58026510

08105dcc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8105dcc:	b580      	push	{r7, lr}
 8105dce:	b082      	sub	sp, #8
 8105dd0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8105dd2:	4b0a      	ldr	r3, [pc, #40]	; (8105dfc <HAL_HSEM_IRQHandler+0x30>)
 8105dd4:	68db      	ldr	r3, [r3, #12]
 8105dd6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8105dd8:	4b08      	ldr	r3, [pc, #32]	; (8105dfc <HAL_HSEM_IRQHandler+0x30>)
 8105dda:	681a      	ldr	r2, [r3, #0]
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	43db      	mvns	r3, r3
 8105de0:	4906      	ldr	r1, [pc, #24]	; (8105dfc <HAL_HSEM_IRQHandler+0x30>)
 8105de2:	4013      	ands	r3, r2
 8105de4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8105de6:	4a05      	ldr	r2, [pc, #20]	; (8105dfc <HAL_HSEM_IRQHandler+0x30>)
 8105de8:	687b      	ldr	r3, [r7, #4]
 8105dea:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8105dec:	6878      	ldr	r0, [r7, #4]
 8105dee:	f000 f807 	bl	8105e00 <HAL_HSEM_FreeCallback>
}
 8105df2:	bf00      	nop
 8105df4:	3708      	adds	r7, #8
 8105df6:	46bd      	mov	sp, r7
 8105df8:	bd80      	pop	{r7, pc}
 8105dfa:	bf00      	nop
 8105dfc:	58026510 	.word	0x58026510

08105e00 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8105e00:	b480      	push	{r7}
 8105e02:	b083      	sub	sp, #12
 8105e04:	af00      	add	r7, sp, #0
 8105e06:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8105e08:	bf00      	nop
 8105e0a:	370c      	adds	r7, #12
 8105e0c:	46bd      	mov	sp, r7
 8105e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e12:	4770      	bx	lr

08105e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8105e14:	b580      	push	{r7, lr}
 8105e16:	b082      	sub	sp, #8
 8105e18:	af00      	add	r7, sp, #0
 8105e1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	2b00      	cmp	r3, #0
 8105e20:	d101      	bne.n	8105e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8105e22:	2301      	movs	r3, #1
 8105e24:	e081      	b.n	8105f2a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105e2c:	b2db      	uxtb	r3, r3
 8105e2e:	2b00      	cmp	r3, #0
 8105e30:	d106      	bne.n	8105e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	2200      	movs	r2, #0
 8105e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8105e3a:	6878      	ldr	r0, [r7, #4]
 8105e3c:	f7fb fb58 	bl	81014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	2224      	movs	r2, #36	; 0x24
 8105e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	681a      	ldr	r2, [r3, #0]
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	681b      	ldr	r3, [r3, #0]
 8105e52:	f022 0201 	bic.w	r2, r2, #1
 8105e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	685a      	ldr	r2, [r3, #4]
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8105e64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	689a      	ldr	r2, [r3, #8]
 8105e6c:	687b      	ldr	r3, [r7, #4]
 8105e6e:	681b      	ldr	r3, [r3, #0]
 8105e70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105e74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	68db      	ldr	r3, [r3, #12]
 8105e7a:	2b01      	cmp	r3, #1
 8105e7c:	d107      	bne.n	8105e8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	689a      	ldr	r2, [r3, #8]
 8105e82:	687b      	ldr	r3, [r7, #4]
 8105e84:	681b      	ldr	r3, [r3, #0]
 8105e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105e8a:	609a      	str	r2, [r3, #8]
 8105e8c:	e006      	b.n	8105e9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	689a      	ldr	r2, [r3, #8]
 8105e92:	687b      	ldr	r3, [r7, #4]
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8105e9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8105e9c:	687b      	ldr	r3, [r7, #4]
 8105e9e:	68db      	ldr	r3, [r3, #12]
 8105ea0:	2b02      	cmp	r3, #2
 8105ea2:	d104      	bne.n	8105eae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105eac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	685b      	ldr	r3, [r3, #4]
 8105eb4:	687a      	ldr	r2, [r7, #4]
 8105eb6:	6812      	ldr	r2, [r2, #0]
 8105eb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8105ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8105ec0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	68da      	ldr	r2, [r3, #12]
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	681b      	ldr	r3, [r3, #0]
 8105ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8105ed0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	691a      	ldr	r2, [r3, #16]
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	695b      	ldr	r3, [r3, #20]
 8105eda:	ea42 0103 	orr.w	r1, r2, r3
 8105ede:	687b      	ldr	r3, [r7, #4]
 8105ee0:	699b      	ldr	r3, [r3, #24]
 8105ee2:	021a      	lsls	r2, r3, #8
 8105ee4:	687b      	ldr	r3, [r7, #4]
 8105ee6:	681b      	ldr	r3, [r3, #0]
 8105ee8:	430a      	orrs	r2, r1
 8105eea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	69d9      	ldr	r1, [r3, #28]
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	6a1a      	ldr	r2, [r3, #32]
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	681b      	ldr	r3, [r3, #0]
 8105ef8:	430a      	orrs	r2, r1
 8105efa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8105efc:	687b      	ldr	r3, [r7, #4]
 8105efe:	681b      	ldr	r3, [r3, #0]
 8105f00:	681a      	ldr	r2, [r3, #0]
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	681b      	ldr	r3, [r3, #0]
 8105f06:	f042 0201 	orr.w	r2, r2, #1
 8105f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	2200      	movs	r2, #0
 8105f10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	2220      	movs	r2, #32
 8105f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	2200      	movs	r2, #0
 8105f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	2200      	movs	r2, #0
 8105f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8105f28:	2300      	movs	r3, #0
}
 8105f2a:	4618      	mov	r0, r3
 8105f2c:	3708      	adds	r7, #8
 8105f2e:	46bd      	mov	sp, r7
 8105f30:	bd80      	pop	{r7, pc}

08105f32 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105f32:	b480      	push	{r7}
 8105f34:	b083      	sub	sp, #12
 8105f36:	af00      	add	r7, sp, #0
 8105f38:	6078      	str	r0, [r7, #4]
 8105f3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105f3c:	687b      	ldr	r3, [r7, #4]
 8105f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105f42:	b2db      	uxtb	r3, r3
 8105f44:	2b20      	cmp	r3, #32
 8105f46:	d138      	bne.n	8105fba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105f4e:	2b01      	cmp	r3, #1
 8105f50:	d101      	bne.n	8105f56 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105f52:	2302      	movs	r3, #2
 8105f54:	e032      	b.n	8105fbc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8105f56:	687b      	ldr	r3, [r7, #4]
 8105f58:	2201      	movs	r2, #1
 8105f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105f5e:	687b      	ldr	r3, [r7, #4]
 8105f60:	2224      	movs	r2, #36	; 0x24
 8105f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	681b      	ldr	r3, [r3, #0]
 8105f6a:	681a      	ldr	r2, [r3, #0]
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	681b      	ldr	r3, [r3, #0]
 8105f70:	f022 0201 	bic.w	r2, r2, #1
 8105f74:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	681b      	ldr	r3, [r3, #0]
 8105f7a:	681a      	ldr	r2, [r3, #0]
 8105f7c:	687b      	ldr	r3, [r7, #4]
 8105f7e:	681b      	ldr	r3, [r3, #0]
 8105f80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8105f84:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	681b      	ldr	r3, [r3, #0]
 8105f8a:	6819      	ldr	r1, [r3, #0]
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	681b      	ldr	r3, [r3, #0]
 8105f90:	683a      	ldr	r2, [r7, #0]
 8105f92:	430a      	orrs	r2, r1
 8105f94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	681b      	ldr	r3, [r3, #0]
 8105f9a:	681a      	ldr	r2, [r3, #0]
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	681b      	ldr	r3, [r3, #0]
 8105fa0:	f042 0201 	orr.w	r2, r2, #1
 8105fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	2220      	movs	r2, #32
 8105faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	2200      	movs	r2, #0
 8105fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105fb6:	2300      	movs	r3, #0
 8105fb8:	e000      	b.n	8105fbc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8105fba:	2302      	movs	r3, #2
  }
}
 8105fbc:	4618      	mov	r0, r3
 8105fbe:	370c      	adds	r7, #12
 8105fc0:	46bd      	mov	sp, r7
 8105fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fc6:	4770      	bx	lr

08105fc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105fc8:	b480      	push	{r7}
 8105fca:	b085      	sub	sp, #20
 8105fcc:	af00      	add	r7, sp, #0
 8105fce:	6078      	str	r0, [r7, #4]
 8105fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105fd8:	b2db      	uxtb	r3, r3
 8105fda:	2b20      	cmp	r3, #32
 8105fdc:	d139      	bne.n	8106052 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105fde:	687b      	ldr	r3, [r7, #4]
 8105fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105fe4:	2b01      	cmp	r3, #1
 8105fe6:	d101      	bne.n	8105fec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105fe8:	2302      	movs	r3, #2
 8105fea:	e033      	b.n	8106054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	2201      	movs	r2, #1
 8105ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	2224      	movs	r2, #36	; 0x24
 8105ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	681b      	ldr	r3, [r3, #0]
 8106000:	681a      	ldr	r2, [r3, #0]
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	f022 0201 	bic.w	r2, r2, #1
 810600a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	681b      	ldr	r3, [r3, #0]
 8106010:	681b      	ldr	r3, [r3, #0]
 8106012:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8106014:	68fb      	ldr	r3, [r7, #12]
 8106016:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810601a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810601c:	683b      	ldr	r3, [r7, #0]
 810601e:	021b      	lsls	r3, r3, #8
 8106020:	68fa      	ldr	r2, [r7, #12]
 8106022:	4313      	orrs	r3, r2
 8106024:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	68fa      	ldr	r2, [r7, #12]
 810602c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	681a      	ldr	r2, [r3, #0]
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	681b      	ldr	r3, [r3, #0]
 8106038:	f042 0201 	orr.w	r2, r2, #1
 810603c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810603e:	687b      	ldr	r3, [r7, #4]
 8106040:	2220      	movs	r2, #32
 8106042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	2200      	movs	r2, #0
 810604a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810604e:	2300      	movs	r3, #0
 8106050:	e000      	b.n	8106054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8106052:	2302      	movs	r3, #2
  }
}
 8106054:	4618      	mov	r0, r3
 8106056:	3714      	adds	r7, #20
 8106058:	46bd      	mov	sp, r7
 810605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810605e:	4770      	bx	lr

08106060 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106060:	b580      	push	{r7, lr}
 8106062:	b084      	sub	sp, #16
 8106064:	af00      	add	r7, sp, #0
 8106066:	60f8      	str	r0, [r7, #12]
 8106068:	460b      	mov	r3, r1
 810606a:	607a      	str	r2, [r7, #4]
 810606c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810606e:	4b37      	ldr	r3, [pc, #220]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106070:	681b      	ldr	r3, [r3, #0]
 8106072:	f023 0201 	bic.w	r2, r3, #1
 8106076:	4935      	ldr	r1, [pc, #212]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106078:	68fb      	ldr	r3, [r7, #12]
 810607a:	4313      	orrs	r3, r2
 810607c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	2b00      	cmp	r3, #0
 8106082:	d123      	bne.n	81060cc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8106084:	f7fd fd94 	bl	8103bb0 <HAL_GetCurrentCPUID>
 8106088:	4603      	mov	r3, r0
 810608a:	2b03      	cmp	r3, #3
 810608c:	d158      	bne.n	8106140 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810608e:	4b2f      	ldr	r3, [pc, #188]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106090:	691b      	ldr	r3, [r3, #16]
 8106092:	4a2e      	ldr	r2, [pc, #184]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106094:	f023 0301 	bic.w	r3, r3, #1
 8106098:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810609a:	4b2d      	ldr	r3, [pc, #180]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810609c:	691b      	ldr	r3, [r3, #16]
 810609e:	4a2c      	ldr	r2, [pc, #176]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81060a0:	f043 0304 	orr.w	r3, r3, #4
 81060a4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81060a6:	f3bf 8f4f 	dsb	sy
}
 81060aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81060ac:	f3bf 8f6f 	isb	sy
}
 81060b0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81060b2:	7afb      	ldrb	r3, [r7, #11]
 81060b4:	2b01      	cmp	r3, #1
 81060b6:	d101      	bne.n	81060bc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81060b8:	bf30      	wfi
 81060ba:	e000      	b.n	81060be <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81060bc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81060be:	4b24      	ldr	r3, [pc, #144]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81060c0:	691b      	ldr	r3, [r3, #16]
 81060c2:	4a23      	ldr	r2, [pc, #140]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81060c4:	f023 0304 	bic.w	r3, r3, #4
 81060c8:	6113      	str	r3, [r2, #16]
 81060ca:	e03c      	b.n	8106146 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	2b01      	cmp	r3, #1
 81060d0:	d123      	bne.n	810611a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81060d2:	f7fd fd6d 	bl	8103bb0 <HAL_GetCurrentCPUID>
 81060d6:	4603      	mov	r3, r0
 81060d8:	2b01      	cmp	r3, #1
 81060da:	d133      	bne.n	8106144 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81060dc:	4b1b      	ldr	r3, [pc, #108]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 81060de:	695b      	ldr	r3, [r3, #20]
 81060e0:	4a1a      	ldr	r2, [pc, #104]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 81060e2:	f023 0302 	bic.w	r3, r3, #2
 81060e6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81060e8:	4b19      	ldr	r3, [pc, #100]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81060ea:	691b      	ldr	r3, [r3, #16]
 81060ec:	4a18      	ldr	r2, [pc, #96]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81060ee:	f043 0304 	orr.w	r3, r3, #4
 81060f2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81060f4:	f3bf 8f4f 	dsb	sy
}
 81060f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81060fa:	f3bf 8f6f 	isb	sy
}
 81060fe:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106100:	7afb      	ldrb	r3, [r7, #11]
 8106102:	2b01      	cmp	r3, #1
 8106104:	d101      	bne.n	810610a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106106:	bf30      	wfi
 8106108:	e000      	b.n	810610c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810610a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810610c:	4b10      	ldr	r3, [pc, #64]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810610e:	691b      	ldr	r3, [r3, #16]
 8106110:	4a0f      	ldr	r2, [pc, #60]	; (8106150 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106112:	f023 0304 	bic.w	r3, r3, #4
 8106116:	6113      	str	r3, [r2, #16]
 8106118:	e015      	b.n	8106146 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810611a:	f7fd fd49 	bl	8103bb0 <HAL_GetCurrentCPUID>
 810611e:	4603      	mov	r3, r0
 8106120:	2b03      	cmp	r3, #3
 8106122:	d106      	bne.n	8106132 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106124:	4b09      	ldr	r3, [pc, #36]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106126:	691b      	ldr	r3, [r3, #16]
 8106128:	4a08      	ldr	r2, [pc, #32]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 810612a:	f023 0304 	bic.w	r3, r3, #4
 810612e:	6113      	str	r3, [r2, #16]
 8106130:	e009      	b.n	8106146 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8106132:	4b06      	ldr	r3, [pc, #24]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106134:	695b      	ldr	r3, [r3, #20]
 8106136:	4a05      	ldr	r2, [pc, #20]	; (810614c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106138:	f023 0304 	bic.w	r3, r3, #4
 810613c:	6153      	str	r3, [r2, #20]
 810613e:	e002      	b.n	8106146 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106140:	bf00      	nop
 8106142:	e000      	b.n	8106146 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106144:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8106146:	3710      	adds	r7, #16
 8106148:	46bd      	mov	sp, r7
 810614a:	bd80      	pop	{r7, pc}
 810614c:	58024800 	.word	0x58024800
 8106150:	e000ed00 	.word	0xe000ed00

08106154 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106154:	b580      	push	{r7, lr}
 8106156:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106158:	f7fd fd2a 	bl	8103bb0 <HAL_GetCurrentCPUID>
 810615c:	4603      	mov	r3, r0
 810615e:	2b03      	cmp	r3, #3
 8106160:	d101      	bne.n	8106166 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106162:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106164:	e001      	b.n	810616a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8106166:	bf40      	sev
    __WFE ();
 8106168:	bf20      	wfe
}
 810616a:	bf00      	nop
 810616c:	bd80      	pop	{r7, pc}
	...

08106170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106170:	b480      	push	{r7}
 8106172:	b089      	sub	sp, #36	; 0x24
 8106174:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8106176:	4bb3      	ldr	r3, [pc, #716]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106178:	691b      	ldr	r3, [r3, #16]
 810617a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810617e:	2b18      	cmp	r3, #24
 8106180:	f200 8155 	bhi.w	810642e <HAL_RCC_GetSysClockFreq+0x2be>
 8106184:	a201      	add	r2, pc, #4	; (adr r2, 810618c <HAL_RCC_GetSysClockFreq+0x1c>)
 8106186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810618a:	bf00      	nop
 810618c:	081061f1 	.word	0x081061f1
 8106190:	0810642f 	.word	0x0810642f
 8106194:	0810642f 	.word	0x0810642f
 8106198:	0810642f 	.word	0x0810642f
 810619c:	0810642f 	.word	0x0810642f
 81061a0:	0810642f 	.word	0x0810642f
 81061a4:	0810642f 	.word	0x0810642f
 81061a8:	0810642f 	.word	0x0810642f
 81061ac:	08106217 	.word	0x08106217
 81061b0:	0810642f 	.word	0x0810642f
 81061b4:	0810642f 	.word	0x0810642f
 81061b8:	0810642f 	.word	0x0810642f
 81061bc:	0810642f 	.word	0x0810642f
 81061c0:	0810642f 	.word	0x0810642f
 81061c4:	0810642f 	.word	0x0810642f
 81061c8:	0810642f 	.word	0x0810642f
 81061cc:	0810621d 	.word	0x0810621d
 81061d0:	0810642f 	.word	0x0810642f
 81061d4:	0810642f 	.word	0x0810642f
 81061d8:	0810642f 	.word	0x0810642f
 81061dc:	0810642f 	.word	0x0810642f
 81061e0:	0810642f 	.word	0x0810642f
 81061e4:	0810642f 	.word	0x0810642f
 81061e8:	0810642f 	.word	0x0810642f
 81061ec:	08106223 	.word	0x08106223
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81061f0:	4b94      	ldr	r3, [pc, #592]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81061f2:	681b      	ldr	r3, [r3, #0]
 81061f4:	f003 0320 	and.w	r3, r3, #32
 81061f8:	2b00      	cmp	r3, #0
 81061fa:	d009      	beq.n	8106210 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81061fc:	4b91      	ldr	r3, [pc, #580]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	08db      	lsrs	r3, r3, #3
 8106202:	f003 0303 	and.w	r3, r3, #3
 8106206:	4a90      	ldr	r2, [pc, #576]	; (8106448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106208:	fa22 f303 	lsr.w	r3, r2, r3
 810620c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810620e:	e111      	b.n	8106434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8106210:	4b8d      	ldr	r3, [pc, #564]	; (8106448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106212:	61bb      	str	r3, [r7, #24]
    break;
 8106214:	e10e      	b.n	8106434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8106216:	4b8d      	ldr	r3, [pc, #564]	; (810644c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106218:	61bb      	str	r3, [r7, #24]
    break;
 810621a:	e10b      	b.n	8106434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810621c:	4b8c      	ldr	r3, [pc, #560]	; (8106450 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810621e:	61bb      	str	r3, [r7, #24]
    break;
 8106220:	e108      	b.n	8106434 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106222:	4b88      	ldr	r3, [pc, #544]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106226:	f003 0303 	and.w	r3, r3, #3
 810622a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810622c:	4b85      	ldr	r3, [pc, #532]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106230:	091b      	lsrs	r3, r3, #4
 8106232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106236:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8106238:	4b82      	ldr	r3, [pc, #520]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810623c:	f003 0301 	and.w	r3, r3, #1
 8106240:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8106242:	4b80      	ldr	r3, [pc, #512]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106246:	08db      	lsrs	r3, r3, #3
 8106248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810624c:	68fa      	ldr	r2, [r7, #12]
 810624e:	fb02 f303 	mul.w	r3, r2, r3
 8106252:	ee07 3a90 	vmov	s15, r3
 8106256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810625a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810625e:	693b      	ldr	r3, [r7, #16]
 8106260:	2b00      	cmp	r3, #0
 8106262:	f000 80e1 	beq.w	8106428 <HAL_RCC_GetSysClockFreq+0x2b8>
 8106266:	697b      	ldr	r3, [r7, #20]
 8106268:	2b02      	cmp	r3, #2
 810626a:	f000 8083 	beq.w	8106374 <HAL_RCC_GetSysClockFreq+0x204>
 810626e:	697b      	ldr	r3, [r7, #20]
 8106270:	2b02      	cmp	r3, #2
 8106272:	f200 80a1 	bhi.w	81063b8 <HAL_RCC_GetSysClockFreq+0x248>
 8106276:	697b      	ldr	r3, [r7, #20]
 8106278:	2b00      	cmp	r3, #0
 810627a:	d003      	beq.n	8106284 <HAL_RCC_GetSysClockFreq+0x114>
 810627c:	697b      	ldr	r3, [r7, #20]
 810627e:	2b01      	cmp	r3, #1
 8106280:	d056      	beq.n	8106330 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106282:	e099      	b.n	81063b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106284:	4b6f      	ldr	r3, [pc, #444]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106286:	681b      	ldr	r3, [r3, #0]
 8106288:	f003 0320 	and.w	r3, r3, #32
 810628c:	2b00      	cmp	r3, #0
 810628e:	d02d      	beq.n	81062ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106290:	4b6c      	ldr	r3, [pc, #432]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106292:	681b      	ldr	r3, [r3, #0]
 8106294:	08db      	lsrs	r3, r3, #3
 8106296:	f003 0303 	and.w	r3, r3, #3
 810629a:	4a6b      	ldr	r2, [pc, #428]	; (8106448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810629c:	fa22 f303 	lsr.w	r3, r2, r3
 81062a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	ee07 3a90 	vmov	s15, r3
 81062a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062ac:	693b      	ldr	r3, [r7, #16]
 81062ae:	ee07 3a90 	vmov	s15, r3
 81062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062ba:	4b62      	ldr	r3, [pc, #392]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81062be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062c2:	ee07 3a90 	vmov	s15, r3
 81062c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81062ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106454 <HAL_RCC_GetSysClockFreq+0x2e4>
 81062d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81062ea:	e087      	b.n	81063fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81062ec:	693b      	ldr	r3, [r7, #16]
 81062ee:	ee07 3a90 	vmov	s15, r3
 81062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8106458 <HAL_RCC_GetSysClockFreq+0x2e8>
 81062fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062fe:	4b51      	ldr	r3, [pc, #324]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106306:	ee07 3a90 	vmov	s15, r3
 810630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810630e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106312:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106454 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810631a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810631e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106326:	ee67 7a27 	vmul.f32	s15, s14, s15
 810632a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810632e:	e065      	b.n	81063fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106330:	693b      	ldr	r3, [r7, #16]
 8106332:	ee07 3a90 	vmov	s15, r3
 8106336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810633a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810645c <HAL_RCC_GetSysClockFreq+0x2ec>
 810633e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106342:	4b40      	ldr	r3, [pc, #256]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810634a:	ee07 3a90 	vmov	s15, r3
 810634e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106352:	ed97 6a02 	vldr	s12, [r7, #8]
 8106356:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106454 <HAL_RCC_GetSysClockFreq+0x2e4>
 810635a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810635e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810636e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106372:	e043      	b.n	81063fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106374:	693b      	ldr	r3, [r7, #16]
 8106376:	ee07 3a90 	vmov	s15, r3
 810637a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810637e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8106460 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106386:	4b2f      	ldr	r3, [pc, #188]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810638a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810638e:	ee07 3a90 	vmov	s15, r3
 8106392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106396:	ed97 6a02 	vldr	s12, [r7, #8]
 810639a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106454 <HAL_RCC_GetSysClockFreq+0x2e4>
 810639e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81063b6:	e021      	b.n	81063fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81063b8:	693b      	ldr	r3, [r7, #16]
 81063ba:	ee07 3a90 	vmov	s15, r3
 81063be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810645c <HAL_RCC_GetSysClockFreq+0x2ec>
 81063c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81063ca:	4b1e      	ldr	r3, [pc, #120]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81063ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81063d2:	ee07 3a90 	vmov	s15, r3
 81063d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063da:	ed97 6a02 	vldr	s12, [r7, #8]
 81063de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106454 <HAL_RCC_GetSysClockFreq+0x2e4>
 81063e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81063e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81063ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81063ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81063f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81063fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81063fc:	4b11      	ldr	r3, [pc, #68]	; (8106444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106400:	0a5b      	lsrs	r3, r3, #9
 8106402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106406:	3301      	adds	r3, #1
 8106408:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810640a:	683b      	ldr	r3, [r7, #0]
 810640c:	ee07 3a90 	vmov	s15, r3
 8106410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106414:	edd7 6a07 	vldr	s13, [r7, #28]
 8106418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810641c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106420:	ee17 3a90 	vmov	r3, s15
 8106424:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8106426:	e005      	b.n	8106434 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8106428:	2300      	movs	r3, #0
 810642a:	61bb      	str	r3, [r7, #24]
    break;
 810642c:	e002      	b.n	8106434 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810642e:	4b07      	ldr	r3, [pc, #28]	; (810644c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106430:	61bb      	str	r3, [r7, #24]
    break;
 8106432:	bf00      	nop
  }

  return sysclockfreq;
 8106434:	69bb      	ldr	r3, [r7, #24]
}
 8106436:	4618      	mov	r0, r3
 8106438:	3724      	adds	r7, #36	; 0x24
 810643a:	46bd      	mov	sp, r7
 810643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106440:	4770      	bx	lr
 8106442:	bf00      	nop
 8106444:	58024400 	.word	0x58024400
 8106448:	03d09000 	.word	0x03d09000
 810644c:	003d0900 	.word	0x003d0900
 8106450:	00f42400 	.word	0x00f42400
 8106454:	46000000 	.word	0x46000000
 8106458:	4c742400 	.word	0x4c742400
 810645c:	4a742400 	.word	0x4a742400
 8106460:	4b742400 	.word	0x4b742400

08106464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106464:	b580      	push	{r7, lr}
 8106466:	b082      	sub	sp, #8
 8106468:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810646a:	f7ff fe81 	bl	8106170 <HAL_RCC_GetSysClockFreq>
 810646e:	4602      	mov	r2, r0
 8106470:	4b11      	ldr	r3, [pc, #68]	; (81064b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8106472:	699b      	ldr	r3, [r3, #24]
 8106474:	0a1b      	lsrs	r3, r3, #8
 8106476:	f003 030f 	and.w	r3, r3, #15
 810647a:	4910      	ldr	r1, [pc, #64]	; (81064bc <HAL_RCC_GetHCLKFreq+0x58>)
 810647c:	5ccb      	ldrb	r3, [r1, r3]
 810647e:	f003 031f 	and.w	r3, r3, #31
 8106482:	fa22 f303 	lsr.w	r3, r2, r3
 8106486:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106488:	4b0b      	ldr	r3, [pc, #44]	; (81064b8 <HAL_RCC_GetHCLKFreq+0x54>)
 810648a:	699b      	ldr	r3, [r3, #24]
 810648c:	f003 030f 	and.w	r3, r3, #15
 8106490:	4a0a      	ldr	r2, [pc, #40]	; (81064bc <HAL_RCC_GetHCLKFreq+0x58>)
 8106492:	5cd3      	ldrb	r3, [r2, r3]
 8106494:	f003 031f 	and.w	r3, r3, #31
 8106498:	687a      	ldr	r2, [r7, #4]
 810649a:	fa22 f303 	lsr.w	r3, r2, r3
 810649e:	4a08      	ldr	r2, [pc, #32]	; (81064c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81064a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81064a2:	4b07      	ldr	r3, [pc, #28]	; (81064c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81064a4:	681b      	ldr	r3, [r3, #0]
 81064a6:	4a07      	ldr	r2, [pc, #28]	; (81064c4 <HAL_RCC_GetHCLKFreq+0x60>)
 81064a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81064aa:	4b05      	ldr	r3, [pc, #20]	; (81064c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81064ac:	681b      	ldr	r3, [r3, #0]
}
 81064ae:	4618      	mov	r0, r3
 81064b0:	3708      	adds	r7, #8
 81064b2:	46bd      	mov	sp, r7
 81064b4:	bd80      	pop	{r7, pc}
 81064b6:	bf00      	nop
 81064b8:	58024400 	.word	0x58024400
 81064bc:	08113888 	.word	0x08113888
 81064c0:	10000004 	.word	0x10000004
 81064c4:	10000000 	.word	0x10000000

081064c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81064c8:	b580      	push	{r7, lr}
 81064ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81064cc:	f7ff ffca 	bl	8106464 <HAL_RCC_GetHCLKFreq>
 81064d0:	4602      	mov	r2, r0
 81064d2:	4b06      	ldr	r3, [pc, #24]	; (81064ec <HAL_RCC_GetPCLK1Freq+0x24>)
 81064d4:	69db      	ldr	r3, [r3, #28]
 81064d6:	091b      	lsrs	r3, r3, #4
 81064d8:	f003 0307 	and.w	r3, r3, #7
 81064dc:	4904      	ldr	r1, [pc, #16]	; (81064f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81064de:	5ccb      	ldrb	r3, [r1, r3]
 81064e0:	f003 031f 	and.w	r3, r3, #31
 81064e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81064e8:	4618      	mov	r0, r3
 81064ea:	bd80      	pop	{r7, pc}
 81064ec:	58024400 	.word	0x58024400
 81064f0:	08113888 	.word	0x08113888

081064f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81064f4:	b580      	push	{r7, lr}
 81064f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81064f8:	f7ff ffb4 	bl	8106464 <HAL_RCC_GetHCLKFreq>
 81064fc:	4602      	mov	r2, r0
 81064fe:	4b06      	ldr	r3, [pc, #24]	; (8106518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8106500:	69db      	ldr	r3, [r3, #28]
 8106502:	0a1b      	lsrs	r3, r3, #8
 8106504:	f003 0307 	and.w	r3, r3, #7
 8106508:	4904      	ldr	r1, [pc, #16]	; (810651c <HAL_RCC_GetPCLK2Freq+0x28>)
 810650a:	5ccb      	ldrb	r3, [r1, r3]
 810650c:	f003 031f 	and.w	r3, r3, #31
 8106510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8106514:	4618      	mov	r0, r3
 8106516:	bd80      	pop	{r7, pc}
 8106518:	58024400 	.word	0x58024400
 810651c:	08113888 	.word	0x08113888

08106520 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106520:	b480      	push	{r7}
 8106522:	b083      	sub	sp, #12
 8106524:	af00      	add	r7, sp, #0
 8106526:	6078      	str	r0, [r7, #4]
 8106528:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	223f      	movs	r2, #63	; 0x3f
 810652e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106530:	4b1a      	ldr	r3, [pc, #104]	; (810659c <HAL_RCC_GetClockConfig+0x7c>)
 8106532:	691b      	ldr	r3, [r3, #16]
 8106534:	f003 0207 	and.w	r2, r3, #7
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810653c:	4b17      	ldr	r3, [pc, #92]	; (810659c <HAL_RCC_GetClockConfig+0x7c>)
 810653e:	699b      	ldr	r3, [r3, #24]
 8106540:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8106548:	4b14      	ldr	r3, [pc, #80]	; (810659c <HAL_RCC_GetClockConfig+0x7c>)
 810654a:	699b      	ldr	r3, [r3, #24]
 810654c:	f003 020f 	and.w	r2, r3, #15
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8106554:	4b11      	ldr	r3, [pc, #68]	; (810659c <HAL_RCC_GetClockConfig+0x7c>)
 8106556:	699b      	ldr	r3, [r3, #24]
 8106558:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106560:	4b0e      	ldr	r3, [pc, #56]	; (810659c <HAL_RCC_GetClockConfig+0x7c>)
 8106562:	69db      	ldr	r3, [r3, #28]
 8106564:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810656c:	4b0b      	ldr	r3, [pc, #44]	; (810659c <HAL_RCC_GetClockConfig+0x7c>)
 810656e:	69db      	ldr	r3, [r3, #28]
 8106570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8106578:	4b08      	ldr	r3, [pc, #32]	; (810659c <HAL_RCC_GetClockConfig+0x7c>)
 810657a:	6a1b      	ldr	r3, [r3, #32]
 810657c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8106584:	4b06      	ldr	r3, [pc, #24]	; (81065a0 <HAL_RCC_GetClockConfig+0x80>)
 8106586:	681b      	ldr	r3, [r3, #0]
 8106588:	f003 020f 	and.w	r2, r3, #15
 810658c:	683b      	ldr	r3, [r7, #0]
 810658e:	601a      	str	r2, [r3, #0]
}
 8106590:	bf00      	nop
 8106592:	370c      	adds	r7, #12
 8106594:	46bd      	mov	sp, r7
 8106596:	f85d 7b04 	ldr.w	r7, [sp], #4
 810659a:	4770      	bx	lr
 810659c:	58024400 	.word	0x58024400
 81065a0:	52002000 	.word	0x52002000

081065a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81065a4:	b580      	push	{r7, lr}
 81065a6:	b086      	sub	sp, #24
 81065a8:	af00      	add	r7, sp, #0
 81065aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81065ac:	2300      	movs	r3, #0
 81065ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81065b0:	2300      	movs	r3, #0
 81065b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	681b      	ldr	r3, [r3, #0]
 81065b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81065bc:	2b00      	cmp	r3, #0
 81065be:	d03f      	beq.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81065c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81065c8:	d02a      	beq.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81065ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81065ce:	d824      	bhi.n	810661a <HAL_RCCEx_PeriphCLKConfig+0x76>
 81065d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81065d4:	d018      	beq.n	8106608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81065d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81065da:	d81e      	bhi.n	810661a <HAL_RCCEx_PeriphCLKConfig+0x76>
 81065dc:	2b00      	cmp	r3, #0
 81065de:	d003      	beq.n	81065e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81065e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81065e4:	d007      	beq.n	81065f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81065e6:	e018      	b.n	810661a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065e8:	4bab      	ldr	r3, [pc, #684]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065ec:	4aaa      	ldr	r2, [pc, #680]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81065ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81065f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81065f4:	e015      	b.n	8106622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	3304      	adds	r3, #4
 81065fa:	2102      	movs	r1, #2
 81065fc:	4618      	mov	r0, r3
 81065fe:	f001 fff3 	bl	81085e8 <RCCEx_PLL2_Config>
 8106602:	4603      	mov	r3, r0
 8106604:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106606:	e00c      	b.n	8106622 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106608:	687b      	ldr	r3, [r7, #4]
 810660a:	3324      	adds	r3, #36	; 0x24
 810660c:	2102      	movs	r1, #2
 810660e:	4618      	mov	r0, r3
 8106610:	f002 f89c 	bl	810874c <RCCEx_PLL3_Config>
 8106614:	4603      	mov	r3, r0
 8106616:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8106618:	e003      	b.n	8106622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810661a:	2301      	movs	r3, #1
 810661c:	75fb      	strb	r3, [r7, #23]
      break;
 810661e:	e000      	b.n	8106622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8106620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106622:	7dfb      	ldrb	r3, [r7, #23]
 8106624:	2b00      	cmp	r3, #0
 8106626:	d109      	bne.n	810663c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106628:	4b9b      	ldr	r3, [pc, #620]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810662a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810662c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106634:	4998      	ldr	r1, [pc, #608]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106636:	4313      	orrs	r3, r2
 8106638:	650b      	str	r3, [r1, #80]	; 0x50
 810663a:	e001      	b.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810663c:	7dfb      	ldrb	r3, [r7, #23]
 810663e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106648:	2b00      	cmp	r3, #0
 810664a:	d03d      	beq.n	81066c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 810664c:	687b      	ldr	r3, [r7, #4]
 810664e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106650:	2b04      	cmp	r3, #4
 8106652:	d826      	bhi.n	81066a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8106654:	a201      	add	r2, pc, #4	; (adr r2, 810665c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8106656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810665a:	bf00      	nop
 810665c:	08106671 	.word	0x08106671
 8106660:	0810667f 	.word	0x0810667f
 8106664:	08106691 	.word	0x08106691
 8106668:	081066a9 	.word	0x081066a9
 810666c:	081066a9 	.word	0x081066a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106670:	4b89      	ldr	r3, [pc, #548]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106674:	4a88      	ldr	r2, [pc, #544]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810667a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810667c:	e015      	b.n	81066aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	3304      	adds	r3, #4
 8106682:	2100      	movs	r1, #0
 8106684:	4618      	mov	r0, r3
 8106686:	f001 ffaf 	bl	81085e8 <RCCEx_PLL2_Config>
 810668a:	4603      	mov	r3, r0
 810668c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810668e:	e00c      	b.n	81066aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	3324      	adds	r3, #36	; 0x24
 8106694:	2100      	movs	r1, #0
 8106696:	4618      	mov	r0, r3
 8106698:	f002 f858 	bl	810874c <RCCEx_PLL3_Config>
 810669c:	4603      	mov	r3, r0
 810669e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81066a0:	e003      	b.n	81066aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81066a2:	2301      	movs	r3, #1
 81066a4:	75fb      	strb	r3, [r7, #23]
      break;
 81066a6:	e000      	b.n	81066aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81066a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81066aa:	7dfb      	ldrb	r3, [r7, #23]
 81066ac:	2b00      	cmp	r3, #0
 81066ae:	d109      	bne.n	81066c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81066b0:	4b79      	ldr	r3, [pc, #484]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81066b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81066b4:	f023 0207 	bic.w	r2, r3, #7
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066bc:	4976      	ldr	r1, [pc, #472]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81066be:	4313      	orrs	r3, r2
 81066c0:	650b      	str	r3, [r1, #80]	; 0x50
 81066c2:	e001      	b.n	81066c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066c4:	7dfb      	ldrb	r3, [r7, #23]
 81066c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81066d0:	2b00      	cmp	r3, #0
 81066d2:	d042      	beq.n	810675a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81066d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81066dc:	d02b      	beq.n	8106736 <HAL_RCCEx_PeriphCLKConfig+0x192>
 81066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81066e2:	d825      	bhi.n	8106730 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81066e4:	2bc0      	cmp	r3, #192	; 0xc0
 81066e6:	d028      	beq.n	810673a <HAL_RCCEx_PeriphCLKConfig+0x196>
 81066e8:	2bc0      	cmp	r3, #192	; 0xc0
 81066ea:	d821      	bhi.n	8106730 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81066ec:	2b80      	cmp	r3, #128	; 0x80
 81066ee:	d016      	beq.n	810671e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81066f0:	2b80      	cmp	r3, #128	; 0x80
 81066f2:	d81d      	bhi.n	8106730 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81066f4:	2b00      	cmp	r3, #0
 81066f6:	d002      	beq.n	81066fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81066f8:	2b40      	cmp	r3, #64	; 0x40
 81066fa:	d007      	beq.n	810670c <HAL_RCCEx_PeriphCLKConfig+0x168>
 81066fc:	e018      	b.n	8106730 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81066fe:	4b66      	ldr	r3, [pc, #408]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106702:	4a65      	ldr	r2, [pc, #404]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106708:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810670a:	e017      	b.n	810673c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810670c:	687b      	ldr	r3, [r7, #4]
 810670e:	3304      	adds	r3, #4
 8106710:	2100      	movs	r1, #0
 8106712:	4618      	mov	r0, r3
 8106714:	f001 ff68 	bl	81085e8 <RCCEx_PLL2_Config>
 8106718:	4603      	mov	r3, r0
 810671a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810671c:	e00e      	b.n	810673c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	3324      	adds	r3, #36	; 0x24
 8106722:	2100      	movs	r1, #0
 8106724:	4618      	mov	r0, r3
 8106726:	f002 f811 	bl	810874c <RCCEx_PLL3_Config>
 810672a:	4603      	mov	r3, r0
 810672c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810672e:	e005      	b.n	810673c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106730:	2301      	movs	r3, #1
 8106732:	75fb      	strb	r3, [r7, #23]
      break;
 8106734:	e002      	b.n	810673c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8106736:	bf00      	nop
 8106738:	e000      	b.n	810673c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810673a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810673c:	7dfb      	ldrb	r3, [r7, #23]
 810673e:	2b00      	cmp	r3, #0
 8106740:	d109      	bne.n	8106756 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106742:	4b55      	ldr	r3, [pc, #340]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106746:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810674e:	4952      	ldr	r1, [pc, #328]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106750:	4313      	orrs	r3, r2
 8106752:	650b      	str	r3, [r1, #80]	; 0x50
 8106754:	e001      	b.n	810675a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106756:	7dfb      	ldrb	r3, [r7, #23]
 8106758:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810675a:	687b      	ldr	r3, [r7, #4]
 810675c:	681b      	ldr	r3, [r3, #0]
 810675e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8106762:	2b00      	cmp	r3, #0
 8106764:	d049      	beq.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810676c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106770:	d030      	beq.n	81067d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8106772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106776:	d82a      	bhi.n	81067ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106778:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810677c:	d02c      	beq.n	81067d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810677e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106782:	d824      	bhi.n	81067ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106788:	d018      	beq.n	81067bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 810678a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810678e:	d81e      	bhi.n	81067ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8106790:	2b00      	cmp	r3, #0
 8106792:	d003      	beq.n	810679c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8106794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106798:	d007      	beq.n	81067aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 810679a:	e018      	b.n	81067ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810679c:	4b3e      	ldr	r3, [pc, #248]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81067a0:	4a3d      	ldr	r2, [pc, #244]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81067a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81067a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81067a8:	e017      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	3304      	adds	r3, #4
 81067ae:	2100      	movs	r1, #0
 81067b0:	4618      	mov	r0, r3
 81067b2:	f001 ff19 	bl	81085e8 <RCCEx_PLL2_Config>
 81067b6:	4603      	mov	r3, r0
 81067b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81067ba:	e00e      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	3324      	adds	r3, #36	; 0x24
 81067c0:	2100      	movs	r1, #0
 81067c2:	4618      	mov	r0, r3
 81067c4:	f001 ffc2 	bl	810874c <RCCEx_PLL3_Config>
 81067c8:	4603      	mov	r3, r0
 81067ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81067cc:	e005      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81067ce:	2301      	movs	r3, #1
 81067d0:	75fb      	strb	r3, [r7, #23]
      break;
 81067d2:	e002      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81067d4:	bf00      	nop
 81067d6:	e000      	b.n	81067da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81067d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81067da:	7dfb      	ldrb	r3, [r7, #23]
 81067dc:	2b00      	cmp	r3, #0
 81067de:	d10a      	bne.n	81067f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81067e0:	4b2d      	ldr	r3, [pc, #180]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81067e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81067e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81067e8:	687b      	ldr	r3, [r7, #4]
 81067ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81067ee:	492a      	ldr	r1, [pc, #168]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81067f0:	4313      	orrs	r3, r2
 81067f2:	658b      	str	r3, [r1, #88]	; 0x58
 81067f4:	e001      	b.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067f6:	7dfb      	ldrb	r3, [r7, #23]
 81067f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	681b      	ldr	r3, [r3, #0]
 81067fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106802:	2b00      	cmp	r3, #0
 8106804:	d04c      	beq.n	81068a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810680c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106810:	d030      	beq.n	8106874 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8106812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106816:	d82a      	bhi.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106818:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810681c:	d02c      	beq.n	8106878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 810681e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106822:	d824      	bhi.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106828:	d018      	beq.n	810685c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810682a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810682e:	d81e      	bhi.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8106830:	2b00      	cmp	r3, #0
 8106832:	d003      	beq.n	810683c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8106834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106838:	d007      	beq.n	810684a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810683a:	e018      	b.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810683c:	4b16      	ldr	r3, [pc, #88]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106840:	4a15      	ldr	r2, [pc, #84]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8106848:	e017      	b.n	810687a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	3304      	adds	r3, #4
 810684e:	2100      	movs	r1, #0
 8106850:	4618      	mov	r0, r3
 8106852:	f001 fec9 	bl	81085e8 <RCCEx_PLL2_Config>
 8106856:	4603      	mov	r3, r0
 8106858:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810685a:	e00e      	b.n	810687a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	3324      	adds	r3, #36	; 0x24
 8106860:	2100      	movs	r1, #0
 8106862:	4618      	mov	r0, r3
 8106864:	f001 ff72 	bl	810874c <RCCEx_PLL3_Config>
 8106868:	4603      	mov	r3, r0
 810686a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810686c:	e005      	b.n	810687a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810686e:	2301      	movs	r3, #1
 8106870:	75fb      	strb	r3, [r7, #23]
      break;
 8106872:	e002      	b.n	810687a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8106874:	bf00      	nop
 8106876:	e000      	b.n	810687a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8106878:	bf00      	nop
    }

    if(ret == HAL_OK)
 810687a:	7dfb      	ldrb	r3, [r7, #23]
 810687c:	2b00      	cmp	r3, #0
 810687e:	d10d      	bne.n	810689c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106880:	4b05      	ldr	r3, [pc, #20]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106884:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810688e:	4902      	ldr	r1, [pc, #8]	; (8106898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8106890:	4313      	orrs	r3, r2
 8106892:	658b      	str	r3, [r1, #88]	; 0x58
 8106894:	e004      	b.n	81068a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8106896:	bf00      	nop
 8106898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810689c:	7dfb      	ldrb	r3, [r7, #23]
 810689e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81068a8:	2b00      	cmp	r3, #0
 81068aa:	d032      	beq.n	8106912 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81068b0:	2b30      	cmp	r3, #48	; 0x30
 81068b2:	d01c      	beq.n	81068ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81068b4:	2b30      	cmp	r3, #48	; 0x30
 81068b6:	d817      	bhi.n	81068e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81068b8:	2b20      	cmp	r3, #32
 81068ba:	d00c      	beq.n	81068d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 81068bc:	2b20      	cmp	r3, #32
 81068be:	d813      	bhi.n	81068e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81068c0:	2b00      	cmp	r3, #0
 81068c2:	d016      	beq.n	81068f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81068c4:	2b10      	cmp	r3, #16
 81068c6:	d10f      	bne.n	81068e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068c8:	4baf      	ldr	r3, [pc, #700]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068cc:	4aae      	ldr	r2, [pc, #696]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81068ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81068d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81068d4:	e00e      	b.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81068d6:	687b      	ldr	r3, [r7, #4]
 81068d8:	3304      	adds	r3, #4
 81068da:	2102      	movs	r1, #2
 81068dc:	4618      	mov	r0, r3
 81068de:	f001 fe83 	bl	81085e8 <RCCEx_PLL2_Config>
 81068e2:	4603      	mov	r3, r0
 81068e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81068e6:	e005      	b.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81068e8:	2301      	movs	r3, #1
 81068ea:	75fb      	strb	r3, [r7, #23]
      break;
 81068ec:	e002      	b.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81068ee:	bf00      	nop
 81068f0:	e000      	b.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81068f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81068f4:	7dfb      	ldrb	r3, [r7, #23]
 81068f6:	2b00      	cmp	r3, #0
 81068f8:	d109      	bne.n	810690e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81068fa:	4ba3      	ldr	r3, [pc, #652]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81068fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81068fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106906:	49a0      	ldr	r1, [pc, #640]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106908:	4313      	orrs	r3, r2
 810690a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810690c:	e001      	b.n	8106912 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810690e:	7dfb      	ldrb	r3, [r7, #23]
 8106910:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	681b      	ldr	r3, [r3, #0]
 8106916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810691a:	2b00      	cmp	r3, #0
 810691c:	d047      	beq.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106926:	d030      	beq.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8106928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810692c:	d82a      	bhi.n	8106984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810692e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106932:	d02c      	beq.n	810698e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8106934:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106938:	d824      	bhi.n	8106984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810693a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810693e:	d018      	beq.n	8106972 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8106940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106944:	d81e      	bhi.n	8106984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8106946:	2b00      	cmp	r3, #0
 8106948:	d003      	beq.n	8106952 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810694e:	d007      	beq.n	8106960 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8106950:	e018      	b.n	8106984 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106952:	4b8d      	ldr	r3, [pc, #564]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106956:	4a8c      	ldr	r2, [pc, #560]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810695c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810695e:	e017      	b.n	8106990 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	3304      	adds	r3, #4
 8106964:	2100      	movs	r1, #0
 8106966:	4618      	mov	r0, r3
 8106968:	f001 fe3e 	bl	81085e8 <RCCEx_PLL2_Config>
 810696c:	4603      	mov	r3, r0
 810696e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8106970:	e00e      	b.n	8106990 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8106972:	687b      	ldr	r3, [r7, #4]
 8106974:	3324      	adds	r3, #36	; 0x24
 8106976:	2100      	movs	r1, #0
 8106978:	4618      	mov	r0, r3
 810697a:	f001 fee7 	bl	810874c <RCCEx_PLL3_Config>
 810697e:	4603      	mov	r3, r0
 8106980:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8106982:	e005      	b.n	8106990 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106984:	2301      	movs	r3, #1
 8106986:	75fb      	strb	r3, [r7, #23]
      break;
 8106988:	e002      	b.n	8106990 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810698a:	bf00      	nop
 810698c:	e000      	b.n	8106990 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810698e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106990:	7dfb      	ldrb	r3, [r7, #23]
 8106992:	2b00      	cmp	r3, #0
 8106994:	d109      	bne.n	81069aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106996:	4b7c      	ldr	r3, [pc, #496]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810699a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810699e:	687b      	ldr	r3, [r7, #4]
 81069a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81069a2:	4979      	ldr	r1, [pc, #484]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81069a4:	4313      	orrs	r3, r2
 81069a6:	650b      	str	r3, [r1, #80]	; 0x50
 81069a8:	e001      	b.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069aa:	7dfb      	ldrb	r3, [r7, #23]
 81069ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	681b      	ldr	r3, [r3, #0]
 81069b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	d049      	beq.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81069be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81069c2:	d02e      	beq.n	8106a22 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81069c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81069c8:	d828      	bhi.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81069ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81069ce:	d02a      	beq.n	8106a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
 81069d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81069d4:	d822      	bhi.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81069d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81069da:	d026      	beq.n	8106a2a <HAL_RCCEx_PeriphCLKConfig+0x486>
 81069dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81069e0:	d81c      	bhi.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81069e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81069e6:	d010      	beq.n	8106a0a <HAL_RCCEx_PeriphCLKConfig+0x466>
 81069e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81069ec:	d816      	bhi.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81069ee:	2b00      	cmp	r3, #0
 81069f0:	d01d      	beq.n	8106a2e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81069f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81069f6:	d111      	bne.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	3304      	adds	r3, #4
 81069fc:	2101      	movs	r1, #1
 81069fe:	4618      	mov	r0, r3
 8106a00:	f001 fdf2 	bl	81085e8 <RCCEx_PLL2_Config>
 8106a04:	4603      	mov	r3, r0
 8106a06:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8106a08:	e012      	b.n	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106a0a:	687b      	ldr	r3, [r7, #4]
 8106a0c:	3324      	adds	r3, #36	; 0x24
 8106a0e:	2101      	movs	r1, #1
 8106a10:	4618      	mov	r0, r3
 8106a12:	f001 fe9b 	bl	810874c <RCCEx_PLL3_Config>
 8106a16:	4603      	mov	r3, r0
 8106a18:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8106a1a:	e009      	b.n	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106a1c:	2301      	movs	r3, #1
 8106a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8106a20:	e006      	b.n	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106a22:	bf00      	nop
 8106a24:	e004      	b.n	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106a26:	bf00      	nop
 8106a28:	e002      	b.n	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106a2a:	bf00      	nop
 8106a2c:	e000      	b.n	8106a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8106a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106a30:	7dfb      	ldrb	r3, [r7, #23]
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	d109      	bne.n	8106a4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106a36:	4b54      	ldr	r3, [pc, #336]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106a3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106a42:	4951      	ldr	r1, [pc, #324]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106a44:	4313      	orrs	r3, r2
 8106a46:	650b      	str	r3, [r1, #80]	; 0x50
 8106a48:	e001      	b.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a4a:	7dfb      	ldrb	r3, [r7, #23]
 8106a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8106a56:	2b00      	cmp	r3, #0
 8106a58:	d04b      	beq.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8106a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106a64:	d02e      	beq.n	8106ac4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8106a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106a6a:	d828      	bhi.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106a70:	d02a      	beq.n	8106ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8106a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106a76:	d822      	bhi.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106a78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106a7c:	d026      	beq.n	8106acc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8106a7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106a82:	d81c      	bhi.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a88:	d010      	beq.n	8106aac <HAL_RCCEx_PeriphCLKConfig+0x508>
 8106a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a8e:	d816      	bhi.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	d01d      	beq.n	8106ad0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8106a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106a98:	d111      	bne.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	3304      	adds	r3, #4
 8106a9e:	2101      	movs	r1, #1
 8106aa0:	4618      	mov	r0, r3
 8106aa2:	f001 fda1 	bl	81085e8 <RCCEx_PLL2_Config>
 8106aa6:	4603      	mov	r3, r0
 8106aa8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106aaa:	e012      	b.n	8106ad2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	3324      	adds	r3, #36	; 0x24
 8106ab0:	2101      	movs	r1, #1
 8106ab2:	4618      	mov	r0, r3
 8106ab4:	f001 fe4a 	bl	810874c <RCCEx_PLL3_Config>
 8106ab8:	4603      	mov	r3, r0
 8106aba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8106abc:	e009      	b.n	8106ad2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8106abe:	2301      	movs	r3, #1
 8106ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8106ac2:	e006      	b.n	8106ad2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106ac4:	bf00      	nop
 8106ac6:	e004      	b.n	8106ad2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106ac8:	bf00      	nop
 8106aca:	e002      	b.n	8106ad2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106acc:	bf00      	nop
 8106ace:	e000      	b.n	8106ad2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8106ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106ad2:	7dfb      	ldrb	r3, [r7, #23]
 8106ad4:	2b00      	cmp	r3, #0
 8106ad6:	d10a      	bne.n	8106aee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106ad8:	4b2b      	ldr	r3, [pc, #172]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106adc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8106ae6:	4928      	ldr	r1, [pc, #160]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106ae8:	4313      	orrs	r3, r2
 8106aea:	658b      	str	r3, [r1, #88]	; 0x58
 8106aec:	e001      	b.n	8106af2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106aee:	7dfb      	ldrb	r3, [r7, #23]
 8106af0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	681b      	ldr	r3, [r3, #0]
 8106af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106afa:	2b00      	cmp	r3, #0
 8106afc:	d02f      	beq.n	8106b5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b06:	d00e      	beq.n	8106b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8106b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b0c:	d814      	bhi.n	8106b38 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8106b0e:	2b00      	cmp	r3, #0
 8106b10:	d015      	beq.n	8106b3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106b16:	d10f      	bne.n	8106b38 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b18:	4b1b      	ldr	r3, [pc, #108]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b1c:	4a1a      	ldr	r2, [pc, #104]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106b22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8106b24:	e00c      	b.n	8106b40 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106b26:	687b      	ldr	r3, [r7, #4]
 8106b28:	3304      	adds	r3, #4
 8106b2a:	2101      	movs	r1, #1
 8106b2c:	4618      	mov	r0, r3
 8106b2e:	f001 fd5b 	bl	81085e8 <RCCEx_PLL2_Config>
 8106b32:	4603      	mov	r3, r0
 8106b34:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8106b36:	e003      	b.n	8106b40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106b38:	2301      	movs	r3, #1
 8106b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8106b3c:	e000      	b.n	8106b40 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8106b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106b40:	7dfb      	ldrb	r3, [r7, #23]
 8106b42:	2b00      	cmp	r3, #0
 8106b44:	d109      	bne.n	8106b5a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106b46:	4b10      	ldr	r3, [pc, #64]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106b4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8106b4e:	687b      	ldr	r3, [r7, #4]
 8106b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106b52:	490d      	ldr	r1, [pc, #52]	; (8106b88 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8106b54:	4313      	orrs	r3, r2
 8106b56:	650b      	str	r3, [r1, #80]	; 0x50
 8106b58:	e001      	b.n	8106b5e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b5a:	7dfb      	ldrb	r3, [r7, #23]
 8106b5c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	681b      	ldr	r3, [r3, #0]
 8106b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8106b66:	2b00      	cmp	r3, #0
 8106b68:	d033      	beq.n	8106bd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106b6e:	2b03      	cmp	r3, #3
 8106b70:	d81c      	bhi.n	8106bac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8106b72:	a201      	add	r2, pc, #4	; (adr r2, 8106b78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8106b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b78:	08106bb3 	.word	0x08106bb3
 8106b7c:	08106b8d 	.word	0x08106b8d
 8106b80:	08106b9b 	.word	0x08106b9b
 8106b84:	08106bb3 	.word	0x08106bb3
 8106b88:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b8c:	4bb9      	ldr	r3, [pc, #740]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b90:	4ab8      	ldr	r2, [pc, #736]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106b98:	e00c      	b.n	8106bb4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	3304      	adds	r3, #4
 8106b9e:	2102      	movs	r1, #2
 8106ba0:	4618      	mov	r0, r3
 8106ba2:	f001 fd21 	bl	81085e8 <RCCEx_PLL2_Config>
 8106ba6:	4603      	mov	r3, r0
 8106ba8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8106baa:	e003      	b.n	8106bb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8106bac:	2301      	movs	r3, #1
 8106bae:	75fb      	strb	r3, [r7, #23]
      break;
 8106bb0:	e000      	b.n	8106bb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8106bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106bb4:	7dfb      	ldrb	r3, [r7, #23]
 8106bb6:	2b00      	cmp	r3, #0
 8106bb8:	d109      	bne.n	8106bce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106bba:	4bae      	ldr	r3, [pc, #696]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106bbe:	f023 0203 	bic.w	r2, r3, #3
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106bc6:	49ab      	ldr	r1, [pc, #684]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106bc8:	4313      	orrs	r3, r2
 8106bca:	64cb      	str	r3, [r1, #76]	; 0x4c
 8106bcc:	e001      	b.n	8106bd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106bce:	7dfb      	ldrb	r3, [r7, #23]
 8106bd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	681b      	ldr	r3, [r3, #0]
 8106bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8106bda:	2b00      	cmp	r3, #0
 8106bdc:	f000 8088 	beq.w	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106be0:	4ba5      	ldr	r3, [pc, #660]	; (8106e78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	4aa4      	ldr	r2, [pc, #656]	; (8106e78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8106be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106bec:	f7fb fb6a 	bl	81022c4 <HAL_GetTick>
 8106bf0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106bf2:	e009      	b.n	8106c08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106bf4:	f7fb fb66 	bl	81022c4 <HAL_GetTick>
 8106bf8:	4602      	mov	r2, r0
 8106bfa:	693b      	ldr	r3, [r7, #16]
 8106bfc:	1ad3      	subs	r3, r2, r3
 8106bfe:	2b64      	cmp	r3, #100	; 0x64
 8106c00:	d902      	bls.n	8106c08 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8106c02:	2303      	movs	r3, #3
 8106c04:	75fb      	strb	r3, [r7, #23]
        break;
 8106c06:	e005      	b.n	8106c14 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106c08:	4b9b      	ldr	r3, [pc, #620]	; (8106e78 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8106c0a:	681b      	ldr	r3, [r3, #0]
 8106c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106c10:	2b00      	cmp	r3, #0
 8106c12:	d0ef      	beq.n	8106bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8106c14:	7dfb      	ldrb	r3, [r7, #23]
 8106c16:	2b00      	cmp	r3, #0
 8106c18:	d168      	bne.n	8106cec <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106c1a:	4b96      	ldr	r3, [pc, #600]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106c24:	4053      	eors	r3, r2
 8106c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106c2a:	2b00      	cmp	r3, #0
 8106c2c:	d013      	beq.n	8106c56 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106c2e:	4b91      	ldr	r3, [pc, #580]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106c36:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106c38:	4b8e      	ldr	r3, [pc, #568]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106c3c:	4a8d      	ldr	r2, [pc, #564]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8106c42:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8106c44:	4b8b      	ldr	r3, [pc, #556]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106c48:	4a8a      	ldr	r2, [pc, #552]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106c4e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8106c50:	4a88      	ldr	r2, [pc, #544]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c52:	68fb      	ldr	r3, [r7, #12]
 8106c54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106c60:	d115      	bne.n	8106c8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106c62:	f7fb fb2f 	bl	81022c4 <HAL_GetTick>
 8106c66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106c68:	e00b      	b.n	8106c82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8106c6a:	f7fb fb2b 	bl	81022c4 <HAL_GetTick>
 8106c6e:	4602      	mov	r2, r0
 8106c70:	693b      	ldr	r3, [r7, #16]
 8106c72:	1ad3      	subs	r3, r2, r3
 8106c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8106c78:	4293      	cmp	r3, r2
 8106c7a:	d902      	bls.n	8106c82 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8106c7c:	2303      	movs	r3, #3
 8106c7e:	75fb      	strb	r3, [r7, #23]
            break;
 8106c80:	e005      	b.n	8106c8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106c82:	4b7c      	ldr	r3, [pc, #496]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106c86:	f003 0302 	and.w	r3, r3, #2
 8106c8a:	2b00      	cmp	r3, #0
 8106c8c:	d0ed      	beq.n	8106c6a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8106c8e:	7dfb      	ldrb	r3, [r7, #23]
 8106c90:	2b00      	cmp	r3, #0
 8106c92:	d128      	bne.n	8106ce6 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106c94:	687b      	ldr	r3, [r7, #4]
 8106c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106ca2:	d10f      	bne.n	8106cc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8106ca4:	4b73      	ldr	r3, [pc, #460]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106ca6:	691b      	ldr	r3, [r3, #16]
 8106ca8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106cb2:	091b      	lsrs	r3, r3, #4
 8106cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106cb8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8106cbc:	496d      	ldr	r1, [pc, #436]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cbe:	4313      	orrs	r3, r2
 8106cc0:	610b      	str	r3, [r1, #16]
 8106cc2:	e005      	b.n	8106cd0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8106cc4:	4b6b      	ldr	r3, [pc, #428]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cc6:	691b      	ldr	r3, [r3, #16]
 8106cc8:	4a6a      	ldr	r2, [pc, #424]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8106cce:	6113      	str	r3, [r2, #16]
 8106cd0:	4b68      	ldr	r3, [pc, #416]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106cde:	4965      	ldr	r1, [pc, #404]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106ce0:	4313      	orrs	r3, r2
 8106ce2:	670b      	str	r3, [r1, #112]	; 0x70
 8106ce4:	e004      	b.n	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8106ce6:	7dfb      	ldrb	r3, [r7, #23]
 8106ce8:	75bb      	strb	r3, [r7, #22]
 8106cea:	e001      	b.n	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cec:	7dfb      	ldrb	r3, [r7, #23]
 8106cee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	681b      	ldr	r3, [r3, #0]
 8106cf4:	f003 0301 	and.w	r3, r3, #1
 8106cf8:	2b00      	cmp	r3, #0
 8106cfa:	d07e      	beq.n	8106dfa <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106d00:	2b28      	cmp	r3, #40	; 0x28
 8106d02:	d867      	bhi.n	8106dd4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8106d04:	a201      	add	r2, pc, #4	; (adr r2, 8106d0c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8106d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d0a:	bf00      	nop
 8106d0c:	08106ddb 	.word	0x08106ddb
 8106d10:	08106dd5 	.word	0x08106dd5
 8106d14:	08106dd5 	.word	0x08106dd5
 8106d18:	08106dd5 	.word	0x08106dd5
 8106d1c:	08106dd5 	.word	0x08106dd5
 8106d20:	08106dd5 	.word	0x08106dd5
 8106d24:	08106dd5 	.word	0x08106dd5
 8106d28:	08106dd5 	.word	0x08106dd5
 8106d2c:	08106db1 	.word	0x08106db1
 8106d30:	08106dd5 	.word	0x08106dd5
 8106d34:	08106dd5 	.word	0x08106dd5
 8106d38:	08106dd5 	.word	0x08106dd5
 8106d3c:	08106dd5 	.word	0x08106dd5
 8106d40:	08106dd5 	.word	0x08106dd5
 8106d44:	08106dd5 	.word	0x08106dd5
 8106d48:	08106dd5 	.word	0x08106dd5
 8106d4c:	08106dc3 	.word	0x08106dc3
 8106d50:	08106dd5 	.word	0x08106dd5
 8106d54:	08106dd5 	.word	0x08106dd5
 8106d58:	08106dd5 	.word	0x08106dd5
 8106d5c:	08106dd5 	.word	0x08106dd5
 8106d60:	08106dd5 	.word	0x08106dd5
 8106d64:	08106dd5 	.word	0x08106dd5
 8106d68:	08106dd5 	.word	0x08106dd5
 8106d6c:	08106ddb 	.word	0x08106ddb
 8106d70:	08106dd5 	.word	0x08106dd5
 8106d74:	08106dd5 	.word	0x08106dd5
 8106d78:	08106dd5 	.word	0x08106dd5
 8106d7c:	08106dd5 	.word	0x08106dd5
 8106d80:	08106dd5 	.word	0x08106dd5
 8106d84:	08106dd5 	.word	0x08106dd5
 8106d88:	08106dd5 	.word	0x08106dd5
 8106d8c:	08106ddb 	.word	0x08106ddb
 8106d90:	08106dd5 	.word	0x08106dd5
 8106d94:	08106dd5 	.word	0x08106dd5
 8106d98:	08106dd5 	.word	0x08106dd5
 8106d9c:	08106dd5 	.word	0x08106dd5
 8106da0:	08106dd5 	.word	0x08106dd5
 8106da4:	08106dd5 	.word	0x08106dd5
 8106da8:	08106dd5 	.word	0x08106dd5
 8106dac:	08106ddb 	.word	0x08106ddb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	3304      	adds	r3, #4
 8106db4:	2101      	movs	r1, #1
 8106db6:	4618      	mov	r0, r3
 8106db8:	f001 fc16 	bl	81085e8 <RCCEx_PLL2_Config>
 8106dbc:	4603      	mov	r3, r0
 8106dbe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106dc0:	e00c      	b.n	8106ddc <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106dc2:	687b      	ldr	r3, [r7, #4]
 8106dc4:	3324      	adds	r3, #36	; 0x24
 8106dc6:	2101      	movs	r1, #1
 8106dc8:	4618      	mov	r0, r3
 8106dca:	f001 fcbf 	bl	810874c <RCCEx_PLL3_Config>
 8106dce:	4603      	mov	r3, r0
 8106dd0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8106dd2:	e003      	b.n	8106ddc <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106dd4:	2301      	movs	r3, #1
 8106dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8106dd8:	e000      	b.n	8106ddc <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8106dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106ddc:	7dfb      	ldrb	r3, [r7, #23]
 8106dde:	2b00      	cmp	r3, #0
 8106de0:	d109      	bne.n	8106df6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106de2:	4b24      	ldr	r3, [pc, #144]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106de6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8106dea:	687b      	ldr	r3, [r7, #4]
 8106dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106dee:	4921      	ldr	r1, [pc, #132]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106df0:	4313      	orrs	r3, r2
 8106df2:	654b      	str	r3, [r1, #84]	; 0x54
 8106df4:	e001      	b.n	8106dfa <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106df6:	7dfb      	ldrb	r3, [r7, #23]
 8106df8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	681b      	ldr	r3, [r3, #0]
 8106dfe:	f003 0302 	and.w	r3, r3, #2
 8106e02:	2b00      	cmp	r3, #0
 8106e04:	d03c      	beq.n	8106e80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e0a:	2b05      	cmp	r3, #5
 8106e0c:	d820      	bhi.n	8106e50 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8106e0e:	a201      	add	r2, pc, #4	; (adr r2, 8106e14 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8106e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e14:	08106e57 	.word	0x08106e57
 8106e18:	08106e2d 	.word	0x08106e2d
 8106e1c:	08106e3f 	.word	0x08106e3f
 8106e20:	08106e57 	.word	0x08106e57
 8106e24:	08106e57 	.word	0x08106e57
 8106e28:	08106e57 	.word	0x08106e57
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	3304      	adds	r3, #4
 8106e30:	2101      	movs	r1, #1
 8106e32:	4618      	mov	r0, r3
 8106e34:	f001 fbd8 	bl	81085e8 <RCCEx_PLL2_Config>
 8106e38:	4603      	mov	r3, r0
 8106e3a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106e3c:	e00c      	b.n	8106e58 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106e3e:	687b      	ldr	r3, [r7, #4]
 8106e40:	3324      	adds	r3, #36	; 0x24
 8106e42:	2101      	movs	r1, #1
 8106e44:	4618      	mov	r0, r3
 8106e46:	f001 fc81 	bl	810874c <RCCEx_PLL3_Config>
 8106e4a:	4603      	mov	r3, r0
 8106e4c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106e4e:	e003      	b.n	8106e58 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106e50:	2301      	movs	r3, #1
 8106e52:	75fb      	strb	r3, [r7, #23]
      break;
 8106e54:	e000      	b.n	8106e58 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8106e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106e58:	7dfb      	ldrb	r3, [r7, #23]
 8106e5a:	2b00      	cmp	r3, #0
 8106e5c:	d10e      	bne.n	8106e7c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106e5e:	4b05      	ldr	r3, [pc, #20]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106e62:	f023 0207 	bic.w	r2, r3, #7
 8106e66:	687b      	ldr	r3, [r7, #4]
 8106e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e6a:	4902      	ldr	r1, [pc, #8]	; (8106e74 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8106e6c:	4313      	orrs	r3, r2
 8106e6e:	654b      	str	r3, [r1, #84]	; 0x54
 8106e70:	e006      	b.n	8106e80 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8106e72:	bf00      	nop
 8106e74:	58024400 	.word	0x58024400
 8106e78:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e7c:	7dfb      	ldrb	r3, [r7, #23]
 8106e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	681b      	ldr	r3, [r3, #0]
 8106e84:	f003 0304 	and.w	r3, r3, #4
 8106e88:	2b00      	cmp	r3, #0
 8106e8a:	d039      	beq.n	8106f00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8106e8c:	687b      	ldr	r3, [r7, #4]
 8106e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106e92:	2b05      	cmp	r3, #5
 8106e94:	d820      	bhi.n	8106ed8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8106e96:	a201      	add	r2, pc, #4	; (adr r2, 8106e9c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8106e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e9c:	08106edf 	.word	0x08106edf
 8106ea0:	08106eb5 	.word	0x08106eb5
 8106ea4:	08106ec7 	.word	0x08106ec7
 8106ea8:	08106edf 	.word	0x08106edf
 8106eac:	08106edf 	.word	0x08106edf
 8106eb0:	08106edf 	.word	0x08106edf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106eb4:	687b      	ldr	r3, [r7, #4]
 8106eb6:	3304      	adds	r3, #4
 8106eb8:	2101      	movs	r1, #1
 8106eba:	4618      	mov	r0, r3
 8106ebc:	f001 fb94 	bl	81085e8 <RCCEx_PLL2_Config>
 8106ec0:	4603      	mov	r3, r0
 8106ec2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106ec4:	e00c      	b.n	8106ee0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106ec6:	687b      	ldr	r3, [r7, #4]
 8106ec8:	3324      	adds	r3, #36	; 0x24
 8106eca:	2101      	movs	r1, #1
 8106ecc:	4618      	mov	r0, r3
 8106ece:	f001 fc3d 	bl	810874c <RCCEx_PLL3_Config>
 8106ed2:	4603      	mov	r3, r0
 8106ed4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8106ed6:	e003      	b.n	8106ee0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106ed8:	2301      	movs	r3, #1
 8106eda:	75fb      	strb	r3, [r7, #23]
      break;
 8106edc:	e000      	b.n	8106ee0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8106ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106ee0:	7dfb      	ldrb	r3, [r7, #23]
 8106ee2:	2b00      	cmp	r3, #0
 8106ee4:	d10a      	bne.n	8106efc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106ee6:	4bb7      	ldr	r3, [pc, #732]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106eea:	f023 0207 	bic.w	r2, r3, #7
 8106eee:	687b      	ldr	r3, [r7, #4]
 8106ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106ef4:	49b3      	ldr	r1, [pc, #716]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106ef6:	4313      	orrs	r3, r2
 8106ef8:	658b      	str	r3, [r1, #88]	; 0x58
 8106efa:	e001      	b.n	8106f00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106efc:	7dfb      	ldrb	r3, [r7, #23]
 8106efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106f00:	687b      	ldr	r3, [r7, #4]
 8106f02:	681b      	ldr	r3, [r3, #0]
 8106f04:	f003 0320 	and.w	r3, r3, #32
 8106f08:	2b00      	cmp	r3, #0
 8106f0a:	d04b      	beq.n	8106fa4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106f16:	d02e      	beq.n	8106f76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8106f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106f1c:	d828      	bhi.n	8106f70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106f22:	d02a      	beq.n	8106f7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8106f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106f28:	d822      	bhi.n	8106f70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106f2e:	d026      	beq.n	8106f7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8106f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106f34:	d81c      	bhi.n	8106f70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f3a:	d010      	beq.n	8106f5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8106f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f40:	d816      	bhi.n	8106f70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8106f42:	2b00      	cmp	r3, #0
 8106f44:	d01d      	beq.n	8106f82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8106f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106f4a:	d111      	bne.n	8106f70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	3304      	adds	r3, #4
 8106f50:	2100      	movs	r1, #0
 8106f52:	4618      	mov	r0, r3
 8106f54:	f001 fb48 	bl	81085e8 <RCCEx_PLL2_Config>
 8106f58:	4603      	mov	r3, r0
 8106f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106f5c:	e012      	b.n	8106f84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	3324      	adds	r3, #36	; 0x24
 8106f62:	2102      	movs	r1, #2
 8106f64:	4618      	mov	r0, r3
 8106f66:	f001 fbf1 	bl	810874c <RCCEx_PLL3_Config>
 8106f6a:	4603      	mov	r3, r0
 8106f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8106f6e:	e009      	b.n	8106f84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106f70:	2301      	movs	r3, #1
 8106f72:	75fb      	strb	r3, [r7, #23]
      break;
 8106f74:	e006      	b.n	8106f84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106f76:	bf00      	nop
 8106f78:	e004      	b.n	8106f84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106f7a:	bf00      	nop
 8106f7c:	e002      	b.n	8106f84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106f7e:	bf00      	nop
 8106f80:	e000      	b.n	8106f84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8106f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106f84:	7dfb      	ldrb	r3, [r7, #23]
 8106f86:	2b00      	cmp	r3, #0
 8106f88:	d10a      	bne.n	8106fa0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106f8a:	4b8e      	ldr	r3, [pc, #568]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106f8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8106f92:	687b      	ldr	r3, [r7, #4]
 8106f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106f98:	498a      	ldr	r1, [pc, #552]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8106f9a:	4313      	orrs	r3, r2
 8106f9c:	654b      	str	r3, [r1, #84]	; 0x54
 8106f9e:	e001      	b.n	8106fa4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106fa0:	7dfb      	ldrb	r3, [r7, #23]
 8106fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	681b      	ldr	r3, [r3, #0]
 8106fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106fac:	2b00      	cmp	r3, #0
 8106fae:	d04b      	beq.n	8107048 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106fb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106fba:	d02e      	beq.n	810701a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8106fbc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106fc0:	d828      	bhi.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106fc6:	d02a      	beq.n	810701e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8106fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106fcc:	d822      	bhi.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106fd2:	d026      	beq.n	8107022 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8106fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8106fd8:	d81c      	bhi.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106fde:	d010      	beq.n	8107002 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8106fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106fe4:	d816      	bhi.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	d01d      	beq.n	8107026 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8106fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106fee:	d111      	bne.n	8107014 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106ff0:	687b      	ldr	r3, [r7, #4]
 8106ff2:	3304      	adds	r3, #4
 8106ff4:	2100      	movs	r1, #0
 8106ff6:	4618      	mov	r0, r3
 8106ff8:	f001 faf6 	bl	81085e8 <RCCEx_PLL2_Config>
 8106ffc:	4603      	mov	r3, r0
 8106ffe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8107000:	e012      	b.n	8107028 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	3324      	adds	r3, #36	; 0x24
 8107006:	2102      	movs	r1, #2
 8107008:	4618      	mov	r0, r3
 810700a:	f001 fb9f 	bl	810874c <RCCEx_PLL3_Config>
 810700e:	4603      	mov	r3, r0
 8107010:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8107012:	e009      	b.n	8107028 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107014:	2301      	movs	r3, #1
 8107016:	75fb      	strb	r3, [r7, #23]
      break;
 8107018:	e006      	b.n	8107028 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810701a:	bf00      	nop
 810701c:	e004      	b.n	8107028 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810701e:	bf00      	nop
 8107020:	e002      	b.n	8107028 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107022:	bf00      	nop
 8107024:	e000      	b.n	8107028 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8107026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107028:	7dfb      	ldrb	r3, [r7, #23]
 810702a:	2b00      	cmp	r3, #0
 810702c:	d10a      	bne.n	8107044 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810702e:	4b65      	ldr	r3, [pc, #404]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8107030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107032:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8107036:	687b      	ldr	r3, [r7, #4]
 8107038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810703c:	4961      	ldr	r1, [pc, #388]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810703e:	4313      	orrs	r3, r2
 8107040:	658b      	str	r3, [r1, #88]	; 0x58
 8107042:	e001      	b.n	8107048 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107044:	7dfb      	ldrb	r3, [r7, #23]
 8107046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107050:	2b00      	cmp	r3, #0
 8107052:	d04b      	beq.n	81070ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8107054:	687b      	ldr	r3, [r7, #4]
 8107056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810705a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810705e:	d02e      	beq.n	81070be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8107060:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8107064:	d828      	bhi.n	81070b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8107066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810706a:	d02a      	beq.n	81070c2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810706c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107070:	d822      	bhi.n	81070b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8107072:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8107076:	d026      	beq.n	81070c6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8107078:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810707c:	d81c      	bhi.n	81070b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810707e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107082:	d010      	beq.n	81070a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8107084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107088:	d816      	bhi.n	81070b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810708a:	2b00      	cmp	r3, #0
 810708c:	d01d      	beq.n	81070ca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810708e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107092:	d111      	bne.n	81070b8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8107094:	687b      	ldr	r3, [r7, #4]
 8107096:	3304      	adds	r3, #4
 8107098:	2100      	movs	r1, #0
 810709a:	4618      	mov	r0, r3
 810709c:	f001 faa4 	bl	81085e8 <RCCEx_PLL2_Config>
 81070a0:	4603      	mov	r3, r0
 81070a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81070a4:	e012      	b.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	3324      	adds	r3, #36	; 0x24
 81070aa:	2102      	movs	r1, #2
 81070ac:	4618      	mov	r0, r3
 81070ae:	f001 fb4d 	bl	810874c <RCCEx_PLL3_Config>
 81070b2:	4603      	mov	r3, r0
 81070b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81070b6:	e009      	b.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81070b8:	2301      	movs	r3, #1
 81070ba:	75fb      	strb	r3, [r7, #23]
      break;
 81070bc:	e006      	b.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81070be:	bf00      	nop
 81070c0:	e004      	b.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81070c2:	bf00      	nop
 81070c4:	e002      	b.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81070c6:	bf00      	nop
 81070c8:	e000      	b.n	81070cc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81070ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81070cc:	7dfb      	ldrb	r3, [r7, #23]
 81070ce:	2b00      	cmp	r3, #0
 81070d0:	d10a      	bne.n	81070e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81070d2:	4b3c      	ldr	r3, [pc, #240]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81070d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81070d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81070e0:	4938      	ldr	r1, [pc, #224]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81070e2:	4313      	orrs	r3, r2
 81070e4:	658b      	str	r3, [r1, #88]	; 0x58
 81070e6:	e001      	b.n	81070ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070e8:	7dfb      	ldrb	r3, [r7, #23]
 81070ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81070ec:	687b      	ldr	r3, [r7, #4]
 81070ee:	681b      	ldr	r3, [r3, #0]
 81070f0:	f003 0308 	and.w	r3, r3, #8
 81070f4:	2b00      	cmp	r3, #0
 81070f6:	d01a      	beq.n	810712e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81070fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107102:	d10a      	bne.n	810711a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8107104:	687b      	ldr	r3, [r7, #4]
 8107106:	3324      	adds	r3, #36	; 0x24
 8107108:	2102      	movs	r1, #2
 810710a:	4618      	mov	r0, r3
 810710c:	f001 fb1e 	bl	810874c <RCCEx_PLL3_Config>
 8107110:	4603      	mov	r3, r0
 8107112:	2b00      	cmp	r3, #0
 8107114:	d001      	beq.n	810711a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8107116:	2301      	movs	r3, #1
 8107118:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810711a:	4b2a      	ldr	r3, [pc, #168]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810711e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107128:	4926      	ldr	r1, [pc, #152]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810712a:	4313      	orrs	r3, r2
 810712c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	681b      	ldr	r3, [r3, #0]
 8107132:	f003 0310 	and.w	r3, r3, #16
 8107136:	2b00      	cmp	r3, #0
 8107138:	d01a      	beq.n	8107170 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8107140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107144:	d10a      	bne.n	810715c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	3324      	adds	r3, #36	; 0x24
 810714a:	2102      	movs	r1, #2
 810714c:	4618      	mov	r0, r3
 810714e:	f001 fafd 	bl	810874c <RCCEx_PLL3_Config>
 8107152:	4603      	mov	r3, r0
 8107154:	2b00      	cmp	r3, #0
 8107156:	d001      	beq.n	810715c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8107158:	2301      	movs	r3, #1
 810715a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810715c:	4b19      	ldr	r3, [pc, #100]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810716a:	4916      	ldr	r1, [pc, #88]	; (81071c4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810716c:	4313      	orrs	r3, r2
 810716e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	681b      	ldr	r3, [r3, #0]
 8107174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8107178:	2b00      	cmp	r3, #0
 810717a:	d036      	beq.n	81071ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8107182:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107186:	d01f      	beq.n	81071c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8107188:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810718c:	d817      	bhi.n	81071be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810718e:	2b00      	cmp	r3, #0
 8107190:	d003      	beq.n	810719a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8107192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107196:	d009      	beq.n	81071ac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8107198:	e011      	b.n	81071be <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	3304      	adds	r3, #4
 810719e:	2100      	movs	r1, #0
 81071a0:	4618      	mov	r0, r3
 81071a2:	f001 fa21 	bl	81085e8 <RCCEx_PLL2_Config>
 81071a6:	4603      	mov	r3, r0
 81071a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81071aa:	e00e      	b.n	81071ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	3324      	adds	r3, #36	; 0x24
 81071b0:	2102      	movs	r1, #2
 81071b2:	4618      	mov	r0, r3
 81071b4:	f001 faca 	bl	810874c <RCCEx_PLL3_Config>
 81071b8:	4603      	mov	r3, r0
 81071ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81071bc:	e005      	b.n	81071ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81071be:	2301      	movs	r3, #1
 81071c0:	75fb      	strb	r3, [r7, #23]
      break;
 81071c2:	e002      	b.n	81071ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81071c4:	58024400 	.word	0x58024400
      break;
 81071c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81071ca:	7dfb      	ldrb	r3, [r7, #23]
 81071cc:	2b00      	cmp	r3, #0
 81071ce:	d10a      	bne.n	81071e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81071d0:	4b93      	ldr	r3, [pc, #588]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81071d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81071d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81071de:	4990      	ldr	r1, [pc, #576]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81071e0:	4313      	orrs	r3, r2
 81071e2:	658b      	str	r3, [r1, #88]	; 0x58
 81071e4:	e001      	b.n	81071ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071e6:	7dfb      	ldrb	r3, [r7, #23]
 81071e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81071ea:	687b      	ldr	r3, [r7, #4]
 81071ec:	681b      	ldr	r3, [r3, #0]
 81071ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81071f2:	2b00      	cmp	r3, #0
 81071f4:	d033      	beq.n	810725e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81071f6:	687b      	ldr	r3, [r7, #4]
 81071f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81071fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107200:	d01c      	beq.n	810723c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8107202:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107206:	d816      	bhi.n	8107236 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8107208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810720c:	d003      	beq.n	8107216 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810720e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107212:	d007      	beq.n	8107224 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8107214:	e00f      	b.n	8107236 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107216:	4b82      	ldr	r3, [pc, #520]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810721a:	4a81      	ldr	r2, [pc, #516]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810721c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107220:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8107222:	e00c      	b.n	810723e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8107224:	687b      	ldr	r3, [r7, #4]
 8107226:	3324      	adds	r3, #36	; 0x24
 8107228:	2101      	movs	r1, #1
 810722a:	4618      	mov	r0, r3
 810722c:	f001 fa8e 	bl	810874c <RCCEx_PLL3_Config>
 8107230:	4603      	mov	r3, r0
 8107232:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8107234:	e003      	b.n	810723e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107236:	2301      	movs	r3, #1
 8107238:	75fb      	strb	r3, [r7, #23]
      break;
 810723a:	e000      	b.n	810723e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810723c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810723e:	7dfb      	ldrb	r3, [r7, #23]
 8107240:	2b00      	cmp	r3, #0
 8107242:	d10a      	bne.n	810725a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8107244:	4b76      	ldr	r3, [pc, #472]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107252:	4973      	ldr	r1, [pc, #460]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107254:	4313      	orrs	r3, r2
 8107256:	654b      	str	r3, [r1, #84]	; 0x54
 8107258:	e001      	b.n	810725e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810725a:	7dfb      	ldrb	r3, [r7, #23]
 810725c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810725e:	687b      	ldr	r3, [r7, #4]
 8107260:	681b      	ldr	r3, [r3, #0]
 8107262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107266:	2b00      	cmp	r3, #0
 8107268:	d029      	beq.n	81072be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810726a:	687b      	ldr	r3, [r7, #4]
 810726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810726e:	2b00      	cmp	r3, #0
 8107270:	d003      	beq.n	810727a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8107272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107276:	d007      	beq.n	8107288 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8107278:	e00f      	b.n	810729a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810727a:	4b69      	ldr	r3, [pc, #420]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810727e:	4a68      	ldr	r2, [pc, #416]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8107286:	e00b      	b.n	81072a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8107288:	687b      	ldr	r3, [r7, #4]
 810728a:	3304      	adds	r3, #4
 810728c:	2102      	movs	r1, #2
 810728e:	4618      	mov	r0, r3
 8107290:	f001 f9aa 	bl	81085e8 <RCCEx_PLL2_Config>
 8107294:	4603      	mov	r3, r0
 8107296:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8107298:	e002      	b.n	81072a0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810729a:	2301      	movs	r3, #1
 810729c:	75fb      	strb	r3, [r7, #23]
      break;
 810729e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81072a0:	7dfb      	ldrb	r3, [r7, #23]
 81072a2:	2b00      	cmp	r3, #0
 81072a4:	d109      	bne.n	81072ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81072a6:	4b5e      	ldr	r3, [pc, #376]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81072a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81072ae:	687b      	ldr	r3, [r7, #4]
 81072b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81072b2:	495b      	ldr	r1, [pc, #364]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81072b4:	4313      	orrs	r3, r2
 81072b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81072b8:	e001      	b.n	81072be <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072ba:	7dfb      	ldrb	r3, [r7, #23]
 81072bc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	681b      	ldr	r3, [r3, #0]
 81072c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81072c6:	2b00      	cmp	r3, #0
 81072c8:	d00a      	beq.n	81072e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	3324      	adds	r3, #36	; 0x24
 81072ce:	2102      	movs	r1, #2
 81072d0:	4618      	mov	r0, r3
 81072d2:	f001 fa3b 	bl	810874c <RCCEx_PLL3_Config>
 81072d6:	4603      	mov	r3, r0
 81072d8:	2b00      	cmp	r3, #0
 81072da:	d001      	beq.n	81072e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81072dc:	2301      	movs	r3, #1
 81072de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	681b      	ldr	r3, [r3, #0]
 81072e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81072e8:	2b00      	cmp	r3, #0
 81072ea:	d030      	beq.n	810734e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81072ec:	687b      	ldr	r3, [r7, #4]
 81072ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81072f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81072f4:	d017      	beq.n	8107326 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81072f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81072fa:	d811      	bhi.n	8107320 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81072fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107300:	d013      	beq.n	810732a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8107302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107306:	d80b      	bhi.n	8107320 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8107308:	2b00      	cmp	r3, #0
 810730a:	d010      	beq.n	810732e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810730c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107310:	d106      	bne.n	8107320 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107312:	4b43      	ldr	r3, [pc, #268]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107316:	4a42      	ldr	r2, [pc, #264]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810731c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810731e:	e007      	b.n	8107330 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8107320:	2301      	movs	r3, #1
 8107322:	75fb      	strb	r3, [r7, #23]
      break;
 8107324:	e004      	b.n	8107330 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8107326:	bf00      	nop
 8107328:	e002      	b.n	8107330 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810732a:	bf00      	nop
 810732c:	e000      	b.n	8107330 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810732e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8107330:	7dfb      	ldrb	r3, [r7, #23]
 8107332:	2b00      	cmp	r3, #0
 8107334:	d109      	bne.n	810734a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107336:	4b3a      	ldr	r3, [pc, #232]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810733a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107342:	4937      	ldr	r1, [pc, #220]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107344:	4313      	orrs	r3, r2
 8107346:	654b      	str	r3, [r1, #84]	; 0x54
 8107348:	e001      	b.n	810734e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810734a:	7dfb      	ldrb	r3, [r7, #23]
 810734c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810734e:	687b      	ldr	r3, [r7, #4]
 8107350:	681b      	ldr	r3, [r3, #0]
 8107352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8107356:	2b00      	cmp	r3, #0
 8107358:	d008      	beq.n	810736c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810735a:	4b31      	ldr	r3, [pc, #196]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810735c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810735e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8107362:	687b      	ldr	r3, [r7, #4]
 8107364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107366:	492e      	ldr	r1, [pc, #184]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107368:	4313      	orrs	r3, r2
 810736a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	681b      	ldr	r3, [r3, #0]
 8107370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107374:	2b00      	cmp	r3, #0
 8107376:	d009      	beq.n	810738c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107378:	4b29      	ldr	r3, [pc, #164]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810737a:	691b      	ldr	r3, [r3, #16]
 810737c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8107386:	4926      	ldr	r1, [pc, #152]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107388:	4313      	orrs	r3, r2
 810738a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810738c:	687b      	ldr	r3, [r7, #4]
 810738e:	681b      	ldr	r3, [r3, #0]
 8107390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8107394:	2b00      	cmp	r3, #0
 8107396:	d008      	beq.n	81073aa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8107398:	4b21      	ldr	r3, [pc, #132]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810739a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810739c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81073a4:	491e      	ldr	r1, [pc, #120]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073a6:	4313      	orrs	r3, r2
 81073a8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	681b      	ldr	r3, [r3, #0]
 81073ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81073b2:	2b00      	cmp	r3, #0
 81073b4:	d00d      	beq.n	81073d2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81073b6:	4b1a      	ldr	r3, [pc, #104]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073b8:	691b      	ldr	r3, [r3, #16]
 81073ba:	4a19      	ldr	r2, [pc, #100]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81073c0:	6113      	str	r3, [r2, #16]
 81073c2:	4b17      	ldr	r3, [pc, #92]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073c4:	691a      	ldr	r2, [r3, #16]
 81073c6:	687b      	ldr	r3, [r7, #4]
 81073c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81073cc:	4914      	ldr	r1, [pc, #80]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073ce:	4313      	orrs	r3, r2
 81073d0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	2b00      	cmp	r3, #0
 81073d8:	da08      	bge.n	81073ec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81073da:	4b11      	ldr	r3, [pc, #68]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81073de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81073e2:	687b      	ldr	r3, [r7, #4]
 81073e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81073e6:	490e      	ldr	r1, [pc, #56]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073e8:	4313      	orrs	r3, r2
 81073ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81073ec:	687b      	ldr	r3, [r7, #4]
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81073f4:	2b00      	cmp	r3, #0
 81073f6:	d009      	beq.n	810740c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81073f8:	4b09      	ldr	r3, [pc, #36]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81073fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81073fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8107400:	687b      	ldr	r3, [r7, #4]
 8107402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107406:	4906      	ldr	r1, [pc, #24]	; (8107420 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8107408:	4313      	orrs	r3, r2
 810740a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810740c:	7dbb      	ldrb	r3, [r7, #22]
 810740e:	2b00      	cmp	r3, #0
 8107410:	d101      	bne.n	8107416 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8107412:	2300      	movs	r3, #0
 8107414:	e000      	b.n	8107418 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8107416:	2301      	movs	r3, #1
}
 8107418:	4618      	mov	r0, r3
 810741a:	3718      	adds	r7, #24
 810741c:	46bd      	mov	sp, r7
 810741e:	bd80      	pop	{r7, pc}
 8107420:	58024400 	.word	0x58024400

08107424 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8107424:	b580      	push	{r7, lr}
 8107426:	b090      	sub	sp, #64	; 0x40
 8107428:	af00      	add	r7, sp, #0
 810742a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810742c:	687b      	ldr	r3, [r7, #4]
 810742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107432:	f040 8095 	bne.w	8107560 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8107436:	4bae      	ldr	r3, [pc, #696]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810743a:	f003 0307 	and.w	r3, r3, #7
 810743e:	633b      	str	r3, [r7, #48]	; 0x30
 8107440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107442:	2b04      	cmp	r3, #4
 8107444:	f200 8088 	bhi.w	8107558 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8107448:	a201      	add	r2, pc, #4	; (adr r2, 8107450 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 810744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810744e:	bf00      	nop
 8107450:	08107465 	.word	0x08107465
 8107454:	0810748d 	.word	0x0810748d
 8107458:	081074b5 	.word	0x081074b5
 810745c:	08107551 	.word	0x08107551
 8107460:	081074dd 	.word	0x081074dd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107464:	4ba2      	ldr	r3, [pc, #648]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107466:	681b      	ldr	r3, [r3, #0]
 8107468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810746c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107470:	d108      	bne.n	8107484 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107476:	4618      	mov	r0, r3
 8107478:	f000 ff64 	bl	8108344 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 810747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810747e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107480:	f000 bc95 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107484:	2300      	movs	r3, #0
 8107486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107488:	f000 bc91 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810748c:	4b98      	ldr	r3, [pc, #608]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810748e:	681b      	ldr	r3, [r3, #0]
 8107490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107498:	d108      	bne.n	81074ac <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810749a:	f107 0318 	add.w	r3, r7, #24
 810749e:	4618      	mov	r0, r3
 81074a0:	f000 fca8 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81074a4:	69bb      	ldr	r3, [r7, #24]
 81074a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81074a8:	f000 bc81 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81074ac:	2300      	movs	r3, #0
 81074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81074b0:	f000 bc7d 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81074b4:	4b8e      	ldr	r3, [pc, #568]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81074b6:	681b      	ldr	r3, [r3, #0]
 81074b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81074bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81074c0:	d108      	bne.n	81074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81074c2:	f107 030c 	add.w	r3, r7, #12
 81074c6:	4618      	mov	r0, r3
 81074c8:	f000 fde8 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81074cc:	68fb      	ldr	r3, [r7, #12]
 81074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81074d0:	f000 bc6d 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81074d4:	2300      	movs	r3, #0
 81074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81074d8:	f000 bc69 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81074dc:	4b84      	ldr	r3, [pc, #528]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81074de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81074e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81074e4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81074e6:	4b82      	ldr	r3, [pc, #520]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81074e8:	681b      	ldr	r3, [r3, #0]
 81074ea:	f003 0304 	and.w	r3, r3, #4
 81074ee:	2b04      	cmp	r3, #4
 81074f0:	d10c      	bne.n	810750c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 81074f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074f4:	2b00      	cmp	r3, #0
 81074f6:	d109      	bne.n	810750c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81074f8:	4b7d      	ldr	r3, [pc, #500]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81074fa:	681b      	ldr	r3, [r3, #0]
 81074fc:	08db      	lsrs	r3, r3, #3
 81074fe:	f003 0303 	and.w	r3, r3, #3
 8107502:	4a7c      	ldr	r2, [pc, #496]	; (81076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8107504:	fa22 f303 	lsr.w	r3, r2, r3
 8107508:	63fb      	str	r3, [r7, #60]	; 0x3c
 810750a:	e01f      	b.n	810754c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810750c:	4b78      	ldr	r3, [pc, #480]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107518:	d106      	bne.n	8107528 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 810751a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810751c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107520:	d102      	bne.n	8107528 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8107522:	4b75      	ldr	r3, [pc, #468]	; (81076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8107524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107526:	e011      	b.n	810754c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107528:	4b71      	ldr	r3, [pc, #452]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810752a:	681b      	ldr	r3, [r3, #0]
 810752c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107534:	d106      	bne.n	8107544 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8107536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810753c:	d102      	bne.n	8107544 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810753e:	4b6f      	ldr	r3, [pc, #444]	; (81076fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8107540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107542:	e003      	b.n	810754c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107544:	2300      	movs	r3, #0
 8107546:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107548:	f000 bc31 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810754c:	f000 bc2f 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107550:	4b6b      	ldr	r3, [pc, #428]	; (8107700 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8107552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107554:	f000 bc2b 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8107558:	2300      	movs	r3, #0
 810755a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810755c:	f000 bc27 	b.w	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107566:	f040 8095 	bne.w	8107694 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 810756a:	4b61      	ldr	r3, [pc, #388]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810756e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8107572:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810757a:	d04d      	beq.n	8107618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 810757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810757e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107582:	f200 8084 	bhi.w	810768e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8107586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107588:	2bc0      	cmp	r3, #192	; 0xc0
 810758a:	d07d      	beq.n	8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 810758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810758e:	2bc0      	cmp	r3, #192	; 0xc0
 8107590:	d87d      	bhi.n	810768e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8107592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107594:	2b80      	cmp	r3, #128	; 0x80
 8107596:	d02d      	beq.n	81075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8107598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810759a:	2b80      	cmp	r3, #128	; 0x80
 810759c:	d877      	bhi.n	810768e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 810759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81075a0:	2b00      	cmp	r3, #0
 81075a2:	d003      	beq.n	81075ac <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 81075a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81075a6:	2b40      	cmp	r3, #64	; 0x40
 81075a8:	d012      	beq.n	81075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 81075aa:	e070      	b.n	810768e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81075ac:	4b50      	ldr	r3, [pc, #320]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81075ae:	681b      	ldr	r3, [r3, #0]
 81075b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81075b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81075b8:	d107      	bne.n	81075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81075ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81075be:	4618      	mov	r0, r3
 81075c0:	f000 fec0 	bl	8108344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81075c8:	e3f1      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81075ca:	2300      	movs	r3, #0
 81075cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81075ce:	e3ee      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81075d0:	4b47      	ldr	r3, [pc, #284]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81075d2:	681b      	ldr	r3, [r3, #0]
 81075d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81075d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81075dc:	d107      	bne.n	81075ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81075de:	f107 0318 	add.w	r3, r7, #24
 81075e2:	4618      	mov	r0, r3
 81075e4:	f000 fc06 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81075e8:	69bb      	ldr	r3, [r7, #24]
 81075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81075ec:	e3df      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81075ee:	2300      	movs	r3, #0
 81075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81075f2:	e3dc      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81075f4:	4b3e      	ldr	r3, [pc, #248]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81075f6:	681b      	ldr	r3, [r3, #0]
 81075f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81075fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107600:	d107      	bne.n	8107612 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107602:	f107 030c 	add.w	r3, r7, #12
 8107606:	4618      	mov	r0, r3
 8107608:	f000 fd48 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810760c:	68fb      	ldr	r3, [r7, #12]
 810760e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107610:	e3cd      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107612:	2300      	movs	r3, #0
 8107614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107616:	e3ca      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107618:	4b35      	ldr	r3, [pc, #212]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810761a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810761c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107620:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107622:	4b33      	ldr	r3, [pc, #204]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107624:	681b      	ldr	r3, [r3, #0]
 8107626:	f003 0304 	and.w	r3, r3, #4
 810762a:	2b04      	cmp	r3, #4
 810762c:	d10c      	bne.n	8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810762e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107630:	2b00      	cmp	r3, #0
 8107632:	d109      	bne.n	8107648 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107634:	4b2e      	ldr	r3, [pc, #184]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107636:	681b      	ldr	r3, [r3, #0]
 8107638:	08db      	lsrs	r3, r3, #3
 810763a:	f003 0303 	and.w	r3, r3, #3
 810763e:	4a2d      	ldr	r2, [pc, #180]	; (81076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8107640:	fa22 f303 	lsr.w	r3, r2, r3
 8107644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107646:	e01e      	b.n	8107686 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107648:	4b29      	ldr	r3, [pc, #164]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810764a:	681b      	ldr	r3, [r3, #0]
 810764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107654:	d106      	bne.n	8107664 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8107656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810765c:	d102      	bne.n	8107664 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810765e:	4b26      	ldr	r3, [pc, #152]	; (81076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8107660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107662:	e010      	b.n	8107686 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107664:	4b22      	ldr	r3, [pc, #136]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8107666:	681b      	ldr	r3, [r3, #0]
 8107668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810766c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107670:	d106      	bne.n	8107680 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8107672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107678:	d102      	bne.n	8107680 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810767a:	4b20      	ldr	r3, [pc, #128]	; (81076fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810767c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810767e:	e002      	b.n	8107686 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107680:	2300      	movs	r3, #0
 8107682:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107684:	e393      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107686:	e392      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107688:	4b1d      	ldr	r3, [pc, #116]	; (8107700 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810768a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810768c:	e38f      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 810768e:	2300      	movs	r3, #0
 8107690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107692:	e38c      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107694:	687b      	ldr	r3, [r7, #4]
 8107696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810769a:	f040 80a7 	bne.w	81077ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 810769e:	4b14      	ldr	r3, [pc, #80]	; (81076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81076a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81076a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 81076a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81076ae:	d05f      	beq.n	8107770 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 81076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81076b6:	f200 8096 	bhi.w	81077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81076c0:	f000 808e 	beq.w	81077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 81076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81076ca:	f200 808c 	bhi.w	81077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81076d4:	d03a      	beq.n	810774c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 81076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81076dc:	f200 8083 	bhi.w	81077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076e2:	2b00      	cmp	r3, #0
 81076e4:	d00e      	beq.n	8107704 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 81076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81076ec:	d01c      	beq.n	8107728 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 81076ee:	e07a      	b.n	81077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81076f0:	58024400 	.word	0x58024400
 81076f4:	03d09000 	.word	0x03d09000
 81076f8:	003d0900 	.word	0x003d0900
 81076fc:	00f42400 	.word	0x00f42400
 8107700:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107704:	4baa      	ldr	r3, [pc, #680]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8107706:	681b      	ldr	r3, [r3, #0]
 8107708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810770c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107710:	d107      	bne.n	8107722 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107716:	4618      	mov	r0, r3
 8107718:	f000 fe14 	bl	8108344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810771e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107720:	e345      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107722:	2300      	movs	r3, #0
 8107724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107726:	e342      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107728:	4ba1      	ldr	r3, [pc, #644]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810772a:	681b      	ldr	r3, [r3, #0]
 810772c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107734:	d107      	bne.n	8107746 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107736:	f107 0318 	add.w	r3, r7, #24
 810773a:	4618      	mov	r0, r3
 810773c:	f000 fb5a 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107740:	69bb      	ldr	r3, [r7, #24]
 8107742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107744:	e333      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107746:	2300      	movs	r3, #0
 8107748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810774a:	e330      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810774c:	4b98      	ldr	r3, [pc, #608]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107758:	d107      	bne.n	810776a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810775a:	f107 030c 	add.w	r3, r7, #12
 810775e:	4618      	mov	r0, r3
 8107760:	f000 fc9c 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107764:	68fb      	ldr	r3, [r7, #12]
 8107766:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107768:	e321      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810776a:	2300      	movs	r3, #0
 810776c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810776e:	e31e      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107770:	4b8f      	ldr	r3, [pc, #572]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8107772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107774:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107778:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810777a:	4b8d      	ldr	r3, [pc, #564]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	f003 0304 	and.w	r3, r3, #4
 8107782:	2b04      	cmp	r3, #4
 8107784:	d10c      	bne.n	81077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8107786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107788:	2b00      	cmp	r3, #0
 810778a:	d109      	bne.n	81077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810778c:	4b88      	ldr	r3, [pc, #544]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810778e:	681b      	ldr	r3, [r3, #0]
 8107790:	08db      	lsrs	r3, r3, #3
 8107792:	f003 0303 	and.w	r3, r3, #3
 8107796:	4a87      	ldr	r2, [pc, #540]	; (81079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8107798:	fa22 f303 	lsr.w	r3, r2, r3
 810779c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810779e:	e01e      	b.n	81077de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81077a0:	4b83      	ldr	r3, [pc, #524]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81077a2:	681b      	ldr	r3, [r3, #0]
 81077a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81077a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81077ac:	d106      	bne.n	81077bc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 81077ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81077b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81077b4:	d102      	bne.n	81077bc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81077b6:	4b80      	ldr	r3, [pc, #512]	; (81079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 81077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81077ba:	e010      	b.n	81077de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81077bc:	4b7c      	ldr	r3, [pc, #496]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81077c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81077c8:	d106      	bne.n	81077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 81077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81077cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81077d0:	d102      	bne.n	81077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81077d2:	4b7a      	ldr	r3, [pc, #488]	; (81079bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 81077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81077d6:	e002      	b.n	81077de <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81077d8:	2300      	movs	r3, #0
 81077da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81077dc:	e2e7      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81077de:	e2e6      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81077e0:	4b77      	ldr	r3, [pc, #476]	; (81079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 81077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81077e4:	e2e3      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 81077e6:	2300      	movs	r3, #0
 81077e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81077ea:	e2e0      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 81077ec:	687b      	ldr	r3, [r7, #4]
 81077ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81077f2:	f040 809c 	bne.w	810792e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 81077f6:	4b6e      	ldr	r3, [pc, #440]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81077fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 81077fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8107800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107806:	d054      	beq.n	81078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8107808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810780a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810780e:	f200 808b 	bhi.w	8107928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8107812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107814:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107818:	f000 8083 	beq.w	8107922 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 810781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810781e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8107822:	f200 8081 	bhi.w	8107928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8107826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810782c:	d02f      	beq.n	810788e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 810782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107834:	d878      	bhi.n	8107928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8107836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107838:	2b00      	cmp	r3, #0
 810783a:	d004      	beq.n	8107846 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 810783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810783e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8107842:	d012      	beq.n	810786a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8107844:	e070      	b.n	8107928 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107846:	4b5a      	ldr	r3, [pc, #360]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8107848:	681b      	ldr	r3, [r3, #0]
 810784a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810784e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107852:	d107      	bne.n	8107864 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107858:	4618      	mov	r0, r3
 810785a:	f000 fd73 	bl	8108344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107860:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107862:	e2a4      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107864:	2300      	movs	r3, #0
 8107866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107868:	e2a1      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810786a:	4b51      	ldr	r3, [pc, #324]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810786c:	681b      	ldr	r3, [r3, #0]
 810786e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107876:	d107      	bne.n	8107888 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107878:	f107 0318 	add.w	r3, r7, #24
 810787c:	4618      	mov	r0, r3
 810787e:	f000 fab9 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107882:	69bb      	ldr	r3, [r7, #24]
 8107884:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8107886:	e292      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107888:	2300      	movs	r3, #0
 810788a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810788c:	e28f      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810788e:	4b48      	ldr	r3, [pc, #288]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8107890:	681b      	ldr	r3, [r3, #0]
 8107892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810789a:	d107      	bne.n	81078ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810789c:	f107 030c 	add.w	r3, r7, #12
 81078a0:	4618      	mov	r0, r3
 81078a2:	f000 fbfb 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81078a6:	68fb      	ldr	r3, [r7, #12]
 81078a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81078aa:	e280      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81078ac:	2300      	movs	r3, #0
 81078ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81078b0:	e27d      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81078b2:	4b3f      	ldr	r3, [pc, #252]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81078b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81078ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81078bc:	4b3c      	ldr	r3, [pc, #240]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81078be:	681b      	ldr	r3, [r3, #0]
 81078c0:	f003 0304 	and.w	r3, r3, #4
 81078c4:	2b04      	cmp	r3, #4
 81078c6:	d10c      	bne.n	81078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 81078c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81078ca:	2b00      	cmp	r3, #0
 81078cc:	d109      	bne.n	81078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81078ce:	4b38      	ldr	r3, [pc, #224]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81078d0:	681b      	ldr	r3, [r3, #0]
 81078d2:	08db      	lsrs	r3, r3, #3
 81078d4:	f003 0303 	and.w	r3, r3, #3
 81078d8:	4a36      	ldr	r2, [pc, #216]	; (81079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 81078da:	fa22 f303 	lsr.w	r3, r2, r3
 81078de:	63fb      	str	r3, [r7, #60]	; 0x3c
 81078e0:	e01e      	b.n	8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81078e2:	4b33      	ldr	r3, [pc, #204]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81078e4:	681b      	ldr	r3, [r3, #0]
 81078e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81078ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81078ee:	d106      	bne.n	81078fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 81078f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81078f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81078f6:	d102      	bne.n	81078fe <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81078f8:	4b2f      	ldr	r3, [pc, #188]	; (81079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 81078fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 81078fc:	e010      	b.n	8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81078fe:	4b2c      	ldr	r3, [pc, #176]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8107900:	681b      	ldr	r3, [r3, #0]
 8107902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810790a:	d106      	bne.n	810791a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 810790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810790e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107912:	d102      	bne.n	810791a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8107914:	4b29      	ldr	r3, [pc, #164]	; (81079bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8107916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107918:	e002      	b.n	8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810791a:	2300      	movs	r3, #0
 810791c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810791e:	e246      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107920:	e245      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107922:	4b27      	ldr	r3, [pc, #156]	; (81079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8107924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107926:	e242      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8107928:	2300      	movs	r3, #0
 810792a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810792c:	e23f      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810792e:	687b      	ldr	r3, [r7, #4]
 8107930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107934:	f040 80a8 	bne.w	8107a88 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8107938:	4b1d      	ldr	r3, [pc, #116]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810793a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810793c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8107940:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107948:	d060      	beq.n	8107a0c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 810794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810794c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107950:	f200 8097 	bhi.w	8107a82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8107954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107956:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810795a:	f000 808f 	beq.w	8107a7c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 810795e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107960:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8107964:	f200 808d 	bhi.w	8107a82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8107968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810796a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810796e:	d03b      	beq.n	81079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8107970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107976:	f200 8084 	bhi.w	8107a82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810797c:	2b00      	cmp	r3, #0
 810797e:	d004      	beq.n	810798a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8107980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107986:	d01d      	beq.n	81079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8107988:	e07b      	b.n	8107a82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810798a:	4b09      	ldr	r3, [pc, #36]	; (81079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810798c:	681b      	ldr	r3, [r3, #0]
 810798e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107996:	d107      	bne.n	81079a8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810799c:	4618      	mov	r0, r3
 810799e:	f000 fcd1 	bl	8108344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81079a6:	e202      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81079a8:	2300      	movs	r3, #0
 81079aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81079ac:	e1ff      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81079ae:	bf00      	nop
 81079b0:	58024400 	.word	0x58024400
 81079b4:	03d09000 	.word	0x03d09000
 81079b8:	003d0900 	.word	0x003d0900
 81079bc:	00f42400 	.word	0x00f42400
 81079c0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81079c4:	4ba3      	ldr	r3, [pc, #652]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81079c6:	681b      	ldr	r3, [r3, #0]
 81079c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81079cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81079d0:	d107      	bne.n	81079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81079d2:	f107 0318 	add.w	r3, r7, #24
 81079d6:	4618      	mov	r0, r3
 81079d8:	f000 fa0c 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81079dc:	69bb      	ldr	r3, [r7, #24]
 81079de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81079e0:	e1e5      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81079e2:	2300      	movs	r3, #0
 81079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81079e6:	e1e2      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81079e8:	4b9a      	ldr	r3, [pc, #616]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81079ea:	681b      	ldr	r3, [r3, #0]
 81079ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81079f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81079f4:	d107      	bne.n	8107a06 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81079f6:	f107 030c 	add.w	r3, r7, #12
 81079fa:	4618      	mov	r0, r3
 81079fc:	f000 fb4e 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107a00:	68fb      	ldr	r3, [r7, #12]
 8107a02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107a04:	e1d3      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107a06:	2300      	movs	r3, #0
 8107a08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107a0a:	e1d0      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107a0c:	4b91      	ldr	r3, [pc, #580]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107a10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107a14:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107a16:	4b8f      	ldr	r3, [pc, #572]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107a18:	681b      	ldr	r3, [r3, #0]
 8107a1a:	f003 0304 	and.w	r3, r3, #4
 8107a1e:	2b04      	cmp	r3, #4
 8107a20:	d10c      	bne.n	8107a3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8107a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107a24:	2b00      	cmp	r3, #0
 8107a26:	d109      	bne.n	8107a3c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107a28:	4b8a      	ldr	r3, [pc, #552]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	08db      	lsrs	r3, r3, #3
 8107a2e:	f003 0303 	and.w	r3, r3, #3
 8107a32:	4a89      	ldr	r2, [pc, #548]	; (8107c58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8107a34:	fa22 f303 	lsr.w	r3, r2, r3
 8107a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107a3a:	e01e      	b.n	8107a7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107a3c:	4b85      	ldr	r3, [pc, #532]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107a3e:	681b      	ldr	r3, [r3, #0]
 8107a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107a48:	d106      	bne.n	8107a58 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8107a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107a4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107a50:	d102      	bne.n	8107a58 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8107a52:	4b82      	ldr	r3, [pc, #520]	; (8107c5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8107a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107a56:	e010      	b.n	8107a7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107a58:	4b7e      	ldr	r3, [pc, #504]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107a5a:	681b      	ldr	r3, [r3, #0]
 8107a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107a64:	d106      	bne.n	8107a74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8107a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107a6c:	d102      	bne.n	8107a74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8107a6e:	4b7c      	ldr	r3, [pc, #496]	; (8107c60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8107a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107a72:	e002      	b.n	8107a7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107a74:	2300      	movs	r3, #0
 8107a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107a78:	e199      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107a7a:	e198      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8107a7c:	4b79      	ldr	r3, [pc, #484]	; (8107c64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8107a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107a80:	e195      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8107a82:	2300      	movs	r3, #0
 8107a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107a86:	e192      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107a88:	687b      	ldr	r3, [r7, #4]
 8107a8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8107a8e:	d173      	bne.n	8107b78 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8107a90:	4b70      	ldr	r3, [pc, #448]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107a94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8107a98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107aa0:	d02f      	beq.n	8107b02 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8107aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107aa8:	d863      	bhi.n	8107b72 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8107aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107aac:	2b00      	cmp	r3, #0
 8107aae:	d004      	beq.n	8107aba <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8107ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107ab6:	d012      	beq.n	8107ade <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8107ab8:	e05b      	b.n	8107b72 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107aba:	4b66      	ldr	r3, [pc, #408]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107abc:	681b      	ldr	r3, [r3, #0]
 8107abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107ac6:	d107      	bne.n	8107ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107ac8:	f107 0318 	add.w	r3, r7, #24
 8107acc:	4618      	mov	r0, r3
 8107ace:	f000 f991 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107ad2:	69bb      	ldr	r3, [r7, #24]
 8107ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107ad6:	e16a      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107ad8:	2300      	movs	r3, #0
 8107ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107adc:	e167      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107ade:	4b5d      	ldr	r3, [pc, #372]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107ae0:	681b      	ldr	r3, [r3, #0]
 8107ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107aea:	d107      	bne.n	8107afc <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107aec:	f107 030c 	add.w	r3, r7, #12
 8107af0:	4618      	mov	r0, r3
 8107af2:	f000 fad3 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107af6:	697b      	ldr	r3, [r7, #20]
 8107af8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107afa:	e158      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107afc:	2300      	movs	r3, #0
 8107afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b00:	e155      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8107b02:	4b54      	ldr	r3, [pc, #336]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107b06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107b0a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107b0c:	4b51      	ldr	r3, [pc, #324]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107b0e:	681b      	ldr	r3, [r3, #0]
 8107b10:	f003 0304 	and.w	r3, r3, #4
 8107b14:	2b04      	cmp	r3, #4
 8107b16:	d10c      	bne.n	8107b32 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8107b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107b1a:	2b00      	cmp	r3, #0
 8107b1c:	d109      	bne.n	8107b32 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107b1e:	4b4d      	ldr	r3, [pc, #308]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	08db      	lsrs	r3, r3, #3
 8107b24:	f003 0303 	and.w	r3, r3, #3
 8107b28:	4a4b      	ldr	r2, [pc, #300]	; (8107c58 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8107b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8107b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107b30:	e01e      	b.n	8107b70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107b32:	4b48      	ldr	r3, [pc, #288]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107b34:	681b      	ldr	r3, [r3, #0]
 8107b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107b3e:	d106      	bne.n	8107b4e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8107b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107b46:	d102      	bne.n	8107b4e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8107b48:	4b44      	ldr	r3, [pc, #272]	; (8107c5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8107b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107b4c:	e010      	b.n	8107b70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107b4e:	4b41      	ldr	r3, [pc, #260]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107b5a:	d106      	bne.n	8107b6a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8107b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107b62:	d102      	bne.n	8107b6a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8107b64:	4b3e      	ldr	r3, [pc, #248]	; (8107c60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8107b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107b68:	e002      	b.n	8107b70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8107b6a:	2300      	movs	r3, #0
 8107b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8107b6e:	e11e      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107b70:	e11d      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8107b72:	2300      	movs	r3, #0
 8107b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107b76:	e11a      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107b78:	687b      	ldr	r3, [r7, #4]
 8107b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107b7e:	d133      	bne.n	8107be8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8107b80:	4b34      	ldr	r3, [pc, #208]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8107b88:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107b8c:	2b00      	cmp	r3, #0
 8107b8e:	d004      	beq.n	8107b9a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8107b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107b96:	d012      	beq.n	8107bbe <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8107b98:	e023      	b.n	8107be2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107b9a:	4b2e      	ldr	r3, [pc, #184]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107b9c:	681b      	ldr	r3, [r3, #0]
 8107b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107ba6:	d107      	bne.n	8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107bac:	4618      	mov	r0, r3
 8107bae:	f000 fbc9 	bl	8108344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107bb6:	e0fa      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107bb8:	2300      	movs	r3, #0
 8107bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107bbc:	e0f7      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107bbe:	4b25      	ldr	r3, [pc, #148]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107bc0:	681b      	ldr	r3, [r3, #0]
 8107bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107bca:	d107      	bne.n	8107bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107bcc:	f107 0318 	add.w	r3, r7, #24
 8107bd0:	4618      	mov	r0, r3
 8107bd2:	f000 f90f 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107bd6:	6a3b      	ldr	r3, [r7, #32]
 8107bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107bda:	e0e8      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107bdc:	2300      	movs	r3, #0
 8107bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107be0:	e0e5      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8107be2:	2300      	movs	r3, #0
 8107be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107be6:	e0e2      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107bee:	f040 808f 	bne.w	8107d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8107bf2:	4b18      	ldr	r3, [pc, #96]	; (8107c54 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8107bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107bf6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8107bfa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107c02:	d075      	beq.n	8107cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8107c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107c0a:	d87e      	bhi.n	8107d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8107c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107c12:	d060      	beq.n	8107cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8107c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107c1a:	d876      	bhi.n	8107d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8107c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107c22:	d045      	beq.n	8107cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8107c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107c2a:	d86e      	bhi.n	8107d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8107c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107c32:	d02b      	beq.n	8107c8c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8107c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107c3a:	d866      	bhi.n	8107d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8107c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c3e:	2b00      	cmp	r3, #0
 8107c40:	d004      	beq.n	8107c4c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8107c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107c48:	d00e      	beq.n	8107c68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8107c4a:	e05e      	b.n	8107d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107c4c:	f000 f8bc 	bl	8107dc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8107c50:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8107c52:	e0ac      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8107c54:	58024400 	.word	0x58024400
 8107c58:	03d09000 	.word	0x03d09000
 8107c5c:	003d0900 	.word	0x003d0900
 8107c60:	00f42400 	.word	0x00f42400
 8107c64:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c68:	4b53      	ldr	r3, [pc, #332]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107c6a:	681b      	ldr	r3, [r3, #0]
 8107c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107c74:	d107      	bne.n	8107c86 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c76:	f107 0318 	add.w	r3, r7, #24
 8107c7a:	4618      	mov	r0, r3
 8107c7c:	f000 f8ba 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107c80:	69fb      	ldr	r3, [r7, #28]
 8107c82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107c84:	e093      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107c86:	2300      	movs	r3, #0
 8107c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107c8a:	e090      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107c8c:	4b4a      	ldr	r3, [pc, #296]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107c8e:	681b      	ldr	r3, [r3, #0]
 8107c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107c98:	d107      	bne.n	8107caa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107c9a:	f107 030c 	add.w	r3, r7, #12
 8107c9e:	4618      	mov	r0, r3
 8107ca0:	f000 f9fc 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107ca4:	693b      	ldr	r3, [r7, #16]
 8107ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107ca8:	e081      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107caa:	2300      	movs	r3, #0
 8107cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107cae:	e07e      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107cb0:	4b41      	ldr	r3, [pc, #260]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	f003 0304 	and.w	r3, r3, #4
 8107cb8:	2b04      	cmp	r3, #4
 8107cba:	d109      	bne.n	8107cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107cbc:	4b3e      	ldr	r3, [pc, #248]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107cbe:	681b      	ldr	r3, [r3, #0]
 8107cc0:	08db      	lsrs	r3, r3, #3
 8107cc2:	f003 0303 	and.w	r3, r3, #3
 8107cc6:	4a3d      	ldr	r2, [pc, #244]	; (8107dbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8107cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8107ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107cce:	e06e      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107cd0:	2300      	movs	r3, #0
 8107cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107cd4:	e06b      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107cd6:	4b38      	ldr	r3, [pc, #224]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107ce2:	d102      	bne.n	8107cea <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8107ce4:	4b36      	ldr	r3, [pc, #216]	; (8107dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8107ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107ce8:	e061      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107cea:	2300      	movs	r3, #0
 8107cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107cee:	e05e      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107cf0:	4b31      	ldr	r3, [pc, #196]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107cf2:	681b      	ldr	r3, [r3, #0]
 8107cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107cfc:	d102      	bne.n	8107d04 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8107cfe:	4b31      	ldr	r3, [pc, #196]	; (8107dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8107d00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107d02:	e054      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107d04:	2300      	movs	r3, #0
 8107d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d08:	e051      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8107d0a:	2300      	movs	r3, #0
 8107d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d0e:	e04e      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8107d10:	687b      	ldr	r3, [r7, #4]
 8107d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107d16:	d148      	bne.n	8107daa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8107d18:	4b27      	ldr	r3, [pc, #156]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107d20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8107d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107d28:	d02a      	beq.n	8107d80 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8107d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107d30:	d838      	bhi.n	8107da4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8107d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d34:	2b00      	cmp	r3, #0
 8107d36:	d004      	beq.n	8107d42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8107d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107d3e:	d00d      	beq.n	8107d5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8107d40:	e030      	b.n	8107da4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107d42:	4b1d      	ldr	r3, [pc, #116]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107d44:	681b      	ldr	r3, [r3, #0]
 8107d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107d4e:	d102      	bne.n	8107d56 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8107d50:	4b1c      	ldr	r3, [pc, #112]	; (8107dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8107d52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107d54:	e02b      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107d56:	2300      	movs	r3, #0
 8107d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d5a:	e028      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107d5c:	4b16      	ldr	r3, [pc, #88]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107d5e:	681b      	ldr	r3, [r3, #0]
 8107d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107d68:	d107      	bne.n	8107d7a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107d6e:	4618      	mov	r0, r3
 8107d70:	f000 fae8 	bl	8108344 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107d78:	e019      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107d7a:	2300      	movs	r3, #0
 8107d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107d7e:	e016      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107d80:	4b0d      	ldr	r3, [pc, #52]	; (8107db8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107d82:	681b      	ldr	r3, [r3, #0]
 8107d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107d8c:	d107      	bne.n	8107d9e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107d8e:	f107 0318 	add.w	r3, r7, #24
 8107d92:	4618      	mov	r0, r3
 8107d94:	f000 f82e 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107d98:	69fb      	ldr	r3, [r7, #28]
 8107d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107d9c:	e007      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107d9e:	2300      	movs	r3, #0
 8107da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107da2:	e004      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8107da4:	2300      	movs	r3, #0
 8107da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107da8:	e001      	b.n	8107dae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8107daa:	2300      	movs	r3, #0
 8107dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8107dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8107db0:	4618      	mov	r0, r3
 8107db2:	3740      	adds	r7, #64	; 0x40
 8107db4:	46bd      	mov	sp, r7
 8107db6:	bd80      	pop	{r7, pc}
 8107db8:	58024400 	.word	0x58024400
 8107dbc:	03d09000 	.word	0x03d09000
 8107dc0:	003d0900 	.word	0x003d0900
 8107dc4:	00f42400 	.word	0x00f42400

08107dc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107dc8:	b580      	push	{r7, lr}
 8107dca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107dcc:	f7fe fb4a 	bl	8106464 <HAL_RCC_GetHCLKFreq>
 8107dd0:	4602      	mov	r2, r0
 8107dd2:	4b06      	ldr	r3, [pc, #24]	; (8107dec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107dd4:	6a1b      	ldr	r3, [r3, #32]
 8107dd6:	091b      	lsrs	r3, r3, #4
 8107dd8:	f003 0307 	and.w	r3, r3, #7
 8107ddc:	4904      	ldr	r1, [pc, #16]	; (8107df0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8107dde:	5ccb      	ldrb	r3, [r1, r3]
 8107de0:	f003 031f 	and.w	r3, r3, #31
 8107de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107de8:	4618      	mov	r0, r3
 8107dea:	bd80      	pop	{r7, pc}
 8107dec:	58024400 	.word	0x58024400
 8107df0:	08113888 	.word	0x08113888

08107df4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8107df4:	b480      	push	{r7}
 8107df6:	b089      	sub	sp, #36	; 0x24
 8107df8:	af00      	add	r7, sp, #0
 8107dfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107dfc:	4ba1      	ldr	r3, [pc, #644]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107e00:	f003 0303 	and.w	r3, r3, #3
 8107e04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8107e06:	4b9f      	ldr	r3, [pc, #636]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107e0a:	0b1b      	lsrs	r3, r3, #12
 8107e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107e10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8107e12:	4b9c      	ldr	r3, [pc, #624]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107e16:	091b      	lsrs	r3, r3, #4
 8107e18:	f003 0301 	and.w	r3, r3, #1
 8107e1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8107e1e:	4b99      	ldr	r3, [pc, #612]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107e22:	08db      	lsrs	r3, r3, #3
 8107e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107e28:	693a      	ldr	r2, [r7, #16]
 8107e2a:	fb02 f303 	mul.w	r3, r2, r3
 8107e2e:	ee07 3a90 	vmov	s15, r3
 8107e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107e3a:	697b      	ldr	r3, [r7, #20]
 8107e3c:	2b00      	cmp	r3, #0
 8107e3e:	f000 8111 	beq.w	8108064 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107e42:	69bb      	ldr	r3, [r7, #24]
 8107e44:	2b02      	cmp	r3, #2
 8107e46:	f000 8083 	beq.w	8107f50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107e4a:	69bb      	ldr	r3, [r7, #24]
 8107e4c:	2b02      	cmp	r3, #2
 8107e4e:	f200 80a1 	bhi.w	8107f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107e52:	69bb      	ldr	r3, [r7, #24]
 8107e54:	2b00      	cmp	r3, #0
 8107e56:	d003      	beq.n	8107e60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107e58:	69bb      	ldr	r3, [r7, #24]
 8107e5a:	2b01      	cmp	r3, #1
 8107e5c:	d056      	beq.n	8107f0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107e5e:	e099      	b.n	8107f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107e60:	4b88      	ldr	r3, [pc, #544]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e62:	681b      	ldr	r3, [r3, #0]
 8107e64:	f003 0320 	and.w	r3, r3, #32
 8107e68:	2b00      	cmp	r3, #0
 8107e6a:	d02d      	beq.n	8107ec8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107e6c:	4b85      	ldr	r3, [pc, #532]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e6e:	681b      	ldr	r3, [r3, #0]
 8107e70:	08db      	lsrs	r3, r3, #3
 8107e72:	f003 0303 	and.w	r3, r3, #3
 8107e76:	4a84      	ldr	r2, [pc, #528]	; (8108088 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107e78:	fa22 f303 	lsr.w	r3, r2, r3
 8107e7c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107e7e:	68bb      	ldr	r3, [r7, #8]
 8107e80:	ee07 3a90 	vmov	s15, r3
 8107e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e88:	697b      	ldr	r3, [r7, #20]
 8107e8a:	ee07 3a90 	vmov	s15, r3
 8107e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e96:	4b7b      	ldr	r3, [pc, #492]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e9e:	ee07 3a90 	vmov	s15, r3
 8107ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8107eaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 810808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107ec6:	e087      	b.n	8107fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107ec8:	697b      	ldr	r3, [r7, #20]
 8107eca:	ee07 3a90 	vmov	s15, r3
 8107ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ed2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8108090 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107eda:	4b6a      	ldr	r3, [pc, #424]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ee2:	ee07 3a90 	vmov	s15, r3
 8107ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8107eee:	eddf 5a67 	vldr	s11, [pc, #412]	; 810808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107f0a:	e065      	b.n	8107fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107f0c:	697b      	ldr	r3, [r7, #20]
 8107f0e:	ee07 3a90 	vmov	s15, r3
 8107f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8108094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107f1e:	4b59      	ldr	r3, [pc, #356]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107f26:	ee07 3a90 	vmov	s15, r3
 8107f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107f32:	eddf 5a56 	vldr	s11, [pc, #344]	; 810808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107f4e:	e043      	b.n	8107fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107f50:	697b      	ldr	r3, [r7, #20]
 8107f52:	ee07 3a90 	vmov	s15, r3
 8107f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8108098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107f62:	4b48      	ldr	r3, [pc, #288]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107f6a:	ee07 3a90 	vmov	s15, r3
 8107f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8107f76:	eddf 5a45 	vldr	s11, [pc, #276]	; 810808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107f92:	e021      	b.n	8107fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107f94:	697b      	ldr	r3, [r7, #20]
 8107f96:	ee07 3a90 	vmov	s15, r3
 8107f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8108094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fa6:	4b37      	ldr	r3, [pc, #220]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107fae:	ee07 3a90 	vmov	s15, r3
 8107fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8107fba:	eddf 5a34 	vldr	s11, [pc, #208]	; 810808c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107fd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8107fd8:	4b2a      	ldr	r3, [pc, #168]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107fdc:	0a5b      	lsrs	r3, r3, #9
 8107fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107fe2:	ee07 3a90 	vmov	s15, r3
 8107fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107ffe:	ee17 2a90 	vmov	r2, s15
 8108002:	687b      	ldr	r3, [r7, #4]
 8108004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8108006:	4b1f      	ldr	r3, [pc, #124]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810800a:	0c1b      	lsrs	r3, r3, #16
 810800c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108010:	ee07 3a90 	vmov	s15, r3
 8108014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810801c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108020:	edd7 6a07 	vldr	s13, [r7, #28]
 8108024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810802c:	ee17 2a90 	vmov	r2, s15
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8108034:	4b13      	ldr	r3, [pc, #76]	; (8108084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108038:	0e1b      	lsrs	r3, r3, #24
 810803a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810803e:	ee07 3a90 	vmov	s15, r3
 8108042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810804a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810804e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810805a:	ee17 2a90 	vmov	r2, s15
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108062:	e008      	b.n	8108076 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	2200      	movs	r2, #0
 8108068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810806a:	687b      	ldr	r3, [r7, #4]
 810806c:	2200      	movs	r2, #0
 810806e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	2200      	movs	r2, #0
 8108074:	609a      	str	r2, [r3, #8]
}
 8108076:	bf00      	nop
 8108078:	3724      	adds	r7, #36	; 0x24
 810807a:	46bd      	mov	sp, r7
 810807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108080:	4770      	bx	lr
 8108082:	bf00      	nop
 8108084:	58024400 	.word	0x58024400
 8108088:	03d09000 	.word	0x03d09000
 810808c:	46000000 	.word	0x46000000
 8108090:	4c742400 	.word	0x4c742400
 8108094:	4a742400 	.word	0x4a742400
 8108098:	4b742400 	.word	0x4b742400

0810809c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810809c:	b480      	push	{r7}
 810809e:	b089      	sub	sp, #36	; 0x24
 81080a0:	af00      	add	r7, sp, #0
 81080a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81080a4:	4ba1      	ldr	r3, [pc, #644]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080a8:	f003 0303 	and.w	r3, r3, #3
 81080ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81080ae:	4b9f      	ldr	r3, [pc, #636]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81080b2:	0d1b      	lsrs	r3, r3, #20
 81080b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81080b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81080ba:	4b9c      	ldr	r3, [pc, #624]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81080be:	0a1b      	lsrs	r3, r3, #8
 81080c0:	f003 0301 	and.w	r3, r3, #1
 81080c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81080c6:	4b99      	ldr	r3, [pc, #612]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81080c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81080ca:	08db      	lsrs	r3, r3, #3
 81080cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81080d0:	693a      	ldr	r2, [r7, #16]
 81080d2:	fb02 f303 	mul.w	r3, r2, r3
 81080d6:	ee07 3a90 	vmov	s15, r3
 81080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81080e2:	697b      	ldr	r3, [r7, #20]
 81080e4:	2b00      	cmp	r3, #0
 81080e6:	f000 8111 	beq.w	810830c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81080ea:	69bb      	ldr	r3, [r7, #24]
 81080ec:	2b02      	cmp	r3, #2
 81080ee:	f000 8083 	beq.w	81081f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81080f2:	69bb      	ldr	r3, [r7, #24]
 81080f4:	2b02      	cmp	r3, #2
 81080f6:	f200 80a1 	bhi.w	810823c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81080fa:	69bb      	ldr	r3, [r7, #24]
 81080fc:	2b00      	cmp	r3, #0
 81080fe:	d003      	beq.n	8108108 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108100:	69bb      	ldr	r3, [r7, #24]
 8108102:	2b01      	cmp	r3, #1
 8108104:	d056      	beq.n	81081b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108106:	e099      	b.n	810823c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108108:	4b88      	ldr	r3, [pc, #544]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810810a:	681b      	ldr	r3, [r3, #0]
 810810c:	f003 0320 	and.w	r3, r3, #32
 8108110:	2b00      	cmp	r3, #0
 8108112:	d02d      	beq.n	8108170 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8108114:	4b85      	ldr	r3, [pc, #532]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108116:	681b      	ldr	r3, [r3, #0]
 8108118:	08db      	lsrs	r3, r3, #3
 810811a:	f003 0303 	and.w	r3, r3, #3
 810811e:	4a84      	ldr	r2, [pc, #528]	; (8108330 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108120:	fa22 f303 	lsr.w	r3, r2, r3
 8108124:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108126:	68bb      	ldr	r3, [r7, #8]
 8108128:	ee07 3a90 	vmov	s15, r3
 810812c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108130:	697b      	ldr	r3, [r7, #20]
 8108132:	ee07 3a90 	vmov	s15, r3
 8108136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810813a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810813e:	4b7b      	ldr	r3, [pc, #492]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108146:	ee07 3a90 	vmov	s15, r3
 810814a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810814e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108152:	eddf 5a78 	vldr	s11, [pc, #480]	; 8108334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810815a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810815e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108166:	ee67 7a27 	vmul.f32	s15, s14, s15
 810816a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810816e:	e087      	b.n	8108280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8108170:	697b      	ldr	r3, [r7, #20]
 8108172:	ee07 3a90 	vmov	s15, r3
 8108176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810817a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8108338 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810817e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108182:	4b6a      	ldr	r3, [pc, #424]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810818a:	ee07 3a90 	vmov	s15, r3
 810818e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108192:	ed97 6a03 	vldr	s12, [r7, #12]
 8108196:	eddf 5a67 	vldr	s11, [pc, #412]	; 8108334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810819a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810819e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81081a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81081a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81081aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81081ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81081b2:	e065      	b.n	8108280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81081b4:	697b      	ldr	r3, [r7, #20]
 81081b6:	ee07 3a90 	vmov	s15, r3
 81081ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81081be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810833c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81081c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81081c6:	4b59      	ldr	r3, [pc, #356]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81081ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81081ce:	ee07 3a90 	vmov	s15, r3
 81081d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81081d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81081da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8108334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81081de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81081e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81081e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81081ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81081ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81081f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81081f6:	e043      	b.n	8108280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81081f8:	697b      	ldr	r3, [r7, #20]
 81081fa:	ee07 3a90 	vmov	s15, r3
 81081fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8108340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810820a:	4b48      	ldr	r3, [pc, #288]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810820e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108212:	ee07 3a90 	vmov	s15, r3
 8108216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810821a:	ed97 6a03 	vldr	s12, [r7, #12]
 810821e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8108334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810822a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810822e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810823a:	e021      	b.n	8108280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810823c:	697b      	ldr	r3, [r7, #20]
 810823e:	ee07 3a90 	vmov	s15, r3
 8108242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810833c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810824a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810824e:	4b37      	ldr	r3, [pc, #220]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108256:	ee07 3a90 	vmov	s15, r3
 810825a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810825e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108262:	eddf 5a34 	vldr	s11, [pc, #208]	; 8108334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810826a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810826e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108276:	ee67 7a27 	vmul.f32	s15, s14, s15
 810827a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810827e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8108280:	4b2a      	ldr	r3, [pc, #168]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108284:	0a5b      	lsrs	r3, r3, #9
 8108286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810828a:	ee07 3a90 	vmov	s15, r3
 810828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108296:	ee37 7a87 	vadd.f32	s14, s15, s14
 810829a:	edd7 6a07 	vldr	s13, [r7, #28]
 810829e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81082a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81082a6:	ee17 2a90 	vmov	r2, s15
 81082aa:	687b      	ldr	r3, [r7, #4]
 81082ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81082ae:	4b1f      	ldr	r3, [pc, #124]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81082b2:	0c1b      	lsrs	r3, r3, #16
 81082b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81082b8:	ee07 3a90 	vmov	s15, r3
 81082bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81082c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81082c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81082cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81082d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81082d4:	ee17 2a90 	vmov	r2, s15
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81082dc:	4b13      	ldr	r3, [pc, #76]	; (810832c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81082e0:	0e1b      	lsrs	r3, r3, #24
 81082e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81082e6:	ee07 3a90 	vmov	s15, r3
 81082ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81082f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81082f6:	edd7 6a07 	vldr	s13, [r7, #28]
 81082fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81082fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108302:	ee17 2a90 	vmov	r2, s15
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810830a:	e008      	b.n	810831e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	2200      	movs	r2, #0
 8108310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108312:	687b      	ldr	r3, [r7, #4]
 8108314:	2200      	movs	r2, #0
 8108316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108318:	687b      	ldr	r3, [r7, #4]
 810831a:	2200      	movs	r2, #0
 810831c:	609a      	str	r2, [r3, #8]
}
 810831e:	bf00      	nop
 8108320:	3724      	adds	r7, #36	; 0x24
 8108322:	46bd      	mov	sp, r7
 8108324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108328:	4770      	bx	lr
 810832a:	bf00      	nop
 810832c:	58024400 	.word	0x58024400
 8108330:	03d09000 	.word	0x03d09000
 8108334:	46000000 	.word	0x46000000
 8108338:	4c742400 	.word	0x4c742400
 810833c:	4a742400 	.word	0x4a742400
 8108340:	4b742400 	.word	0x4b742400

08108344 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8108344:	b480      	push	{r7}
 8108346:	b089      	sub	sp, #36	; 0x24
 8108348:	af00      	add	r7, sp, #0
 810834a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810834c:	4ba0      	ldr	r3, [pc, #640]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108350:	f003 0303 	and.w	r3, r3, #3
 8108354:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8108356:	4b9e      	ldr	r3, [pc, #632]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810835a:	091b      	lsrs	r3, r3, #4
 810835c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108360:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108362:	4b9b      	ldr	r3, [pc, #620]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108366:	f003 0301 	and.w	r3, r3, #1
 810836a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810836c:	4b98      	ldr	r3, [pc, #608]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108370:	08db      	lsrs	r3, r3, #3
 8108372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108376:	693a      	ldr	r2, [r7, #16]
 8108378:	fb02 f303 	mul.w	r3, r2, r3
 810837c:	ee07 3a90 	vmov	s15, r3
 8108380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108384:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108388:	697b      	ldr	r3, [r7, #20]
 810838a:	2b00      	cmp	r3, #0
 810838c:	f000 8111 	beq.w	81085b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108390:	69bb      	ldr	r3, [r7, #24]
 8108392:	2b02      	cmp	r3, #2
 8108394:	f000 8083 	beq.w	810849e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108398:	69bb      	ldr	r3, [r7, #24]
 810839a:	2b02      	cmp	r3, #2
 810839c:	f200 80a1 	bhi.w	81084e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81083a0:	69bb      	ldr	r3, [r7, #24]
 81083a2:	2b00      	cmp	r3, #0
 81083a4:	d003      	beq.n	81083ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81083a6:	69bb      	ldr	r3, [r7, #24]
 81083a8:	2b01      	cmp	r3, #1
 81083aa:	d056      	beq.n	810845a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81083ac:	e099      	b.n	81084e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81083ae:	4b88      	ldr	r3, [pc, #544]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81083b0:	681b      	ldr	r3, [r3, #0]
 81083b2:	f003 0320 	and.w	r3, r3, #32
 81083b6:	2b00      	cmp	r3, #0
 81083b8:	d02d      	beq.n	8108416 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81083ba:	4b85      	ldr	r3, [pc, #532]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81083bc:	681b      	ldr	r3, [r3, #0]
 81083be:	08db      	lsrs	r3, r3, #3
 81083c0:	f003 0303 	and.w	r3, r3, #3
 81083c4:	4a83      	ldr	r2, [pc, #524]	; (81085d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81083c6:	fa22 f303 	lsr.w	r3, r2, r3
 81083ca:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81083cc:	68bb      	ldr	r3, [r7, #8]
 81083ce:	ee07 3a90 	vmov	s15, r3
 81083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083d6:	697b      	ldr	r3, [r7, #20]
 81083d8:	ee07 3a90 	vmov	s15, r3
 81083dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81083e4:	4b7a      	ldr	r3, [pc, #488]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81083e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81083ec:	ee07 3a90 	vmov	s15, r3
 81083f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81083f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 81085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81083fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810840c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108410:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8108414:	e087      	b.n	8108526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8108416:	697b      	ldr	r3, [r7, #20]
 8108418:	ee07 3a90 	vmov	s15, r3
 810841c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108420:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81085dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108428:	4b69      	ldr	r3, [pc, #420]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810842c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108430:	ee07 3a90 	vmov	s15, r3
 8108434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108438:	ed97 6a03 	vldr	s12, [r7, #12]
 810843c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810844c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108454:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108458:	e065      	b.n	8108526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810845a:	697b      	ldr	r3, [r7, #20]
 810845c:	ee07 3a90 	vmov	s15, r3
 8108460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108464:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81085e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810846c:	4b58      	ldr	r3, [pc, #352]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108474:	ee07 3a90 	vmov	s15, r3
 8108478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810847c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108480:	eddf 5a55 	vldr	s11, [pc, #340]	; 81085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810848c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810849c:	e043      	b.n	8108526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810849e:	697b      	ldr	r3, [r7, #20]
 81084a0:	ee07 3a90 	vmov	s15, r3
 81084a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81085e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81084ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084b0:	4b47      	ldr	r3, [pc, #284]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81084b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81084b8:	ee07 3a90 	vmov	s15, r3
 81084bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81084c0:	ed97 6a03 	vldr	s12, [r7, #12]
 81084c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 81085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81084c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81084cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81084d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81084d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81084d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81084dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81084e0:	e021      	b.n	8108526 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81084e2:	697b      	ldr	r3, [r7, #20]
 81084e4:	ee07 3a90 	vmov	s15, r3
 81084e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81084ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81085dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81084f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81084f4:	4b36      	ldr	r3, [pc, #216]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81084f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81084f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81084fc:	ee07 3a90 	vmov	s15, r3
 8108500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108504:	ed97 6a03 	vldr	s12, [r7, #12]
 8108508:	eddf 5a33 	vldr	s11, [pc, #204]	; 81085d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810850c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810851c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108520:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8108524:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8108526:	4b2a      	ldr	r3, [pc, #168]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810852a:	0a5b      	lsrs	r3, r3, #9
 810852c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108530:	ee07 3a90 	vmov	s15, r3
 8108534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810853c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108540:	edd7 6a07 	vldr	s13, [r7, #28]
 8108544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810854c:	ee17 2a90 	vmov	r2, s15
 8108550:	687b      	ldr	r3, [r7, #4]
 8108552:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8108554:	4b1e      	ldr	r3, [pc, #120]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108558:	0c1b      	lsrs	r3, r3, #16
 810855a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810855e:	ee07 3a90 	vmov	s15, r3
 8108562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810856a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810856e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810857a:	ee17 2a90 	vmov	r2, s15
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8108582:	4b13      	ldr	r3, [pc, #76]	; (81085d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108586:	0e1b      	lsrs	r3, r3, #24
 8108588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810858c:	ee07 3a90 	vmov	s15, r3
 8108590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108594:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108598:	ee37 7a87 	vadd.f32	s14, s15, s14
 810859c:	edd7 6a07 	vldr	s13, [r7, #28]
 81085a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81085a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81085a8:	ee17 2a90 	vmov	r2, s15
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81085b0:	e008      	b.n	81085c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81085b2:	687b      	ldr	r3, [r7, #4]
 81085b4:	2200      	movs	r2, #0
 81085b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	2200      	movs	r2, #0
 81085bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81085be:	687b      	ldr	r3, [r7, #4]
 81085c0:	2200      	movs	r2, #0
 81085c2:	609a      	str	r2, [r3, #8]
}
 81085c4:	bf00      	nop
 81085c6:	3724      	adds	r7, #36	; 0x24
 81085c8:	46bd      	mov	sp, r7
 81085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085ce:	4770      	bx	lr
 81085d0:	58024400 	.word	0x58024400
 81085d4:	03d09000 	.word	0x03d09000
 81085d8:	46000000 	.word	0x46000000
 81085dc:	4c742400 	.word	0x4c742400
 81085e0:	4a742400 	.word	0x4a742400
 81085e4:	4b742400 	.word	0x4b742400

081085e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81085e8:	b580      	push	{r7, lr}
 81085ea:	b084      	sub	sp, #16
 81085ec:	af00      	add	r7, sp, #0
 81085ee:	6078      	str	r0, [r7, #4]
 81085f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81085f2:	2300      	movs	r3, #0
 81085f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81085f6:	4b54      	ldr	r3, [pc, #336]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81085f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81085fa:	f003 0303 	and.w	r3, r3, #3
 81085fe:	2b03      	cmp	r3, #3
 8108600:	d101      	bne.n	8108606 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108602:	2301      	movs	r3, #1
 8108604:	e09b      	b.n	810873e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108606:	4b50      	ldr	r3, [pc, #320]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108608:	681b      	ldr	r3, [r3, #0]
 810860a:	4a4f      	ldr	r2, [pc, #316]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 810860c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8108610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108612:	f7f9 fe57 	bl	81022c4 <HAL_GetTick>
 8108616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108618:	e008      	b.n	810862c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810861a:	f7f9 fe53 	bl	81022c4 <HAL_GetTick>
 810861e:	4602      	mov	r2, r0
 8108620:	68bb      	ldr	r3, [r7, #8]
 8108622:	1ad3      	subs	r3, r2, r3
 8108624:	2b02      	cmp	r3, #2
 8108626:	d901      	bls.n	810862c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108628:	2303      	movs	r3, #3
 810862a:	e088      	b.n	810873e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810862c:	4b46      	ldr	r3, [pc, #280]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108634:	2b00      	cmp	r3, #0
 8108636:	d1f0      	bne.n	810861a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108638:	4b43      	ldr	r3, [pc, #268]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 810863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810863c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8108640:	687b      	ldr	r3, [r7, #4]
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	031b      	lsls	r3, r3, #12
 8108646:	4940      	ldr	r1, [pc, #256]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108648:	4313      	orrs	r3, r2
 810864a:	628b      	str	r3, [r1, #40]	; 0x28
 810864c:	687b      	ldr	r3, [r7, #4]
 810864e:	685b      	ldr	r3, [r3, #4]
 8108650:	3b01      	subs	r3, #1
 8108652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108656:	687b      	ldr	r3, [r7, #4]
 8108658:	689b      	ldr	r3, [r3, #8]
 810865a:	3b01      	subs	r3, #1
 810865c:	025b      	lsls	r3, r3, #9
 810865e:	b29b      	uxth	r3, r3
 8108660:	431a      	orrs	r2, r3
 8108662:	687b      	ldr	r3, [r7, #4]
 8108664:	68db      	ldr	r3, [r3, #12]
 8108666:	3b01      	subs	r3, #1
 8108668:	041b      	lsls	r3, r3, #16
 810866a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810866e:	431a      	orrs	r2, r3
 8108670:	687b      	ldr	r3, [r7, #4]
 8108672:	691b      	ldr	r3, [r3, #16]
 8108674:	3b01      	subs	r3, #1
 8108676:	061b      	lsls	r3, r3, #24
 8108678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810867c:	4932      	ldr	r1, [pc, #200]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 810867e:	4313      	orrs	r3, r2
 8108680:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108682:	4b31      	ldr	r3, [pc, #196]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108686:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810868a:	687b      	ldr	r3, [r7, #4]
 810868c:	695b      	ldr	r3, [r3, #20]
 810868e:	492e      	ldr	r1, [pc, #184]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108690:	4313      	orrs	r3, r2
 8108692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108694:	4b2c      	ldr	r3, [pc, #176]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108698:	f023 0220 	bic.w	r2, r3, #32
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	699b      	ldr	r3, [r3, #24]
 81086a0:	4929      	ldr	r1, [pc, #164]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086a2:	4313      	orrs	r3, r2
 81086a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81086a6:	4b28      	ldr	r3, [pc, #160]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81086aa:	4a27      	ldr	r2, [pc, #156]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086ac:	f023 0310 	bic.w	r3, r3, #16
 81086b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81086b2:	4b25      	ldr	r3, [pc, #148]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81086b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81086ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81086be:	687a      	ldr	r2, [r7, #4]
 81086c0:	69d2      	ldr	r2, [r2, #28]
 81086c2:	00d2      	lsls	r2, r2, #3
 81086c4:	4920      	ldr	r1, [pc, #128]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086c6:	4313      	orrs	r3, r2
 81086c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81086ca:	4b1f      	ldr	r3, [pc, #124]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81086ce:	4a1e      	ldr	r2, [pc, #120]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086d0:	f043 0310 	orr.w	r3, r3, #16
 81086d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81086d6:	683b      	ldr	r3, [r7, #0]
 81086d8:	2b00      	cmp	r3, #0
 81086da:	d106      	bne.n	81086ea <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81086dc:	4b1a      	ldr	r3, [pc, #104]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81086e0:	4a19      	ldr	r2, [pc, #100]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81086e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81086e8:	e00f      	b.n	810870a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81086ea:	683b      	ldr	r3, [r7, #0]
 81086ec:	2b01      	cmp	r3, #1
 81086ee:	d106      	bne.n	81086fe <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81086f0:	4b15      	ldr	r3, [pc, #84]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81086f4:	4a14      	ldr	r2, [pc, #80]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 81086f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81086fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 81086fc:	e005      	b.n	810870a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81086fe:	4b12      	ldr	r3, [pc, #72]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108702:	4a11      	ldr	r2, [pc, #68]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8108708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810870a:	4b0f      	ldr	r3, [pc, #60]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 810870c:	681b      	ldr	r3, [r3, #0]
 810870e:	4a0e      	ldr	r2, [pc, #56]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8108714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108716:	f7f9 fdd5 	bl	81022c4 <HAL_GetTick>
 810871a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810871c:	e008      	b.n	8108730 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810871e:	f7f9 fdd1 	bl	81022c4 <HAL_GetTick>
 8108722:	4602      	mov	r2, r0
 8108724:	68bb      	ldr	r3, [r7, #8]
 8108726:	1ad3      	subs	r3, r2, r3
 8108728:	2b02      	cmp	r3, #2
 810872a:	d901      	bls.n	8108730 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810872c:	2303      	movs	r3, #3
 810872e:	e006      	b.n	810873e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8108730:	4b05      	ldr	r3, [pc, #20]	; (8108748 <RCCEx_PLL2_Config+0x160>)
 8108732:	681b      	ldr	r3, [r3, #0]
 8108734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108738:	2b00      	cmp	r3, #0
 810873a:	d0f0      	beq.n	810871e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810873c:	7bfb      	ldrb	r3, [r7, #15]
}
 810873e:	4618      	mov	r0, r3
 8108740:	3710      	adds	r7, #16
 8108742:	46bd      	mov	sp, r7
 8108744:	bd80      	pop	{r7, pc}
 8108746:	bf00      	nop
 8108748:	58024400 	.word	0x58024400

0810874c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810874c:	b580      	push	{r7, lr}
 810874e:	b084      	sub	sp, #16
 8108750:	af00      	add	r7, sp, #0
 8108752:	6078      	str	r0, [r7, #4]
 8108754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108756:	2300      	movs	r3, #0
 8108758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810875a:	4b54      	ldr	r3, [pc, #336]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 810875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810875e:	f003 0303 	and.w	r3, r3, #3
 8108762:	2b03      	cmp	r3, #3
 8108764:	d101      	bne.n	810876a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108766:	2301      	movs	r3, #1
 8108768:	e09b      	b.n	81088a2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810876a:	4b50      	ldr	r3, [pc, #320]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 810876c:	681b      	ldr	r3, [r3, #0]
 810876e:	4a4f      	ldr	r2, [pc, #316]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108776:	f7f9 fda5 	bl	81022c4 <HAL_GetTick>
 810877a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810877c:	e008      	b.n	8108790 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810877e:	f7f9 fda1 	bl	81022c4 <HAL_GetTick>
 8108782:	4602      	mov	r2, r0
 8108784:	68bb      	ldr	r3, [r7, #8]
 8108786:	1ad3      	subs	r3, r2, r3
 8108788:	2b02      	cmp	r3, #2
 810878a:	d901      	bls.n	8108790 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810878c:	2303      	movs	r3, #3
 810878e:	e088      	b.n	81088a2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108790:	4b46      	ldr	r3, [pc, #280]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108792:	681b      	ldr	r3, [r3, #0]
 8108794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108798:	2b00      	cmp	r3, #0
 810879a:	d1f0      	bne.n	810877e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810879c:	4b43      	ldr	r3, [pc, #268]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 810879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81087a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	051b      	lsls	r3, r3, #20
 81087aa:	4940      	ldr	r1, [pc, #256]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 81087ac:	4313      	orrs	r3, r2
 81087ae:	628b      	str	r3, [r1, #40]	; 0x28
 81087b0:	687b      	ldr	r3, [r7, #4]
 81087b2:	685b      	ldr	r3, [r3, #4]
 81087b4:	3b01      	subs	r3, #1
 81087b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81087ba:	687b      	ldr	r3, [r7, #4]
 81087bc:	689b      	ldr	r3, [r3, #8]
 81087be:	3b01      	subs	r3, #1
 81087c0:	025b      	lsls	r3, r3, #9
 81087c2:	b29b      	uxth	r3, r3
 81087c4:	431a      	orrs	r2, r3
 81087c6:	687b      	ldr	r3, [r7, #4]
 81087c8:	68db      	ldr	r3, [r3, #12]
 81087ca:	3b01      	subs	r3, #1
 81087cc:	041b      	lsls	r3, r3, #16
 81087ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81087d2:	431a      	orrs	r2, r3
 81087d4:	687b      	ldr	r3, [r7, #4]
 81087d6:	691b      	ldr	r3, [r3, #16]
 81087d8:	3b01      	subs	r3, #1
 81087da:	061b      	lsls	r3, r3, #24
 81087dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81087e0:	4932      	ldr	r1, [pc, #200]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 81087e2:	4313      	orrs	r3, r2
 81087e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81087e6:	4b31      	ldr	r3, [pc, #196]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 81087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81087ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81087ee:	687b      	ldr	r3, [r7, #4]
 81087f0:	695b      	ldr	r3, [r3, #20]
 81087f2:	492e      	ldr	r1, [pc, #184]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 81087f4:	4313      	orrs	r3, r2
 81087f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81087f8:	4b2c      	ldr	r3, [pc, #176]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 81087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81087fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8108800:	687b      	ldr	r3, [r7, #4]
 8108802:	699b      	ldr	r3, [r3, #24]
 8108804:	4929      	ldr	r1, [pc, #164]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108806:	4313      	orrs	r3, r2
 8108808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810880a:	4b28      	ldr	r3, [pc, #160]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 810880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810880e:	4a27      	ldr	r2, [pc, #156]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8108816:	4b25      	ldr	r3, [pc, #148]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810881a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810881e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8108822:	687a      	ldr	r2, [r7, #4]
 8108824:	69d2      	ldr	r2, [r2, #28]
 8108826:	00d2      	lsls	r2, r2, #3
 8108828:	4920      	ldr	r1, [pc, #128]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 810882a:	4313      	orrs	r3, r2
 810882c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810882e:	4b1f      	ldr	r3, [pc, #124]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108832:	4a1e      	ldr	r2, [pc, #120]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8108838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810883a:	683b      	ldr	r3, [r7, #0]
 810883c:	2b00      	cmp	r3, #0
 810883e:	d106      	bne.n	810884e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8108840:	4b1a      	ldr	r3, [pc, #104]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108844:	4a19      	ldr	r2, [pc, #100]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810884a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810884c:	e00f      	b.n	810886e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810884e:	683b      	ldr	r3, [r7, #0]
 8108850:	2b01      	cmp	r3, #1
 8108852:	d106      	bne.n	8108862 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108854:	4b15      	ldr	r3, [pc, #84]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108858:	4a14      	ldr	r2, [pc, #80]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 810885a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810885e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8108860:	e005      	b.n	810886e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108862:	4b12      	ldr	r3, [pc, #72]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108866:	4a11      	ldr	r2, [pc, #68]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810886c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810886e:	4b0f      	ldr	r3, [pc, #60]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108870:	681b      	ldr	r3, [r3, #0]
 8108872:	4a0e      	ldr	r2, [pc, #56]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8108878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810887a:	f7f9 fd23 	bl	81022c4 <HAL_GetTick>
 810887e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108880:	e008      	b.n	8108894 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8108882:	f7f9 fd1f 	bl	81022c4 <HAL_GetTick>
 8108886:	4602      	mov	r2, r0
 8108888:	68bb      	ldr	r3, [r7, #8]
 810888a:	1ad3      	subs	r3, r2, r3
 810888c:	2b02      	cmp	r3, #2
 810888e:	d901      	bls.n	8108894 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108890:	2303      	movs	r3, #3
 8108892:	e006      	b.n	81088a2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108894:	4b05      	ldr	r3, [pc, #20]	; (81088ac <RCCEx_PLL3_Config+0x160>)
 8108896:	681b      	ldr	r3, [r3, #0]
 8108898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810889c:	2b00      	cmp	r3, #0
 810889e:	d0f0      	beq.n	8108882 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 81088a2:	4618      	mov	r0, r3
 81088a4:	3710      	adds	r7, #16
 81088a6:	46bd      	mov	sp, r7
 81088a8:	bd80      	pop	{r7, pc}
 81088aa:	bf00      	nop
 81088ac:	58024400 	.word	0x58024400

081088b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 81088b0:	b580      	push	{r7, lr}
 81088b2:	b08a      	sub	sp, #40	; 0x28
 81088b4:	af00      	add	r7, sp, #0
 81088b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 81088b8:	687b      	ldr	r3, [r7, #4]
 81088ba:	2b00      	cmp	r3, #0
 81088bc:	d101      	bne.n	81088c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 81088be:	2301      	movs	r3, #1
 81088c0:	e07c      	b.n	81089bc <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 81088c2:	687b      	ldr	r3, [r7, #4]
 81088c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 81088c8:	b2db      	uxtb	r3, r3
 81088ca:	2b00      	cmp	r3, #0
 81088cc:	d10c      	bne.n	81088e8 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 81088ce:	687b      	ldr	r3, [r7, #4]
 81088d0:	2200      	movs	r2, #0
 81088d2:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 81088d4:	687b      	ldr	r3, [r7, #4]
 81088d6:	699b      	ldr	r3, [r3, #24]
 81088d8:	2b00      	cmp	r3, #0
 81088da:	d102      	bne.n	81088e2 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 81088dc:	687b      	ldr	r3, [r7, #4]
 81088de:	2202      	movs	r2, #2
 81088e0:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 81088e2:	6878      	ldr	r0, [r7, #4]
 81088e4:	f7f8 ff4c 	bl	8101780 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 81088e8:	687b      	ldr	r3, [r7, #4]
 81088ea:	2203      	movs	r2, #3
 81088ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 81088f0:	6878      	ldr	r0, [r7, #4]
 81088f2:	f000 f867 	bl	81089c4 <HAL_SD_InitCard>
 81088f6:	4603      	mov	r3, r0
 81088f8:	2b00      	cmp	r3, #0
 81088fa:	d001      	beq.n	8108900 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 81088fc:	2301      	movs	r3, #1
 81088fe:	e05d      	b.n	81089bc <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8108900:	f107 0308 	add.w	r3, r7, #8
 8108904:	4619      	mov	r1, r3
 8108906:	6878      	ldr	r0, [r7, #4]
 8108908:	f000 fdbe 	bl	8109488 <HAL_SD_GetCardStatus>
 810890c:	4603      	mov	r3, r0
 810890e:	2b00      	cmp	r3, #0
 8108910:	d001      	beq.n	8108916 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8108912:	2301      	movs	r3, #1
 8108914:	e052      	b.n	81089bc <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8108916:	7e3b      	ldrb	r3, [r7, #24]
 8108918:	b2db      	uxtb	r3, r3
 810891a:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 810891c:	7e7b      	ldrb	r3, [r7, #25]
 810891e:	b2db      	uxtb	r3, r3
 8108920:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8108922:	687b      	ldr	r3, [r7, #4]
 8108924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108926:	2b01      	cmp	r3, #1
 8108928:	d10a      	bne.n	8108940 <HAL_SD_Init+0x90>
 810892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810892c:	2b00      	cmp	r3, #0
 810892e:	d102      	bne.n	8108936 <HAL_SD_Init+0x86>
 8108930:	6a3b      	ldr	r3, [r7, #32]
 8108932:	2b00      	cmp	r3, #0
 8108934:	d004      	beq.n	8108940 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	f44f 7200 	mov.w	r2, #512	; 0x200
 810893c:	65da      	str	r2, [r3, #92]	; 0x5c
 810893e:	e00b      	b.n	8108958 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108944:	2b01      	cmp	r3, #1
 8108946:	d104      	bne.n	8108952 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8108948:	687b      	ldr	r3, [r7, #4]
 810894a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810894e:	65da      	str	r2, [r3, #92]	; 0x5c
 8108950:	e002      	b.n	8108958 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	2200      	movs	r2, #0
 8108956:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8108958:	687b      	ldr	r3, [r7, #4]
 810895a:	68db      	ldr	r3, [r3, #12]
 810895c:	4619      	mov	r1, r3
 810895e:	6878      	ldr	r0, [r7, #4]
 8108960:	f000 fe74 	bl	810964c <HAL_SD_ConfigWideBusOperation>
 8108964:	4603      	mov	r3, r0
 8108966:	2b00      	cmp	r3, #0
 8108968:	d001      	beq.n	810896e <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 810896a:	2301      	movs	r3, #1
 810896c:	e026      	b.n	81089bc <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 810896e:	f7f9 fca9 	bl	81022c4 <HAL_GetTick>
 8108972:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108974:	e011      	b.n	810899a <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8108976:	f7f9 fca5 	bl	81022c4 <HAL_GetTick>
 810897a:	4602      	mov	r2, r0
 810897c:	69fb      	ldr	r3, [r7, #28]
 810897e:	1ad3      	subs	r3, r2, r3
 8108980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108984:	d109      	bne.n	810899a <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810898c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	2201      	movs	r2, #1
 8108992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8108996:	2303      	movs	r3, #3
 8108998:	e010      	b.n	81089bc <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810899a:	6878      	ldr	r0, [r7, #4]
 810899c:	f000 ff6a 	bl	8109874 <HAL_SD_GetCardState>
 81089a0:	4603      	mov	r3, r0
 81089a2:	2b04      	cmp	r3, #4
 81089a4:	d1e7      	bne.n	8108976 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 81089a6:	687b      	ldr	r3, [r7, #4]
 81089a8:	2200      	movs	r2, #0
 81089aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 81089ac:	687b      	ldr	r3, [r7, #4]
 81089ae:	2200      	movs	r2, #0
 81089b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 81089b2:	687b      	ldr	r3, [r7, #4]
 81089b4:	2201      	movs	r2, #1
 81089b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 81089ba:	2300      	movs	r3, #0
}
 81089bc:	4618      	mov	r0, r3
 81089be:	3728      	adds	r7, #40	; 0x28
 81089c0:	46bd      	mov	sp, r7
 81089c2:	bd80      	pop	{r7, pc}

081089c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 81089c4:	b5b0      	push	{r4, r5, r7, lr}
 81089c6:	b08e      	sub	sp, #56	; 0x38
 81089c8:	af04      	add	r7, sp, #16
 81089ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 81089cc:	2300      	movs	r3, #0
 81089ce:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81089d0:	2300      	movs	r3, #0
 81089d2:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 81089d4:	2300      	movs	r3, #0
 81089d6:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81089d8:	2300      	movs	r3, #0
 81089da:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81089dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 81089e0:	f7fe fd20 	bl	8107424 <HAL_RCCEx_GetPeriphCLKFreq>
 81089e4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 81089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089e8:	2b00      	cmp	r3, #0
 81089ea:	d109      	bne.n	8108a00 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 81089ec:	687b      	ldr	r3, [r7, #4]
 81089ee:	2201      	movs	r2, #1
 81089f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 81089f4:	687b      	ldr	r3, [r7, #4]
 81089f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 81089fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 81089fc:	2301      	movs	r3, #1
 81089fe:	e079      	b.n	8108af4 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8108a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a02:	0a1b      	lsrs	r3, r3, #8
 8108a04:	4a3d      	ldr	r2, [pc, #244]	; (8108afc <HAL_SD_InitCard+0x138>)
 8108a06:	fba2 2303 	umull	r2, r3, r2, r3
 8108a0a:	091b      	lsrs	r3, r3, #4
 8108a0c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	699b      	ldr	r3, [r3, #24]
 8108a12:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8108a14:	687b      	ldr	r3, [r7, #4]
 8108a16:	699b      	ldr	r3, [r3, #24]
 8108a18:	2b02      	cmp	r3, #2
 8108a1a:	d107      	bne.n	8108a2c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8108a1c:	687b      	ldr	r3, [r7, #4]
 8108a1e:	681b      	ldr	r3, [r3, #0]
 8108a20:	681a      	ldr	r2, [r3, #0]
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	681b      	ldr	r3, [r3, #0]
 8108a26:	f042 0210 	orr.w	r2, r2, #16
 8108a2a:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8108a2c:	687b      	ldr	r3, [r7, #4]
 8108a2e:	681d      	ldr	r5, [r3, #0]
 8108a30:	466c      	mov	r4, sp
 8108a32:	f107 0314 	add.w	r3, r7, #20
 8108a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8108a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8108a3e:	f107 0308 	add.w	r3, r7, #8
 8108a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108a44:	4628      	mov	r0, r5
 8108a46:	f004 f9a9 	bl	810cd9c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8108a4a:	687b      	ldr	r3, [r7, #4]
 8108a4c:	681b      	ldr	r3, [r3, #0]
 8108a4e:	4618      	mov	r0, r3
 8108a50:	f004 f9ec 	bl	810ce2c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8108a54:	69bb      	ldr	r3, [r7, #24]
 8108a56:	005b      	lsls	r3, r3, #1
 8108a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8108a60:	4a27      	ldr	r2, [pc, #156]	; (8108b00 <HAL_SD_InitCard+0x13c>)
 8108a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8108a68:	3301      	adds	r3, #1
 8108a6a:	4618      	mov	r0, r3
 8108a6c:	f7f9 fc36 	bl	81022dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8108a70:	6878      	ldr	r0, [r7, #4]
 8108a72:	f000 ffdb 	bl	8109a2c <SD_PowerON>
 8108a76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108a78:	6a3b      	ldr	r3, [r7, #32]
 8108a7a:	2b00      	cmp	r3, #0
 8108a7c:	d00b      	beq.n	8108a96 <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108a7e:	687b      	ldr	r3, [r7, #4]
 8108a80:	2201      	movs	r2, #1
 8108a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8108a86:	687b      	ldr	r3, [r7, #4]
 8108a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108a8a:	6a3b      	ldr	r3, [r7, #32]
 8108a8c:	431a      	orrs	r2, r3
 8108a8e:	687b      	ldr	r3, [r7, #4]
 8108a90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8108a92:	2301      	movs	r3, #1
 8108a94:	e02e      	b.n	8108af4 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8108a96:	6878      	ldr	r0, [r7, #4]
 8108a98:	f000 ff0c 	bl	81098b4 <SD_InitCard>
 8108a9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108a9e:	6a3b      	ldr	r3, [r7, #32]
 8108aa0:	2b00      	cmp	r3, #0
 8108aa2:	d00b      	beq.n	8108abc <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108aa4:	687b      	ldr	r3, [r7, #4]
 8108aa6:	2201      	movs	r2, #1
 8108aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8108aac:	687b      	ldr	r3, [r7, #4]
 8108aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108ab0:	6a3b      	ldr	r3, [r7, #32]
 8108ab2:	431a      	orrs	r2, r3
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8108ab8:	2301      	movs	r3, #1
 8108aba:	e01b      	b.n	8108af4 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108abc:	687b      	ldr	r3, [r7, #4]
 8108abe:	681b      	ldr	r3, [r3, #0]
 8108ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8108ac4:	4618      	mov	r0, r3
 8108ac6:	f004 fa47 	bl	810cf58 <SDMMC_CmdBlockLength>
 8108aca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108acc:	6a3b      	ldr	r3, [r7, #32]
 8108ace:	2b00      	cmp	r3, #0
 8108ad0:	d00f      	beq.n	8108af2 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108ad2:	687b      	ldr	r3, [r7, #4]
 8108ad4:	681b      	ldr	r3, [r3, #0]
 8108ad6:	4a0b      	ldr	r2, [pc, #44]	; (8108b04 <HAL_SD_InitCard+0x140>)
 8108ad8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8108ada:	687b      	ldr	r3, [r7, #4]
 8108adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108ade:	6a3b      	ldr	r3, [r7, #32]
 8108ae0:	431a      	orrs	r2, r3
 8108ae2:	687b      	ldr	r3, [r7, #4]
 8108ae4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8108ae6:	687b      	ldr	r3, [r7, #4]
 8108ae8:	2201      	movs	r2, #1
 8108aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108aee:	2301      	movs	r3, #1
 8108af0:	e000      	b.n	8108af4 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8108af2:	2300      	movs	r3, #0
}
 8108af4:	4618      	mov	r0, r3
 8108af6:	3728      	adds	r7, #40	; 0x28
 8108af8:	46bd      	mov	sp, r7
 8108afa:	bdb0      	pop	{r4, r5, r7, pc}
 8108afc:	014f8b59 	.word	0x014f8b59
 8108b00:	00012110 	.word	0x00012110
 8108b04:	1fe00fff 	.word	0x1fe00fff

08108b08 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8108b08:	b580      	push	{r7, lr}
 8108b0a:	b08c      	sub	sp, #48	; 0x30
 8108b0c:	af00      	add	r7, sp, #0
 8108b0e:	60f8      	str	r0, [r7, #12]
 8108b10:	60b9      	str	r1, [r7, #8]
 8108b12:	607a      	str	r2, [r7, #4]
 8108b14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8108b1a:	68bb      	ldr	r3, [r7, #8]
 8108b1c:	2b00      	cmp	r3, #0
 8108b1e:	d107      	bne.n	8108b30 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8108b20:	68fb      	ldr	r3, [r7, #12]
 8108b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108b24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8108b28:	68fb      	ldr	r3, [r7, #12]
 8108b2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8108b2c:	2301      	movs	r3, #1
 8108b2e:	e08d      	b.n	8108c4c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8108b30:	68fb      	ldr	r3, [r7, #12]
 8108b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8108b36:	b2db      	uxtb	r3, r3
 8108b38:	2b01      	cmp	r3, #1
 8108b3a:	f040 8086 	bne.w	8108c4a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8108b3e:	68fb      	ldr	r3, [r7, #12]
 8108b40:	2200      	movs	r2, #0
 8108b42:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8108b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108b46:	683b      	ldr	r3, [r7, #0]
 8108b48:	441a      	add	r2, r3
 8108b4a:	68fb      	ldr	r3, [r7, #12]
 8108b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108b4e:	429a      	cmp	r2, r3
 8108b50:	d907      	bls.n	8108b62 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8108b52:	68fb      	ldr	r3, [r7, #12]
 8108b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108b56:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8108b5a:	68fb      	ldr	r3, [r7, #12]
 8108b5c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8108b5e:	2301      	movs	r3, #1
 8108b60:	e074      	b.n	8108c4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8108b62:	68fb      	ldr	r3, [r7, #12]
 8108b64:	2203      	movs	r2, #3
 8108b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8108b6a:	68fb      	ldr	r3, [r7, #12]
 8108b6c:	681b      	ldr	r3, [r3, #0]
 8108b6e:	2200      	movs	r2, #0
 8108b70:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8108b72:	68fb      	ldr	r3, [r7, #12]
 8108b74:	68ba      	ldr	r2, [r7, #8]
 8108b76:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8108b78:	683b      	ldr	r3, [r7, #0]
 8108b7a:	025a      	lsls	r2, r3, #9
 8108b7c:	68fb      	ldr	r3, [r7, #12]
 8108b7e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8108b80:	68fb      	ldr	r3, [r7, #12]
 8108b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108b84:	2b01      	cmp	r3, #1
 8108b86:	d002      	beq.n	8108b8e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8108b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108b8a:	025b      	lsls	r3, r3, #9
 8108b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8108b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8108b92:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8108b94:	683b      	ldr	r3, [r7, #0]
 8108b96:	025b      	lsls	r3, r3, #9
 8108b98:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8108b9a:	2390      	movs	r3, #144	; 0x90
 8108b9c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8108b9e:	2302      	movs	r3, #2
 8108ba0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8108ba2:	2300      	movs	r3, #0
 8108ba4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8108ba6:	2300      	movs	r3, #0
 8108ba8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8108baa:	68fb      	ldr	r3, [r7, #12]
 8108bac:	681b      	ldr	r3, [r3, #0]
 8108bae:	f107 0210 	add.w	r2, r7, #16
 8108bb2:	4611      	mov	r1, r2
 8108bb4:	4618      	mov	r0, r3
 8108bb6:	f004 f9a3 	bl	810cf00 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8108bba:	68fb      	ldr	r3, [r7, #12]
 8108bbc:	681b      	ldr	r3, [r3, #0]
 8108bbe:	68da      	ldr	r2, [r3, #12]
 8108bc0:	68fb      	ldr	r3, [r7, #12]
 8108bc2:	681b      	ldr	r3, [r3, #0]
 8108bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8108bc8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8108bca:	68fb      	ldr	r3, [r7, #12]
 8108bcc:	681b      	ldr	r3, [r3, #0]
 8108bce:	68ba      	ldr	r2, [r7, #8]
 8108bd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8108bd2:	68fb      	ldr	r3, [r7, #12]
 8108bd4:	681b      	ldr	r3, [r3, #0]
 8108bd6:	2201      	movs	r2, #1
 8108bd8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8108bda:	683b      	ldr	r3, [r7, #0]
 8108bdc:	2b01      	cmp	r3, #1
 8108bde:	d90a      	bls.n	8108bf6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8108be0:	68fb      	ldr	r3, [r7, #12]
 8108be2:	2282      	movs	r2, #130	; 0x82
 8108be4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8108be6:	68fb      	ldr	r3, [r7, #12]
 8108be8:	681b      	ldr	r3, [r3, #0]
 8108bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108bec:	4618      	mov	r0, r3
 8108bee:	f004 f9f9 	bl	810cfe4 <SDMMC_CmdReadMultiBlock>
 8108bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8108bf4:	e009      	b.n	8108c0a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8108bf6:	68fb      	ldr	r3, [r7, #12]
 8108bf8:	2281      	movs	r2, #129	; 0x81
 8108bfa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8108bfc:	68fb      	ldr	r3, [r7, #12]
 8108bfe:	681b      	ldr	r3, [r3, #0]
 8108c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108c02:	4618      	mov	r0, r3
 8108c04:	f004 f9cb 	bl	810cf9e <SDMMC_CmdReadSingleBlock>
 8108c08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8108c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c0c:	2b00      	cmp	r3, #0
 8108c0e:	d012      	beq.n	8108c36 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108c10:	68fb      	ldr	r3, [r7, #12]
 8108c12:	681b      	ldr	r3, [r3, #0]
 8108c14:	4a0f      	ldr	r2, [pc, #60]	; (8108c54 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8108c16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8108c18:	68fb      	ldr	r3, [r7, #12]
 8108c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c1e:	431a      	orrs	r2, r3
 8108c20:	68fb      	ldr	r3, [r7, #12]
 8108c22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8108c24:	68fb      	ldr	r3, [r7, #12]
 8108c26:	2201      	movs	r2, #1
 8108c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8108c2c:	68fb      	ldr	r3, [r7, #12]
 8108c2e:	2200      	movs	r2, #0
 8108c30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8108c32:	2301      	movs	r3, #1
 8108c34:	e00a      	b.n	8108c4c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8108c36:	68fb      	ldr	r3, [r7, #12]
 8108c38:	681b      	ldr	r3, [r3, #0]
 8108c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108c3c:	68fb      	ldr	r3, [r7, #12]
 8108c3e:	681b      	ldr	r3, [r3, #0]
 8108c40:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8108c44:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8108c46:	2300      	movs	r3, #0
 8108c48:	e000      	b.n	8108c4c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8108c4a:	2302      	movs	r3, #2
  }
}
 8108c4c:	4618      	mov	r0, r3
 8108c4e:	3730      	adds	r7, #48	; 0x30
 8108c50:	46bd      	mov	sp, r7
 8108c52:	bd80      	pop	{r7, pc}
 8108c54:	1fe00fff 	.word	0x1fe00fff

08108c58 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8108c58:	b580      	push	{r7, lr}
 8108c5a:	b08c      	sub	sp, #48	; 0x30
 8108c5c:	af00      	add	r7, sp, #0
 8108c5e:	60f8      	str	r0, [r7, #12]
 8108c60:	60b9      	str	r1, [r7, #8]
 8108c62:	607a      	str	r2, [r7, #4]
 8108c64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8108c66:	687b      	ldr	r3, [r7, #4]
 8108c68:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8108c6a:	68bb      	ldr	r3, [r7, #8]
 8108c6c:	2b00      	cmp	r3, #0
 8108c6e:	d107      	bne.n	8108c80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8108c70:	68fb      	ldr	r3, [r7, #12]
 8108c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108c74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8108c78:	68fb      	ldr	r3, [r7, #12]
 8108c7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8108c7c:	2301      	movs	r3, #1
 8108c7e:	e08d      	b.n	8108d9c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8108c80:	68fb      	ldr	r3, [r7, #12]
 8108c82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8108c86:	b2db      	uxtb	r3, r3
 8108c88:	2b01      	cmp	r3, #1
 8108c8a:	f040 8086 	bne.w	8108d9a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8108c8e:	68fb      	ldr	r3, [r7, #12]
 8108c90:	2200      	movs	r2, #0
 8108c92:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8108c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108c96:	683b      	ldr	r3, [r7, #0]
 8108c98:	441a      	add	r2, r3
 8108c9a:	68fb      	ldr	r3, [r7, #12]
 8108c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108c9e:	429a      	cmp	r2, r3
 8108ca0:	d907      	bls.n	8108cb2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8108ca2:	68fb      	ldr	r3, [r7, #12]
 8108ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108ca6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8108caa:	68fb      	ldr	r3, [r7, #12]
 8108cac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8108cae:	2301      	movs	r3, #1
 8108cb0:	e074      	b.n	8108d9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8108cb2:	68fb      	ldr	r3, [r7, #12]
 8108cb4:	2203      	movs	r2, #3
 8108cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8108cba:	68fb      	ldr	r3, [r7, #12]
 8108cbc:	681b      	ldr	r3, [r3, #0]
 8108cbe:	2200      	movs	r2, #0
 8108cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8108cc2:	68fb      	ldr	r3, [r7, #12]
 8108cc4:	68ba      	ldr	r2, [r7, #8]
 8108cc6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8108cc8:	683b      	ldr	r3, [r7, #0]
 8108cca:	025a      	lsls	r2, r3, #9
 8108ccc:	68fb      	ldr	r3, [r7, #12]
 8108cce:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8108cd0:	68fb      	ldr	r3, [r7, #12]
 8108cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108cd4:	2b01      	cmp	r3, #1
 8108cd6:	d002      	beq.n	8108cde <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8108cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108cda:	025b      	lsls	r3, r3, #9
 8108cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8108cde:	f04f 33ff 	mov.w	r3, #4294967295
 8108ce2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8108ce4:	683b      	ldr	r3, [r7, #0]
 8108ce6:	025b      	lsls	r3, r3, #9
 8108ce8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8108cea:	2390      	movs	r3, #144	; 0x90
 8108cec:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8108cee:	2300      	movs	r3, #0
 8108cf0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8108cf2:	2300      	movs	r3, #0
 8108cf4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8108cf6:	2300      	movs	r3, #0
 8108cf8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8108cfa:	68fb      	ldr	r3, [r7, #12]
 8108cfc:	681b      	ldr	r3, [r3, #0]
 8108cfe:	f107 0210 	add.w	r2, r7, #16
 8108d02:	4611      	mov	r1, r2
 8108d04:	4618      	mov	r0, r3
 8108d06:	f004 f8fb 	bl	810cf00 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8108d0a:	68fb      	ldr	r3, [r7, #12]
 8108d0c:	681b      	ldr	r3, [r3, #0]
 8108d0e:	68da      	ldr	r2, [r3, #12]
 8108d10:	68fb      	ldr	r3, [r7, #12]
 8108d12:	681b      	ldr	r3, [r3, #0]
 8108d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8108d18:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8108d1a:	68fb      	ldr	r3, [r7, #12]
 8108d1c:	681b      	ldr	r3, [r3, #0]
 8108d1e:	68ba      	ldr	r2, [r7, #8]
 8108d20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8108d22:	68fb      	ldr	r3, [r7, #12]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	2201      	movs	r2, #1
 8108d28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8108d2a:	683b      	ldr	r3, [r7, #0]
 8108d2c:	2b01      	cmp	r3, #1
 8108d2e:	d90a      	bls.n	8108d46 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8108d30:	68fb      	ldr	r3, [r7, #12]
 8108d32:	22a0      	movs	r2, #160	; 0xa0
 8108d34:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8108d36:	68fb      	ldr	r3, [r7, #12]
 8108d38:	681b      	ldr	r3, [r3, #0]
 8108d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108d3c:	4618      	mov	r0, r3
 8108d3e:	f004 f997 	bl	810d070 <SDMMC_CmdWriteMultiBlock>
 8108d42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8108d44:	e009      	b.n	8108d5a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8108d46:	68fb      	ldr	r3, [r7, #12]
 8108d48:	2290      	movs	r2, #144	; 0x90
 8108d4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8108d4c:	68fb      	ldr	r3, [r7, #12]
 8108d4e:	681b      	ldr	r3, [r3, #0]
 8108d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108d52:	4618      	mov	r0, r3
 8108d54:	f004 f969 	bl	810d02a <SDMMC_CmdWriteSingleBlock>
 8108d58:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8108d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108d5c:	2b00      	cmp	r3, #0
 8108d5e:	d012      	beq.n	8108d86 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108d60:	68fb      	ldr	r3, [r7, #12]
 8108d62:	681b      	ldr	r3, [r3, #0]
 8108d64:	4a0f      	ldr	r2, [pc, #60]	; (8108da4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8108d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8108d68:	68fb      	ldr	r3, [r7, #12]
 8108d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108d6e:	431a      	orrs	r2, r3
 8108d70:	68fb      	ldr	r3, [r7, #12]
 8108d72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8108d74:	68fb      	ldr	r3, [r7, #12]
 8108d76:	2201      	movs	r2, #1
 8108d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8108d7c:	68fb      	ldr	r3, [r7, #12]
 8108d7e:	2200      	movs	r2, #0
 8108d80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8108d82:	2301      	movs	r3, #1
 8108d84:	e00a      	b.n	8108d9c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8108d86:	68fb      	ldr	r3, [r7, #12]
 8108d88:	681b      	ldr	r3, [r3, #0]
 8108d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108d8c:	68fb      	ldr	r3, [r7, #12]
 8108d8e:	681b      	ldr	r3, [r3, #0]
 8108d90:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8108d94:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8108d96:	2300      	movs	r3, #0
 8108d98:	e000      	b.n	8108d9c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8108d9a:	2302      	movs	r3, #2
  }
}
 8108d9c:	4618      	mov	r0, r3
 8108d9e:	3730      	adds	r7, #48	; 0x30
 8108da0:	46bd      	mov	sp, r7
 8108da2:	bd80      	pop	{r7, pc}
 8108da4:	1fe00fff 	.word	0x1fe00fff

08108da8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8108da8:	b580      	push	{r7, lr}
 8108daa:	b084      	sub	sp, #16
 8108dac:	af00      	add	r7, sp, #0
 8108dae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8108db0:	687b      	ldr	r3, [r7, #4]
 8108db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108db4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8108db6:	687b      	ldr	r3, [r7, #4]
 8108db8:	681b      	ldr	r3, [r3, #0]
 8108dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8108dc0:	2b00      	cmp	r3, #0
 8108dc2:	d008      	beq.n	8108dd6 <HAL_SD_IRQHandler+0x2e>
 8108dc4:	68fb      	ldr	r3, [r7, #12]
 8108dc6:	f003 0308 	and.w	r3, r3, #8
 8108dca:	2b00      	cmp	r3, #0
 8108dcc:	d003      	beq.n	8108dd6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8108dce:	6878      	ldr	r0, [r7, #4]
 8108dd0:	f001 f992 	bl	810a0f8 <SD_Read_IT>
 8108dd4:	e199      	b.n	810910a <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8108dd6:	687b      	ldr	r3, [r7, #4]
 8108dd8:	681b      	ldr	r3, [r3, #0]
 8108dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108de0:	2b00      	cmp	r3, #0
 8108de2:	f000 80ae 	beq.w	8108f42 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8108de6:	687b      	ldr	r3, [r7, #4]
 8108de8:	681b      	ldr	r3, [r3, #0]
 8108dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8108dee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8108df0:	687b      	ldr	r3, [r7, #4]
 8108df2:	681b      	ldr	r3, [r3, #0]
 8108df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108df6:	687a      	ldr	r2, [r7, #4]
 8108df8:	6812      	ldr	r2, [r2, #0]
 8108dfa:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8108dfe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8108e02:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8108e04:	687b      	ldr	r3, [r7, #4]
 8108e06:	681b      	ldr	r3, [r3, #0]
 8108e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108e0a:	687b      	ldr	r3, [r7, #4]
 8108e0c:	681b      	ldr	r3, [r3, #0]
 8108e0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8108e12:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	681b      	ldr	r3, [r3, #0]
 8108e18:	68da      	ldr	r2, [r3, #12]
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	681b      	ldr	r3, [r3, #0]
 8108e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108e22:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8108e24:	68fb      	ldr	r3, [r7, #12]
 8108e26:	f003 0308 	and.w	r3, r3, #8
 8108e2a:	2b00      	cmp	r3, #0
 8108e2c:	d038      	beq.n	8108ea0 <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8108e2e:	68fb      	ldr	r3, [r7, #12]
 8108e30:	f003 0302 	and.w	r3, r3, #2
 8108e34:	2b00      	cmp	r3, #0
 8108e36:	d104      	bne.n	8108e42 <HAL_SD_IRQHandler+0x9a>
 8108e38:	68fb      	ldr	r3, [r7, #12]
 8108e3a:	f003 0320 	and.w	r3, r3, #32
 8108e3e:	2b00      	cmp	r3, #0
 8108e40:	d011      	beq.n	8108e66 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8108e42:	687b      	ldr	r3, [r7, #4]
 8108e44:	681b      	ldr	r3, [r3, #0]
 8108e46:	4618      	mov	r0, r3
 8108e48:	f004 f936 	bl	810d0b8 <SDMMC_CmdStopTransfer>
 8108e4c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8108e4e:	68bb      	ldr	r3, [r7, #8]
 8108e50:	2b00      	cmp	r3, #0
 8108e52:	d008      	beq.n	8108e66 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8108e54:	687b      	ldr	r3, [r7, #4]
 8108e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108e58:	68bb      	ldr	r3, [r7, #8]
 8108e5a:	431a      	orrs	r2, r3
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8108e60:	6878      	ldr	r0, [r7, #4]
 8108e62:	f000 f957 	bl	8109114 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8108e66:	687b      	ldr	r3, [r7, #4]
 8108e68:	681b      	ldr	r3, [r3, #0]
 8108e6a:	4aa0      	ldr	r2, [pc, #640]	; (81090ec <HAL_SD_IRQHandler+0x344>)
 8108e6c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	2201      	movs	r2, #1
 8108e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	2200      	movs	r2, #0
 8108e7a:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8108e7c:	68fb      	ldr	r3, [r7, #12]
 8108e7e:	f003 0301 	and.w	r3, r3, #1
 8108e82:	2b00      	cmp	r3, #0
 8108e84:	d104      	bne.n	8108e90 <HAL_SD_IRQHandler+0xe8>
 8108e86:	68fb      	ldr	r3, [r7, #12]
 8108e88:	f003 0302 	and.w	r3, r3, #2
 8108e8c:	2b00      	cmp	r3, #0
 8108e8e:	d003      	beq.n	8108e98 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8108e90:	6878      	ldr	r0, [r7, #4]
 8108e92:	f004 fe03 	bl	810da9c <HAL_SD_RxCpltCallback>
 8108e96:	e138      	b.n	810910a <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8108e98:	6878      	ldr	r0, [r7, #4]
 8108e9a:	f004 fdf5 	bl	810da88 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8108e9e:	e134      	b.n	810910a <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8108ea0:	68fb      	ldr	r3, [r7, #12]
 8108ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108ea6:	2b00      	cmp	r3, #0
 8108ea8:	f000 812f 	beq.w	810910a <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8108eac:	687b      	ldr	r3, [r7, #4]
 8108eae:	681b      	ldr	r3, [r3, #0]
 8108eb0:	2200      	movs	r2, #0
 8108eb2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8108eb4:	687b      	ldr	r3, [r7, #4]
 8108eb6:	681b      	ldr	r3, [r3, #0]
 8108eb8:	2200      	movs	r2, #0
 8108eba:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8108ebc:	687b      	ldr	r3, [r7, #4]
 8108ebe:	681b      	ldr	r3, [r3, #0]
 8108ec0:	2200      	movs	r2, #0
 8108ec2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8108ec4:	68fb      	ldr	r3, [r7, #12]
 8108ec6:	f003 0302 	and.w	r3, r3, #2
 8108eca:	2b00      	cmp	r3, #0
 8108ecc:	d104      	bne.n	8108ed8 <HAL_SD_IRQHandler+0x130>
 8108ece:	68fb      	ldr	r3, [r7, #12]
 8108ed0:	f003 0320 	and.w	r3, r3, #32
 8108ed4:	2b00      	cmp	r3, #0
 8108ed6:	d011      	beq.n	8108efc <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	681b      	ldr	r3, [r3, #0]
 8108edc:	4618      	mov	r0, r3
 8108ede:	f004 f8eb 	bl	810d0b8 <SDMMC_CmdStopTransfer>
 8108ee2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8108ee4:	68bb      	ldr	r3, [r7, #8]
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d008      	beq.n	8108efc <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8108eea:	687b      	ldr	r3, [r7, #4]
 8108eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108eee:	68bb      	ldr	r3, [r7, #8]
 8108ef0:	431a      	orrs	r2, r3
 8108ef2:	687b      	ldr	r3, [r7, #4]
 8108ef4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8108ef6:	6878      	ldr	r0, [r7, #4]
 8108ef8:	f000 f90c 	bl	8109114 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8108efc:	687b      	ldr	r3, [r7, #4]
 8108efe:	2201      	movs	r2, #1
 8108f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8108f04:	687b      	ldr	r3, [r7, #4]
 8108f06:	2200      	movs	r2, #0
 8108f08:	631a      	str	r2, [r3, #48]	; 0x30
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8108f0a:	68fb      	ldr	r3, [r7, #12]
 8108f0c:	f003 0310 	and.w	r3, r3, #16
 8108f10:	2b00      	cmp	r3, #0
 8108f12:	d104      	bne.n	8108f1e <HAL_SD_IRQHandler+0x176>
 8108f14:	68fb      	ldr	r3, [r7, #12]
 8108f16:	f003 0320 	and.w	r3, r3, #32
 8108f1a:	2b00      	cmp	r3, #0
 8108f1c:	d002      	beq.n	8108f24 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8108f1e:	6878      	ldr	r0, [r7, #4]
 8108f20:	f004 fdb2 	bl	810da88 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8108f24:	68fb      	ldr	r3, [r7, #12]
 8108f26:	f003 0301 	and.w	r3, r3, #1
 8108f2a:	2b00      	cmp	r3, #0
 8108f2c:	d105      	bne.n	8108f3a <HAL_SD_IRQHandler+0x192>
 8108f2e:	68fb      	ldr	r3, [r7, #12]
 8108f30:	f003 0302 	and.w	r3, r3, #2
 8108f34:	2b00      	cmp	r3, #0
 8108f36:	f000 80e8 	beq.w	810910a <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8108f3a:	6878      	ldr	r0, [r7, #4]
 8108f3c:	f004 fdae 	bl	810da9c <HAL_SD_RxCpltCallback>
}
 8108f40:	e0e3      	b.n	810910a <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8108f42:	687b      	ldr	r3, [r7, #4]
 8108f44:	681b      	ldr	r3, [r3, #0]
 8108f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108f4c:	2b00      	cmp	r3, #0
 8108f4e:	d008      	beq.n	8108f62 <HAL_SD_IRQHandler+0x1ba>
 8108f50:	68fb      	ldr	r3, [r7, #12]
 8108f52:	f003 0308 	and.w	r3, r3, #8
 8108f56:	2b00      	cmp	r3, #0
 8108f58:	d003      	beq.n	8108f62 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8108f5a:	6878      	ldr	r0, [r7, #4]
 8108f5c:	f001 f912 	bl	810a184 <SD_Write_IT>
 8108f60:	e0d3      	b.n	810910a <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8108f62:	687b      	ldr	r3, [r7, #4]
 8108f64:	681b      	ldr	r3, [r3, #0]
 8108f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f68:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8108f6c:	2b00      	cmp	r3, #0
 8108f6e:	f000 809d 	beq.w	81090ac <HAL_SD_IRQHandler+0x304>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8108f72:	687b      	ldr	r3, [r7, #4]
 8108f74:	681b      	ldr	r3, [r3, #0]
 8108f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f78:	f003 0302 	and.w	r3, r3, #2
 8108f7c:	2b00      	cmp	r3, #0
 8108f7e:	d005      	beq.n	8108f8c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8108f80:	687b      	ldr	r3, [r7, #4]
 8108f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108f84:	f043 0202 	orr.w	r2, r3, #2
 8108f88:	687b      	ldr	r3, [r7, #4]
 8108f8a:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8108f8c:	687b      	ldr	r3, [r7, #4]
 8108f8e:	681b      	ldr	r3, [r3, #0]
 8108f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f92:	f003 0308 	and.w	r3, r3, #8
 8108f96:	2b00      	cmp	r3, #0
 8108f98:	d005      	beq.n	8108fa6 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8108f9a:	687b      	ldr	r3, [r7, #4]
 8108f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108f9e:	f043 0208 	orr.w	r2, r3, #8
 8108fa2:	687b      	ldr	r3, [r7, #4]
 8108fa4:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8108fa6:	687b      	ldr	r3, [r7, #4]
 8108fa8:	681b      	ldr	r3, [r3, #0]
 8108faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108fac:	f003 0320 	and.w	r3, r3, #32
 8108fb0:	2b00      	cmp	r3, #0
 8108fb2:	d005      	beq.n	8108fc0 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108fb8:	f043 0220 	orr.w	r2, r3, #32
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	639a      	str	r2, [r3, #56]	; 0x38
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	681b      	ldr	r3, [r3, #0]
 8108fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108fc6:	f003 0310 	and.w	r3, r3, #16
 8108fca:	2b00      	cmp	r3, #0
 8108fcc:	d005      	beq.n	8108fda <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8108fce:	687b      	ldr	r3, [r7, #4]
 8108fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108fd2:	f043 0210 	orr.w	r2, r3, #16
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	681b      	ldr	r3, [r3, #0]
 8108fde:	4a43      	ldr	r2, [pc, #268]	; (81090ec <HAL_SD_IRQHandler+0x344>)
 8108fe0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8108fe2:	687b      	ldr	r3, [r7, #4]
 8108fe4:	681b      	ldr	r3, [r3, #0]
 8108fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	681b      	ldr	r3, [r3, #0]
 8108fec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8108ff0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	681b      	ldr	r3, [r3, #0]
 8108ff6:	68da      	ldr	r2, [r3, #12]
 8108ff8:	687b      	ldr	r3, [r7, #4]
 8108ffa:	681b      	ldr	r3, [r3, #0]
 8108ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8109000:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	681b      	ldr	r3, [r3, #0]
 8109006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109008:	687b      	ldr	r3, [r7, #4]
 810900a:	681b      	ldr	r3, [r3, #0]
 810900c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8109010:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	681b      	ldr	r3, [r3, #0]
 8109016:	68da      	ldr	r2, [r3, #12]
 8109018:	687b      	ldr	r3, [r7, #4]
 810901a:	681b      	ldr	r3, [r3, #0]
 810901c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8109020:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8109022:	687b      	ldr	r3, [r7, #4]
 8109024:	681b      	ldr	r3, [r3, #0]
 8109026:	4618      	mov	r0, r3
 8109028:	f004 f846 	bl	810d0b8 <SDMMC_CmdStopTransfer>
 810902c:	4602      	mov	r2, r0
 810902e:	687b      	ldr	r3, [r7, #4]
 8109030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109032:	431a      	orrs	r2, r3
 8109034:	687b      	ldr	r3, [r7, #4]
 8109036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8109038:	687b      	ldr	r3, [r7, #4]
 810903a:	681b      	ldr	r3, [r3, #0]
 810903c:	68da      	ldr	r2, [r3, #12]
 810903e:	687b      	ldr	r3, [r7, #4]
 8109040:	681b      	ldr	r3, [r3, #0]
 8109042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8109046:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8109048:	687b      	ldr	r3, [r7, #4]
 810904a:	681b      	ldr	r3, [r3, #0]
 810904c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109050:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8109052:	68fb      	ldr	r3, [r7, #12]
 8109054:	f003 0308 	and.w	r3, r3, #8
 8109058:	2b00      	cmp	r3, #0
 810905a:	d00a      	beq.n	8109072 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 810905c:	687b      	ldr	r3, [r7, #4]
 810905e:	2201      	movs	r2, #1
 8109060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8109064:	687b      	ldr	r3, [r7, #4]
 8109066:	2200      	movs	r2, #0
 8109068:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 810906a:	6878      	ldr	r0, [r7, #4]
 810906c:	f000 f852 	bl	8109114 <HAL_SD_ErrorCallback>
}
 8109070:	e04b      	b.n	810910a <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8109072:	68fb      	ldr	r3, [r7, #12]
 8109074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109078:	2b00      	cmp	r3, #0
 810907a:	d046      	beq.n	810910a <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810907c:	687b      	ldr	r3, [r7, #4]
 810907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109080:	2b00      	cmp	r3, #0
 8109082:	d042      	beq.n	810910a <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	681b      	ldr	r3, [r3, #0]
 8109088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810908a:	687b      	ldr	r3, [r7, #4]
 810908c:	681b      	ldr	r3, [r3, #0]
 810908e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8109092:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	681b      	ldr	r3, [r3, #0]
 8109098:	2200      	movs	r2, #0
 810909a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 810909c:	687b      	ldr	r3, [r7, #4]
 810909e:	2201      	movs	r2, #1
 81090a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 81090a4:	6878      	ldr	r0, [r7, #4]
 81090a6:	f000 f835 	bl	8109114 <HAL_SD_ErrorCallback>
}
 81090aa:	e02e      	b.n	810910a <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 81090ac:	687b      	ldr	r3, [r7, #4]
 81090ae:	681b      	ldr	r3, [r3, #0]
 81090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81090b6:	2b00      	cmp	r3, #0
 81090b8:	d027      	beq.n	810910a <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 81090ba:	687b      	ldr	r3, [r7, #4]
 81090bc:	681b      	ldr	r3, [r3, #0]
 81090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81090c2:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	681b      	ldr	r3, [r3, #0]
 81090c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81090ca:	f003 0304 	and.w	r3, r3, #4
 81090ce:	2b00      	cmp	r3, #0
 81090d0:	d10e      	bne.n	81090f0 <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 81090d2:	68fb      	ldr	r3, [r7, #12]
 81090d4:	f003 0320 	and.w	r3, r3, #32
 81090d8:	2b00      	cmp	r3, #0
 81090da:	d003      	beq.n	81090e4 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 81090dc:	6878      	ldr	r0, [r7, #4]
 81090de:	f001 f8b9 	bl	810a254 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 81090e2:	e012      	b.n	810910a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 81090e4:	6878      	ldr	r0, [r7, #4]
 81090e6:	f001 f8a1 	bl	810a22c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 81090ea:	e00e      	b.n	810910a <HAL_SD_IRQHandler+0x362>
 81090ec:	18000f3a 	.word	0x18000f3a
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 81090f0:	68fb      	ldr	r3, [r7, #12]
 81090f2:	f003 0320 	and.w	r3, r3, #32
 81090f6:	2b00      	cmp	r3, #0
 81090f8:	d003      	beq.n	8109102 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 81090fa:	6878      	ldr	r0, [r7, #4]
 81090fc:	f001 f8a0 	bl	810a240 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8109100:	e003      	b.n	810910a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8109102:	6878      	ldr	r0, [r7, #4]
 8109104:	f001 f888 	bl	810a218 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8109108:	e7ff      	b.n	810910a <HAL_SD_IRQHandler+0x362>
 810910a:	bf00      	nop
 810910c:	3710      	adds	r7, #16
 810910e:	46bd      	mov	sp, r7
 8109110:	bd80      	pop	{r7, pc}
 8109112:	bf00      	nop

08109114 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8109114:	b480      	push	{r7}
 8109116:	b083      	sub	sp, #12
 8109118:	af00      	add	r7, sp, #0
 810911a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 810911c:	bf00      	nop
 810911e:	370c      	adds	r7, #12
 8109120:	46bd      	mov	sp, r7
 8109122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109126:	4770      	bx	lr

08109128 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8109128:	b480      	push	{r7}
 810912a:	b083      	sub	sp, #12
 810912c:	af00      	add	r7, sp, #0
 810912e:	4603      	mov	r3, r0
 8109130:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8109132:	bf00      	nop
 8109134:	370c      	adds	r7, #12
 8109136:	46bd      	mov	sp, r7
 8109138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810913c:	4770      	bx	lr
	...

08109140 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8109140:	b480      	push	{r7}
 8109142:	b083      	sub	sp, #12
 8109144:	af00      	add	r7, sp, #0
 8109146:	6078      	str	r0, [r7, #4]
 8109148:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810914a:	687b      	ldr	r3, [r7, #4]
 810914c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810914e:	0f9b      	lsrs	r3, r3, #30
 8109150:	b2da      	uxtb	r2, r3
 8109152:	683b      	ldr	r3, [r7, #0]
 8109154:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810915a:	0e9b      	lsrs	r3, r3, #26
 810915c:	b2db      	uxtb	r3, r3
 810915e:	f003 030f 	and.w	r3, r3, #15
 8109162:	b2da      	uxtb	r2, r3
 8109164:	683b      	ldr	r3, [r7, #0]
 8109166:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8109168:	687b      	ldr	r3, [r7, #4]
 810916a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810916c:	0e1b      	lsrs	r3, r3, #24
 810916e:	b2db      	uxtb	r3, r3
 8109170:	f003 0303 	and.w	r3, r3, #3
 8109174:	b2da      	uxtb	r2, r3
 8109176:	683b      	ldr	r3, [r7, #0]
 8109178:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810917a:	687b      	ldr	r3, [r7, #4]
 810917c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810917e:	0c1b      	lsrs	r3, r3, #16
 8109180:	b2da      	uxtb	r2, r3
 8109182:	683b      	ldr	r3, [r7, #0]
 8109184:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8109186:	687b      	ldr	r3, [r7, #4]
 8109188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810918a:	0a1b      	lsrs	r3, r3, #8
 810918c:	b2da      	uxtb	r2, r3
 810918e:	683b      	ldr	r3, [r7, #0]
 8109190:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8109192:	687b      	ldr	r3, [r7, #4]
 8109194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109196:	b2da      	uxtb	r2, r3
 8109198:	683b      	ldr	r3, [r7, #0]
 810919a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 810919c:	687b      	ldr	r3, [r7, #4]
 810919e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81091a0:	0d1b      	lsrs	r3, r3, #20
 81091a2:	b29a      	uxth	r2, r3
 81091a4:	683b      	ldr	r3, [r7, #0]
 81091a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81091ac:	0c1b      	lsrs	r3, r3, #16
 81091ae:	b2db      	uxtb	r3, r3
 81091b0:	f003 030f 	and.w	r3, r3, #15
 81091b4:	b2da      	uxtb	r2, r3
 81091b6:	683b      	ldr	r3, [r7, #0]
 81091b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 81091ba:	687b      	ldr	r3, [r7, #4]
 81091bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81091be:	0bdb      	lsrs	r3, r3, #15
 81091c0:	b2db      	uxtb	r3, r3
 81091c2:	f003 0301 	and.w	r3, r3, #1
 81091c6:	b2da      	uxtb	r2, r3
 81091c8:	683b      	ldr	r3, [r7, #0]
 81091ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81091d0:	0b9b      	lsrs	r3, r3, #14
 81091d2:	b2db      	uxtb	r3, r3
 81091d4:	f003 0301 	and.w	r3, r3, #1
 81091d8:	b2da      	uxtb	r2, r3
 81091da:	683b      	ldr	r3, [r7, #0]
 81091dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81091e2:	0b5b      	lsrs	r3, r3, #13
 81091e4:	b2db      	uxtb	r3, r3
 81091e6:	f003 0301 	and.w	r3, r3, #1
 81091ea:	b2da      	uxtb	r2, r3
 81091ec:	683b      	ldr	r3, [r7, #0]
 81091ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 81091f0:	687b      	ldr	r3, [r7, #4]
 81091f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81091f4:	0b1b      	lsrs	r3, r3, #12
 81091f6:	b2db      	uxtb	r3, r3
 81091f8:	f003 0301 	and.w	r3, r3, #1
 81091fc:	b2da      	uxtb	r2, r3
 81091fe:	683b      	ldr	r3, [r7, #0]
 8109200:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8109202:	683b      	ldr	r3, [r7, #0]
 8109204:	2200      	movs	r2, #0
 8109206:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8109208:	687b      	ldr	r3, [r7, #4]
 810920a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810920c:	2b00      	cmp	r3, #0
 810920e:	d163      	bne.n	81092d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109214:	009a      	lsls	r2, r3, #2
 8109216:	f640 73fc 	movw	r3, #4092	; 0xffc
 810921a:	4013      	ands	r3, r2
 810921c:	687a      	ldr	r2, [r7, #4]
 810921e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8109220:	0f92      	lsrs	r2, r2, #30
 8109222:	431a      	orrs	r2, r3
 8109224:	683b      	ldr	r3, [r7, #0]
 8109226:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8109228:	687b      	ldr	r3, [r7, #4]
 810922a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810922c:	0edb      	lsrs	r3, r3, #27
 810922e:	b2db      	uxtb	r3, r3
 8109230:	f003 0307 	and.w	r3, r3, #7
 8109234:	b2da      	uxtb	r2, r3
 8109236:	683b      	ldr	r3, [r7, #0]
 8109238:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810923e:	0e1b      	lsrs	r3, r3, #24
 8109240:	b2db      	uxtb	r3, r3
 8109242:	f003 0307 	and.w	r3, r3, #7
 8109246:	b2da      	uxtb	r2, r3
 8109248:	683b      	ldr	r3, [r7, #0]
 810924a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 810924c:	687b      	ldr	r3, [r7, #4]
 810924e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109250:	0d5b      	lsrs	r3, r3, #21
 8109252:	b2db      	uxtb	r3, r3
 8109254:	f003 0307 	and.w	r3, r3, #7
 8109258:	b2da      	uxtb	r2, r3
 810925a:	683b      	ldr	r3, [r7, #0]
 810925c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 810925e:	687b      	ldr	r3, [r7, #4]
 8109260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109262:	0c9b      	lsrs	r3, r3, #18
 8109264:	b2db      	uxtb	r3, r3
 8109266:	f003 0307 	and.w	r3, r3, #7
 810926a:	b2da      	uxtb	r2, r3
 810926c:	683b      	ldr	r3, [r7, #0]
 810926e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109274:	0bdb      	lsrs	r3, r3, #15
 8109276:	b2db      	uxtb	r3, r3
 8109278:	f003 0307 	and.w	r3, r3, #7
 810927c:	b2da      	uxtb	r2, r3
 810927e:	683b      	ldr	r3, [r7, #0]
 8109280:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8109282:	683b      	ldr	r3, [r7, #0]
 8109284:	691b      	ldr	r3, [r3, #16]
 8109286:	1c5a      	adds	r2, r3, #1
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 810928c:	683b      	ldr	r3, [r7, #0]
 810928e:	7e1b      	ldrb	r3, [r3, #24]
 8109290:	b2db      	uxtb	r3, r3
 8109292:	f003 0307 	and.w	r3, r3, #7
 8109296:	3302      	adds	r3, #2
 8109298:	2201      	movs	r2, #1
 810929a:	fa02 f303 	lsl.w	r3, r2, r3
 810929e:	687a      	ldr	r2, [r7, #4]
 81092a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 81092a2:	fb02 f203 	mul.w	r2, r2, r3
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 81092aa:	683b      	ldr	r3, [r7, #0]
 81092ac:	7a1b      	ldrb	r3, [r3, #8]
 81092ae:	b2db      	uxtb	r3, r3
 81092b0:	f003 030f 	and.w	r3, r3, #15
 81092b4:	2201      	movs	r2, #1
 81092b6:	409a      	lsls	r2, r3
 81092b8:	687b      	ldr	r3, [r7, #4]
 81092ba:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81092c0:	687a      	ldr	r2, [r7, #4]
 81092c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 81092c4:	0a52      	lsrs	r2, r2, #9
 81092c6:	fb02 f203 	mul.w	r2, r2, r3
 81092ca:	687b      	ldr	r3, [r7, #4]
 81092cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 81092d4:	659a      	str	r2, [r3, #88]	; 0x58
 81092d6:	e031      	b.n	810933c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81092dc:	2b01      	cmp	r3, #1
 81092de:	d11d      	bne.n	810931c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81092e4:	041b      	lsls	r3, r3, #16
 81092e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81092ee:	0c1b      	lsrs	r3, r3, #16
 81092f0:	431a      	orrs	r2, r3
 81092f2:	683b      	ldr	r3, [r7, #0]
 81092f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 81092f6:	683b      	ldr	r3, [r7, #0]
 81092f8:	691b      	ldr	r3, [r3, #16]
 81092fa:	3301      	adds	r3, #1
 81092fc:	029a      	lsls	r2, r3, #10
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8109302:	687b      	ldr	r3, [r7, #4]
 8109304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 810930a:	687b      	ldr	r3, [r7, #4]
 810930c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8109310:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8109312:	687b      	ldr	r3, [r7, #4]
 8109314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8109316:	687b      	ldr	r3, [r7, #4]
 8109318:	659a      	str	r2, [r3, #88]	; 0x58
 810931a:	e00f      	b.n	810933c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	681b      	ldr	r3, [r3, #0]
 8109320:	4a58      	ldr	r2, [pc, #352]	; (8109484 <HAL_SD_GetCardCSD+0x344>)
 8109322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810932c:	687b      	ldr	r3, [r7, #4]
 810932e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8109330:	687b      	ldr	r3, [r7, #4]
 8109332:	2201      	movs	r2, #1
 8109334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8109338:	2301      	movs	r3, #1
 810933a:	e09d      	b.n	8109478 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 810933c:	687b      	ldr	r3, [r7, #4]
 810933e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109340:	0b9b      	lsrs	r3, r3, #14
 8109342:	b2db      	uxtb	r3, r3
 8109344:	f003 0301 	and.w	r3, r3, #1
 8109348:	b2da      	uxtb	r2, r3
 810934a:	683b      	ldr	r3, [r7, #0]
 810934c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109352:	09db      	lsrs	r3, r3, #7
 8109354:	b2db      	uxtb	r3, r3
 8109356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810935a:	b2da      	uxtb	r2, r3
 810935c:	683b      	ldr	r3, [r7, #0]
 810935e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109364:	b2db      	uxtb	r3, r3
 8109366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810936a:	b2da      	uxtb	r2, r3
 810936c:	683b      	ldr	r3, [r7, #0]
 810936e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8109370:	687b      	ldr	r3, [r7, #4]
 8109372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109374:	0fdb      	lsrs	r3, r3, #31
 8109376:	b2da      	uxtb	r2, r3
 8109378:	683b      	ldr	r3, [r7, #0]
 810937a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 810937c:	687b      	ldr	r3, [r7, #4]
 810937e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109380:	0f5b      	lsrs	r3, r3, #29
 8109382:	b2db      	uxtb	r3, r3
 8109384:	f003 0303 	and.w	r3, r3, #3
 8109388:	b2da      	uxtb	r2, r3
 810938a:	683b      	ldr	r3, [r7, #0]
 810938c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 810938e:	687b      	ldr	r3, [r7, #4]
 8109390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109392:	0e9b      	lsrs	r3, r3, #26
 8109394:	b2db      	uxtb	r3, r3
 8109396:	f003 0307 	and.w	r3, r3, #7
 810939a:	b2da      	uxtb	r2, r3
 810939c:	683b      	ldr	r3, [r7, #0]
 810939e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 81093a0:	687b      	ldr	r3, [r7, #4]
 81093a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81093a4:	0d9b      	lsrs	r3, r3, #22
 81093a6:	b2db      	uxtb	r3, r3
 81093a8:	f003 030f 	and.w	r3, r3, #15
 81093ac:	b2da      	uxtb	r2, r3
 81093ae:	683b      	ldr	r3, [r7, #0]
 81093b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 81093b2:	687b      	ldr	r3, [r7, #4]
 81093b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81093b6:	0d5b      	lsrs	r3, r3, #21
 81093b8:	b2db      	uxtb	r3, r3
 81093ba:	f003 0301 	and.w	r3, r3, #1
 81093be:	b2da      	uxtb	r2, r3
 81093c0:	683b      	ldr	r3, [r7, #0]
 81093c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 81093c6:	683b      	ldr	r3, [r7, #0]
 81093c8:	2200      	movs	r2, #0
 81093ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 81093ce:	687b      	ldr	r3, [r7, #4]
 81093d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81093d2:	0c1b      	lsrs	r3, r3, #16
 81093d4:	b2db      	uxtb	r3, r3
 81093d6:	f003 0301 	and.w	r3, r3, #1
 81093da:	b2da      	uxtb	r2, r3
 81093dc:	683b      	ldr	r3, [r7, #0]
 81093de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 81093e2:	687b      	ldr	r3, [r7, #4]
 81093e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81093e6:	0bdb      	lsrs	r3, r3, #15
 81093e8:	b2db      	uxtb	r3, r3
 81093ea:	f003 0301 	and.w	r3, r3, #1
 81093ee:	b2da      	uxtb	r2, r3
 81093f0:	683b      	ldr	r3, [r7, #0]
 81093f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 81093f6:	687b      	ldr	r3, [r7, #4]
 81093f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81093fa:	0b9b      	lsrs	r3, r3, #14
 81093fc:	b2db      	uxtb	r3, r3
 81093fe:	f003 0301 	and.w	r3, r3, #1
 8109402:	b2da      	uxtb	r2, r3
 8109404:	683b      	ldr	r3, [r7, #0]
 8109406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 810940a:	687b      	ldr	r3, [r7, #4]
 810940c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810940e:	0b5b      	lsrs	r3, r3, #13
 8109410:	b2db      	uxtb	r3, r3
 8109412:	f003 0301 	and.w	r3, r3, #1
 8109416:	b2da      	uxtb	r2, r3
 8109418:	683b      	ldr	r3, [r7, #0]
 810941a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 810941e:	687b      	ldr	r3, [r7, #4]
 8109420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109422:	0b1b      	lsrs	r3, r3, #12
 8109424:	b2db      	uxtb	r3, r3
 8109426:	f003 0301 	and.w	r3, r3, #1
 810942a:	b2da      	uxtb	r2, r3
 810942c:	683b      	ldr	r3, [r7, #0]
 810942e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109436:	0a9b      	lsrs	r3, r3, #10
 8109438:	b2db      	uxtb	r3, r3
 810943a:	f003 0303 	and.w	r3, r3, #3
 810943e:	b2da      	uxtb	r2, r3
 8109440:	683b      	ldr	r3, [r7, #0]
 8109442:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8109446:	687b      	ldr	r3, [r7, #4]
 8109448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810944a:	0a1b      	lsrs	r3, r3, #8
 810944c:	b2db      	uxtb	r3, r3
 810944e:	f003 0303 	and.w	r3, r3, #3
 8109452:	b2da      	uxtb	r2, r3
 8109454:	683b      	ldr	r3, [r7, #0]
 8109456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810945e:	085b      	lsrs	r3, r3, #1
 8109460:	b2db      	uxtb	r3, r3
 8109462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8109466:	b2da      	uxtb	r2, r3
 8109468:	683b      	ldr	r3, [r7, #0]
 810946a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 810946e:	683b      	ldr	r3, [r7, #0]
 8109470:	2201      	movs	r2, #1
 8109472:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8109476:	2300      	movs	r3, #0
}
 8109478:	4618      	mov	r0, r3
 810947a:	370c      	adds	r7, #12
 810947c:	46bd      	mov	sp, r7
 810947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109482:	4770      	bx	lr
 8109484:	1fe00fff 	.word	0x1fe00fff

08109488 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8109488:	b580      	push	{r7, lr}
 810948a:	b094      	sub	sp, #80	; 0x50
 810948c:	af00      	add	r7, sp, #0
 810948e:	6078      	str	r0, [r7, #4]
 8109490:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8109492:	2300      	movs	r3, #0
 8109494:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8109498:	f107 0308 	add.w	r3, r7, #8
 810949c:	4619      	mov	r1, r3
 810949e:	6878      	ldr	r0, [r7, #4]
 81094a0:	f000 fbcc 	bl	8109c3c <SD_SendSDStatus>
 81094a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81094a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81094a8:	2b00      	cmp	r3, #0
 81094aa:	d011      	beq.n	81094d0 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	681b      	ldr	r3, [r3, #0]
 81094b0:	4a4f      	ldr	r2, [pc, #316]	; (81095f0 <HAL_SD_GetCardStatus+0x168>)
 81094b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 81094b4:	687b      	ldr	r3, [r7, #4]
 81094b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81094b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81094ba:	431a      	orrs	r2, r3
 81094bc:	687b      	ldr	r3, [r7, #4]
 81094be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 81094c0:	687b      	ldr	r3, [r7, #4]
 81094c2:	2201      	movs	r2, #1
 81094c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 81094c8:	2301      	movs	r3, #1
 81094ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 81094ce:	e070      	b.n	81095b2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 81094d0:	68bb      	ldr	r3, [r7, #8]
 81094d2:	099b      	lsrs	r3, r3, #6
 81094d4:	b2db      	uxtb	r3, r3
 81094d6:	f003 0303 	and.w	r3, r3, #3
 81094da:	b2da      	uxtb	r2, r3
 81094dc:	683b      	ldr	r3, [r7, #0]
 81094de:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 81094e0:	68bb      	ldr	r3, [r7, #8]
 81094e2:	095b      	lsrs	r3, r3, #5
 81094e4:	b2db      	uxtb	r3, r3
 81094e6:	f003 0301 	and.w	r3, r3, #1
 81094ea:	b2da      	uxtb	r2, r3
 81094ec:	683b      	ldr	r3, [r7, #0]
 81094ee:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 81094f0:	68bb      	ldr	r3, [r7, #8]
 81094f2:	0a1b      	lsrs	r3, r3, #8
 81094f4:	b29b      	uxth	r3, r3
 81094f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 81094fa:	b29a      	uxth	r2, r3
 81094fc:	68bb      	ldr	r3, [r7, #8]
 81094fe:	0e1b      	lsrs	r3, r3, #24
 8109500:	b29b      	uxth	r3, r3
 8109502:	4313      	orrs	r3, r2
 8109504:	b29a      	uxth	r2, r3
 8109506:	683b      	ldr	r3, [r7, #0]
 8109508:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810950a:	68fb      	ldr	r3, [r7, #12]
 810950c:	061a      	lsls	r2, r3, #24
 810950e:	68fb      	ldr	r3, [r7, #12]
 8109510:	021b      	lsls	r3, r3, #8
 8109512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8109516:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8109518:	68fb      	ldr	r3, [r7, #12]
 810951a:	0a1b      	lsrs	r3, r3, #8
 810951c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109520:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8109522:	68fb      	ldr	r3, [r7, #12]
 8109524:	0e1b      	lsrs	r3, r3, #24
 8109526:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109528:	683b      	ldr	r3, [r7, #0]
 810952a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 810952c:	693b      	ldr	r3, [r7, #16]
 810952e:	b2da      	uxtb	r2, r3
 8109530:	683b      	ldr	r3, [r7, #0]
 8109532:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8109534:	693b      	ldr	r3, [r7, #16]
 8109536:	0a1b      	lsrs	r3, r3, #8
 8109538:	b2da      	uxtb	r2, r3
 810953a:	683b      	ldr	r3, [r7, #0]
 810953c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 810953e:	693b      	ldr	r3, [r7, #16]
 8109540:	0d1b      	lsrs	r3, r3, #20
 8109542:	b2db      	uxtb	r3, r3
 8109544:	f003 030f 	and.w	r3, r3, #15
 8109548:	b2da      	uxtb	r2, r3
 810954a:	683b      	ldr	r3, [r7, #0]
 810954c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 810954e:	693b      	ldr	r3, [r7, #16]
 8109550:	0c1b      	lsrs	r3, r3, #16
 8109552:	b29b      	uxth	r3, r3
 8109554:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8109558:	b29a      	uxth	r2, r3
 810955a:	697b      	ldr	r3, [r7, #20]
 810955c:	b29b      	uxth	r3, r3
 810955e:	b2db      	uxtb	r3, r3
 8109560:	b29b      	uxth	r3, r3
 8109562:	4313      	orrs	r3, r2
 8109564:	b29a      	uxth	r2, r3
 8109566:	683b      	ldr	r3, [r7, #0]
 8109568:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 810956a:	697b      	ldr	r3, [r7, #20]
 810956c:	0a9b      	lsrs	r3, r3, #10
 810956e:	b2db      	uxtb	r3, r3
 8109570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109574:	b2da      	uxtb	r2, r3
 8109576:	683b      	ldr	r3, [r7, #0]
 8109578:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 810957a:	697b      	ldr	r3, [r7, #20]
 810957c:	0a1b      	lsrs	r3, r3, #8
 810957e:	b2db      	uxtb	r3, r3
 8109580:	f003 0303 	and.w	r3, r3, #3
 8109584:	b2da      	uxtb	r2, r3
 8109586:	683b      	ldr	r3, [r7, #0]
 8109588:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 810958a:	697b      	ldr	r3, [r7, #20]
 810958c:	091b      	lsrs	r3, r3, #4
 810958e:	b2db      	uxtb	r3, r3
 8109590:	f003 030f 	and.w	r3, r3, #15
 8109594:	b2da      	uxtb	r2, r3
 8109596:	683b      	ldr	r3, [r7, #0]
 8109598:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 810959a:	697b      	ldr	r3, [r7, #20]
 810959c:	b2db      	uxtb	r3, r3
 810959e:	f003 030f 	and.w	r3, r3, #15
 81095a2:	b2da      	uxtb	r2, r3
 81095a4:	683b      	ldr	r3, [r7, #0]
 81095a6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 81095a8:	69bb      	ldr	r3, [r7, #24]
 81095aa:	0e1b      	lsrs	r3, r3, #24
 81095ac:	b2da      	uxtb	r2, r3
 81095ae:	683b      	ldr	r3, [r7, #0]
 81095b0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 81095b2:	687b      	ldr	r3, [r7, #4]
 81095b4:	681b      	ldr	r3, [r3, #0]
 81095b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 81095ba:	4618      	mov	r0, r3
 81095bc:	f003 fccc 	bl	810cf58 <SDMMC_CmdBlockLength>
 81095c0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81095c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81095c4:	2b00      	cmp	r3, #0
 81095c6:	d00d      	beq.n	81095e4 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81095c8:	687b      	ldr	r3, [r7, #4]
 81095ca:	681b      	ldr	r3, [r3, #0]
 81095cc:	4a08      	ldr	r2, [pc, #32]	; (81095f0 <HAL_SD_GetCardStatus+0x168>)
 81095ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81095d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 81095d6:	687b      	ldr	r3, [r7, #4]
 81095d8:	2201      	movs	r2, #1
 81095da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 81095de:	2301      	movs	r3, #1
 81095e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 81095e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 81095e8:	4618      	mov	r0, r3
 81095ea:	3750      	adds	r7, #80	; 0x50
 81095ec:	46bd      	mov	sp, r7
 81095ee:	bd80      	pop	{r7, pc}
 81095f0:	1fe00fff 	.word	0x1fe00fff

081095f4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 81095f4:	b480      	push	{r7}
 81095f6:	b083      	sub	sp, #12
 81095f8:	af00      	add	r7, sp, #0
 81095fa:	6078      	str	r0, [r7, #4]
 81095fc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8109602:	683b      	ldr	r3, [r7, #0]
 8109604:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8109606:	687b      	ldr	r3, [r7, #4]
 8109608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810960a:	683b      	ldr	r3, [r7, #0]
 810960c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 810960e:	687b      	ldr	r3, [r7, #4]
 8109610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109612:	683b      	ldr	r3, [r7, #0]
 8109614:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8109616:	687b      	ldr	r3, [r7, #4]
 8109618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810961a:	683b      	ldr	r3, [r7, #0]
 810961c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109622:	683b      	ldr	r3, [r7, #0]
 8109624:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810962a:	683b      	ldr	r3, [r7, #0]
 810962c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8109632:	683b      	ldr	r3, [r7, #0]
 8109634:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810963a:	683b      	ldr	r3, [r7, #0]
 810963c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 810963e:	2300      	movs	r3, #0
}
 8109640:	4618      	mov	r0, r3
 8109642:	370c      	adds	r7, #12
 8109644:	46bd      	mov	sp, r7
 8109646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810964a:	4770      	bx	lr

0810964c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 810964c:	b5b0      	push	{r4, r5, r7, lr}
 810964e:	b090      	sub	sp, #64	; 0x40
 8109650:	af04      	add	r7, sp, #16
 8109652:	6078      	str	r0, [r7, #4]
 8109654:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8109656:	2300      	movs	r3, #0
 8109658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 810965c:	687b      	ldr	r3, [r7, #4]
 810965e:	2203      	movs	r2, #3
 8109660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109668:	2b03      	cmp	r3, #3
 810966a:	d02e      	beq.n	81096ca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 810966c:	683b      	ldr	r3, [r7, #0]
 810966e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109672:	d106      	bne.n	8109682 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109674:	687b      	ldr	r3, [r7, #4]
 8109676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109678:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810967c:	687b      	ldr	r3, [r7, #4]
 810967e:	639a      	str	r2, [r3, #56]	; 0x38
 8109680:	e029      	b.n	81096d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8109682:	683b      	ldr	r3, [r7, #0]
 8109684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109688:	d10a      	bne.n	81096a0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 810968a:	6878      	ldr	r0, [r7, #4]
 810968c:	f000 fbce 	bl	8109e2c <SD_WideBus_Enable>
 8109690:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8109692:	687b      	ldr	r3, [r7, #4]
 8109694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109698:	431a      	orrs	r2, r3
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	639a      	str	r2, [r3, #56]	; 0x38
 810969e:	e01a      	b.n	81096d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 81096a0:	683b      	ldr	r3, [r7, #0]
 81096a2:	2b00      	cmp	r3, #0
 81096a4:	d10a      	bne.n	81096bc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 81096a6:	6878      	ldr	r0, [r7, #4]
 81096a8:	f000 fc0b 	bl	8109ec2 <SD_WideBus_Disable>
 81096ac:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 81096ae:	687b      	ldr	r3, [r7, #4]
 81096b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096b4:	431a      	orrs	r2, r3
 81096b6:	687b      	ldr	r3, [r7, #4]
 81096b8:	639a      	str	r2, [r3, #56]	; 0x38
 81096ba:	e00c      	b.n	81096d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81096c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 81096c4:	687b      	ldr	r3, [r7, #4]
 81096c6:	639a      	str	r2, [r3, #56]	; 0x38
 81096c8:	e005      	b.n	81096d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81096ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 81096d6:	687b      	ldr	r3, [r7, #4]
 81096d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81096da:	2b00      	cmp	r3, #0
 81096dc:	d007      	beq.n	81096ee <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81096de:	687b      	ldr	r3, [r7, #4]
 81096e0:	681b      	ldr	r3, [r3, #0]
 81096e2:	4a60      	ldr	r2, [pc, #384]	; (8109864 <HAL_SD_ConfigWideBusOperation+0x218>)
 81096e4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 81096e6:	2301      	movs	r3, #1
 81096e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 81096ec:	e097      	b.n	810981e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 81096ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 81096f2:	f7fd fe97 	bl	8107424 <HAL_RCCEx_GetPeriphCLKFreq>
 81096f6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 81096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81096fa:	2b00      	cmp	r3, #0
 81096fc:	f000 8086 	beq.w	810980c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8109700:	687b      	ldr	r3, [r7, #4]
 8109702:	685b      	ldr	r3, [r3, #4]
 8109704:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8109706:	687b      	ldr	r3, [r7, #4]
 8109708:	689b      	ldr	r3, [r3, #8]
 810970a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 810970c:	683b      	ldr	r3, [r7, #0]
 810970e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8109710:	687b      	ldr	r3, [r7, #4]
 8109712:	691b      	ldr	r3, [r3, #16]
 8109714:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	695a      	ldr	r2, [r3, #20]
 810971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810971c:	4952      	ldr	r1, [pc, #328]	; (8109868 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810971e:	fba1 1303 	umull	r1, r3, r1, r3
 8109722:	0e1b      	lsrs	r3, r3, #24
 8109724:	429a      	cmp	r2, r3
 8109726:	d303      	bcc.n	8109730 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	695b      	ldr	r3, [r3, #20]
 810972c:	61fb      	str	r3, [r7, #28]
 810972e:	e05a      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8109734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109738:	d103      	bne.n	8109742 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 810973a:	687b      	ldr	r3, [r7, #4]
 810973c:	695b      	ldr	r3, [r3, #20]
 810973e:	61fb      	str	r3, [r7, #28]
 8109740:	e051      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8109746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810974a:	d126      	bne.n	810979a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	695b      	ldr	r3, [r3, #20]
 8109750:	2b00      	cmp	r3, #0
 8109752:	d10e      	bne.n	8109772 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8109754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109756:	4a45      	ldr	r2, [pc, #276]	; (810986c <HAL_SD_ConfigWideBusOperation+0x220>)
 8109758:	4293      	cmp	r3, r2
 810975a:	d906      	bls.n	810976a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810975e:	4a42      	ldr	r2, [pc, #264]	; (8109868 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109760:	fba2 2303 	umull	r2, r3, r2, r3
 8109764:	0e5b      	lsrs	r3, r3, #25
 8109766:	61fb      	str	r3, [r7, #28]
 8109768:	e03d      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810976a:	687b      	ldr	r3, [r7, #4]
 810976c:	695b      	ldr	r3, [r3, #20]
 810976e:	61fb      	str	r3, [r7, #28]
 8109770:	e039      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8109772:	687b      	ldr	r3, [r7, #4]
 8109774:	695b      	ldr	r3, [r3, #20]
 8109776:	005b      	lsls	r3, r3, #1
 8109778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810977a:	fbb2 f3f3 	udiv	r3, r2, r3
 810977e:	4a3b      	ldr	r2, [pc, #236]	; (810986c <HAL_SD_ConfigWideBusOperation+0x220>)
 8109780:	4293      	cmp	r3, r2
 8109782:	d906      	bls.n	8109792 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8109784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109786:	4a38      	ldr	r2, [pc, #224]	; (8109868 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109788:	fba2 2303 	umull	r2, r3, r2, r3
 810978c:	0e5b      	lsrs	r3, r3, #25
 810978e:	61fb      	str	r3, [r7, #28]
 8109790:	e029      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109792:	687b      	ldr	r3, [r7, #4]
 8109794:	695b      	ldr	r3, [r3, #20]
 8109796:	61fb      	str	r3, [r7, #28]
 8109798:	e025      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810979a:	687b      	ldr	r3, [r7, #4]
 810979c:	695b      	ldr	r3, [r3, #20]
 810979e:	2b00      	cmp	r3, #0
 81097a0:	d10e      	bne.n	81097c0 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 81097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097a4:	4a32      	ldr	r2, [pc, #200]	; (8109870 <HAL_SD_ConfigWideBusOperation+0x224>)
 81097a6:	4293      	cmp	r3, r2
 81097a8:	d906      	bls.n	81097b8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 81097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097ac:	4a2e      	ldr	r2, [pc, #184]	; (8109868 <HAL_SD_ConfigWideBusOperation+0x21c>)
 81097ae:	fba2 2303 	umull	r2, r3, r2, r3
 81097b2:	0e1b      	lsrs	r3, r3, #24
 81097b4:	61fb      	str	r3, [r7, #28]
 81097b6:	e016      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81097b8:	687b      	ldr	r3, [r7, #4]
 81097ba:	695b      	ldr	r3, [r3, #20]
 81097bc:	61fb      	str	r3, [r7, #28]
 81097be:	e012      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 81097c0:	687b      	ldr	r3, [r7, #4]
 81097c2:	695b      	ldr	r3, [r3, #20]
 81097c4:	005b      	lsls	r3, r3, #1
 81097c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81097c8:	fbb2 f3f3 	udiv	r3, r2, r3
 81097cc:	4a28      	ldr	r2, [pc, #160]	; (8109870 <HAL_SD_ConfigWideBusOperation+0x224>)
 81097ce:	4293      	cmp	r3, r2
 81097d0:	d906      	bls.n	81097e0 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 81097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097d4:	4a24      	ldr	r2, [pc, #144]	; (8109868 <HAL_SD_ConfigWideBusOperation+0x21c>)
 81097d6:	fba2 2303 	umull	r2, r3, r2, r3
 81097da:	0e1b      	lsrs	r3, r3, #24
 81097dc:	61fb      	str	r3, [r7, #28]
 81097de:	e002      	b.n	81097e6 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 81097e0:	687b      	ldr	r3, [r7, #4]
 81097e2:	695b      	ldr	r3, [r3, #20]
 81097e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 81097e6:	687b      	ldr	r3, [r7, #4]
 81097e8:	699b      	ldr	r3, [r3, #24]
 81097ea:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 81097ec:	687b      	ldr	r3, [r7, #4]
 81097ee:	681d      	ldr	r5, [r3, #0]
 81097f0:	466c      	mov	r4, sp
 81097f2:	f107 0318 	add.w	r3, r7, #24
 81097f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 81097fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 81097fe:	f107 030c 	add.w	r3, r7, #12
 8109802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8109804:	4628      	mov	r0, r5
 8109806:	f003 fac9 	bl	810cd9c <SDMMC_Init>
 810980a:	e008      	b.n	810981e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109810:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8109814:	687b      	ldr	r3, [r7, #4]
 8109816:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8109818:	2301      	movs	r3, #1
 810981a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810981e:	687b      	ldr	r3, [r7, #4]
 8109820:	681b      	ldr	r3, [r3, #0]
 8109822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8109826:	4618      	mov	r0, r3
 8109828:	f003 fb96 	bl	810cf58 <SDMMC_CmdBlockLength>
 810982c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810982e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109830:	2b00      	cmp	r3, #0
 8109832:	d00c      	beq.n	810984e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	681b      	ldr	r3, [r3, #0]
 8109838:	4a0a      	ldr	r2, [pc, #40]	; (8109864 <HAL_SD_ConfigWideBusOperation+0x218>)
 810983a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810983c:	687b      	ldr	r3, [r7, #4]
 810983e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109842:	431a      	orrs	r2, r3
 8109844:	687b      	ldr	r3, [r7, #4]
 8109846:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8109848:	2301      	movs	r3, #1
 810984a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	2201      	movs	r2, #1
 8109852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8109856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 810985a:	4618      	mov	r0, r3
 810985c:	3730      	adds	r7, #48	; 0x30
 810985e:	46bd      	mov	sp, r7
 8109860:	bdb0      	pop	{r4, r5, r7, pc}
 8109862:	bf00      	nop
 8109864:	1fe00fff 	.word	0x1fe00fff
 8109868:	55e63b89 	.word	0x55e63b89
 810986c:	02faf080 	.word	0x02faf080
 8109870:	017d7840 	.word	0x017d7840

08109874 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8109874:	b580      	push	{r7, lr}
 8109876:	b086      	sub	sp, #24
 8109878:	af00      	add	r7, sp, #0
 810987a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 810987c:	2300      	movs	r3, #0
 810987e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8109880:	f107 030c 	add.w	r3, r7, #12
 8109884:	4619      	mov	r1, r3
 8109886:	6878      	ldr	r0, [r7, #4]
 8109888:	f000 faa8 	bl	8109ddc <SD_SendStatus>
 810988c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810988e:	697b      	ldr	r3, [r7, #20]
 8109890:	2b00      	cmp	r3, #0
 8109892:	d005      	beq.n	81098a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8109894:	687b      	ldr	r3, [r7, #4]
 8109896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109898:	697b      	ldr	r3, [r7, #20]
 810989a:	431a      	orrs	r2, r3
 810989c:	687b      	ldr	r3, [r7, #4]
 810989e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 81098a0:	68fb      	ldr	r3, [r7, #12]
 81098a2:	0a5b      	lsrs	r3, r3, #9
 81098a4:	f003 030f 	and.w	r3, r3, #15
 81098a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 81098aa:	693b      	ldr	r3, [r7, #16]
}
 81098ac:	4618      	mov	r0, r3
 81098ae:	3718      	adds	r7, #24
 81098b0:	46bd      	mov	sp, r7
 81098b2:	bd80      	pop	{r7, pc}

081098b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 81098b4:	b580      	push	{r7, lr}
 81098b6:	b090      	sub	sp, #64	; 0x40
 81098b8:	af00      	add	r7, sp, #0
 81098ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 81098bc:	2301      	movs	r3, #1
 81098be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 81098c0:	687b      	ldr	r3, [r7, #4]
 81098c2:	681b      	ldr	r3, [r3, #0]
 81098c4:	4618      	mov	r0, r3
 81098c6:	f003 fac2 	bl	810ce4e <SDMMC_GetPowerState>
 81098ca:	4603      	mov	r3, r0
 81098cc:	2b00      	cmp	r3, #0
 81098ce:	d102      	bne.n	81098d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81098d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 81098d4:	e0a5      	b.n	8109a22 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 81098d6:	687b      	ldr	r3, [r7, #4]
 81098d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81098da:	2b03      	cmp	r3, #3
 81098dc:	d02e      	beq.n	810993c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 81098de:	687b      	ldr	r3, [r7, #4]
 81098e0:	681b      	ldr	r3, [r3, #0]
 81098e2:	4618      	mov	r0, r3
 81098e4:	f003 fd0d 	bl	810d302 <SDMMC_CmdSendCID>
 81098e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 81098ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81098ec:	2b00      	cmp	r3, #0
 81098ee:	d001      	beq.n	81098f4 <SD_InitCard+0x40>
    {
      return errorstate;
 81098f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81098f2:	e096      	b.n	8109a22 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81098f4:	687b      	ldr	r3, [r7, #4]
 81098f6:	681b      	ldr	r3, [r3, #0]
 81098f8:	2100      	movs	r1, #0
 81098fa:	4618      	mov	r0, r3
 81098fc:	f003 faed 	bl	810ceda <SDMMC_GetResponse>
 8109900:	4602      	mov	r2, r0
 8109902:	687b      	ldr	r3, [r7, #4]
 8109904:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8109906:	687b      	ldr	r3, [r7, #4]
 8109908:	681b      	ldr	r3, [r3, #0]
 810990a:	2104      	movs	r1, #4
 810990c:	4618      	mov	r0, r3
 810990e:	f003 fae4 	bl	810ceda <SDMMC_GetResponse>
 8109912:	4602      	mov	r2, r0
 8109914:	687b      	ldr	r3, [r7, #4]
 8109916:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8109918:	687b      	ldr	r3, [r7, #4]
 810991a:	681b      	ldr	r3, [r3, #0]
 810991c:	2108      	movs	r1, #8
 810991e:	4618      	mov	r0, r3
 8109920:	f003 fadb 	bl	810ceda <SDMMC_GetResponse>
 8109924:	4602      	mov	r2, r0
 8109926:	687b      	ldr	r3, [r7, #4]
 8109928:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810992a:	687b      	ldr	r3, [r7, #4]
 810992c:	681b      	ldr	r3, [r3, #0]
 810992e:	210c      	movs	r1, #12
 8109930:	4618      	mov	r0, r3
 8109932:	f003 fad2 	bl	810ceda <SDMMC_GetResponse>
 8109936:	4602      	mov	r2, r0
 8109938:	687b      	ldr	r3, [r7, #4]
 810993a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109940:	2b03      	cmp	r3, #3
 8109942:	d00d      	beq.n	8109960 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8109944:	687b      	ldr	r3, [r7, #4]
 8109946:	681b      	ldr	r3, [r3, #0]
 8109948:	f107 020e 	add.w	r2, r7, #14
 810994c:	4611      	mov	r1, r2
 810994e:	4618      	mov	r0, r3
 8109950:	f003 fd16 	bl	810d380 <SDMMC_CmdSetRelAdd>
 8109954:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8109956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109958:	2b00      	cmp	r3, #0
 810995a:	d001      	beq.n	8109960 <SD_InitCard+0xac>
    {
      return errorstate;
 810995c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810995e:	e060      	b.n	8109a22 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109964:	2b03      	cmp	r3, #3
 8109966:	d036      	beq.n	81099d6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8109968:	89fb      	ldrh	r3, [r7, #14]
 810996a:	461a      	mov	r2, r3
 810996c:	687b      	ldr	r3, [r7, #4]
 810996e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109970:	687b      	ldr	r3, [r7, #4]
 8109972:	681a      	ldr	r2, [r3, #0]
 8109974:	687b      	ldr	r3, [r7, #4]
 8109976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109978:	041b      	lsls	r3, r3, #16
 810997a:	4619      	mov	r1, r3
 810997c:	4610      	mov	r0, r2
 810997e:	f003 fcdf 	bl	810d340 <SDMMC_CmdSendCSD>
 8109982:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8109984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109986:	2b00      	cmp	r3, #0
 8109988:	d001      	beq.n	810998e <SD_InitCard+0xda>
    {
      return errorstate;
 810998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810998c:	e049      	b.n	8109a22 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810998e:	687b      	ldr	r3, [r7, #4]
 8109990:	681b      	ldr	r3, [r3, #0]
 8109992:	2100      	movs	r1, #0
 8109994:	4618      	mov	r0, r3
 8109996:	f003 faa0 	bl	810ceda <SDMMC_GetResponse>
 810999a:	4602      	mov	r2, r0
 810999c:	687b      	ldr	r3, [r7, #4]
 810999e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 81099a0:	687b      	ldr	r3, [r7, #4]
 81099a2:	681b      	ldr	r3, [r3, #0]
 81099a4:	2104      	movs	r1, #4
 81099a6:	4618      	mov	r0, r3
 81099a8:	f003 fa97 	bl	810ceda <SDMMC_GetResponse>
 81099ac:	4602      	mov	r2, r0
 81099ae:	687b      	ldr	r3, [r7, #4]
 81099b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 81099b2:	687b      	ldr	r3, [r7, #4]
 81099b4:	681b      	ldr	r3, [r3, #0]
 81099b6:	2108      	movs	r1, #8
 81099b8:	4618      	mov	r0, r3
 81099ba:	f003 fa8e 	bl	810ceda <SDMMC_GetResponse>
 81099be:	4602      	mov	r2, r0
 81099c0:	687b      	ldr	r3, [r7, #4]
 81099c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 81099c4:	687b      	ldr	r3, [r7, #4]
 81099c6:	681b      	ldr	r3, [r3, #0]
 81099c8:	210c      	movs	r1, #12
 81099ca:	4618      	mov	r0, r3
 81099cc:	f003 fa85 	bl	810ceda <SDMMC_GetResponse>
 81099d0:	4602      	mov	r2, r0
 81099d2:	687b      	ldr	r3, [r7, #4]
 81099d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 81099d6:	687b      	ldr	r3, [r7, #4]
 81099d8:	681b      	ldr	r3, [r3, #0]
 81099da:	2104      	movs	r1, #4
 81099dc:	4618      	mov	r0, r3
 81099de:	f003 fa7c 	bl	810ceda <SDMMC_GetResponse>
 81099e2:	4603      	mov	r3, r0
 81099e4:	0d1a      	lsrs	r2, r3, #20
 81099e6:	687b      	ldr	r3, [r7, #4]
 81099e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 81099ea:	f107 0310 	add.w	r3, r7, #16
 81099ee:	4619      	mov	r1, r3
 81099f0:	6878      	ldr	r0, [r7, #4]
 81099f2:	f7ff fba5 	bl	8109140 <HAL_SD_GetCardCSD>
 81099f6:	4603      	mov	r3, r0
 81099f8:	2b00      	cmp	r3, #0
 81099fa:	d002      	beq.n	8109a02 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81099fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109a00:	e00f      	b.n	8109a22 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8109a02:	687b      	ldr	r3, [r7, #4]
 8109a04:	681a      	ldr	r2, [r3, #0]
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109a0a:	041b      	lsls	r3, r3, #16
 8109a0c:	4619      	mov	r1, r3
 8109a0e:	4610      	mov	r0, r2
 8109a10:	f003 fb8e 	bl	810d130 <SDMMC_CmdSelDesel>
 8109a14:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8109a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109a18:	2b00      	cmp	r3, #0
 8109a1a:	d001      	beq.n	8109a20 <SD_InitCard+0x16c>
  {
    return errorstate;
 8109a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109a1e:	e000      	b.n	8109a22 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8109a20:	2300      	movs	r3, #0
}
 8109a22:	4618      	mov	r0, r3
 8109a24:	3740      	adds	r7, #64	; 0x40
 8109a26:	46bd      	mov	sp, r7
 8109a28:	bd80      	pop	{r7, pc}
	...

08109a2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8109a2c:	b580      	push	{r7, lr}
 8109a2e:	b088      	sub	sp, #32
 8109a30:	af00      	add	r7, sp, #0
 8109a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8109a34:	2300      	movs	r3, #0
 8109a36:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 8109a38:	2300      	movs	r3, #0
 8109a3a:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 8109a3c:	2300      	movs	r3, #0
 8109a3e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8109a40:	f7f8 fc40 	bl	81022c4 <HAL_GetTick>
 8109a44:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8109a46:	687b      	ldr	r3, [r7, #4]
 8109a48:	681b      	ldr	r3, [r3, #0]
 8109a4a:	4618      	mov	r0, r3
 8109a4c:	f003 fb93 	bl	810d176 <SDMMC_CmdGoIdleState>
 8109a50:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109a52:	693b      	ldr	r3, [r7, #16]
 8109a54:	2b00      	cmp	r3, #0
 8109a56:	d001      	beq.n	8109a5c <SD_PowerON+0x30>
  {
    return errorstate;
 8109a58:	693b      	ldr	r3, [r7, #16]
 8109a5a:	e0e9      	b.n	8109c30 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8109a5c:	687b      	ldr	r3, [r7, #4]
 8109a5e:	681b      	ldr	r3, [r3, #0]
 8109a60:	4618      	mov	r0, r3
 8109a62:	f003 fba6 	bl	810d1b2 <SDMMC_CmdOperCond>
 8109a66:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109a68:	693b      	ldr	r3, [r7, #16]
 8109a6a:	2b00      	cmp	r3, #0
 8109a6c:	d00d      	beq.n	8109a8a <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	2200      	movs	r2, #0
 8109a72:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8109a74:	687b      	ldr	r3, [r7, #4]
 8109a76:	681b      	ldr	r3, [r3, #0]
 8109a78:	4618      	mov	r0, r3
 8109a7a:	f003 fb7c 	bl	810d176 <SDMMC_CmdGoIdleState>
 8109a7e:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109a80:	693b      	ldr	r3, [r7, #16]
 8109a82:	2b00      	cmp	r3, #0
 8109a84:	d004      	beq.n	8109a90 <SD_PowerON+0x64>
    {
      return errorstate;
 8109a86:	693b      	ldr	r3, [r7, #16]
 8109a88:	e0d2      	b.n	8109c30 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	2201      	movs	r2, #1
 8109a8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8109a90:	687b      	ldr	r3, [r7, #4]
 8109a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a94:	2b01      	cmp	r3, #1
 8109a96:	d137      	bne.n	8109b08 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8109a98:	687b      	ldr	r3, [r7, #4]
 8109a9a:	681b      	ldr	r3, [r3, #0]
 8109a9c:	2100      	movs	r1, #0
 8109a9e:	4618      	mov	r0, r3
 8109aa0:	f003 fba7 	bl	810d1f2 <SDMMC_CmdAppCommand>
 8109aa4:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109aa6:	693b      	ldr	r3, [r7, #16]
 8109aa8:	2b00      	cmp	r3, #0
 8109aaa:	d02d      	beq.n	8109b08 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109aac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109ab0:	e0be      	b.n	8109c30 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8109ab2:	687b      	ldr	r3, [r7, #4]
 8109ab4:	681b      	ldr	r3, [r3, #0]
 8109ab6:	2100      	movs	r1, #0
 8109ab8:	4618      	mov	r0, r3
 8109aba:	f003 fb9a 	bl	810d1f2 <SDMMC_CmdAppCommand>
 8109abe:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109ac0:	693b      	ldr	r3, [r7, #16]
 8109ac2:	2b00      	cmp	r3, #0
 8109ac4:	d001      	beq.n	8109aca <SD_PowerON+0x9e>
    {
      return errorstate;
 8109ac6:	693b      	ldr	r3, [r7, #16]
 8109ac8:	e0b2      	b.n	8109c30 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	681b      	ldr	r3, [r3, #0]
 8109ace:	495a      	ldr	r1, [pc, #360]	; (8109c38 <SD_PowerON+0x20c>)
 8109ad0:	4618      	mov	r0, r3
 8109ad2:	f003 fbb1 	bl	810d238 <SDMMC_CmdAppOperCommand>
 8109ad6:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8109ad8:	693b      	ldr	r3, [r7, #16]
 8109ada:	2b00      	cmp	r3, #0
 8109adc:	d002      	beq.n	8109ae4 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109ade:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109ae2:	e0a5      	b.n	8109c30 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109ae4:	687b      	ldr	r3, [r7, #4]
 8109ae6:	681b      	ldr	r3, [r3, #0]
 8109ae8:	2100      	movs	r1, #0
 8109aea:	4618      	mov	r0, r3
 8109aec:	f003 f9f5 	bl	810ceda <SDMMC_GetResponse>
 8109af0:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8109af2:	69fb      	ldr	r3, [r7, #28]
 8109af4:	0fdb      	lsrs	r3, r3, #31
 8109af6:	2b01      	cmp	r3, #1
 8109af8:	d101      	bne.n	8109afe <SD_PowerON+0xd2>
 8109afa:	2301      	movs	r3, #1
 8109afc:	e000      	b.n	8109b00 <SD_PowerON+0xd4>
 8109afe:	2300      	movs	r3, #0
 8109b00:	61bb      	str	r3, [r7, #24]

    count++;
 8109b02:	68fb      	ldr	r3, [r7, #12]
 8109b04:	3301      	adds	r3, #1
 8109b06:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8109b08:	68fb      	ldr	r3, [r7, #12]
 8109b0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8109b0e:	4293      	cmp	r3, r2
 8109b10:	d802      	bhi.n	8109b18 <SD_PowerON+0xec>
 8109b12:	69bb      	ldr	r3, [r7, #24]
 8109b14:	2b00      	cmp	r3, #0
 8109b16:	d0cc      	beq.n	8109ab2 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8109b18:	68fb      	ldr	r3, [r7, #12]
 8109b1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8109b1e:	4293      	cmp	r3, r2
 8109b20:	d902      	bls.n	8109b28 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8109b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8109b26:	e083      	b.n	8109c30 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8109b28:	69fb      	ldr	r3, [r7, #28]
 8109b2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109b2e:	2b00      	cmp	r3, #0
 8109b30:	d07d      	beq.n	8109c2e <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8109b32:	687b      	ldr	r3, [r7, #4]
 8109b34:	2201      	movs	r2, #1
 8109b36:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8109b38:	687b      	ldr	r3, [r7, #4]
 8109b3a:	699b      	ldr	r3, [r3, #24]
 8109b3c:	2b02      	cmp	r3, #2
 8109b3e:	d176      	bne.n	8109c2e <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8109b40:	69fb      	ldr	r3, [r7, #28]
 8109b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8109b46:	2b00      	cmp	r3, #0
 8109b48:	d071      	beq.n	8109c2e <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8109b4a:	687b      	ldr	r3, [r7, #4]
 8109b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8109b50:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8109b52:	687b      	ldr	r3, [r7, #4]
 8109b54:	681b      	ldr	r3, [r3, #0]
 8109b56:	681a      	ldr	r2, [r3, #0]
 8109b58:	687b      	ldr	r3, [r7, #4]
 8109b5a:	681b      	ldr	r3, [r3, #0]
 8109b5c:	f042 0208 	orr.w	r2, r2, #8
 8109b60:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8109b62:	687b      	ldr	r3, [r7, #4]
 8109b64:	681b      	ldr	r3, [r3, #0]
 8109b66:	4618      	mov	r0, r3
 8109b68:	f003 fc71 	bl	810d44e <SDMMC_CmdVoltageSwitch>
 8109b6c:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 8109b6e:	693b      	ldr	r3, [r7, #16]
 8109b70:	2b00      	cmp	r3, #0
 8109b72:	d00c      	beq.n	8109b8e <SD_PowerON+0x162>
        {
          return errorstate;
 8109b74:	693b      	ldr	r3, [r7, #16]
 8109b76:	e05b      	b.n	8109c30 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8109b78:	f7f8 fba4 	bl	81022c4 <HAL_GetTick>
 8109b7c:	4602      	mov	r2, r0
 8109b7e:	697b      	ldr	r3, [r7, #20]
 8109b80:	1ad3      	subs	r3, r2, r3
 8109b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b86:	d102      	bne.n	8109b8e <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8109b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109b8c:	e050      	b.n	8109c30 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8109b8e:	687b      	ldr	r3, [r7, #4]
 8109b90:	681b      	ldr	r3, [r3, #0]
 8109b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8109b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109b9c:	d1ec      	bne.n	8109b78 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8109b9e:	687b      	ldr	r3, [r7, #4]
 8109ba0:	681b      	ldr	r3, [r3, #0]
 8109ba2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8109ba6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8109ba8:	687b      	ldr	r3, [r7, #4]
 8109baa:	681b      	ldr	r3, [r3, #0]
 8109bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109bb6:	d002      	beq.n	8109bbe <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8109bb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109bbc:	e038      	b.n	8109c30 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8109bbe:	2001      	movs	r0, #1
 8109bc0:	f7ff fab2 	bl	8109128 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8109bc4:	687b      	ldr	r3, [r7, #4]
 8109bc6:	681b      	ldr	r3, [r3, #0]
 8109bc8:	681a      	ldr	r2, [r3, #0]
 8109bca:	687b      	ldr	r3, [r7, #4]
 8109bcc:	681b      	ldr	r3, [r3, #0]
 8109bce:	f042 0204 	orr.w	r2, r2, #4
 8109bd2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8109bd4:	e00a      	b.n	8109bec <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8109bd6:	f7f8 fb75 	bl	81022c4 <HAL_GetTick>
 8109bda:	4602      	mov	r2, r0
 8109bdc:	697b      	ldr	r3, [r7, #20]
 8109bde:	1ad3      	subs	r3, r2, r3
 8109be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109be4:	d102      	bne.n	8109bec <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8109be6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109bea:	e021      	b.n	8109c30 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8109bec:	687b      	ldr	r3, [r7, #4]
 8109bee:	681b      	ldr	r3, [r3, #0]
 8109bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109bfa:	d1ec      	bne.n	8109bd6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8109bfc:	687b      	ldr	r3, [r7, #4]
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8109c04:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	681b      	ldr	r3, [r3, #0]
 8109c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109c14:	d102      	bne.n	8109c1c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8109c16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8109c1a:	e009      	b.n	8109c30 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8109c1c:	687b      	ldr	r3, [r7, #4]
 8109c1e:	681b      	ldr	r3, [r3, #0]
 8109c20:	2213      	movs	r2, #19
 8109c22:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8109c24:	687b      	ldr	r3, [r7, #4]
 8109c26:	681b      	ldr	r3, [r3, #0]
 8109c28:	f04f 32ff 	mov.w	r2, #4294967295
 8109c2c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8109c2e:	2300      	movs	r3, #0
}
 8109c30:	4618      	mov	r0, r3
 8109c32:	3720      	adds	r7, #32
 8109c34:	46bd      	mov	sp, r7
 8109c36:	bd80      	pop	{r7, pc}
 8109c38:	c1100000 	.word	0xc1100000

08109c3c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8109c3c:	b580      	push	{r7, lr}
 8109c3e:	b08c      	sub	sp, #48	; 0x30
 8109c40:	af00      	add	r7, sp, #0
 8109c42:	6078      	str	r0, [r7, #4]
 8109c44:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109c46:	f7f8 fb3d 	bl	81022c4 <HAL_GetTick>
 8109c4a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8109c4c:	683b      	ldr	r3, [r7, #0]
 8109c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	681b      	ldr	r3, [r3, #0]
 8109c54:	2100      	movs	r1, #0
 8109c56:	4618      	mov	r0, r3
 8109c58:	f003 f93f 	bl	810ceda <SDMMC_GetResponse>
 8109c5c:	4603      	mov	r3, r0
 8109c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109c66:	d102      	bne.n	8109c6e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109c6c:	e0b0      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8109c6e:	687b      	ldr	r3, [r7, #4]
 8109c70:	681b      	ldr	r3, [r3, #0]
 8109c72:	2140      	movs	r1, #64	; 0x40
 8109c74:	4618      	mov	r0, r3
 8109c76:	f003 f96f 	bl	810cf58 <SDMMC_CmdBlockLength>
 8109c7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109c7c:	6a3b      	ldr	r3, [r7, #32]
 8109c7e:	2b00      	cmp	r3, #0
 8109c80:	d005      	beq.n	8109c8e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109c82:	687b      	ldr	r3, [r7, #4]
 8109c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109c86:	687b      	ldr	r3, [r7, #4]
 8109c88:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8109c8a:	6a3b      	ldr	r3, [r7, #32]
 8109c8c:	e0a0      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109c8e:	687b      	ldr	r3, [r7, #4]
 8109c90:	681a      	ldr	r2, [r3, #0]
 8109c92:	687b      	ldr	r3, [r7, #4]
 8109c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109c96:	041b      	lsls	r3, r3, #16
 8109c98:	4619      	mov	r1, r3
 8109c9a:	4610      	mov	r0, r2
 8109c9c:	f003 faa9 	bl	810d1f2 <SDMMC_CmdAppCommand>
 8109ca0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109ca2:	6a3b      	ldr	r3, [r7, #32]
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	d005      	beq.n	8109cb4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109ca8:	687b      	ldr	r3, [r7, #4]
 8109caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109cac:	687b      	ldr	r3, [r7, #4]
 8109cae:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8109cb0:	6a3b      	ldr	r3, [r7, #32]
 8109cb2:	e08d      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8109cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8109cb8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8109cba:	2340      	movs	r3, #64	; 0x40
 8109cbc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8109cbe:	2360      	movs	r3, #96	; 0x60
 8109cc0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109cc2:	2302      	movs	r3, #2
 8109cc4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109cc6:	2300      	movs	r3, #0
 8109cc8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109cca:	2301      	movs	r3, #1
 8109ccc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109cce:	687b      	ldr	r3, [r7, #4]
 8109cd0:	681b      	ldr	r3, [r3, #0]
 8109cd2:	f107 0208 	add.w	r2, r7, #8
 8109cd6:	4611      	mov	r1, r2
 8109cd8:	4618      	mov	r0, r3
 8109cda:	f003 f911 	bl	810cf00 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8109cde:	687b      	ldr	r3, [r7, #4]
 8109ce0:	681b      	ldr	r3, [r3, #0]
 8109ce2:	4618      	mov	r0, r3
 8109ce4:	f003 fb91 	bl	810d40a <SDMMC_CmdStatusRegister>
 8109ce8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109cea:	6a3b      	ldr	r3, [r7, #32]
 8109cec:	2b00      	cmp	r3, #0
 8109cee:	d02b      	beq.n	8109d48 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109cf0:	687b      	ldr	r3, [r7, #4]
 8109cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109cf4:	687b      	ldr	r3, [r7, #4]
 8109cf6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8109cf8:	6a3b      	ldr	r3, [r7, #32]
 8109cfa:	e069      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8109cfc:	687b      	ldr	r3, [r7, #4]
 8109cfe:	681b      	ldr	r3, [r3, #0]
 8109d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8109d06:	2b00      	cmp	r3, #0
 8109d08:	d013      	beq.n	8109d32 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8109d0a:	2300      	movs	r3, #0
 8109d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8109d0e:	e00d      	b.n	8109d2c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109d10:	687b      	ldr	r3, [r7, #4]
 8109d12:	681b      	ldr	r3, [r3, #0]
 8109d14:	4618      	mov	r0, r3
 8109d16:	f003 f86b 	bl	810cdf0 <SDMMC_ReadFIFO>
 8109d1a:	4602      	mov	r2, r0
 8109d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d1e:	601a      	str	r2, [r3, #0]
        pData++;
 8109d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d22:	3304      	adds	r3, #4
 8109d24:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8109d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109d28:	3301      	adds	r3, #1
 8109d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8109d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109d2e:	2b07      	cmp	r3, #7
 8109d30:	d9ee      	bls.n	8109d10 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8109d32:	f7f8 fac7 	bl	81022c4 <HAL_GetTick>
 8109d36:	4602      	mov	r2, r0
 8109d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109d3a:	1ad3      	subs	r3, r2, r3
 8109d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109d40:	d102      	bne.n	8109d48 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109d42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109d46:	e043      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8109d48:	687b      	ldr	r3, [r7, #4]
 8109d4a:	681b      	ldr	r3, [r3, #0]
 8109d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109d4e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8109d52:	2b00      	cmp	r3, #0
 8109d54:	d0d2      	beq.n	8109cfc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8109d56:	687b      	ldr	r3, [r7, #4]
 8109d58:	681b      	ldr	r3, [r3, #0]
 8109d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109d5c:	f003 0308 	and.w	r3, r3, #8
 8109d60:	2b00      	cmp	r3, #0
 8109d62:	d001      	beq.n	8109d68 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8109d64:	2308      	movs	r3, #8
 8109d66:	e033      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	681b      	ldr	r3, [r3, #0]
 8109d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109d6e:	f003 0302 	and.w	r3, r3, #2
 8109d72:	2b00      	cmp	r3, #0
 8109d74:	d001      	beq.n	8109d7a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8109d76:	2302      	movs	r3, #2
 8109d78:	e02a      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	681b      	ldr	r3, [r3, #0]
 8109d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109d80:	f003 0320 	and.w	r3, r3, #32
 8109d84:	2b00      	cmp	r3, #0
 8109d86:	d017      	beq.n	8109db8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8109d88:	2320      	movs	r3, #32
 8109d8a:	e021      	b.n	8109dd0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109d8c:	687b      	ldr	r3, [r7, #4]
 8109d8e:	681b      	ldr	r3, [r3, #0]
 8109d90:	4618      	mov	r0, r3
 8109d92:	f003 f82d 	bl	810cdf0 <SDMMC_ReadFIFO>
 8109d96:	4602      	mov	r2, r0
 8109d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d9a:	601a      	str	r2, [r3, #0]
    pData++;
 8109d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d9e:	3304      	adds	r3, #4
 8109da0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8109da2:	f7f8 fa8f 	bl	81022c4 <HAL_GetTick>
 8109da6:	4602      	mov	r2, r0
 8109da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109daa:	1ad3      	subs	r3, r2, r3
 8109dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109db0:	d102      	bne.n	8109db8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109db2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109db6:	e00b      	b.n	8109dd0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8109db8:	687b      	ldr	r3, [r7, #4]
 8109dba:	681b      	ldr	r3, [r3, #0]
 8109dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8109dc2:	2b00      	cmp	r3, #0
 8109dc4:	d1e2      	bne.n	8109d8c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8109dc6:	687b      	ldr	r3, [r7, #4]
 8109dc8:	681b      	ldr	r3, [r3, #0]
 8109dca:	4a03      	ldr	r2, [pc, #12]	; (8109dd8 <SD_SendSDStatus+0x19c>)
 8109dcc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8109dce:	2300      	movs	r3, #0
}
 8109dd0:	4618      	mov	r0, r3
 8109dd2:	3730      	adds	r7, #48	; 0x30
 8109dd4:	46bd      	mov	sp, r7
 8109dd6:	bd80      	pop	{r7, pc}
 8109dd8:	18000f3a 	.word	0x18000f3a

08109ddc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8109ddc:	b580      	push	{r7, lr}
 8109dde:	b084      	sub	sp, #16
 8109de0:	af00      	add	r7, sp, #0
 8109de2:	6078      	str	r0, [r7, #4]
 8109de4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8109de6:	683b      	ldr	r3, [r7, #0]
 8109de8:	2b00      	cmp	r3, #0
 8109dea:	d102      	bne.n	8109df2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8109dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8109df0:	e018      	b.n	8109e24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109df2:	687b      	ldr	r3, [r7, #4]
 8109df4:	681a      	ldr	r2, [r3, #0]
 8109df6:	687b      	ldr	r3, [r7, #4]
 8109df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109dfa:	041b      	lsls	r3, r3, #16
 8109dfc:	4619      	mov	r1, r3
 8109dfe:	4610      	mov	r0, r2
 8109e00:	f003 fae0 	bl	810d3c4 <SDMMC_CmdSendStatus>
 8109e04:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109e06:	68fb      	ldr	r3, [r7, #12]
 8109e08:	2b00      	cmp	r3, #0
 8109e0a:	d001      	beq.n	8109e10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8109e0c:	68fb      	ldr	r3, [r7, #12]
 8109e0e:	e009      	b.n	8109e24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109e10:	687b      	ldr	r3, [r7, #4]
 8109e12:	681b      	ldr	r3, [r3, #0]
 8109e14:	2100      	movs	r1, #0
 8109e16:	4618      	mov	r0, r3
 8109e18:	f003 f85f 	bl	810ceda <SDMMC_GetResponse>
 8109e1c:	4602      	mov	r2, r0
 8109e1e:	683b      	ldr	r3, [r7, #0]
 8109e20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8109e22:	2300      	movs	r3, #0
}
 8109e24:	4618      	mov	r0, r3
 8109e26:	3710      	adds	r7, #16
 8109e28:	46bd      	mov	sp, r7
 8109e2a:	bd80      	pop	{r7, pc}

08109e2c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8109e2c:	b580      	push	{r7, lr}
 8109e2e:	b086      	sub	sp, #24
 8109e30:	af00      	add	r7, sp, #0
 8109e32:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109e34:	2300      	movs	r3, #0
 8109e36:	60fb      	str	r3, [r7, #12]
 8109e38:	2300      	movs	r3, #0
 8109e3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	681b      	ldr	r3, [r3, #0]
 8109e40:	2100      	movs	r1, #0
 8109e42:	4618      	mov	r0, r3
 8109e44:	f003 f849 	bl	810ceda <SDMMC_GetResponse>
 8109e48:	4603      	mov	r3, r0
 8109e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109e52:	d102      	bne.n	8109e5a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109e54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109e58:	e02f      	b.n	8109eba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109e5a:	f107 030c 	add.w	r3, r7, #12
 8109e5e:	4619      	mov	r1, r3
 8109e60:	6878      	ldr	r0, [r7, #4]
 8109e62:	f000 f879 	bl	8109f58 <SD_FindSCR>
 8109e66:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109e68:	697b      	ldr	r3, [r7, #20]
 8109e6a:	2b00      	cmp	r3, #0
 8109e6c:	d001      	beq.n	8109e72 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8109e6e:	697b      	ldr	r3, [r7, #20]
 8109e70:	e023      	b.n	8109eba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109e72:	693b      	ldr	r3, [r7, #16]
 8109e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8109e78:	2b00      	cmp	r3, #0
 8109e7a:	d01c      	beq.n	8109eb6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109e7c:	687b      	ldr	r3, [r7, #4]
 8109e7e:	681a      	ldr	r2, [r3, #0]
 8109e80:	687b      	ldr	r3, [r7, #4]
 8109e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109e84:	041b      	lsls	r3, r3, #16
 8109e86:	4619      	mov	r1, r3
 8109e88:	4610      	mov	r0, r2
 8109e8a:	f003 f9b2 	bl	810d1f2 <SDMMC_CmdAppCommand>
 8109e8e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109e90:	697b      	ldr	r3, [r7, #20]
 8109e92:	2b00      	cmp	r3, #0
 8109e94:	d001      	beq.n	8109e9a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8109e96:	697b      	ldr	r3, [r7, #20]
 8109e98:	e00f      	b.n	8109eba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8109e9a:	687b      	ldr	r3, [r7, #4]
 8109e9c:	681b      	ldr	r3, [r3, #0]
 8109e9e:	2102      	movs	r1, #2
 8109ea0:	4618      	mov	r0, r3
 8109ea2:	f003 f9e9 	bl	810d278 <SDMMC_CmdBusWidth>
 8109ea6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109ea8:	697b      	ldr	r3, [r7, #20]
 8109eaa:	2b00      	cmp	r3, #0
 8109eac:	d001      	beq.n	8109eb2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8109eae:	697b      	ldr	r3, [r7, #20]
 8109eb0:	e003      	b.n	8109eba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109eb2:	2300      	movs	r3, #0
 8109eb4:	e001      	b.n	8109eba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109eb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8109eba:	4618      	mov	r0, r3
 8109ebc:	3718      	adds	r7, #24
 8109ebe:	46bd      	mov	sp, r7
 8109ec0:	bd80      	pop	{r7, pc}

08109ec2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8109ec2:	b580      	push	{r7, lr}
 8109ec4:	b086      	sub	sp, #24
 8109ec6:	af00      	add	r7, sp, #0
 8109ec8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109eca:	2300      	movs	r3, #0
 8109ecc:	60fb      	str	r3, [r7, #12]
 8109ece:	2300      	movs	r3, #0
 8109ed0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109ed2:	687b      	ldr	r3, [r7, #4]
 8109ed4:	681b      	ldr	r3, [r3, #0]
 8109ed6:	2100      	movs	r1, #0
 8109ed8:	4618      	mov	r0, r3
 8109eda:	f002 fffe 	bl	810ceda <SDMMC_GetResponse>
 8109ede:	4603      	mov	r3, r0
 8109ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109ee8:	d102      	bne.n	8109ef0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109eee:	e02f      	b.n	8109f50 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109ef0:	f107 030c 	add.w	r3, r7, #12
 8109ef4:	4619      	mov	r1, r3
 8109ef6:	6878      	ldr	r0, [r7, #4]
 8109ef8:	f000 f82e 	bl	8109f58 <SD_FindSCR>
 8109efc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109efe:	697b      	ldr	r3, [r7, #20]
 8109f00:	2b00      	cmp	r3, #0
 8109f02:	d001      	beq.n	8109f08 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8109f04:	697b      	ldr	r3, [r7, #20]
 8109f06:	e023      	b.n	8109f50 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109f08:	693b      	ldr	r3, [r7, #16]
 8109f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109f0e:	2b00      	cmp	r3, #0
 8109f10:	d01c      	beq.n	8109f4c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109f12:	687b      	ldr	r3, [r7, #4]
 8109f14:	681a      	ldr	r2, [r3, #0]
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109f1a:	041b      	lsls	r3, r3, #16
 8109f1c:	4619      	mov	r1, r3
 8109f1e:	4610      	mov	r0, r2
 8109f20:	f003 f967 	bl	810d1f2 <SDMMC_CmdAppCommand>
 8109f24:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109f26:	697b      	ldr	r3, [r7, #20]
 8109f28:	2b00      	cmp	r3, #0
 8109f2a:	d001      	beq.n	8109f30 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8109f2c:	697b      	ldr	r3, [r7, #20]
 8109f2e:	e00f      	b.n	8109f50 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8109f30:	687b      	ldr	r3, [r7, #4]
 8109f32:	681b      	ldr	r3, [r3, #0]
 8109f34:	2100      	movs	r1, #0
 8109f36:	4618      	mov	r0, r3
 8109f38:	f003 f99e 	bl	810d278 <SDMMC_CmdBusWidth>
 8109f3c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109f3e:	697b      	ldr	r3, [r7, #20]
 8109f40:	2b00      	cmp	r3, #0
 8109f42:	d001      	beq.n	8109f48 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8109f44:	697b      	ldr	r3, [r7, #20]
 8109f46:	e003      	b.n	8109f50 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109f48:	2300      	movs	r3, #0
 8109f4a:	e001      	b.n	8109f50 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109f4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8109f50:	4618      	mov	r0, r3
 8109f52:	3718      	adds	r7, #24
 8109f54:	46bd      	mov	sp, r7
 8109f56:	bd80      	pop	{r7, pc}

08109f58 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8109f58:	b580      	push	{r7, lr}
 8109f5a:	b08e      	sub	sp, #56	; 0x38
 8109f5c:	af00      	add	r7, sp, #0
 8109f5e:	6078      	str	r0, [r7, #4]
 8109f60:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109f62:	f7f8 f9af 	bl	81022c4 <HAL_GetTick>
 8109f66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8109f68:	2300      	movs	r3, #0
 8109f6a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8109f6c:	2300      	movs	r3, #0
 8109f6e:	60bb      	str	r3, [r7, #8]
 8109f70:	2300      	movs	r3, #0
 8109f72:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8109f74:	683b      	ldr	r3, [r7, #0]
 8109f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8109f78:	687b      	ldr	r3, [r7, #4]
 8109f7a:	681b      	ldr	r3, [r3, #0]
 8109f7c:	2108      	movs	r1, #8
 8109f7e:	4618      	mov	r0, r3
 8109f80:	f002 ffea 	bl	810cf58 <SDMMC_CmdBlockLength>
 8109f84:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109f88:	2b00      	cmp	r3, #0
 8109f8a:	d001      	beq.n	8109f90 <SD_FindSCR+0x38>
  {
    return errorstate;
 8109f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109f8e:	e0ad      	b.n	810a0ec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8109f90:	687b      	ldr	r3, [r7, #4]
 8109f92:	681a      	ldr	r2, [r3, #0]
 8109f94:	687b      	ldr	r3, [r7, #4]
 8109f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109f98:	041b      	lsls	r3, r3, #16
 8109f9a:	4619      	mov	r1, r3
 8109f9c:	4610      	mov	r0, r2
 8109f9e:	f003 f928 	bl	810d1f2 <SDMMC_CmdAppCommand>
 8109fa2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109fa6:	2b00      	cmp	r3, #0
 8109fa8:	d001      	beq.n	8109fae <SD_FindSCR+0x56>
  {
    return errorstate;
 8109faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109fac:	e09e      	b.n	810a0ec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8109fae:	f04f 33ff 	mov.w	r3, #4294967295
 8109fb2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8109fb4:	2308      	movs	r3, #8
 8109fb6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8109fb8:	2330      	movs	r3, #48	; 0x30
 8109fba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109fbc:	2302      	movs	r3, #2
 8109fbe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109fc0:	2300      	movs	r3, #0
 8109fc2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109fc4:	2301      	movs	r3, #1
 8109fc6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109fc8:	687b      	ldr	r3, [r7, #4]
 8109fca:	681b      	ldr	r3, [r3, #0]
 8109fcc:	f107 0210 	add.w	r2, r7, #16
 8109fd0:	4611      	mov	r1, r2
 8109fd2:	4618      	mov	r0, r3
 8109fd4:	f002 ff94 	bl	810cf00 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8109fd8:	687b      	ldr	r3, [r7, #4]
 8109fda:	681b      	ldr	r3, [r3, #0]
 8109fdc:	4618      	mov	r0, r3
 8109fde:	f003 f96e 	bl	810d2be <SDMMC_CmdSendSCR>
 8109fe2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109fe6:	2b00      	cmp	r3, #0
 8109fe8:	d027      	beq.n	810a03a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8109fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109fec:	e07e      	b.n	810a0ec <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8109fee:	687b      	ldr	r3, [r7, #4]
 8109ff0:	681b      	ldr	r3, [r3, #0]
 8109ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8109ff8:	2b00      	cmp	r3, #0
 8109ffa:	d113      	bne.n	810a024 <SD_FindSCR+0xcc>
 8109ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109ffe:	2b00      	cmp	r3, #0
 810a000:	d110      	bne.n	810a024 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810a002:	687b      	ldr	r3, [r7, #4]
 810a004:	681b      	ldr	r3, [r3, #0]
 810a006:	4618      	mov	r0, r3
 810a008:	f002 fef2 	bl	810cdf0 <SDMMC_ReadFIFO>
 810a00c:	4603      	mov	r3, r0
 810a00e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810a010:	687b      	ldr	r3, [r7, #4]
 810a012:	681b      	ldr	r3, [r3, #0]
 810a014:	4618      	mov	r0, r3
 810a016:	f002 feeb 	bl	810cdf0 <SDMMC_ReadFIFO>
 810a01a:	4603      	mov	r3, r0
 810a01c:	60fb      	str	r3, [r7, #12]
      index++;
 810a01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a020:	3301      	adds	r3, #1
 810a022:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810a024:	f7f8 f94e 	bl	81022c4 <HAL_GetTick>
 810a028:	4602      	mov	r2, r0
 810a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a02c:	1ad3      	subs	r3, r2, r3
 810a02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a032:	d102      	bne.n	810a03a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810a034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810a038:	e058      	b.n	810a0ec <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	681b      	ldr	r3, [r3, #0]
 810a03e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a040:	f240 532a 	movw	r3, #1322	; 0x52a
 810a044:	4013      	ands	r3, r2
 810a046:	2b00      	cmp	r3, #0
 810a048:	d0d1      	beq.n	8109fee <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810a04a:	687b      	ldr	r3, [r7, #4]
 810a04c:	681b      	ldr	r3, [r3, #0]
 810a04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a050:	f003 0308 	and.w	r3, r3, #8
 810a054:	2b00      	cmp	r3, #0
 810a056:	d005      	beq.n	810a064 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810a058:	687b      	ldr	r3, [r7, #4]
 810a05a:	681b      	ldr	r3, [r3, #0]
 810a05c:	2208      	movs	r2, #8
 810a05e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 810a060:	2308      	movs	r3, #8
 810a062:	e043      	b.n	810a0ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810a064:	687b      	ldr	r3, [r7, #4]
 810a066:	681b      	ldr	r3, [r3, #0]
 810a068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a06a:	f003 0302 	and.w	r3, r3, #2
 810a06e:	2b00      	cmp	r3, #0
 810a070:	d005      	beq.n	810a07e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810a072:	687b      	ldr	r3, [r7, #4]
 810a074:	681b      	ldr	r3, [r3, #0]
 810a076:	2202      	movs	r2, #2
 810a078:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810a07a:	2302      	movs	r3, #2
 810a07c:	e036      	b.n	810a0ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810a07e:	687b      	ldr	r3, [r7, #4]
 810a080:	681b      	ldr	r3, [r3, #0]
 810a082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a084:	f003 0320 	and.w	r3, r3, #32
 810a088:	2b00      	cmp	r3, #0
 810a08a:	d005      	beq.n	810a098 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 810a08c:	687b      	ldr	r3, [r7, #4]
 810a08e:	681b      	ldr	r3, [r3, #0]
 810a090:	2220      	movs	r2, #32
 810a092:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810a094:	2320      	movs	r3, #32
 810a096:	e029      	b.n	810a0ec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810a098:	687b      	ldr	r3, [r7, #4]
 810a09a:	681b      	ldr	r3, [r3, #0]
 810a09c:	4a15      	ldr	r2, [pc, #84]	; (810a0f4 <SD_FindSCR+0x19c>)
 810a09e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810a0a0:	68fb      	ldr	r3, [r7, #12]
 810a0a2:	061a      	lsls	r2, r3, #24
 810a0a4:	68fb      	ldr	r3, [r7, #12]
 810a0a6:	021b      	lsls	r3, r3, #8
 810a0a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810a0ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810a0ae:	68fb      	ldr	r3, [r7, #12]
 810a0b0:	0a1b      	lsrs	r3, r3, #8
 810a0b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810a0b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810a0b8:	68fb      	ldr	r3, [r7, #12]
 810a0ba:	0e1b      	lsrs	r3, r3, #24
 810a0bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a0c0:	601a      	str	r2, [r3, #0]
    scr++;
 810a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a0c4:	3304      	adds	r3, #4
 810a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810a0c8:	68bb      	ldr	r3, [r7, #8]
 810a0ca:	061a      	lsls	r2, r3, #24
 810a0cc:	68bb      	ldr	r3, [r7, #8]
 810a0ce:	021b      	lsls	r3, r3, #8
 810a0d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810a0d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810a0d6:	68bb      	ldr	r3, [r7, #8]
 810a0d8:	0a1b      	lsrs	r3, r3, #8
 810a0da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810a0de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810a0e0:	68bb      	ldr	r3, [r7, #8]
 810a0e2:	0e1b      	lsrs	r3, r3, #24
 810a0e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a0e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810a0ea:	2300      	movs	r3, #0
}
 810a0ec:	4618      	mov	r0, r3
 810a0ee:	3738      	adds	r7, #56	; 0x38
 810a0f0:	46bd      	mov	sp, r7
 810a0f2:	bd80      	pop	{r7, pc}
 810a0f4:	18000f3a 	.word	0x18000f3a

0810a0f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 810a0f8:	b580      	push	{r7, lr}
 810a0fa:	b086      	sub	sp, #24
 810a0fc:	af00      	add	r7, sp, #0
 810a0fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 810a100:	687b      	ldr	r3, [r7, #4]
 810a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a104:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 810a106:	687b      	ldr	r3, [r7, #4]
 810a108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a10a:	2b1f      	cmp	r3, #31
 810a10c:	d936      	bls.n	810a17c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 810a10e:	2300      	movs	r3, #0
 810a110:	617b      	str	r3, [r7, #20]
 810a112:	e027      	b.n	810a164 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 810a114:	687b      	ldr	r3, [r7, #4]
 810a116:	681b      	ldr	r3, [r3, #0]
 810a118:	4618      	mov	r0, r3
 810a11a:	f002 fe69 	bl	810cdf0 <SDMMC_ReadFIFO>
 810a11e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 810a120:	68fb      	ldr	r3, [r7, #12]
 810a122:	b2da      	uxtb	r2, r3
 810a124:	693b      	ldr	r3, [r7, #16]
 810a126:	701a      	strb	r2, [r3, #0]
      tmp++;
 810a128:	693b      	ldr	r3, [r7, #16]
 810a12a:	3301      	adds	r3, #1
 810a12c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 810a12e:	68fb      	ldr	r3, [r7, #12]
 810a130:	0a1b      	lsrs	r3, r3, #8
 810a132:	b2da      	uxtb	r2, r3
 810a134:	693b      	ldr	r3, [r7, #16]
 810a136:	701a      	strb	r2, [r3, #0]
      tmp++;
 810a138:	693b      	ldr	r3, [r7, #16]
 810a13a:	3301      	adds	r3, #1
 810a13c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 810a13e:	68fb      	ldr	r3, [r7, #12]
 810a140:	0c1b      	lsrs	r3, r3, #16
 810a142:	b2da      	uxtb	r2, r3
 810a144:	693b      	ldr	r3, [r7, #16]
 810a146:	701a      	strb	r2, [r3, #0]
      tmp++;
 810a148:	693b      	ldr	r3, [r7, #16]
 810a14a:	3301      	adds	r3, #1
 810a14c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 810a14e:	68fb      	ldr	r3, [r7, #12]
 810a150:	0e1b      	lsrs	r3, r3, #24
 810a152:	b2da      	uxtb	r2, r3
 810a154:	693b      	ldr	r3, [r7, #16]
 810a156:	701a      	strb	r2, [r3, #0]
      tmp++;
 810a158:	693b      	ldr	r3, [r7, #16]
 810a15a:	3301      	adds	r3, #1
 810a15c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 810a15e:	697b      	ldr	r3, [r7, #20]
 810a160:	3301      	adds	r3, #1
 810a162:	617b      	str	r3, [r7, #20]
 810a164:	697b      	ldr	r3, [r7, #20]
 810a166:	2b07      	cmp	r3, #7
 810a168:	d9d4      	bls.n	810a114 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 810a16a:	687b      	ldr	r3, [r7, #4]
 810a16c:	693a      	ldr	r2, [r7, #16]
 810a16e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 810a170:	687b      	ldr	r3, [r7, #4]
 810a172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a174:	f1a3 0220 	sub.w	r2, r3, #32
 810a178:	687b      	ldr	r3, [r7, #4]
 810a17a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 810a17c:	bf00      	nop
 810a17e:	3718      	adds	r7, #24
 810a180:	46bd      	mov	sp, r7
 810a182:	bd80      	pop	{r7, pc}

0810a184 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 810a184:	b580      	push	{r7, lr}
 810a186:	b086      	sub	sp, #24
 810a188:	af00      	add	r7, sp, #0
 810a18a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 810a18c:	687b      	ldr	r3, [r7, #4]
 810a18e:	6a1b      	ldr	r3, [r3, #32]
 810a190:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 810a192:	687b      	ldr	r3, [r7, #4]
 810a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a196:	2b1f      	cmp	r3, #31
 810a198:	d93a      	bls.n	810a210 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 810a19a:	2300      	movs	r3, #0
 810a19c:	617b      	str	r3, [r7, #20]
 810a19e:	e02b      	b.n	810a1f8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 810a1a0:	693b      	ldr	r3, [r7, #16]
 810a1a2:	781b      	ldrb	r3, [r3, #0]
 810a1a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 810a1a6:	693b      	ldr	r3, [r7, #16]
 810a1a8:	3301      	adds	r3, #1
 810a1aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 810a1ac:	693b      	ldr	r3, [r7, #16]
 810a1ae:	781b      	ldrb	r3, [r3, #0]
 810a1b0:	021a      	lsls	r2, r3, #8
 810a1b2:	68fb      	ldr	r3, [r7, #12]
 810a1b4:	4313      	orrs	r3, r2
 810a1b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 810a1b8:	693b      	ldr	r3, [r7, #16]
 810a1ba:	3301      	adds	r3, #1
 810a1bc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 810a1be:	693b      	ldr	r3, [r7, #16]
 810a1c0:	781b      	ldrb	r3, [r3, #0]
 810a1c2:	041a      	lsls	r2, r3, #16
 810a1c4:	68fb      	ldr	r3, [r7, #12]
 810a1c6:	4313      	orrs	r3, r2
 810a1c8:	60fb      	str	r3, [r7, #12]
      tmp++;
 810a1ca:	693b      	ldr	r3, [r7, #16]
 810a1cc:	3301      	adds	r3, #1
 810a1ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 810a1d0:	693b      	ldr	r3, [r7, #16]
 810a1d2:	781b      	ldrb	r3, [r3, #0]
 810a1d4:	061a      	lsls	r2, r3, #24
 810a1d6:	68fb      	ldr	r3, [r7, #12]
 810a1d8:	4313      	orrs	r3, r2
 810a1da:	60fb      	str	r3, [r7, #12]
      tmp++;
 810a1dc:	693b      	ldr	r3, [r7, #16]
 810a1de:	3301      	adds	r3, #1
 810a1e0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 810a1e2:	687b      	ldr	r3, [r7, #4]
 810a1e4:	681b      	ldr	r3, [r3, #0]
 810a1e6:	f107 020c 	add.w	r2, r7, #12
 810a1ea:	4611      	mov	r1, r2
 810a1ec:	4618      	mov	r0, r3
 810a1ee:	f002 fe0c 	bl	810ce0a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 810a1f2:	697b      	ldr	r3, [r7, #20]
 810a1f4:	3301      	adds	r3, #1
 810a1f6:	617b      	str	r3, [r7, #20]
 810a1f8:	697b      	ldr	r3, [r7, #20]
 810a1fa:	2b07      	cmp	r3, #7
 810a1fc:	d9d0      	bls.n	810a1a0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 810a1fe:	687b      	ldr	r3, [r7, #4]
 810a200:	693a      	ldr	r2, [r7, #16]
 810a202:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 810a204:	687b      	ldr	r3, [r7, #4]
 810a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a208:	f1a3 0220 	sub.w	r2, r3, #32
 810a20c:	687b      	ldr	r3, [r7, #4]
 810a20e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 810a210:	bf00      	nop
 810a212:	3718      	adds	r7, #24
 810a214:	46bd      	mov	sp, r7
 810a216:	bd80      	pop	{r7, pc}

0810a218 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810a218:	b480      	push	{r7}
 810a21a:	b083      	sub	sp, #12
 810a21c:	af00      	add	r7, sp, #0
 810a21e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810a220:	bf00      	nop
 810a222:	370c      	adds	r7, #12
 810a224:	46bd      	mov	sp, r7
 810a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a22a:	4770      	bx	lr

0810a22c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810a22c:	b480      	push	{r7}
 810a22e:	b083      	sub	sp, #12
 810a230:	af00      	add	r7, sp, #0
 810a232:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810a234:	bf00      	nop
 810a236:	370c      	adds	r7, #12
 810a238:	46bd      	mov	sp, r7
 810a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a23e:	4770      	bx	lr

0810a240 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 810a240:	b480      	push	{r7}
 810a242:	b083      	sub	sp, #12
 810a244:	af00      	add	r7, sp, #0
 810a246:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 810a248:	bf00      	nop
 810a24a:	370c      	adds	r7, #12
 810a24c:	46bd      	mov	sp, r7
 810a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a252:	4770      	bx	lr

0810a254 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 810a254:	b480      	push	{r7}
 810a256:	b083      	sub	sp, #12
 810a258:	af00      	add	r7, sp, #0
 810a25a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 810a25c:	bf00      	nop
 810a25e:	370c      	adds	r7, #12
 810a260:	46bd      	mov	sp, r7
 810a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a266:	4770      	bx	lr

0810a268 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a268:	b580      	push	{r7, lr}
 810a26a:	b084      	sub	sp, #16
 810a26c:	af00      	add	r7, sp, #0
 810a26e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 810a270:	2300      	movs	r3, #0
 810a272:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a274:	687b      	ldr	r3, [r7, #4]
 810a276:	2b00      	cmp	r3, #0
 810a278:	d101      	bne.n	810a27e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 810a27a:	2301      	movs	r3, #1
 810a27c:	e0eb      	b.n	810a456 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	2200      	movs	r2, #0
 810a282:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a284:	687b      	ldr	r3, [r7, #4]
 810a286:	681b      	ldr	r3, [r3, #0]
 810a288:	4a75      	ldr	r2, [pc, #468]	; (810a460 <HAL_SPI_Init+0x1f8>)
 810a28a:	4293      	cmp	r3, r2
 810a28c:	d00f      	beq.n	810a2ae <HAL_SPI_Init+0x46>
 810a28e:	687b      	ldr	r3, [r7, #4]
 810a290:	681b      	ldr	r3, [r3, #0]
 810a292:	4a74      	ldr	r2, [pc, #464]	; (810a464 <HAL_SPI_Init+0x1fc>)
 810a294:	4293      	cmp	r3, r2
 810a296:	d00a      	beq.n	810a2ae <HAL_SPI_Init+0x46>
 810a298:	687b      	ldr	r3, [r7, #4]
 810a29a:	681b      	ldr	r3, [r3, #0]
 810a29c:	4a72      	ldr	r2, [pc, #456]	; (810a468 <HAL_SPI_Init+0x200>)
 810a29e:	4293      	cmp	r3, r2
 810a2a0:	d005      	beq.n	810a2ae <HAL_SPI_Init+0x46>
 810a2a2:	687b      	ldr	r3, [r7, #4]
 810a2a4:	68db      	ldr	r3, [r3, #12]
 810a2a6:	2b0f      	cmp	r3, #15
 810a2a8:	d901      	bls.n	810a2ae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 810a2aa:	2301      	movs	r3, #1
 810a2ac:	e0d3      	b.n	810a456 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a2ae:	6878      	ldr	r0, [r7, #4]
 810a2b0:	f000 fb9e 	bl	810a9f0 <SPI_GetPacketSize>
 810a2b4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a2b6:	687b      	ldr	r3, [r7, #4]
 810a2b8:	681b      	ldr	r3, [r3, #0]
 810a2ba:	4a69      	ldr	r2, [pc, #420]	; (810a460 <HAL_SPI_Init+0x1f8>)
 810a2bc:	4293      	cmp	r3, r2
 810a2be:	d00c      	beq.n	810a2da <HAL_SPI_Init+0x72>
 810a2c0:	687b      	ldr	r3, [r7, #4]
 810a2c2:	681b      	ldr	r3, [r3, #0]
 810a2c4:	4a67      	ldr	r2, [pc, #412]	; (810a464 <HAL_SPI_Init+0x1fc>)
 810a2c6:	4293      	cmp	r3, r2
 810a2c8:	d007      	beq.n	810a2da <HAL_SPI_Init+0x72>
 810a2ca:	687b      	ldr	r3, [r7, #4]
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	4a66      	ldr	r2, [pc, #408]	; (810a468 <HAL_SPI_Init+0x200>)
 810a2d0:	4293      	cmp	r3, r2
 810a2d2:	d002      	beq.n	810a2da <HAL_SPI_Init+0x72>
 810a2d4:	68bb      	ldr	r3, [r7, #8]
 810a2d6:	2b08      	cmp	r3, #8
 810a2d8:	d811      	bhi.n	810a2fe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a2da:	687b      	ldr	r3, [r7, #4]
 810a2dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a2de:	4a60      	ldr	r2, [pc, #384]	; (810a460 <HAL_SPI_Init+0x1f8>)
 810a2e0:	4293      	cmp	r3, r2
 810a2e2:	d009      	beq.n	810a2f8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a2e4:	687b      	ldr	r3, [r7, #4]
 810a2e6:	681b      	ldr	r3, [r3, #0]
 810a2e8:	4a5e      	ldr	r2, [pc, #376]	; (810a464 <HAL_SPI_Init+0x1fc>)
 810a2ea:	4293      	cmp	r3, r2
 810a2ec:	d004      	beq.n	810a2f8 <HAL_SPI_Init+0x90>
 810a2ee:	687b      	ldr	r3, [r7, #4]
 810a2f0:	681b      	ldr	r3, [r3, #0]
 810a2f2:	4a5d      	ldr	r2, [pc, #372]	; (810a468 <HAL_SPI_Init+0x200>)
 810a2f4:	4293      	cmp	r3, r2
 810a2f6:	d104      	bne.n	810a302 <HAL_SPI_Init+0x9a>
 810a2f8:	68bb      	ldr	r3, [r7, #8]
 810a2fa:	2b10      	cmp	r3, #16
 810a2fc:	d901      	bls.n	810a302 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 810a2fe:	2301      	movs	r3, #1
 810a300:	e0a9      	b.n	810a456 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a302:	687b      	ldr	r3, [r7, #4]
 810a304:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a308:	b2db      	uxtb	r3, r3
 810a30a:	2b00      	cmp	r3, #0
 810a30c:	d106      	bne.n	810a31c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a30e:	687b      	ldr	r3, [r7, #4]
 810a310:	2200      	movs	r2, #0
 810a312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a316:	6878      	ldr	r0, [r7, #4]
 810a318:	f7f7 fb1c 	bl	8101954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810a31c:	687b      	ldr	r3, [r7, #4]
 810a31e:	2202      	movs	r2, #2
 810a320:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a324:	687b      	ldr	r3, [r7, #4]
 810a326:	681b      	ldr	r3, [r3, #0]
 810a328:	681a      	ldr	r2, [r3, #0]
 810a32a:	687b      	ldr	r3, [r7, #4]
 810a32c:	681b      	ldr	r3, [r3, #0]
 810a32e:	f022 0201 	bic.w	r2, r2, #1
 810a332:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a334:	687b      	ldr	r3, [r7, #4]
 810a336:	699b      	ldr	r3, [r3, #24]
 810a338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a33c:	d119      	bne.n	810a372 <HAL_SPI_Init+0x10a>
 810a33e:	687b      	ldr	r3, [r7, #4]
 810a340:	685b      	ldr	r3, [r3, #4]
 810a342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a346:	d103      	bne.n	810a350 <HAL_SPI_Init+0xe8>
 810a348:	687b      	ldr	r3, [r7, #4]
 810a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a34c:	2b00      	cmp	r3, #0
 810a34e:	d008      	beq.n	810a362 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a350:	687b      	ldr	r3, [r7, #4]
 810a352:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a354:	2b00      	cmp	r3, #0
 810a356:	d10c      	bne.n	810a372 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a358:	687b      	ldr	r3, [r7, #4]
 810a35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a35c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a360:	d107      	bne.n	810a372 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810a362:	687b      	ldr	r3, [r7, #4]
 810a364:	681b      	ldr	r3, [r3, #0]
 810a366:	681a      	ldr	r2, [r3, #0]
 810a368:	687b      	ldr	r3, [r7, #4]
 810a36a:	681b      	ldr	r3, [r3, #0]
 810a36c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810a370:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810a372:	687b      	ldr	r3, [r7, #4]
 810a374:	69da      	ldr	r2, [r3, #28]
 810a376:	687b      	ldr	r3, [r7, #4]
 810a378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a37a:	431a      	orrs	r2, r3
 810a37c:	68fb      	ldr	r3, [r7, #12]
 810a37e:	431a      	orrs	r2, r3
 810a380:	687b      	ldr	r3, [r7, #4]
 810a382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a384:	ea42 0103 	orr.w	r1, r2, r3
 810a388:	687b      	ldr	r3, [r7, #4]
 810a38a:	68da      	ldr	r2, [r3, #12]
 810a38c:	687b      	ldr	r3, [r7, #4]
 810a38e:	681b      	ldr	r3, [r3, #0]
 810a390:	430a      	orrs	r2, r1
 810a392:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a398:	687b      	ldr	r3, [r7, #4]
 810a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a39c:	431a      	orrs	r2, r3
 810a39e:	687b      	ldr	r3, [r7, #4]
 810a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a3a2:	431a      	orrs	r2, r3
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	699b      	ldr	r3, [r3, #24]
 810a3a8:	431a      	orrs	r2, r3
 810a3aa:	687b      	ldr	r3, [r7, #4]
 810a3ac:	691b      	ldr	r3, [r3, #16]
 810a3ae:	431a      	orrs	r2, r3
 810a3b0:	687b      	ldr	r3, [r7, #4]
 810a3b2:	695b      	ldr	r3, [r3, #20]
 810a3b4:	431a      	orrs	r2, r3
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	6a1b      	ldr	r3, [r3, #32]
 810a3ba:	431a      	orrs	r2, r3
 810a3bc:	687b      	ldr	r3, [r7, #4]
 810a3be:	685b      	ldr	r3, [r3, #4]
 810a3c0:	431a      	orrs	r2, r3
 810a3c2:	687b      	ldr	r3, [r7, #4]
 810a3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a3c6:	431a      	orrs	r2, r3
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	689b      	ldr	r3, [r3, #8]
 810a3cc:	431a      	orrs	r2, r3
 810a3ce:	687b      	ldr	r3, [r7, #4]
 810a3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a3d2:	ea42 0103 	orr.w	r1, r2, r3
 810a3d6:	687b      	ldr	r3, [r7, #4]
 810a3d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810a3da:	687b      	ldr	r3, [r7, #4]
 810a3dc:	681b      	ldr	r3, [r3, #0]
 810a3de:	430a      	orrs	r2, r1
 810a3e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810a3e2:	687b      	ldr	r3, [r7, #4]
 810a3e4:	685b      	ldr	r3, [r3, #4]
 810a3e6:	2b00      	cmp	r3, #0
 810a3e8:	d113      	bne.n	810a412 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810a3ea:	687b      	ldr	r3, [r7, #4]
 810a3ec:	681b      	ldr	r3, [r3, #0]
 810a3ee:	689b      	ldr	r3, [r3, #8]
 810a3f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810a3f4:	687b      	ldr	r3, [r7, #4]
 810a3f6:	681b      	ldr	r3, [r3, #0]
 810a3f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a3fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810a3fe:	687b      	ldr	r3, [r7, #4]
 810a400:	681b      	ldr	r3, [r3, #0]
 810a402:	689b      	ldr	r3, [r3, #8]
 810a404:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810a408:	687b      	ldr	r3, [r7, #4]
 810a40a:	681b      	ldr	r3, [r3, #0]
 810a40c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810a410:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810a412:	687b      	ldr	r3, [r7, #4]
 810a414:	681b      	ldr	r3, [r3, #0]
 810a416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810a418:	687b      	ldr	r3, [r7, #4]
 810a41a:	681b      	ldr	r3, [r3, #0]
 810a41c:	f022 0201 	bic.w	r2, r2, #1
 810a420:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810a422:	687b      	ldr	r3, [r7, #4]
 810a424:	685b      	ldr	r3, [r3, #4]
 810a426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a42a:	2b00      	cmp	r3, #0
 810a42c:	d00a      	beq.n	810a444 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810a42e:	687b      	ldr	r3, [r7, #4]
 810a430:	681b      	ldr	r3, [r3, #0]
 810a432:	68db      	ldr	r3, [r3, #12]
 810a434:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810a438:	687b      	ldr	r3, [r7, #4]
 810a43a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810a43c:	687b      	ldr	r3, [r7, #4]
 810a43e:	681b      	ldr	r3, [r3, #0]
 810a440:	430a      	orrs	r2, r1
 810a442:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810a444:	687b      	ldr	r3, [r7, #4]
 810a446:	2200      	movs	r2, #0
 810a448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810a44c:	687b      	ldr	r3, [r7, #4]
 810a44e:	2201      	movs	r2, #1
 810a450:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810a454:	2300      	movs	r3, #0
}
 810a456:	4618      	mov	r0, r3
 810a458:	3710      	adds	r7, #16
 810a45a:	46bd      	mov	sp, r7
 810a45c:	bd80      	pop	{r7, pc}
 810a45e:	bf00      	nop
 810a460:	40013000 	.word	0x40013000
 810a464:	40003800 	.word	0x40003800
 810a468:	40003c00 	.word	0x40003c00

0810a46c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 810a46c:	b580      	push	{r7, lr}
 810a46e:	b08a      	sub	sp, #40	; 0x28
 810a470:	af00      	add	r7, sp, #0
 810a472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 810a474:	687b      	ldr	r3, [r7, #4]
 810a476:	681b      	ldr	r3, [r3, #0]
 810a478:	691b      	ldr	r3, [r3, #16]
 810a47a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 810a47c:	687b      	ldr	r3, [r7, #4]
 810a47e:	681b      	ldr	r3, [r3, #0]
 810a480:	695b      	ldr	r3, [r3, #20]
 810a482:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 810a484:	6a3a      	ldr	r2, [r7, #32]
 810a486:	69fb      	ldr	r3, [r7, #28]
 810a488:	4013      	ands	r3, r2
 810a48a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 810a48c:	687b      	ldr	r3, [r7, #4]
 810a48e:	681b      	ldr	r3, [r3, #0]
 810a490:	689b      	ldr	r3, [r3, #8]
 810a492:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 810a494:	2300      	movs	r3, #0
 810a496:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810a498:	687b      	ldr	r3, [r7, #4]
 810a49a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a49e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810a4a0:	687b      	ldr	r3, [r7, #4]
 810a4a2:	681b      	ldr	r3, [r3, #0]
 810a4a4:	3330      	adds	r3, #48	; 0x30
 810a4a6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 810a4a8:	69bb      	ldr	r3, [r7, #24]
 810a4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a4ae:	2b00      	cmp	r3, #0
 810a4b0:	d113      	bne.n	810a4da <HAL_SPI_IRQHandler+0x6e>
 810a4b2:	69bb      	ldr	r3, [r7, #24]
 810a4b4:	f003 0320 	and.w	r3, r3, #32
 810a4b8:	2b00      	cmp	r3, #0
 810a4ba:	d10e      	bne.n	810a4da <HAL_SPI_IRQHandler+0x6e>
 810a4bc:	69bb      	ldr	r3, [r7, #24]
 810a4be:	f003 0304 	and.w	r3, r3, #4
 810a4c2:	2b00      	cmp	r3, #0
 810a4c4:	d009      	beq.n	810a4da <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810a4c6:	687b      	ldr	r3, [r7, #4]
 810a4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a4ca:	6878      	ldr	r0, [r7, #4]
 810a4cc:	4798      	blx	r3
    hspi->RxISR(hspi);
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a4d2:	6878      	ldr	r0, [r7, #4]
 810a4d4:	4798      	blx	r3
    handled = 1UL;
 810a4d6:	2301      	movs	r3, #1
 810a4d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a4da:	69bb      	ldr	r3, [r7, #24]
 810a4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a4e0:	2b00      	cmp	r3, #0
 810a4e2:	d10f      	bne.n	810a504 <HAL_SPI_IRQHandler+0x98>
 810a4e4:	69bb      	ldr	r3, [r7, #24]
 810a4e6:	f003 0301 	and.w	r3, r3, #1
 810a4ea:	2b00      	cmp	r3, #0
 810a4ec:	d00a      	beq.n	810a504 <HAL_SPI_IRQHandler+0x98>
 810a4ee:	69bb      	ldr	r3, [r7, #24]
 810a4f0:	f003 0304 	and.w	r3, r3, #4
 810a4f4:	2b00      	cmp	r3, #0
 810a4f6:	d105      	bne.n	810a504 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810a4f8:	687b      	ldr	r3, [r7, #4]
 810a4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a4fc:	6878      	ldr	r0, [r7, #4]
 810a4fe:	4798      	blx	r3
    handled = 1UL;
 810a500:	2301      	movs	r3, #1
 810a502:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810a504:	69bb      	ldr	r3, [r7, #24]
 810a506:	f003 0320 	and.w	r3, r3, #32
 810a50a:	2b00      	cmp	r3, #0
 810a50c:	d10f      	bne.n	810a52e <HAL_SPI_IRQHandler+0xc2>
 810a50e:	69bb      	ldr	r3, [r7, #24]
 810a510:	f003 0302 	and.w	r3, r3, #2
 810a514:	2b00      	cmp	r3, #0
 810a516:	d00a      	beq.n	810a52e <HAL_SPI_IRQHandler+0xc2>
 810a518:	69bb      	ldr	r3, [r7, #24]
 810a51a:	f003 0304 	and.w	r3, r3, #4
 810a51e:	2b00      	cmp	r3, #0
 810a520:	d105      	bne.n	810a52e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 810a522:	687b      	ldr	r3, [r7, #4]
 810a524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a526:	6878      	ldr	r0, [r7, #4]
 810a528:	4798      	blx	r3
    handled = 1UL;
 810a52a:	2301      	movs	r3, #1
 810a52c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 810a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a530:	2b00      	cmp	r3, #0
 810a532:	f040 8171 	bne.w	810a818 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 810a536:	69bb      	ldr	r3, [r7, #24]
 810a538:	f003 0308 	and.w	r3, r3, #8
 810a53c:	2b00      	cmp	r3, #0
 810a53e:	f000 80a0 	beq.w	810a682 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a542:	687b      	ldr	r3, [r7, #4]
 810a544:	681b      	ldr	r3, [r3, #0]
 810a546:	699a      	ldr	r2, [r3, #24]
 810a548:	687b      	ldr	r3, [r7, #4]
 810a54a:	681b      	ldr	r3, [r3, #0]
 810a54c:	f042 0208 	orr.w	r2, r2, #8
 810a550:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	681b      	ldr	r3, [r3, #0]
 810a556:	699a      	ldr	r2, [r3, #24]
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	681b      	ldr	r3, [r3, #0]
 810a55c:	f042 0210 	orr.w	r2, r2, #16
 810a560:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	681b      	ldr	r3, [r3, #0]
 810a566:	699a      	ldr	r2, [r3, #24]
 810a568:	687b      	ldr	r3, [r7, #4]
 810a56a:	681b      	ldr	r3, [r3, #0]
 810a56c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a570:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 810a572:	687b      	ldr	r3, [r7, #4]
 810a574:	681b      	ldr	r3, [r3, #0]
 810a576:	691a      	ldr	r2, [r3, #16]
 810a578:	687b      	ldr	r3, [r7, #4]
 810a57a:	681b      	ldr	r3, [r3, #0]
 810a57c:	f022 0208 	bic.w	r2, r2, #8
 810a580:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 810a582:	697b      	ldr	r3, [r7, #20]
 810a584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a588:	2b00      	cmp	r3, #0
 810a58a:	d00f      	beq.n	810a5ac <HAL_SPI_IRQHandler+0x140>
 810a58c:	7cfb      	ldrb	r3, [r7, #19]
 810a58e:	2b04      	cmp	r3, #4
 810a590:	d004      	beq.n	810a59c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 810a592:	687b      	ldr	r3, [r7, #4]
 810a594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a596:	69db      	ldr	r3, [r3, #28]
 810a598:	2b00      	cmp	r3, #0
 810a59a:	d007      	beq.n	810a5ac <HAL_SPI_IRQHandler+0x140>
 810a59c:	7cfb      	ldrb	r3, [r7, #19]
 810a59e:	2b03      	cmp	r3, #3
 810a5a0:	d059      	beq.n	810a656 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 810a5a2:	687b      	ldr	r3, [r7, #4]
 810a5a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a5a6:	69db      	ldr	r3, [r3, #28]
 810a5a8:	2b00      	cmp	r3, #0
 810a5aa:	d154      	bne.n	810a656 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a5ac:	687b      	ldr	r3, [r7, #4]
 810a5ae:	681b      	ldr	r3, [r3, #0]
 810a5b0:	689b      	ldr	r3, [r3, #8]
 810a5b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a5b6:	2b00      	cmp	r3, #0
 810a5b8:	d13d      	bne.n	810a636 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 810a5ba:	e036      	b.n	810a62a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810a5bc:	687b      	ldr	r3, [r7, #4]
 810a5be:	68db      	ldr	r3, [r3, #12]
 810a5c0:	2b0f      	cmp	r3, #15
 810a5c2:	d90b      	bls.n	810a5dc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810a5c4:	687b      	ldr	r3, [r7, #4]
 810a5c6:	681a      	ldr	r2, [r3, #0]
 810a5c8:	687b      	ldr	r3, [r7, #4]
 810a5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810a5ce:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 810a5d0:	687b      	ldr	r3, [r7, #4]
 810a5d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5d4:	1d1a      	adds	r2, r3, #4
 810a5d6:	687b      	ldr	r3, [r7, #4]
 810a5d8:	665a      	str	r2, [r3, #100]	; 0x64
 810a5da:	e01d      	b.n	810a618 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810a5dc:	687b      	ldr	r3, [r7, #4]
 810a5de:	68db      	ldr	r3, [r3, #12]
 810a5e0:	2b07      	cmp	r3, #7
 810a5e2:	d90b      	bls.n	810a5fc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5e8:	68fa      	ldr	r2, [r7, #12]
 810a5ea:	8812      	ldrh	r2, [r2, #0]
 810a5ec:	b292      	uxth	r2, r2
 810a5ee:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 810a5f0:	687b      	ldr	r3, [r7, #4]
 810a5f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a5f4:	1c9a      	adds	r2, r3, #2
 810a5f6:	687b      	ldr	r3, [r7, #4]
 810a5f8:	665a      	str	r2, [r3, #100]	; 0x64
 810a5fa:	e00d      	b.n	810a618 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810a5fc:	687b      	ldr	r3, [r7, #4]
 810a5fe:	681b      	ldr	r3, [r3, #0]
 810a600:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810a604:	687b      	ldr	r3, [r7, #4]
 810a606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a608:	7812      	ldrb	r2, [r2, #0]
 810a60a:	b2d2      	uxtb	r2, r2
 810a60c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 810a60e:	687b      	ldr	r3, [r7, #4]
 810a610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a612:	1c5a      	adds	r2, r3, #1
 810a614:	687b      	ldr	r3, [r7, #4]
 810a616:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 810a618:	687b      	ldr	r3, [r7, #4]
 810a61a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a61e:	b29b      	uxth	r3, r3
 810a620:	3b01      	subs	r3, #1
 810a622:	b29a      	uxth	r2, r3
 810a624:	687b      	ldr	r3, [r7, #4]
 810a626:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 810a62a:	687b      	ldr	r3, [r7, #4]
 810a62c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810a630:	b29b      	uxth	r3, r3
 810a632:	2b00      	cmp	r3, #0
 810a634:	d1c2      	bne.n	810a5bc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 810a636:	6878      	ldr	r0, [r7, #4]
 810a638:	f000 f93a 	bl	810a8b0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 810a63c:	687b      	ldr	r3, [r7, #4]
 810a63e:	2201      	movs	r2, #1
 810a640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a644:	687b      	ldr	r3, [r7, #4]
 810a646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a64a:	2b00      	cmp	r3, #0
 810a64c:	d003      	beq.n	810a656 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 810a64e:	6878      	ldr	r0, [r7, #4]
 810a650:	f000 f90a 	bl	810a868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 810a654:	e0e5      	b.n	810a822 <HAL_SPI_IRQHandler+0x3b6>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 810a656:	7cfb      	ldrb	r3, [r7, #19]
 810a658:	2b05      	cmp	r3, #5
 810a65a:	d103      	bne.n	810a664 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 810a65c:	6878      	ldr	r0, [r7, #4]
 810a65e:	f000 f8f9 	bl	810a854 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 810a662:	e0db      	b.n	810a81c <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 810a664:	7cfb      	ldrb	r3, [r7, #19]
 810a666:	2b04      	cmp	r3, #4
 810a668:	d103      	bne.n	810a672 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 810a66a:	6878      	ldr	r0, [r7, #4]
 810a66c:	f000 f8e8 	bl	810a840 <HAL_SPI_RxCpltCallback>
    return;
 810a670:	e0d4      	b.n	810a81c <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 810a672:	7cfb      	ldrb	r3, [r7, #19]
 810a674:	2b03      	cmp	r3, #3
 810a676:	f040 80d1 	bne.w	810a81c <HAL_SPI_IRQHandler+0x3b0>
      HAL_SPI_TxCpltCallback(hspi);
 810a67a:	6878      	ldr	r0, [r7, #4]
 810a67c:	f000 f8d6 	bl	810a82c <HAL_SPI_TxCpltCallback>
    return;
 810a680:	e0cc      	b.n	810a81c <HAL_SPI_IRQHandler+0x3b0>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 810a682:	69fb      	ldr	r3, [r7, #28]
 810a684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a688:	2b00      	cmp	r3, #0
 810a68a:	d00d      	beq.n	810a6a8 <HAL_SPI_IRQHandler+0x23c>
 810a68c:	6a3b      	ldr	r3, [r7, #32]
 810a68e:	f003 0308 	and.w	r3, r3, #8
 810a692:	2b00      	cmp	r3, #0
 810a694:	d008      	beq.n	810a6a8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 810a696:	687b      	ldr	r3, [r7, #4]
 810a698:	681b      	ldr	r3, [r3, #0]
 810a69a:	699a      	ldr	r2, [r3, #24]
 810a69c:	687b      	ldr	r3, [r7, #4]
 810a69e:	681b      	ldr	r3, [r3, #0]
 810a6a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810a6a4:	619a      	str	r2, [r3, #24]

    return;
 810a6a6:	e0bc      	b.n	810a822 <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 810a6a8:	69bb      	ldr	r3, [r7, #24]
 810a6aa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 810a6ae:	2b00      	cmp	r3, #0
 810a6b0:	f000 80b7 	beq.w	810a822 <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 810a6b4:	69bb      	ldr	r3, [r7, #24]
 810a6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a6ba:	2b00      	cmp	r3, #0
 810a6bc:	d00f      	beq.n	810a6de <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a6be:	687b      	ldr	r3, [r7, #4]
 810a6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a6c4:	f043 0204 	orr.w	r2, r3, #4
 810a6c8:	687b      	ldr	r3, [r7, #4]
 810a6ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a6ce:	687b      	ldr	r3, [r7, #4]
 810a6d0:	681b      	ldr	r3, [r3, #0]
 810a6d2:	699a      	ldr	r2, [r3, #24]
 810a6d4:	687b      	ldr	r3, [r7, #4]
 810a6d6:	681b      	ldr	r3, [r3, #0]
 810a6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a6dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 810a6de:	69bb      	ldr	r3, [r7, #24]
 810a6e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a6e4:	2b00      	cmp	r3, #0
 810a6e6:	d00f      	beq.n	810a708 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a6e8:	687b      	ldr	r3, [r7, #4]
 810a6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a6ee:	f043 0201 	orr.w	r2, r3, #1
 810a6f2:	687b      	ldr	r3, [r7, #4]
 810a6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a6f8:	687b      	ldr	r3, [r7, #4]
 810a6fa:	681b      	ldr	r3, [r3, #0]
 810a6fc:	699a      	ldr	r2, [r3, #24]
 810a6fe:	687b      	ldr	r3, [r7, #4]
 810a700:	681b      	ldr	r3, [r3, #0]
 810a702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a706:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 810a708:	69bb      	ldr	r3, [r7, #24]
 810a70a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a70e:	2b00      	cmp	r3, #0
 810a710:	d00f      	beq.n	810a732 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a712:	687b      	ldr	r3, [r7, #4]
 810a714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a718:	f043 0208 	orr.w	r2, r3, #8
 810a71c:	687b      	ldr	r3, [r7, #4]
 810a71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a722:	687b      	ldr	r3, [r7, #4]
 810a724:	681b      	ldr	r3, [r3, #0]
 810a726:	699a      	ldr	r2, [r3, #24]
 810a728:	687b      	ldr	r3, [r7, #4]
 810a72a:	681b      	ldr	r3, [r3, #0]
 810a72c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810a730:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810a732:	69bb      	ldr	r3, [r7, #24]
 810a734:	f003 0320 	and.w	r3, r3, #32
 810a738:	2b00      	cmp	r3, #0
 810a73a:	d00f      	beq.n	810a75c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a73c:	687b      	ldr	r3, [r7, #4]
 810a73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a742:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a746:	687b      	ldr	r3, [r7, #4]
 810a748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a74c:	687b      	ldr	r3, [r7, #4]
 810a74e:	681b      	ldr	r3, [r3, #0]
 810a750:	699a      	ldr	r2, [r3, #24]
 810a752:	687b      	ldr	r3, [r7, #4]
 810a754:	681b      	ldr	r3, [r3, #0]
 810a756:	f042 0220 	orr.w	r2, r2, #32
 810a75a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810a75c:	687b      	ldr	r3, [r7, #4]
 810a75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a762:	2b00      	cmp	r3, #0
 810a764:	d05c      	beq.n	810a820 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 810a766:	687b      	ldr	r3, [r7, #4]
 810a768:	681b      	ldr	r3, [r3, #0]
 810a76a:	681a      	ldr	r2, [r3, #0]
 810a76c:	687b      	ldr	r3, [r7, #4]
 810a76e:	681b      	ldr	r3, [r3, #0]
 810a770:	f022 0201 	bic.w	r2, r2, #1
 810a774:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 810a776:	687b      	ldr	r3, [r7, #4]
 810a778:	681b      	ldr	r3, [r3, #0]
 810a77a:	691b      	ldr	r3, [r3, #16]
 810a77c:	687a      	ldr	r2, [r7, #4]
 810a77e:	6812      	ldr	r2, [r2, #0]
 810a780:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 810a784:	f023 0303 	bic.w	r3, r3, #3
 810a788:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 810a78a:	697b      	ldr	r3, [r7, #20]
 810a78c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 810a790:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 810a794:	d138      	bne.n	810a808 <HAL_SPI_IRQHandler+0x39c>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a796:	687b      	ldr	r3, [r7, #4]
 810a798:	681b      	ldr	r3, [r3, #0]
 810a79a:	689a      	ldr	r2, [r3, #8]
 810a79c:	687b      	ldr	r3, [r7, #4]
 810a79e:	681b      	ldr	r3, [r3, #0]
 810a7a0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a7a4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 810a7a6:	687b      	ldr	r3, [r7, #4]
 810a7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a7aa:	2b00      	cmp	r3, #0
 810a7ac:	d013      	beq.n	810a7d6 <HAL_SPI_IRQHandler+0x36a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 810a7ae:	687b      	ldr	r3, [r7, #4]
 810a7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a7b2:	4a1d      	ldr	r2, [pc, #116]	; (810a828 <HAL_SPI_IRQHandler+0x3bc>)
 810a7b4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 810a7b6:	687b      	ldr	r3, [r7, #4]
 810a7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810a7ba:	4618      	mov	r0, r3
 810a7bc:	f7f9 fd66 	bl	810428c <HAL_DMA_Abort_IT>
 810a7c0:	4603      	mov	r3, r0
 810a7c2:	2b00      	cmp	r3, #0
 810a7c4:	d007      	beq.n	810a7d6 <HAL_SPI_IRQHandler+0x36a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a7cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a7d0:	687b      	ldr	r3, [r7, #4]
 810a7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 810a7d6:	687b      	ldr	r3, [r7, #4]
 810a7d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7da:	2b00      	cmp	r3, #0
 810a7dc:	d020      	beq.n	810a820 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 810a7de:	687b      	ldr	r3, [r7, #4]
 810a7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7e2:	4a11      	ldr	r2, [pc, #68]	; (810a828 <HAL_SPI_IRQHandler+0x3bc>)
 810a7e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810a7ea:	4618      	mov	r0, r3
 810a7ec:	f7f9 fd4e 	bl	810428c <HAL_DMA_Abort_IT>
 810a7f0:	4603      	mov	r3, r0
 810a7f2:	2b00      	cmp	r3, #0
 810a7f4:	d014      	beq.n	810a820 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 810a7f6:	687b      	ldr	r3, [r7, #4]
 810a7f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a7fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a800:	687b      	ldr	r3, [r7, #4]
 810a802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 810a806:	e00b      	b.n	810a820 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 810a808:	687b      	ldr	r3, [r7, #4]
 810a80a:	2201      	movs	r2, #1
 810a80c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810a810:	6878      	ldr	r0, [r7, #4]
 810a812:	f000 f829 	bl	810a868 <HAL_SPI_ErrorCallback>
    return;
 810a816:	e003      	b.n	810a820 <HAL_SPI_IRQHandler+0x3b4>
    return;
 810a818:	bf00      	nop
 810a81a:	e002      	b.n	810a822 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a81c:	bf00      	nop
 810a81e:	e000      	b.n	810a822 <HAL_SPI_IRQHandler+0x3b6>
    return;
 810a820:	bf00      	nop
  }
}
 810a822:	3728      	adds	r7, #40	; 0x28
 810a824:	46bd      	mov	sp, r7
 810a826:	bd80      	pop	{r7, pc}
 810a828:	0810a87d 	.word	0x0810a87d

0810a82c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a82c:	b480      	push	{r7}
 810a82e:	b083      	sub	sp, #12
 810a830:	af00      	add	r7, sp, #0
 810a832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 810a834:	bf00      	nop
 810a836:	370c      	adds	r7, #12
 810a838:	46bd      	mov	sp, r7
 810a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a83e:	4770      	bx	lr

0810a840 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a840:	b480      	push	{r7}
 810a842:	b083      	sub	sp, #12
 810a844:	af00      	add	r7, sp, #0
 810a846:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 810a848:	bf00      	nop
 810a84a:	370c      	adds	r7, #12
 810a84c:	46bd      	mov	sp, r7
 810a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a852:	4770      	bx	lr

0810a854 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810a854:	b480      	push	{r7}
 810a856:	b083      	sub	sp, #12
 810a858:	af00      	add	r7, sp, #0
 810a85a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 810a85c:	bf00      	nop
 810a85e:	370c      	adds	r7, #12
 810a860:	46bd      	mov	sp, r7
 810a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a866:	4770      	bx	lr

0810a868 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 810a868:	b480      	push	{r7}
 810a86a:	b083      	sub	sp, #12
 810a86c:	af00      	add	r7, sp, #0
 810a86e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 810a870:	bf00      	nop
 810a872:	370c      	adds	r7, #12
 810a874:	46bd      	mov	sp, r7
 810a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a87a:	4770      	bx	lr

0810a87c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810a87c:	b580      	push	{r7, lr}
 810a87e:	b084      	sub	sp, #16
 810a880:	af00      	add	r7, sp, #0
 810a882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 810a884:	687b      	ldr	r3, [r7, #4]
 810a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a888:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 810a88a:	68fb      	ldr	r3, [r7, #12]
 810a88c:	2200      	movs	r2, #0
 810a88e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 810a892:	68fb      	ldr	r3, [r7, #12]
 810a894:	2200      	movs	r2, #0
 810a896:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 810a89a:	68fb      	ldr	r3, [r7, #12]
 810a89c:	2201      	movs	r2, #1
 810a89e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 810a8a2:	68f8      	ldr	r0, [r7, #12]
 810a8a4:	f7ff ffe0 	bl	810a868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 810a8a8:	bf00      	nop
 810a8aa:	3710      	adds	r7, #16
 810a8ac:	46bd      	mov	sp, r7
 810a8ae:	bd80      	pop	{r7, pc}

0810a8b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810a8b0:	b480      	push	{r7}
 810a8b2:	b085      	sub	sp, #20
 810a8b4:	af00      	add	r7, sp, #0
 810a8b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810a8b8:	687b      	ldr	r3, [r7, #4]
 810a8ba:	681b      	ldr	r3, [r3, #0]
 810a8bc:	695b      	ldr	r3, [r3, #20]
 810a8be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810a8c0:	687b      	ldr	r3, [r7, #4]
 810a8c2:	681b      	ldr	r3, [r3, #0]
 810a8c4:	699a      	ldr	r2, [r3, #24]
 810a8c6:	687b      	ldr	r3, [r7, #4]
 810a8c8:	681b      	ldr	r3, [r3, #0]
 810a8ca:	f042 0208 	orr.w	r2, r2, #8
 810a8ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810a8d0:	687b      	ldr	r3, [r7, #4]
 810a8d2:	681b      	ldr	r3, [r3, #0]
 810a8d4:	699a      	ldr	r2, [r3, #24]
 810a8d6:	687b      	ldr	r3, [r7, #4]
 810a8d8:	681b      	ldr	r3, [r3, #0]
 810a8da:	f042 0210 	orr.w	r2, r2, #16
 810a8de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a8e0:	687b      	ldr	r3, [r7, #4]
 810a8e2:	681b      	ldr	r3, [r3, #0]
 810a8e4:	681a      	ldr	r2, [r3, #0]
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	681b      	ldr	r3, [r3, #0]
 810a8ea:	f022 0201 	bic.w	r2, r2, #1
 810a8ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 810a8f0:	687b      	ldr	r3, [r7, #4]
 810a8f2:	681b      	ldr	r3, [r3, #0]
 810a8f4:	691b      	ldr	r3, [r3, #16]
 810a8f6:	687a      	ldr	r2, [r7, #4]
 810a8f8:	6812      	ldr	r2, [r2, #0]
 810a8fa:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810a8fe:	f023 0303 	bic.w	r3, r3, #3
 810a902:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810a904:	687b      	ldr	r3, [r7, #4]
 810a906:	681b      	ldr	r3, [r3, #0]
 810a908:	689a      	ldr	r2, [r3, #8]
 810a90a:	687b      	ldr	r3, [r7, #4]
 810a90c:	681b      	ldr	r3, [r3, #0]
 810a90e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810a912:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810a914:	687b      	ldr	r3, [r7, #4]
 810a916:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a91a:	b2db      	uxtb	r3, r3
 810a91c:	2b04      	cmp	r3, #4
 810a91e:	d014      	beq.n	810a94a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810a920:	68fb      	ldr	r3, [r7, #12]
 810a922:	f003 0320 	and.w	r3, r3, #32
 810a926:	2b00      	cmp	r3, #0
 810a928:	d00f      	beq.n	810a94a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810a92a:	687b      	ldr	r3, [r7, #4]
 810a92c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a930:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810a934:	687b      	ldr	r3, [r7, #4]
 810a936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810a93a:	687b      	ldr	r3, [r7, #4]
 810a93c:	681b      	ldr	r3, [r3, #0]
 810a93e:	699a      	ldr	r2, [r3, #24]
 810a940:	687b      	ldr	r3, [r7, #4]
 810a942:	681b      	ldr	r3, [r3, #0]
 810a944:	f042 0220 	orr.w	r2, r2, #32
 810a948:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810a94a:	687b      	ldr	r3, [r7, #4]
 810a94c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810a950:	b2db      	uxtb	r3, r3
 810a952:	2b03      	cmp	r3, #3
 810a954:	d014      	beq.n	810a980 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810a956:	68fb      	ldr	r3, [r7, #12]
 810a958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	d00f      	beq.n	810a980 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810a960:	687b      	ldr	r3, [r7, #4]
 810a962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a966:	f043 0204 	orr.w	r2, r3, #4
 810a96a:	687b      	ldr	r3, [r7, #4]
 810a96c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810a970:	687b      	ldr	r3, [r7, #4]
 810a972:	681b      	ldr	r3, [r3, #0]
 810a974:	699a      	ldr	r2, [r3, #24]
 810a976:	687b      	ldr	r3, [r7, #4]
 810a978:	681b      	ldr	r3, [r3, #0]
 810a97a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810a97e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810a980:	68fb      	ldr	r3, [r7, #12]
 810a982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810a986:	2b00      	cmp	r3, #0
 810a988:	d00f      	beq.n	810a9aa <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a990:	f043 0201 	orr.w	r2, r3, #1
 810a994:	687b      	ldr	r3, [r7, #4]
 810a996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810a99a:	687b      	ldr	r3, [r7, #4]
 810a99c:	681b      	ldr	r3, [r3, #0]
 810a99e:	699a      	ldr	r2, [r3, #24]
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	681b      	ldr	r3, [r3, #0]
 810a9a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810a9a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810a9aa:	68fb      	ldr	r3, [r7, #12]
 810a9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810a9b0:	2b00      	cmp	r3, #0
 810a9b2:	d00f      	beq.n	810a9d4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810a9b4:	687b      	ldr	r3, [r7, #4]
 810a9b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810a9ba:	f043 0208 	orr.w	r2, r3, #8
 810a9be:	687b      	ldr	r3, [r7, #4]
 810a9c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810a9c4:	687b      	ldr	r3, [r7, #4]
 810a9c6:	681b      	ldr	r3, [r3, #0]
 810a9c8:	699a      	ldr	r2, [r3, #24]
 810a9ca:	687b      	ldr	r3, [r7, #4]
 810a9cc:	681b      	ldr	r3, [r3, #0]
 810a9ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810a9d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810a9d4:	687b      	ldr	r3, [r7, #4]
 810a9d6:	2200      	movs	r2, #0
 810a9d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810a9dc:	687b      	ldr	r3, [r7, #4]
 810a9de:	2200      	movs	r2, #0
 810a9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810a9e4:	bf00      	nop
 810a9e6:	3714      	adds	r7, #20
 810a9e8:	46bd      	mov	sp, r7
 810a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9ee:	4770      	bx	lr

0810a9f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810a9f0:	b480      	push	{r7}
 810a9f2:	b085      	sub	sp, #20
 810a9f4:	af00      	add	r7, sp, #0
 810a9f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810a9f8:	687b      	ldr	r3, [r7, #4]
 810a9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a9fc:	095b      	lsrs	r3, r3, #5
 810a9fe:	3301      	adds	r3, #1
 810aa00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810aa02:	687b      	ldr	r3, [r7, #4]
 810aa04:	68db      	ldr	r3, [r3, #12]
 810aa06:	3301      	adds	r3, #1
 810aa08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810aa0a:	68bb      	ldr	r3, [r7, #8]
 810aa0c:	3307      	adds	r3, #7
 810aa0e:	08db      	lsrs	r3, r3, #3
 810aa10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810aa12:	68bb      	ldr	r3, [r7, #8]
 810aa14:	68fa      	ldr	r2, [r7, #12]
 810aa16:	fb02 f303 	mul.w	r3, r2, r3
}
 810aa1a:	4618      	mov	r0, r3
 810aa1c:	3714      	adds	r7, #20
 810aa1e:	46bd      	mov	sp, r7
 810aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa24:	4770      	bx	lr

0810aa26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810aa26:	b580      	push	{r7, lr}
 810aa28:	b082      	sub	sp, #8
 810aa2a:	af00      	add	r7, sp, #0
 810aa2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810aa2e:	687b      	ldr	r3, [r7, #4]
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	d101      	bne.n	810aa38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810aa34:	2301      	movs	r3, #1
 810aa36:	e049      	b.n	810aacc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810aa38:	687b      	ldr	r3, [r7, #4]
 810aa3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810aa3e:	b2db      	uxtb	r3, r3
 810aa40:	2b00      	cmp	r3, #0
 810aa42:	d106      	bne.n	810aa52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810aa44:	687b      	ldr	r3, [r7, #4]
 810aa46:	2200      	movs	r2, #0
 810aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810aa4c:	6878      	ldr	r0, [r7, #4]
 810aa4e:	f7f7 fa6b 	bl	8101f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810aa52:	687b      	ldr	r3, [r7, #4]
 810aa54:	2202      	movs	r2, #2
 810aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810aa5a:	687b      	ldr	r3, [r7, #4]
 810aa5c:	681a      	ldr	r2, [r3, #0]
 810aa5e:	687b      	ldr	r3, [r7, #4]
 810aa60:	3304      	adds	r3, #4
 810aa62:	4619      	mov	r1, r3
 810aa64:	4610      	mov	r0, r2
 810aa66:	f000 fc51 	bl	810b30c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810aa6a:	687b      	ldr	r3, [r7, #4]
 810aa6c:	2201      	movs	r2, #1
 810aa6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810aa72:	687b      	ldr	r3, [r7, #4]
 810aa74:	2201      	movs	r2, #1
 810aa76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810aa7a:	687b      	ldr	r3, [r7, #4]
 810aa7c:	2201      	movs	r2, #1
 810aa7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810aa82:	687b      	ldr	r3, [r7, #4]
 810aa84:	2201      	movs	r2, #1
 810aa86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810aa8a:	687b      	ldr	r3, [r7, #4]
 810aa8c:	2201      	movs	r2, #1
 810aa8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810aa92:	687b      	ldr	r3, [r7, #4]
 810aa94:	2201      	movs	r2, #1
 810aa96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810aa9a:	687b      	ldr	r3, [r7, #4]
 810aa9c:	2201      	movs	r2, #1
 810aa9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810aaa2:	687b      	ldr	r3, [r7, #4]
 810aaa4:	2201      	movs	r2, #1
 810aaa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810aaaa:	687b      	ldr	r3, [r7, #4]
 810aaac:	2201      	movs	r2, #1
 810aaae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	2201      	movs	r2, #1
 810aab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810aaba:	687b      	ldr	r3, [r7, #4]
 810aabc:	2201      	movs	r2, #1
 810aabe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	2201      	movs	r2, #1
 810aac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810aaca:	2300      	movs	r3, #0
}
 810aacc:	4618      	mov	r0, r3
 810aace:	3708      	adds	r7, #8
 810aad0:	46bd      	mov	sp, r7
 810aad2:	bd80      	pop	{r7, pc}

0810aad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810aad4:	b480      	push	{r7}
 810aad6:	b085      	sub	sp, #20
 810aad8:	af00      	add	r7, sp, #0
 810aada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810aadc:	687b      	ldr	r3, [r7, #4]
 810aade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810aae2:	b2db      	uxtb	r3, r3
 810aae4:	2b01      	cmp	r3, #1
 810aae6:	d001      	beq.n	810aaec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810aae8:	2301      	movs	r3, #1
 810aaea:	e04f      	b.n	810ab8c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810aaec:	687b      	ldr	r3, [r7, #4]
 810aaee:	2202      	movs	r2, #2
 810aaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810aaf4:	687b      	ldr	r3, [r7, #4]
 810aaf6:	681b      	ldr	r3, [r3, #0]
 810aaf8:	68da      	ldr	r2, [r3, #12]
 810aafa:	687b      	ldr	r3, [r7, #4]
 810aafc:	681b      	ldr	r3, [r3, #0]
 810aafe:	f042 0201 	orr.w	r2, r2, #1
 810ab02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810ab04:	687b      	ldr	r3, [r7, #4]
 810ab06:	681b      	ldr	r3, [r3, #0]
 810ab08:	4a23      	ldr	r2, [pc, #140]	; (810ab98 <HAL_TIM_Base_Start_IT+0xc4>)
 810ab0a:	4293      	cmp	r3, r2
 810ab0c:	d01d      	beq.n	810ab4a <HAL_TIM_Base_Start_IT+0x76>
 810ab0e:	687b      	ldr	r3, [r7, #4]
 810ab10:	681b      	ldr	r3, [r3, #0]
 810ab12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ab16:	d018      	beq.n	810ab4a <HAL_TIM_Base_Start_IT+0x76>
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	681b      	ldr	r3, [r3, #0]
 810ab1c:	4a1f      	ldr	r2, [pc, #124]	; (810ab9c <HAL_TIM_Base_Start_IT+0xc8>)
 810ab1e:	4293      	cmp	r3, r2
 810ab20:	d013      	beq.n	810ab4a <HAL_TIM_Base_Start_IT+0x76>
 810ab22:	687b      	ldr	r3, [r7, #4]
 810ab24:	681b      	ldr	r3, [r3, #0]
 810ab26:	4a1e      	ldr	r2, [pc, #120]	; (810aba0 <HAL_TIM_Base_Start_IT+0xcc>)
 810ab28:	4293      	cmp	r3, r2
 810ab2a:	d00e      	beq.n	810ab4a <HAL_TIM_Base_Start_IT+0x76>
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	681b      	ldr	r3, [r3, #0]
 810ab30:	4a1c      	ldr	r2, [pc, #112]	; (810aba4 <HAL_TIM_Base_Start_IT+0xd0>)
 810ab32:	4293      	cmp	r3, r2
 810ab34:	d009      	beq.n	810ab4a <HAL_TIM_Base_Start_IT+0x76>
 810ab36:	687b      	ldr	r3, [r7, #4]
 810ab38:	681b      	ldr	r3, [r3, #0]
 810ab3a:	4a1b      	ldr	r2, [pc, #108]	; (810aba8 <HAL_TIM_Base_Start_IT+0xd4>)
 810ab3c:	4293      	cmp	r3, r2
 810ab3e:	d004      	beq.n	810ab4a <HAL_TIM_Base_Start_IT+0x76>
 810ab40:	687b      	ldr	r3, [r7, #4]
 810ab42:	681b      	ldr	r3, [r3, #0]
 810ab44:	4a19      	ldr	r2, [pc, #100]	; (810abac <HAL_TIM_Base_Start_IT+0xd8>)
 810ab46:	4293      	cmp	r3, r2
 810ab48:	d115      	bne.n	810ab76 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810ab4a:	687b      	ldr	r3, [r7, #4]
 810ab4c:	681b      	ldr	r3, [r3, #0]
 810ab4e:	689a      	ldr	r2, [r3, #8]
 810ab50:	4b17      	ldr	r3, [pc, #92]	; (810abb0 <HAL_TIM_Base_Start_IT+0xdc>)
 810ab52:	4013      	ands	r3, r2
 810ab54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab56:	68fb      	ldr	r3, [r7, #12]
 810ab58:	2b06      	cmp	r3, #6
 810ab5a:	d015      	beq.n	810ab88 <HAL_TIM_Base_Start_IT+0xb4>
 810ab5c:	68fb      	ldr	r3, [r7, #12]
 810ab5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ab62:	d011      	beq.n	810ab88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 810ab64:	687b      	ldr	r3, [r7, #4]
 810ab66:	681b      	ldr	r3, [r3, #0]
 810ab68:	681a      	ldr	r2, [r3, #0]
 810ab6a:	687b      	ldr	r3, [r7, #4]
 810ab6c:	681b      	ldr	r3, [r3, #0]
 810ab6e:	f042 0201 	orr.w	r2, r2, #1
 810ab72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab74:	e008      	b.n	810ab88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810ab76:	687b      	ldr	r3, [r7, #4]
 810ab78:	681b      	ldr	r3, [r3, #0]
 810ab7a:	681a      	ldr	r2, [r3, #0]
 810ab7c:	687b      	ldr	r3, [r7, #4]
 810ab7e:	681b      	ldr	r3, [r3, #0]
 810ab80:	f042 0201 	orr.w	r2, r2, #1
 810ab84:	601a      	str	r2, [r3, #0]
 810ab86:	e000      	b.n	810ab8a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ab88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810ab8a:	2300      	movs	r3, #0
}
 810ab8c:	4618      	mov	r0, r3
 810ab8e:	3714      	adds	r7, #20
 810ab90:	46bd      	mov	sp, r7
 810ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab96:	4770      	bx	lr
 810ab98:	40010000 	.word	0x40010000
 810ab9c:	40000400 	.word	0x40000400
 810aba0:	40000800 	.word	0x40000800
 810aba4:	40000c00 	.word	0x40000c00
 810aba8:	40010400 	.word	0x40010400
 810abac:	40001800 	.word	0x40001800
 810abb0:	00010007 	.word	0x00010007

0810abb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810abb4:	b580      	push	{r7, lr}
 810abb6:	b082      	sub	sp, #8
 810abb8:	af00      	add	r7, sp, #0
 810abba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810abbc:	687b      	ldr	r3, [r7, #4]
 810abbe:	2b00      	cmp	r3, #0
 810abc0:	d101      	bne.n	810abc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810abc2:	2301      	movs	r3, #1
 810abc4:	e049      	b.n	810ac5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810abc6:	687b      	ldr	r3, [r7, #4]
 810abc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810abcc:	b2db      	uxtb	r3, r3
 810abce:	2b00      	cmp	r3, #0
 810abd0:	d106      	bne.n	810abe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810abd2:	687b      	ldr	r3, [r7, #4]
 810abd4:	2200      	movs	r2, #0
 810abd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810abda:	6878      	ldr	r0, [r7, #4]
 810abdc:	f000 f841 	bl	810ac62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810abe0:	687b      	ldr	r3, [r7, #4]
 810abe2:	2202      	movs	r2, #2
 810abe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810abe8:	687b      	ldr	r3, [r7, #4]
 810abea:	681a      	ldr	r2, [r3, #0]
 810abec:	687b      	ldr	r3, [r7, #4]
 810abee:	3304      	adds	r3, #4
 810abf0:	4619      	mov	r1, r3
 810abf2:	4610      	mov	r0, r2
 810abf4:	f000 fb8a 	bl	810b30c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810abf8:	687b      	ldr	r3, [r7, #4]
 810abfa:	2201      	movs	r2, #1
 810abfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac00:	687b      	ldr	r3, [r7, #4]
 810ac02:	2201      	movs	r2, #1
 810ac04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	2201      	movs	r2, #1
 810ac0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810ac10:	687b      	ldr	r3, [r7, #4]
 810ac12:	2201      	movs	r2, #1
 810ac14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	2201      	movs	r2, #1
 810ac1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810ac20:	687b      	ldr	r3, [r7, #4]
 810ac22:	2201      	movs	r2, #1
 810ac24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810ac28:	687b      	ldr	r3, [r7, #4]
 810ac2a:	2201      	movs	r2, #1
 810ac2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ac30:	687b      	ldr	r3, [r7, #4]
 810ac32:	2201      	movs	r2, #1
 810ac34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810ac38:	687b      	ldr	r3, [r7, #4]
 810ac3a:	2201      	movs	r2, #1
 810ac3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810ac40:	687b      	ldr	r3, [r7, #4]
 810ac42:	2201      	movs	r2, #1
 810ac44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810ac48:	687b      	ldr	r3, [r7, #4]
 810ac4a:	2201      	movs	r2, #1
 810ac4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ac50:	687b      	ldr	r3, [r7, #4]
 810ac52:	2201      	movs	r2, #1
 810ac54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810ac58:	2300      	movs	r3, #0
}
 810ac5a:	4618      	mov	r0, r3
 810ac5c:	3708      	adds	r7, #8
 810ac5e:	46bd      	mov	sp, r7
 810ac60:	bd80      	pop	{r7, pc}

0810ac62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810ac62:	b480      	push	{r7}
 810ac64:	b083      	sub	sp, #12
 810ac66:	af00      	add	r7, sp, #0
 810ac68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810ac6a:	bf00      	nop
 810ac6c:	370c      	adds	r7, #12
 810ac6e:	46bd      	mov	sp, r7
 810ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac74:	4770      	bx	lr

0810ac76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810ac76:	b580      	push	{r7, lr}
 810ac78:	b082      	sub	sp, #8
 810ac7a:	af00      	add	r7, sp, #0
 810ac7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810ac7e:	687b      	ldr	r3, [r7, #4]
 810ac80:	681b      	ldr	r3, [r3, #0]
 810ac82:	691b      	ldr	r3, [r3, #16]
 810ac84:	f003 0302 	and.w	r3, r3, #2
 810ac88:	2b02      	cmp	r3, #2
 810ac8a:	d122      	bne.n	810acd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810ac8c:	687b      	ldr	r3, [r7, #4]
 810ac8e:	681b      	ldr	r3, [r3, #0]
 810ac90:	68db      	ldr	r3, [r3, #12]
 810ac92:	f003 0302 	and.w	r3, r3, #2
 810ac96:	2b02      	cmp	r3, #2
 810ac98:	d11b      	bne.n	810acd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810ac9a:	687b      	ldr	r3, [r7, #4]
 810ac9c:	681b      	ldr	r3, [r3, #0]
 810ac9e:	f06f 0202 	mvn.w	r2, #2
 810aca2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810aca4:	687b      	ldr	r3, [r7, #4]
 810aca6:	2201      	movs	r2, #1
 810aca8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810acaa:	687b      	ldr	r3, [r7, #4]
 810acac:	681b      	ldr	r3, [r3, #0]
 810acae:	699b      	ldr	r3, [r3, #24]
 810acb0:	f003 0303 	and.w	r3, r3, #3
 810acb4:	2b00      	cmp	r3, #0
 810acb6:	d003      	beq.n	810acc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810acb8:	6878      	ldr	r0, [r7, #4]
 810acba:	f000 fb09 	bl	810b2d0 <HAL_TIM_IC_CaptureCallback>
 810acbe:	e005      	b.n	810accc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810acc0:	6878      	ldr	r0, [r7, #4]
 810acc2:	f000 fafb 	bl	810b2bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810acc6:	6878      	ldr	r0, [r7, #4]
 810acc8:	f000 fb0c 	bl	810b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810accc:	687b      	ldr	r3, [r7, #4]
 810acce:	2200      	movs	r2, #0
 810acd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810acd2:	687b      	ldr	r3, [r7, #4]
 810acd4:	681b      	ldr	r3, [r3, #0]
 810acd6:	691b      	ldr	r3, [r3, #16]
 810acd8:	f003 0304 	and.w	r3, r3, #4
 810acdc:	2b04      	cmp	r3, #4
 810acde:	d122      	bne.n	810ad26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810ace0:	687b      	ldr	r3, [r7, #4]
 810ace2:	681b      	ldr	r3, [r3, #0]
 810ace4:	68db      	ldr	r3, [r3, #12]
 810ace6:	f003 0304 	and.w	r3, r3, #4
 810acea:	2b04      	cmp	r3, #4
 810acec:	d11b      	bne.n	810ad26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810acee:	687b      	ldr	r3, [r7, #4]
 810acf0:	681b      	ldr	r3, [r3, #0]
 810acf2:	f06f 0204 	mvn.w	r2, #4
 810acf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810acf8:	687b      	ldr	r3, [r7, #4]
 810acfa:	2202      	movs	r2, #2
 810acfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810acfe:	687b      	ldr	r3, [r7, #4]
 810ad00:	681b      	ldr	r3, [r3, #0]
 810ad02:	699b      	ldr	r3, [r3, #24]
 810ad04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810ad08:	2b00      	cmp	r3, #0
 810ad0a:	d003      	beq.n	810ad14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810ad0c:	6878      	ldr	r0, [r7, #4]
 810ad0e:	f000 fadf 	bl	810b2d0 <HAL_TIM_IC_CaptureCallback>
 810ad12:	e005      	b.n	810ad20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810ad14:	6878      	ldr	r0, [r7, #4]
 810ad16:	f000 fad1 	bl	810b2bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810ad1a:	6878      	ldr	r0, [r7, #4]
 810ad1c:	f000 fae2 	bl	810b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810ad20:	687b      	ldr	r3, [r7, #4]
 810ad22:	2200      	movs	r2, #0
 810ad24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810ad26:	687b      	ldr	r3, [r7, #4]
 810ad28:	681b      	ldr	r3, [r3, #0]
 810ad2a:	691b      	ldr	r3, [r3, #16]
 810ad2c:	f003 0308 	and.w	r3, r3, #8
 810ad30:	2b08      	cmp	r3, #8
 810ad32:	d122      	bne.n	810ad7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810ad34:	687b      	ldr	r3, [r7, #4]
 810ad36:	681b      	ldr	r3, [r3, #0]
 810ad38:	68db      	ldr	r3, [r3, #12]
 810ad3a:	f003 0308 	and.w	r3, r3, #8
 810ad3e:	2b08      	cmp	r3, #8
 810ad40:	d11b      	bne.n	810ad7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810ad42:	687b      	ldr	r3, [r7, #4]
 810ad44:	681b      	ldr	r3, [r3, #0]
 810ad46:	f06f 0208 	mvn.w	r2, #8
 810ad4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810ad4c:	687b      	ldr	r3, [r7, #4]
 810ad4e:	2204      	movs	r2, #4
 810ad50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810ad52:	687b      	ldr	r3, [r7, #4]
 810ad54:	681b      	ldr	r3, [r3, #0]
 810ad56:	69db      	ldr	r3, [r3, #28]
 810ad58:	f003 0303 	and.w	r3, r3, #3
 810ad5c:	2b00      	cmp	r3, #0
 810ad5e:	d003      	beq.n	810ad68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810ad60:	6878      	ldr	r0, [r7, #4]
 810ad62:	f000 fab5 	bl	810b2d0 <HAL_TIM_IC_CaptureCallback>
 810ad66:	e005      	b.n	810ad74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810ad68:	6878      	ldr	r0, [r7, #4]
 810ad6a:	f000 faa7 	bl	810b2bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810ad6e:	6878      	ldr	r0, [r7, #4]
 810ad70:	f000 fab8 	bl	810b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810ad74:	687b      	ldr	r3, [r7, #4]
 810ad76:	2200      	movs	r2, #0
 810ad78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810ad7a:	687b      	ldr	r3, [r7, #4]
 810ad7c:	681b      	ldr	r3, [r3, #0]
 810ad7e:	691b      	ldr	r3, [r3, #16]
 810ad80:	f003 0310 	and.w	r3, r3, #16
 810ad84:	2b10      	cmp	r3, #16
 810ad86:	d122      	bne.n	810adce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810ad88:	687b      	ldr	r3, [r7, #4]
 810ad8a:	681b      	ldr	r3, [r3, #0]
 810ad8c:	68db      	ldr	r3, [r3, #12]
 810ad8e:	f003 0310 	and.w	r3, r3, #16
 810ad92:	2b10      	cmp	r3, #16
 810ad94:	d11b      	bne.n	810adce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810ad96:	687b      	ldr	r3, [r7, #4]
 810ad98:	681b      	ldr	r3, [r3, #0]
 810ad9a:	f06f 0210 	mvn.w	r2, #16
 810ad9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810ada0:	687b      	ldr	r3, [r7, #4]
 810ada2:	2208      	movs	r2, #8
 810ada4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810ada6:	687b      	ldr	r3, [r7, #4]
 810ada8:	681b      	ldr	r3, [r3, #0]
 810adaa:	69db      	ldr	r3, [r3, #28]
 810adac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810adb0:	2b00      	cmp	r3, #0
 810adb2:	d003      	beq.n	810adbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810adb4:	6878      	ldr	r0, [r7, #4]
 810adb6:	f000 fa8b 	bl	810b2d0 <HAL_TIM_IC_CaptureCallback>
 810adba:	e005      	b.n	810adc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810adbc:	6878      	ldr	r0, [r7, #4]
 810adbe:	f000 fa7d 	bl	810b2bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810adc2:	6878      	ldr	r0, [r7, #4]
 810adc4:	f000 fa8e 	bl	810b2e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810adc8:	687b      	ldr	r3, [r7, #4]
 810adca:	2200      	movs	r2, #0
 810adcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810adce:	687b      	ldr	r3, [r7, #4]
 810add0:	681b      	ldr	r3, [r3, #0]
 810add2:	691b      	ldr	r3, [r3, #16]
 810add4:	f003 0301 	and.w	r3, r3, #1
 810add8:	2b01      	cmp	r3, #1
 810adda:	d10e      	bne.n	810adfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810addc:	687b      	ldr	r3, [r7, #4]
 810adde:	681b      	ldr	r3, [r3, #0]
 810ade0:	68db      	ldr	r3, [r3, #12]
 810ade2:	f003 0301 	and.w	r3, r3, #1
 810ade6:	2b01      	cmp	r3, #1
 810ade8:	d107      	bne.n	810adfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810adea:	687b      	ldr	r3, [r7, #4]
 810adec:	681b      	ldr	r3, [r3, #0]
 810adee:	f06f 0201 	mvn.w	r2, #1
 810adf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810adf4:	6878      	ldr	r0, [r7, #4]
 810adf6:	f7f6 fc83 	bl	8101700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810adfa:	687b      	ldr	r3, [r7, #4]
 810adfc:	681b      	ldr	r3, [r3, #0]
 810adfe:	691b      	ldr	r3, [r3, #16]
 810ae00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ae04:	2b80      	cmp	r3, #128	; 0x80
 810ae06:	d10e      	bne.n	810ae26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	681b      	ldr	r3, [r3, #0]
 810ae0c:	68db      	ldr	r3, [r3, #12]
 810ae0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ae12:	2b80      	cmp	r3, #128	; 0x80
 810ae14:	d107      	bne.n	810ae26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810ae16:	687b      	ldr	r3, [r7, #4]
 810ae18:	681b      	ldr	r3, [r3, #0]
 810ae1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810ae1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810ae20:	6878      	ldr	r0, [r7, #4]
 810ae22:	f000 ff87 	bl	810bd34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810ae26:	687b      	ldr	r3, [r7, #4]
 810ae28:	681b      	ldr	r3, [r3, #0]
 810ae2a:	691b      	ldr	r3, [r3, #16]
 810ae2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ae30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ae34:	d10e      	bne.n	810ae54 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810ae36:	687b      	ldr	r3, [r7, #4]
 810ae38:	681b      	ldr	r3, [r3, #0]
 810ae3a:	68db      	ldr	r3, [r3, #12]
 810ae3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810ae40:	2b80      	cmp	r3, #128	; 0x80
 810ae42:	d107      	bne.n	810ae54 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810ae44:	687b      	ldr	r3, [r7, #4]
 810ae46:	681b      	ldr	r3, [r3, #0]
 810ae48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810ae4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810ae4e:	6878      	ldr	r0, [r7, #4]
 810ae50:	f000 ff7a 	bl	810bd48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810ae54:	687b      	ldr	r3, [r7, #4]
 810ae56:	681b      	ldr	r3, [r3, #0]
 810ae58:	691b      	ldr	r3, [r3, #16]
 810ae5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ae5e:	2b40      	cmp	r3, #64	; 0x40
 810ae60:	d10e      	bne.n	810ae80 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810ae62:	687b      	ldr	r3, [r7, #4]
 810ae64:	681b      	ldr	r3, [r3, #0]
 810ae66:	68db      	ldr	r3, [r3, #12]
 810ae68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810ae6c:	2b40      	cmp	r3, #64	; 0x40
 810ae6e:	d107      	bne.n	810ae80 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810ae70:	687b      	ldr	r3, [r7, #4]
 810ae72:	681b      	ldr	r3, [r3, #0]
 810ae74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810ae78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810ae7a:	6878      	ldr	r0, [r7, #4]
 810ae7c:	f000 fa3c 	bl	810b2f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810ae80:	687b      	ldr	r3, [r7, #4]
 810ae82:	681b      	ldr	r3, [r3, #0]
 810ae84:	691b      	ldr	r3, [r3, #16]
 810ae86:	f003 0320 	and.w	r3, r3, #32
 810ae8a:	2b20      	cmp	r3, #32
 810ae8c:	d10e      	bne.n	810aeac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810ae8e:	687b      	ldr	r3, [r7, #4]
 810ae90:	681b      	ldr	r3, [r3, #0]
 810ae92:	68db      	ldr	r3, [r3, #12]
 810ae94:	f003 0320 	and.w	r3, r3, #32
 810ae98:	2b20      	cmp	r3, #32
 810ae9a:	d107      	bne.n	810aeac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810ae9c:	687b      	ldr	r3, [r7, #4]
 810ae9e:	681b      	ldr	r3, [r3, #0]
 810aea0:	f06f 0220 	mvn.w	r2, #32
 810aea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810aea6:	6878      	ldr	r0, [r7, #4]
 810aea8:	f000 ff3a 	bl	810bd20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810aeac:	bf00      	nop
 810aeae:	3708      	adds	r7, #8
 810aeb0:	46bd      	mov	sp, r7
 810aeb2:	bd80      	pop	{r7, pc}

0810aeb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 810aeb4:	b580      	push	{r7, lr}
 810aeb6:	b084      	sub	sp, #16
 810aeb8:	af00      	add	r7, sp, #0
 810aeba:	60f8      	str	r0, [r7, #12]
 810aebc:	60b9      	str	r1, [r7, #8]
 810aebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810aec0:	68fb      	ldr	r3, [r7, #12]
 810aec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810aec6:	2b01      	cmp	r3, #1
 810aec8:	d101      	bne.n	810aece <HAL_TIM_PWM_ConfigChannel+0x1a>
 810aeca:	2302      	movs	r3, #2
 810aecc:	e0fd      	b.n	810b0ca <HAL_TIM_PWM_ConfigChannel+0x216>
 810aece:	68fb      	ldr	r3, [r7, #12]
 810aed0:	2201      	movs	r2, #1
 810aed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 810aed6:	687b      	ldr	r3, [r7, #4]
 810aed8:	2b14      	cmp	r3, #20
 810aeda:	f200 80f0 	bhi.w	810b0be <HAL_TIM_PWM_ConfigChannel+0x20a>
 810aede:	a201      	add	r2, pc, #4	; (adr r2, 810aee4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 810aee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aee4:	0810af39 	.word	0x0810af39
 810aee8:	0810b0bf 	.word	0x0810b0bf
 810aeec:	0810b0bf 	.word	0x0810b0bf
 810aef0:	0810b0bf 	.word	0x0810b0bf
 810aef4:	0810af79 	.word	0x0810af79
 810aef8:	0810b0bf 	.word	0x0810b0bf
 810aefc:	0810b0bf 	.word	0x0810b0bf
 810af00:	0810b0bf 	.word	0x0810b0bf
 810af04:	0810afbb 	.word	0x0810afbb
 810af08:	0810b0bf 	.word	0x0810b0bf
 810af0c:	0810b0bf 	.word	0x0810b0bf
 810af10:	0810b0bf 	.word	0x0810b0bf
 810af14:	0810affb 	.word	0x0810affb
 810af18:	0810b0bf 	.word	0x0810b0bf
 810af1c:	0810b0bf 	.word	0x0810b0bf
 810af20:	0810b0bf 	.word	0x0810b0bf
 810af24:	0810b03d 	.word	0x0810b03d
 810af28:	0810b0bf 	.word	0x0810b0bf
 810af2c:	0810b0bf 	.word	0x0810b0bf
 810af30:	0810b0bf 	.word	0x0810b0bf
 810af34:	0810b07d 	.word	0x0810b07d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810af38:	68fb      	ldr	r3, [r7, #12]
 810af3a:	681b      	ldr	r3, [r3, #0]
 810af3c:	68b9      	ldr	r1, [r7, #8]
 810af3e:	4618      	mov	r0, r3
 810af40:	f000 fa7e 	bl	810b440 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810af44:	68fb      	ldr	r3, [r7, #12]
 810af46:	681b      	ldr	r3, [r3, #0]
 810af48:	699a      	ldr	r2, [r3, #24]
 810af4a:	68fb      	ldr	r3, [r7, #12]
 810af4c:	681b      	ldr	r3, [r3, #0]
 810af4e:	f042 0208 	orr.w	r2, r2, #8
 810af52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810af54:	68fb      	ldr	r3, [r7, #12]
 810af56:	681b      	ldr	r3, [r3, #0]
 810af58:	699a      	ldr	r2, [r3, #24]
 810af5a:	68fb      	ldr	r3, [r7, #12]
 810af5c:	681b      	ldr	r3, [r3, #0]
 810af5e:	f022 0204 	bic.w	r2, r2, #4
 810af62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810af64:	68fb      	ldr	r3, [r7, #12]
 810af66:	681b      	ldr	r3, [r3, #0]
 810af68:	6999      	ldr	r1, [r3, #24]
 810af6a:	68bb      	ldr	r3, [r7, #8]
 810af6c:	691a      	ldr	r2, [r3, #16]
 810af6e:	68fb      	ldr	r3, [r7, #12]
 810af70:	681b      	ldr	r3, [r3, #0]
 810af72:	430a      	orrs	r2, r1
 810af74:	619a      	str	r2, [r3, #24]
      break;
 810af76:	e0a3      	b.n	810b0c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810af78:	68fb      	ldr	r3, [r7, #12]
 810af7a:	681b      	ldr	r3, [r3, #0]
 810af7c:	68b9      	ldr	r1, [r7, #8]
 810af7e:	4618      	mov	r0, r3
 810af80:	f000 faee 	bl	810b560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810af84:	68fb      	ldr	r3, [r7, #12]
 810af86:	681b      	ldr	r3, [r3, #0]
 810af88:	699a      	ldr	r2, [r3, #24]
 810af8a:	68fb      	ldr	r3, [r7, #12]
 810af8c:	681b      	ldr	r3, [r3, #0]
 810af8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810af92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810af94:	68fb      	ldr	r3, [r7, #12]
 810af96:	681b      	ldr	r3, [r3, #0]
 810af98:	699a      	ldr	r2, [r3, #24]
 810af9a:	68fb      	ldr	r3, [r7, #12]
 810af9c:	681b      	ldr	r3, [r3, #0]
 810af9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810afa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810afa4:	68fb      	ldr	r3, [r7, #12]
 810afa6:	681b      	ldr	r3, [r3, #0]
 810afa8:	6999      	ldr	r1, [r3, #24]
 810afaa:	68bb      	ldr	r3, [r7, #8]
 810afac:	691b      	ldr	r3, [r3, #16]
 810afae:	021a      	lsls	r2, r3, #8
 810afb0:	68fb      	ldr	r3, [r7, #12]
 810afb2:	681b      	ldr	r3, [r3, #0]
 810afb4:	430a      	orrs	r2, r1
 810afb6:	619a      	str	r2, [r3, #24]
      break;
 810afb8:	e082      	b.n	810b0c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810afba:	68fb      	ldr	r3, [r7, #12]
 810afbc:	681b      	ldr	r3, [r3, #0]
 810afbe:	68b9      	ldr	r1, [r7, #8]
 810afc0:	4618      	mov	r0, r3
 810afc2:	f000 fb57 	bl	810b674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810afc6:	68fb      	ldr	r3, [r7, #12]
 810afc8:	681b      	ldr	r3, [r3, #0]
 810afca:	69da      	ldr	r2, [r3, #28]
 810afcc:	68fb      	ldr	r3, [r7, #12]
 810afce:	681b      	ldr	r3, [r3, #0]
 810afd0:	f042 0208 	orr.w	r2, r2, #8
 810afd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810afd6:	68fb      	ldr	r3, [r7, #12]
 810afd8:	681b      	ldr	r3, [r3, #0]
 810afda:	69da      	ldr	r2, [r3, #28]
 810afdc:	68fb      	ldr	r3, [r7, #12]
 810afde:	681b      	ldr	r3, [r3, #0]
 810afe0:	f022 0204 	bic.w	r2, r2, #4
 810afe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810afe6:	68fb      	ldr	r3, [r7, #12]
 810afe8:	681b      	ldr	r3, [r3, #0]
 810afea:	69d9      	ldr	r1, [r3, #28]
 810afec:	68bb      	ldr	r3, [r7, #8]
 810afee:	691a      	ldr	r2, [r3, #16]
 810aff0:	68fb      	ldr	r3, [r7, #12]
 810aff2:	681b      	ldr	r3, [r3, #0]
 810aff4:	430a      	orrs	r2, r1
 810aff6:	61da      	str	r2, [r3, #28]
      break;
 810aff8:	e062      	b.n	810b0c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810affa:	68fb      	ldr	r3, [r7, #12]
 810affc:	681b      	ldr	r3, [r3, #0]
 810affe:	68b9      	ldr	r1, [r7, #8]
 810b000:	4618      	mov	r0, r3
 810b002:	f000 fbbd 	bl	810b780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810b006:	68fb      	ldr	r3, [r7, #12]
 810b008:	681b      	ldr	r3, [r3, #0]
 810b00a:	69da      	ldr	r2, [r3, #28]
 810b00c:	68fb      	ldr	r3, [r7, #12]
 810b00e:	681b      	ldr	r3, [r3, #0]
 810b010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810b014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810b016:	68fb      	ldr	r3, [r7, #12]
 810b018:	681b      	ldr	r3, [r3, #0]
 810b01a:	69da      	ldr	r2, [r3, #28]
 810b01c:	68fb      	ldr	r3, [r7, #12]
 810b01e:	681b      	ldr	r3, [r3, #0]
 810b020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810b024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810b026:	68fb      	ldr	r3, [r7, #12]
 810b028:	681b      	ldr	r3, [r3, #0]
 810b02a:	69d9      	ldr	r1, [r3, #28]
 810b02c:	68bb      	ldr	r3, [r7, #8]
 810b02e:	691b      	ldr	r3, [r3, #16]
 810b030:	021a      	lsls	r2, r3, #8
 810b032:	68fb      	ldr	r3, [r7, #12]
 810b034:	681b      	ldr	r3, [r3, #0]
 810b036:	430a      	orrs	r2, r1
 810b038:	61da      	str	r2, [r3, #28]
      break;
 810b03a:	e041      	b.n	810b0c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810b03c:	68fb      	ldr	r3, [r7, #12]
 810b03e:	681b      	ldr	r3, [r3, #0]
 810b040:	68b9      	ldr	r1, [r7, #8]
 810b042:	4618      	mov	r0, r3
 810b044:	f000 fc04 	bl	810b850 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810b048:	68fb      	ldr	r3, [r7, #12]
 810b04a:	681b      	ldr	r3, [r3, #0]
 810b04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810b04e:	68fb      	ldr	r3, [r7, #12]
 810b050:	681b      	ldr	r3, [r3, #0]
 810b052:	f042 0208 	orr.w	r2, r2, #8
 810b056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810b058:	68fb      	ldr	r3, [r7, #12]
 810b05a:	681b      	ldr	r3, [r3, #0]
 810b05c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810b05e:	68fb      	ldr	r3, [r7, #12]
 810b060:	681b      	ldr	r3, [r3, #0]
 810b062:	f022 0204 	bic.w	r2, r2, #4
 810b066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810b068:	68fb      	ldr	r3, [r7, #12]
 810b06a:	681b      	ldr	r3, [r3, #0]
 810b06c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810b06e:	68bb      	ldr	r3, [r7, #8]
 810b070:	691a      	ldr	r2, [r3, #16]
 810b072:	68fb      	ldr	r3, [r7, #12]
 810b074:	681b      	ldr	r3, [r3, #0]
 810b076:	430a      	orrs	r2, r1
 810b078:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810b07a:	e021      	b.n	810b0c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810b07c:	68fb      	ldr	r3, [r7, #12]
 810b07e:	681b      	ldr	r3, [r3, #0]
 810b080:	68b9      	ldr	r1, [r7, #8]
 810b082:	4618      	mov	r0, r3
 810b084:	f000 fc46 	bl	810b914 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810b088:	68fb      	ldr	r3, [r7, #12]
 810b08a:	681b      	ldr	r3, [r3, #0]
 810b08c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810b08e:	68fb      	ldr	r3, [r7, #12]
 810b090:	681b      	ldr	r3, [r3, #0]
 810b092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810b096:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810b098:	68fb      	ldr	r3, [r7, #12]
 810b09a:	681b      	ldr	r3, [r3, #0]
 810b09c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810b09e:	68fb      	ldr	r3, [r7, #12]
 810b0a0:	681b      	ldr	r3, [r3, #0]
 810b0a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810b0a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810b0a8:	68fb      	ldr	r3, [r7, #12]
 810b0aa:	681b      	ldr	r3, [r3, #0]
 810b0ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810b0ae:	68bb      	ldr	r3, [r7, #8]
 810b0b0:	691b      	ldr	r3, [r3, #16]
 810b0b2:	021a      	lsls	r2, r3, #8
 810b0b4:	68fb      	ldr	r3, [r7, #12]
 810b0b6:	681b      	ldr	r3, [r3, #0]
 810b0b8:	430a      	orrs	r2, r1
 810b0ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810b0bc:	e000      	b.n	810b0c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810b0be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810b0c0:	68fb      	ldr	r3, [r7, #12]
 810b0c2:	2200      	movs	r2, #0
 810b0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810b0c8:	2300      	movs	r3, #0
}
 810b0ca:	4618      	mov	r0, r3
 810b0cc:	3710      	adds	r7, #16
 810b0ce:	46bd      	mov	sp, r7
 810b0d0:	bd80      	pop	{r7, pc}
 810b0d2:	bf00      	nop

0810b0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810b0d4:	b580      	push	{r7, lr}
 810b0d6:	b084      	sub	sp, #16
 810b0d8:	af00      	add	r7, sp, #0
 810b0da:	6078      	str	r0, [r7, #4]
 810b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810b0de:	687b      	ldr	r3, [r7, #4]
 810b0e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810b0e4:	2b01      	cmp	r3, #1
 810b0e6:	d101      	bne.n	810b0ec <HAL_TIM_ConfigClockSource+0x18>
 810b0e8:	2302      	movs	r3, #2
 810b0ea:	e0dd      	b.n	810b2a8 <HAL_TIM_ConfigClockSource+0x1d4>
 810b0ec:	687b      	ldr	r3, [r7, #4]
 810b0ee:	2201      	movs	r2, #1
 810b0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810b0f4:	687b      	ldr	r3, [r7, #4]
 810b0f6:	2202      	movs	r2, #2
 810b0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810b0fc:	687b      	ldr	r3, [r7, #4]
 810b0fe:	681b      	ldr	r3, [r3, #0]
 810b100:	689b      	ldr	r3, [r3, #8]
 810b102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810b104:	68fb      	ldr	r3, [r7, #12]
 810b106:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810b10a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810b10e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810b110:	68fb      	ldr	r3, [r7, #12]
 810b112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810b116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 810b118:	687b      	ldr	r3, [r7, #4]
 810b11a:	681b      	ldr	r3, [r3, #0]
 810b11c:	68fa      	ldr	r2, [r7, #12]
 810b11e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810b120:	683b      	ldr	r3, [r7, #0]
 810b122:	681b      	ldr	r3, [r3, #0]
 810b124:	4a62      	ldr	r2, [pc, #392]	; (810b2b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 810b126:	4293      	cmp	r3, r2
 810b128:	f000 80a9 	beq.w	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b12c:	4a60      	ldr	r2, [pc, #384]	; (810b2b0 <HAL_TIM_ConfigClockSource+0x1dc>)
 810b12e:	4293      	cmp	r3, r2
 810b130:	f200 80ae 	bhi.w	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b134:	4a5f      	ldr	r2, [pc, #380]	; (810b2b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 810b136:	4293      	cmp	r3, r2
 810b138:	f000 80a1 	beq.w	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b13c:	4a5d      	ldr	r2, [pc, #372]	; (810b2b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 810b13e:	4293      	cmp	r3, r2
 810b140:	f200 80a6 	bhi.w	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b144:	4a5c      	ldr	r2, [pc, #368]	; (810b2b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b146:	4293      	cmp	r3, r2
 810b148:	f000 8099 	beq.w	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b14c:	4a5a      	ldr	r2, [pc, #360]	; (810b2b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 810b14e:	4293      	cmp	r3, r2
 810b150:	f200 809e 	bhi.w	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b154:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810b158:	f000 8091 	beq.w	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b15c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810b160:	f200 8096 	bhi.w	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b168:	f000 8089 	beq.w	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b16c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b170:	f200 808e 	bhi.w	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b174:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b178:	d03e      	beq.n	810b1f8 <HAL_TIM_ConfigClockSource+0x124>
 810b17a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810b17e:	f200 8087 	bhi.w	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b186:	f000 8085 	beq.w	810b294 <HAL_TIM_ConfigClockSource+0x1c0>
 810b18a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b18e:	d87f      	bhi.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b190:	2b70      	cmp	r3, #112	; 0x70
 810b192:	d01a      	beq.n	810b1ca <HAL_TIM_ConfigClockSource+0xf6>
 810b194:	2b70      	cmp	r3, #112	; 0x70
 810b196:	d87b      	bhi.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b198:	2b60      	cmp	r3, #96	; 0x60
 810b19a:	d050      	beq.n	810b23e <HAL_TIM_ConfigClockSource+0x16a>
 810b19c:	2b60      	cmp	r3, #96	; 0x60
 810b19e:	d877      	bhi.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b1a0:	2b50      	cmp	r3, #80	; 0x50
 810b1a2:	d03c      	beq.n	810b21e <HAL_TIM_ConfigClockSource+0x14a>
 810b1a4:	2b50      	cmp	r3, #80	; 0x50
 810b1a6:	d873      	bhi.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b1a8:	2b40      	cmp	r3, #64	; 0x40
 810b1aa:	d058      	beq.n	810b25e <HAL_TIM_ConfigClockSource+0x18a>
 810b1ac:	2b40      	cmp	r3, #64	; 0x40
 810b1ae:	d86f      	bhi.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b1b0:	2b30      	cmp	r3, #48	; 0x30
 810b1b2:	d064      	beq.n	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b1b4:	2b30      	cmp	r3, #48	; 0x30
 810b1b6:	d86b      	bhi.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b1b8:	2b20      	cmp	r3, #32
 810b1ba:	d060      	beq.n	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b1bc:	2b20      	cmp	r3, #32
 810b1be:	d867      	bhi.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
 810b1c0:	2b00      	cmp	r3, #0
 810b1c2:	d05c      	beq.n	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
 810b1c4:	2b10      	cmp	r3, #16
 810b1c6:	d05a      	beq.n	810b27e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 810b1c8:	e062      	b.n	810b290 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 810b1ca:	687b      	ldr	r3, [r7, #4]
 810b1cc:	6818      	ldr	r0, [r3, #0]
 810b1ce:	683b      	ldr	r3, [r7, #0]
 810b1d0:	6899      	ldr	r1, [r3, #8]
 810b1d2:	683b      	ldr	r3, [r7, #0]
 810b1d4:	685a      	ldr	r2, [r3, #4]
 810b1d6:	683b      	ldr	r3, [r7, #0]
 810b1d8:	68db      	ldr	r3, [r3, #12]
 810b1da:	f000 fc7b 	bl	810bad4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810b1de:	687b      	ldr	r3, [r7, #4]
 810b1e0:	681b      	ldr	r3, [r3, #0]
 810b1e2:	689b      	ldr	r3, [r3, #8]
 810b1e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810b1e6:	68fb      	ldr	r3, [r7, #12]
 810b1e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810b1ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810b1ee:	687b      	ldr	r3, [r7, #4]
 810b1f0:	681b      	ldr	r3, [r3, #0]
 810b1f2:	68fa      	ldr	r2, [r7, #12]
 810b1f4:	609a      	str	r2, [r3, #8]
      break;
 810b1f6:	e04e      	b.n	810b296 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 810b1f8:	687b      	ldr	r3, [r7, #4]
 810b1fa:	6818      	ldr	r0, [r3, #0]
 810b1fc:	683b      	ldr	r3, [r7, #0]
 810b1fe:	6899      	ldr	r1, [r3, #8]
 810b200:	683b      	ldr	r3, [r7, #0]
 810b202:	685a      	ldr	r2, [r3, #4]
 810b204:	683b      	ldr	r3, [r7, #0]
 810b206:	68db      	ldr	r3, [r3, #12]
 810b208:	f000 fc64 	bl	810bad4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810b20c:	687b      	ldr	r3, [r7, #4]
 810b20e:	681b      	ldr	r3, [r3, #0]
 810b210:	689a      	ldr	r2, [r3, #8]
 810b212:	687b      	ldr	r3, [r7, #4]
 810b214:	681b      	ldr	r3, [r3, #0]
 810b216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810b21a:	609a      	str	r2, [r3, #8]
      break;
 810b21c:	e03b      	b.n	810b296 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	6818      	ldr	r0, [r3, #0]
 810b222:	683b      	ldr	r3, [r7, #0]
 810b224:	6859      	ldr	r1, [r3, #4]
 810b226:	683b      	ldr	r3, [r7, #0]
 810b228:	68db      	ldr	r3, [r3, #12]
 810b22a:	461a      	mov	r2, r3
 810b22c:	f000 fbd6 	bl	810b9dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810b230:	687b      	ldr	r3, [r7, #4]
 810b232:	681b      	ldr	r3, [r3, #0]
 810b234:	2150      	movs	r1, #80	; 0x50
 810b236:	4618      	mov	r0, r3
 810b238:	f000 fc2f 	bl	810ba9a <TIM_ITRx_SetConfig>
      break;
 810b23c:	e02b      	b.n	810b296 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810b23e:	687b      	ldr	r3, [r7, #4]
 810b240:	6818      	ldr	r0, [r3, #0]
 810b242:	683b      	ldr	r3, [r7, #0]
 810b244:	6859      	ldr	r1, [r3, #4]
 810b246:	683b      	ldr	r3, [r7, #0]
 810b248:	68db      	ldr	r3, [r3, #12]
 810b24a:	461a      	mov	r2, r3
 810b24c:	f000 fbf5 	bl	810ba3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810b250:	687b      	ldr	r3, [r7, #4]
 810b252:	681b      	ldr	r3, [r3, #0]
 810b254:	2160      	movs	r1, #96	; 0x60
 810b256:	4618      	mov	r0, r3
 810b258:	f000 fc1f 	bl	810ba9a <TIM_ITRx_SetConfig>
      break;
 810b25c:	e01b      	b.n	810b296 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810b25e:	687b      	ldr	r3, [r7, #4]
 810b260:	6818      	ldr	r0, [r3, #0]
 810b262:	683b      	ldr	r3, [r7, #0]
 810b264:	6859      	ldr	r1, [r3, #4]
 810b266:	683b      	ldr	r3, [r7, #0]
 810b268:	68db      	ldr	r3, [r3, #12]
 810b26a:	461a      	mov	r2, r3
 810b26c:	f000 fbb6 	bl	810b9dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810b270:	687b      	ldr	r3, [r7, #4]
 810b272:	681b      	ldr	r3, [r3, #0]
 810b274:	2140      	movs	r1, #64	; 0x40
 810b276:	4618      	mov	r0, r3
 810b278:	f000 fc0f 	bl	810ba9a <TIM_ITRx_SetConfig>
      break;
 810b27c:	e00b      	b.n	810b296 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810b27e:	687b      	ldr	r3, [r7, #4]
 810b280:	681a      	ldr	r2, [r3, #0]
 810b282:	683b      	ldr	r3, [r7, #0]
 810b284:	681b      	ldr	r3, [r3, #0]
 810b286:	4619      	mov	r1, r3
 810b288:	4610      	mov	r0, r2
 810b28a:	f000 fc06 	bl	810ba9a <TIM_ITRx_SetConfig>
        break;
 810b28e:	e002      	b.n	810b296 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810b290:	bf00      	nop
 810b292:	e000      	b.n	810b296 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 810b294:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810b296:	687b      	ldr	r3, [r7, #4]
 810b298:	2201      	movs	r2, #1
 810b29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810b29e:	687b      	ldr	r3, [r7, #4]
 810b2a0:	2200      	movs	r2, #0
 810b2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810b2a6:	2300      	movs	r3, #0
}
 810b2a8:	4618      	mov	r0, r3
 810b2aa:	3710      	adds	r7, #16
 810b2ac:	46bd      	mov	sp, r7
 810b2ae:	bd80      	pop	{r7, pc}
 810b2b0:	00100040 	.word	0x00100040
 810b2b4:	00100030 	.word	0x00100030
 810b2b8:	00100020 	.word	0x00100020

0810b2bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810b2bc:	b480      	push	{r7}
 810b2be:	b083      	sub	sp, #12
 810b2c0:	af00      	add	r7, sp, #0
 810b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810b2c4:	bf00      	nop
 810b2c6:	370c      	adds	r7, #12
 810b2c8:	46bd      	mov	sp, r7
 810b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2ce:	4770      	bx	lr

0810b2d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810b2d0:	b480      	push	{r7}
 810b2d2:	b083      	sub	sp, #12
 810b2d4:	af00      	add	r7, sp, #0
 810b2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810b2d8:	bf00      	nop
 810b2da:	370c      	adds	r7, #12
 810b2dc:	46bd      	mov	sp, r7
 810b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2e2:	4770      	bx	lr

0810b2e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810b2e4:	b480      	push	{r7}
 810b2e6:	b083      	sub	sp, #12
 810b2e8:	af00      	add	r7, sp, #0
 810b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810b2ec:	bf00      	nop
 810b2ee:	370c      	adds	r7, #12
 810b2f0:	46bd      	mov	sp, r7
 810b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2f6:	4770      	bx	lr

0810b2f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810b2f8:	b480      	push	{r7}
 810b2fa:	b083      	sub	sp, #12
 810b2fc:	af00      	add	r7, sp, #0
 810b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810b300:	bf00      	nop
 810b302:	370c      	adds	r7, #12
 810b304:	46bd      	mov	sp, r7
 810b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b30a:	4770      	bx	lr

0810b30c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810b30c:	b480      	push	{r7}
 810b30e:	b085      	sub	sp, #20
 810b310:	af00      	add	r7, sp, #0
 810b312:	6078      	str	r0, [r7, #4]
 810b314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810b316:	687b      	ldr	r3, [r7, #4]
 810b318:	681b      	ldr	r3, [r3, #0]
 810b31a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810b31c:	687b      	ldr	r3, [r7, #4]
 810b31e:	4a40      	ldr	r2, [pc, #256]	; (810b420 <TIM_Base_SetConfig+0x114>)
 810b320:	4293      	cmp	r3, r2
 810b322:	d013      	beq.n	810b34c <TIM_Base_SetConfig+0x40>
 810b324:	687b      	ldr	r3, [r7, #4]
 810b326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b32a:	d00f      	beq.n	810b34c <TIM_Base_SetConfig+0x40>
 810b32c:	687b      	ldr	r3, [r7, #4]
 810b32e:	4a3d      	ldr	r2, [pc, #244]	; (810b424 <TIM_Base_SetConfig+0x118>)
 810b330:	4293      	cmp	r3, r2
 810b332:	d00b      	beq.n	810b34c <TIM_Base_SetConfig+0x40>
 810b334:	687b      	ldr	r3, [r7, #4]
 810b336:	4a3c      	ldr	r2, [pc, #240]	; (810b428 <TIM_Base_SetConfig+0x11c>)
 810b338:	4293      	cmp	r3, r2
 810b33a:	d007      	beq.n	810b34c <TIM_Base_SetConfig+0x40>
 810b33c:	687b      	ldr	r3, [r7, #4]
 810b33e:	4a3b      	ldr	r2, [pc, #236]	; (810b42c <TIM_Base_SetConfig+0x120>)
 810b340:	4293      	cmp	r3, r2
 810b342:	d003      	beq.n	810b34c <TIM_Base_SetConfig+0x40>
 810b344:	687b      	ldr	r3, [r7, #4]
 810b346:	4a3a      	ldr	r2, [pc, #232]	; (810b430 <TIM_Base_SetConfig+0x124>)
 810b348:	4293      	cmp	r3, r2
 810b34a:	d108      	bne.n	810b35e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810b34c:	68fb      	ldr	r3, [r7, #12]
 810b34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810b352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810b354:	683b      	ldr	r3, [r7, #0]
 810b356:	685b      	ldr	r3, [r3, #4]
 810b358:	68fa      	ldr	r2, [r7, #12]
 810b35a:	4313      	orrs	r3, r2
 810b35c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810b35e:	687b      	ldr	r3, [r7, #4]
 810b360:	4a2f      	ldr	r2, [pc, #188]	; (810b420 <TIM_Base_SetConfig+0x114>)
 810b362:	4293      	cmp	r3, r2
 810b364:	d01f      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b366:	687b      	ldr	r3, [r7, #4]
 810b368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b36c:	d01b      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b36e:	687b      	ldr	r3, [r7, #4]
 810b370:	4a2c      	ldr	r2, [pc, #176]	; (810b424 <TIM_Base_SetConfig+0x118>)
 810b372:	4293      	cmp	r3, r2
 810b374:	d017      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b376:	687b      	ldr	r3, [r7, #4]
 810b378:	4a2b      	ldr	r2, [pc, #172]	; (810b428 <TIM_Base_SetConfig+0x11c>)
 810b37a:	4293      	cmp	r3, r2
 810b37c:	d013      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b37e:	687b      	ldr	r3, [r7, #4]
 810b380:	4a2a      	ldr	r2, [pc, #168]	; (810b42c <TIM_Base_SetConfig+0x120>)
 810b382:	4293      	cmp	r3, r2
 810b384:	d00f      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b386:	687b      	ldr	r3, [r7, #4]
 810b388:	4a29      	ldr	r2, [pc, #164]	; (810b430 <TIM_Base_SetConfig+0x124>)
 810b38a:	4293      	cmp	r3, r2
 810b38c:	d00b      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b38e:	687b      	ldr	r3, [r7, #4]
 810b390:	4a28      	ldr	r2, [pc, #160]	; (810b434 <TIM_Base_SetConfig+0x128>)
 810b392:	4293      	cmp	r3, r2
 810b394:	d007      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b396:	687b      	ldr	r3, [r7, #4]
 810b398:	4a27      	ldr	r2, [pc, #156]	; (810b438 <TIM_Base_SetConfig+0x12c>)
 810b39a:	4293      	cmp	r3, r2
 810b39c:	d003      	beq.n	810b3a6 <TIM_Base_SetConfig+0x9a>
 810b39e:	687b      	ldr	r3, [r7, #4]
 810b3a0:	4a26      	ldr	r2, [pc, #152]	; (810b43c <TIM_Base_SetConfig+0x130>)
 810b3a2:	4293      	cmp	r3, r2
 810b3a4:	d108      	bne.n	810b3b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810b3a6:	68fb      	ldr	r3, [r7, #12]
 810b3a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810b3ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810b3ae:	683b      	ldr	r3, [r7, #0]
 810b3b0:	68db      	ldr	r3, [r3, #12]
 810b3b2:	68fa      	ldr	r2, [r7, #12]
 810b3b4:	4313      	orrs	r3, r2
 810b3b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810b3b8:	68fb      	ldr	r3, [r7, #12]
 810b3ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810b3be:	683b      	ldr	r3, [r7, #0]
 810b3c0:	695b      	ldr	r3, [r3, #20]
 810b3c2:	4313      	orrs	r3, r2
 810b3c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810b3c6:	687b      	ldr	r3, [r7, #4]
 810b3c8:	68fa      	ldr	r2, [r7, #12]
 810b3ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810b3cc:	683b      	ldr	r3, [r7, #0]
 810b3ce:	689a      	ldr	r2, [r3, #8]
 810b3d0:	687b      	ldr	r3, [r7, #4]
 810b3d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810b3d4:	683b      	ldr	r3, [r7, #0]
 810b3d6:	681a      	ldr	r2, [r3, #0]
 810b3d8:	687b      	ldr	r3, [r7, #4]
 810b3da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810b3dc:	687b      	ldr	r3, [r7, #4]
 810b3de:	4a10      	ldr	r2, [pc, #64]	; (810b420 <TIM_Base_SetConfig+0x114>)
 810b3e0:	4293      	cmp	r3, r2
 810b3e2:	d00f      	beq.n	810b404 <TIM_Base_SetConfig+0xf8>
 810b3e4:	687b      	ldr	r3, [r7, #4]
 810b3e6:	4a12      	ldr	r2, [pc, #72]	; (810b430 <TIM_Base_SetConfig+0x124>)
 810b3e8:	4293      	cmp	r3, r2
 810b3ea:	d00b      	beq.n	810b404 <TIM_Base_SetConfig+0xf8>
 810b3ec:	687b      	ldr	r3, [r7, #4]
 810b3ee:	4a11      	ldr	r2, [pc, #68]	; (810b434 <TIM_Base_SetConfig+0x128>)
 810b3f0:	4293      	cmp	r3, r2
 810b3f2:	d007      	beq.n	810b404 <TIM_Base_SetConfig+0xf8>
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	4a10      	ldr	r2, [pc, #64]	; (810b438 <TIM_Base_SetConfig+0x12c>)
 810b3f8:	4293      	cmp	r3, r2
 810b3fa:	d003      	beq.n	810b404 <TIM_Base_SetConfig+0xf8>
 810b3fc:	687b      	ldr	r3, [r7, #4]
 810b3fe:	4a0f      	ldr	r2, [pc, #60]	; (810b43c <TIM_Base_SetConfig+0x130>)
 810b400:	4293      	cmp	r3, r2
 810b402:	d103      	bne.n	810b40c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810b404:	683b      	ldr	r3, [r7, #0]
 810b406:	691a      	ldr	r2, [r3, #16]
 810b408:	687b      	ldr	r3, [r7, #4]
 810b40a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810b40c:	687b      	ldr	r3, [r7, #4]
 810b40e:	2201      	movs	r2, #1
 810b410:	615a      	str	r2, [r3, #20]
}
 810b412:	bf00      	nop
 810b414:	3714      	adds	r7, #20
 810b416:	46bd      	mov	sp, r7
 810b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b41c:	4770      	bx	lr
 810b41e:	bf00      	nop
 810b420:	40010000 	.word	0x40010000
 810b424:	40000400 	.word	0x40000400
 810b428:	40000800 	.word	0x40000800
 810b42c:	40000c00 	.word	0x40000c00
 810b430:	40010400 	.word	0x40010400
 810b434:	40014000 	.word	0x40014000
 810b438:	40014400 	.word	0x40014400
 810b43c:	40014800 	.word	0x40014800

0810b440 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810b440:	b480      	push	{r7}
 810b442:	b087      	sub	sp, #28
 810b444:	af00      	add	r7, sp, #0
 810b446:	6078      	str	r0, [r7, #4]
 810b448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b44a:	687b      	ldr	r3, [r7, #4]
 810b44c:	6a1b      	ldr	r3, [r3, #32]
 810b44e:	f023 0201 	bic.w	r2, r3, #1
 810b452:	687b      	ldr	r3, [r7, #4]
 810b454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b456:	687b      	ldr	r3, [r7, #4]
 810b458:	6a1b      	ldr	r3, [r3, #32]
 810b45a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b45c:	687b      	ldr	r3, [r7, #4]
 810b45e:	685b      	ldr	r3, [r3, #4]
 810b460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b462:	687b      	ldr	r3, [r7, #4]
 810b464:	699b      	ldr	r3, [r3, #24]
 810b466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810b468:	68fb      	ldr	r3, [r7, #12]
 810b46a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810b46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810b472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810b474:	68fb      	ldr	r3, [r7, #12]
 810b476:	f023 0303 	bic.w	r3, r3, #3
 810b47a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b47c:	683b      	ldr	r3, [r7, #0]
 810b47e:	681b      	ldr	r3, [r3, #0]
 810b480:	68fa      	ldr	r2, [r7, #12]
 810b482:	4313      	orrs	r3, r2
 810b484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810b486:	697b      	ldr	r3, [r7, #20]
 810b488:	f023 0302 	bic.w	r3, r3, #2
 810b48c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810b48e:	683b      	ldr	r3, [r7, #0]
 810b490:	689b      	ldr	r3, [r3, #8]
 810b492:	697a      	ldr	r2, [r7, #20]
 810b494:	4313      	orrs	r3, r2
 810b496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810b498:	687b      	ldr	r3, [r7, #4]
 810b49a:	4a2c      	ldr	r2, [pc, #176]	; (810b54c <TIM_OC1_SetConfig+0x10c>)
 810b49c:	4293      	cmp	r3, r2
 810b49e:	d00f      	beq.n	810b4c0 <TIM_OC1_SetConfig+0x80>
 810b4a0:	687b      	ldr	r3, [r7, #4]
 810b4a2:	4a2b      	ldr	r2, [pc, #172]	; (810b550 <TIM_OC1_SetConfig+0x110>)
 810b4a4:	4293      	cmp	r3, r2
 810b4a6:	d00b      	beq.n	810b4c0 <TIM_OC1_SetConfig+0x80>
 810b4a8:	687b      	ldr	r3, [r7, #4]
 810b4aa:	4a2a      	ldr	r2, [pc, #168]	; (810b554 <TIM_OC1_SetConfig+0x114>)
 810b4ac:	4293      	cmp	r3, r2
 810b4ae:	d007      	beq.n	810b4c0 <TIM_OC1_SetConfig+0x80>
 810b4b0:	687b      	ldr	r3, [r7, #4]
 810b4b2:	4a29      	ldr	r2, [pc, #164]	; (810b558 <TIM_OC1_SetConfig+0x118>)
 810b4b4:	4293      	cmp	r3, r2
 810b4b6:	d003      	beq.n	810b4c0 <TIM_OC1_SetConfig+0x80>
 810b4b8:	687b      	ldr	r3, [r7, #4]
 810b4ba:	4a28      	ldr	r2, [pc, #160]	; (810b55c <TIM_OC1_SetConfig+0x11c>)
 810b4bc:	4293      	cmp	r3, r2
 810b4be:	d10c      	bne.n	810b4da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810b4c0:	697b      	ldr	r3, [r7, #20]
 810b4c2:	f023 0308 	bic.w	r3, r3, #8
 810b4c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810b4c8:	683b      	ldr	r3, [r7, #0]
 810b4ca:	68db      	ldr	r3, [r3, #12]
 810b4cc:	697a      	ldr	r2, [r7, #20]
 810b4ce:	4313      	orrs	r3, r2
 810b4d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810b4d2:	697b      	ldr	r3, [r7, #20]
 810b4d4:	f023 0304 	bic.w	r3, r3, #4
 810b4d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b4da:	687b      	ldr	r3, [r7, #4]
 810b4dc:	4a1b      	ldr	r2, [pc, #108]	; (810b54c <TIM_OC1_SetConfig+0x10c>)
 810b4de:	4293      	cmp	r3, r2
 810b4e0:	d00f      	beq.n	810b502 <TIM_OC1_SetConfig+0xc2>
 810b4e2:	687b      	ldr	r3, [r7, #4]
 810b4e4:	4a1a      	ldr	r2, [pc, #104]	; (810b550 <TIM_OC1_SetConfig+0x110>)
 810b4e6:	4293      	cmp	r3, r2
 810b4e8:	d00b      	beq.n	810b502 <TIM_OC1_SetConfig+0xc2>
 810b4ea:	687b      	ldr	r3, [r7, #4]
 810b4ec:	4a19      	ldr	r2, [pc, #100]	; (810b554 <TIM_OC1_SetConfig+0x114>)
 810b4ee:	4293      	cmp	r3, r2
 810b4f0:	d007      	beq.n	810b502 <TIM_OC1_SetConfig+0xc2>
 810b4f2:	687b      	ldr	r3, [r7, #4]
 810b4f4:	4a18      	ldr	r2, [pc, #96]	; (810b558 <TIM_OC1_SetConfig+0x118>)
 810b4f6:	4293      	cmp	r3, r2
 810b4f8:	d003      	beq.n	810b502 <TIM_OC1_SetConfig+0xc2>
 810b4fa:	687b      	ldr	r3, [r7, #4]
 810b4fc:	4a17      	ldr	r2, [pc, #92]	; (810b55c <TIM_OC1_SetConfig+0x11c>)
 810b4fe:	4293      	cmp	r3, r2
 810b500:	d111      	bne.n	810b526 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810b502:	693b      	ldr	r3, [r7, #16]
 810b504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810b50a:	693b      	ldr	r3, [r7, #16]
 810b50c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810b510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810b512:	683b      	ldr	r3, [r7, #0]
 810b514:	695b      	ldr	r3, [r3, #20]
 810b516:	693a      	ldr	r2, [r7, #16]
 810b518:	4313      	orrs	r3, r2
 810b51a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810b51c:	683b      	ldr	r3, [r7, #0]
 810b51e:	699b      	ldr	r3, [r3, #24]
 810b520:	693a      	ldr	r2, [r7, #16]
 810b522:	4313      	orrs	r3, r2
 810b524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b526:	687b      	ldr	r3, [r7, #4]
 810b528:	693a      	ldr	r2, [r7, #16]
 810b52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b52c:	687b      	ldr	r3, [r7, #4]
 810b52e:	68fa      	ldr	r2, [r7, #12]
 810b530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810b532:	683b      	ldr	r3, [r7, #0]
 810b534:	685a      	ldr	r2, [r3, #4]
 810b536:	687b      	ldr	r3, [r7, #4]
 810b538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b53a:	687b      	ldr	r3, [r7, #4]
 810b53c:	697a      	ldr	r2, [r7, #20]
 810b53e:	621a      	str	r2, [r3, #32]
}
 810b540:	bf00      	nop
 810b542:	371c      	adds	r7, #28
 810b544:	46bd      	mov	sp, r7
 810b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b54a:	4770      	bx	lr
 810b54c:	40010000 	.word	0x40010000
 810b550:	40010400 	.word	0x40010400
 810b554:	40014000 	.word	0x40014000
 810b558:	40014400 	.word	0x40014400
 810b55c:	40014800 	.word	0x40014800

0810b560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810b560:	b480      	push	{r7}
 810b562:	b087      	sub	sp, #28
 810b564:	af00      	add	r7, sp, #0
 810b566:	6078      	str	r0, [r7, #4]
 810b568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810b56a:	687b      	ldr	r3, [r7, #4]
 810b56c:	6a1b      	ldr	r3, [r3, #32]
 810b56e:	f023 0210 	bic.w	r2, r3, #16
 810b572:	687b      	ldr	r3, [r7, #4]
 810b574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	6a1b      	ldr	r3, [r3, #32]
 810b57a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b57c:	687b      	ldr	r3, [r7, #4]
 810b57e:	685b      	ldr	r3, [r3, #4]
 810b580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810b582:	687b      	ldr	r3, [r7, #4]
 810b584:	699b      	ldr	r3, [r3, #24]
 810b586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810b588:	68fb      	ldr	r3, [r7, #12]
 810b58a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810b58e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810b592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810b594:	68fb      	ldr	r3, [r7, #12]
 810b596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810b59a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b59c:	683b      	ldr	r3, [r7, #0]
 810b59e:	681b      	ldr	r3, [r3, #0]
 810b5a0:	021b      	lsls	r3, r3, #8
 810b5a2:	68fa      	ldr	r2, [r7, #12]
 810b5a4:	4313      	orrs	r3, r2
 810b5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810b5a8:	697b      	ldr	r3, [r7, #20]
 810b5aa:	f023 0320 	bic.w	r3, r3, #32
 810b5ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810b5b0:	683b      	ldr	r3, [r7, #0]
 810b5b2:	689b      	ldr	r3, [r3, #8]
 810b5b4:	011b      	lsls	r3, r3, #4
 810b5b6:	697a      	ldr	r2, [r7, #20]
 810b5b8:	4313      	orrs	r3, r2
 810b5ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810b5bc:	687b      	ldr	r3, [r7, #4]
 810b5be:	4a28      	ldr	r2, [pc, #160]	; (810b660 <TIM_OC2_SetConfig+0x100>)
 810b5c0:	4293      	cmp	r3, r2
 810b5c2:	d003      	beq.n	810b5cc <TIM_OC2_SetConfig+0x6c>
 810b5c4:	687b      	ldr	r3, [r7, #4]
 810b5c6:	4a27      	ldr	r2, [pc, #156]	; (810b664 <TIM_OC2_SetConfig+0x104>)
 810b5c8:	4293      	cmp	r3, r2
 810b5ca:	d10d      	bne.n	810b5e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810b5cc:	697b      	ldr	r3, [r7, #20]
 810b5ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810b5d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810b5d4:	683b      	ldr	r3, [r7, #0]
 810b5d6:	68db      	ldr	r3, [r3, #12]
 810b5d8:	011b      	lsls	r3, r3, #4
 810b5da:	697a      	ldr	r2, [r7, #20]
 810b5dc:	4313      	orrs	r3, r2
 810b5de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810b5e0:	697b      	ldr	r3, [r7, #20]
 810b5e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810b5e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b5e8:	687b      	ldr	r3, [r7, #4]
 810b5ea:	4a1d      	ldr	r2, [pc, #116]	; (810b660 <TIM_OC2_SetConfig+0x100>)
 810b5ec:	4293      	cmp	r3, r2
 810b5ee:	d00f      	beq.n	810b610 <TIM_OC2_SetConfig+0xb0>
 810b5f0:	687b      	ldr	r3, [r7, #4]
 810b5f2:	4a1c      	ldr	r2, [pc, #112]	; (810b664 <TIM_OC2_SetConfig+0x104>)
 810b5f4:	4293      	cmp	r3, r2
 810b5f6:	d00b      	beq.n	810b610 <TIM_OC2_SetConfig+0xb0>
 810b5f8:	687b      	ldr	r3, [r7, #4]
 810b5fa:	4a1b      	ldr	r2, [pc, #108]	; (810b668 <TIM_OC2_SetConfig+0x108>)
 810b5fc:	4293      	cmp	r3, r2
 810b5fe:	d007      	beq.n	810b610 <TIM_OC2_SetConfig+0xb0>
 810b600:	687b      	ldr	r3, [r7, #4]
 810b602:	4a1a      	ldr	r2, [pc, #104]	; (810b66c <TIM_OC2_SetConfig+0x10c>)
 810b604:	4293      	cmp	r3, r2
 810b606:	d003      	beq.n	810b610 <TIM_OC2_SetConfig+0xb0>
 810b608:	687b      	ldr	r3, [r7, #4]
 810b60a:	4a19      	ldr	r2, [pc, #100]	; (810b670 <TIM_OC2_SetConfig+0x110>)
 810b60c:	4293      	cmp	r3, r2
 810b60e:	d113      	bne.n	810b638 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810b610:	693b      	ldr	r3, [r7, #16]
 810b612:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810b616:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810b618:	693b      	ldr	r3, [r7, #16]
 810b61a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810b61e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810b620:	683b      	ldr	r3, [r7, #0]
 810b622:	695b      	ldr	r3, [r3, #20]
 810b624:	009b      	lsls	r3, r3, #2
 810b626:	693a      	ldr	r2, [r7, #16]
 810b628:	4313      	orrs	r3, r2
 810b62a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810b62c:	683b      	ldr	r3, [r7, #0]
 810b62e:	699b      	ldr	r3, [r3, #24]
 810b630:	009b      	lsls	r3, r3, #2
 810b632:	693a      	ldr	r2, [r7, #16]
 810b634:	4313      	orrs	r3, r2
 810b636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b638:	687b      	ldr	r3, [r7, #4]
 810b63a:	693a      	ldr	r2, [r7, #16]
 810b63c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810b63e:	687b      	ldr	r3, [r7, #4]
 810b640:	68fa      	ldr	r2, [r7, #12]
 810b642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810b644:	683b      	ldr	r3, [r7, #0]
 810b646:	685a      	ldr	r2, [r3, #4]
 810b648:	687b      	ldr	r3, [r7, #4]
 810b64a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b64c:	687b      	ldr	r3, [r7, #4]
 810b64e:	697a      	ldr	r2, [r7, #20]
 810b650:	621a      	str	r2, [r3, #32]
}
 810b652:	bf00      	nop
 810b654:	371c      	adds	r7, #28
 810b656:	46bd      	mov	sp, r7
 810b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b65c:	4770      	bx	lr
 810b65e:	bf00      	nop
 810b660:	40010000 	.word	0x40010000
 810b664:	40010400 	.word	0x40010400
 810b668:	40014000 	.word	0x40014000
 810b66c:	40014400 	.word	0x40014400
 810b670:	40014800 	.word	0x40014800

0810b674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810b674:	b480      	push	{r7}
 810b676:	b087      	sub	sp, #28
 810b678:	af00      	add	r7, sp, #0
 810b67a:	6078      	str	r0, [r7, #4]
 810b67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810b67e:	687b      	ldr	r3, [r7, #4]
 810b680:	6a1b      	ldr	r3, [r3, #32]
 810b682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810b686:	687b      	ldr	r3, [r7, #4]
 810b688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b68a:	687b      	ldr	r3, [r7, #4]
 810b68c:	6a1b      	ldr	r3, [r3, #32]
 810b68e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b690:	687b      	ldr	r3, [r7, #4]
 810b692:	685b      	ldr	r3, [r3, #4]
 810b694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810b696:	687b      	ldr	r3, [r7, #4]
 810b698:	69db      	ldr	r3, [r3, #28]
 810b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810b69c:	68fb      	ldr	r3, [r7, #12]
 810b69e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810b6a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810b6a4:	68fb      	ldr	r3, [r7, #12]
 810b6a6:	f023 0303 	bic.w	r3, r3, #3
 810b6aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b6ac:	683b      	ldr	r3, [r7, #0]
 810b6ae:	681b      	ldr	r3, [r3, #0]
 810b6b0:	68fa      	ldr	r2, [r7, #12]
 810b6b2:	4313      	orrs	r3, r2
 810b6b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810b6b6:	697b      	ldr	r3, [r7, #20]
 810b6b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810b6bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810b6be:	683b      	ldr	r3, [r7, #0]
 810b6c0:	689b      	ldr	r3, [r3, #8]
 810b6c2:	021b      	lsls	r3, r3, #8
 810b6c4:	697a      	ldr	r2, [r7, #20]
 810b6c6:	4313      	orrs	r3, r2
 810b6c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810b6ca:	687b      	ldr	r3, [r7, #4]
 810b6cc:	4a27      	ldr	r2, [pc, #156]	; (810b76c <TIM_OC3_SetConfig+0xf8>)
 810b6ce:	4293      	cmp	r3, r2
 810b6d0:	d003      	beq.n	810b6da <TIM_OC3_SetConfig+0x66>
 810b6d2:	687b      	ldr	r3, [r7, #4]
 810b6d4:	4a26      	ldr	r2, [pc, #152]	; (810b770 <TIM_OC3_SetConfig+0xfc>)
 810b6d6:	4293      	cmp	r3, r2
 810b6d8:	d10d      	bne.n	810b6f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810b6da:	697b      	ldr	r3, [r7, #20]
 810b6dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810b6e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810b6e2:	683b      	ldr	r3, [r7, #0]
 810b6e4:	68db      	ldr	r3, [r3, #12]
 810b6e6:	021b      	lsls	r3, r3, #8
 810b6e8:	697a      	ldr	r2, [r7, #20]
 810b6ea:	4313      	orrs	r3, r2
 810b6ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810b6ee:	697b      	ldr	r3, [r7, #20]
 810b6f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810b6f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b6f6:	687b      	ldr	r3, [r7, #4]
 810b6f8:	4a1c      	ldr	r2, [pc, #112]	; (810b76c <TIM_OC3_SetConfig+0xf8>)
 810b6fa:	4293      	cmp	r3, r2
 810b6fc:	d00f      	beq.n	810b71e <TIM_OC3_SetConfig+0xaa>
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	4a1b      	ldr	r2, [pc, #108]	; (810b770 <TIM_OC3_SetConfig+0xfc>)
 810b702:	4293      	cmp	r3, r2
 810b704:	d00b      	beq.n	810b71e <TIM_OC3_SetConfig+0xaa>
 810b706:	687b      	ldr	r3, [r7, #4]
 810b708:	4a1a      	ldr	r2, [pc, #104]	; (810b774 <TIM_OC3_SetConfig+0x100>)
 810b70a:	4293      	cmp	r3, r2
 810b70c:	d007      	beq.n	810b71e <TIM_OC3_SetConfig+0xaa>
 810b70e:	687b      	ldr	r3, [r7, #4]
 810b710:	4a19      	ldr	r2, [pc, #100]	; (810b778 <TIM_OC3_SetConfig+0x104>)
 810b712:	4293      	cmp	r3, r2
 810b714:	d003      	beq.n	810b71e <TIM_OC3_SetConfig+0xaa>
 810b716:	687b      	ldr	r3, [r7, #4]
 810b718:	4a18      	ldr	r2, [pc, #96]	; (810b77c <TIM_OC3_SetConfig+0x108>)
 810b71a:	4293      	cmp	r3, r2
 810b71c:	d113      	bne.n	810b746 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810b71e:	693b      	ldr	r3, [r7, #16]
 810b720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810b726:	693b      	ldr	r3, [r7, #16]
 810b728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810b72c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810b72e:	683b      	ldr	r3, [r7, #0]
 810b730:	695b      	ldr	r3, [r3, #20]
 810b732:	011b      	lsls	r3, r3, #4
 810b734:	693a      	ldr	r2, [r7, #16]
 810b736:	4313      	orrs	r3, r2
 810b738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810b73a:	683b      	ldr	r3, [r7, #0]
 810b73c:	699b      	ldr	r3, [r3, #24]
 810b73e:	011b      	lsls	r3, r3, #4
 810b740:	693a      	ldr	r2, [r7, #16]
 810b742:	4313      	orrs	r3, r2
 810b744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b746:	687b      	ldr	r3, [r7, #4]
 810b748:	693a      	ldr	r2, [r7, #16]
 810b74a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810b74c:	687b      	ldr	r3, [r7, #4]
 810b74e:	68fa      	ldr	r2, [r7, #12]
 810b750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810b752:	683b      	ldr	r3, [r7, #0]
 810b754:	685a      	ldr	r2, [r3, #4]
 810b756:	687b      	ldr	r3, [r7, #4]
 810b758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b75a:	687b      	ldr	r3, [r7, #4]
 810b75c:	697a      	ldr	r2, [r7, #20]
 810b75e:	621a      	str	r2, [r3, #32]
}
 810b760:	bf00      	nop
 810b762:	371c      	adds	r7, #28
 810b764:	46bd      	mov	sp, r7
 810b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b76a:	4770      	bx	lr
 810b76c:	40010000 	.word	0x40010000
 810b770:	40010400 	.word	0x40010400
 810b774:	40014000 	.word	0x40014000
 810b778:	40014400 	.word	0x40014400
 810b77c:	40014800 	.word	0x40014800

0810b780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810b780:	b480      	push	{r7}
 810b782:	b087      	sub	sp, #28
 810b784:	af00      	add	r7, sp, #0
 810b786:	6078      	str	r0, [r7, #4]
 810b788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810b78a:	687b      	ldr	r3, [r7, #4]
 810b78c:	6a1b      	ldr	r3, [r3, #32]
 810b78e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810b792:	687b      	ldr	r3, [r7, #4]
 810b794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b796:	687b      	ldr	r3, [r7, #4]
 810b798:	6a1b      	ldr	r3, [r3, #32]
 810b79a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b79c:	687b      	ldr	r3, [r7, #4]
 810b79e:	685b      	ldr	r3, [r3, #4]
 810b7a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810b7a2:	687b      	ldr	r3, [r7, #4]
 810b7a4:	69db      	ldr	r3, [r3, #28]
 810b7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810b7a8:	68fb      	ldr	r3, [r7, #12]
 810b7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810b7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810b7b0:	68fb      	ldr	r3, [r7, #12]
 810b7b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810b7b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b7b8:	683b      	ldr	r3, [r7, #0]
 810b7ba:	681b      	ldr	r3, [r3, #0]
 810b7bc:	021b      	lsls	r3, r3, #8
 810b7be:	68fa      	ldr	r2, [r7, #12]
 810b7c0:	4313      	orrs	r3, r2
 810b7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810b7c4:	693b      	ldr	r3, [r7, #16]
 810b7c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810b7ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810b7cc:	683b      	ldr	r3, [r7, #0]
 810b7ce:	689b      	ldr	r3, [r3, #8]
 810b7d0:	031b      	lsls	r3, r3, #12
 810b7d2:	693a      	ldr	r2, [r7, #16]
 810b7d4:	4313      	orrs	r3, r2
 810b7d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b7d8:	687b      	ldr	r3, [r7, #4]
 810b7da:	4a18      	ldr	r2, [pc, #96]	; (810b83c <TIM_OC4_SetConfig+0xbc>)
 810b7dc:	4293      	cmp	r3, r2
 810b7de:	d00f      	beq.n	810b800 <TIM_OC4_SetConfig+0x80>
 810b7e0:	687b      	ldr	r3, [r7, #4]
 810b7e2:	4a17      	ldr	r2, [pc, #92]	; (810b840 <TIM_OC4_SetConfig+0xc0>)
 810b7e4:	4293      	cmp	r3, r2
 810b7e6:	d00b      	beq.n	810b800 <TIM_OC4_SetConfig+0x80>
 810b7e8:	687b      	ldr	r3, [r7, #4]
 810b7ea:	4a16      	ldr	r2, [pc, #88]	; (810b844 <TIM_OC4_SetConfig+0xc4>)
 810b7ec:	4293      	cmp	r3, r2
 810b7ee:	d007      	beq.n	810b800 <TIM_OC4_SetConfig+0x80>
 810b7f0:	687b      	ldr	r3, [r7, #4]
 810b7f2:	4a15      	ldr	r2, [pc, #84]	; (810b848 <TIM_OC4_SetConfig+0xc8>)
 810b7f4:	4293      	cmp	r3, r2
 810b7f6:	d003      	beq.n	810b800 <TIM_OC4_SetConfig+0x80>
 810b7f8:	687b      	ldr	r3, [r7, #4]
 810b7fa:	4a14      	ldr	r2, [pc, #80]	; (810b84c <TIM_OC4_SetConfig+0xcc>)
 810b7fc:	4293      	cmp	r3, r2
 810b7fe:	d109      	bne.n	810b814 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810b800:	697b      	ldr	r3, [r7, #20]
 810b802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810b806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810b808:	683b      	ldr	r3, [r7, #0]
 810b80a:	695b      	ldr	r3, [r3, #20]
 810b80c:	019b      	lsls	r3, r3, #6
 810b80e:	697a      	ldr	r2, [r7, #20]
 810b810:	4313      	orrs	r3, r2
 810b812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b814:	687b      	ldr	r3, [r7, #4]
 810b816:	697a      	ldr	r2, [r7, #20]
 810b818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810b81a:	687b      	ldr	r3, [r7, #4]
 810b81c:	68fa      	ldr	r2, [r7, #12]
 810b81e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810b820:	683b      	ldr	r3, [r7, #0]
 810b822:	685a      	ldr	r2, [r3, #4]
 810b824:	687b      	ldr	r3, [r7, #4]
 810b826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b828:	687b      	ldr	r3, [r7, #4]
 810b82a:	693a      	ldr	r2, [r7, #16]
 810b82c:	621a      	str	r2, [r3, #32]
}
 810b82e:	bf00      	nop
 810b830:	371c      	adds	r7, #28
 810b832:	46bd      	mov	sp, r7
 810b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b838:	4770      	bx	lr
 810b83a:	bf00      	nop
 810b83c:	40010000 	.word	0x40010000
 810b840:	40010400 	.word	0x40010400
 810b844:	40014000 	.word	0x40014000
 810b848:	40014400 	.word	0x40014400
 810b84c:	40014800 	.word	0x40014800

0810b850 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810b850:	b480      	push	{r7}
 810b852:	b087      	sub	sp, #28
 810b854:	af00      	add	r7, sp, #0
 810b856:	6078      	str	r0, [r7, #4]
 810b858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810b85a:	687b      	ldr	r3, [r7, #4]
 810b85c:	6a1b      	ldr	r3, [r3, #32]
 810b85e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810b862:	687b      	ldr	r3, [r7, #4]
 810b864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b866:	687b      	ldr	r3, [r7, #4]
 810b868:	6a1b      	ldr	r3, [r3, #32]
 810b86a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b86c:	687b      	ldr	r3, [r7, #4]
 810b86e:	685b      	ldr	r3, [r3, #4]
 810b870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810b872:	687b      	ldr	r3, [r7, #4]
 810b874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810b878:	68fb      	ldr	r3, [r7, #12]
 810b87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810b87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810b880:	683b      	ldr	r3, [r7, #0]
 810b882:	681b      	ldr	r3, [r3, #0]
 810b884:	68fa      	ldr	r2, [r7, #12]
 810b886:	4313      	orrs	r3, r2
 810b888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810b88a:	693b      	ldr	r3, [r7, #16]
 810b88c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810b890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810b892:	683b      	ldr	r3, [r7, #0]
 810b894:	689b      	ldr	r3, [r3, #8]
 810b896:	041b      	lsls	r3, r3, #16
 810b898:	693a      	ldr	r2, [r7, #16]
 810b89a:	4313      	orrs	r3, r2
 810b89c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b89e:	687b      	ldr	r3, [r7, #4]
 810b8a0:	4a17      	ldr	r2, [pc, #92]	; (810b900 <TIM_OC5_SetConfig+0xb0>)
 810b8a2:	4293      	cmp	r3, r2
 810b8a4:	d00f      	beq.n	810b8c6 <TIM_OC5_SetConfig+0x76>
 810b8a6:	687b      	ldr	r3, [r7, #4]
 810b8a8:	4a16      	ldr	r2, [pc, #88]	; (810b904 <TIM_OC5_SetConfig+0xb4>)
 810b8aa:	4293      	cmp	r3, r2
 810b8ac:	d00b      	beq.n	810b8c6 <TIM_OC5_SetConfig+0x76>
 810b8ae:	687b      	ldr	r3, [r7, #4]
 810b8b0:	4a15      	ldr	r2, [pc, #84]	; (810b908 <TIM_OC5_SetConfig+0xb8>)
 810b8b2:	4293      	cmp	r3, r2
 810b8b4:	d007      	beq.n	810b8c6 <TIM_OC5_SetConfig+0x76>
 810b8b6:	687b      	ldr	r3, [r7, #4]
 810b8b8:	4a14      	ldr	r2, [pc, #80]	; (810b90c <TIM_OC5_SetConfig+0xbc>)
 810b8ba:	4293      	cmp	r3, r2
 810b8bc:	d003      	beq.n	810b8c6 <TIM_OC5_SetConfig+0x76>
 810b8be:	687b      	ldr	r3, [r7, #4]
 810b8c0:	4a13      	ldr	r2, [pc, #76]	; (810b910 <TIM_OC5_SetConfig+0xc0>)
 810b8c2:	4293      	cmp	r3, r2
 810b8c4:	d109      	bne.n	810b8da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810b8c6:	697b      	ldr	r3, [r7, #20]
 810b8c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810b8cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810b8ce:	683b      	ldr	r3, [r7, #0]
 810b8d0:	695b      	ldr	r3, [r3, #20]
 810b8d2:	021b      	lsls	r3, r3, #8
 810b8d4:	697a      	ldr	r2, [r7, #20]
 810b8d6:	4313      	orrs	r3, r2
 810b8d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b8da:	687b      	ldr	r3, [r7, #4]
 810b8dc:	697a      	ldr	r2, [r7, #20]
 810b8de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810b8e0:	687b      	ldr	r3, [r7, #4]
 810b8e2:	68fa      	ldr	r2, [r7, #12]
 810b8e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810b8e6:	683b      	ldr	r3, [r7, #0]
 810b8e8:	685a      	ldr	r2, [r3, #4]
 810b8ea:	687b      	ldr	r3, [r7, #4]
 810b8ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b8ee:	687b      	ldr	r3, [r7, #4]
 810b8f0:	693a      	ldr	r2, [r7, #16]
 810b8f2:	621a      	str	r2, [r3, #32]
}
 810b8f4:	bf00      	nop
 810b8f6:	371c      	adds	r7, #28
 810b8f8:	46bd      	mov	sp, r7
 810b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b8fe:	4770      	bx	lr
 810b900:	40010000 	.word	0x40010000
 810b904:	40010400 	.word	0x40010400
 810b908:	40014000 	.word	0x40014000
 810b90c:	40014400 	.word	0x40014400
 810b910:	40014800 	.word	0x40014800

0810b914 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 810b914:	b480      	push	{r7}
 810b916:	b087      	sub	sp, #28
 810b918:	af00      	add	r7, sp, #0
 810b91a:	6078      	str	r0, [r7, #4]
 810b91c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810b91e:	687b      	ldr	r3, [r7, #4]
 810b920:	6a1b      	ldr	r3, [r3, #32]
 810b922:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810b926:	687b      	ldr	r3, [r7, #4]
 810b928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810b92a:	687b      	ldr	r3, [r7, #4]
 810b92c:	6a1b      	ldr	r3, [r3, #32]
 810b92e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810b930:	687b      	ldr	r3, [r7, #4]
 810b932:	685b      	ldr	r3, [r3, #4]
 810b934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810b936:	687b      	ldr	r3, [r7, #4]
 810b938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810b93c:	68fb      	ldr	r3, [r7, #12]
 810b93e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810b942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810b944:	683b      	ldr	r3, [r7, #0]
 810b946:	681b      	ldr	r3, [r3, #0]
 810b948:	021b      	lsls	r3, r3, #8
 810b94a:	68fa      	ldr	r2, [r7, #12]
 810b94c:	4313      	orrs	r3, r2
 810b94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810b950:	693b      	ldr	r3, [r7, #16]
 810b952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810b956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810b958:	683b      	ldr	r3, [r7, #0]
 810b95a:	689b      	ldr	r3, [r3, #8]
 810b95c:	051b      	lsls	r3, r3, #20
 810b95e:	693a      	ldr	r2, [r7, #16]
 810b960:	4313      	orrs	r3, r2
 810b962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810b964:	687b      	ldr	r3, [r7, #4]
 810b966:	4a18      	ldr	r2, [pc, #96]	; (810b9c8 <TIM_OC6_SetConfig+0xb4>)
 810b968:	4293      	cmp	r3, r2
 810b96a:	d00f      	beq.n	810b98c <TIM_OC6_SetConfig+0x78>
 810b96c:	687b      	ldr	r3, [r7, #4]
 810b96e:	4a17      	ldr	r2, [pc, #92]	; (810b9cc <TIM_OC6_SetConfig+0xb8>)
 810b970:	4293      	cmp	r3, r2
 810b972:	d00b      	beq.n	810b98c <TIM_OC6_SetConfig+0x78>
 810b974:	687b      	ldr	r3, [r7, #4]
 810b976:	4a16      	ldr	r2, [pc, #88]	; (810b9d0 <TIM_OC6_SetConfig+0xbc>)
 810b978:	4293      	cmp	r3, r2
 810b97a:	d007      	beq.n	810b98c <TIM_OC6_SetConfig+0x78>
 810b97c:	687b      	ldr	r3, [r7, #4]
 810b97e:	4a15      	ldr	r2, [pc, #84]	; (810b9d4 <TIM_OC6_SetConfig+0xc0>)
 810b980:	4293      	cmp	r3, r2
 810b982:	d003      	beq.n	810b98c <TIM_OC6_SetConfig+0x78>
 810b984:	687b      	ldr	r3, [r7, #4]
 810b986:	4a14      	ldr	r2, [pc, #80]	; (810b9d8 <TIM_OC6_SetConfig+0xc4>)
 810b988:	4293      	cmp	r3, r2
 810b98a:	d109      	bne.n	810b9a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810b98c:	697b      	ldr	r3, [r7, #20]
 810b98e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810b992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810b994:	683b      	ldr	r3, [r7, #0]
 810b996:	695b      	ldr	r3, [r3, #20]
 810b998:	029b      	lsls	r3, r3, #10
 810b99a:	697a      	ldr	r2, [r7, #20]
 810b99c:	4313      	orrs	r3, r2
 810b99e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810b9a0:	687b      	ldr	r3, [r7, #4]
 810b9a2:	697a      	ldr	r2, [r7, #20]
 810b9a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810b9a6:	687b      	ldr	r3, [r7, #4]
 810b9a8:	68fa      	ldr	r2, [r7, #12]
 810b9aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810b9ac:	683b      	ldr	r3, [r7, #0]
 810b9ae:	685a      	ldr	r2, [r3, #4]
 810b9b0:	687b      	ldr	r3, [r7, #4]
 810b9b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810b9b4:	687b      	ldr	r3, [r7, #4]
 810b9b6:	693a      	ldr	r2, [r7, #16]
 810b9b8:	621a      	str	r2, [r3, #32]
}
 810b9ba:	bf00      	nop
 810b9bc:	371c      	adds	r7, #28
 810b9be:	46bd      	mov	sp, r7
 810b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9c4:	4770      	bx	lr
 810b9c6:	bf00      	nop
 810b9c8:	40010000 	.word	0x40010000
 810b9cc:	40010400 	.word	0x40010400
 810b9d0:	40014000 	.word	0x40014000
 810b9d4:	40014400 	.word	0x40014400
 810b9d8:	40014800 	.word	0x40014800

0810b9dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810b9dc:	b480      	push	{r7}
 810b9de:	b087      	sub	sp, #28
 810b9e0:	af00      	add	r7, sp, #0
 810b9e2:	60f8      	str	r0, [r7, #12]
 810b9e4:	60b9      	str	r1, [r7, #8]
 810b9e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810b9e8:	68fb      	ldr	r3, [r7, #12]
 810b9ea:	6a1b      	ldr	r3, [r3, #32]
 810b9ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810b9ee:	68fb      	ldr	r3, [r7, #12]
 810b9f0:	6a1b      	ldr	r3, [r3, #32]
 810b9f2:	f023 0201 	bic.w	r2, r3, #1
 810b9f6:	68fb      	ldr	r3, [r7, #12]
 810b9f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810b9fa:	68fb      	ldr	r3, [r7, #12]
 810b9fc:	699b      	ldr	r3, [r3, #24]
 810b9fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810ba00:	693b      	ldr	r3, [r7, #16]
 810ba02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810ba06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810ba08:	687b      	ldr	r3, [r7, #4]
 810ba0a:	011b      	lsls	r3, r3, #4
 810ba0c:	693a      	ldr	r2, [r7, #16]
 810ba0e:	4313      	orrs	r3, r2
 810ba10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810ba12:	697b      	ldr	r3, [r7, #20]
 810ba14:	f023 030a 	bic.w	r3, r3, #10
 810ba18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810ba1a:	697a      	ldr	r2, [r7, #20]
 810ba1c:	68bb      	ldr	r3, [r7, #8]
 810ba1e:	4313      	orrs	r3, r2
 810ba20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810ba22:	68fb      	ldr	r3, [r7, #12]
 810ba24:	693a      	ldr	r2, [r7, #16]
 810ba26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ba28:	68fb      	ldr	r3, [r7, #12]
 810ba2a:	697a      	ldr	r2, [r7, #20]
 810ba2c:	621a      	str	r2, [r3, #32]
}
 810ba2e:	bf00      	nop
 810ba30:	371c      	adds	r7, #28
 810ba32:	46bd      	mov	sp, r7
 810ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba38:	4770      	bx	lr

0810ba3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810ba3a:	b480      	push	{r7}
 810ba3c:	b087      	sub	sp, #28
 810ba3e:	af00      	add	r7, sp, #0
 810ba40:	60f8      	str	r0, [r7, #12]
 810ba42:	60b9      	str	r1, [r7, #8]
 810ba44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810ba46:	68fb      	ldr	r3, [r7, #12]
 810ba48:	6a1b      	ldr	r3, [r3, #32]
 810ba4a:	f023 0210 	bic.w	r2, r3, #16
 810ba4e:	68fb      	ldr	r3, [r7, #12]
 810ba50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810ba52:	68fb      	ldr	r3, [r7, #12]
 810ba54:	699b      	ldr	r3, [r3, #24]
 810ba56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810ba58:	68fb      	ldr	r3, [r7, #12]
 810ba5a:	6a1b      	ldr	r3, [r3, #32]
 810ba5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810ba5e:	697b      	ldr	r3, [r7, #20]
 810ba60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810ba64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810ba66:	687b      	ldr	r3, [r7, #4]
 810ba68:	031b      	lsls	r3, r3, #12
 810ba6a:	697a      	ldr	r2, [r7, #20]
 810ba6c:	4313      	orrs	r3, r2
 810ba6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810ba70:	693b      	ldr	r3, [r7, #16]
 810ba72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810ba76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810ba78:	68bb      	ldr	r3, [r7, #8]
 810ba7a:	011b      	lsls	r3, r3, #4
 810ba7c:	693a      	ldr	r2, [r7, #16]
 810ba7e:	4313      	orrs	r3, r2
 810ba80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810ba82:	68fb      	ldr	r3, [r7, #12]
 810ba84:	697a      	ldr	r2, [r7, #20]
 810ba86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ba88:	68fb      	ldr	r3, [r7, #12]
 810ba8a:	693a      	ldr	r2, [r7, #16]
 810ba8c:	621a      	str	r2, [r3, #32]
}
 810ba8e:	bf00      	nop
 810ba90:	371c      	adds	r7, #28
 810ba92:	46bd      	mov	sp, r7
 810ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba98:	4770      	bx	lr

0810ba9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810ba9a:	b480      	push	{r7}
 810ba9c:	b085      	sub	sp, #20
 810ba9e:	af00      	add	r7, sp, #0
 810baa0:	6078      	str	r0, [r7, #4]
 810baa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 810baa4:	687b      	ldr	r3, [r7, #4]
 810baa6:	689b      	ldr	r3, [r3, #8]
 810baa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810baaa:	68fb      	ldr	r3, [r7, #12]
 810baac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810bab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810bab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810bab6:	683a      	ldr	r2, [r7, #0]
 810bab8:	68fb      	ldr	r3, [r7, #12]
 810baba:	4313      	orrs	r3, r2
 810babc:	f043 0307 	orr.w	r3, r3, #7
 810bac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810bac2:	687b      	ldr	r3, [r7, #4]
 810bac4:	68fa      	ldr	r2, [r7, #12]
 810bac6:	609a      	str	r2, [r3, #8]
}
 810bac8:	bf00      	nop
 810baca:	3714      	adds	r7, #20
 810bacc:	46bd      	mov	sp, r7
 810bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bad2:	4770      	bx	lr

0810bad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 810bad4:	b480      	push	{r7}
 810bad6:	b087      	sub	sp, #28
 810bad8:	af00      	add	r7, sp, #0
 810bada:	60f8      	str	r0, [r7, #12]
 810badc:	60b9      	str	r1, [r7, #8]
 810bade:	607a      	str	r2, [r7, #4]
 810bae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810bae2:	68fb      	ldr	r3, [r7, #12]
 810bae4:	689b      	ldr	r3, [r3, #8]
 810bae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810bae8:	697b      	ldr	r3, [r7, #20]
 810baea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810baee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810baf0:	683b      	ldr	r3, [r7, #0]
 810baf2:	021a      	lsls	r2, r3, #8
 810baf4:	687b      	ldr	r3, [r7, #4]
 810baf6:	431a      	orrs	r2, r3
 810baf8:	68bb      	ldr	r3, [r7, #8]
 810bafa:	4313      	orrs	r3, r2
 810bafc:	697a      	ldr	r2, [r7, #20]
 810bafe:	4313      	orrs	r3, r2
 810bb00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810bb02:	68fb      	ldr	r3, [r7, #12]
 810bb04:	697a      	ldr	r2, [r7, #20]
 810bb06:	609a      	str	r2, [r3, #8]
}
 810bb08:	bf00      	nop
 810bb0a:	371c      	adds	r7, #28
 810bb0c:	46bd      	mov	sp, r7
 810bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb12:	4770      	bx	lr

0810bb14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810bb14:	b480      	push	{r7}
 810bb16:	b085      	sub	sp, #20
 810bb18:	af00      	add	r7, sp, #0
 810bb1a:	6078      	str	r0, [r7, #4]
 810bb1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810bb1e:	687b      	ldr	r3, [r7, #4]
 810bb20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810bb24:	2b01      	cmp	r3, #1
 810bb26:	d101      	bne.n	810bb2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810bb28:	2302      	movs	r3, #2
 810bb2a:	e068      	b.n	810bbfe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 810bb2c:	687b      	ldr	r3, [r7, #4]
 810bb2e:	2201      	movs	r2, #1
 810bb30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810bb34:	687b      	ldr	r3, [r7, #4]
 810bb36:	2202      	movs	r2, #2
 810bb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810bb3c:	687b      	ldr	r3, [r7, #4]
 810bb3e:	681b      	ldr	r3, [r3, #0]
 810bb40:	685b      	ldr	r3, [r3, #4]
 810bb42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810bb44:	687b      	ldr	r3, [r7, #4]
 810bb46:	681b      	ldr	r3, [r3, #0]
 810bb48:	689b      	ldr	r3, [r3, #8]
 810bb4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810bb4c:	687b      	ldr	r3, [r7, #4]
 810bb4e:	681b      	ldr	r3, [r3, #0]
 810bb50:	4a2e      	ldr	r2, [pc, #184]	; (810bc0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810bb52:	4293      	cmp	r3, r2
 810bb54:	d004      	beq.n	810bb60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810bb56:	687b      	ldr	r3, [r7, #4]
 810bb58:	681b      	ldr	r3, [r3, #0]
 810bb5a:	4a2d      	ldr	r2, [pc, #180]	; (810bc10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810bb5c:	4293      	cmp	r3, r2
 810bb5e:	d108      	bne.n	810bb72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810bb60:	68fb      	ldr	r3, [r7, #12]
 810bb62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810bb66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810bb68:	683b      	ldr	r3, [r7, #0]
 810bb6a:	685b      	ldr	r3, [r3, #4]
 810bb6c:	68fa      	ldr	r2, [r7, #12]
 810bb6e:	4313      	orrs	r3, r2
 810bb70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810bb72:	68fb      	ldr	r3, [r7, #12]
 810bb74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810bb78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810bb7a:	683b      	ldr	r3, [r7, #0]
 810bb7c:	681b      	ldr	r3, [r3, #0]
 810bb7e:	68fa      	ldr	r2, [r7, #12]
 810bb80:	4313      	orrs	r3, r2
 810bb82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810bb84:	687b      	ldr	r3, [r7, #4]
 810bb86:	681b      	ldr	r3, [r3, #0]
 810bb88:	68fa      	ldr	r2, [r7, #12]
 810bb8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810bb8c:	687b      	ldr	r3, [r7, #4]
 810bb8e:	681b      	ldr	r3, [r3, #0]
 810bb90:	4a1e      	ldr	r2, [pc, #120]	; (810bc0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810bb92:	4293      	cmp	r3, r2
 810bb94:	d01d      	beq.n	810bbd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810bb96:	687b      	ldr	r3, [r7, #4]
 810bb98:	681b      	ldr	r3, [r3, #0]
 810bb9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810bb9e:	d018      	beq.n	810bbd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810bba0:	687b      	ldr	r3, [r7, #4]
 810bba2:	681b      	ldr	r3, [r3, #0]
 810bba4:	4a1b      	ldr	r2, [pc, #108]	; (810bc14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810bba6:	4293      	cmp	r3, r2
 810bba8:	d013      	beq.n	810bbd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810bbaa:	687b      	ldr	r3, [r7, #4]
 810bbac:	681b      	ldr	r3, [r3, #0]
 810bbae:	4a1a      	ldr	r2, [pc, #104]	; (810bc18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810bbb0:	4293      	cmp	r3, r2
 810bbb2:	d00e      	beq.n	810bbd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810bbb4:	687b      	ldr	r3, [r7, #4]
 810bbb6:	681b      	ldr	r3, [r3, #0]
 810bbb8:	4a18      	ldr	r2, [pc, #96]	; (810bc1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810bbba:	4293      	cmp	r3, r2
 810bbbc:	d009      	beq.n	810bbd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810bbbe:	687b      	ldr	r3, [r7, #4]
 810bbc0:	681b      	ldr	r3, [r3, #0]
 810bbc2:	4a13      	ldr	r2, [pc, #76]	; (810bc10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810bbc4:	4293      	cmp	r3, r2
 810bbc6:	d004      	beq.n	810bbd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810bbc8:	687b      	ldr	r3, [r7, #4]
 810bbca:	681b      	ldr	r3, [r3, #0]
 810bbcc:	4a14      	ldr	r2, [pc, #80]	; (810bc20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810bbce:	4293      	cmp	r3, r2
 810bbd0:	d10c      	bne.n	810bbec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810bbd2:	68bb      	ldr	r3, [r7, #8]
 810bbd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810bbd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810bbda:	683b      	ldr	r3, [r7, #0]
 810bbdc:	689b      	ldr	r3, [r3, #8]
 810bbde:	68ba      	ldr	r2, [r7, #8]
 810bbe0:	4313      	orrs	r3, r2
 810bbe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810bbe4:	687b      	ldr	r3, [r7, #4]
 810bbe6:	681b      	ldr	r3, [r3, #0]
 810bbe8:	68ba      	ldr	r2, [r7, #8]
 810bbea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810bbec:	687b      	ldr	r3, [r7, #4]
 810bbee:	2201      	movs	r2, #1
 810bbf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810bbf4:	687b      	ldr	r3, [r7, #4]
 810bbf6:	2200      	movs	r2, #0
 810bbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810bbfc:	2300      	movs	r3, #0
}
 810bbfe:	4618      	mov	r0, r3
 810bc00:	3714      	adds	r7, #20
 810bc02:	46bd      	mov	sp, r7
 810bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc08:	4770      	bx	lr
 810bc0a:	bf00      	nop
 810bc0c:	40010000 	.word	0x40010000
 810bc10:	40010400 	.word	0x40010400
 810bc14:	40000400 	.word	0x40000400
 810bc18:	40000800 	.word	0x40000800
 810bc1c:	40000c00 	.word	0x40000c00
 810bc20:	40001800 	.word	0x40001800

0810bc24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810bc24:	b480      	push	{r7}
 810bc26:	b085      	sub	sp, #20
 810bc28:	af00      	add	r7, sp, #0
 810bc2a:	6078      	str	r0, [r7, #4]
 810bc2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810bc2e:	2300      	movs	r3, #0
 810bc30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810bc32:	687b      	ldr	r3, [r7, #4]
 810bc34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810bc38:	2b01      	cmp	r3, #1
 810bc3a:	d101      	bne.n	810bc40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810bc3c:	2302      	movs	r3, #2
 810bc3e:	e065      	b.n	810bd0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810bc40:	687b      	ldr	r3, [r7, #4]
 810bc42:	2201      	movs	r2, #1
 810bc44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810bc48:	68fb      	ldr	r3, [r7, #12]
 810bc4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810bc4e:	683b      	ldr	r3, [r7, #0]
 810bc50:	68db      	ldr	r3, [r3, #12]
 810bc52:	4313      	orrs	r3, r2
 810bc54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810bc56:	68fb      	ldr	r3, [r7, #12]
 810bc58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810bc5c:	683b      	ldr	r3, [r7, #0]
 810bc5e:	689b      	ldr	r3, [r3, #8]
 810bc60:	4313      	orrs	r3, r2
 810bc62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810bc64:	68fb      	ldr	r3, [r7, #12]
 810bc66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810bc6a:	683b      	ldr	r3, [r7, #0]
 810bc6c:	685b      	ldr	r3, [r3, #4]
 810bc6e:	4313      	orrs	r3, r2
 810bc70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810bc72:	68fb      	ldr	r3, [r7, #12]
 810bc74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810bc78:	683b      	ldr	r3, [r7, #0]
 810bc7a:	681b      	ldr	r3, [r3, #0]
 810bc7c:	4313      	orrs	r3, r2
 810bc7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810bc80:	68fb      	ldr	r3, [r7, #12]
 810bc82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810bc86:	683b      	ldr	r3, [r7, #0]
 810bc88:	691b      	ldr	r3, [r3, #16]
 810bc8a:	4313      	orrs	r3, r2
 810bc8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810bc8e:	68fb      	ldr	r3, [r7, #12]
 810bc90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810bc94:	683b      	ldr	r3, [r7, #0]
 810bc96:	695b      	ldr	r3, [r3, #20]
 810bc98:	4313      	orrs	r3, r2
 810bc9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810bc9c:	68fb      	ldr	r3, [r7, #12]
 810bc9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810bca2:	683b      	ldr	r3, [r7, #0]
 810bca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bca6:	4313      	orrs	r3, r2
 810bca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810bcaa:	68fb      	ldr	r3, [r7, #12]
 810bcac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810bcb0:	683b      	ldr	r3, [r7, #0]
 810bcb2:	699b      	ldr	r3, [r3, #24]
 810bcb4:	041b      	lsls	r3, r3, #16
 810bcb6:	4313      	orrs	r3, r2
 810bcb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810bcba:	687b      	ldr	r3, [r7, #4]
 810bcbc:	681b      	ldr	r3, [r3, #0]
 810bcbe:	4a16      	ldr	r2, [pc, #88]	; (810bd18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810bcc0:	4293      	cmp	r3, r2
 810bcc2:	d004      	beq.n	810bcce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810bcc4:	687b      	ldr	r3, [r7, #4]
 810bcc6:	681b      	ldr	r3, [r3, #0]
 810bcc8:	4a14      	ldr	r2, [pc, #80]	; (810bd1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810bcca:	4293      	cmp	r3, r2
 810bccc:	d115      	bne.n	810bcfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810bcce:	68fb      	ldr	r3, [r7, #12]
 810bcd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810bcd4:	683b      	ldr	r3, [r7, #0]
 810bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810bcd8:	051b      	lsls	r3, r3, #20
 810bcda:	4313      	orrs	r3, r2
 810bcdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810bcde:	68fb      	ldr	r3, [r7, #12]
 810bce0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810bce4:	683b      	ldr	r3, [r7, #0]
 810bce6:	69db      	ldr	r3, [r3, #28]
 810bce8:	4313      	orrs	r3, r2
 810bcea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810bcec:	68fb      	ldr	r3, [r7, #12]
 810bcee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810bcf2:	683b      	ldr	r3, [r7, #0]
 810bcf4:	6a1b      	ldr	r3, [r3, #32]
 810bcf6:	4313      	orrs	r3, r2
 810bcf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810bcfa:	687b      	ldr	r3, [r7, #4]
 810bcfc:	681b      	ldr	r3, [r3, #0]
 810bcfe:	68fa      	ldr	r2, [r7, #12]
 810bd00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810bd02:	687b      	ldr	r3, [r7, #4]
 810bd04:	2200      	movs	r2, #0
 810bd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810bd0a:	2300      	movs	r3, #0
}
 810bd0c:	4618      	mov	r0, r3
 810bd0e:	3714      	adds	r7, #20
 810bd10:	46bd      	mov	sp, r7
 810bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd16:	4770      	bx	lr
 810bd18:	40010000 	.word	0x40010000
 810bd1c:	40010400 	.word	0x40010400

0810bd20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810bd20:	b480      	push	{r7}
 810bd22:	b083      	sub	sp, #12
 810bd24:	af00      	add	r7, sp, #0
 810bd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810bd28:	bf00      	nop
 810bd2a:	370c      	adds	r7, #12
 810bd2c:	46bd      	mov	sp, r7
 810bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd32:	4770      	bx	lr

0810bd34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810bd34:	b480      	push	{r7}
 810bd36:	b083      	sub	sp, #12
 810bd38:	af00      	add	r7, sp, #0
 810bd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810bd3c:	bf00      	nop
 810bd3e:	370c      	adds	r7, #12
 810bd40:	46bd      	mov	sp, r7
 810bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd46:	4770      	bx	lr

0810bd48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810bd48:	b480      	push	{r7}
 810bd4a:	b083      	sub	sp, #12
 810bd4c:	af00      	add	r7, sp, #0
 810bd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810bd50:	bf00      	nop
 810bd52:	370c      	adds	r7, #12
 810bd54:	46bd      	mov	sp, r7
 810bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd5a:	4770      	bx	lr

0810bd5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810bd5c:	b580      	push	{r7, lr}
 810bd5e:	b082      	sub	sp, #8
 810bd60:	af00      	add	r7, sp, #0
 810bd62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810bd64:	687b      	ldr	r3, [r7, #4]
 810bd66:	2b00      	cmp	r3, #0
 810bd68:	d101      	bne.n	810bd6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810bd6a:	2301      	movs	r3, #1
 810bd6c:	e042      	b.n	810bdf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810bd6e:	687b      	ldr	r3, [r7, #4]
 810bd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810bd74:	2b00      	cmp	r3, #0
 810bd76:	d106      	bne.n	810bd86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810bd78:	687b      	ldr	r3, [r7, #4]
 810bd7a:	2200      	movs	r2, #0
 810bd7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810bd80:	6878      	ldr	r0, [r7, #4]
 810bd82:	f7f6 f99d 	bl	81020c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810bd86:	687b      	ldr	r3, [r7, #4]
 810bd88:	2224      	movs	r2, #36	; 0x24
 810bd8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810bd8e:	687b      	ldr	r3, [r7, #4]
 810bd90:	681b      	ldr	r3, [r3, #0]
 810bd92:	681a      	ldr	r2, [r3, #0]
 810bd94:	687b      	ldr	r3, [r7, #4]
 810bd96:	681b      	ldr	r3, [r3, #0]
 810bd98:	f022 0201 	bic.w	r2, r2, #1
 810bd9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810bd9e:	6878      	ldr	r0, [r7, #4]
 810bda0:	f000 f82c 	bl	810bdfc <UART_SetConfig>
 810bda4:	4603      	mov	r3, r0
 810bda6:	2b01      	cmp	r3, #1
 810bda8:	d101      	bne.n	810bdae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810bdaa:	2301      	movs	r3, #1
 810bdac:	e022      	b.n	810bdf4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810bdae:	687b      	ldr	r3, [r7, #4]
 810bdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810bdb2:	2b00      	cmp	r3, #0
 810bdb4:	d002      	beq.n	810bdbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810bdb6:	6878      	ldr	r0, [r7, #4]
 810bdb8:	f000 fd80 	bl	810c8bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810bdbc:	687b      	ldr	r3, [r7, #4]
 810bdbe:	681b      	ldr	r3, [r3, #0]
 810bdc0:	685a      	ldr	r2, [r3, #4]
 810bdc2:	687b      	ldr	r3, [r7, #4]
 810bdc4:	681b      	ldr	r3, [r3, #0]
 810bdc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810bdca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810bdcc:	687b      	ldr	r3, [r7, #4]
 810bdce:	681b      	ldr	r3, [r3, #0]
 810bdd0:	689a      	ldr	r2, [r3, #8]
 810bdd2:	687b      	ldr	r3, [r7, #4]
 810bdd4:	681b      	ldr	r3, [r3, #0]
 810bdd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810bdda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810bddc:	687b      	ldr	r3, [r7, #4]
 810bdde:	681b      	ldr	r3, [r3, #0]
 810bde0:	681a      	ldr	r2, [r3, #0]
 810bde2:	687b      	ldr	r3, [r7, #4]
 810bde4:	681b      	ldr	r3, [r3, #0]
 810bde6:	f042 0201 	orr.w	r2, r2, #1
 810bdea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810bdec:	6878      	ldr	r0, [r7, #4]
 810bdee:	f000 fe07 	bl	810ca00 <UART_CheckIdleState>
 810bdf2:	4603      	mov	r3, r0
}
 810bdf4:	4618      	mov	r0, r3
 810bdf6:	3708      	adds	r7, #8
 810bdf8:	46bd      	mov	sp, r7
 810bdfa:	bd80      	pop	{r7, pc}

0810bdfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810bdfc:	b5b0      	push	{r4, r5, r7, lr}
 810bdfe:	b08e      	sub	sp, #56	; 0x38
 810be00:	af00      	add	r7, sp, #0
 810be02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810be04:	2300      	movs	r3, #0
 810be06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810be0a:	687b      	ldr	r3, [r7, #4]
 810be0c:	689a      	ldr	r2, [r3, #8]
 810be0e:	687b      	ldr	r3, [r7, #4]
 810be10:	691b      	ldr	r3, [r3, #16]
 810be12:	431a      	orrs	r2, r3
 810be14:	687b      	ldr	r3, [r7, #4]
 810be16:	695b      	ldr	r3, [r3, #20]
 810be18:	431a      	orrs	r2, r3
 810be1a:	687b      	ldr	r3, [r7, #4]
 810be1c:	69db      	ldr	r3, [r3, #28]
 810be1e:	4313      	orrs	r3, r2
 810be20:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810be22:	687b      	ldr	r3, [r7, #4]
 810be24:	681b      	ldr	r3, [r3, #0]
 810be26:	681a      	ldr	r2, [r3, #0]
 810be28:	4bc0      	ldr	r3, [pc, #768]	; (810c12c <UART_SetConfig+0x330>)
 810be2a:	4013      	ands	r3, r2
 810be2c:	687a      	ldr	r2, [r7, #4]
 810be2e:	6812      	ldr	r2, [r2, #0]
 810be30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810be32:	430b      	orrs	r3, r1
 810be34:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810be36:	687b      	ldr	r3, [r7, #4]
 810be38:	681b      	ldr	r3, [r3, #0]
 810be3a:	685b      	ldr	r3, [r3, #4]
 810be3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810be40:	687b      	ldr	r3, [r7, #4]
 810be42:	68da      	ldr	r2, [r3, #12]
 810be44:	687b      	ldr	r3, [r7, #4]
 810be46:	681b      	ldr	r3, [r3, #0]
 810be48:	430a      	orrs	r2, r1
 810be4a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810be4c:	687b      	ldr	r3, [r7, #4]
 810be4e:	699b      	ldr	r3, [r3, #24]
 810be50:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810be52:	687b      	ldr	r3, [r7, #4]
 810be54:	681b      	ldr	r3, [r3, #0]
 810be56:	4ab6      	ldr	r2, [pc, #728]	; (810c130 <UART_SetConfig+0x334>)
 810be58:	4293      	cmp	r3, r2
 810be5a:	d004      	beq.n	810be66 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810be5c:	687b      	ldr	r3, [r7, #4]
 810be5e:	6a1b      	ldr	r3, [r3, #32]
 810be60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810be62:	4313      	orrs	r3, r2
 810be64:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810be66:	687b      	ldr	r3, [r7, #4]
 810be68:	681b      	ldr	r3, [r3, #0]
 810be6a:	689b      	ldr	r3, [r3, #8]
 810be6c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810be70:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810be74:	687a      	ldr	r2, [r7, #4]
 810be76:	6812      	ldr	r2, [r2, #0]
 810be78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810be7a:	430b      	orrs	r3, r1
 810be7c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810be7e:	687b      	ldr	r3, [r7, #4]
 810be80:	681b      	ldr	r3, [r3, #0]
 810be82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810be84:	f023 010f 	bic.w	r1, r3, #15
 810be88:	687b      	ldr	r3, [r7, #4]
 810be8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810be8c:	687b      	ldr	r3, [r7, #4]
 810be8e:	681b      	ldr	r3, [r3, #0]
 810be90:	430a      	orrs	r2, r1
 810be92:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810be94:	687b      	ldr	r3, [r7, #4]
 810be96:	681b      	ldr	r3, [r3, #0]
 810be98:	4aa6      	ldr	r2, [pc, #664]	; (810c134 <UART_SetConfig+0x338>)
 810be9a:	4293      	cmp	r3, r2
 810be9c:	d176      	bne.n	810bf8c <UART_SetConfig+0x190>
 810be9e:	4ba6      	ldr	r3, [pc, #664]	; (810c138 <UART_SetConfig+0x33c>)
 810bea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810bea6:	2b28      	cmp	r3, #40	; 0x28
 810bea8:	d86c      	bhi.n	810bf84 <UART_SetConfig+0x188>
 810beaa:	a201      	add	r2, pc, #4	; (adr r2, 810beb0 <UART_SetConfig+0xb4>)
 810beac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810beb0:	0810bf55 	.word	0x0810bf55
 810beb4:	0810bf85 	.word	0x0810bf85
 810beb8:	0810bf85 	.word	0x0810bf85
 810bebc:	0810bf85 	.word	0x0810bf85
 810bec0:	0810bf85 	.word	0x0810bf85
 810bec4:	0810bf85 	.word	0x0810bf85
 810bec8:	0810bf85 	.word	0x0810bf85
 810becc:	0810bf85 	.word	0x0810bf85
 810bed0:	0810bf5d 	.word	0x0810bf5d
 810bed4:	0810bf85 	.word	0x0810bf85
 810bed8:	0810bf85 	.word	0x0810bf85
 810bedc:	0810bf85 	.word	0x0810bf85
 810bee0:	0810bf85 	.word	0x0810bf85
 810bee4:	0810bf85 	.word	0x0810bf85
 810bee8:	0810bf85 	.word	0x0810bf85
 810beec:	0810bf85 	.word	0x0810bf85
 810bef0:	0810bf65 	.word	0x0810bf65
 810bef4:	0810bf85 	.word	0x0810bf85
 810bef8:	0810bf85 	.word	0x0810bf85
 810befc:	0810bf85 	.word	0x0810bf85
 810bf00:	0810bf85 	.word	0x0810bf85
 810bf04:	0810bf85 	.word	0x0810bf85
 810bf08:	0810bf85 	.word	0x0810bf85
 810bf0c:	0810bf85 	.word	0x0810bf85
 810bf10:	0810bf6d 	.word	0x0810bf6d
 810bf14:	0810bf85 	.word	0x0810bf85
 810bf18:	0810bf85 	.word	0x0810bf85
 810bf1c:	0810bf85 	.word	0x0810bf85
 810bf20:	0810bf85 	.word	0x0810bf85
 810bf24:	0810bf85 	.word	0x0810bf85
 810bf28:	0810bf85 	.word	0x0810bf85
 810bf2c:	0810bf85 	.word	0x0810bf85
 810bf30:	0810bf75 	.word	0x0810bf75
 810bf34:	0810bf85 	.word	0x0810bf85
 810bf38:	0810bf85 	.word	0x0810bf85
 810bf3c:	0810bf85 	.word	0x0810bf85
 810bf40:	0810bf85 	.word	0x0810bf85
 810bf44:	0810bf85 	.word	0x0810bf85
 810bf48:	0810bf85 	.word	0x0810bf85
 810bf4c:	0810bf85 	.word	0x0810bf85
 810bf50:	0810bf7d 	.word	0x0810bf7d
 810bf54:	2301      	movs	r3, #1
 810bf56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bf5a:	e220      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bf5c:	2304      	movs	r3, #4
 810bf5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bf62:	e21c      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bf64:	2308      	movs	r3, #8
 810bf66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bf6a:	e218      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bf6c:	2310      	movs	r3, #16
 810bf6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bf72:	e214      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bf74:	2320      	movs	r3, #32
 810bf76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bf7a:	e210      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bf7c:	2340      	movs	r3, #64	; 0x40
 810bf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bf82:	e20c      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bf84:	2380      	movs	r3, #128	; 0x80
 810bf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bf8a:	e208      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bf8c:	687b      	ldr	r3, [r7, #4]
 810bf8e:	681b      	ldr	r3, [r3, #0]
 810bf90:	4a6a      	ldr	r2, [pc, #424]	; (810c13c <UART_SetConfig+0x340>)
 810bf92:	4293      	cmp	r3, r2
 810bf94:	d130      	bne.n	810bff8 <UART_SetConfig+0x1fc>
 810bf96:	4b68      	ldr	r3, [pc, #416]	; (810c138 <UART_SetConfig+0x33c>)
 810bf98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810bf9a:	f003 0307 	and.w	r3, r3, #7
 810bf9e:	2b05      	cmp	r3, #5
 810bfa0:	d826      	bhi.n	810bff0 <UART_SetConfig+0x1f4>
 810bfa2:	a201      	add	r2, pc, #4	; (adr r2, 810bfa8 <UART_SetConfig+0x1ac>)
 810bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bfa8:	0810bfc1 	.word	0x0810bfc1
 810bfac:	0810bfc9 	.word	0x0810bfc9
 810bfb0:	0810bfd1 	.word	0x0810bfd1
 810bfb4:	0810bfd9 	.word	0x0810bfd9
 810bfb8:	0810bfe1 	.word	0x0810bfe1
 810bfbc:	0810bfe9 	.word	0x0810bfe9
 810bfc0:	2300      	movs	r3, #0
 810bfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bfc6:	e1ea      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bfc8:	2304      	movs	r3, #4
 810bfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bfce:	e1e6      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bfd0:	2308      	movs	r3, #8
 810bfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bfd6:	e1e2      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bfd8:	2310      	movs	r3, #16
 810bfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bfde:	e1de      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bfe0:	2320      	movs	r3, #32
 810bfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bfe6:	e1da      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bfe8:	2340      	movs	r3, #64	; 0x40
 810bfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bfee:	e1d6      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bff0:	2380      	movs	r3, #128	; 0x80
 810bff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810bff6:	e1d2      	b.n	810c39e <UART_SetConfig+0x5a2>
 810bff8:	687b      	ldr	r3, [r7, #4]
 810bffa:	681b      	ldr	r3, [r3, #0]
 810bffc:	4a50      	ldr	r2, [pc, #320]	; (810c140 <UART_SetConfig+0x344>)
 810bffe:	4293      	cmp	r3, r2
 810c000:	d130      	bne.n	810c064 <UART_SetConfig+0x268>
 810c002:	4b4d      	ldr	r3, [pc, #308]	; (810c138 <UART_SetConfig+0x33c>)
 810c004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c006:	f003 0307 	and.w	r3, r3, #7
 810c00a:	2b05      	cmp	r3, #5
 810c00c:	d826      	bhi.n	810c05c <UART_SetConfig+0x260>
 810c00e:	a201      	add	r2, pc, #4	; (adr r2, 810c014 <UART_SetConfig+0x218>)
 810c010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c014:	0810c02d 	.word	0x0810c02d
 810c018:	0810c035 	.word	0x0810c035
 810c01c:	0810c03d 	.word	0x0810c03d
 810c020:	0810c045 	.word	0x0810c045
 810c024:	0810c04d 	.word	0x0810c04d
 810c028:	0810c055 	.word	0x0810c055
 810c02c:	2300      	movs	r3, #0
 810c02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c032:	e1b4      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c034:	2304      	movs	r3, #4
 810c036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c03a:	e1b0      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c03c:	2308      	movs	r3, #8
 810c03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c042:	e1ac      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c044:	2310      	movs	r3, #16
 810c046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c04a:	e1a8      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c04c:	2320      	movs	r3, #32
 810c04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c052:	e1a4      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c054:	2340      	movs	r3, #64	; 0x40
 810c056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c05a:	e1a0      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c05c:	2380      	movs	r3, #128	; 0x80
 810c05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c062:	e19c      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c064:	687b      	ldr	r3, [r7, #4]
 810c066:	681b      	ldr	r3, [r3, #0]
 810c068:	4a36      	ldr	r2, [pc, #216]	; (810c144 <UART_SetConfig+0x348>)
 810c06a:	4293      	cmp	r3, r2
 810c06c:	d130      	bne.n	810c0d0 <UART_SetConfig+0x2d4>
 810c06e:	4b32      	ldr	r3, [pc, #200]	; (810c138 <UART_SetConfig+0x33c>)
 810c070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c072:	f003 0307 	and.w	r3, r3, #7
 810c076:	2b05      	cmp	r3, #5
 810c078:	d826      	bhi.n	810c0c8 <UART_SetConfig+0x2cc>
 810c07a:	a201      	add	r2, pc, #4	; (adr r2, 810c080 <UART_SetConfig+0x284>)
 810c07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c080:	0810c099 	.word	0x0810c099
 810c084:	0810c0a1 	.word	0x0810c0a1
 810c088:	0810c0a9 	.word	0x0810c0a9
 810c08c:	0810c0b1 	.word	0x0810c0b1
 810c090:	0810c0b9 	.word	0x0810c0b9
 810c094:	0810c0c1 	.word	0x0810c0c1
 810c098:	2300      	movs	r3, #0
 810c09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c09e:	e17e      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c0a0:	2304      	movs	r3, #4
 810c0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c0a6:	e17a      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c0a8:	2308      	movs	r3, #8
 810c0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c0ae:	e176      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c0b0:	2310      	movs	r3, #16
 810c0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c0b6:	e172      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c0b8:	2320      	movs	r3, #32
 810c0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c0be:	e16e      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c0c0:	2340      	movs	r3, #64	; 0x40
 810c0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c0c6:	e16a      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c0c8:	2380      	movs	r3, #128	; 0x80
 810c0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c0ce:	e166      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c0d0:	687b      	ldr	r3, [r7, #4]
 810c0d2:	681b      	ldr	r3, [r3, #0]
 810c0d4:	4a1c      	ldr	r2, [pc, #112]	; (810c148 <UART_SetConfig+0x34c>)
 810c0d6:	4293      	cmp	r3, r2
 810c0d8:	d140      	bne.n	810c15c <UART_SetConfig+0x360>
 810c0da:	4b17      	ldr	r3, [pc, #92]	; (810c138 <UART_SetConfig+0x33c>)
 810c0dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c0de:	f003 0307 	and.w	r3, r3, #7
 810c0e2:	2b05      	cmp	r3, #5
 810c0e4:	d836      	bhi.n	810c154 <UART_SetConfig+0x358>
 810c0e6:	a201      	add	r2, pc, #4	; (adr r2, 810c0ec <UART_SetConfig+0x2f0>)
 810c0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c0ec:	0810c105 	.word	0x0810c105
 810c0f0:	0810c10d 	.word	0x0810c10d
 810c0f4:	0810c115 	.word	0x0810c115
 810c0f8:	0810c11d 	.word	0x0810c11d
 810c0fc:	0810c125 	.word	0x0810c125
 810c100:	0810c14d 	.word	0x0810c14d
 810c104:	2300      	movs	r3, #0
 810c106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c10a:	e148      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c10c:	2304      	movs	r3, #4
 810c10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c112:	e144      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c114:	2308      	movs	r3, #8
 810c116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c11a:	e140      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c11c:	2310      	movs	r3, #16
 810c11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c122:	e13c      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c124:	2320      	movs	r3, #32
 810c126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c12a:	e138      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c12c:	cfff69f3 	.word	0xcfff69f3
 810c130:	58000c00 	.word	0x58000c00
 810c134:	40011000 	.word	0x40011000
 810c138:	58024400 	.word	0x58024400
 810c13c:	40004400 	.word	0x40004400
 810c140:	40004800 	.word	0x40004800
 810c144:	40004c00 	.word	0x40004c00
 810c148:	40005000 	.word	0x40005000
 810c14c:	2340      	movs	r3, #64	; 0x40
 810c14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c152:	e124      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c154:	2380      	movs	r3, #128	; 0x80
 810c156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c15a:	e120      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c15c:	687b      	ldr	r3, [r7, #4]
 810c15e:	681b      	ldr	r3, [r3, #0]
 810c160:	4acc      	ldr	r2, [pc, #816]	; (810c494 <UART_SetConfig+0x698>)
 810c162:	4293      	cmp	r3, r2
 810c164:	d176      	bne.n	810c254 <UART_SetConfig+0x458>
 810c166:	4bcc      	ldr	r3, [pc, #816]	; (810c498 <UART_SetConfig+0x69c>)
 810c168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c16a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810c16e:	2b28      	cmp	r3, #40	; 0x28
 810c170:	d86c      	bhi.n	810c24c <UART_SetConfig+0x450>
 810c172:	a201      	add	r2, pc, #4	; (adr r2, 810c178 <UART_SetConfig+0x37c>)
 810c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c178:	0810c21d 	.word	0x0810c21d
 810c17c:	0810c24d 	.word	0x0810c24d
 810c180:	0810c24d 	.word	0x0810c24d
 810c184:	0810c24d 	.word	0x0810c24d
 810c188:	0810c24d 	.word	0x0810c24d
 810c18c:	0810c24d 	.word	0x0810c24d
 810c190:	0810c24d 	.word	0x0810c24d
 810c194:	0810c24d 	.word	0x0810c24d
 810c198:	0810c225 	.word	0x0810c225
 810c19c:	0810c24d 	.word	0x0810c24d
 810c1a0:	0810c24d 	.word	0x0810c24d
 810c1a4:	0810c24d 	.word	0x0810c24d
 810c1a8:	0810c24d 	.word	0x0810c24d
 810c1ac:	0810c24d 	.word	0x0810c24d
 810c1b0:	0810c24d 	.word	0x0810c24d
 810c1b4:	0810c24d 	.word	0x0810c24d
 810c1b8:	0810c22d 	.word	0x0810c22d
 810c1bc:	0810c24d 	.word	0x0810c24d
 810c1c0:	0810c24d 	.word	0x0810c24d
 810c1c4:	0810c24d 	.word	0x0810c24d
 810c1c8:	0810c24d 	.word	0x0810c24d
 810c1cc:	0810c24d 	.word	0x0810c24d
 810c1d0:	0810c24d 	.word	0x0810c24d
 810c1d4:	0810c24d 	.word	0x0810c24d
 810c1d8:	0810c235 	.word	0x0810c235
 810c1dc:	0810c24d 	.word	0x0810c24d
 810c1e0:	0810c24d 	.word	0x0810c24d
 810c1e4:	0810c24d 	.word	0x0810c24d
 810c1e8:	0810c24d 	.word	0x0810c24d
 810c1ec:	0810c24d 	.word	0x0810c24d
 810c1f0:	0810c24d 	.word	0x0810c24d
 810c1f4:	0810c24d 	.word	0x0810c24d
 810c1f8:	0810c23d 	.word	0x0810c23d
 810c1fc:	0810c24d 	.word	0x0810c24d
 810c200:	0810c24d 	.word	0x0810c24d
 810c204:	0810c24d 	.word	0x0810c24d
 810c208:	0810c24d 	.word	0x0810c24d
 810c20c:	0810c24d 	.word	0x0810c24d
 810c210:	0810c24d 	.word	0x0810c24d
 810c214:	0810c24d 	.word	0x0810c24d
 810c218:	0810c245 	.word	0x0810c245
 810c21c:	2301      	movs	r3, #1
 810c21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c222:	e0bc      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c224:	2304      	movs	r3, #4
 810c226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c22a:	e0b8      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c22c:	2308      	movs	r3, #8
 810c22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c232:	e0b4      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c234:	2310      	movs	r3, #16
 810c236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c23a:	e0b0      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c23c:	2320      	movs	r3, #32
 810c23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c242:	e0ac      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c244:	2340      	movs	r3, #64	; 0x40
 810c246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c24a:	e0a8      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c24c:	2380      	movs	r3, #128	; 0x80
 810c24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c252:	e0a4      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c254:	687b      	ldr	r3, [r7, #4]
 810c256:	681b      	ldr	r3, [r3, #0]
 810c258:	4a90      	ldr	r2, [pc, #576]	; (810c49c <UART_SetConfig+0x6a0>)
 810c25a:	4293      	cmp	r3, r2
 810c25c:	d130      	bne.n	810c2c0 <UART_SetConfig+0x4c4>
 810c25e:	4b8e      	ldr	r3, [pc, #568]	; (810c498 <UART_SetConfig+0x69c>)
 810c260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c262:	f003 0307 	and.w	r3, r3, #7
 810c266:	2b05      	cmp	r3, #5
 810c268:	d826      	bhi.n	810c2b8 <UART_SetConfig+0x4bc>
 810c26a:	a201      	add	r2, pc, #4	; (adr r2, 810c270 <UART_SetConfig+0x474>)
 810c26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c270:	0810c289 	.word	0x0810c289
 810c274:	0810c291 	.word	0x0810c291
 810c278:	0810c299 	.word	0x0810c299
 810c27c:	0810c2a1 	.word	0x0810c2a1
 810c280:	0810c2a9 	.word	0x0810c2a9
 810c284:	0810c2b1 	.word	0x0810c2b1
 810c288:	2300      	movs	r3, #0
 810c28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c28e:	e086      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c290:	2304      	movs	r3, #4
 810c292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c296:	e082      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c298:	2308      	movs	r3, #8
 810c29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c29e:	e07e      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c2a0:	2310      	movs	r3, #16
 810c2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2a6:	e07a      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c2a8:	2320      	movs	r3, #32
 810c2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2ae:	e076      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c2b0:	2340      	movs	r3, #64	; 0x40
 810c2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2b6:	e072      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c2b8:	2380      	movs	r3, #128	; 0x80
 810c2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2be:	e06e      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c2c0:	687b      	ldr	r3, [r7, #4]
 810c2c2:	681b      	ldr	r3, [r3, #0]
 810c2c4:	4a76      	ldr	r2, [pc, #472]	; (810c4a0 <UART_SetConfig+0x6a4>)
 810c2c6:	4293      	cmp	r3, r2
 810c2c8:	d130      	bne.n	810c32c <UART_SetConfig+0x530>
 810c2ca:	4b73      	ldr	r3, [pc, #460]	; (810c498 <UART_SetConfig+0x69c>)
 810c2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810c2ce:	f003 0307 	and.w	r3, r3, #7
 810c2d2:	2b05      	cmp	r3, #5
 810c2d4:	d826      	bhi.n	810c324 <UART_SetConfig+0x528>
 810c2d6:	a201      	add	r2, pc, #4	; (adr r2, 810c2dc <UART_SetConfig+0x4e0>)
 810c2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c2dc:	0810c2f5 	.word	0x0810c2f5
 810c2e0:	0810c2fd 	.word	0x0810c2fd
 810c2e4:	0810c305 	.word	0x0810c305
 810c2e8:	0810c30d 	.word	0x0810c30d
 810c2ec:	0810c315 	.word	0x0810c315
 810c2f0:	0810c31d 	.word	0x0810c31d
 810c2f4:	2300      	movs	r3, #0
 810c2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c2fa:	e050      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c2fc:	2304      	movs	r3, #4
 810c2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c302:	e04c      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c304:	2308      	movs	r3, #8
 810c306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c30a:	e048      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c30c:	2310      	movs	r3, #16
 810c30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c312:	e044      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c314:	2320      	movs	r3, #32
 810c316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c31a:	e040      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c31c:	2340      	movs	r3, #64	; 0x40
 810c31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c322:	e03c      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c324:	2380      	movs	r3, #128	; 0x80
 810c326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c32a:	e038      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c32c:	687b      	ldr	r3, [r7, #4]
 810c32e:	681b      	ldr	r3, [r3, #0]
 810c330:	4a5c      	ldr	r2, [pc, #368]	; (810c4a4 <UART_SetConfig+0x6a8>)
 810c332:	4293      	cmp	r3, r2
 810c334:	d130      	bne.n	810c398 <UART_SetConfig+0x59c>
 810c336:	4b58      	ldr	r3, [pc, #352]	; (810c498 <UART_SetConfig+0x69c>)
 810c338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810c33a:	f003 0307 	and.w	r3, r3, #7
 810c33e:	2b05      	cmp	r3, #5
 810c340:	d826      	bhi.n	810c390 <UART_SetConfig+0x594>
 810c342:	a201      	add	r2, pc, #4	; (adr r2, 810c348 <UART_SetConfig+0x54c>)
 810c344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c348:	0810c361 	.word	0x0810c361
 810c34c:	0810c369 	.word	0x0810c369
 810c350:	0810c371 	.word	0x0810c371
 810c354:	0810c379 	.word	0x0810c379
 810c358:	0810c381 	.word	0x0810c381
 810c35c:	0810c389 	.word	0x0810c389
 810c360:	2302      	movs	r3, #2
 810c362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c366:	e01a      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c368:	2304      	movs	r3, #4
 810c36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c36e:	e016      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c370:	2308      	movs	r3, #8
 810c372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c376:	e012      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c378:	2310      	movs	r3, #16
 810c37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c37e:	e00e      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c380:	2320      	movs	r3, #32
 810c382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c386:	e00a      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c388:	2340      	movs	r3, #64	; 0x40
 810c38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c38e:	e006      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c390:	2380      	movs	r3, #128	; 0x80
 810c392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810c396:	e002      	b.n	810c39e <UART_SetConfig+0x5a2>
 810c398:	2380      	movs	r3, #128	; 0x80
 810c39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810c39e:	687b      	ldr	r3, [r7, #4]
 810c3a0:	681b      	ldr	r3, [r3, #0]
 810c3a2:	4a40      	ldr	r2, [pc, #256]	; (810c4a4 <UART_SetConfig+0x6a8>)
 810c3a4:	4293      	cmp	r3, r2
 810c3a6:	f040 80ef 	bne.w	810c588 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810c3aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810c3ae:	2b20      	cmp	r3, #32
 810c3b0:	dc46      	bgt.n	810c440 <UART_SetConfig+0x644>
 810c3b2:	2b02      	cmp	r3, #2
 810c3b4:	f2c0 8081 	blt.w	810c4ba <UART_SetConfig+0x6be>
 810c3b8:	3b02      	subs	r3, #2
 810c3ba:	2b1e      	cmp	r3, #30
 810c3bc:	d87d      	bhi.n	810c4ba <UART_SetConfig+0x6be>
 810c3be:	a201      	add	r2, pc, #4	; (adr r2, 810c3c4 <UART_SetConfig+0x5c8>)
 810c3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c3c4:	0810c447 	.word	0x0810c447
 810c3c8:	0810c4bb 	.word	0x0810c4bb
 810c3cc:	0810c44f 	.word	0x0810c44f
 810c3d0:	0810c4bb 	.word	0x0810c4bb
 810c3d4:	0810c4bb 	.word	0x0810c4bb
 810c3d8:	0810c4bb 	.word	0x0810c4bb
 810c3dc:	0810c45f 	.word	0x0810c45f
 810c3e0:	0810c4bb 	.word	0x0810c4bb
 810c3e4:	0810c4bb 	.word	0x0810c4bb
 810c3e8:	0810c4bb 	.word	0x0810c4bb
 810c3ec:	0810c4bb 	.word	0x0810c4bb
 810c3f0:	0810c4bb 	.word	0x0810c4bb
 810c3f4:	0810c4bb 	.word	0x0810c4bb
 810c3f8:	0810c4bb 	.word	0x0810c4bb
 810c3fc:	0810c46f 	.word	0x0810c46f
 810c400:	0810c4bb 	.word	0x0810c4bb
 810c404:	0810c4bb 	.word	0x0810c4bb
 810c408:	0810c4bb 	.word	0x0810c4bb
 810c40c:	0810c4bb 	.word	0x0810c4bb
 810c410:	0810c4bb 	.word	0x0810c4bb
 810c414:	0810c4bb 	.word	0x0810c4bb
 810c418:	0810c4bb 	.word	0x0810c4bb
 810c41c:	0810c4bb 	.word	0x0810c4bb
 810c420:	0810c4bb 	.word	0x0810c4bb
 810c424:	0810c4bb 	.word	0x0810c4bb
 810c428:	0810c4bb 	.word	0x0810c4bb
 810c42c:	0810c4bb 	.word	0x0810c4bb
 810c430:	0810c4bb 	.word	0x0810c4bb
 810c434:	0810c4bb 	.word	0x0810c4bb
 810c438:	0810c4bb 	.word	0x0810c4bb
 810c43c:	0810c4ad 	.word	0x0810c4ad
 810c440:	2b40      	cmp	r3, #64	; 0x40
 810c442:	d036      	beq.n	810c4b2 <UART_SetConfig+0x6b6>
 810c444:	e039      	b.n	810c4ba <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810c446:	f7fb fcbf 	bl	8107dc8 <HAL_RCCEx_GetD3PCLK1Freq>
 810c44a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c44c:	e03b      	b.n	810c4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c44e:	f107 0314 	add.w	r3, r7, #20
 810c452:	4618      	mov	r0, r3
 810c454:	f7fb fcce 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c458:	69bb      	ldr	r3, [r7, #24]
 810c45a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c45c:	e033      	b.n	810c4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c45e:	f107 0308 	add.w	r3, r7, #8
 810c462:	4618      	mov	r0, r3
 810c464:	f7fb fe1a 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c468:	68fb      	ldr	r3, [r7, #12]
 810c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c46c:	e02b      	b.n	810c4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c46e:	4b0a      	ldr	r3, [pc, #40]	; (810c498 <UART_SetConfig+0x69c>)
 810c470:	681b      	ldr	r3, [r3, #0]
 810c472:	f003 0320 	and.w	r3, r3, #32
 810c476:	2b00      	cmp	r3, #0
 810c478:	d009      	beq.n	810c48e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c47a:	4b07      	ldr	r3, [pc, #28]	; (810c498 <UART_SetConfig+0x69c>)
 810c47c:	681b      	ldr	r3, [r3, #0]
 810c47e:	08db      	lsrs	r3, r3, #3
 810c480:	f003 0303 	and.w	r3, r3, #3
 810c484:	4a08      	ldr	r2, [pc, #32]	; (810c4a8 <UART_SetConfig+0x6ac>)
 810c486:	fa22 f303 	lsr.w	r3, r2, r3
 810c48a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c48c:	e01b      	b.n	810c4c6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810c48e:	4b06      	ldr	r3, [pc, #24]	; (810c4a8 <UART_SetConfig+0x6ac>)
 810c490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c492:	e018      	b.n	810c4c6 <UART_SetConfig+0x6ca>
 810c494:	40011400 	.word	0x40011400
 810c498:	58024400 	.word	0x58024400
 810c49c:	40007800 	.word	0x40007800
 810c4a0:	40007c00 	.word	0x40007c00
 810c4a4:	58000c00 	.word	0x58000c00
 810c4a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c4ac:	4bc4      	ldr	r3, [pc, #784]	; (810c7c0 <UART_SetConfig+0x9c4>)
 810c4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c4b0:	e009      	b.n	810c4c6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c4b8:	e005      	b.n	810c4c6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810c4ba:	2300      	movs	r3, #0
 810c4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c4be:	2301      	movs	r3, #1
 810c4c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c4c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c4c8:	2b00      	cmp	r3, #0
 810c4ca:	f000 81da 	beq.w	810c882 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810c4ce:	687b      	ldr	r3, [r7, #4]
 810c4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c4d2:	4abc      	ldr	r2, [pc, #752]	; (810c7c4 <UART_SetConfig+0x9c8>)
 810c4d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c4d8:	461a      	mov	r2, r3
 810c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 810c4e0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c4e2:	687b      	ldr	r3, [r7, #4]
 810c4e4:	685a      	ldr	r2, [r3, #4]
 810c4e6:	4613      	mov	r3, r2
 810c4e8:	005b      	lsls	r3, r3, #1
 810c4ea:	4413      	add	r3, r2
 810c4ec:	6a3a      	ldr	r2, [r7, #32]
 810c4ee:	429a      	cmp	r2, r3
 810c4f0:	d305      	bcc.n	810c4fe <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810c4f2:	687b      	ldr	r3, [r7, #4]
 810c4f4:	685b      	ldr	r3, [r3, #4]
 810c4f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810c4f8:	6a3a      	ldr	r2, [r7, #32]
 810c4fa:	429a      	cmp	r2, r3
 810c4fc:	d903      	bls.n	810c506 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810c4fe:	2301      	movs	r3, #1
 810c500:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c504:	e1bd      	b.n	810c882 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c508:	4618      	mov	r0, r3
 810c50a:	f04f 0100 	mov.w	r1, #0
 810c50e:	687b      	ldr	r3, [r7, #4]
 810c510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c512:	4aac      	ldr	r2, [pc, #688]	; (810c7c4 <UART_SetConfig+0x9c8>)
 810c514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c518:	b29a      	uxth	r2, r3
 810c51a:	f04f 0300 	mov.w	r3, #0
 810c51e:	f7f4 fbcb 	bl	8100cb8 <__aeabi_uldivmod>
 810c522:	4602      	mov	r2, r0
 810c524:	460b      	mov	r3, r1
 810c526:	4610      	mov	r0, r2
 810c528:	4619      	mov	r1, r3
 810c52a:	f04f 0200 	mov.w	r2, #0
 810c52e:	f04f 0300 	mov.w	r3, #0
 810c532:	020b      	lsls	r3, r1, #8
 810c534:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810c538:	0202      	lsls	r2, r0, #8
 810c53a:	6879      	ldr	r1, [r7, #4]
 810c53c:	6849      	ldr	r1, [r1, #4]
 810c53e:	0849      	lsrs	r1, r1, #1
 810c540:	4608      	mov	r0, r1
 810c542:	f04f 0100 	mov.w	r1, #0
 810c546:	1814      	adds	r4, r2, r0
 810c548:	eb43 0501 	adc.w	r5, r3, r1
 810c54c:	687b      	ldr	r3, [r7, #4]
 810c54e:	685b      	ldr	r3, [r3, #4]
 810c550:	461a      	mov	r2, r3
 810c552:	f04f 0300 	mov.w	r3, #0
 810c556:	4620      	mov	r0, r4
 810c558:	4629      	mov	r1, r5
 810c55a:	f7f4 fbad 	bl	8100cb8 <__aeabi_uldivmod>
 810c55e:	4602      	mov	r2, r0
 810c560:	460b      	mov	r3, r1
 810c562:	4613      	mov	r3, r2
 810c564:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810c566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810c56c:	d308      	bcc.n	810c580 <UART_SetConfig+0x784>
 810c56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c574:	d204      	bcs.n	810c580 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810c576:	687b      	ldr	r3, [r7, #4]
 810c578:	681b      	ldr	r3, [r3, #0]
 810c57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c57c:	60da      	str	r2, [r3, #12]
 810c57e:	e180      	b.n	810c882 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810c580:	2301      	movs	r3, #1
 810c582:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c586:	e17c      	b.n	810c882 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810c588:	687b      	ldr	r3, [r7, #4]
 810c58a:	69db      	ldr	r3, [r3, #28]
 810c58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810c590:	f040 80bf 	bne.w	810c712 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 810c594:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810c598:	2b20      	cmp	r3, #32
 810c59a:	dc49      	bgt.n	810c630 <UART_SetConfig+0x834>
 810c59c:	2b00      	cmp	r3, #0
 810c59e:	db7c      	blt.n	810c69a <UART_SetConfig+0x89e>
 810c5a0:	2b20      	cmp	r3, #32
 810c5a2:	d87a      	bhi.n	810c69a <UART_SetConfig+0x89e>
 810c5a4:	a201      	add	r2, pc, #4	; (adr r2, 810c5ac <UART_SetConfig+0x7b0>)
 810c5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c5aa:	bf00      	nop
 810c5ac:	0810c637 	.word	0x0810c637
 810c5b0:	0810c63f 	.word	0x0810c63f
 810c5b4:	0810c69b 	.word	0x0810c69b
 810c5b8:	0810c69b 	.word	0x0810c69b
 810c5bc:	0810c647 	.word	0x0810c647
 810c5c0:	0810c69b 	.word	0x0810c69b
 810c5c4:	0810c69b 	.word	0x0810c69b
 810c5c8:	0810c69b 	.word	0x0810c69b
 810c5cc:	0810c657 	.word	0x0810c657
 810c5d0:	0810c69b 	.word	0x0810c69b
 810c5d4:	0810c69b 	.word	0x0810c69b
 810c5d8:	0810c69b 	.word	0x0810c69b
 810c5dc:	0810c69b 	.word	0x0810c69b
 810c5e0:	0810c69b 	.word	0x0810c69b
 810c5e4:	0810c69b 	.word	0x0810c69b
 810c5e8:	0810c69b 	.word	0x0810c69b
 810c5ec:	0810c667 	.word	0x0810c667
 810c5f0:	0810c69b 	.word	0x0810c69b
 810c5f4:	0810c69b 	.word	0x0810c69b
 810c5f8:	0810c69b 	.word	0x0810c69b
 810c5fc:	0810c69b 	.word	0x0810c69b
 810c600:	0810c69b 	.word	0x0810c69b
 810c604:	0810c69b 	.word	0x0810c69b
 810c608:	0810c69b 	.word	0x0810c69b
 810c60c:	0810c69b 	.word	0x0810c69b
 810c610:	0810c69b 	.word	0x0810c69b
 810c614:	0810c69b 	.word	0x0810c69b
 810c618:	0810c69b 	.word	0x0810c69b
 810c61c:	0810c69b 	.word	0x0810c69b
 810c620:	0810c69b 	.word	0x0810c69b
 810c624:	0810c69b 	.word	0x0810c69b
 810c628:	0810c69b 	.word	0x0810c69b
 810c62c:	0810c68d 	.word	0x0810c68d
 810c630:	2b40      	cmp	r3, #64	; 0x40
 810c632:	d02e      	beq.n	810c692 <UART_SetConfig+0x896>
 810c634:	e031      	b.n	810c69a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c636:	f7f9 ff47 	bl	81064c8 <HAL_RCC_GetPCLK1Freq>
 810c63a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c63c:	e033      	b.n	810c6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c63e:	f7f9 ff59 	bl	81064f4 <HAL_RCC_GetPCLK2Freq>
 810c642:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c644:	e02f      	b.n	810c6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c646:	f107 0314 	add.w	r3, r7, #20
 810c64a:	4618      	mov	r0, r3
 810c64c:	f7fb fbd2 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c650:	69bb      	ldr	r3, [r7, #24]
 810c652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c654:	e027      	b.n	810c6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c656:	f107 0308 	add.w	r3, r7, #8
 810c65a:	4618      	mov	r0, r3
 810c65c:	f7fb fd1e 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c660:	68fb      	ldr	r3, [r7, #12]
 810c662:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c664:	e01f      	b.n	810c6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c666:	4b58      	ldr	r3, [pc, #352]	; (810c7c8 <UART_SetConfig+0x9cc>)
 810c668:	681b      	ldr	r3, [r3, #0]
 810c66a:	f003 0320 	and.w	r3, r3, #32
 810c66e:	2b00      	cmp	r3, #0
 810c670:	d009      	beq.n	810c686 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c672:	4b55      	ldr	r3, [pc, #340]	; (810c7c8 <UART_SetConfig+0x9cc>)
 810c674:	681b      	ldr	r3, [r3, #0]
 810c676:	08db      	lsrs	r3, r3, #3
 810c678:	f003 0303 	and.w	r3, r3, #3
 810c67c:	4a53      	ldr	r2, [pc, #332]	; (810c7cc <UART_SetConfig+0x9d0>)
 810c67e:	fa22 f303 	lsr.w	r3, r2, r3
 810c682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c684:	e00f      	b.n	810c6a6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810c686:	4b51      	ldr	r3, [pc, #324]	; (810c7cc <UART_SetConfig+0x9d0>)
 810c688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c68a:	e00c      	b.n	810c6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c68c:	4b4c      	ldr	r3, [pc, #304]	; (810c7c0 <UART_SetConfig+0x9c4>)
 810c68e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c690:	e009      	b.n	810c6a6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c698:	e005      	b.n	810c6a6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810c69a:	2300      	movs	r3, #0
 810c69c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c69e:	2301      	movs	r3, #1
 810c6a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c6a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c6a8:	2b00      	cmp	r3, #0
 810c6aa:	f000 80ea 	beq.w	810c882 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c6ae:	687b      	ldr	r3, [r7, #4]
 810c6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c6b2:	4a44      	ldr	r2, [pc, #272]	; (810c7c4 <UART_SetConfig+0x9c8>)
 810c6b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c6b8:	461a      	mov	r2, r3
 810c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c6bc:	fbb3 f3f2 	udiv	r3, r3, r2
 810c6c0:	005a      	lsls	r2, r3, #1
 810c6c2:	687b      	ldr	r3, [r7, #4]
 810c6c4:	685b      	ldr	r3, [r3, #4]
 810c6c6:	085b      	lsrs	r3, r3, #1
 810c6c8:	441a      	add	r2, r3
 810c6ca:	687b      	ldr	r3, [r7, #4]
 810c6cc:	685b      	ldr	r3, [r3, #4]
 810c6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 810c6d2:	b29b      	uxth	r3, r3
 810c6d4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c6d8:	2b0f      	cmp	r3, #15
 810c6da:	d916      	bls.n	810c70a <UART_SetConfig+0x90e>
 810c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c6de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c6e2:	d212      	bcs.n	810c70a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c6e6:	b29b      	uxth	r3, r3
 810c6e8:	f023 030f 	bic.w	r3, r3, #15
 810c6ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c6f0:	085b      	lsrs	r3, r3, #1
 810c6f2:	b29b      	uxth	r3, r3
 810c6f4:	f003 0307 	and.w	r3, r3, #7
 810c6f8:	b29a      	uxth	r2, r3
 810c6fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810c6fc:	4313      	orrs	r3, r2
 810c6fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810c700:	687b      	ldr	r3, [r7, #4]
 810c702:	681b      	ldr	r3, [r3, #0]
 810c704:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810c706:	60da      	str	r2, [r3, #12]
 810c708:	e0bb      	b.n	810c882 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810c70a:	2301      	movs	r3, #1
 810c70c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810c710:	e0b7      	b.n	810c882 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810c712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810c716:	2b20      	cmp	r3, #32
 810c718:	dc4a      	bgt.n	810c7b0 <UART_SetConfig+0x9b4>
 810c71a:	2b00      	cmp	r3, #0
 810c71c:	f2c0 8086 	blt.w	810c82c <UART_SetConfig+0xa30>
 810c720:	2b20      	cmp	r3, #32
 810c722:	f200 8083 	bhi.w	810c82c <UART_SetConfig+0xa30>
 810c726:	a201      	add	r2, pc, #4	; (adr r2, 810c72c <UART_SetConfig+0x930>)
 810c728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c72c:	0810c7b7 	.word	0x0810c7b7
 810c730:	0810c7d1 	.word	0x0810c7d1
 810c734:	0810c82d 	.word	0x0810c82d
 810c738:	0810c82d 	.word	0x0810c82d
 810c73c:	0810c7d9 	.word	0x0810c7d9
 810c740:	0810c82d 	.word	0x0810c82d
 810c744:	0810c82d 	.word	0x0810c82d
 810c748:	0810c82d 	.word	0x0810c82d
 810c74c:	0810c7e9 	.word	0x0810c7e9
 810c750:	0810c82d 	.word	0x0810c82d
 810c754:	0810c82d 	.word	0x0810c82d
 810c758:	0810c82d 	.word	0x0810c82d
 810c75c:	0810c82d 	.word	0x0810c82d
 810c760:	0810c82d 	.word	0x0810c82d
 810c764:	0810c82d 	.word	0x0810c82d
 810c768:	0810c82d 	.word	0x0810c82d
 810c76c:	0810c7f9 	.word	0x0810c7f9
 810c770:	0810c82d 	.word	0x0810c82d
 810c774:	0810c82d 	.word	0x0810c82d
 810c778:	0810c82d 	.word	0x0810c82d
 810c77c:	0810c82d 	.word	0x0810c82d
 810c780:	0810c82d 	.word	0x0810c82d
 810c784:	0810c82d 	.word	0x0810c82d
 810c788:	0810c82d 	.word	0x0810c82d
 810c78c:	0810c82d 	.word	0x0810c82d
 810c790:	0810c82d 	.word	0x0810c82d
 810c794:	0810c82d 	.word	0x0810c82d
 810c798:	0810c82d 	.word	0x0810c82d
 810c79c:	0810c82d 	.word	0x0810c82d
 810c7a0:	0810c82d 	.word	0x0810c82d
 810c7a4:	0810c82d 	.word	0x0810c82d
 810c7a8:	0810c82d 	.word	0x0810c82d
 810c7ac:	0810c81f 	.word	0x0810c81f
 810c7b0:	2b40      	cmp	r3, #64	; 0x40
 810c7b2:	d037      	beq.n	810c824 <UART_SetConfig+0xa28>
 810c7b4:	e03a      	b.n	810c82c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810c7b6:	f7f9 fe87 	bl	81064c8 <HAL_RCC_GetPCLK1Freq>
 810c7ba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c7bc:	e03c      	b.n	810c838 <UART_SetConfig+0xa3c>
 810c7be:	bf00      	nop
 810c7c0:	003d0900 	.word	0x003d0900
 810c7c4:	081138c4 	.word	0x081138c4
 810c7c8:	58024400 	.word	0x58024400
 810c7cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810c7d0:	f7f9 fe90 	bl	81064f4 <HAL_RCC_GetPCLK2Freq>
 810c7d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810c7d6:	e02f      	b.n	810c838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c7d8:	f107 0314 	add.w	r3, r7, #20
 810c7dc:	4618      	mov	r0, r3
 810c7de:	f7fb fb09 	bl	8107df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810c7e2:	69bb      	ldr	r3, [r7, #24]
 810c7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c7e6:	e027      	b.n	810c838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c7e8:	f107 0308 	add.w	r3, r7, #8
 810c7ec:	4618      	mov	r0, r3
 810c7ee:	f7fb fc55 	bl	810809c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810c7f2:	68fb      	ldr	r3, [r7, #12]
 810c7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c7f6:	e01f      	b.n	810c838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c7f8:	4b2c      	ldr	r3, [pc, #176]	; (810c8ac <UART_SetConfig+0xab0>)
 810c7fa:	681b      	ldr	r3, [r3, #0]
 810c7fc:	f003 0320 	and.w	r3, r3, #32
 810c800:	2b00      	cmp	r3, #0
 810c802:	d009      	beq.n	810c818 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810c804:	4b29      	ldr	r3, [pc, #164]	; (810c8ac <UART_SetConfig+0xab0>)
 810c806:	681b      	ldr	r3, [r3, #0]
 810c808:	08db      	lsrs	r3, r3, #3
 810c80a:	f003 0303 	and.w	r3, r3, #3
 810c80e:	4a28      	ldr	r2, [pc, #160]	; (810c8b0 <UART_SetConfig+0xab4>)
 810c810:	fa22 f303 	lsr.w	r3, r2, r3
 810c814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810c816:	e00f      	b.n	810c838 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810c818:	4b25      	ldr	r3, [pc, #148]	; (810c8b0 <UART_SetConfig+0xab4>)
 810c81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c81c:	e00c      	b.n	810c838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810c81e:	4b25      	ldr	r3, [pc, #148]	; (810c8b4 <UART_SetConfig+0xab8>)
 810c820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c822:	e009      	b.n	810c838 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810c824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810c828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810c82a:	e005      	b.n	810c838 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810c82c:	2300      	movs	r3, #0
 810c82e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810c830:	2301      	movs	r3, #1
 810c832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810c836:	bf00      	nop
    }

    if (pclk != 0U)
 810c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c83a:	2b00      	cmp	r3, #0
 810c83c:	d021      	beq.n	810c882 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810c83e:	687b      	ldr	r3, [r7, #4]
 810c840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810c842:	4a1d      	ldr	r2, [pc, #116]	; (810c8b8 <UART_SetConfig+0xabc>)
 810c844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810c848:	461a      	mov	r2, r3
 810c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810c84c:	fbb3 f2f2 	udiv	r2, r3, r2
 810c850:	687b      	ldr	r3, [r7, #4]
 810c852:	685b      	ldr	r3, [r3, #4]
 810c854:	085b      	lsrs	r3, r3, #1
 810c856:	441a      	add	r2, r3
 810c858:	687b      	ldr	r3, [r7, #4]
 810c85a:	685b      	ldr	r3, [r3, #4]
 810c85c:	fbb2 f3f3 	udiv	r3, r2, r3
 810c860:	b29b      	uxth	r3, r3
 810c862:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c866:	2b0f      	cmp	r3, #15
 810c868:	d908      	bls.n	810c87c <UART_SetConfig+0xa80>
 810c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810c870:	d204      	bcs.n	810c87c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 810c872:	687b      	ldr	r3, [r7, #4]
 810c874:	681b      	ldr	r3, [r3, #0]
 810c876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810c878:	60da      	str	r2, [r3, #12]
 810c87a:	e002      	b.n	810c882 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810c87c:	2301      	movs	r3, #1
 810c87e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810c882:	687b      	ldr	r3, [r7, #4]
 810c884:	2201      	movs	r2, #1
 810c886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810c88a:	687b      	ldr	r3, [r7, #4]
 810c88c:	2201      	movs	r2, #1
 810c88e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810c892:	687b      	ldr	r3, [r7, #4]
 810c894:	2200      	movs	r2, #0
 810c896:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810c898:	687b      	ldr	r3, [r7, #4]
 810c89a:	2200      	movs	r2, #0
 810c89c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810c89e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810c8a2:	4618      	mov	r0, r3
 810c8a4:	3738      	adds	r7, #56	; 0x38
 810c8a6:	46bd      	mov	sp, r7
 810c8a8:	bdb0      	pop	{r4, r5, r7, pc}
 810c8aa:	bf00      	nop
 810c8ac:	58024400 	.word	0x58024400
 810c8b0:	03d09000 	.word	0x03d09000
 810c8b4:	003d0900 	.word	0x003d0900
 810c8b8:	081138c4 	.word	0x081138c4

0810c8bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810c8bc:	b480      	push	{r7}
 810c8be:	b083      	sub	sp, #12
 810c8c0:	af00      	add	r7, sp, #0
 810c8c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810c8c4:	687b      	ldr	r3, [r7, #4]
 810c8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c8c8:	f003 0301 	and.w	r3, r3, #1
 810c8cc:	2b00      	cmp	r3, #0
 810c8ce:	d00a      	beq.n	810c8e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810c8d0:	687b      	ldr	r3, [r7, #4]
 810c8d2:	681b      	ldr	r3, [r3, #0]
 810c8d4:	685b      	ldr	r3, [r3, #4]
 810c8d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810c8da:	687b      	ldr	r3, [r7, #4]
 810c8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810c8de:	687b      	ldr	r3, [r7, #4]
 810c8e0:	681b      	ldr	r3, [r3, #0]
 810c8e2:	430a      	orrs	r2, r1
 810c8e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810c8e6:	687b      	ldr	r3, [r7, #4]
 810c8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c8ea:	f003 0302 	and.w	r3, r3, #2
 810c8ee:	2b00      	cmp	r3, #0
 810c8f0:	d00a      	beq.n	810c908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810c8f2:	687b      	ldr	r3, [r7, #4]
 810c8f4:	681b      	ldr	r3, [r3, #0]
 810c8f6:	685b      	ldr	r3, [r3, #4]
 810c8f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810c8fc:	687b      	ldr	r3, [r7, #4]
 810c8fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810c900:	687b      	ldr	r3, [r7, #4]
 810c902:	681b      	ldr	r3, [r3, #0]
 810c904:	430a      	orrs	r2, r1
 810c906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810c908:	687b      	ldr	r3, [r7, #4]
 810c90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c90c:	f003 0304 	and.w	r3, r3, #4
 810c910:	2b00      	cmp	r3, #0
 810c912:	d00a      	beq.n	810c92a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810c914:	687b      	ldr	r3, [r7, #4]
 810c916:	681b      	ldr	r3, [r3, #0]
 810c918:	685b      	ldr	r3, [r3, #4]
 810c91a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810c91e:	687b      	ldr	r3, [r7, #4]
 810c920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810c922:	687b      	ldr	r3, [r7, #4]
 810c924:	681b      	ldr	r3, [r3, #0]
 810c926:	430a      	orrs	r2, r1
 810c928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810c92a:	687b      	ldr	r3, [r7, #4]
 810c92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c92e:	f003 0308 	and.w	r3, r3, #8
 810c932:	2b00      	cmp	r3, #0
 810c934:	d00a      	beq.n	810c94c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810c936:	687b      	ldr	r3, [r7, #4]
 810c938:	681b      	ldr	r3, [r3, #0]
 810c93a:	685b      	ldr	r3, [r3, #4]
 810c93c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810c940:	687b      	ldr	r3, [r7, #4]
 810c942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810c944:	687b      	ldr	r3, [r7, #4]
 810c946:	681b      	ldr	r3, [r3, #0]
 810c948:	430a      	orrs	r2, r1
 810c94a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810c94c:	687b      	ldr	r3, [r7, #4]
 810c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c950:	f003 0310 	and.w	r3, r3, #16
 810c954:	2b00      	cmp	r3, #0
 810c956:	d00a      	beq.n	810c96e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810c958:	687b      	ldr	r3, [r7, #4]
 810c95a:	681b      	ldr	r3, [r3, #0]
 810c95c:	689b      	ldr	r3, [r3, #8]
 810c95e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810c962:	687b      	ldr	r3, [r7, #4]
 810c964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810c966:	687b      	ldr	r3, [r7, #4]
 810c968:	681b      	ldr	r3, [r3, #0]
 810c96a:	430a      	orrs	r2, r1
 810c96c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810c96e:	687b      	ldr	r3, [r7, #4]
 810c970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c972:	f003 0320 	and.w	r3, r3, #32
 810c976:	2b00      	cmp	r3, #0
 810c978:	d00a      	beq.n	810c990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810c97a:	687b      	ldr	r3, [r7, #4]
 810c97c:	681b      	ldr	r3, [r3, #0]
 810c97e:	689b      	ldr	r3, [r3, #8]
 810c980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810c984:	687b      	ldr	r3, [r7, #4]
 810c986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810c988:	687b      	ldr	r3, [r7, #4]
 810c98a:	681b      	ldr	r3, [r3, #0]
 810c98c:	430a      	orrs	r2, r1
 810c98e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810c990:	687b      	ldr	r3, [r7, #4]
 810c992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810c998:	2b00      	cmp	r3, #0
 810c99a:	d01a      	beq.n	810c9d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810c99c:	687b      	ldr	r3, [r7, #4]
 810c99e:	681b      	ldr	r3, [r3, #0]
 810c9a0:	685b      	ldr	r3, [r3, #4]
 810c9a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810c9a6:	687b      	ldr	r3, [r7, #4]
 810c9a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810c9aa:	687b      	ldr	r3, [r7, #4]
 810c9ac:	681b      	ldr	r3, [r3, #0]
 810c9ae:	430a      	orrs	r2, r1
 810c9b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810c9b2:	687b      	ldr	r3, [r7, #4]
 810c9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810c9b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c9ba:	d10a      	bne.n	810c9d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810c9bc:	687b      	ldr	r3, [r7, #4]
 810c9be:	681b      	ldr	r3, [r3, #0]
 810c9c0:	685b      	ldr	r3, [r3, #4]
 810c9c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810c9c6:	687b      	ldr	r3, [r7, #4]
 810c9c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810c9ca:	687b      	ldr	r3, [r7, #4]
 810c9cc:	681b      	ldr	r3, [r3, #0]
 810c9ce:	430a      	orrs	r2, r1
 810c9d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810c9d2:	687b      	ldr	r3, [r7, #4]
 810c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810c9da:	2b00      	cmp	r3, #0
 810c9dc:	d00a      	beq.n	810c9f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810c9de:	687b      	ldr	r3, [r7, #4]
 810c9e0:	681b      	ldr	r3, [r3, #0]
 810c9e2:	685b      	ldr	r3, [r3, #4]
 810c9e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810c9e8:	687b      	ldr	r3, [r7, #4]
 810c9ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810c9ec:	687b      	ldr	r3, [r7, #4]
 810c9ee:	681b      	ldr	r3, [r3, #0]
 810c9f0:	430a      	orrs	r2, r1
 810c9f2:	605a      	str	r2, [r3, #4]
  }
}
 810c9f4:	bf00      	nop
 810c9f6:	370c      	adds	r7, #12
 810c9f8:	46bd      	mov	sp, r7
 810c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9fe:	4770      	bx	lr

0810ca00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810ca00:	b580      	push	{r7, lr}
 810ca02:	b086      	sub	sp, #24
 810ca04:	af02      	add	r7, sp, #8
 810ca06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ca08:	687b      	ldr	r3, [r7, #4]
 810ca0a:	2200      	movs	r2, #0
 810ca0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810ca10:	f7f5 fc58 	bl	81022c4 <HAL_GetTick>
 810ca14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810ca16:	687b      	ldr	r3, [r7, #4]
 810ca18:	681b      	ldr	r3, [r3, #0]
 810ca1a:	681b      	ldr	r3, [r3, #0]
 810ca1c:	f003 0308 	and.w	r3, r3, #8
 810ca20:	2b08      	cmp	r3, #8
 810ca22:	d10e      	bne.n	810ca42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ca24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810ca28:	9300      	str	r3, [sp, #0]
 810ca2a:	68fb      	ldr	r3, [r7, #12]
 810ca2c:	2200      	movs	r2, #0
 810ca2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810ca32:	6878      	ldr	r0, [r7, #4]
 810ca34:	f000 f82f 	bl	810ca96 <UART_WaitOnFlagUntilTimeout>
 810ca38:	4603      	mov	r3, r0
 810ca3a:	2b00      	cmp	r3, #0
 810ca3c:	d001      	beq.n	810ca42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ca3e:	2303      	movs	r3, #3
 810ca40:	e025      	b.n	810ca8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810ca42:	687b      	ldr	r3, [r7, #4]
 810ca44:	681b      	ldr	r3, [r3, #0]
 810ca46:	681b      	ldr	r3, [r3, #0]
 810ca48:	f003 0304 	and.w	r3, r3, #4
 810ca4c:	2b04      	cmp	r3, #4
 810ca4e:	d10e      	bne.n	810ca6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ca50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810ca54:	9300      	str	r3, [sp, #0]
 810ca56:	68fb      	ldr	r3, [r7, #12]
 810ca58:	2200      	movs	r2, #0
 810ca5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810ca5e:	6878      	ldr	r0, [r7, #4]
 810ca60:	f000 f819 	bl	810ca96 <UART_WaitOnFlagUntilTimeout>
 810ca64:	4603      	mov	r3, r0
 810ca66:	2b00      	cmp	r3, #0
 810ca68:	d001      	beq.n	810ca6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810ca6a:	2303      	movs	r3, #3
 810ca6c:	e00f      	b.n	810ca8e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810ca6e:	687b      	ldr	r3, [r7, #4]
 810ca70:	2220      	movs	r2, #32
 810ca72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810ca76:	687b      	ldr	r3, [r7, #4]
 810ca78:	2220      	movs	r2, #32
 810ca7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810ca7e:	687b      	ldr	r3, [r7, #4]
 810ca80:	2200      	movs	r2, #0
 810ca82:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810ca84:	687b      	ldr	r3, [r7, #4]
 810ca86:	2200      	movs	r2, #0
 810ca88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ca8c:	2300      	movs	r3, #0
}
 810ca8e:	4618      	mov	r0, r3
 810ca90:	3710      	adds	r7, #16
 810ca92:	46bd      	mov	sp, r7
 810ca94:	bd80      	pop	{r7, pc}

0810ca96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810ca96:	b580      	push	{r7, lr}
 810ca98:	b084      	sub	sp, #16
 810ca9a:	af00      	add	r7, sp, #0
 810ca9c:	60f8      	str	r0, [r7, #12]
 810ca9e:	60b9      	str	r1, [r7, #8]
 810caa0:	603b      	str	r3, [r7, #0]
 810caa2:	4613      	mov	r3, r2
 810caa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810caa6:	e062      	b.n	810cb6e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810caa8:	69bb      	ldr	r3, [r7, #24]
 810caaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 810caae:	d05e      	beq.n	810cb6e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810cab0:	f7f5 fc08 	bl	81022c4 <HAL_GetTick>
 810cab4:	4602      	mov	r2, r0
 810cab6:	683b      	ldr	r3, [r7, #0]
 810cab8:	1ad3      	subs	r3, r2, r3
 810caba:	69ba      	ldr	r2, [r7, #24]
 810cabc:	429a      	cmp	r2, r3
 810cabe:	d302      	bcc.n	810cac6 <UART_WaitOnFlagUntilTimeout+0x30>
 810cac0:	69bb      	ldr	r3, [r7, #24]
 810cac2:	2b00      	cmp	r3, #0
 810cac4:	d11d      	bne.n	810cb02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810cac6:	68fb      	ldr	r3, [r7, #12]
 810cac8:	681b      	ldr	r3, [r3, #0]
 810caca:	681a      	ldr	r2, [r3, #0]
 810cacc:	68fb      	ldr	r3, [r7, #12]
 810cace:	681b      	ldr	r3, [r3, #0]
 810cad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810cad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810cad6:	68fb      	ldr	r3, [r7, #12]
 810cad8:	681b      	ldr	r3, [r3, #0]
 810cada:	689a      	ldr	r2, [r3, #8]
 810cadc:	68fb      	ldr	r3, [r7, #12]
 810cade:	681b      	ldr	r3, [r3, #0]
 810cae0:	f022 0201 	bic.w	r2, r2, #1
 810cae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 810cae6:	68fb      	ldr	r3, [r7, #12]
 810cae8:	2220      	movs	r2, #32
 810caea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810caee:	68fb      	ldr	r3, [r7, #12]
 810caf0:	2220      	movs	r2, #32
 810caf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810caf6:	68fb      	ldr	r3, [r7, #12]
 810caf8:	2200      	movs	r2, #0
 810cafa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810cafe:	2303      	movs	r3, #3
 810cb00:	e045      	b.n	810cb8e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810cb02:	68fb      	ldr	r3, [r7, #12]
 810cb04:	681b      	ldr	r3, [r3, #0]
 810cb06:	681b      	ldr	r3, [r3, #0]
 810cb08:	f003 0304 	and.w	r3, r3, #4
 810cb0c:	2b00      	cmp	r3, #0
 810cb0e:	d02e      	beq.n	810cb6e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810cb10:	68fb      	ldr	r3, [r7, #12]
 810cb12:	681b      	ldr	r3, [r3, #0]
 810cb14:	69db      	ldr	r3, [r3, #28]
 810cb16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810cb1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810cb1e:	d126      	bne.n	810cb6e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810cb20:	68fb      	ldr	r3, [r7, #12]
 810cb22:	681b      	ldr	r3, [r3, #0]
 810cb24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810cb28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 810cb2a:	68fb      	ldr	r3, [r7, #12]
 810cb2c:	681b      	ldr	r3, [r3, #0]
 810cb2e:	681a      	ldr	r2, [r3, #0]
 810cb30:	68fb      	ldr	r3, [r7, #12]
 810cb32:	681b      	ldr	r3, [r3, #0]
 810cb34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810cb38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810cb3a:	68fb      	ldr	r3, [r7, #12]
 810cb3c:	681b      	ldr	r3, [r3, #0]
 810cb3e:	689a      	ldr	r2, [r3, #8]
 810cb40:	68fb      	ldr	r3, [r7, #12]
 810cb42:	681b      	ldr	r3, [r3, #0]
 810cb44:	f022 0201 	bic.w	r2, r2, #1
 810cb48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 810cb4a:	68fb      	ldr	r3, [r7, #12]
 810cb4c:	2220      	movs	r2, #32
 810cb4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810cb52:	68fb      	ldr	r3, [r7, #12]
 810cb54:	2220      	movs	r2, #32
 810cb56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810cb5a:	68fb      	ldr	r3, [r7, #12]
 810cb5c:	2220      	movs	r2, #32
 810cb5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810cb62:	68fb      	ldr	r3, [r7, #12]
 810cb64:	2200      	movs	r2, #0
 810cb66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810cb6a:	2303      	movs	r3, #3
 810cb6c:	e00f      	b.n	810cb8e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810cb6e:	68fb      	ldr	r3, [r7, #12]
 810cb70:	681b      	ldr	r3, [r3, #0]
 810cb72:	69da      	ldr	r2, [r3, #28]
 810cb74:	68bb      	ldr	r3, [r7, #8]
 810cb76:	4013      	ands	r3, r2
 810cb78:	68ba      	ldr	r2, [r7, #8]
 810cb7a:	429a      	cmp	r2, r3
 810cb7c:	bf0c      	ite	eq
 810cb7e:	2301      	moveq	r3, #1
 810cb80:	2300      	movne	r3, #0
 810cb82:	b2db      	uxtb	r3, r3
 810cb84:	461a      	mov	r2, r3
 810cb86:	79fb      	ldrb	r3, [r7, #7]
 810cb88:	429a      	cmp	r2, r3
 810cb8a:	d08d      	beq.n	810caa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810cb8c:	2300      	movs	r3, #0
}
 810cb8e:	4618      	mov	r0, r3
 810cb90:	3710      	adds	r7, #16
 810cb92:	46bd      	mov	sp, r7
 810cb94:	bd80      	pop	{r7, pc}

0810cb96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810cb96:	b480      	push	{r7}
 810cb98:	b085      	sub	sp, #20
 810cb9a:	af00      	add	r7, sp, #0
 810cb9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cb9e:	687b      	ldr	r3, [r7, #4]
 810cba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810cba4:	2b01      	cmp	r3, #1
 810cba6:	d101      	bne.n	810cbac <HAL_UARTEx_DisableFifoMode+0x16>
 810cba8:	2302      	movs	r3, #2
 810cbaa:	e027      	b.n	810cbfc <HAL_UARTEx_DisableFifoMode+0x66>
 810cbac:	687b      	ldr	r3, [r7, #4]
 810cbae:	2201      	movs	r2, #1
 810cbb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810cbb4:	687b      	ldr	r3, [r7, #4]
 810cbb6:	2224      	movs	r2, #36	; 0x24
 810cbb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cbbc:	687b      	ldr	r3, [r7, #4]
 810cbbe:	681b      	ldr	r3, [r3, #0]
 810cbc0:	681b      	ldr	r3, [r3, #0]
 810cbc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cbc4:	687b      	ldr	r3, [r7, #4]
 810cbc6:	681b      	ldr	r3, [r3, #0]
 810cbc8:	681a      	ldr	r2, [r3, #0]
 810cbca:	687b      	ldr	r3, [r7, #4]
 810cbcc:	681b      	ldr	r3, [r3, #0]
 810cbce:	f022 0201 	bic.w	r2, r2, #1
 810cbd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810cbd4:	68fb      	ldr	r3, [r7, #12]
 810cbd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810cbda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810cbdc:	687b      	ldr	r3, [r7, #4]
 810cbde:	2200      	movs	r2, #0
 810cbe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cbe2:	687b      	ldr	r3, [r7, #4]
 810cbe4:	681b      	ldr	r3, [r3, #0]
 810cbe6:	68fa      	ldr	r2, [r7, #12]
 810cbe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cbea:	687b      	ldr	r3, [r7, #4]
 810cbec:	2220      	movs	r2, #32
 810cbee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cbf2:	687b      	ldr	r3, [r7, #4]
 810cbf4:	2200      	movs	r2, #0
 810cbf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810cbfa:	2300      	movs	r3, #0
}
 810cbfc:	4618      	mov	r0, r3
 810cbfe:	3714      	adds	r7, #20
 810cc00:	46bd      	mov	sp, r7
 810cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cc06:	4770      	bx	lr

0810cc08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810cc08:	b580      	push	{r7, lr}
 810cc0a:	b084      	sub	sp, #16
 810cc0c:	af00      	add	r7, sp, #0
 810cc0e:	6078      	str	r0, [r7, #4]
 810cc10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cc12:	687b      	ldr	r3, [r7, #4]
 810cc14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810cc18:	2b01      	cmp	r3, #1
 810cc1a:	d101      	bne.n	810cc20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810cc1c:	2302      	movs	r3, #2
 810cc1e:	e02d      	b.n	810cc7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810cc20:	687b      	ldr	r3, [r7, #4]
 810cc22:	2201      	movs	r2, #1
 810cc24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810cc28:	687b      	ldr	r3, [r7, #4]
 810cc2a:	2224      	movs	r2, #36	; 0x24
 810cc2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810cc30:	687b      	ldr	r3, [r7, #4]
 810cc32:	681b      	ldr	r3, [r3, #0]
 810cc34:	681b      	ldr	r3, [r3, #0]
 810cc36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810cc38:	687b      	ldr	r3, [r7, #4]
 810cc3a:	681b      	ldr	r3, [r3, #0]
 810cc3c:	681a      	ldr	r2, [r3, #0]
 810cc3e:	687b      	ldr	r3, [r7, #4]
 810cc40:	681b      	ldr	r3, [r3, #0]
 810cc42:	f022 0201 	bic.w	r2, r2, #1
 810cc46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810cc48:	687b      	ldr	r3, [r7, #4]
 810cc4a:	681b      	ldr	r3, [r3, #0]
 810cc4c:	689b      	ldr	r3, [r3, #8]
 810cc4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810cc52:	687b      	ldr	r3, [r7, #4]
 810cc54:	681b      	ldr	r3, [r3, #0]
 810cc56:	683a      	ldr	r2, [r7, #0]
 810cc58:	430a      	orrs	r2, r1
 810cc5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810cc5c:	6878      	ldr	r0, [r7, #4]
 810cc5e:	f000 f84f 	bl	810cd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810cc62:	687b      	ldr	r3, [r7, #4]
 810cc64:	681b      	ldr	r3, [r3, #0]
 810cc66:	68fa      	ldr	r2, [r7, #12]
 810cc68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cc6a:	687b      	ldr	r3, [r7, #4]
 810cc6c:	2220      	movs	r2, #32
 810cc6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810cc72:	687b      	ldr	r3, [r7, #4]
 810cc74:	2200      	movs	r2, #0
 810cc76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810cc7a:	2300      	movs	r3, #0
}
 810cc7c:	4618      	mov	r0, r3
 810cc7e:	3710      	adds	r7, #16
 810cc80:	46bd      	mov	sp, r7
 810cc82:	bd80      	pop	{r7, pc}

0810cc84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810cc84:	b580      	push	{r7, lr}
 810cc86:	b084      	sub	sp, #16
 810cc88:	af00      	add	r7, sp, #0
 810cc8a:	6078      	str	r0, [r7, #4]
 810cc8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810cc8e:	687b      	ldr	r3, [r7, #4]
 810cc90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810cc94:	2b01      	cmp	r3, #1
 810cc96:	d101      	bne.n	810cc9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810cc98:	2302      	movs	r3, #2
 810cc9a:	e02d      	b.n	810ccf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810cc9c:	687b      	ldr	r3, [r7, #4]
 810cc9e:	2201      	movs	r2, #1
 810cca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810cca4:	687b      	ldr	r3, [r7, #4]
 810cca6:	2224      	movs	r2, #36	; 0x24
 810cca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ccac:	687b      	ldr	r3, [r7, #4]
 810ccae:	681b      	ldr	r3, [r3, #0]
 810ccb0:	681b      	ldr	r3, [r3, #0]
 810ccb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ccb4:	687b      	ldr	r3, [r7, #4]
 810ccb6:	681b      	ldr	r3, [r3, #0]
 810ccb8:	681a      	ldr	r2, [r3, #0]
 810ccba:	687b      	ldr	r3, [r7, #4]
 810ccbc:	681b      	ldr	r3, [r3, #0]
 810ccbe:	f022 0201 	bic.w	r2, r2, #1
 810ccc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ccc4:	687b      	ldr	r3, [r7, #4]
 810ccc6:	681b      	ldr	r3, [r3, #0]
 810ccc8:	689b      	ldr	r3, [r3, #8]
 810ccca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810ccce:	687b      	ldr	r3, [r7, #4]
 810ccd0:	681b      	ldr	r3, [r3, #0]
 810ccd2:	683a      	ldr	r2, [r7, #0]
 810ccd4:	430a      	orrs	r2, r1
 810ccd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ccd8:	6878      	ldr	r0, [r7, #4]
 810ccda:	f000 f811 	bl	810cd00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ccde:	687b      	ldr	r3, [r7, #4]
 810cce0:	681b      	ldr	r3, [r3, #0]
 810cce2:	68fa      	ldr	r2, [r7, #12]
 810cce4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810cce6:	687b      	ldr	r3, [r7, #4]
 810cce8:	2220      	movs	r2, #32
 810ccea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ccee:	687b      	ldr	r3, [r7, #4]
 810ccf0:	2200      	movs	r2, #0
 810ccf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ccf6:	2300      	movs	r3, #0
}
 810ccf8:	4618      	mov	r0, r3
 810ccfa:	3710      	adds	r7, #16
 810ccfc:	46bd      	mov	sp, r7
 810ccfe:	bd80      	pop	{r7, pc}

0810cd00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810cd00:	b480      	push	{r7}
 810cd02:	b085      	sub	sp, #20
 810cd04:	af00      	add	r7, sp, #0
 810cd06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810cd08:	687b      	ldr	r3, [r7, #4]
 810cd0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810cd0c:	2b00      	cmp	r3, #0
 810cd0e:	d108      	bne.n	810cd22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810cd10:	687b      	ldr	r3, [r7, #4]
 810cd12:	2201      	movs	r2, #1
 810cd14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810cd18:	687b      	ldr	r3, [r7, #4]
 810cd1a:	2201      	movs	r2, #1
 810cd1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810cd20:	e031      	b.n	810cd86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810cd22:	2310      	movs	r3, #16
 810cd24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810cd26:	2310      	movs	r3, #16
 810cd28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810cd2a:	687b      	ldr	r3, [r7, #4]
 810cd2c:	681b      	ldr	r3, [r3, #0]
 810cd2e:	689b      	ldr	r3, [r3, #8]
 810cd30:	0e5b      	lsrs	r3, r3, #25
 810cd32:	b2db      	uxtb	r3, r3
 810cd34:	f003 0307 	and.w	r3, r3, #7
 810cd38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810cd3a:	687b      	ldr	r3, [r7, #4]
 810cd3c:	681b      	ldr	r3, [r3, #0]
 810cd3e:	689b      	ldr	r3, [r3, #8]
 810cd40:	0f5b      	lsrs	r3, r3, #29
 810cd42:	b2db      	uxtb	r3, r3
 810cd44:	f003 0307 	and.w	r3, r3, #7
 810cd48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810cd4a:	7bbb      	ldrb	r3, [r7, #14]
 810cd4c:	7b3a      	ldrb	r2, [r7, #12]
 810cd4e:	4911      	ldr	r1, [pc, #68]	; (810cd94 <UARTEx_SetNbDataToProcess+0x94>)
 810cd50:	5c8a      	ldrb	r2, [r1, r2]
 810cd52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810cd56:	7b3a      	ldrb	r2, [r7, #12]
 810cd58:	490f      	ldr	r1, [pc, #60]	; (810cd98 <UARTEx_SetNbDataToProcess+0x98>)
 810cd5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810cd5c:	fb93 f3f2 	sdiv	r3, r3, r2
 810cd60:	b29a      	uxth	r2, r3
 810cd62:	687b      	ldr	r3, [r7, #4]
 810cd64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810cd68:	7bfb      	ldrb	r3, [r7, #15]
 810cd6a:	7b7a      	ldrb	r2, [r7, #13]
 810cd6c:	4909      	ldr	r1, [pc, #36]	; (810cd94 <UARTEx_SetNbDataToProcess+0x94>)
 810cd6e:	5c8a      	ldrb	r2, [r1, r2]
 810cd70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810cd74:	7b7a      	ldrb	r2, [r7, #13]
 810cd76:	4908      	ldr	r1, [pc, #32]	; (810cd98 <UARTEx_SetNbDataToProcess+0x98>)
 810cd78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810cd7a:	fb93 f3f2 	sdiv	r3, r3, r2
 810cd7e:	b29a      	uxth	r2, r3
 810cd80:	687b      	ldr	r3, [r7, #4]
 810cd82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810cd86:	bf00      	nop
 810cd88:	3714      	adds	r7, #20
 810cd8a:	46bd      	mov	sp, r7
 810cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd90:	4770      	bx	lr
 810cd92:	bf00      	nop
 810cd94:	081138dc 	.word	0x081138dc
 810cd98:	081138e4 	.word	0x081138e4

0810cd9c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810cd9c:	b084      	sub	sp, #16
 810cd9e:	b480      	push	{r7}
 810cda0:	b085      	sub	sp, #20
 810cda2:	af00      	add	r7, sp, #0
 810cda4:	6078      	str	r0, [r7, #4]
 810cda6:	f107 001c 	add.w	r0, r7, #28
 810cdaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810cdae:	2300      	movs	r3, #0
 810cdb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810cdb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810cdb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810cdb6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810cdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 810cdba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 810cdbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 810cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 810cdc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810cdc4:	68fa      	ldr	r2, [r7, #12]
 810cdc6:	4313      	orrs	r3, r2
 810cdc8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810cdca:	687b      	ldr	r3, [r7, #4]
 810cdcc:	685a      	ldr	r2, [r3, #4]
 810cdce:	4b07      	ldr	r3, [pc, #28]	; (810cdec <SDMMC_Init+0x50>)
 810cdd0:	4013      	ands	r3, r2
 810cdd2:	68fa      	ldr	r2, [r7, #12]
 810cdd4:	431a      	orrs	r2, r3
 810cdd6:	687b      	ldr	r3, [r7, #4]
 810cdd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810cdda:	2300      	movs	r3, #0
}
 810cddc:	4618      	mov	r0, r3
 810cdde:	3714      	adds	r7, #20
 810cde0:	46bd      	mov	sp, r7
 810cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cde6:	b004      	add	sp, #16
 810cde8:	4770      	bx	lr
 810cdea:	bf00      	nop
 810cdec:	ffc02c00 	.word	0xffc02c00

0810cdf0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 810cdf0:	b480      	push	{r7}
 810cdf2:	b083      	sub	sp, #12
 810cdf4:	af00      	add	r7, sp, #0
 810cdf6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810cdf8:	687b      	ldr	r3, [r7, #4]
 810cdfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 810cdfe:	4618      	mov	r0, r3
 810ce00:	370c      	adds	r7, #12
 810ce02:	46bd      	mov	sp, r7
 810ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce08:	4770      	bx	lr

0810ce0a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 810ce0a:	b480      	push	{r7}
 810ce0c:	b083      	sub	sp, #12
 810ce0e:	af00      	add	r7, sp, #0
 810ce10:	6078      	str	r0, [r7, #4]
 810ce12:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 810ce14:	683b      	ldr	r3, [r7, #0]
 810ce16:	681a      	ldr	r2, [r3, #0]
 810ce18:	687b      	ldr	r3, [r7, #4]
 810ce1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810ce1e:	2300      	movs	r3, #0
}
 810ce20:	4618      	mov	r0, r3
 810ce22:	370c      	adds	r7, #12
 810ce24:	46bd      	mov	sp, r7
 810ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce2a:	4770      	bx	lr

0810ce2c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810ce2c:	b480      	push	{r7}
 810ce2e:	b083      	sub	sp, #12
 810ce30:	af00      	add	r7, sp, #0
 810ce32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810ce34:	687b      	ldr	r3, [r7, #4]
 810ce36:	681b      	ldr	r3, [r3, #0]
 810ce38:	f043 0203 	orr.w	r2, r3, #3
 810ce3c:	687b      	ldr	r3, [r7, #4]
 810ce3e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810ce40:	2300      	movs	r3, #0
}
 810ce42:	4618      	mov	r0, r3
 810ce44:	370c      	adds	r7, #12
 810ce46:	46bd      	mov	sp, r7
 810ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce4c:	4770      	bx	lr

0810ce4e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 810ce4e:	b480      	push	{r7}
 810ce50:	b083      	sub	sp, #12
 810ce52:	af00      	add	r7, sp, #0
 810ce54:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810ce56:	687b      	ldr	r3, [r7, #4]
 810ce58:	681b      	ldr	r3, [r3, #0]
 810ce5a:	f003 0303 	and.w	r3, r3, #3
}
 810ce5e:	4618      	mov	r0, r3
 810ce60:	370c      	adds	r7, #12
 810ce62:	46bd      	mov	sp, r7
 810ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce68:	4770      	bx	lr
	...

0810ce6c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 810ce6c:	b480      	push	{r7}
 810ce6e:	b085      	sub	sp, #20
 810ce70:	af00      	add	r7, sp, #0
 810ce72:	6078      	str	r0, [r7, #4]
 810ce74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810ce76:	2300      	movs	r3, #0
 810ce78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810ce7a:	683b      	ldr	r3, [r7, #0]
 810ce7c:	681a      	ldr	r2, [r3, #0]
 810ce7e:	687b      	ldr	r3, [r7, #4]
 810ce80:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810ce82:	683b      	ldr	r3, [r7, #0]
 810ce84:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810ce86:	683b      	ldr	r3, [r7, #0]
 810ce88:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810ce8a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810ce8c:	683b      	ldr	r3, [r7, #0]
 810ce8e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810ce90:	431a      	orrs	r2, r3
                       Command->CPSM);
 810ce92:	683b      	ldr	r3, [r7, #0]
 810ce94:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810ce96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810ce98:	68fa      	ldr	r2, [r7, #12]
 810ce9a:	4313      	orrs	r3, r2
 810ce9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810ce9e:	687b      	ldr	r3, [r7, #4]
 810cea0:	68da      	ldr	r2, [r3, #12]
 810cea2:	4b06      	ldr	r3, [pc, #24]	; (810cebc <SDMMC_SendCommand+0x50>)
 810cea4:	4013      	ands	r3, r2
 810cea6:	68fa      	ldr	r2, [r7, #12]
 810cea8:	431a      	orrs	r2, r3
 810ceaa:	687b      	ldr	r3, [r7, #4]
 810ceac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810ceae:	2300      	movs	r3, #0
}
 810ceb0:	4618      	mov	r0, r3
 810ceb2:	3714      	adds	r7, #20
 810ceb4:	46bd      	mov	sp, r7
 810ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ceba:	4770      	bx	lr
 810cebc:	fffee0c0 	.word	0xfffee0c0

0810cec0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 810cec0:	b480      	push	{r7}
 810cec2:	b083      	sub	sp, #12
 810cec4:	af00      	add	r7, sp, #0
 810cec6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810cec8:	687b      	ldr	r3, [r7, #4]
 810ceca:	691b      	ldr	r3, [r3, #16]
 810cecc:	b2db      	uxtb	r3, r3
}
 810cece:	4618      	mov	r0, r3
 810ced0:	370c      	adds	r7, #12
 810ced2:	46bd      	mov	sp, r7
 810ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ced8:	4770      	bx	lr

0810ceda <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810ceda:	b480      	push	{r7}
 810cedc:	b085      	sub	sp, #20
 810cede:	af00      	add	r7, sp, #0
 810cee0:	6078      	str	r0, [r7, #4]
 810cee2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810cee4:	687b      	ldr	r3, [r7, #4]
 810cee6:	3314      	adds	r3, #20
 810cee8:	461a      	mov	r2, r3
 810ceea:	683b      	ldr	r3, [r7, #0]
 810ceec:	4413      	add	r3, r2
 810ceee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810cef0:	68fb      	ldr	r3, [r7, #12]
 810cef2:	681b      	ldr	r3, [r3, #0]
}
 810cef4:	4618      	mov	r0, r3
 810cef6:	3714      	adds	r7, #20
 810cef8:	46bd      	mov	sp, r7
 810cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cefe:	4770      	bx	lr

0810cf00 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 810cf00:	b480      	push	{r7}
 810cf02:	b085      	sub	sp, #20
 810cf04:	af00      	add	r7, sp, #0
 810cf06:	6078      	str	r0, [r7, #4]
 810cf08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810cf0a:	2300      	movs	r3, #0
 810cf0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810cf0e:	683b      	ldr	r3, [r7, #0]
 810cf10:	681a      	ldr	r2, [r3, #0]
 810cf12:	687b      	ldr	r3, [r7, #4]
 810cf14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810cf16:	683b      	ldr	r3, [r7, #0]
 810cf18:	685a      	ldr	r2, [r3, #4]
 810cf1a:	687b      	ldr	r3, [r7, #4]
 810cf1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810cf1e:	683b      	ldr	r3, [r7, #0]
 810cf20:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810cf22:	683b      	ldr	r3, [r7, #0]
 810cf24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810cf26:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810cf28:	683b      	ldr	r3, [r7, #0]
 810cf2a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810cf2c:	431a      	orrs	r2, r3
                       Data->DPSM);
 810cf2e:	683b      	ldr	r3, [r7, #0]
 810cf30:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810cf32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810cf34:	68fa      	ldr	r2, [r7, #12]
 810cf36:	4313      	orrs	r3, r2
 810cf38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810cf3a:	687b      	ldr	r3, [r7, #4]
 810cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cf3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810cf42:	68fb      	ldr	r3, [r7, #12]
 810cf44:	431a      	orrs	r2, r3
 810cf46:	687b      	ldr	r3, [r7, #4]
 810cf48:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810cf4a:	2300      	movs	r3, #0

}
 810cf4c:	4618      	mov	r0, r3
 810cf4e:	3714      	adds	r7, #20
 810cf50:	46bd      	mov	sp, r7
 810cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf56:	4770      	bx	lr

0810cf58 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810cf58:	b580      	push	{r7, lr}
 810cf5a:	b088      	sub	sp, #32
 810cf5c:	af00      	add	r7, sp, #0
 810cf5e:	6078      	str	r0, [r7, #4]
 810cf60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810cf62:	683b      	ldr	r3, [r7, #0]
 810cf64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810cf66:	2310      	movs	r3, #16
 810cf68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810cf6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810cf6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810cf70:	2300      	movs	r3, #0
 810cf72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810cf74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810cf78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810cf7a:	f107 0308 	add.w	r3, r7, #8
 810cf7e:	4619      	mov	r1, r3
 810cf80:	6878      	ldr	r0, [r7, #4]
 810cf82:	f7ff ff73 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810cf86:	f241 3288 	movw	r2, #5000	; 0x1388
 810cf8a:	2110      	movs	r1, #16
 810cf8c:	6878      	ldr	r0, [r7, #4]
 810cf8e:	f000 fa81 	bl	810d494 <SDMMC_GetCmdResp1>
 810cf92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810cf94:	69fb      	ldr	r3, [r7, #28]
}
 810cf96:	4618      	mov	r0, r3
 810cf98:	3720      	adds	r7, #32
 810cf9a:	46bd      	mov	sp, r7
 810cf9c:	bd80      	pop	{r7, pc}

0810cf9e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 810cf9e:	b580      	push	{r7, lr}
 810cfa0:	b088      	sub	sp, #32
 810cfa2:	af00      	add	r7, sp, #0
 810cfa4:	6078      	str	r0, [r7, #4]
 810cfa6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 810cfa8:	683b      	ldr	r3, [r7, #0]
 810cfaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 810cfac:	2311      	movs	r3, #17
 810cfae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810cfb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 810cfb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810cfb6:	2300      	movs	r3, #0
 810cfb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810cfba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810cfbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810cfc0:	f107 0308 	add.w	r3, r7, #8
 810cfc4:	4619      	mov	r1, r3
 810cfc6:	6878      	ldr	r0, [r7, #4]
 810cfc8:	f7ff ff50 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 810cfcc:	f241 3288 	movw	r2, #5000	; 0x1388
 810cfd0:	2111      	movs	r1, #17
 810cfd2:	6878      	ldr	r0, [r7, #4]
 810cfd4:	f000 fa5e 	bl	810d494 <SDMMC_GetCmdResp1>
 810cfd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810cfda:	69fb      	ldr	r3, [r7, #28]
}
 810cfdc:	4618      	mov	r0, r3
 810cfde:	3720      	adds	r7, #32
 810cfe0:	46bd      	mov	sp, r7
 810cfe2:	bd80      	pop	{r7, pc}

0810cfe4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 810cfe4:	b580      	push	{r7, lr}
 810cfe6:	b088      	sub	sp, #32
 810cfe8:	af00      	add	r7, sp, #0
 810cfea:	6078      	str	r0, [r7, #4]
 810cfec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 810cfee:	683b      	ldr	r3, [r7, #0]
 810cff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 810cff2:	2312      	movs	r3, #18
 810cff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810cff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 810cffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810cffc:	2300      	movs	r3, #0
 810cffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d006:	f107 0308 	add.w	r3, r7, #8
 810d00a:	4619      	mov	r1, r3
 810d00c:	6878      	ldr	r0, [r7, #4]
 810d00e:	f7ff ff2d 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 810d012:	f241 3288 	movw	r2, #5000	; 0x1388
 810d016:	2112      	movs	r1, #18
 810d018:	6878      	ldr	r0, [r7, #4]
 810d01a:	f000 fa3b 	bl	810d494 <SDMMC_GetCmdResp1>
 810d01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d020:	69fb      	ldr	r3, [r7, #28]
}
 810d022:	4618      	mov	r0, r3
 810d024:	3720      	adds	r7, #32
 810d026:	46bd      	mov	sp, r7
 810d028:	bd80      	pop	{r7, pc}

0810d02a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 810d02a:	b580      	push	{r7, lr}
 810d02c:	b088      	sub	sp, #32
 810d02e:	af00      	add	r7, sp, #0
 810d030:	6078      	str	r0, [r7, #4]
 810d032:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 810d034:	683b      	ldr	r3, [r7, #0]
 810d036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 810d038:	2318      	movs	r3, #24
 810d03a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d03c:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d042:	2300      	movs	r3, #0
 810d044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d04a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d04c:	f107 0308 	add.w	r3, r7, #8
 810d050:	4619      	mov	r1, r3
 810d052:	6878      	ldr	r0, [r7, #4]
 810d054:	f7ff ff0a 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 810d058:	f241 3288 	movw	r2, #5000	; 0x1388
 810d05c:	2118      	movs	r1, #24
 810d05e:	6878      	ldr	r0, [r7, #4]
 810d060:	f000 fa18 	bl	810d494 <SDMMC_GetCmdResp1>
 810d064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d066:	69fb      	ldr	r3, [r7, #28]
}
 810d068:	4618      	mov	r0, r3
 810d06a:	3720      	adds	r7, #32
 810d06c:	46bd      	mov	sp, r7
 810d06e:	bd80      	pop	{r7, pc}

0810d070 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 810d070:	b580      	push	{r7, lr}
 810d072:	b088      	sub	sp, #32
 810d074:	af00      	add	r7, sp, #0
 810d076:	6078      	str	r0, [r7, #4]
 810d078:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 810d07a:	683b      	ldr	r3, [r7, #0]
 810d07c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 810d07e:	2319      	movs	r3, #25
 810d080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d082:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d088:	2300      	movs	r3, #0
 810d08a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d08c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d090:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d092:	f107 0308 	add.w	r3, r7, #8
 810d096:	4619      	mov	r1, r3
 810d098:	6878      	ldr	r0, [r7, #4]
 810d09a:	f7ff fee7 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 810d09e:	f241 3288 	movw	r2, #5000	; 0x1388
 810d0a2:	2119      	movs	r1, #25
 810d0a4:	6878      	ldr	r0, [r7, #4]
 810d0a6:	f000 f9f5 	bl	810d494 <SDMMC_GetCmdResp1>
 810d0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d0ac:	69fb      	ldr	r3, [r7, #28]
}
 810d0ae:	4618      	mov	r0, r3
 810d0b0:	3720      	adds	r7, #32
 810d0b2:	46bd      	mov	sp, r7
 810d0b4:	bd80      	pop	{r7, pc}
	...

0810d0b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 810d0b8:	b580      	push	{r7, lr}
 810d0ba:	b088      	sub	sp, #32
 810d0bc:	af00      	add	r7, sp, #0
 810d0be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 810d0c0:	2300      	movs	r3, #0
 810d0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 810d0c4:	230c      	movs	r3, #12
 810d0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d0c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d0cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d0ce:	2300      	movs	r3, #0
 810d0d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d0d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d0d6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 810d0d8:	687b      	ldr	r3, [r7, #4]
 810d0da:	68db      	ldr	r3, [r3, #12]
 810d0dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810d0e0:	687b      	ldr	r3, [r7, #4]
 810d0e2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 810d0e4:	687b      	ldr	r3, [r7, #4]
 810d0e6:	68db      	ldr	r3, [r3, #12]
 810d0e8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 810d0ec:	687b      	ldr	r3, [r7, #4]
 810d0ee:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d0f0:	f107 0308 	add.w	r3, r7, #8
 810d0f4:	4619      	mov	r1, r3
 810d0f6:	6878      	ldr	r0, [r7, #4]
 810d0f8:	f7ff feb8 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 810d0fc:	4a0b      	ldr	r2, [pc, #44]	; (810d12c <SDMMC_CmdStopTransfer+0x74>)
 810d0fe:	210c      	movs	r1, #12
 810d100:	6878      	ldr	r0, [r7, #4]
 810d102:	f000 f9c7 	bl	810d494 <SDMMC_GetCmdResp1>
 810d106:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 810d108:	687b      	ldr	r3, [r7, #4]
 810d10a:	68db      	ldr	r3, [r3, #12]
 810d10c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810d110:	687b      	ldr	r3, [r7, #4]
 810d112:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 810d114:	69fb      	ldr	r3, [r7, #28]
 810d116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810d11a:	d101      	bne.n	810d120 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 810d11c:	2300      	movs	r3, #0
 810d11e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 810d120:	69fb      	ldr	r3, [r7, #28]
}
 810d122:	4618      	mov	r0, r3
 810d124:	3720      	adds	r7, #32
 810d126:	46bd      	mov	sp, r7
 810d128:	bd80      	pop	{r7, pc}
 810d12a:	bf00      	nop
 810d12c:	05f5e100 	.word	0x05f5e100

0810d130 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810d130:	b580      	push	{r7, lr}
 810d132:	b088      	sub	sp, #32
 810d134:	af00      	add	r7, sp, #0
 810d136:	6078      	str	r0, [r7, #4]
 810d138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810d13a:	683b      	ldr	r3, [r7, #0]
 810d13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810d13e:	2307      	movs	r3, #7
 810d140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d142:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d148:	2300      	movs	r3, #0
 810d14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d152:	f107 0308 	add.w	r3, r7, #8
 810d156:	4619      	mov	r1, r3
 810d158:	6878      	ldr	r0, [r7, #4]
 810d15a:	f7ff fe87 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810d15e:	f241 3288 	movw	r2, #5000	; 0x1388
 810d162:	2107      	movs	r1, #7
 810d164:	6878      	ldr	r0, [r7, #4]
 810d166:	f000 f995 	bl	810d494 <SDMMC_GetCmdResp1>
 810d16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d16c:	69fb      	ldr	r3, [r7, #28]
}
 810d16e:	4618      	mov	r0, r3
 810d170:	3720      	adds	r7, #32
 810d172:	46bd      	mov	sp, r7
 810d174:	bd80      	pop	{r7, pc}

0810d176 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810d176:	b580      	push	{r7, lr}
 810d178:	b088      	sub	sp, #32
 810d17a:	af00      	add	r7, sp, #0
 810d17c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810d17e:	2300      	movs	r3, #0
 810d180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810d182:	2300      	movs	r3, #0
 810d184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810d186:	2300      	movs	r3, #0
 810d188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d18a:	2300      	movs	r3, #0
 810d18c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d18e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d194:	f107 0308 	add.w	r3, r7, #8
 810d198:	4619      	mov	r1, r3
 810d19a:	6878      	ldr	r0, [r7, #4]
 810d19c:	f7ff fe66 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810d1a0:	6878      	ldr	r0, [r7, #4]
 810d1a2:	f000 fbb9 	bl	810d918 <SDMMC_GetCmdError>
 810d1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d1a8:	69fb      	ldr	r3, [r7, #28]
}
 810d1aa:	4618      	mov	r0, r3
 810d1ac:	3720      	adds	r7, #32
 810d1ae:	46bd      	mov	sp, r7
 810d1b0:	bd80      	pop	{r7, pc}

0810d1b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810d1b2:	b580      	push	{r7, lr}
 810d1b4:	b088      	sub	sp, #32
 810d1b6:	af00      	add	r7, sp, #0
 810d1b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810d1ba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 810d1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810d1c0:	2308      	movs	r3, #8
 810d1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d1c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d1c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d1ca:	2300      	movs	r3, #0
 810d1cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d1ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d1d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d1d4:	f107 0308 	add.w	r3, r7, #8
 810d1d8:	4619      	mov	r1, r3
 810d1da:	6878      	ldr	r0, [r7, #4]
 810d1dc:	f7ff fe46 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810d1e0:	6878      	ldr	r0, [r7, #4]
 810d1e2:	f000 fb4b 	bl	810d87c <SDMMC_GetCmdResp7>
 810d1e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d1e8:	69fb      	ldr	r3, [r7, #28]
}
 810d1ea:	4618      	mov	r0, r3
 810d1ec:	3720      	adds	r7, #32
 810d1ee:	46bd      	mov	sp, r7
 810d1f0:	bd80      	pop	{r7, pc}

0810d1f2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d1f2:	b580      	push	{r7, lr}
 810d1f4:	b088      	sub	sp, #32
 810d1f6:	af00      	add	r7, sp, #0
 810d1f8:	6078      	str	r0, [r7, #4]
 810d1fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810d1fc:	683b      	ldr	r3, [r7, #0]
 810d1fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810d200:	2337      	movs	r3, #55	; 0x37
 810d202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d204:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d20a:	2300      	movs	r3, #0
 810d20c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d20e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d214:	f107 0308 	add.w	r3, r7, #8
 810d218:	4619      	mov	r1, r3
 810d21a:	6878      	ldr	r0, [r7, #4]
 810d21c:	f7ff fe26 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810d220:	f241 3288 	movw	r2, #5000	; 0x1388
 810d224:	2137      	movs	r1, #55	; 0x37
 810d226:	6878      	ldr	r0, [r7, #4]
 810d228:	f000 f934 	bl	810d494 <SDMMC_GetCmdResp1>
 810d22c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d22e:	69fb      	ldr	r3, [r7, #28]
}
 810d230:	4618      	mov	r0, r3
 810d232:	3720      	adds	r7, #32
 810d234:	46bd      	mov	sp, r7
 810d236:	bd80      	pop	{r7, pc}

0810d238 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d238:	b580      	push	{r7, lr}
 810d23a:	b088      	sub	sp, #32
 810d23c:	af00      	add	r7, sp, #0
 810d23e:	6078      	str	r0, [r7, #4]
 810d240:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810d242:	683b      	ldr	r3, [r7, #0]
 810d244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810d246:	2329      	movs	r3, #41	; 0x29
 810d248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d24a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d24e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d250:	2300      	movs	r3, #0
 810d252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d25a:	f107 0308 	add.w	r3, r7, #8
 810d25e:	4619      	mov	r1, r3
 810d260:	6878      	ldr	r0, [r7, #4]
 810d262:	f7ff fe03 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810d266:	6878      	ldr	r0, [r7, #4]
 810d268:	f000 fa50 	bl	810d70c <SDMMC_GetCmdResp3>
 810d26c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d26e:	69fb      	ldr	r3, [r7, #28]
}
 810d270:	4618      	mov	r0, r3
 810d272:	3720      	adds	r7, #32
 810d274:	46bd      	mov	sp, r7
 810d276:	bd80      	pop	{r7, pc}

0810d278 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810d278:	b580      	push	{r7, lr}
 810d27a:	b088      	sub	sp, #32
 810d27c:	af00      	add	r7, sp, #0
 810d27e:	6078      	str	r0, [r7, #4]
 810d280:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810d282:	683b      	ldr	r3, [r7, #0]
 810d284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810d286:	2306      	movs	r3, #6
 810d288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d28a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d290:	2300      	movs	r3, #0
 810d292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d298:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d29a:	f107 0308 	add.w	r3, r7, #8
 810d29e:	4619      	mov	r1, r3
 810d2a0:	6878      	ldr	r0, [r7, #4]
 810d2a2:	f7ff fde3 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810d2a6:	f241 3288 	movw	r2, #5000	; 0x1388
 810d2aa:	2106      	movs	r1, #6
 810d2ac:	6878      	ldr	r0, [r7, #4]
 810d2ae:	f000 f8f1 	bl	810d494 <SDMMC_GetCmdResp1>
 810d2b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d2b4:	69fb      	ldr	r3, [r7, #28]
}
 810d2b6:	4618      	mov	r0, r3
 810d2b8:	3720      	adds	r7, #32
 810d2ba:	46bd      	mov	sp, r7
 810d2bc:	bd80      	pop	{r7, pc}

0810d2be <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810d2be:	b580      	push	{r7, lr}
 810d2c0:	b088      	sub	sp, #32
 810d2c2:	af00      	add	r7, sp, #0
 810d2c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810d2c6:	2300      	movs	r3, #0
 810d2c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810d2ca:	2333      	movs	r3, #51	; 0x33
 810d2cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d2ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d2d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d2d4:	2300      	movs	r3, #0
 810d2d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d2d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d2dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d2de:	f107 0308 	add.w	r3, r7, #8
 810d2e2:	4619      	mov	r1, r3
 810d2e4:	6878      	ldr	r0, [r7, #4]
 810d2e6:	f7ff fdc1 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810d2ea:	f241 3288 	movw	r2, #5000	; 0x1388
 810d2ee:	2133      	movs	r1, #51	; 0x33
 810d2f0:	6878      	ldr	r0, [r7, #4]
 810d2f2:	f000 f8cf 	bl	810d494 <SDMMC_GetCmdResp1>
 810d2f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d2f8:	69fb      	ldr	r3, [r7, #28]
}
 810d2fa:	4618      	mov	r0, r3
 810d2fc:	3720      	adds	r7, #32
 810d2fe:	46bd      	mov	sp, r7
 810d300:	bd80      	pop	{r7, pc}

0810d302 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810d302:	b580      	push	{r7, lr}
 810d304:	b088      	sub	sp, #32
 810d306:	af00      	add	r7, sp, #0
 810d308:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810d30a:	2300      	movs	r3, #0
 810d30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810d30e:	2302      	movs	r3, #2
 810d310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810d312:	f44f 7340 	mov.w	r3, #768	; 0x300
 810d316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d318:	2300      	movs	r3, #0
 810d31a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d31c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d320:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d322:	f107 0308 	add.w	r3, r7, #8
 810d326:	4619      	mov	r1, r3
 810d328:	6878      	ldr	r0, [r7, #4]
 810d32a:	f7ff fd9f 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810d32e:	6878      	ldr	r0, [r7, #4]
 810d330:	f000 f9a2 	bl	810d678 <SDMMC_GetCmdResp2>
 810d334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d336:	69fb      	ldr	r3, [r7, #28]
}
 810d338:	4618      	mov	r0, r3
 810d33a:	3720      	adds	r7, #32
 810d33c:	46bd      	mov	sp, r7
 810d33e:	bd80      	pop	{r7, pc}

0810d340 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d340:	b580      	push	{r7, lr}
 810d342:	b088      	sub	sp, #32
 810d344:	af00      	add	r7, sp, #0
 810d346:	6078      	str	r0, [r7, #4]
 810d348:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810d34a:	683b      	ldr	r3, [r7, #0]
 810d34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810d34e:	2309      	movs	r3, #9
 810d350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810d352:	f44f 7340 	mov.w	r3, #768	; 0x300
 810d356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d358:	2300      	movs	r3, #0
 810d35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d35c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d362:	f107 0308 	add.w	r3, r7, #8
 810d366:	4619      	mov	r1, r3
 810d368:	6878      	ldr	r0, [r7, #4]
 810d36a:	f7ff fd7f 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810d36e:	6878      	ldr	r0, [r7, #4]
 810d370:	f000 f982 	bl	810d678 <SDMMC_GetCmdResp2>
 810d374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d376:	69fb      	ldr	r3, [r7, #28]
}
 810d378:	4618      	mov	r0, r3
 810d37a:	3720      	adds	r7, #32
 810d37c:	46bd      	mov	sp, r7
 810d37e:	bd80      	pop	{r7, pc}

0810d380 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810d380:	b580      	push	{r7, lr}
 810d382:	b088      	sub	sp, #32
 810d384:	af00      	add	r7, sp, #0
 810d386:	6078      	str	r0, [r7, #4]
 810d388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810d38a:	2300      	movs	r3, #0
 810d38c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810d38e:	2303      	movs	r3, #3
 810d390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d392:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d398:	2300      	movs	r3, #0
 810d39a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d39c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d3a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d3a2:	f107 0308 	add.w	r3, r7, #8
 810d3a6:	4619      	mov	r1, r3
 810d3a8:	6878      	ldr	r0, [r7, #4]
 810d3aa:	f7ff fd5f 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810d3ae:	683a      	ldr	r2, [r7, #0]
 810d3b0:	2103      	movs	r1, #3
 810d3b2:	6878      	ldr	r0, [r7, #4]
 810d3b4:	f000 f9ea 	bl	810d78c <SDMMC_GetCmdResp6>
 810d3b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d3ba:	69fb      	ldr	r3, [r7, #28]
}
 810d3bc:	4618      	mov	r0, r3
 810d3be:	3720      	adds	r7, #32
 810d3c0:	46bd      	mov	sp, r7
 810d3c2:	bd80      	pop	{r7, pc}

0810d3c4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810d3c4:	b580      	push	{r7, lr}
 810d3c6:	b088      	sub	sp, #32
 810d3c8:	af00      	add	r7, sp, #0
 810d3ca:	6078      	str	r0, [r7, #4]
 810d3cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810d3ce:	683b      	ldr	r3, [r7, #0]
 810d3d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810d3d2:	230d      	movs	r3, #13
 810d3d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d3d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d3da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d3dc:	2300      	movs	r3, #0
 810d3de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d3e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d3e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d3e6:	f107 0308 	add.w	r3, r7, #8
 810d3ea:	4619      	mov	r1, r3
 810d3ec:	6878      	ldr	r0, [r7, #4]
 810d3ee:	f7ff fd3d 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810d3f2:	f241 3288 	movw	r2, #5000	; 0x1388
 810d3f6:	210d      	movs	r1, #13
 810d3f8:	6878      	ldr	r0, [r7, #4]
 810d3fa:	f000 f84b 	bl	810d494 <SDMMC_GetCmdResp1>
 810d3fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d400:	69fb      	ldr	r3, [r7, #28]
}
 810d402:	4618      	mov	r0, r3
 810d404:	3720      	adds	r7, #32
 810d406:	46bd      	mov	sp, r7
 810d408:	bd80      	pop	{r7, pc}

0810d40a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810d40a:	b580      	push	{r7, lr}
 810d40c:	b088      	sub	sp, #32
 810d40e:	af00      	add	r7, sp, #0
 810d410:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810d412:	2300      	movs	r3, #0
 810d414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810d416:	230d      	movs	r3, #13
 810d418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d41a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d41e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d420:	2300      	movs	r3, #0
 810d422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d42a:	f107 0308 	add.w	r3, r7, #8
 810d42e:	4619      	mov	r1, r3
 810d430:	6878      	ldr	r0, [r7, #4]
 810d432:	f7ff fd1b 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810d436:	f241 3288 	movw	r2, #5000	; 0x1388
 810d43a:	210d      	movs	r1, #13
 810d43c:	6878      	ldr	r0, [r7, #4]
 810d43e:	f000 f829 	bl	810d494 <SDMMC_GetCmdResp1>
 810d442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d444:	69fb      	ldr	r3, [r7, #28]
}
 810d446:	4618      	mov	r0, r3
 810d448:	3720      	adds	r7, #32
 810d44a:	46bd      	mov	sp, r7
 810d44c:	bd80      	pop	{r7, pc}

0810d44e <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 810d44e:	b580      	push	{r7, lr}
 810d450:	b088      	sub	sp, #32
 810d452:	af00      	add	r7, sp, #0
 810d454:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 810d456:	2300      	movs	r3, #0
 810d458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 810d45a:	230b      	movs	r3, #11
 810d45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810d45e:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810d464:	2300      	movs	r3, #0
 810d466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810d468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d46c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810d46e:	f107 0308 	add.w	r3, r7, #8
 810d472:	4619      	mov	r1, r3
 810d474:	6878      	ldr	r0, [r7, #4]
 810d476:	f7ff fcf9 	bl	810ce6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 810d47a:	f241 3288 	movw	r2, #5000	; 0x1388
 810d47e:	210b      	movs	r1, #11
 810d480:	6878      	ldr	r0, [r7, #4]
 810d482:	f000 f807 	bl	810d494 <SDMMC_GetCmdResp1>
 810d486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810d488:	69fb      	ldr	r3, [r7, #28]
}
 810d48a:	4618      	mov	r0, r3
 810d48c:	3720      	adds	r7, #32
 810d48e:	46bd      	mov	sp, r7
 810d490:	bd80      	pop	{r7, pc}
	...

0810d494 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810d494:	b580      	push	{r7, lr}
 810d496:	b088      	sub	sp, #32
 810d498:	af00      	add	r7, sp, #0
 810d49a:	60f8      	str	r0, [r7, #12]
 810d49c:	460b      	mov	r3, r1
 810d49e:	607a      	str	r2, [r7, #4]
 810d4a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810d4a2:	4b70      	ldr	r3, [pc, #448]	; (810d664 <SDMMC_GetCmdResp1+0x1d0>)
 810d4a4:	681b      	ldr	r3, [r3, #0]
 810d4a6:	4a70      	ldr	r2, [pc, #448]	; (810d668 <SDMMC_GetCmdResp1+0x1d4>)
 810d4a8:	fba2 2303 	umull	r2, r3, r2, r3
 810d4ac:	0a5a      	lsrs	r2, r3, #9
 810d4ae:	687b      	ldr	r3, [r7, #4]
 810d4b0:	fb02 f303 	mul.w	r3, r2, r3
 810d4b4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810d4b6:	69fb      	ldr	r3, [r7, #28]
 810d4b8:	1e5a      	subs	r2, r3, #1
 810d4ba:	61fa      	str	r2, [r7, #28]
 810d4bc:	2b00      	cmp	r3, #0
 810d4be:	d102      	bne.n	810d4c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d4c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d4c4:	e0c9      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810d4c6:	68fb      	ldr	r3, [r7, #12]
 810d4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d4ca:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810d4cc:	69ba      	ldr	r2, [r7, #24]
 810d4ce:	4b67      	ldr	r3, [pc, #412]	; (810d66c <SDMMC_GetCmdResp1+0x1d8>)
 810d4d0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d4d2:	2b00      	cmp	r3, #0
 810d4d4:	d0ef      	beq.n	810d4b6 <SDMMC_GetCmdResp1+0x22>
 810d4d6:	69bb      	ldr	r3, [r7, #24]
 810d4d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810d4dc:	2b00      	cmp	r3, #0
 810d4de:	d1ea      	bne.n	810d4b6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d4e0:	68fb      	ldr	r3, [r7, #12]
 810d4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d4e4:	f003 0304 	and.w	r3, r3, #4
 810d4e8:	2b00      	cmp	r3, #0
 810d4ea:	d004      	beq.n	810d4f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d4ec:	68fb      	ldr	r3, [r7, #12]
 810d4ee:	2204      	movs	r2, #4
 810d4f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d4f2:	2304      	movs	r3, #4
 810d4f4:	e0b1      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d4f6:	68fb      	ldr	r3, [r7, #12]
 810d4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d4fa:	f003 0301 	and.w	r3, r3, #1
 810d4fe:	2b00      	cmp	r3, #0
 810d500:	d004      	beq.n	810d50c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d502:	68fb      	ldr	r3, [r7, #12]
 810d504:	2201      	movs	r2, #1
 810d506:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d508:	2301      	movs	r3, #1
 810d50a:	e0a6      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d50c:	68fb      	ldr	r3, [r7, #12]
 810d50e:	4a58      	ldr	r2, [pc, #352]	; (810d670 <SDMMC_GetCmdResp1+0x1dc>)
 810d510:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810d512:	68f8      	ldr	r0, [r7, #12]
 810d514:	f7ff fcd4 	bl	810cec0 <SDMMC_GetCommandResponse>
 810d518:	4603      	mov	r3, r0
 810d51a:	461a      	mov	r2, r3
 810d51c:	7afb      	ldrb	r3, [r7, #11]
 810d51e:	4293      	cmp	r3, r2
 810d520:	d001      	beq.n	810d526 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d522:	2301      	movs	r3, #1
 810d524:	e099      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810d526:	2100      	movs	r1, #0
 810d528:	68f8      	ldr	r0, [r7, #12]
 810d52a:	f7ff fcd6 	bl	810ceda <SDMMC_GetResponse>
 810d52e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810d530:	697a      	ldr	r2, [r7, #20]
 810d532:	4b50      	ldr	r3, [pc, #320]	; (810d674 <SDMMC_GetCmdResp1+0x1e0>)
 810d534:	4013      	ands	r3, r2
 810d536:	2b00      	cmp	r3, #0
 810d538:	d101      	bne.n	810d53e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810d53a:	2300      	movs	r3, #0
 810d53c:	e08d      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810d53e:	697b      	ldr	r3, [r7, #20]
 810d540:	2b00      	cmp	r3, #0
 810d542:	da02      	bge.n	810d54a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810d544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810d548:	e087      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810d54a:	697b      	ldr	r3, [r7, #20]
 810d54c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810d550:	2b00      	cmp	r3, #0
 810d552:	d001      	beq.n	810d558 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810d554:	2340      	movs	r3, #64	; 0x40
 810d556:	e080      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810d558:	697b      	ldr	r3, [r7, #20]
 810d55a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810d55e:	2b00      	cmp	r3, #0
 810d560:	d001      	beq.n	810d566 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810d562:	2380      	movs	r3, #128	; 0x80
 810d564:	e079      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810d566:	697b      	ldr	r3, [r7, #20]
 810d568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810d56c:	2b00      	cmp	r3, #0
 810d56e:	d002      	beq.n	810d576 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810d570:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d574:	e071      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810d576:	697b      	ldr	r3, [r7, #20]
 810d578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810d57c:	2b00      	cmp	r3, #0
 810d57e:	d002      	beq.n	810d586 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810d580:	f44f 7300 	mov.w	r3, #512	; 0x200
 810d584:	e069      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810d586:	697b      	ldr	r3, [r7, #20]
 810d588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810d58c:	2b00      	cmp	r3, #0
 810d58e:	d002      	beq.n	810d596 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810d590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d594:	e061      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810d596:	697b      	ldr	r3, [r7, #20]
 810d598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810d59c:	2b00      	cmp	r3, #0
 810d59e:	d002      	beq.n	810d5a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810d5a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d5a4:	e059      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810d5a6:	697b      	ldr	r3, [r7, #20]
 810d5a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810d5ac:	2b00      	cmp	r3, #0
 810d5ae:	d002      	beq.n	810d5b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810d5b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d5b4:	e051      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810d5b6:	697b      	ldr	r3, [r7, #20]
 810d5b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810d5bc:	2b00      	cmp	r3, #0
 810d5be:	d002      	beq.n	810d5c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810d5c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810d5c4:	e049      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810d5c6:	697b      	ldr	r3, [r7, #20]
 810d5c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810d5cc:	2b00      	cmp	r3, #0
 810d5ce:	d002      	beq.n	810d5d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810d5d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810d5d4:	e041      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810d5d6:	697b      	ldr	r3, [r7, #20]
 810d5d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810d5dc:	2b00      	cmp	r3, #0
 810d5de:	d002      	beq.n	810d5e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810d5e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810d5e4:	e039      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810d5e6:	697b      	ldr	r3, [r7, #20]
 810d5e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810d5ec:	2b00      	cmp	r3, #0
 810d5ee:	d002      	beq.n	810d5f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810d5f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810d5f4:	e031      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810d5f6:	697b      	ldr	r3, [r7, #20]
 810d5f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810d5fc:	2b00      	cmp	r3, #0
 810d5fe:	d002      	beq.n	810d606 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810d600:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810d604:	e029      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810d606:	697b      	ldr	r3, [r7, #20]
 810d608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810d60c:	2b00      	cmp	r3, #0
 810d60e:	d002      	beq.n	810d616 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810d610:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810d614:	e021      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810d616:	697b      	ldr	r3, [r7, #20]
 810d618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810d61c:	2b00      	cmp	r3, #0
 810d61e:	d002      	beq.n	810d626 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810d620:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 810d624:	e019      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810d626:	697b      	ldr	r3, [r7, #20]
 810d628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810d62c:	2b00      	cmp	r3, #0
 810d62e:	d002      	beq.n	810d636 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810d630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810d634:	e011      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810d636:	697b      	ldr	r3, [r7, #20]
 810d638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810d63c:	2b00      	cmp	r3, #0
 810d63e:	d002      	beq.n	810d646 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810d640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810d644:	e009      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810d646:	697b      	ldr	r3, [r7, #20]
 810d648:	f003 0308 	and.w	r3, r3, #8
 810d64c:	2b00      	cmp	r3, #0
 810d64e:	d002      	beq.n	810d656 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810d650:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 810d654:	e001      	b.n	810d65a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810d656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810d65a:	4618      	mov	r0, r3
 810d65c:	3720      	adds	r7, #32
 810d65e:	46bd      	mov	sp, r7
 810d660:	bd80      	pop	{r7, pc}
 810d662:	bf00      	nop
 810d664:	10000000 	.word	0x10000000
 810d668:	10624dd3 	.word	0x10624dd3
 810d66c:	00200045 	.word	0x00200045
 810d670:	002000c5 	.word	0x002000c5
 810d674:	fdffe008 	.word	0xfdffe008

0810d678 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810d678:	b480      	push	{r7}
 810d67a:	b085      	sub	sp, #20
 810d67c:	af00      	add	r7, sp, #0
 810d67e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d680:	4b1f      	ldr	r3, [pc, #124]	; (810d700 <SDMMC_GetCmdResp2+0x88>)
 810d682:	681b      	ldr	r3, [r3, #0]
 810d684:	4a1f      	ldr	r2, [pc, #124]	; (810d704 <SDMMC_GetCmdResp2+0x8c>)
 810d686:	fba2 2303 	umull	r2, r3, r2, r3
 810d68a:	0a5b      	lsrs	r3, r3, #9
 810d68c:	f241 3288 	movw	r2, #5000	; 0x1388
 810d690:	fb02 f303 	mul.w	r3, r2, r3
 810d694:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d696:	68fb      	ldr	r3, [r7, #12]
 810d698:	1e5a      	subs	r2, r3, #1
 810d69a:	60fa      	str	r2, [r7, #12]
 810d69c:	2b00      	cmp	r3, #0
 810d69e:	d102      	bne.n	810d6a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d6a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d6a4:	e026      	b.n	810d6f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810d6a6:	687b      	ldr	r3, [r7, #4]
 810d6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d6aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d6ac:	68bb      	ldr	r3, [r7, #8]
 810d6ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d6b2:	2b00      	cmp	r3, #0
 810d6b4:	d0ef      	beq.n	810d696 <SDMMC_GetCmdResp2+0x1e>
 810d6b6:	68bb      	ldr	r3, [r7, #8]
 810d6b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d6bc:	2b00      	cmp	r3, #0
 810d6be:	d1ea      	bne.n	810d696 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d6c0:	687b      	ldr	r3, [r7, #4]
 810d6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d6c4:	f003 0304 	and.w	r3, r3, #4
 810d6c8:	2b00      	cmp	r3, #0
 810d6ca:	d004      	beq.n	810d6d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d6cc:	687b      	ldr	r3, [r7, #4]
 810d6ce:	2204      	movs	r2, #4
 810d6d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d6d2:	2304      	movs	r3, #4
 810d6d4:	e00e      	b.n	810d6f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d6d6:	687b      	ldr	r3, [r7, #4]
 810d6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d6da:	f003 0301 	and.w	r3, r3, #1
 810d6de:	2b00      	cmp	r3, #0
 810d6e0:	d004      	beq.n	810d6ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d6e2:	687b      	ldr	r3, [r7, #4]
 810d6e4:	2201      	movs	r2, #1
 810d6e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d6e8:	2301      	movs	r3, #1
 810d6ea:	e003      	b.n	810d6f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d6ec:	687b      	ldr	r3, [r7, #4]
 810d6ee:	4a06      	ldr	r2, [pc, #24]	; (810d708 <SDMMC_GetCmdResp2+0x90>)
 810d6f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810d6f2:	2300      	movs	r3, #0
}
 810d6f4:	4618      	mov	r0, r3
 810d6f6:	3714      	adds	r7, #20
 810d6f8:	46bd      	mov	sp, r7
 810d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d6fe:	4770      	bx	lr
 810d700:	10000000 	.word	0x10000000
 810d704:	10624dd3 	.word	0x10624dd3
 810d708:	002000c5 	.word	0x002000c5

0810d70c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810d70c:	b480      	push	{r7}
 810d70e:	b085      	sub	sp, #20
 810d710:	af00      	add	r7, sp, #0
 810d712:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d714:	4b1a      	ldr	r3, [pc, #104]	; (810d780 <SDMMC_GetCmdResp3+0x74>)
 810d716:	681b      	ldr	r3, [r3, #0]
 810d718:	4a1a      	ldr	r2, [pc, #104]	; (810d784 <SDMMC_GetCmdResp3+0x78>)
 810d71a:	fba2 2303 	umull	r2, r3, r2, r3
 810d71e:	0a5b      	lsrs	r3, r3, #9
 810d720:	f241 3288 	movw	r2, #5000	; 0x1388
 810d724:	fb02 f303 	mul.w	r3, r2, r3
 810d728:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d72a:	68fb      	ldr	r3, [r7, #12]
 810d72c:	1e5a      	subs	r2, r3, #1
 810d72e:	60fa      	str	r2, [r7, #12]
 810d730:	2b00      	cmp	r3, #0
 810d732:	d102      	bne.n	810d73a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d734:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d738:	e01b      	b.n	810d772 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810d73a:	687b      	ldr	r3, [r7, #4]
 810d73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d73e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d740:	68bb      	ldr	r3, [r7, #8]
 810d742:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d746:	2b00      	cmp	r3, #0
 810d748:	d0ef      	beq.n	810d72a <SDMMC_GetCmdResp3+0x1e>
 810d74a:	68bb      	ldr	r3, [r7, #8]
 810d74c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d750:	2b00      	cmp	r3, #0
 810d752:	d1ea      	bne.n	810d72a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d754:	687b      	ldr	r3, [r7, #4]
 810d756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d758:	f003 0304 	and.w	r3, r3, #4
 810d75c:	2b00      	cmp	r3, #0
 810d75e:	d004      	beq.n	810d76a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d760:	687b      	ldr	r3, [r7, #4]
 810d762:	2204      	movs	r2, #4
 810d764:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d766:	2304      	movs	r3, #4
 810d768:	e003      	b.n	810d772 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d76a:	687b      	ldr	r3, [r7, #4]
 810d76c:	4a06      	ldr	r2, [pc, #24]	; (810d788 <SDMMC_GetCmdResp3+0x7c>)
 810d76e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810d770:	2300      	movs	r3, #0
}
 810d772:	4618      	mov	r0, r3
 810d774:	3714      	adds	r7, #20
 810d776:	46bd      	mov	sp, r7
 810d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d77c:	4770      	bx	lr
 810d77e:	bf00      	nop
 810d780:	10000000 	.word	0x10000000
 810d784:	10624dd3 	.word	0x10624dd3
 810d788:	002000c5 	.word	0x002000c5

0810d78c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810d78c:	b580      	push	{r7, lr}
 810d78e:	b088      	sub	sp, #32
 810d790:	af00      	add	r7, sp, #0
 810d792:	60f8      	str	r0, [r7, #12]
 810d794:	460b      	mov	r3, r1
 810d796:	607a      	str	r2, [r7, #4]
 810d798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d79a:	4b35      	ldr	r3, [pc, #212]	; (810d870 <SDMMC_GetCmdResp6+0xe4>)
 810d79c:	681b      	ldr	r3, [r3, #0]
 810d79e:	4a35      	ldr	r2, [pc, #212]	; (810d874 <SDMMC_GetCmdResp6+0xe8>)
 810d7a0:	fba2 2303 	umull	r2, r3, r2, r3
 810d7a4:	0a5b      	lsrs	r3, r3, #9
 810d7a6:	f241 3288 	movw	r2, #5000	; 0x1388
 810d7aa:	fb02 f303 	mul.w	r3, r2, r3
 810d7ae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810d7b0:	69fb      	ldr	r3, [r7, #28]
 810d7b2:	1e5a      	subs	r2, r3, #1
 810d7b4:	61fa      	str	r2, [r7, #28]
 810d7b6:	2b00      	cmp	r3, #0
 810d7b8:	d102      	bne.n	810d7c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d7ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d7be:	e052      	b.n	810d866 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810d7c0:	68fb      	ldr	r3, [r7, #12]
 810d7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d7c4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d7c6:	69bb      	ldr	r3, [r7, #24]
 810d7c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d7cc:	2b00      	cmp	r3, #0
 810d7ce:	d0ef      	beq.n	810d7b0 <SDMMC_GetCmdResp6+0x24>
 810d7d0:	69bb      	ldr	r3, [r7, #24]
 810d7d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d7d6:	2b00      	cmp	r3, #0
 810d7d8:	d1ea      	bne.n	810d7b0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d7da:	68fb      	ldr	r3, [r7, #12]
 810d7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d7de:	f003 0304 	and.w	r3, r3, #4
 810d7e2:	2b00      	cmp	r3, #0
 810d7e4:	d004      	beq.n	810d7f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d7e6:	68fb      	ldr	r3, [r7, #12]
 810d7e8:	2204      	movs	r2, #4
 810d7ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d7ec:	2304      	movs	r3, #4
 810d7ee:	e03a      	b.n	810d866 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d7f0:	68fb      	ldr	r3, [r7, #12]
 810d7f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d7f4:	f003 0301 	and.w	r3, r3, #1
 810d7f8:	2b00      	cmp	r3, #0
 810d7fa:	d004      	beq.n	810d806 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d7fc:	68fb      	ldr	r3, [r7, #12]
 810d7fe:	2201      	movs	r2, #1
 810d800:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d802:	2301      	movs	r3, #1
 810d804:	e02f      	b.n	810d866 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810d806:	68f8      	ldr	r0, [r7, #12]
 810d808:	f7ff fb5a 	bl	810cec0 <SDMMC_GetCommandResponse>
 810d80c:	4603      	mov	r3, r0
 810d80e:	461a      	mov	r2, r3
 810d810:	7afb      	ldrb	r3, [r7, #11]
 810d812:	4293      	cmp	r3, r2
 810d814:	d001      	beq.n	810d81a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d816:	2301      	movs	r3, #1
 810d818:	e025      	b.n	810d866 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d81a:	68fb      	ldr	r3, [r7, #12]
 810d81c:	4a16      	ldr	r2, [pc, #88]	; (810d878 <SDMMC_GetCmdResp6+0xec>)
 810d81e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810d820:	2100      	movs	r1, #0
 810d822:	68f8      	ldr	r0, [r7, #12]
 810d824:	f7ff fb59 	bl	810ceda <SDMMC_GetResponse>
 810d828:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810d82a:	697b      	ldr	r3, [r7, #20]
 810d82c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810d830:	2b00      	cmp	r3, #0
 810d832:	d106      	bne.n	810d842 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810d834:	697b      	ldr	r3, [r7, #20]
 810d836:	0c1b      	lsrs	r3, r3, #16
 810d838:	b29a      	uxth	r2, r3
 810d83a:	687b      	ldr	r3, [r7, #4]
 810d83c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810d83e:	2300      	movs	r3, #0
 810d840:	e011      	b.n	810d866 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810d842:	697b      	ldr	r3, [r7, #20]
 810d844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810d848:	2b00      	cmp	r3, #0
 810d84a:	d002      	beq.n	810d852 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810d84c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810d850:	e009      	b.n	810d866 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810d852:	697b      	ldr	r3, [r7, #20]
 810d854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810d858:	2b00      	cmp	r3, #0
 810d85a:	d002      	beq.n	810d862 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810d85c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810d860:	e001      	b.n	810d866 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810d862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810d866:	4618      	mov	r0, r3
 810d868:	3720      	adds	r7, #32
 810d86a:	46bd      	mov	sp, r7
 810d86c:	bd80      	pop	{r7, pc}
 810d86e:	bf00      	nop
 810d870:	10000000 	.word	0x10000000
 810d874:	10624dd3 	.word	0x10624dd3
 810d878:	002000c5 	.word	0x002000c5

0810d87c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810d87c:	b480      	push	{r7}
 810d87e:	b085      	sub	sp, #20
 810d880:	af00      	add	r7, sp, #0
 810d882:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d884:	4b22      	ldr	r3, [pc, #136]	; (810d910 <SDMMC_GetCmdResp7+0x94>)
 810d886:	681b      	ldr	r3, [r3, #0]
 810d888:	4a22      	ldr	r2, [pc, #136]	; (810d914 <SDMMC_GetCmdResp7+0x98>)
 810d88a:	fba2 2303 	umull	r2, r3, r2, r3
 810d88e:	0a5b      	lsrs	r3, r3, #9
 810d890:	f241 3288 	movw	r2, #5000	; 0x1388
 810d894:	fb02 f303 	mul.w	r3, r2, r3
 810d898:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d89a:	68fb      	ldr	r3, [r7, #12]
 810d89c:	1e5a      	subs	r2, r3, #1
 810d89e:	60fa      	str	r2, [r7, #12]
 810d8a0:	2b00      	cmp	r3, #0
 810d8a2:	d102      	bne.n	810d8aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d8a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d8a8:	e02c      	b.n	810d904 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810d8aa:	687b      	ldr	r3, [r7, #4]
 810d8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d8ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d8b0:	68bb      	ldr	r3, [r7, #8]
 810d8b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810d8b6:	2b00      	cmp	r3, #0
 810d8b8:	d0ef      	beq.n	810d89a <SDMMC_GetCmdResp7+0x1e>
 810d8ba:	68bb      	ldr	r3, [r7, #8]
 810d8bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810d8c0:	2b00      	cmp	r3, #0
 810d8c2:	d1ea      	bne.n	810d89a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810d8c4:	687b      	ldr	r3, [r7, #4]
 810d8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d8c8:	f003 0304 	and.w	r3, r3, #4
 810d8cc:	2b00      	cmp	r3, #0
 810d8ce:	d004      	beq.n	810d8da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810d8d0:	687b      	ldr	r3, [r7, #4]
 810d8d2:	2204      	movs	r2, #4
 810d8d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810d8d6:	2304      	movs	r3, #4
 810d8d8:	e014      	b.n	810d904 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810d8da:	687b      	ldr	r3, [r7, #4]
 810d8dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d8de:	f003 0301 	and.w	r3, r3, #1
 810d8e2:	2b00      	cmp	r3, #0
 810d8e4:	d004      	beq.n	810d8f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810d8e6:	687b      	ldr	r3, [r7, #4]
 810d8e8:	2201      	movs	r2, #1
 810d8ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810d8ec:	2301      	movs	r3, #1
 810d8ee:	e009      	b.n	810d904 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810d8f0:	687b      	ldr	r3, [r7, #4]
 810d8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810d8f8:	2b00      	cmp	r3, #0
 810d8fa:	d002      	beq.n	810d902 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810d8fc:	687b      	ldr	r3, [r7, #4]
 810d8fe:	2240      	movs	r2, #64	; 0x40
 810d900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810d902:	2300      	movs	r3, #0

}
 810d904:	4618      	mov	r0, r3
 810d906:	3714      	adds	r7, #20
 810d908:	46bd      	mov	sp, r7
 810d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d90e:	4770      	bx	lr
 810d910:	10000000 	.word	0x10000000
 810d914:	10624dd3 	.word	0x10624dd3

0810d918 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810d918:	b480      	push	{r7}
 810d91a:	b085      	sub	sp, #20
 810d91c:	af00      	add	r7, sp, #0
 810d91e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810d920:	4b11      	ldr	r3, [pc, #68]	; (810d968 <SDMMC_GetCmdError+0x50>)
 810d922:	681b      	ldr	r3, [r3, #0]
 810d924:	4a11      	ldr	r2, [pc, #68]	; (810d96c <SDMMC_GetCmdError+0x54>)
 810d926:	fba2 2303 	umull	r2, r3, r2, r3
 810d92a:	0a5b      	lsrs	r3, r3, #9
 810d92c:	f241 3288 	movw	r2, #5000	; 0x1388
 810d930:	fb02 f303 	mul.w	r3, r2, r3
 810d934:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810d936:	68fb      	ldr	r3, [r7, #12]
 810d938:	1e5a      	subs	r2, r3, #1
 810d93a:	60fa      	str	r2, [r7, #12]
 810d93c:	2b00      	cmp	r3, #0
 810d93e:	d102      	bne.n	810d946 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810d940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810d944:	e009      	b.n	810d95a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810d946:	687b      	ldr	r3, [r7, #4]
 810d948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810d94e:	2b00      	cmp	r3, #0
 810d950:	d0f1      	beq.n	810d936 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810d952:	687b      	ldr	r3, [r7, #4]
 810d954:	4a06      	ldr	r2, [pc, #24]	; (810d970 <SDMMC_GetCmdError+0x58>)
 810d956:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 810d958:	2300      	movs	r3, #0
}
 810d95a:	4618      	mov	r0, r3
 810d95c:	3714      	adds	r7, #20
 810d95e:	46bd      	mov	sp, r7
 810d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d964:	4770      	bx	lr
 810d966:	bf00      	nop
 810d968:	10000000 	.word	0x10000000
 810d96c:	10624dd3 	.word	0x10624dd3
 810d970:	002000c5 	.word	0x002000c5

0810d974 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 810d974:	b580      	push	{r7, lr}
 810d976:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 810d978:	4904      	ldr	r1, [pc, #16]	; (810d98c <MX_FATFS_Init+0x18>)
 810d97a:	4805      	ldr	r0, [pc, #20]	; (810d990 <MX_FATFS_Init+0x1c>)
 810d97c:	f000 fa8a 	bl	810de94 <FATFS_LinkDriver>
 810d980:	4603      	mov	r3, r0
 810d982:	461a      	mov	r2, r3
 810d984:	4b03      	ldr	r3, [pc, #12]	; (810d994 <MX_FATFS_Init+0x20>)
 810d986:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 810d988:	bf00      	nop
 810d98a:	bd80      	pop	{r7, pc}
 810d98c:	10004edc 	.word	0x10004edc
 810d990:	081138ec 	.word	0x081138ec
 810d994:	10004ed8 	.word	0x10004ed8

0810d998 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 810d998:	b580      	push	{r7, lr}
 810d99a:	b082      	sub	sp, #8
 810d99c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 810d99e:	2300      	movs	r3, #0
 810d9a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 810d9a2:	f000 f885 	bl	810dab0 <BSP_SD_IsDetected>
 810d9a6:	4603      	mov	r3, r0
 810d9a8:	2b01      	cmp	r3, #1
 810d9aa:	d001      	beq.n	810d9b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 810d9ac:	2302      	movs	r3, #2
 810d9ae:	e012      	b.n	810d9d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 810d9b0:	480b      	ldr	r0, [pc, #44]	; (810d9e0 <BSP_SD_Init+0x48>)
 810d9b2:	f7fa ff7d 	bl	81088b0 <HAL_SD_Init>
 810d9b6:	4603      	mov	r3, r0
 810d9b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 810d9ba:	79fb      	ldrb	r3, [r7, #7]
 810d9bc:	2b00      	cmp	r3, #0
 810d9be:	d109      	bne.n	810d9d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 810d9c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810d9c4:	4806      	ldr	r0, [pc, #24]	; (810d9e0 <BSP_SD_Init+0x48>)
 810d9c6:	f7fb fe41 	bl	810964c <HAL_SD_ConfigWideBusOperation>
 810d9ca:	4603      	mov	r3, r0
 810d9cc:	2b00      	cmp	r3, #0
 810d9ce:	d001      	beq.n	810d9d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 810d9d0:	2301      	movs	r3, #1
 810d9d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 810d9d4:	79fb      	ldrb	r3, [r7, #7]
}
 810d9d6:	4618      	mov	r0, r3
 810d9d8:	3708      	adds	r7, #8
 810d9da:	46bd      	mov	sp, r7
 810d9dc:	bd80      	pop	{r7, pc}
 810d9de:	bf00      	nop
 810d9e0:	10004ca4 	.word	0x10004ca4

0810d9e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 810d9e4:	b580      	push	{r7, lr}
 810d9e6:	b086      	sub	sp, #24
 810d9e8:	af00      	add	r7, sp, #0
 810d9ea:	60f8      	str	r0, [r7, #12]
 810d9ec:	60b9      	str	r1, [r7, #8]
 810d9ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 810d9f0:	2300      	movs	r3, #0
 810d9f2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 810d9f4:	687b      	ldr	r3, [r7, #4]
 810d9f6:	68ba      	ldr	r2, [r7, #8]
 810d9f8:	68f9      	ldr	r1, [r7, #12]
 810d9fa:	4806      	ldr	r0, [pc, #24]	; (810da14 <BSP_SD_ReadBlocks_DMA+0x30>)
 810d9fc:	f7fb f884 	bl	8108b08 <HAL_SD_ReadBlocks_DMA>
 810da00:	4603      	mov	r3, r0
 810da02:	2b00      	cmp	r3, #0
 810da04:	d001      	beq.n	810da0a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 810da06:	2301      	movs	r3, #1
 810da08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 810da0a:	7dfb      	ldrb	r3, [r7, #23]
}
 810da0c:	4618      	mov	r0, r3
 810da0e:	3718      	adds	r7, #24
 810da10:	46bd      	mov	sp, r7
 810da12:	bd80      	pop	{r7, pc}
 810da14:	10004ca4 	.word	0x10004ca4

0810da18 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 810da18:	b580      	push	{r7, lr}
 810da1a:	b086      	sub	sp, #24
 810da1c:	af00      	add	r7, sp, #0
 810da1e:	60f8      	str	r0, [r7, #12]
 810da20:	60b9      	str	r1, [r7, #8]
 810da22:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 810da24:	2300      	movs	r3, #0
 810da26:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 810da28:	687b      	ldr	r3, [r7, #4]
 810da2a:	68ba      	ldr	r2, [r7, #8]
 810da2c:	68f9      	ldr	r1, [r7, #12]
 810da2e:	4806      	ldr	r0, [pc, #24]	; (810da48 <BSP_SD_WriteBlocks_DMA+0x30>)
 810da30:	f7fb f912 	bl	8108c58 <HAL_SD_WriteBlocks_DMA>
 810da34:	4603      	mov	r3, r0
 810da36:	2b00      	cmp	r3, #0
 810da38:	d001      	beq.n	810da3e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 810da3a:	2301      	movs	r3, #1
 810da3c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 810da3e:	7dfb      	ldrb	r3, [r7, #23]
}
 810da40:	4618      	mov	r0, r3
 810da42:	3718      	adds	r7, #24
 810da44:	46bd      	mov	sp, r7
 810da46:	bd80      	pop	{r7, pc}
 810da48:	10004ca4 	.word	0x10004ca4

0810da4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 810da4c:	b580      	push	{r7, lr}
 810da4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 810da50:	4805      	ldr	r0, [pc, #20]	; (810da68 <BSP_SD_GetCardState+0x1c>)
 810da52:	f7fb ff0f 	bl	8109874 <HAL_SD_GetCardState>
 810da56:	4603      	mov	r3, r0
 810da58:	2b04      	cmp	r3, #4
 810da5a:	bf14      	ite	ne
 810da5c:	2301      	movne	r3, #1
 810da5e:	2300      	moveq	r3, #0
 810da60:	b2db      	uxtb	r3, r3
}
 810da62:	4618      	mov	r0, r3
 810da64:	bd80      	pop	{r7, pc}
 810da66:	bf00      	nop
 810da68:	10004ca4 	.word	0x10004ca4

0810da6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 810da6c:	b580      	push	{r7, lr}
 810da6e:	b082      	sub	sp, #8
 810da70:	af00      	add	r7, sp, #0
 810da72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 810da74:	6879      	ldr	r1, [r7, #4]
 810da76:	4803      	ldr	r0, [pc, #12]	; (810da84 <BSP_SD_GetCardInfo+0x18>)
 810da78:	f7fb fdbc 	bl	81095f4 <HAL_SD_GetCardInfo>
}
 810da7c:	bf00      	nop
 810da7e:	3708      	adds	r7, #8
 810da80:	46bd      	mov	sp, r7
 810da82:	bd80      	pop	{r7, pc}
 810da84:	10004ca4 	.word	0x10004ca4

0810da88 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 810da88:	b580      	push	{r7, lr}
 810da8a:	b082      	sub	sp, #8
 810da8c:	af00      	add	r7, sp, #0
 810da8e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 810da90:	f000 f990 	bl	810ddb4 <BSP_SD_WriteCpltCallback>
}
 810da94:	bf00      	nop
 810da96:	3708      	adds	r7, #8
 810da98:	46bd      	mov	sp, r7
 810da9a:	bd80      	pop	{r7, pc}

0810da9c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 810da9c:	b580      	push	{r7, lr}
 810da9e:	b082      	sub	sp, #8
 810daa0:	af00      	add	r7, sp, #0
 810daa2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 810daa4:	f000 f998 	bl	810ddd8 <BSP_SD_ReadCpltCallback>
}
 810daa8:	bf00      	nop
 810daaa:	3708      	adds	r7, #8
 810daac:	46bd      	mov	sp, r7
 810daae:	bd80      	pop	{r7, pc}

0810dab0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 810dab0:	b480      	push	{r7}
 810dab2:	b083      	sub	sp, #12
 810dab4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 810dab6:	2301      	movs	r3, #1
 810dab8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 810daba:	79fb      	ldrb	r3, [r7, #7]
 810dabc:	b2db      	uxtb	r3, r3
}
 810dabe:	4618      	mov	r0, r3
 810dac0:	370c      	adds	r7, #12
 810dac2:	46bd      	mov	sp, r7
 810dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dac8:	4770      	bx	lr

0810daca <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 810daca:	b580      	push	{r7, lr}
 810dacc:	b084      	sub	sp, #16
 810dace:	af00      	add	r7, sp, #0
 810dad0:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 810dad2:	f000 fa9f 	bl	810e014 <osKernelGetTickCount>
 810dad6:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 810dad8:	e006      	b.n	810dae8 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 810dada:	f7ff ffb7 	bl	810da4c <BSP_SD_GetCardState>
 810dade:	4603      	mov	r3, r0
 810dae0:	2b00      	cmp	r3, #0
 810dae2:	d101      	bne.n	810dae8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 810dae4:	2300      	movs	r3, #0
 810dae6:	e009      	b.n	810dafc <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 810dae8:	f000 fa94 	bl	810e014 <osKernelGetTickCount>
 810daec:	4602      	mov	r2, r0
 810daee:	68fb      	ldr	r3, [r7, #12]
 810daf0:	1ad3      	subs	r3, r2, r3
 810daf2:	687a      	ldr	r2, [r7, #4]
 810daf4:	429a      	cmp	r2, r3
 810daf6:	d8f0      	bhi.n	810dada <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 810daf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 810dafc:	4618      	mov	r0, r3
 810dafe:	3710      	adds	r7, #16
 810db00:	46bd      	mov	sp, r7
 810db02:	bd80      	pop	{r7, pc}

0810db04 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 810db04:	b580      	push	{r7, lr}
 810db06:	b082      	sub	sp, #8
 810db08:	af00      	add	r7, sp, #0
 810db0a:	4603      	mov	r3, r0
 810db0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 810db0e:	4b0b      	ldr	r3, [pc, #44]	; (810db3c <SD_CheckStatus+0x38>)
 810db10:	2201      	movs	r2, #1
 810db12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 810db14:	f7ff ff9a 	bl	810da4c <BSP_SD_GetCardState>
 810db18:	4603      	mov	r3, r0
 810db1a:	2b00      	cmp	r3, #0
 810db1c:	d107      	bne.n	810db2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 810db1e:	4b07      	ldr	r3, [pc, #28]	; (810db3c <SD_CheckStatus+0x38>)
 810db20:	781b      	ldrb	r3, [r3, #0]
 810db22:	b2db      	uxtb	r3, r3
 810db24:	f023 0301 	bic.w	r3, r3, #1
 810db28:	b2da      	uxtb	r2, r3
 810db2a:	4b04      	ldr	r3, [pc, #16]	; (810db3c <SD_CheckStatus+0x38>)
 810db2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 810db2e:	4b03      	ldr	r3, [pc, #12]	; (810db3c <SD_CheckStatus+0x38>)
 810db30:	781b      	ldrb	r3, [r3, #0]
 810db32:	b2db      	uxtb	r3, r3
}
 810db34:	4618      	mov	r0, r3
 810db36:	3708      	adds	r7, #8
 810db38:	46bd      	mov	sp, r7
 810db3a:	bd80      	pop	{r7, pc}
 810db3c:	1000000d 	.word	0x1000000d

0810db40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 810db40:	b580      	push	{r7, lr}
 810db42:	b082      	sub	sp, #8
 810db44:	af00      	add	r7, sp, #0
 810db46:	4603      	mov	r3, r0
 810db48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 810db4a:	4b1c      	ldr	r3, [pc, #112]	; (810dbbc <SD_initialize+0x7c>)
 810db4c:	2201      	movs	r2, #1
 810db4e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 810db50:	f000 fa18 	bl	810df84 <osKernelGetState>
 810db54:	4603      	mov	r3, r0
 810db56:	2b02      	cmp	r3, #2
 810db58:	d129      	bne.n	810dbae <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 810db5a:	f7ff ff1d 	bl	810d998 <BSP_SD_Init>
 810db5e:	4603      	mov	r3, r0
 810db60:	2b00      	cmp	r3, #0
 810db62:	d107      	bne.n	810db74 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 810db64:	79fb      	ldrb	r3, [r7, #7]
 810db66:	4618      	mov	r0, r3
 810db68:	f7ff ffcc 	bl	810db04 <SD_CheckStatus>
 810db6c:	4603      	mov	r3, r0
 810db6e:	461a      	mov	r2, r3
 810db70:	4b12      	ldr	r3, [pc, #72]	; (810dbbc <SD_initialize+0x7c>)
 810db72:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 810db74:	4b11      	ldr	r3, [pc, #68]	; (810dbbc <SD_initialize+0x7c>)
 810db76:	781b      	ldrb	r3, [r3, #0]
 810db78:	b2db      	uxtb	r3, r3
 810db7a:	2b01      	cmp	r3, #1
 810db7c:	d017      	beq.n	810dbae <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 810db7e:	4b10      	ldr	r3, [pc, #64]	; (810dbc0 <SD_initialize+0x80>)
 810db80:	681b      	ldr	r3, [r3, #0]
 810db82:	2b00      	cmp	r3, #0
 810db84:	d107      	bne.n	810db96 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 810db86:	2200      	movs	r2, #0
 810db88:	2102      	movs	r1, #2
 810db8a:	200a      	movs	r0, #10
 810db8c:	f000 fb04 	bl	810e198 <osMessageQueueNew>
 810db90:	4603      	mov	r3, r0
 810db92:	4a0b      	ldr	r2, [pc, #44]	; (810dbc0 <SD_initialize+0x80>)
 810db94:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 810db96:	4b0a      	ldr	r3, [pc, #40]	; (810dbc0 <SD_initialize+0x80>)
 810db98:	681b      	ldr	r3, [r3, #0]
 810db9a:	2b00      	cmp	r3, #0
 810db9c:	d107      	bne.n	810dbae <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 810db9e:	4b07      	ldr	r3, [pc, #28]	; (810dbbc <SD_initialize+0x7c>)
 810dba0:	781b      	ldrb	r3, [r3, #0]
 810dba2:	b2db      	uxtb	r3, r3
 810dba4:	f043 0301 	orr.w	r3, r3, #1
 810dba8:	b2da      	uxtb	r2, r3
 810dbaa:	4b04      	ldr	r3, [pc, #16]	; (810dbbc <SD_initialize+0x7c>)
 810dbac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 810dbae:	4b03      	ldr	r3, [pc, #12]	; (810dbbc <SD_initialize+0x7c>)
 810dbb0:	781b      	ldrb	r3, [r3, #0]
 810dbb2:	b2db      	uxtb	r3, r3
}
 810dbb4:	4618      	mov	r0, r3
 810dbb6:	3708      	adds	r7, #8
 810dbb8:	46bd      	mov	sp, r7
 810dbba:	bd80      	pop	{r7, pc}
 810dbbc:	1000000d 	.word	0x1000000d
 810dbc0:	10000204 	.word	0x10000204

0810dbc4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 810dbc4:	b580      	push	{r7, lr}
 810dbc6:	b082      	sub	sp, #8
 810dbc8:	af00      	add	r7, sp, #0
 810dbca:	4603      	mov	r3, r0
 810dbcc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 810dbce:	79fb      	ldrb	r3, [r7, #7]
 810dbd0:	4618      	mov	r0, r3
 810dbd2:	f7ff ff97 	bl	810db04 <SD_CheckStatus>
 810dbd6:	4603      	mov	r3, r0
}
 810dbd8:	4618      	mov	r0, r3
 810dbda:	3708      	adds	r7, #8
 810dbdc:	46bd      	mov	sp, r7
 810dbde:	bd80      	pop	{r7, pc}

0810dbe0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 810dbe0:	b580      	push	{r7, lr}
 810dbe2:	b088      	sub	sp, #32
 810dbe4:	af00      	add	r7, sp, #0
 810dbe6:	60b9      	str	r1, [r7, #8]
 810dbe8:	607a      	str	r2, [r7, #4]
 810dbea:	603b      	str	r3, [r7, #0]
 810dbec:	4603      	mov	r3, r0
 810dbee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 810dbf0:	2301      	movs	r3, #1
 810dbf2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 810dbf4:	f247 5030 	movw	r0, #30000	; 0x7530
 810dbf8:	f7ff ff67 	bl	810daca <SD_CheckStatusWithTimeout>
 810dbfc:	4603      	mov	r3, r0
 810dbfe:	2b00      	cmp	r3, #0
 810dc00:	da01      	bge.n	810dc06 <SD_read+0x26>
  {
    return res;
 810dc02:	7ffb      	ldrb	r3, [r7, #31]
 810dc04:	e02f      	b.n	810dc66 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 810dc06:	683a      	ldr	r2, [r7, #0]
 810dc08:	6879      	ldr	r1, [r7, #4]
 810dc0a:	68b8      	ldr	r0, [r7, #8]
 810dc0c:	f7ff feea 	bl	810d9e4 <BSP_SD_ReadBlocks_DMA>
 810dc10:	4603      	mov	r3, r0
 810dc12:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 810dc14:	7fbb      	ldrb	r3, [r7, #30]
 810dc16:	2b00      	cmp	r3, #0
 810dc18:	d124      	bne.n	810dc64 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 810dc1a:	4b15      	ldr	r3, [pc, #84]	; (810dc70 <SD_read+0x90>)
 810dc1c:	6818      	ldr	r0, [r3, #0]
 810dc1e:	f107 0112 	add.w	r1, r7, #18
 810dc22:	f247 5330 	movw	r3, #30000	; 0x7530
 810dc26:	2200      	movs	r2, #0
 810dc28:	f000 fb8a 	bl	810e340 <osMessageQueueGet>
 810dc2c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 810dc2e:	69bb      	ldr	r3, [r7, #24]
 810dc30:	2b00      	cmp	r3, #0
 810dc32:	d117      	bne.n	810dc64 <SD_read+0x84>
 810dc34:	8a7b      	ldrh	r3, [r7, #18]
 810dc36:	2b01      	cmp	r3, #1
 810dc38:	d114      	bne.n	810dc64 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 810dc3a:	f000 f9eb 	bl	810e014 <osKernelGetTickCount>
 810dc3e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 810dc40:	e007      	b.n	810dc52 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 810dc42:	f7ff ff03 	bl	810da4c <BSP_SD_GetCardState>
 810dc46:	4603      	mov	r3, r0
 810dc48:	2b00      	cmp	r3, #0
 810dc4a:	d102      	bne.n	810dc52 <SD_read+0x72>
              {
                res = RES_OK;
 810dc4c:	2300      	movs	r3, #0
 810dc4e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 810dc50:	e008      	b.n	810dc64 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 810dc52:	f000 f9df 	bl	810e014 <osKernelGetTickCount>
 810dc56:	4602      	mov	r2, r0
 810dc58:	697b      	ldr	r3, [r7, #20]
 810dc5a:	1ad3      	subs	r3, r2, r3
 810dc5c:	f247 522f 	movw	r2, #29999	; 0x752f
 810dc60:	4293      	cmp	r3, r2
 810dc62:	d9ee      	bls.n	810dc42 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 810dc64:	7ffb      	ldrb	r3, [r7, #31]
}
 810dc66:	4618      	mov	r0, r3
 810dc68:	3720      	adds	r7, #32
 810dc6a:	46bd      	mov	sp, r7
 810dc6c:	bd80      	pop	{r7, pc}
 810dc6e:	bf00      	nop
 810dc70:	10000204 	.word	0x10000204

0810dc74 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 810dc74:	b580      	push	{r7, lr}
 810dc76:	b088      	sub	sp, #32
 810dc78:	af00      	add	r7, sp, #0
 810dc7a:	60b9      	str	r1, [r7, #8]
 810dc7c:	607a      	str	r2, [r7, #4]
 810dc7e:	603b      	str	r3, [r7, #0]
 810dc80:	4603      	mov	r3, r0
 810dc82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 810dc84:	2301      	movs	r3, #1
 810dc86:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 810dc88:	f247 5030 	movw	r0, #30000	; 0x7530
 810dc8c:	f7ff ff1d 	bl	810daca <SD_CheckStatusWithTimeout>
 810dc90:	4603      	mov	r3, r0
 810dc92:	2b00      	cmp	r3, #0
 810dc94:	da01      	bge.n	810dc9a <SD_write+0x26>
  {
    return res;
 810dc96:	7ffb      	ldrb	r3, [r7, #31]
 810dc98:	e02d      	b.n	810dcf6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 810dc9a:	683a      	ldr	r2, [r7, #0]
 810dc9c:	6879      	ldr	r1, [r7, #4]
 810dc9e:	68b8      	ldr	r0, [r7, #8]
 810dca0:	f7ff feba 	bl	810da18 <BSP_SD_WriteBlocks_DMA>
 810dca4:	4603      	mov	r3, r0
 810dca6:	2b00      	cmp	r3, #0
 810dca8:	d124      	bne.n	810dcf4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 810dcaa:	4b15      	ldr	r3, [pc, #84]	; (810dd00 <SD_write+0x8c>)
 810dcac:	6818      	ldr	r0, [r3, #0]
 810dcae:	f107 0112 	add.w	r1, r7, #18
 810dcb2:	f247 5330 	movw	r3, #30000	; 0x7530
 810dcb6:	2200      	movs	r2, #0
 810dcb8:	f000 fb42 	bl	810e340 <osMessageQueueGet>
 810dcbc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 810dcbe:	69bb      	ldr	r3, [r7, #24]
 810dcc0:	2b00      	cmp	r3, #0
 810dcc2:	d117      	bne.n	810dcf4 <SD_write+0x80>
 810dcc4:	8a7b      	ldrh	r3, [r7, #18]
 810dcc6:	2b02      	cmp	r3, #2
 810dcc8:	d114      	bne.n	810dcf4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 810dcca:	f000 f9a3 	bl	810e014 <osKernelGetTickCount>
 810dcce:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 810dcd0:	e007      	b.n	810dce2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 810dcd2:	f7ff febb 	bl	810da4c <BSP_SD_GetCardState>
 810dcd6:	4603      	mov	r3, r0
 810dcd8:	2b00      	cmp	r3, #0
 810dcda:	d102      	bne.n	810dce2 <SD_write+0x6e>
          {
            res = RES_OK;
 810dcdc:	2300      	movs	r3, #0
 810dcde:	77fb      	strb	r3, [r7, #31]
            break;
 810dce0:	e008      	b.n	810dcf4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 810dce2:	f000 f997 	bl	810e014 <osKernelGetTickCount>
 810dce6:	4602      	mov	r2, r0
 810dce8:	697b      	ldr	r3, [r7, #20]
 810dcea:	1ad3      	subs	r3, r2, r3
 810dcec:	f247 522f 	movw	r2, #29999	; 0x752f
 810dcf0:	4293      	cmp	r3, r2
 810dcf2:	d9ee      	bls.n	810dcd2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 810dcf4:	7ffb      	ldrb	r3, [r7, #31]
}
 810dcf6:	4618      	mov	r0, r3
 810dcf8:	3720      	adds	r7, #32
 810dcfa:	46bd      	mov	sp, r7
 810dcfc:	bd80      	pop	{r7, pc}
 810dcfe:	bf00      	nop
 810dd00:	10000204 	.word	0x10000204

0810dd04 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 810dd04:	b580      	push	{r7, lr}
 810dd06:	b08c      	sub	sp, #48	; 0x30
 810dd08:	af00      	add	r7, sp, #0
 810dd0a:	4603      	mov	r3, r0
 810dd0c:	603a      	str	r2, [r7, #0]
 810dd0e:	71fb      	strb	r3, [r7, #7]
 810dd10:	460b      	mov	r3, r1
 810dd12:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 810dd14:	2301      	movs	r3, #1
 810dd16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 810dd1a:	4b25      	ldr	r3, [pc, #148]	; (810ddb0 <SD_ioctl+0xac>)
 810dd1c:	781b      	ldrb	r3, [r3, #0]
 810dd1e:	b2db      	uxtb	r3, r3
 810dd20:	f003 0301 	and.w	r3, r3, #1
 810dd24:	2b00      	cmp	r3, #0
 810dd26:	d001      	beq.n	810dd2c <SD_ioctl+0x28>
 810dd28:	2303      	movs	r3, #3
 810dd2a:	e03c      	b.n	810dda6 <SD_ioctl+0xa2>

  switch (cmd)
 810dd2c:	79bb      	ldrb	r3, [r7, #6]
 810dd2e:	2b03      	cmp	r3, #3
 810dd30:	d834      	bhi.n	810dd9c <SD_ioctl+0x98>
 810dd32:	a201      	add	r2, pc, #4	; (adr r2, 810dd38 <SD_ioctl+0x34>)
 810dd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810dd38:	0810dd49 	.word	0x0810dd49
 810dd3c:	0810dd51 	.word	0x0810dd51
 810dd40:	0810dd69 	.word	0x0810dd69
 810dd44:	0810dd83 	.word	0x0810dd83
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 810dd48:	2300      	movs	r3, #0
 810dd4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810dd4e:	e028      	b.n	810dda2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 810dd50:	f107 0308 	add.w	r3, r7, #8
 810dd54:	4618      	mov	r0, r3
 810dd56:	f7ff fe89 	bl	810da6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 810dd5a:	6a3a      	ldr	r2, [r7, #32]
 810dd5c:	683b      	ldr	r3, [r7, #0]
 810dd5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 810dd60:	2300      	movs	r3, #0
 810dd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810dd66:	e01c      	b.n	810dda2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 810dd68:	f107 0308 	add.w	r3, r7, #8
 810dd6c:	4618      	mov	r0, r3
 810dd6e:	f7ff fe7d 	bl	810da6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 810dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810dd74:	b29a      	uxth	r2, r3
 810dd76:	683b      	ldr	r3, [r7, #0]
 810dd78:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 810dd7a:	2300      	movs	r3, #0
 810dd7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810dd80:	e00f      	b.n	810dda2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 810dd82:	f107 0308 	add.w	r3, r7, #8
 810dd86:	4618      	mov	r0, r3
 810dd88:	f7ff fe70 	bl	810da6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 810dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810dd8e:	0a5a      	lsrs	r2, r3, #9
 810dd90:	683b      	ldr	r3, [r7, #0]
 810dd92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 810dd94:	2300      	movs	r3, #0
 810dd96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810dd9a:	e002      	b.n	810dda2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 810dd9c:	2304      	movs	r3, #4
 810dd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 810dda2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 810dda6:	4618      	mov	r0, r3
 810dda8:	3730      	adds	r7, #48	; 0x30
 810ddaa:	46bd      	mov	sp, r7
 810ddac:	bd80      	pop	{r7, pc}
 810ddae:	bf00      	nop
 810ddb0:	1000000d 	.word	0x1000000d

0810ddb4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 810ddb4:	b580      	push	{r7, lr}
 810ddb6:	b082      	sub	sp, #8
 810ddb8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 810ddba:	2302      	movs	r3, #2
 810ddbc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 810ddbe:	4b05      	ldr	r3, [pc, #20]	; (810ddd4 <BSP_SD_WriteCpltCallback+0x20>)
 810ddc0:	6818      	ldr	r0, [r3, #0]
 810ddc2:	1db9      	adds	r1, r7, #6
 810ddc4:	2300      	movs	r3, #0
 810ddc6:	2200      	movs	r2, #0
 810ddc8:	f000 fa5a 	bl	810e280 <osMessageQueuePut>
#endif
}
 810ddcc:	bf00      	nop
 810ddce:	3708      	adds	r7, #8
 810ddd0:	46bd      	mov	sp, r7
 810ddd2:	bd80      	pop	{r7, pc}
 810ddd4:	10000204 	.word	0x10000204

0810ddd8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 810ddd8:	b580      	push	{r7, lr}
 810ddda:	b082      	sub	sp, #8
 810dddc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 810ddde:	2301      	movs	r3, #1
 810dde0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 810dde2:	4b05      	ldr	r3, [pc, #20]	; (810ddf8 <BSP_SD_ReadCpltCallback+0x20>)
 810dde4:	6818      	ldr	r0, [r3, #0]
 810dde6:	1db9      	adds	r1, r7, #6
 810dde8:	2300      	movs	r3, #0
 810ddea:	2200      	movs	r2, #0
 810ddec:	f000 fa48 	bl	810e280 <osMessageQueuePut>
#endif
}
 810ddf0:	bf00      	nop
 810ddf2:	3708      	adds	r7, #8
 810ddf4:	46bd      	mov	sp, r7
 810ddf6:	bd80      	pop	{r7, pc}
 810ddf8:	10000204 	.word	0x10000204

0810ddfc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 810ddfc:	b480      	push	{r7}
 810ddfe:	b087      	sub	sp, #28
 810de00:	af00      	add	r7, sp, #0
 810de02:	60f8      	str	r0, [r7, #12]
 810de04:	60b9      	str	r1, [r7, #8]
 810de06:	4613      	mov	r3, r2
 810de08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 810de0a:	2301      	movs	r3, #1
 810de0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 810de0e:	2300      	movs	r3, #0
 810de10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 810de12:	4b1f      	ldr	r3, [pc, #124]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de14:	7a5b      	ldrb	r3, [r3, #9]
 810de16:	b2db      	uxtb	r3, r3
 810de18:	2b00      	cmp	r3, #0
 810de1a:	d131      	bne.n	810de80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 810de1c:	4b1c      	ldr	r3, [pc, #112]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de1e:	7a5b      	ldrb	r3, [r3, #9]
 810de20:	b2db      	uxtb	r3, r3
 810de22:	461a      	mov	r2, r3
 810de24:	4b1a      	ldr	r3, [pc, #104]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de26:	2100      	movs	r1, #0
 810de28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 810de2a:	4b19      	ldr	r3, [pc, #100]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de2c:	7a5b      	ldrb	r3, [r3, #9]
 810de2e:	b2db      	uxtb	r3, r3
 810de30:	4a17      	ldr	r2, [pc, #92]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de32:	009b      	lsls	r3, r3, #2
 810de34:	4413      	add	r3, r2
 810de36:	68fa      	ldr	r2, [r7, #12]
 810de38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 810de3a:	4b15      	ldr	r3, [pc, #84]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de3c:	7a5b      	ldrb	r3, [r3, #9]
 810de3e:	b2db      	uxtb	r3, r3
 810de40:	461a      	mov	r2, r3
 810de42:	4b13      	ldr	r3, [pc, #76]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de44:	4413      	add	r3, r2
 810de46:	79fa      	ldrb	r2, [r7, #7]
 810de48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 810de4a:	4b11      	ldr	r3, [pc, #68]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de4c:	7a5b      	ldrb	r3, [r3, #9]
 810de4e:	b2db      	uxtb	r3, r3
 810de50:	1c5a      	adds	r2, r3, #1
 810de52:	b2d1      	uxtb	r1, r2
 810de54:	4a0e      	ldr	r2, [pc, #56]	; (810de90 <FATFS_LinkDriverEx+0x94>)
 810de56:	7251      	strb	r1, [r2, #9]
 810de58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 810de5a:	7dbb      	ldrb	r3, [r7, #22]
 810de5c:	3330      	adds	r3, #48	; 0x30
 810de5e:	b2da      	uxtb	r2, r3
 810de60:	68bb      	ldr	r3, [r7, #8]
 810de62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 810de64:	68bb      	ldr	r3, [r7, #8]
 810de66:	3301      	adds	r3, #1
 810de68:	223a      	movs	r2, #58	; 0x3a
 810de6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 810de6c:	68bb      	ldr	r3, [r7, #8]
 810de6e:	3302      	adds	r3, #2
 810de70:	222f      	movs	r2, #47	; 0x2f
 810de72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 810de74:	68bb      	ldr	r3, [r7, #8]
 810de76:	3303      	adds	r3, #3
 810de78:	2200      	movs	r2, #0
 810de7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 810de7c:	2300      	movs	r3, #0
 810de7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 810de80:	7dfb      	ldrb	r3, [r7, #23]
}
 810de82:	4618      	mov	r0, r3
 810de84:	371c      	adds	r7, #28
 810de86:	46bd      	mov	sp, r7
 810de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 810de8c:	4770      	bx	lr
 810de8e:	bf00      	nop
 810de90:	10000208 	.word	0x10000208

0810de94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 810de94:	b580      	push	{r7, lr}
 810de96:	b082      	sub	sp, #8
 810de98:	af00      	add	r7, sp, #0
 810de9a:	6078      	str	r0, [r7, #4]
 810de9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 810de9e:	2200      	movs	r2, #0
 810dea0:	6839      	ldr	r1, [r7, #0]
 810dea2:	6878      	ldr	r0, [r7, #4]
 810dea4:	f7ff ffaa 	bl	810ddfc <FATFS_LinkDriverEx>
 810dea8:	4603      	mov	r3, r0
}
 810deaa:	4618      	mov	r0, r3
 810deac:	3708      	adds	r7, #8
 810deae:	46bd      	mov	sp, r7
 810deb0:	bd80      	pop	{r7, pc}
	...

0810deb4 <__NVIC_SetPriority>:
{
 810deb4:	b480      	push	{r7}
 810deb6:	b083      	sub	sp, #12
 810deb8:	af00      	add	r7, sp, #0
 810deba:	4603      	mov	r3, r0
 810debc:	6039      	str	r1, [r7, #0]
 810debe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810dec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810dec4:	2b00      	cmp	r3, #0
 810dec6:	db0a      	blt.n	810dede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810dec8:	683b      	ldr	r3, [r7, #0]
 810deca:	b2da      	uxtb	r2, r3
 810decc:	490c      	ldr	r1, [pc, #48]	; (810df00 <__NVIC_SetPriority+0x4c>)
 810dece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ded2:	0112      	lsls	r2, r2, #4
 810ded4:	b2d2      	uxtb	r2, r2
 810ded6:	440b      	add	r3, r1
 810ded8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 810dedc:	e00a      	b.n	810def4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810dede:	683b      	ldr	r3, [r7, #0]
 810dee0:	b2da      	uxtb	r2, r3
 810dee2:	4908      	ldr	r1, [pc, #32]	; (810df04 <__NVIC_SetPriority+0x50>)
 810dee4:	88fb      	ldrh	r3, [r7, #6]
 810dee6:	f003 030f 	and.w	r3, r3, #15
 810deea:	3b04      	subs	r3, #4
 810deec:	0112      	lsls	r2, r2, #4
 810deee:	b2d2      	uxtb	r2, r2
 810def0:	440b      	add	r3, r1
 810def2:	761a      	strb	r2, [r3, #24]
}
 810def4:	bf00      	nop
 810def6:	370c      	adds	r7, #12
 810def8:	46bd      	mov	sp, r7
 810defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810defe:	4770      	bx	lr
 810df00:	e000e100 	.word	0xe000e100
 810df04:	e000ed00 	.word	0xe000ed00

0810df08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810df08:	b580      	push	{r7, lr}
 810df0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810df0c:	4b05      	ldr	r3, [pc, #20]	; (810df24 <SysTick_Handler+0x1c>)
 810df0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810df10:	f002 fb68 	bl	81105e4 <xTaskGetSchedulerState>
 810df14:	4603      	mov	r3, r0
 810df16:	2b01      	cmp	r3, #1
 810df18:	d001      	beq.n	810df1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810df1a:	f000 fefd 	bl	810ed18 <xPortSysTickHandler>
  }
}
 810df1e:	bf00      	nop
 810df20:	bd80      	pop	{r7, pc}
 810df22:	bf00      	nop
 810df24:	e000e010 	.word	0xe000e010

0810df28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810df28:	b580      	push	{r7, lr}
 810df2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810df2c:	2100      	movs	r1, #0
 810df2e:	f06f 0004 	mvn.w	r0, #4
 810df32:	f7ff ffbf 	bl	810deb4 <__NVIC_SetPriority>
#endif
}
 810df36:	bf00      	nop
 810df38:	bd80      	pop	{r7, pc}
	...

0810df3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810df3c:	b480      	push	{r7}
 810df3e:	b083      	sub	sp, #12
 810df40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810df42:	f3ef 8305 	mrs	r3, IPSR
 810df46:	603b      	str	r3, [r7, #0]
  return(result);
 810df48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810df4a:	2b00      	cmp	r3, #0
 810df4c:	d003      	beq.n	810df56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810df4e:	f06f 0305 	mvn.w	r3, #5
 810df52:	607b      	str	r3, [r7, #4]
 810df54:	e00c      	b.n	810df70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810df56:	4b0a      	ldr	r3, [pc, #40]	; (810df80 <osKernelInitialize+0x44>)
 810df58:	681b      	ldr	r3, [r3, #0]
 810df5a:	2b00      	cmp	r3, #0
 810df5c:	d105      	bne.n	810df6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810df5e:	4b08      	ldr	r3, [pc, #32]	; (810df80 <osKernelInitialize+0x44>)
 810df60:	2201      	movs	r2, #1
 810df62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810df64:	2300      	movs	r3, #0
 810df66:	607b      	str	r3, [r7, #4]
 810df68:	e002      	b.n	810df70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810df6a:	f04f 33ff 	mov.w	r3, #4294967295
 810df6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810df70:	687b      	ldr	r3, [r7, #4]
}
 810df72:	4618      	mov	r0, r3
 810df74:	370c      	adds	r7, #12
 810df76:	46bd      	mov	sp, r7
 810df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df7c:	4770      	bx	lr
 810df7e:	bf00      	nop
 810df80:	10000214 	.word	0x10000214

0810df84 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 810df84:	b580      	push	{r7, lr}
 810df86:	b082      	sub	sp, #8
 810df88:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 810df8a:	f002 fb2b 	bl	81105e4 <xTaskGetSchedulerState>
 810df8e:	4603      	mov	r3, r0
 810df90:	2b00      	cmp	r3, #0
 810df92:	d004      	beq.n	810df9e <osKernelGetState+0x1a>
 810df94:	2b02      	cmp	r3, #2
 810df96:	d105      	bne.n	810dfa4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 810df98:	2302      	movs	r3, #2
 810df9a:	607b      	str	r3, [r7, #4]
      break;
 810df9c:	e00c      	b.n	810dfb8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 810df9e:	2303      	movs	r3, #3
 810dfa0:	607b      	str	r3, [r7, #4]
      break;
 810dfa2:	e009      	b.n	810dfb8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 810dfa4:	4b07      	ldr	r3, [pc, #28]	; (810dfc4 <osKernelGetState+0x40>)
 810dfa6:	681b      	ldr	r3, [r3, #0]
 810dfa8:	2b01      	cmp	r3, #1
 810dfaa:	d102      	bne.n	810dfb2 <osKernelGetState+0x2e>
        state = osKernelReady;
 810dfac:	2301      	movs	r3, #1
 810dfae:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 810dfb0:	e001      	b.n	810dfb6 <osKernelGetState+0x32>
        state = osKernelInactive;
 810dfb2:	2300      	movs	r3, #0
 810dfb4:	607b      	str	r3, [r7, #4]
      break;
 810dfb6:	bf00      	nop
  }

  return (state);
 810dfb8:	687b      	ldr	r3, [r7, #4]
}
 810dfba:	4618      	mov	r0, r3
 810dfbc:	3708      	adds	r7, #8
 810dfbe:	46bd      	mov	sp, r7
 810dfc0:	bd80      	pop	{r7, pc}
 810dfc2:	bf00      	nop
 810dfc4:	10000214 	.word	0x10000214

0810dfc8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 810dfc8:	b580      	push	{r7, lr}
 810dfca:	b082      	sub	sp, #8
 810dfcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810dfce:	f3ef 8305 	mrs	r3, IPSR
 810dfd2:	603b      	str	r3, [r7, #0]
  return(result);
 810dfd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810dfd6:	2b00      	cmp	r3, #0
 810dfd8:	d003      	beq.n	810dfe2 <osKernelStart+0x1a>
    stat = osErrorISR;
 810dfda:	f06f 0305 	mvn.w	r3, #5
 810dfde:	607b      	str	r3, [r7, #4]
 810dfe0:	e010      	b.n	810e004 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810dfe2:	4b0b      	ldr	r3, [pc, #44]	; (810e010 <osKernelStart+0x48>)
 810dfe4:	681b      	ldr	r3, [r3, #0]
 810dfe6:	2b01      	cmp	r3, #1
 810dfe8:	d109      	bne.n	810dffe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810dfea:	f7ff ff9d 	bl	810df28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810dfee:	4b08      	ldr	r3, [pc, #32]	; (810e010 <osKernelStart+0x48>)
 810dff0:	2202      	movs	r2, #2
 810dff2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810dff4:	f001 fe9c 	bl	810fd30 <vTaskStartScheduler>
      stat = osOK;
 810dff8:	2300      	movs	r3, #0
 810dffa:	607b      	str	r3, [r7, #4]
 810dffc:	e002      	b.n	810e004 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810dffe:	f04f 33ff 	mov.w	r3, #4294967295
 810e002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810e004:	687b      	ldr	r3, [r7, #4]
}
 810e006:	4618      	mov	r0, r3
 810e008:	3708      	adds	r7, #8
 810e00a:	46bd      	mov	sp, r7
 810e00c:	bd80      	pop	{r7, pc}
 810e00e:	bf00      	nop
 810e010:	10000214 	.word	0x10000214

0810e014 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 810e014:	b580      	push	{r7, lr}
 810e016:	b082      	sub	sp, #8
 810e018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810e01a:	f3ef 8305 	mrs	r3, IPSR
 810e01e:	603b      	str	r3, [r7, #0]
  return(result);
 810e020:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 810e022:	2b00      	cmp	r3, #0
 810e024:	d003      	beq.n	810e02e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810e026:	f001 ffa5 	bl	810ff74 <xTaskGetTickCountFromISR>
 810e02a:	6078      	str	r0, [r7, #4]
 810e02c:	e002      	b.n	810e034 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810e02e:	f001 ff91 	bl	810ff54 <xTaskGetTickCount>
 810e032:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 810e034:	687b      	ldr	r3, [r7, #4]
}
 810e036:	4618      	mov	r0, r3
 810e038:	3708      	adds	r7, #8
 810e03a:	46bd      	mov	sp, r7
 810e03c:	bd80      	pop	{r7, pc}

0810e03e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810e03e:	b580      	push	{r7, lr}
 810e040:	b08e      	sub	sp, #56	; 0x38
 810e042:	af04      	add	r7, sp, #16
 810e044:	60f8      	str	r0, [r7, #12]
 810e046:	60b9      	str	r1, [r7, #8]
 810e048:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810e04a:	2300      	movs	r3, #0
 810e04c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810e04e:	f3ef 8305 	mrs	r3, IPSR
 810e052:	617b      	str	r3, [r7, #20]
  return(result);
 810e054:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810e056:	2b00      	cmp	r3, #0
 810e058:	d17e      	bne.n	810e158 <osThreadNew+0x11a>
 810e05a:	68fb      	ldr	r3, [r7, #12]
 810e05c:	2b00      	cmp	r3, #0
 810e05e:	d07b      	beq.n	810e158 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810e060:	2380      	movs	r3, #128	; 0x80
 810e062:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810e064:	2318      	movs	r3, #24
 810e066:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810e068:	2300      	movs	r3, #0
 810e06a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 810e06c:	f04f 33ff 	mov.w	r3, #4294967295
 810e070:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810e072:	687b      	ldr	r3, [r7, #4]
 810e074:	2b00      	cmp	r3, #0
 810e076:	d045      	beq.n	810e104 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810e078:	687b      	ldr	r3, [r7, #4]
 810e07a:	681b      	ldr	r3, [r3, #0]
 810e07c:	2b00      	cmp	r3, #0
 810e07e:	d002      	beq.n	810e086 <osThreadNew+0x48>
        name = attr->name;
 810e080:	687b      	ldr	r3, [r7, #4]
 810e082:	681b      	ldr	r3, [r3, #0]
 810e084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 810e086:	687b      	ldr	r3, [r7, #4]
 810e088:	699b      	ldr	r3, [r3, #24]
 810e08a:	2b00      	cmp	r3, #0
 810e08c:	d002      	beq.n	810e094 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810e08e:	687b      	ldr	r3, [r7, #4]
 810e090:	699b      	ldr	r3, [r3, #24]
 810e092:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810e094:	69fb      	ldr	r3, [r7, #28]
 810e096:	2b00      	cmp	r3, #0
 810e098:	d008      	beq.n	810e0ac <osThreadNew+0x6e>
 810e09a:	69fb      	ldr	r3, [r7, #28]
 810e09c:	2b38      	cmp	r3, #56	; 0x38
 810e09e:	d805      	bhi.n	810e0ac <osThreadNew+0x6e>
 810e0a0:	687b      	ldr	r3, [r7, #4]
 810e0a2:	685b      	ldr	r3, [r3, #4]
 810e0a4:	f003 0301 	and.w	r3, r3, #1
 810e0a8:	2b00      	cmp	r3, #0
 810e0aa:	d001      	beq.n	810e0b0 <osThreadNew+0x72>
        return (NULL);
 810e0ac:	2300      	movs	r3, #0
 810e0ae:	e054      	b.n	810e15a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810e0b0:	687b      	ldr	r3, [r7, #4]
 810e0b2:	695b      	ldr	r3, [r3, #20]
 810e0b4:	2b00      	cmp	r3, #0
 810e0b6:	d003      	beq.n	810e0c0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810e0b8:	687b      	ldr	r3, [r7, #4]
 810e0ba:	695b      	ldr	r3, [r3, #20]
 810e0bc:	089b      	lsrs	r3, r3, #2
 810e0be:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810e0c0:	687b      	ldr	r3, [r7, #4]
 810e0c2:	689b      	ldr	r3, [r3, #8]
 810e0c4:	2b00      	cmp	r3, #0
 810e0c6:	d00e      	beq.n	810e0e6 <osThreadNew+0xa8>
 810e0c8:	687b      	ldr	r3, [r7, #4]
 810e0ca:	68db      	ldr	r3, [r3, #12]
 810e0cc:	2b5b      	cmp	r3, #91	; 0x5b
 810e0ce:	d90a      	bls.n	810e0e6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810e0d0:	687b      	ldr	r3, [r7, #4]
 810e0d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810e0d4:	2b00      	cmp	r3, #0
 810e0d6:	d006      	beq.n	810e0e6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810e0d8:	687b      	ldr	r3, [r7, #4]
 810e0da:	695b      	ldr	r3, [r3, #20]
 810e0dc:	2b00      	cmp	r3, #0
 810e0de:	d002      	beq.n	810e0e6 <osThreadNew+0xa8>
        mem = 1;
 810e0e0:	2301      	movs	r3, #1
 810e0e2:	61bb      	str	r3, [r7, #24]
 810e0e4:	e010      	b.n	810e108 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810e0e6:	687b      	ldr	r3, [r7, #4]
 810e0e8:	689b      	ldr	r3, [r3, #8]
 810e0ea:	2b00      	cmp	r3, #0
 810e0ec:	d10c      	bne.n	810e108 <osThreadNew+0xca>
 810e0ee:	687b      	ldr	r3, [r7, #4]
 810e0f0:	68db      	ldr	r3, [r3, #12]
 810e0f2:	2b00      	cmp	r3, #0
 810e0f4:	d108      	bne.n	810e108 <osThreadNew+0xca>
 810e0f6:	687b      	ldr	r3, [r7, #4]
 810e0f8:	691b      	ldr	r3, [r3, #16]
 810e0fa:	2b00      	cmp	r3, #0
 810e0fc:	d104      	bne.n	810e108 <osThreadNew+0xca>
          mem = 0;
 810e0fe:	2300      	movs	r3, #0
 810e100:	61bb      	str	r3, [r7, #24]
 810e102:	e001      	b.n	810e108 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810e104:	2300      	movs	r3, #0
 810e106:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810e108:	69bb      	ldr	r3, [r7, #24]
 810e10a:	2b01      	cmp	r3, #1
 810e10c:	d110      	bne.n	810e130 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810e10e:	687b      	ldr	r3, [r7, #4]
 810e110:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810e112:	687a      	ldr	r2, [r7, #4]
 810e114:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810e116:	9202      	str	r2, [sp, #8]
 810e118:	9301      	str	r3, [sp, #4]
 810e11a:	69fb      	ldr	r3, [r7, #28]
 810e11c:	9300      	str	r3, [sp, #0]
 810e11e:	68bb      	ldr	r3, [r7, #8]
 810e120:	6a3a      	ldr	r2, [r7, #32]
 810e122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810e124:	68f8      	ldr	r0, [r7, #12]
 810e126:	f001 fc2d 	bl	810f984 <xTaskCreateStatic>
 810e12a:	4603      	mov	r3, r0
 810e12c:	613b      	str	r3, [r7, #16]
 810e12e:	e013      	b.n	810e158 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810e130:	69bb      	ldr	r3, [r7, #24]
 810e132:	2b00      	cmp	r3, #0
 810e134:	d110      	bne.n	810e158 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810e136:	6a3b      	ldr	r3, [r7, #32]
 810e138:	b29a      	uxth	r2, r3
 810e13a:	f107 0310 	add.w	r3, r7, #16
 810e13e:	9301      	str	r3, [sp, #4]
 810e140:	69fb      	ldr	r3, [r7, #28]
 810e142:	9300      	str	r3, [sp, #0]
 810e144:	68bb      	ldr	r3, [r7, #8]
 810e146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 810e148:	68f8      	ldr	r0, [r7, #12]
 810e14a:	f001 fc78 	bl	810fa3e <xTaskCreate>
 810e14e:	4603      	mov	r3, r0
 810e150:	2b01      	cmp	r3, #1
 810e152:	d001      	beq.n	810e158 <osThreadNew+0x11a>
            hTask = NULL;
 810e154:	2300      	movs	r3, #0
 810e156:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810e158:	693b      	ldr	r3, [r7, #16]
}
 810e15a:	4618      	mov	r0, r3
 810e15c:	3728      	adds	r7, #40	; 0x28
 810e15e:	46bd      	mov	sp, r7
 810e160:	bd80      	pop	{r7, pc}

0810e162 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810e162:	b580      	push	{r7, lr}
 810e164:	b084      	sub	sp, #16
 810e166:	af00      	add	r7, sp, #0
 810e168:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810e16a:	f3ef 8305 	mrs	r3, IPSR
 810e16e:	60bb      	str	r3, [r7, #8]
  return(result);
 810e170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810e172:	2b00      	cmp	r3, #0
 810e174:	d003      	beq.n	810e17e <osDelay+0x1c>
    stat = osErrorISR;
 810e176:	f06f 0305 	mvn.w	r3, #5
 810e17a:	60fb      	str	r3, [r7, #12]
 810e17c:	e007      	b.n	810e18e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810e17e:	2300      	movs	r3, #0
 810e180:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810e182:	687b      	ldr	r3, [r7, #4]
 810e184:	2b00      	cmp	r3, #0
 810e186:	d002      	beq.n	810e18e <osDelay+0x2c>
      vTaskDelay(ticks);
 810e188:	6878      	ldr	r0, [r7, #4]
 810e18a:	f001 fd9d 	bl	810fcc8 <vTaskDelay>
    }
  }

  return (stat);
 810e18e:	68fb      	ldr	r3, [r7, #12]
}
 810e190:	4618      	mov	r0, r3
 810e192:	3710      	adds	r7, #16
 810e194:	46bd      	mov	sp, r7
 810e196:	bd80      	pop	{r7, pc}

0810e198 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 810e198:	b580      	push	{r7, lr}
 810e19a:	b08a      	sub	sp, #40	; 0x28
 810e19c:	af02      	add	r7, sp, #8
 810e19e:	60f8      	str	r0, [r7, #12]
 810e1a0:	60b9      	str	r1, [r7, #8]
 810e1a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 810e1a4:	2300      	movs	r3, #0
 810e1a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810e1a8:	f3ef 8305 	mrs	r3, IPSR
 810e1ac:	613b      	str	r3, [r7, #16]
  return(result);
 810e1ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 810e1b0:	2b00      	cmp	r3, #0
 810e1b2:	d15f      	bne.n	810e274 <osMessageQueueNew+0xdc>
 810e1b4:	68fb      	ldr	r3, [r7, #12]
 810e1b6:	2b00      	cmp	r3, #0
 810e1b8:	d05c      	beq.n	810e274 <osMessageQueueNew+0xdc>
 810e1ba:	68bb      	ldr	r3, [r7, #8]
 810e1bc:	2b00      	cmp	r3, #0
 810e1be:	d059      	beq.n	810e274 <osMessageQueueNew+0xdc>
    mem = -1;
 810e1c0:	f04f 33ff 	mov.w	r3, #4294967295
 810e1c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810e1c6:	687b      	ldr	r3, [r7, #4]
 810e1c8:	2b00      	cmp	r3, #0
 810e1ca:	d029      	beq.n	810e220 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810e1cc:	687b      	ldr	r3, [r7, #4]
 810e1ce:	689b      	ldr	r3, [r3, #8]
 810e1d0:	2b00      	cmp	r3, #0
 810e1d2:	d012      	beq.n	810e1fa <osMessageQueueNew+0x62>
 810e1d4:	687b      	ldr	r3, [r7, #4]
 810e1d6:	68db      	ldr	r3, [r3, #12]
 810e1d8:	2b4f      	cmp	r3, #79	; 0x4f
 810e1da:	d90e      	bls.n	810e1fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810e1dc:	687b      	ldr	r3, [r7, #4]
 810e1de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 810e1e0:	2b00      	cmp	r3, #0
 810e1e2:	d00a      	beq.n	810e1fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 810e1e4:	687b      	ldr	r3, [r7, #4]
 810e1e6:	695a      	ldr	r2, [r3, #20]
 810e1e8:	68fb      	ldr	r3, [r7, #12]
 810e1ea:	68b9      	ldr	r1, [r7, #8]
 810e1ec:	fb01 f303 	mul.w	r3, r1, r3
 810e1f0:	429a      	cmp	r2, r3
 810e1f2:	d302      	bcc.n	810e1fa <osMessageQueueNew+0x62>
        mem = 1;
 810e1f4:	2301      	movs	r3, #1
 810e1f6:	61bb      	str	r3, [r7, #24]
 810e1f8:	e014      	b.n	810e224 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810e1fa:	687b      	ldr	r3, [r7, #4]
 810e1fc:	689b      	ldr	r3, [r3, #8]
 810e1fe:	2b00      	cmp	r3, #0
 810e200:	d110      	bne.n	810e224 <osMessageQueueNew+0x8c>
 810e202:	687b      	ldr	r3, [r7, #4]
 810e204:	68db      	ldr	r3, [r3, #12]
 810e206:	2b00      	cmp	r3, #0
 810e208:	d10c      	bne.n	810e224 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810e20a:	687b      	ldr	r3, [r7, #4]
 810e20c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 810e20e:	2b00      	cmp	r3, #0
 810e210:	d108      	bne.n	810e224 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 810e212:	687b      	ldr	r3, [r7, #4]
 810e214:	695b      	ldr	r3, [r3, #20]
 810e216:	2b00      	cmp	r3, #0
 810e218:	d104      	bne.n	810e224 <osMessageQueueNew+0x8c>
          mem = 0;
 810e21a:	2300      	movs	r3, #0
 810e21c:	61bb      	str	r3, [r7, #24]
 810e21e:	e001      	b.n	810e224 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 810e220:	2300      	movs	r3, #0
 810e222:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810e224:	69bb      	ldr	r3, [r7, #24]
 810e226:	2b01      	cmp	r3, #1
 810e228:	d10b      	bne.n	810e242 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 810e22a:	687b      	ldr	r3, [r7, #4]
 810e22c:	691a      	ldr	r2, [r3, #16]
 810e22e:	687b      	ldr	r3, [r7, #4]
 810e230:	689b      	ldr	r3, [r3, #8]
 810e232:	2100      	movs	r1, #0
 810e234:	9100      	str	r1, [sp, #0]
 810e236:	68b9      	ldr	r1, [r7, #8]
 810e238:	68f8      	ldr	r0, [r7, #12]
 810e23a:	f000 fe65 	bl	810ef08 <xQueueGenericCreateStatic>
 810e23e:	61f8      	str	r0, [r7, #28]
 810e240:	e008      	b.n	810e254 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 810e242:	69bb      	ldr	r3, [r7, #24]
 810e244:	2b00      	cmp	r3, #0
 810e246:	d105      	bne.n	810e254 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 810e248:	2200      	movs	r2, #0
 810e24a:	68b9      	ldr	r1, [r7, #8]
 810e24c:	68f8      	ldr	r0, [r7, #12]
 810e24e:	f000 fed3 	bl	810eff8 <xQueueGenericCreate>
 810e252:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 810e254:	69fb      	ldr	r3, [r7, #28]
 810e256:	2b00      	cmp	r3, #0
 810e258:	d00c      	beq.n	810e274 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 810e25a:	687b      	ldr	r3, [r7, #4]
 810e25c:	2b00      	cmp	r3, #0
 810e25e:	d003      	beq.n	810e268 <osMessageQueueNew+0xd0>
        name = attr->name;
 810e260:	687b      	ldr	r3, [r7, #4]
 810e262:	681b      	ldr	r3, [r3, #0]
 810e264:	617b      	str	r3, [r7, #20]
 810e266:	e001      	b.n	810e26c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 810e268:	2300      	movs	r3, #0
 810e26a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 810e26c:	6979      	ldr	r1, [r7, #20]
 810e26e:	69f8      	ldr	r0, [r7, #28]
 810e270:	f001 fb2a 	bl	810f8c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 810e274:	69fb      	ldr	r3, [r7, #28]
}
 810e276:	4618      	mov	r0, r3
 810e278:	3720      	adds	r7, #32
 810e27a:	46bd      	mov	sp, r7
 810e27c:	bd80      	pop	{r7, pc}
	...

0810e280 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 810e280:	b580      	push	{r7, lr}
 810e282:	b088      	sub	sp, #32
 810e284:	af00      	add	r7, sp, #0
 810e286:	60f8      	str	r0, [r7, #12]
 810e288:	60b9      	str	r1, [r7, #8]
 810e28a:	603b      	str	r3, [r7, #0]
 810e28c:	4613      	mov	r3, r2
 810e28e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810e290:	68fb      	ldr	r3, [r7, #12]
 810e292:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810e294:	2300      	movs	r3, #0
 810e296:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810e298:	f3ef 8305 	mrs	r3, IPSR
 810e29c:	617b      	str	r3, [r7, #20]
  return(result);
 810e29e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810e2a0:	2b00      	cmp	r3, #0
 810e2a2:	d028      	beq.n	810e2f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810e2a4:	69bb      	ldr	r3, [r7, #24]
 810e2a6:	2b00      	cmp	r3, #0
 810e2a8:	d005      	beq.n	810e2b6 <osMessageQueuePut+0x36>
 810e2aa:	68bb      	ldr	r3, [r7, #8]
 810e2ac:	2b00      	cmp	r3, #0
 810e2ae:	d002      	beq.n	810e2b6 <osMessageQueuePut+0x36>
 810e2b0:	683b      	ldr	r3, [r7, #0]
 810e2b2:	2b00      	cmp	r3, #0
 810e2b4:	d003      	beq.n	810e2be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 810e2b6:	f06f 0303 	mvn.w	r3, #3
 810e2ba:	61fb      	str	r3, [r7, #28]
 810e2bc:	e038      	b.n	810e330 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 810e2be:	2300      	movs	r3, #0
 810e2c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 810e2c2:	f107 0210 	add.w	r2, r7, #16
 810e2c6:	2300      	movs	r3, #0
 810e2c8:	68b9      	ldr	r1, [r7, #8]
 810e2ca:	69b8      	ldr	r0, [r7, #24]
 810e2cc:	f000 fff0 	bl	810f2b0 <xQueueGenericSendFromISR>
 810e2d0:	4603      	mov	r3, r0
 810e2d2:	2b01      	cmp	r3, #1
 810e2d4:	d003      	beq.n	810e2de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 810e2d6:	f06f 0302 	mvn.w	r3, #2
 810e2da:	61fb      	str	r3, [r7, #28]
 810e2dc:	e028      	b.n	810e330 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 810e2de:	693b      	ldr	r3, [r7, #16]
 810e2e0:	2b00      	cmp	r3, #0
 810e2e2:	d025      	beq.n	810e330 <osMessageQueuePut+0xb0>
 810e2e4:	4b15      	ldr	r3, [pc, #84]	; (810e33c <osMessageQueuePut+0xbc>)
 810e2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e2ea:	601a      	str	r2, [r3, #0]
 810e2ec:	f3bf 8f4f 	dsb	sy
 810e2f0:	f3bf 8f6f 	isb	sy
 810e2f4:	e01c      	b.n	810e330 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810e2f6:	69bb      	ldr	r3, [r7, #24]
 810e2f8:	2b00      	cmp	r3, #0
 810e2fa:	d002      	beq.n	810e302 <osMessageQueuePut+0x82>
 810e2fc:	68bb      	ldr	r3, [r7, #8]
 810e2fe:	2b00      	cmp	r3, #0
 810e300:	d103      	bne.n	810e30a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 810e302:	f06f 0303 	mvn.w	r3, #3
 810e306:	61fb      	str	r3, [r7, #28]
 810e308:	e012      	b.n	810e330 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810e30a:	2300      	movs	r3, #0
 810e30c:	683a      	ldr	r2, [r7, #0]
 810e30e:	68b9      	ldr	r1, [r7, #8]
 810e310:	69b8      	ldr	r0, [r7, #24]
 810e312:	f000 fecf 	bl	810f0b4 <xQueueGenericSend>
 810e316:	4603      	mov	r3, r0
 810e318:	2b01      	cmp	r3, #1
 810e31a:	d009      	beq.n	810e330 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 810e31c:	683b      	ldr	r3, [r7, #0]
 810e31e:	2b00      	cmp	r3, #0
 810e320:	d003      	beq.n	810e32a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 810e322:	f06f 0301 	mvn.w	r3, #1
 810e326:	61fb      	str	r3, [r7, #28]
 810e328:	e002      	b.n	810e330 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 810e32a:	f06f 0302 	mvn.w	r3, #2
 810e32e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810e330:	69fb      	ldr	r3, [r7, #28]
}
 810e332:	4618      	mov	r0, r3
 810e334:	3720      	adds	r7, #32
 810e336:	46bd      	mov	sp, r7
 810e338:	bd80      	pop	{r7, pc}
 810e33a:	bf00      	nop
 810e33c:	e000ed04 	.word	0xe000ed04

0810e340 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 810e340:	b580      	push	{r7, lr}
 810e342:	b088      	sub	sp, #32
 810e344:	af00      	add	r7, sp, #0
 810e346:	60f8      	str	r0, [r7, #12]
 810e348:	60b9      	str	r1, [r7, #8]
 810e34a:	607a      	str	r2, [r7, #4]
 810e34c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 810e34e:	68fb      	ldr	r3, [r7, #12]
 810e350:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 810e352:	2300      	movs	r3, #0
 810e354:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810e356:	f3ef 8305 	mrs	r3, IPSR
 810e35a:	617b      	str	r3, [r7, #20]
  return(result);
 810e35c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 810e35e:	2b00      	cmp	r3, #0
 810e360:	d028      	beq.n	810e3b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 810e362:	69bb      	ldr	r3, [r7, #24]
 810e364:	2b00      	cmp	r3, #0
 810e366:	d005      	beq.n	810e374 <osMessageQueueGet+0x34>
 810e368:	68bb      	ldr	r3, [r7, #8]
 810e36a:	2b00      	cmp	r3, #0
 810e36c:	d002      	beq.n	810e374 <osMessageQueueGet+0x34>
 810e36e:	683b      	ldr	r3, [r7, #0]
 810e370:	2b00      	cmp	r3, #0
 810e372:	d003      	beq.n	810e37c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 810e374:	f06f 0303 	mvn.w	r3, #3
 810e378:	61fb      	str	r3, [r7, #28]
 810e37a:	e037      	b.n	810e3ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 810e37c:	2300      	movs	r3, #0
 810e37e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 810e380:	f107 0310 	add.w	r3, r7, #16
 810e384:	461a      	mov	r2, r3
 810e386:	68b9      	ldr	r1, [r7, #8]
 810e388:	69b8      	ldr	r0, [r7, #24]
 810e38a:	f001 f90d 	bl	810f5a8 <xQueueReceiveFromISR>
 810e38e:	4603      	mov	r3, r0
 810e390:	2b01      	cmp	r3, #1
 810e392:	d003      	beq.n	810e39c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 810e394:	f06f 0302 	mvn.w	r3, #2
 810e398:	61fb      	str	r3, [r7, #28]
 810e39a:	e027      	b.n	810e3ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 810e39c:	693b      	ldr	r3, [r7, #16]
 810e39e:	2b00      	cmp	r3, #0
 810e3a0:	d024      	beq.n	810e3ec <osMessageQueueGet+0xac>
 810e3a2:	4b15      	ldr	r3, [pc, #84]	; (810e3f8 <osMessageQueueGet+0xb8>)
 810e3a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810e3a8:	601a      	str	r2, [r3, #0]
 810e3aa:	f3bf 8f4f 	dsb	sy
 810e3ae:	f3bf 8f6f 	isb	sy
 810e3b2:	e01b      	b.n	810e3ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 810e3b4:	69bb      	ldr	r3, [r7, #24]
 810e3b6:	2b00      	cmp	r3, #0
 810e3b8:	d002      	beq.n	810e3c0 <osMessageQueueGet+0x80>
 810e3ba:	68bb      	ldr	r3, [r7, #8]
 810e3bc:	2b00      	cmp	r3, #0
 810e3be:	d103      	bne.n	810e3c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 810e3c0:	f06f 0303 	mvn.w	r3, #3
 810e3c4:	61fb      	str	r3, [r7, #28]
 810e3c6:	e011      	b.n	810e3ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 810e3c8:	683a      	ldr	r2, [r7, #0]
 810e3ca:	68b9      	ldr	r1, [r7, #8]
 810e3cc:	69b8      	ldr	r0, [r7, #24]
 810e3ce:	f001 f80b 	bl	810f3e8 <xQueueReceive>
 810e3d2:	4603      	mov	r3, r0
 810e3d4:	2b01      	cmp	r3, #1
 810e3d6:	d009      	beq.n	810e3ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 810e3d8:	683b      	ldr	r3, [r7, #0]
 810e3da:	2b00      	cmp	r3, #0
 810e3dc:	d003      	beq.n	810e3e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 810e3de:	f06f 0301 	mvn.w	r3, #1
 810e3e2:	61fb      	str	r3, [r7, #28]
 810e3e4:	e002      	b.n	810e3ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 810e3e6:	f06f 0302 	mvn.w	r3, #2
 810e3ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 810e3ec:	69fb      	ldr	r3, [r7, #28]
}
 810e3ee:	4618      	mov	r0, r3
 810e3f0:	3720      	adds	r7, #32
 810e3f2:	46bd      	mov	sp, r7
 810e3f4:	bd80      	pop	{r7, pc}
 810e3f6:	bf00      	nop
 810e3f8:	e000ed04 	.word	0xe000ed04

0810e3fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810e3fc:	b480      	push	{r7}
 810e3fe:	b085      	sub	sp, #20
 810e400:	af00      	add	r7, sp, #0
 810e402:	60f8      	str	r0, [r7, #12]
 810e404:	60b9      	str	r1, [r7, #8]
 810e406:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810e408:	68fb      	ldr	r3, [r7, #12]
 810e40a:	4a07      	ldr	r2, [pc, #28]	; (810e428 <vApplicationGetIdleTaskMemory+0x2c>)
 810e40c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810e40e:	68bb      	ldr	r3, [r7, #8]
 810e410:	4a06      	ldr	r2, [pc, #24]	; (810e42c <vApplicationGetIdleTaskMemory+0x30>)
 810e412:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810e414:	687b      	ldr	r3, [r7, #4]
 810e416:	2280      	movs	r2, #128	; 0x80
 810e418:	601a      	str	r2, [r3, #0]
}
 810e41a:	bf00      	nop
 810e41c:	3714      	adds	r7, #20
 810e41e:	46bd      	mov	sp, r7
 810e420:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e424:	4770      	bx	lr
 810e426:	bf00      	nop
 810e428:	10000218 	.word	0x10000218
 810e42c:	10000274 	.word	0x10000274

0810e430 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810e430:	b480      	push	{r7}
 810e432:	b085      	sub	sp, #20
 810e434:	af00      	add	r7, sp, #0
 810e436:	60f8      	str	r0, [r7, #12]
 810e438:	60b9      	str	r1, [r7, #8]
 810e43a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810e43c:	68fb      	ldr	r3, [r7, #12]
 810e43e:	4a07      	ldr	r2, [pc, #28]	; (810e45c <vApplicationGetTimerTaskMemory+0x2c>)
 810e440:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810e442:	68bb      	ldr	r3, [r7, #8]
 810e444:	4a06      	ldr	r2, [pc, #24]	; (810e460 <vApplicationGetTimerTaskMemory+0x30>)
 810e446:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810e448:	687b      	ldr	r3, [r7, #4]
 810e44a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810e44e:	601a      	str	r2, [r3, #0]
}
 810e450:	bf00      	nop
 810e452:	3714      	adds	r7, #20
 810e454:	46bd      	mov	sp, r7
 810e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e45a:	4770      	bx	lr
 810e45c:	10000474 	.word	0x10000474
 810e460:	100004d0 	.word	0x100004d0

0810e464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810e464:	b580      	push	{r7, lr}
 810e466:	b08a      	sub	sp, #40	; 0x28
 810e468:	af00      	add	r7, sp, #0
 810e46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810e46c:	2300      	movs	r3, #0
 810e46e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810e470:	f001 fcc4 	bl	810fdfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810e474:	4b5b      	ldr	r3, [pc, #364]	; (810e5e4 <pvPortMalloc+0x180>)
 810e476:	681b      	ldr	r3, [r3, #0]
 810e478:	2b00      	cmp	r3, #0
 810e47a:	d101      	bne.n	810e480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810e47c:	f000 f920 	bl	810e6c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810e480:	4b59      	ldr	r3, [pc, #356]	; (810e5e8 <pvPortMalloc+0x184>)
 810e482:	681a      	ldr	r2, [r3, #0]
 810e484:	687b      	ldr	r3, [r7, #4]
 810e486:	4013      	ands	r3, r2
 810e488:	2b00      	cmp	r3, #0
 810e48a:	f040 8093 	bne.w	810e5b4 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810e48e:	687b      	ldr	r3, [r7, #4]
 810e490:	2b00      	cmp	r3, #0
 810e492:	d01d      	beq.n	810e4d0 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 810e494:	2208      	movs	r2, #8
 810e496:	687b      	ldr	r3, [r7, #4]
 810e498:	4413      	add	r3, r2
 810e49a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810e49c:	687b      	ldr	r3, [r7, #4]
 810e49e:	f003 0307 	and.w	r3, r3, #7
 810e4a2:	2b00      	cmp	r3, #0
 810e4a4:	d014      	beq.n	810e4d0 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810e4a6:	687b      	ldr	r3, [r7, #4]
 810e4a8:	f023 0307 	bic.w	r3, r3, #7
 810e4ac:	3308      	adds	r3, #8
 810e4ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810e4b0:	687b      	ldr	r3, [r7, #4]
 810e4b2:	f003 0307 	and.w	r3, r3, #7
 810e4b6:	2b00      	cmp	r3, #0
 810e4b8:	d00a      	beq.n	810e4d0 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e4be:	f383 8811 	msr	BASEPRI, r3
 810e4c2:	f3bf 8f6f 	isb	sy
 810e4c6:	f3bf 8f4f 	dsb	sy
 810e4ca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810e4cc:	bf00      	nop
 810e4ce:	e7fe      	b.n	810e4ce <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810e4d0:	687b      	ldr	r3, [r7, #4]
 810e4d2:	2b00      	cmp	r3, #0
 810e4d4:	d06e      	beq.n	810e5b4 <pvPortMalloc+0x150>
 810e4d6:	4b45      	ldr	r3, [pc, #276]	; (810e5ec <pvPortMalloc+0x188>)
 810e4d8:	681b      	ldr	r3, [r3, #0]
 810e4da:	687a      	ldr	r2, [r7, #4]
 810e4dc:	429a      	cmp	r2, r3
 810e4de:	d869      	bhi.n	810e5b4 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810e4e0:	4b43      	ldr	r3, [pc, #268]	; (810e5f0 <pvPortMalloc+0x18c>)
 810e4e2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810e4e4:	4b42      	ldr	r3, [pc, #264]	; (810e5f0 <pvPortMalloc+0x18c>)
 810e4e6:	681b      	ldr	r3, [r3, #0]
 810e4e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810e4ea:	e004      	b.n	810e4f6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 810e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e4ee:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e4f2:	681b      	ldr	r3, [r3, #0]
 810e4f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810e4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e4f8:	685b      	ldr	r3, [r3, #4]
 810e4fa:	687a      	ldr	r2, [r7, #4]
 810e4fc:	429a      	cmp	r2, r3
 810e4fe:	d903      	bls.n	810e508 <pvPortMalloc+0xa4>
 810e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e502:	681b      	ldr	r3, [r3, #0]
 810e504:	2b00      	cmp	r3, #0
 810e506:	d1f1      	bne.n	810e4ec <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810e508:	4b36      	ldr	r3, [pc, #216]	; (810e5e4 <pvPortMalloc+0x180>)
 810e50a:	681b      	ldr	r3, [r3, #0]
 810e50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810e50e:	429a      	cmp	r2, r3
 810e510:	d050      	beq.n	810e5b4 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810e512:	6a3b      	ldr	r3, [r7, #32]
 810e514:	681b      	ldr	r3, [r3, #0]
 810e516:	2208      	movs	r2, #8
 810e518:	4413      	add	r3, r2
 810e51a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810e51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e51e:	681a      	ldr	r2, [r3, #0]
 810e520:	6a3b      	ldr	r3, [r7, #32]
 810e522:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e526:	685a      	ldr	r2, [r3, #4]
 810e528:	687b      	ldr	r3, [r7, #4]
 810e52a:	1ad2      	subs	r2, r2, r3
 810e52c:	2308      	movs	r3, #8
 810e52e:	005b      	lsls	r3, r3, #1
 810e530:	429a      	cmp	r2, r3
 810e532:	d91f      	bls.n	810e574 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810e534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810e536:	687b      	ldr	r3, [r7, #4]
 810e538:	4413      	add	r3, r2
 810e53a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810e53c:	69bb      	ldr	r3, [r7, #24]
 810e53e:	f003 0307 	and.w	r3, r3, #7
 810e542:	2b00      	cmp	r3, #0
 810e544:	d00a      	beq.n	810e55c <pvPortMalloc+0xf8>
	__asm volatile
 810e546:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e54a:	f383 8811 	msr	BASEPRI, r3
 810e54e:	f3bf 8f6f 	isb	sy
 810e552:	f3bf 8f4f 	dsb	sy
 810e556:	613b      	str	r3, [r7, #16]
}
 810e558:	bf00      	nop
 810e55a:	e7fe      	b.n	810e55a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e55e:	685a      	ldr	r2, [r3, #4]
 810e560:	687b      	ldr	r3, [r7, #4]
 810e562:	1ad2      	subs	r2, r2, r3
 810e564:	69bb      	ldr	r3, [r7, #24]
 810e566:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810e568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e56a:	687a      	ldr	r2, [r7, #4]
 810e56c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810e56e:	69b8      	ldr	r0, [r7, #24]
 810e570:	f000 f908 	bl	810e784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810e574:	4b1d      	ldr	r3, [pc, #116]	; (810e5ec <pvPortMalloc+0x188>)
 810e576:	681a      	ldr	r2, [r3, #0]
 810e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e57a:	685b      	ldr	r3, [r3, #4]
 810e57c:	1ad3      	subs	r3, r2, r3
 810e57e:	4a1b      	ldr	r2, [pc, #108]	; (810e5ec <pvPortMalloc+0x188>)
 810e580:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810e582:	4b1a      	ldr	r3, [pc, #104]	; (810e5ec <pvPortMalloc+0x188>)
 810e584:	681a      	ldr	r2, [r3, #0]
 810e586:	4b1b      	ldr	r3, [pc, #108]	; (810e5f4 <pvPortMalloc+0x190>)
 810e588:	681b      	ldr	r3, [r3, #0]
 810e58a:	429a      	cmp	r2, r3
 810e58c:	d203      	bcs.n	810e596 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810e58e:	4b17      	ldr	r3, [pc, #92]	; (810e5ec <pvPortMalloc+0x188>)
 810e590:	681b      	ldr	r3, [r3, #0]
 810e592:	4a18      	ldr	r2, [pc, #96]	; (810e5f4 <pvPortMalloc+0x190>)
 810e594:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e598:	685a      	ldr	r2, [r3, #4]
 810e59a:	4b13      	ldr	r3, [pc, #76]	; (810e5e8 <pvPortMalloc+0x184>)
 810e59c:	681b      	ldr	r3, [r3, #0]
 810e59e:	431a      	orrs	r2, r3
 810e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e5a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e5a6:	2200      	movs	r2, #0
 810e5a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810e5aa:	4b13      	ldr	r3, [pc, #76]	; (810e5f8 <pvPortMalloc+0x194>)
 810e5ac:	681b      	ldr	r3, [r3, #0]
 810e5ae:	3301      	adds	r3, #1
 810e5b0:	4a11      	ldr	r2, [pc, #68]	; (810e5f8 <pvPortMalloc+0x194>)
 810e5b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810e5b4:	f001 fc30 	bl	810fe18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810e5b8:	69fb      	ldr	r3, [r7, #28]
 810e5ba:	f003 0307 	and.w	r3, r3, #7
 810e5be:	2b00      	cmp	r3, #0
 810e5c0:	d00a      	beq.n	810e5d8 <pvPortMalloc+0x174>
	__asm volatile
 810e5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e5c6:	f383 8811 	msr	BASEPRI, r3
 810e5ca:	f3bf 8f6f 	isb	sy
 810e5ce:	f3bf 8f4f 	dsb	sy
 810e5d2:	60fb      	str	r3, [r7, #12]
}
 810e5d4:	bf00      	nop
 810e5d6:	e7fe      	b.n	810e5d6 <pvPortMalloc+0x172>
	return pvReturn;
 810e5d8:	69fb      	ldr	r3, [r7, #28]
}
 810e5da:	4618      	mov	r0, r3
 810e5dc:	3728      	adds	r7, #40	; 0x28
 810e5de:	46bd      	mov	sp, r7
 810e5e0:	bd80      	pop	{r7, pc}
 810e5e2:	bf00      	nop
 810e5e4:	100044d8 	.word	0x100044d8
 810e5e8:	100044ec 	.word	0x100044ec
 810e5ec:	100044dc 	.word	0x100044dc
 810e5f0:	100044d0 	.word	0x100044d0
 810e5f4:	100044e0 	.word	0x100044e0
 810e5f8:	100044e4 	.word	0x100044e4

0810e5fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810e5fc:	b580      	push	{r7, lr}
 810e5fe:	b086      	sub	sp, #24
 810e600:	af00      	add	r7, sp, #0
 810e602:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810e604:	687b      	ldr	r3, [r7, #4]
 810e606:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810e608:	687b      	ldr	r3, [r7, #4]
 810e60a:	2b00      	cmp	r3, #0
 810e60c:	d04d      	beq.n	810e6aa <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810e60e:	2308      	movs	r3, #8
 810e610:	425b      	negs	r3, r3
 810e612:	697a      	ldr	r2, [r7, #20]
 810e614:	4413      	add	r3, r2
 810e616:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810e618:	697b      	ldr	r3, [r7, #20]
 810e61a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810e61c:	693b      	ldr	r3, [r7, #16]
 810e61e:	685a      	ldr	r2, [r3, #4]
 810e620:	4b24      	ldr	r3, [pc, #144]	; (810e6b4 <vPortFree+0xb8>)
 810e622:	681b      	ldr	r3, [r3, #0]
 810e624:	4013      	ands	r3, r2
 810e626:	2b00      	cmp	r3, #0
 810e628:	d10a      	bne.n	810e640 <vPortFree+0x44>
	__asm volatile
 810e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e62e:	f383 8811 	msr	BASEPRI, r3
 810e632:	f3bf 8f6f 	isb	sy
 810e636:	f3bf 8f4f 	dsb	sy
 810e63a:	60fb      	str	r3, [r7, #12]
}
 810e63c:	bf00      	nop
 810e63e:	e7fe      	b.n	810e63e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810e640:	693b      	ldr	r3, [r7, #16]
 810e642:	681b      	ldr	r3, [r3, #0]
 810e644:	2b00      	cmp	r3, #0
 810e646:	d00a      	beq.n	810e65e <vPortFree+0x62>
	__asm volatile
 810e648:	f04f 0350 	mov.w	r3, #80	; 0x50
 810e64c:	f383 8811 	msr	BASEPRI, r3
 810e650:	f3bf 8f6f 	isb	sy
 810e654:	f3bf 8f4f 	dsb	sy
 810e658:	60bb      	str	r3, [r7, #8]
}
 810e65a:	bf00      	nop
 810e65c:	e7fe      	b.n	810e65c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810e65e:	693b      	ldr	r3, [r7, #16]
 810e660:	685a      	ldr	r2, [r3, #4]
 810e662:	4b14      	ldr	r3, [pc, #80]	; (810e6b4 <vPortFree+0xb8>)
 810e664:	681b      	ldr	r3, [r3, #0]
 810e666:	4013      	ands	r3, r2
 810e668:	2b00      	cmp	r3, #0
 810e66a:	d01e      	beq.n	810e6aa <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810e66c:	693b      	ldr	r3, [r7, #16]
 810e66e:	681b      	ldr	r3, [r3, #0]
 810e670:	2b00      	cmp	r3, #0
 810e672:	d11a      	bne.n	810e6aa <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810e674:	693b      	ldr	r3, [r7, #16]
 810e676:	685a      	ldr	r2, [r3, #4]
 810e678:	4b0e      	ldr	r3, [pc, #56]	; (810e6b4 <vPortFree+0xb8>)
 810e67a:	681b      	ldr	r3, [r3, #0]
 810e67c:	43db      	mvns	r3, r3
 810e67e:	401a      	ands	r2, r3
 810e680:	693b      	ldr	r3, [r7, #16]
 810e682:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810e684:	f001 fbba 	bl	810fdfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810e688:	693b      	ldr	r3, [r7, #16]
 810e68a:	685a      	ldr	r2, [r3, #4]
 810e68c:	4b0a      	ldr	r3, [pc, #40]	; (810e6b8 <vPortFree+0xbc>)
 810e68e:	681b      	ldr	r3, [r3, #0]
 810e690:	4413      	add	r3, r2
 810e692:	4a09      	ldr	r2, [pc, #36]	; (810e6b8 <vPortFree+0xbc>)
 810e694:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810e696:	6938      	ldr	r0, [r7, #16]
 810e698:	f000 f874 	bl	810e784 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810e69c:	4b07      	ldr	r3, [pc, #28]	; (810e6bc <vPortFree+0xc0>)
 810e69e:	681b      	ldr	r3, [r3, #0]
 810e6a0:	3301      	adds	r3, #1
 810e6a2:	4a06      	ldr	r2, [pc, #24]	; (810e6bc <vPortFree+0xc0>)
 810e6a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810e6a6:	f001 fbb7 	bl	810fe18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810e6aa:	bf00      	nop
 810e6ac:	3718      	adds	r7, #24
 810e6ae:	46bd      	mov	sp, r7
 810e6b0:	bd80      	pop	{r7, pc}
 810e6b2:	bf00      	nop
 810e6b4:	100044ec 	.word	0x100044ec
 810e6b8:	100044dc 	.word	0x100044dc
 810e6bc:	100044e8 	.word	0x100044e8

0810e6c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810e6c0:	b480      	push	{r7}
 810e6c2:	b085      	sub	sp, #20
 810e6c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810e6c6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810e6ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810e6cc:	4b27      	ldr	r3, [pc, #156]	; (810e76c <prvHeapInit+0xac>)
 810e6ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810e6d0:	68fb      	ldr	r3, [r7, #12]
 810e6d2:	f003 0307 	and.w	r3, r3, #7
 810e6d6:	2b00      	cmp	r3, #0
 810e6d8:	d00c      	beq.n	810e6f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810e6da:	68fb      	ldr	r3, [r7, #12]
 810e6dc:	3307      	adds	r3, #7
 810e6de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810e6e0:	68fb      	ldr	r3, [r7, #12]
 810e6e2:	f023 0307 	bic.w	r3, r3, #7
 810e6e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810e6e8:	68ba      	ldr	r2, [r7, #8]
 810e6ea:	68fb      	ldr	r3, [r7, #12]
 810e6ec:	1ad3      	subs	r3, r2, r3
 810e6ee:	4a1f      	ldr	r2, [pc, #124]	; (810e76c <prvHeapInit+0xac>)
 810e6f0:	4413      	add	r3, r2
 810e6f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810e6f4:	68fb      	ldr	r3, [r7, #12]
 810e6f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810e6f8:	4a1d      	ldr	r2, [pc, #116]	; (810e770 <prvHeapInit+0xb0>)
 810e6fa:	687b      	ldr	r3, [r7, #4]
 810e6fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810e6fe:	4b1c      	ldr	r3, [pc, #112]	; (810e770 <prvHeapInit+0xb0>)
 810e700:	2200      	movs	r2, #0
 810e702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810e704:	687b      	ldr	r3, [r7, #4]
 810e706:	68ba      	ldr	r2, [r7, #8]
 810e708:	4413      	add	r3, r2
 810e70a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810e70c:	2208      	movs	r2, #8
 810e70e:	68fb      	ldr	r3, [r7, #12]
 810e710:	1a9b      	subs	r3, r3, r2
 810e712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810e714:	68fb      	ldr	r3, [r7, #12]
 810e716:	f023 0307 	bic.w	r3, r3, #7
 810e71a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810e71c:	68fb      	ldr	r3, [r7, #12]
 810e71e:	4a15      	ldr	r2, [pc, #84]	; (810e774 <prvHeapInit+0xb4>)
 810e720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810e722:	4b14      	ldr	r3, [pc, #80]	; (810e774 <prvHeapInit+0xb4>)
 810e724:	681b      	ldr	r3, [r3, #0]
 810e726:	2200      	movs	r2, #0
 810e728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810e72a:	4b12      	ldr	r3, [pc, #72]	; (810e774 <prvHeapInit+0xb4>)
 810e72c:	681b      	ldr	r3, [r3, #0]
 810e72e:	2200      	movs	r2, #0
 810e730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810e732:	687b      	ldr	r3, [r7, #4]
 810e734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810e736:	683b      	ldr	r3, [r7, #0]
 810e738:	68fa      	ldr	r2, [r7, #12]
 810e73a:	1ad2      	subs	r2, r2, r3
 810e73c:	683b      	ldr	r3, [r7, #0]
 810e73e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810e740:	4b0c      	ldr	r3, [pc, #48]	; (810e774 <prvHeapInit+0xb4>)
 810e742:	681a      	ldr	r2, [r3, #0]
 810e744:	683b      	ldr	r3, [r7, #0]
 810e746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810e748:	683b      	ldr	r3, [r7, #0]
 810e74a:	685b      	ldr	r3, [r3, #4]
 810e74c:	4a0a      	ldr	r2, [pc, #40]	; (810e778 <prvHeapInit+0xb8>)
 810e74e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810e750:	683b      	ldr	r3, [r7, #0]
 810e752:	685b      	ldr	r3, [r3, #4]
 810e754:	4a09      	ldr	r2, [pc, #36]	; (810e77c <prvHeapInit+0xbc>)
 810e756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810e758:	4b09      	ldr	r3, [pc, #36]	; (810e780 <prvHeapInit+0xc0>)
 810e75a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810e75e:	601a      	str	r2, [r3, #0]
}
 810e760:	bf00      	nop
 810e762:	3714      	adds	r7, #20
 810e764:	46bd      	mov	sp, r7
 810e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e76a:	4770      	bx	lr
 810e76c:	100008d0 	.word	0x100008d0
 810e770:	100044d0 	.word	0x100044d0
 810e774:	100044d8 	.word	0x100044d8
 810e778:	100044e0 	.word	0x100044e0
 810e77c:	100044dc 	.word	0x100044dc
 810e780:	100044ec 	.word	0x100044ec

0810e784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810e784:	b480      	push	{r7}
 810e786:	b085      	sub	sp, #20
 810e788:	af00      	add	r7, sp, #0
 810e78a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810e78c:	4b28      	ldr	r3, [pc, #160]	; (810e830 <prvInsertBlockIntoFreeList+0xac>)
 810e78e:	60fb      	str	r3, [r7, #12]
 810e790:	e002      	b.n	810e798 <prvInsertBlockIntoFreeList+0x14>
 810e792:	68fb      	ldr	r3, [r7, #12]
 810e794:	681b      	ldr	r3, [r3, #0]
 810e796:	60fb      	str	r3, [r7, #12]
 810e798:	68fb      	ldr	r3, [r7, #12]
 810e79a:	681b      	ldr	r3, [r3, #0]
 810e79c:	687a      	ldr	r2, [r7, #4]
 810e79e:	429a      	cmp	r2, r3
 810e7a0:	d8f7      	bhi.n	810e792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810e7a2:	68fb      	ldr	r3, [r7, #12]
 810e7a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810e7a6:	68fb      	ldr	r3, [r7, #12]
 810e7a8:	685b      	ldr	r3, [r3, #4]
 810e7aa:	68ba      	ldr	r2, [r7, #8]
 810e7ac:	4413      	add	r3, r2
 810e7ae:	687a      	ldr	r2, [r7, #4]
 810e7b0:	429a      	cmp	r2, r3
 810e7b2:	d108      	bne.n	810e7c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810e7b4:	68fb      	ldr	r3, [r7, #12]
 810e7b6:	685a      	ldr	r2, [r3, #4]
 810e7b8:	687b      	ldr	r3, [r7, #4]
 810e7ba:	685b      	ldr	r3, [r3, #4]
 810e7bc:	441a      	add	r2, r3
 810e7be:	68fb      	ldr	r3, [r7, #12]
 810e7c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810e7c2:	68fb      	ldr	r3, [r7, #12]
 810e7c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810e7c6:	687b      	ldr	r3, [r7, #4]
 810e7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810e7ca:	687b      	ldr	r3, [r7, #4]
 810e7cc:	685b      	ldr	r3, [r3, #4]
 810e7ce:	68ba      	ldr	r2, [r7, #8]
 810e7d0:	441a      	add	r2, r3
 810e7d2:	68fb      	ldr	r3, [r7, #12]
 810e7d4:	681b      	ldr	r3, [r3, #0]
 810e7d6:	429a      	cmp	r2, r3
 810e7d8:	d118      	bne.n	810e80c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810e7da:	68fb      	ldr	r3, [r7, #12]
 810e7dc:	681a      	ldr	r2, [r3, #0]
 810e7de:	4b15      	ldr	r3, [pc, #84]	; (810e834 <prvInsertBlockIntoFreeList+0xb0>)
 810e7e0:	681b      	ldr	r3, [r3, #0]
 810e7e2:	429a      	cmp	r2, r3
 810e7e4:	d00d      	beq.n	810e802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810e7e6:	687b      	ldr	r3, [r7, #4]
 810e7e8:	685a      	ldr	r2, [r3, #4]
 810e7ea:	68fb      	ldr	r3, [r7, #12]
 810e7ec:	681b      	ldr	r3, [r3, #0]
 810e7ee:	685b      	ldr	r3, [r3, #4]
 810e7f0:	441a      	add	r2, r3
 810e7f2:	687b      	ldr	r3, [r7, #4]
 810e7f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810e7f6:	68fb      	ldr	r3, [r7, #12]
 810e7f8:	681b      	ldr	r3, [r3, #0]
 810e7fa:	681a      	ldr	r2, [r3, #0]
 810e7fc:	687b      	ldr	r3, [r7, #4]
 810e7fe:	601a      	str	r2, [r3, #0]
 810e800:	e008      	b.n	810e814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810e802:	4b0c      	ldr	r3, [pc, #48]	; (810e834 <prvInsertBlockIntoFreeList+0xb0>)
 810e804:	681a      	ldr	r2, [r3, #0]
 810e806:	687b      	ldr	r3, [r7, #4]
 810e808:	601a      	str	r2, [r3, #0]
 810e80a:	e003      	b.n	810e814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810e80c:	68fb      	ldr	r3, [r7, #12]
 810e80e:	681a      	ldr	r2, [r3, #0]
 810e810:	687b      	ldr	r3, [r7, #4]
 810e812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810e814:	68fa      	ldr	r2, [r7, #12]
 810e816:	687b      	ldr	r3, [r7, #4]
 810e818:	429a      	cmp	r2, r3
 810e81a:	d002      	beq.n	810e822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810e81c:	68fb      	ldr	r3, [r7, #12]
 810e81e:	687a      	ldr	r2, [r7, #4]
 810e820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810e822:	bf00      	nop
 810e824:	3714      	adds	r7, #20
 810e826:	46bd      	mov	sp, r7
 810e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e82c:	4770      	bx	lr
 810e82e:	bf00      	nop
 810e830:	100044d0 	.word	0x100044d0
 810e834:	100044d8 	.word	0x100044d8

0810e838 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810e838:	b480      	push	{r7}
 810e83a:	b083      	sub	sp, #12
 810e83c:	af00      	add	r7, sp, #0
 810e83e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e840:	687b      	ldr	r3, [r7, #4]
 810e842:	f103 0208 	add.w	r2, r3, #8
 810e846:	687b      	ldr	r3, [r7, #4]
 810e848:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810e84a:	687b      	ldr	r3, [r7, #4]
 810e84c:	f04f 32ff 	mov.w	r2, #4294967295
 810e850:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e852:	687b      	ldr	r3, [r7, #4]
 810e854:	f103 0208 	add.w	r2, r3, #8
 810e858:	687b      	ldr	r3, [r7, #4]
 810e85a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810e85c:	687b      	ldr	r3, [r7, #4]
 810e85e:	f103 0208 	add.w	r2, r3, #8
 810e862:	687b      	ldr	r3, [r7, #4]
 810e864:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810e866:	687b      	ldr	r3, [r7, #4]
 810e868:	2200      	movs	r2, #0
 810e86a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810e86c:	bf00      	nop
 810e86e:	370c      	adds	r7, #12
 810e870:	46bd      	mov	sp, r7
 810e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e876:	4770      	bx	lr

0810e878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810e878:	b480      	push	{r7}
 810e87a:	b083      	sub	sp, #12
 810e87c:	af00      	add	r7, sp, #0
 810e87e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810e880:	687b      	ldr	r3, [r7, #4]
 810e882:	2200      	movs	r2, #0
 810e884:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810e886:	bf00      	nop
 810e888:	370c      	adds	r7, #12
 810e88a:	46bd      	mov	sp, r7
 810e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e890:	4770      	bx	lr

0810e892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810e892:	b480      	push	{r7}
 810e894:	b085      	sub	sp, #20
 810e896:	af00      	add	r7, sp, #0
 810e898:	6078      	str	r0, [r7, #4]
 810e89a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810e89c:	687b      	ldr	r3, [r7, #4]
 810e89e:	685b      	ldr	r3, [r3, #4]
 810e8a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810e8a2:	683b      	ldr	r3, [r7, #0]
 810e8a4:	68fa      	ldr	r2, [r7, #12]
 810e8a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810e8a8:	68fb      	ldr	r3, [r7, #12]
 810e8aa:	689a      	ldr	r2, [r3, #8]
 810e8ac:	683b      	ldr	r3, [r7, #0]
 810e8ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810e8b0:	68fb      	ldr	r3, [r7, #12]
 810e8b2:	689b      	ldr	r3, [r3, #8]
 810e8b4:	683a      	ldr	r2, [r7, #0]
 810e8b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810e8b8:	68fb      	ldr	r3, [r7, #12]
 810e8ba:	683a      	ldr	r2, [r7, #0]
 810e8bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810e8be:	683b      	ldr	r3, [r7, #0]
 810e8c0:	687a      	ldr	r2, [r7, #4]
 810e8c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810e8c4:	687b      	ldr	r3, [r7, #4]
 810e8c6:	681b      	ldr	r3, [r3, #0]
 810e8c8:	1c5a      	adds	r2, r3, #1
 810e8ca:	687b      	ldr	r3, [r7, #4]
 810e8cc:	601a      	str	r2, [r3, #0]
}
 810e8ce:	bf00      	nop
 810e8d0:	3714      	adds	r7, #20
 810e8d2:	46bd      	mov	sp, r7
 810e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e8d8:	4770      	bx	lr

0810e8da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810e8da:	b480      	push	{r7}
 810e8dc:	b085      	sub	sp, #20
 810e8de:	af00      	add	r7, sp, #0
 810e8e0:	6078      	str	r0, [r7, #4]
 810e8e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810e8e4:	683b      	ldr	r3, [r7, #0]
 810e8e6:	681b      	ldr	r3, [r3, #0]
 810e8e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810e8ea:	68bb      	ldr	r3, [r7, #8]
 810e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e8f0:	d103      	bne.n	810e8fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810e8f2:	687b      	ldr	r3, [r7, #4]
 810e8f4:	691b      	ldr	r3, [r3, #16]
 810e8f6:	60fb      	str	r3, [r7, #12]
 810e8f8:	e00c      	b.n	810e914 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810e8fa:	687b      	ldr	r3, [r7, #4]
 810e8fc:	3308      	adds	r3, #8
 810e8fe:	60fb      	str	r3, [r7, #12]
 810e900:	e002      	b.n	810e908 <vListInsert+0x2e>
 810e902:	68fb      	ldr	r3, [r7, #12]
 810e904:	685b      	ldr	r3, [r3, #4]
 810e906:	60fb      	str	r3, [r7, #12]
 810e908:	68fb      	ldr	r3, [r7, #12]
 810e90a:	685b      	ldr	r3, [r3, #4]
 810e90c:	681b      	ldr	r3, [r3, #0]
 810e90e:	68ba      	ldr	r2, [r7, #8]
 810e910:	429a      	cmp	r2, r3
 810e912:	d2f6      	bcs.n	810e902 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810e914:	68fb      	ldr	r3, [r7, #12]
 810e916:	685a      	ldr	r2, [r3, #4]
 810e918:	683b      	ldr	r3, [r7, #0]
 810e91a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810e91c:	683b      	ldr	r3, [r7, #0]
 810e91e:	685b      	ldr	r3, [r3, #4]
 810e920:	683a      	ldr	r2, [r7, #0]
 810e922:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810e924:	683b      	ldr	r3, [r7, #0]
 810e926:	68fa      	ldr	r2, [r7, #12]
 810e928:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810e92a:	68fb      	ldr	r3, [r7, #12]
 810e92c:	683a      	ldr	r2, [r7, #0]
 810e92e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810e930:	683b      	ldr	r3, [r7, #0]
 810e932:	687a      	ldr	r2, [r7, #4]
 810e934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810e936:	687b      	ldr	r3, [r7, #4]
 810e938:	681b      	ldr	r3, [r3, #0]
 810e93a:	1c5a      	adds	r2, r3, #1
 810e93c:	687b      	ldr	r3, [r7, #4]
 810e93e:	601a      	str	r2, [r3, #0]
}
 810e940:	bf00      	nop
 810e942:	3714      	adds	r7, #20
 810e944:	46bd      	mov	sp, r7
 810e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e94a:	4770      	bx	lr

0810e94c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810e94c:	b480      	push	{r7}
 810e94e:	b085      	sub	sp, #20
 810e950:	af00      	add	r7, sp, #0
 810e952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810e954:	687b      	ldr	r3, [r7, #4]
 810e956:	691b      	ldr	r3, [r3, #16]
 810e958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810e95a:	687b      	ldr	r3, [r7, #4]
 810e95c:	685b      	ldr	r3, [r3, #4]
 810e95e:	687a      	ldr	r2, [r7, #4]
 810e960:	6892      	ldr	r2, [r2, #8]
 810e962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810e964:	687b      	ldr	r3, [r7, #4]
 810e966:	689b      	ldr	r3, [r3, #8]
 810e968:	687a      	ldr	r2, [r7, #4]
 810e96a:	6852      	ldr	r2, [r2, #4]
 810e96c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810e96e:	68fb      	ldr	r3, [r7, #12]
 810e970:	685b      	ldr	r3, [r3, #4]
 810e972:	687a      	ldr	r2, [r7, #4]
 810e974:	429a      	cmp	r2, r3
 810e976:	d103      	bne.n	810e980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810e978:	687b      	ldr	r3, [r7, #4]
 810e97a:	689a      	ldr	r2, [r3, #8]
 810e97c:	68fb      	ldr	r3, [r7, #12]
 810e97e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810e980:	687b      	ldr	r3, [r7, #4]
 810e982:	2200      	movs	r2, #0
 810e984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810e986:	68fb      	ldr	r3, [r7, #12]
 810e988:	681b      	ldr	r3, [r3, #0]
 810e98a:	1e5a      	subs	r2, r3, #1
 810e98c:	68fb      	ldr	r3, [r7, #12]
 810e98e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810e990:	68fb      	ldr	r3, [r7, #12]
 810e992:	681b      	ldr	r3, [r3, #0]
}
 810e994:	4618      	mov	r0, r3
 810e996:	3714      	adds	r7, #20
 810e998:	46bd      	mov	sp, r7
 810e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e99e:	4770      	bx	lr

0810e9a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810e9a0:	b480      	push	{r7}
 810e9a2:	b085      	sub	sp, #20
 810e9a4:	af00      	add	r7, sp, #0
 810e9a6:	60f8      	str	r0, [r7, #12]
 810e9a8:	60b9      	str	r1, [r7, #8]
 810e9aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810e9ac:	68fb      	ldr	r3, [r7, #12]
 810e9ae:	3b04      	subs	r3, #4
 810e9b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810e9b2:	68fb      	ldr	r3, [r7, #12]
 810e9b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810e9b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810e9ba:	68fb      	ldr	r3, [r7, #12]
 810e9bc:	3b04      	subs	r3, #4
 810e9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810e9c0:	68bb      	ldr	r3, [r7, #8]
 810e9c2:	f023 0201 	bic.w	r2, r3, #1
 810e9c6:	68fb      	ldr	r3, [r7, #12]
 810e9c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810e9ca:	68fb      	ldr	r3, [r7, #12]
 810e9cc:	3b04      	subs	r3, #4
 810e9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810e9d0:	4a0c      	ldr	r2, [pc, #48]	; (810ea04 <pxPortInitialiseStack+0x64>)
 810e9d2:	68fb      	ldr	r3, [r7, #12]
 810e9d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810e9d6:	68fb      	ldr	r3, [r7, #12]
 810e9d8:	3b14      	subs	r3, #20
 810e9da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810e9dc:	687a      	ldr	r2, [r7, #4]
 810e9de:	68fb      	ldr	r3, [r7, #12]
 810e9e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810e9e2:	68fb      	ldr	r3, [r7, #12]
 810e9e4:	3b04      	subs	r3, #4
 810e9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810e9e8:	68fb      	ldr	r3, [r7, #12]
 810e9ea:	f06f 0202 	mvn.w	r2, #2
 810e9ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810e9f0:	68fb      	ldr	r3, [r7, #12]
 810e9f2:	3b20      	subs	r3, #32
 810e9f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810e9f6:	68fb      	ldr	r3, [r7, #12]
}
 810e9f8:	4618      	mov	r0, r3
 810e9fa:	3714      	adds	r7, #20
 810e9fc:	46bd      	mov	sp, r7
 810e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea02:	4770      	bx	lr
 810ea04:	0810ea09 	.word	0x0810ea09

0810ea08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810ea08:	b480      	push	{r7}
 810ea0a:	b085      	sub	sp, #20
 810ea0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810ea0e:	2300      	movs	r3, #0
 810ea10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810ea12:	4b12      	ldr	r3, [pc, #72]	; (810ea5c <prvTaskExitError+0x54>)
 810ea14:	681b      	ldr	r3, [r3, #0]
 810ea16:	f1b3 3fff 	cmp.w	r3, #4294967295
 810ea1a:	d00a      	beq.n	810ea32 <prvTaskExitError+0x2a>
	__asm volatile
 810ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ea20:	f383 8811 	msr	BASEPRI, r3
 810ea24:	f3bf 8f6f 	isb	sy
 810ea28:	f3bf 8f4f 	dsb	sy
 810ea2c:	60fb      	str	r3, [r7, #12]
}
 810ea2e:	bf00      	nop
 810ea30:	e7fe      	b.n	810ea30 <prvTaskExitError+0x28>
	__asm volatile
 810ea32:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ea36:	f383 8811 	msr	BASEPRI, r3
 810ea3a:	f3bf 8f6f 	isb	sy
 810ea3e:	f3bf 8f4f 	dsb	sy
 810ea42:	60bb      	str	r3, [r7, #8]
}
 810ea44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810ea46:	bf00      	nop
 810ea48:	687b      	ldr	r3, [r7, #4]
 810ea4a:	2b00      	cmp	r3, #0
 810ea4c:	d0fc      	beq.n	810ea48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810ea4e:	bf00      	nop
 810ea50:	bf00      	nop
 810ea52:	3714      	adds	r7, #20
 810ea54:	46bd      	mov	sp, r7
 810ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea5a:	4770      	bx	lr
 810ea5c:	10000010 	.word	0x10000010

0810ea60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810ea60:	4b07      	ldr	r3, [pc, #28]	; (810ea80 <pxCurrentTCBConst2>)
 810ea62:	6819      	ldr	r1, [r3, #0]
 810ea64:	6808      	ldr	r0, [r1, #0]
 810ea66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ea6a:	f380 8809 	msr	PSP, r0
 810ea6e:	f3bf 8f6f 	isb	sy
 810ea72:	f04f 0000 	mov.w	r0, #0
 810ea76:	f380 8811 	msr	BASEPRI, r0
 810ea7a:	4770      	bx	lr
 810ea7c:	f3af 8000 	nop.w

0810ea80 <pxCurrentTCBConst2>:
 810ea80:	100044f8 	.word	0x100044f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810ea84:	bf00      	nop
 810ea86:	bf00      	nop

0810ea88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810ea88:	4808      	ldr	r0, [pc, #32]	; (810eaac <prvPortStartFirstTask+0x24>)
 810ea8a:	6800      	ldr	r0, [r0, #0]
 810ea8c:	6800      	ldr	r0, [r0, #0]
 810ea8e:	f380 8808 	msr	MSP, r0
 810ea92:	f04f 0000 	mov.w	r0, #0
 810ea96:	f380 8814 	msr	CONTROL, r0
 810ea9a:	b662      	cpsie	i
 810ea9c:	b661      	cpsie	f
 810ea9e:	f3bf 8f4f 	dsb	sy
 810eaa2:	f3bf 8f6f 	isb	sy
 810eaa6:	df00      	svc	0
 810eaa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810eaaa:	bf00      	nop
 810eaac:	e000ed08 	.word	0xe000ed08

0810eab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810eab0:	b580      	push	{r7, lr}
 810eab2:	b086      	sub	sp, #24
 810eab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810eab6:	4b46      	ldr	r3, [pc, #280]	; (810ebd0 <xPortStartScheduler+0x120>)
 810eab8:	681b      	ldr	r3, [r3, #0]
 810eaba:	4a46      	ldr	r2, [pc, #280]	; (810ebd4 <xPortStartScheduler+0x124>)
 810eabc:	4293      	cmp	r3, r2
 810eabe:	d10a      	bne.n	810ead6 <xPortStartScheduler+0x26>
	__asm volatile
 810eac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eac4:	f383 8811 	msr	BASEPRI, r3
 810eac8:	f3bf 8f6f 	isb	sy
 810eacc:	f3bf 8f4f 	dsb	sy
 810ead0:	613b      	str	r3, [r7, #16]
}
 810ead2:	bf00      	nop
 810ead4:	e7fe      	b.n	810ead4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810ead6:	4b3e      	ldr	r3, [pc, #248]	; (810ebd0 <xPortStartScheduler+0x120>)
 810ead8:	681b      	ldr	r3, [r3, #0]
 810eada:	4a3f      	ldr	r2, [pc, #252]	; (810ebd8 <xPortStartScheduler+0x128>)
 810eadc:	4293      	cmp	r3, r2
 810eade:	d10a      	bne.n	810eaf6 <xPortStartScheduler+0x46>
	__asm volatile
 810eae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eae4:	f383 8811 	msr	BASEPRI, r3
 810eae8:	f3bf 8f6f 	isb	sy
 810eaec:	f3bf 8f4f 	dsb	sy
 810eaf0:	60fb      	str	r3, [r7, #12]
}
 810eaf2:	bf00      	nop
 810eaf4:	e7fe      	b.n	810eaf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810eaf6:	4b39      	ldr	r3, [pc, #228]	; (810ebdc <xPortStartScheduler+0x12c>)
 810eaf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810eafa:	697b      	ldr	r3, [r7, #20]
 810eafc:	781b      	ldrb	r3, [r3, #0]
 810eafe:	b2db      	uxtb	r3, r3
 810eb00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810eb02:	697b      	ldr	r3, [r7, #20]
 810eb04:	22ff      	movs	r2, #255	; 0xff
 810eb06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810eb08:	697b      	ldr	r3, [r7, #20]
 810eb0a:	781b      	ldrb	r3, [r3, #0]
 810eb0c:	b2db      	uxtb	r3, r3
 810eb0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810eb10:	78fb      	ldrb	r3, [r7, #3]
 810eb12:	b2db      	uxtb	r3, r3
 810eb14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 810eb18:	b2da      	uxtb	r2, r3
 810eb1a:	4b31      	ldr	r3, [pc, #196]	; (810ebe0 <xPortStartScheduler+0x130>)
 810eb1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810eb1e:	4b31      	ldr	r3, [pc, #196]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb20:	2207      	movs	r2, #7
 810eb22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810eb24:	e009      	b.n	810eb3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 810eb26:	4b2f      	ldr	r3, [pc, #188]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb28:	681b      	ldr	r3, [r3, #0]
 810eb2a:	3b01      	subs	r3, #1
 810eb2c:	4a2d      	ldr	r2, [pc, #180]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810eb30:	78fb      	ldrb	r3, [r7, #3]
 810eb32:	b2db      	uxtb	r3, r3
 810eb34:	005b      	lsls	r3, r3, #1
 810eb36:	b2db      	uxtb	r3, r3
 810eb38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810eb3a:	78fb      	ldrb	r3, [r7, #3]
 810eb3c:	b2db      	uxtb	r3, r3
 810eb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810eb42:	2b80      	cmp	r3, #128	; 0x80
 810eb44:	d0ef      	beq.n	810eb26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810eb46:	4b27      	ldr	r3, [pc, #156]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb48:	681b      	ldr	r3, [r3, #0]
 810eb4a:	f1c3 0307 	rsb	r3, r3, #7
 810eb4e:	2b04      	cmp	r3, #4
 810eb50:	d00a      	beq.n	810eb68 <xPortStartScheduler+0xb8>
	__asm volatile
 810eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 810eb56:	f383 8811 	msr	BASEPRI, r3
 810eb5a:	f3bf 8f6f 	isb	sy
 810eb5e:	f3bf 8f4f 	dsb	sy
 810eb62:	60bb      	str	r3, [r7, #8]
}
 810eb64:	bf00      	nop
 810eb66:	e7fe      	b.n	810eb66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810eb68:	4b1e      	ldr	r3, [pc, #120]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb6a:	681b      	ldr	r3, [r3, #0]
 810eb6c:	021b      	lsls	r3, r3, #8
 810eb6e:	4a1d      	ldr	r2, [pc, #116]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810eb72:	4b1c      	ldr	r3, [pc, #112]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb74:	681b      	ldr	r3, [r3, #0]
 810eb76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810eb7a:	4a1a      	ldr	r2, [pc, #104]	; (810ebe4 <xPortStartScheduler+0x134>)
 810eb7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810eb7e:	687b      	ldr	r3, [r7, #4]
 810eb80:	b2da      	uxtb	r2, r3
 810eb82:	697b      	ldr	r3, [r7, #20]
 810eb84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810eb86:	4b18      	ldr	r3, [pc, #96]	; (810ebe8 <xPortStartScheduler+0x138>)
 810eb88:	681b      	ldr	r3, [r3, #0]
 810eb8a:	4a17      	ldr	r2, [pc, #92]	; (810ebe8 <xPortStartScheduler+0x138>)
 810eb8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810eb90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810eb92:	4b15      	ldr	r3, [pc, #84]	; (810ebe8 <xPortStartScheduler+0x138>)
 810eb94:	681b      	ldr	r3, [r3, #0]
 810eb96:	4a14      	ldr	r2, [pc, #80]	; (810ebe8 <xPortStartScheduler+0x138>)
 810eb98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810eb9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810eb9e:	f000 f8dd 	bl	810ed5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810eba2:	4b12      	ldr	r3, [pc, #72]	; (810ebec <xPortStartScheduler+0x13c>)
 810eba4:	2200      	movs	r2, #0
 810eba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810eba8:	f000 f8fc 	bl	810eda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810ebac:	4b10      	ldr	r3, [pc, #64]	; (810ebf0 <xPortStartScheduler+0x140>)
 810ebae:	681b      	ldr	r3, [r3, #0]
 810ebb0:	4a0f      	ldr	r2, [pc, #60]	; (810ebf0 <xPortStartScheduler+0x140>)
 810ebb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 810ebb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810ebb8:	f7ff ff66 	bl	810ea88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810ebbc:	f001 faa6 	bl	811010c <vTaskSwitchContext>
	prvTaskExitError();
 810ebc0:	f7ff ff22 	bl	810ea08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810ebc4:	2300      	movs	r3, #0
}
 810ebc6:	4618      	mov	r0, r3
 810ebc8:	3718      	adds	r7, #24
 810ebca:	46bd      	mov	sp, r7
 810ebcc:	bd80      	pop	{r7, pc}
 810ebce:	bf00      	nop
 810ebd0:	e000ed00 	.word	0xe000ed00
 810ebd4:	410fc271 	.word	0x410fc271
 810ebd8:	410fc270 	.word	0x410fc270
 810ebdc:	e000e400 	.word	0xe000e400
 810ebe0:	100044f0 	.word	0x100044f0
 810ebe4:	100044f4 	.word	0x100044f4
 810ebe8:	e000ed20 	.word	0xe000ed20
 810ebec:	10000010 	.word	0x10000010
 810ebf0:	e000ef34 	.word	0xe000ef34

0810ebf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810ebf4:	b480      	push	{r7}
 810ebf6:	b083      	sub	sp, #12
 810ebf8:	af00      	add	r7, sp, #0
	__asm volatile
 810ebfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ebfe:	f383 8811 	msr	BASEPRI, r3
 810ec02:	f3bf 8f6f 	isb	sy
 810ec06:	f3bf 8f4f 	dsb	sy
 810ec0a:	607b      	str	r3, [r7, #4]
}
 810ec0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810ec0e:	4b0f      	ldr	r3, [pc, #60]	; (810ec4c <vPortEnterCritical+0x58>)
 810ec10:	681b      	ldr	r3, [r3, #0]
 810ec12:	3301      	adds	r3, #1
 810ec14:	4a0d      	ldr	r2, [pc, #52]	; (810ec4c <vPortEnterCritical+0x58>)
 810ec16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810ec18:	4b0c      	ldr	r3, [pc, #48]	; (810ec4c <vPortEnterCritical+0x58>)
 810ec1a:	681b      	ldr	r3, [r3, #0]
 810ec1c:	2b01      	cmp	r3, #1
 810ec1e:	d10f      	bne.n	810ec40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810ec20:	4b0b      	ldr	r3, [pc, #44]	; (810ec50 <vPortEnterCritical+0x5c>)
 810ec22:	681b      	ldr	r3, [r3, #0]
 810ec24:	b2db      	uxtb	r3, r3
 810ec26:	2b00      	cmp	r3, #0
 810ec28:	d00a      	beq.n	810ec40 <vPortEnterCritical+0x4c>
	__asm volatile
 810ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ec2e:	f383 8811 	msr	BASEPRI, r3
 810ec32:	f3bf 8f6f 	isb	sy
 810ec36:	f3bf 8f4f 	dsb	sy
 810ec3a:	603b      	str	r3, [r7, #0]
}
 810ec3c:	bf00      	nop
 810ec3e:	e7fe      	b.n	810ec3e <vPortEnterCritical+0x4a>
	}
}
 810ec40:	bf00      	nop
 810ec42:	370c      	adds	r7, #12
 810ec44:	46bd      	mov	sp, r7
 810ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ec4a:	4770      	bx	lr
 810ec4c:	10000010 	.word	0x10000010
 810ec50:	e000ed04 	.word	0xe000ed04

0810ec54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810ec54:	b480      	push	{r7}
 810ec56:	b083      	sub	sp, #12
 810ec58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810ec5a:	4b12      	ldr	r3, [pc, #72]	; (810eca4 <vPortExitCritical+0x50>)
 810ec5c:	681b      	ldr	r3, [r3, #0]
 810ec5e:	2b00      	cmp	r3, #0
 810ec60:	d10a      	bne.n	810ec78 <vPortExitCritical+0x24>
	__asm volatile
 810ec62:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ec66:	f383 8811 	msr	BASEPRI, r3
 810ec6a:	f3bf 8f6f 	isb	sy
 810ec6e:	f3bf 8f4f 	dsb	sy
 810ec72:	607b      	str	r3, [r7, #4]
}
 810ec74:	bf00      	nop
 810ec76:	e7fe      	b.n	810ec76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810ec78:	4b0a      	ldr	r3, [pc, #40]	; (810eca4 <vPortExitCritical+0x50>)
 810ec7a:	681b      	ldr	r3, [r3, #0]
 810ec7c:	3b01      	subs	r3, #1
 810ec7e:	4a09      	ldr	r2, [pc, #36]	; (810eca4 <vPortExitCritical+0x50>)
 810ec80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810ec82:	4b08      	ldr	r3, [pc, #32]	; (810eca4 <vPortExitCritical+0x50>)
 810ec84:	681b      	ldr	r3, [r3, #0]
 810ec86:	2b00      	cmp	r3, #0
 810ec88:	d105      	bne.n	810ec96 <vPortExitCritical+0x42>
 810ec8a:	2300      	movs	r3, #0
 810ec8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810ec8e:	683b      	ldr	r3, [r7, #0]
 810ec90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810ec94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810ec96:	bf00      	nop
 810ec98:	370c      	adds	r7, #12
 810ec9a:	46bd      	mov	sp, r7
 810ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eca0:	4770      	bx	lr
 810eca2:	bf00      	nop
 810eca4:	10000010 	.word	0x10000010
	...

0810ecb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810ecb0:	f3ef 8009 	mrs	r0, PSP
 810ecb4:	f3bf 8f6f 	isb	sy
 810ecb8:	4b15      	ldr	r3, [pc, #84]	; (810ed10 <pxCurrentTCBConst>)
 810ecba:	681a      	ldr	r2, [r3, #0]
 810ecbc:	f01e 0f10 	tst.w	lr, #16
 810ecc0:	bf08      	it	eq
 810ecc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810ecc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ecca:	6010      	str	r0, [r2, #0]
 810eccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 810ecd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 810ecd4:	f380 8811 	msr	BASEPRI, r0
 810ecd8:	f3bf 8f4f 	dsb	sy
 810ecdc:	f3bf 8f6f 	isb	sy
 810ece0:	f001 fa14 	bl	811010c <vTaskSwitchContext>
 810ece4:	f04f 0000 	mov.w	r0, #0
 810ece8:	f380 8811 	msr	BASEPRI, r0
 810ecec:	bc09      	pop	{r0, r3}
 810ecee:	6819      	ldr	r1, [r3, #0]
 810ecf0:	6808      	ldr	r0, [r1, #0]
 810ecf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ecf6:	f01e 0f10 	tst.w	lr, #16
 810ecfa:	bf08      	it	eq
 810ecfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810ed00:	f380 8809 	msr	PSP, r0
 810ed04:	f3bf 8f6f 	isb	sy
 810ed08:	4770      	bx	lr
 810ed0a:	bf00      	nop
 810ed0c:	f3af 8000 	nop.w

0810ed10 <pxCurrentTCBConst>:
 810ed10:	100044f8 	.word	0x100044f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810ed14:	bf00      	nop
 810ed16:	bf00      	nop

0810ed18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810ed18:	b580      	push	{r7, lr}
 810ed1a:	b082      	sub	sp, #8
 810ed1c:	af00      	add	r7, sp, #0
	__asm volatile
 810ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ed22:	f383 8811 	msr	BASEPRI, r3
 810ed26:	f3bf 8f6f 	isb	sy
 810ed2a:	f3bf 8f4f 	dsb	sy
 810ed2e:	607b      	str	r3, [r7, #4]
}
 810ed30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810ed32:	f001 f931 	bl	810ff98 <xTaskIncrementTick>
 810ed36:	4603      	mov	r3, r0
 810ed38:	2b00      	cmp	r3, #0
 810ed3a:	d003      	beq.n	810ed44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810ed3c:	4b06      	ldr	r3, [pc, #24]	; (810ed58 <xPortSysTickHandler+0x40>)
 810ed3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ed42:	601a      	str	r2, [r3, #0]
 810ed44:	2300      	movs	r3, #0
 810ed46:	603b      	str	r3, [r7, #0]
	__asm volatile
 810ed48:	683b      	ldr	r3, [r7, #0]
 810ed4a:	f383 8811 	msr	BASEPRI, r3
}
 810ed4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810ed50:	bf00      	nop
 810ed52:	3708      	adds	r7, #8
 810ed54:	46bd      	mov	sp, r7
 810ed56:	bd80      	pop	{r7, pc}
 810ed58:	e000ed04 	.word	0xe000ed04

0810ed5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810ed5c:	b480      	push	{r7}
 810ed5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810ed60:	4b0b      	ldr	r3, [pc, #44]	; (810ed90 <vPortSetupTimerInterrupt+0x34>)
 810ed62:	2200      	movs	r2, #0
 810ed64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810ed66:	4b0b      	ldr	r3, [pc, #44]	; (810ed94 <vPortSetupTimerInterrupt+0x38>)
 810ed68:	2200      	movs	r2, #0
 810ed6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810ed6c:	4b0a      	ldr	r3, [pc, #40]	; (810ed98 <vPortSetupTimerInterrupt+0x3c>)
 810ed6e:	681b      	ldr	r3, [r3, #0]
 810ed70:	4a0a      	ldr	r2, [pc, #40]	; (810ed9c <vPortSetupTimerInterrupt+0x40>)
 810ed72:	fba2 2303 	umull	r2, r3, r2, r3
 810ed76:	099b      	lsrs	r3, r3, #6
 810ed78:	4a09      	ldr	r2, [pc, #36]	; (810eda0 <vPortSetupTimerInterrupt+0x44>)
 810ed7a:	3b01      	subs	r3, #1
 810ed7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810ed7e:	4b04      	ldr	r3, [pc, #16]	; (810ed90 <vPortSetupTimerInterrupt+0x34>)
 810ed80:	2207      	movs	r2, #7
 810ed82:	601a      	str	r2, [r3, #0]
}
 810ed84:	bf00      	nop
 810ed86:	46bd      	mov	sp, r7
 810ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ed8c:	4770      	bx	lr
 810ed8e:	bf00      	nop
 810ed90:	e000e010 	.word	0xe000e010
 810ed94:	e000e018 	.word	0xe000e018
 810ed98:	10000004 	.word	0x10000004
 810ed9c:	10624dd3 	.word	0x10624dd3
 810eda0:	e000e014 	.word	0xe000e014

0810eda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810eda4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810edb4 <vPortEnableVFP+0x10>
 810eda8:	6801      	ldr	r1, [r0, #0]
 810edaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810edae:	6001      	str	r1, [r0, #0]
 810edb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810edb2:	bf00      	nop
 810edb4:	e000ed88 	.word	0xe000ed88

0810edb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810edb8:	b480      	push	{r7}
 810edba:	b085      	sub	sp, #20
 810edbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810edbe:	f3ef 8305 	mrs	r3, IPSR
 810edc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810edc4:	68fb      	ldr	r3, [r7, #12]
 810edc6:	2b0f      	cmp	r3, #15
 810edc8:	d914      	bls.n	810edf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810edca:	4a17      	ldr	r2, [pc, #92]	; (810ee28 <vPortValidateInterruptPriority+0x70>)
 810edcc:	68fb      	ldr	r3, [r7, #12]
 810edce:	4413      	add	r3, r2
 810edd0:	781b      	ldrb	r3, [r3, #0]
 810edd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810edd4:	4b15      	ldr	r3, [pc, #84]	; (810ee2c <vPortValidateInterruptPriority+0x74>)
 810edd6:	781b      	ldrb	r3, [r3, #0]
 810edd8:	7afa      	ldrb	r2, [r7, #11]
 810edda:	429a      	cmp	r2, r3
 810eddc:	d20a      	bcs.n	810edf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 810edde:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ede2:	f383 8811 	msr	BASEPRI, r3
 810ede6:	f3bf 8f6f 	isb	sy
 810edea:	f3bf 8f4f 	dsb	sy
 810edee:	607b      	str	r3, [r7, #4]
}
 810edf0:	bf00      	nop
 810edf2:	e7fe      	b.n	810edf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810edf4:	4b0e      	ldr	r3, [pc, #56]	; (810ee30 <vPortValidateInterruptPriority+0x78>)
 810edf6:	681b      	ldr	r3, [r3, #0]
 810edf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810edfc:	4b0d      	ldr	r3, [pc, #52]	; (810ee34 <vPortValidateInterruptPriority+0x7c>)
 810edfe:	681b      	ldr	r3, [r3, #0]
 810ee00:	429a      	cmp	r2, r3
 810ee02:	d90a      	bls.n	810ee1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 810ee04:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ee08:	f383 8811 	msr	BASEPRI, r3
 810ee0c:	f3bf 8f6f 	isb	sy
 810ee10:	f3bf 8f4f 	dsb	sy
 810ee14:	603b      	str	r3, [r7, #0]
}
 810ee16:	bf00      	nop
 810ee18:	e7fe      	b.n	810ee18 <vPortValidateInterruptPriority+0x60>
	}
 810ee1a:	bf00      	nop
 810ee1c:	3714      	adds	r7, #20
 810ee1e:	46bd      	mov	sp, r7
 810ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ee24:	4770      	bx	lr
 810ee26:	bf00      	nop
 810ee28:	e000e3f0 	.word	0xe000e3f0
 810ee2c:	100044f0 	.word	0x100044f0
 810ee30:	e000ed0c 	.word	0xe000ed0c
 810ee34:	100044f4 	.word	0x100044f4

0810ee38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810ee38:	b580      	push	{r7, lr}
 810ee3a:	b084      	sub	sp, #16
 810ee3c:	af00      	add	r7, sp, #0
 810ee3e:	6078      	str	r0, [r7, #4]
 810ee40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810ee42:	687b      	ldr	r3, [r7, #4]
 810ee44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810ee46:	68fb      	ldr	r3, [r7, #12]
 810ee48:	2b00      	cmp	r3, #0
 810ee4a:	d10a      	bne.n	810ee62 <xQueueGenericReset+0x2a>
	__asm volatile
 810ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ee50:	f383 8811 	msr	BASEPRI, r3
 810ee54:	f3bf 8f6f 	isb	sy
 810ee58:	f3bf 8f4f 	dsb	sy
 810ee5c:	60bb      	str	r3, [r7, #8]
}
 810ee5e:	bf00      	nop
 810ee60:	e7fe      	b.n	810ee60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810ee62:	f7ff fec7 	bl	810ebf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ee66:	68fb      	ldr	r3, [r7, #12]
 810ee68:	681a      	ldr	r2, [r3, #0]
 810ee6a:	68fb      	ldr	r3, [r7, #12]
 810ee6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ee6e:	68f9      	ldr	r1, [r7, #12]
 810ee70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810ee72:	fb01 f303 	mul.w	r3, r1, r3
 810ee76:	441a      	add	r2, r3
 810ee78:	68fb      	ldr	r3, [r7, #12]
 810ee7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810ee7c:	68fb      	ldr	r3, [r7, #12]
 810ee7e:	2200      	movs	r2, #0
 810ee80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810ee82:	68fb      	ldr	r3, [r7, #12]
 810ee84:	681a      	ldr	r2, [r3, #0]
 810ee86:	68fb      	ldr	r3, [r7, #12]
 810ee88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ee8a:	68fb      	ldr	r3, [r7, #12]
 810ee8c:	681a      	ldr	r2, [r3, #0]
 810ee8e:	68fb      	ldr	r3, [r7, #12]
 810ee90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ee92:	3b01      	subs	r3, #1
 810ee94:	68f9      	ldr	r1, [r7, #12]
 810ee96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810ee98:	fb01 f303 	mul.w	r3, r1, r3
 810ee9c:	441a      	add	r2, r3
 810ee9e:	68fb      	ldr	r3, [r7, #12]
 810eea0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810eea2:	68fb      	ldr	r3, [r7, #12]
 810eea4:	22ff      	movs	r2, #255	; 0xff
 810eea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810eeaa:	68fb      	ldr	r3, [r7, #12]
 810eeac:	22ff      	movs	r2, #255	; 0xff
 810eeae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810eeb2:	683b      	ldr	r3, [r7, #0]
 810eeb4:	2b00      	cmp	r3, #0
 810eeb6:	d114      	bne.n	810eee2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810eeb8:	68fb      	ldr	r3, [r7, #12]
 810eeba:	691b      	ldr	r3, [r3, #16]
 810eebc:	2b00      	cmp	r3, #0
 810eebe:	d01a      	beq.n	810eef6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810eec0:	68fb      	ldr	r3, [r7, #12]
 810eec2:	3310      	adds	r3, #16
 810eec4:	4618      	mov	r0, r3
 810eec6:	f001 f9cf 	bl	8110268 <xTaskRemoveFromEventList>
 810eeca:	4603      	mov	r3, r0
 810eecc:	2b00      	cmp	r3, #0
 810eece:	d012      	beq.n	810eef6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810eed0:	4b0c      	ldr	r3, [pc, #48]	; (810ef04 <xQueueGenericReset+0xcc>)
 810eed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810eed6:	601a      	str	r2, [r3, #0]
 810eed8:	f3bf 8f4f 	dsb	sy
 810eedc:	f3bf 8f6f 	isb	sy
 810eee0:	e009      	b.n	810eef6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810eee2:	68fb      	ldr	r3, [r7, #12]
 810eee4:	3310      	adds	r3, #16
 810eee6:	4618      	mov	r0, r3
 810eee8:	f7ff fca6 	bl	810e838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810eeec:	68fb      	ldr	r3, [r7, #12]
 810eeee:	3324      	adds	r3, #36	; 0x24
 810eef0:	4618      	mov	r0, r3
 810eef2:	f7ff fca1 	bl	810e838 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810eef6:	f7ff fead 	bl	810ec54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810eefa:	2301      	movs	r3, #1
}
 810eefc:	4618      	mov	r0, r3
 810eefe:	3710      	adds	r7, #16
 810ef00:	46bd      	mov	sp, r7
 810ef02:	bd80      	pop	{r7, pc}
 810ef04:	e000ed04 	.word	0xe000ed04

0810ef08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810ef08:	b580      	push	{r7, lr}
 810ef0a:	b08e      	sub	sp, #56	; 0x38
 810ef0c:	af02      	add	r7, sp, #8
 810ef0e:	60f8      	str	r0, [r7, #12]
 810ef10:	60b9      	str	r1, [r7, #8]
 810ef12:	607a      	str	r2, [r7, #4]
 810ef14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810ef16:	68fb      	ldr	r3, [r7, #12]
 810ef18:	2b00      	cmp	r3, #0
 810ef1a:	d10a      	bne.n	810ef32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 810ef1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef20:	f383 8811 	msr	BASEPRI, r3
 810ef24:	f3bf 8f6f 	isb	sy
 810ef28:	f3bf 8f4f 	dsb	sy
 810ef2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810ef2e:	bf00      	nop
 810ef30:	e7fe      	b.n	810ef30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810ef32:	683b      	ldr	r3, [r7, #0]
 810ef34:	2b00      	cmp	r3, #0
 810ef36:	d10a      	bne.n	810ef4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 810ef38:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef3c:	f383 8811 	msr	BASEPRI, r3
 810ef40:	f3bf 8f6f 	isb	sy
 810ef44:	f3bf 8f4f 	dsb	sy
 810ef48:	627b      	str	r3, [r7, #36]	; 0x24
}
 810ef4a:	bf00      	nop
 810ef4c:	e7fe      	b.n	810ef4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810ef4e:	687b      	ldr	r3, [r7, #4]
 810ef50:	2b00      	cmp	r3, #0
 810ef52:	d002      	beq.n	810ef5a <xQueueGenericCreateStatic+0x52>
 810ef54:	68bb      	ldr	r3, [r7, #8]
 810ef56:	2b00      	cmp	r3, #0
 810ef58:	d001      	beq.n	810ef5e <xQueueGenericCreateStatic+0x56>
 810ef5a:	2301      	movs	r3, #1
 810ef5c:	e000      	b.n	810ef60 <xQueueGenericCreateStatic+0x58>
 810ef5e:	2300      	movs	r3, #0
 810ef60:	2b00      	cmp	r3, #0
 810ef62:	d10a      	bne.n	810ef7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 810ef64:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef68:	f383 8811 	msr	BASEPRI, r3
 810ef6c:	f3bf 8f6f 	isb	sy
 810ef70:	f3bf 8f4f 	dsb	sy
 810ef74:	623b      	str	r3, [r7, #32]
}
 810ef76:	bf00      	nop
 810ef78:	e7fe      	b.n	810ef78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810ef7a:	687b      	ldr	r3, [r7, #4]
 810ef7c:	2b00      	cmp	r3, #0
 810ef7e:	d102      	bne.n	810ef86 <xQueueGenericCreateStatic+0x7e>
 810ef80:	68bb      	ldr	r3, [r7, #8]
 810ef82:	2b00      	cmp	r3, #0
 810ef84:	d101      	bne.n	810ef8a <xQueueGenericCreateStatic+0x82>
 810ef86:	2301      	movs	r3, #1
 810ef88:	e000      	b.n	810ef8c <xQueueGenericCreateStatic+0x84>
 810ef8a:	2300      	movs	r3, #0
 810ef8c:	2b00      	cmp	r3, #0
 810ef8e:	d10a      	bne.n	810efa6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 810ef90:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ef94:	f383 8811 	msr	BASEPRI, r3
 810ef98:	f3bf 8f6f 	isb	sy
 810ef9c:	f3bf 8f4f 	dsb	sy
 810efa0:	61fb      	str	r3, [r7, #28]
}
 810efa2:	bf00      	nop
 810efa4:	e7fe      	b.n	810efa4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810efa6:	2350      	movs	r3, #80	; 0x50
 810efa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810efaa:	697b      	ldr	r3, [r7, #20]
 810efac:	2b50      	cmp	r3, #80	; 0x50
 810efae:	d00a      	beq.n	810efc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 810efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810efb4:	f383 8811 	msr	BASEPRI, r3
 810efb8:	f3bf 8f6f 	isb	sy
 810efbc:	f3bf 8f4f 	dsb	sy
 810efc0:	61bb      	str	r3, [r7, #24]
}
 810efc2:	bf00      	nop
 810efc4:	e7fe      	b.n	810efc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810efc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810efc8:	683b      	ldr	r3, [r7, #0]
 810efca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810efcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810efce:	2b00      	cmp	r3, #0
 810efd0:	d00d      	beq.n	810efee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810efd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810efd4:	2201      	movs	r2, #1
 810efd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810efda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810efe0:	9300      	str	r3, [sp, #0]
 810efe2:	4613      	mov	r3, r2
 810efe4:	687a      	ldr	r2, [r7, #4]
 810efe6:	68b9      	ldr	r1, [r7, #8]
 810efe8:	68f8      	ldr	r0, [r7, #12]
 810efea:	f000 f83f 	bl	810f06c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810efee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810eff0:	4618      	mov	r0, r3
 810eff2:	3730      	adds	r7, #48	; 0x30
 810eff4:	46bd      	mov	sp, r7
 810eff6:	bd80      	pop	{r7, pc}

0810eff8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810eff8:	b580      	push	{r7, lr}
 810effa:	b08a      	sub	sp, #40	; 0x28
 810effc:	af02      	add	r7, sp, #8
 810effe:	60f8      	str	r0, [r7, #12]
 810f000:	60b9      	str	r1, [r7, #8]
 810f002:	4613      	mov	r3, r2
 810f004:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810f006:	68fb      	ldr	r3, [r7, #12]
 810f008:	2b00      	cmp	r3, #0
 810f00a:	d10a      	bne.n	810f022 <xQueueGenericCreate+0x2a>
	__asm volatile
 810f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f010:	f383 8811 	msr	BASEPRI, r3
 810f014:	f3bf 8f6f 	isb	sy
 810f018:	f3bf 8f4f 	dsb	sy
 810f01c:	613b      	str	r3, [r7, #16]
}
 810f01e:	bf00      	nop
 810f020:	e7fe      	b.n	810f020 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810f022:	68fb      	ldr	r3, [r7, #12]
 810f024:	68ba      	ldr	r2, [r7, #8]
 810f026:	fb02 f303 	mul.w	r3, r2, r3
 810f02a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810f02c:	69fb      	ldr	r3, [r7, #28]
 810f02e:	3350      	adds	r3, #80	; 0x50
 810f030:	4618      	mov	r0, r3
 810f032:	f7ff fa17 	bl	810e464 <pvPortMalloc>
 810f036:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810f038:	69bb      	ldr	r3, [r7, #24]
 810f03a:	2b00      	cmp	r3, #0
 810f03c:	d011      	beq.n	810f062 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810f03e:	69bb      	ldr	r3, [r7, #24]
 810f040:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810f042:	697b      	ldr	r3, [r7, #20]
 810f044:	3350      	adds	r3, #80	; 0x50
 810f046:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810f048:	69bb      	ldr	r3, [r7, #24]
 810f04a:	2200      	movs	r2, #0
 810f04c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810f050:	79fa      	ldrb	r2, [r7, #7]
 810f052:	69bb      	ldr	r3, [r7, #24]
 810f054:	9300      	str	r3, [sp, #0]
 810f056:	4613      	mov	r3, r2
 810f058:	697a      	ldr	r2, [r7, #20]
 810f05a:	68b9      	ldr	r1, [r7, #8]
 810f05c:	68f8      	ldr	r0, [r7, #12]
 810f05e:	f000 f805 	bl	810f06c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810f062:	69bb      	ldr	r3, [r7, #24]
	}
 810f064:	4618      	mov	r0, r3
 810f066:	3720      	adds	r7, #32
 810f068:	46bd      	mov	sp, r7
 810f06a:	bd80      	pop	{r7, pc}

0810f06c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810f06c:	b580      	push	{r7, lr}
 810f06e:	b084      	sub	sp, #16
 810f070:	af00      	add	r7, sp, #0
 810f072:	60f8      	str	r0, [r7, #12]
 810f074:	60b9      	str	r1, [r7, #8]
 810f076:	607a      	str	r2, [r7, #4]
 810f078:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810f07a:	68bb      	ldr	r3, [r7, #8]
 810f07c:	2b00      	cmp	r3, #0
 810f07e:	d103      	bne.n	810f088 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810f080:	69bb      	ldr	r3, [r7, #24]
 810f082:	69ba      	ldr	r2, [r7, #24]
 810f084:	601a      	str	r2, [r3, #0]
 810f086:	e002      	b.n	810f08e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810f088:	69bb      	ldr	r3, [r7, #24]
 810f08a:	687a      	ldr	r2, [r7, #4]
 810f08c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810f08e:	69bb      	ldr	r3, [r7, #24]
 810f090:	68fa      	ldr	r2, [r7, #12]
 810f092:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810f094:	69bb      	ldr	r3, [r7, #24]
 810f096:	68ba      	ldr	r2, [r7, #8]
 810f098:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810f09a:	2101      	movs	r1, #1
 810f09c:	69b8      	ldr	r0, [r7, #24]
 810f09e:	f7ff fecb 	bl	810ee38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810f0a2:	69bb      	ldr	r3, [r7, #24]
 810f0a4:	78fa      	ldrb	r2, [r7, #3]
 810f0a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810f0aa:	bf00      	nop
 810f0ac:	3710      	adds	r7, #16
 810f0ae:	46bd      	mov	sp, r7
 810f0b0:	bd80      	pop	{r7, pc}
	...

0810f0b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810f0b4:	b580      	push	{r7, lr}
 810f0b6:	b08e      	sub	sp, #56	; 0x38
 810f0b8:	af00      	add	r7, sp, #0
 810f0ba:	60f8      	str	r0, [r7, #12]
 810f0bc:	60b9      	str	r1, [r7, #8]
 810f0be:	607a      	str	r2, [r7, #4]
 810f0c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810f0c2:	2300      	movs	r3, #0
 810f0c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810f0c6:	68fb      	ldr	r3, [r7, #12]
 810f0c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810f0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f0cc:	2b00      	cmp	r3, #0
 810f0ce:	d10a      	bne.n	810f0e6 <xQueueGenericSend+0x32>
	__asm volatile
 810f0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f0d4:	f383 8811 	msr	BASEPRI, r3
 810f0d8:	f3bf 8f6f 	isb	sy
 810f0dc:	f3bf 8f4f 	dsb	sy
 810f0e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810f0e2:	bf00      	nop
 810f0e4:	e7fe      	b.n	810f0e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f0e6:	68bb      	ldr	r3, [r7, #8]
 810f0e8:	2b00      	cmp	r3, #0
 810f0ea:	d103      	bne.n	810f0f4 <xQueueGenericSend+0x40>
 810f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f0f0:	2b00      	cmp	r3, #0
 810f0f2:	d101      	bne.n	810f0f8 <xQueueGenericSend+0x44>
 810f0f4:	2301      	movs	r3, #1
 810f0f6:	e000      	b.n	810f0fa <xQueueGenericSend+0x46>
 810f0f8:	2300      	movs	r3, #0
 810f0fa:	2b00      	cmp	r3, #0
 810f0fc:	d10a      	bne.n	810f114 <xQueueGenericSend+0x60>
	__asm volatile
 810f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f102:	f383 8811 	msr	BASEPRI, r3
 810f106:	f3bf 8f6f 	isb	sy
 810f10a:	f3bf 8f4f 	dsb	sy
 810f10e:	627b      	str	r3, [r7, #36]	; 0x24
}
 810f110:	bf00      	nop
 810f112:	e7fe      	b.n	810f112 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810f114:	683b      	ldr	r3, [r7, #0]
 810f116:	2b02      	cmp	r3, #2
 810f118:	d103      	bne.n	810f122 <xQueueGenericSend+0x6e>
 810f11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f11c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810f11e:	2b01      	cmp	r3, #1
 810f120:	d101      	bne.n	810f126 <xQueueGenericSend+0x72>
 810f122:	2301      	movs	r3, #1
 810f124:	e000      	b.n	810f128 <xQueueGenericSend+0x74>
 810f126:	2300      	movs	r3, #0
 810f128:	2b00      	cmp	r3, #0
 810f12a:	d10a      	bne.n	810f142 <xQueueGenericSend+0x8e>
	__asm volatile
 810f12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f130:	f383 8811 	msr	BASEPRI, r3
 810f134:	f3bf 8f6f 	isb	sy
 810f138:	f3bf 8f4f 	dsb	sy
 810f13c:	623b      	str	r3, [r7, #32]
}
 810f13e:	bf00      	nop
 810f140:	e7fe      	b.n	810f140 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810f142:	f001 fa4f 	bl	81105e4 <xTaskGetSchedulerState>
 810f146:	4603      	mov	r3, r0
 810f148:	2b00      	cmp	r3, #0
 810f14a:	d102      	bne.n	810f152 <xQueueGenericSend+0x9e>
 810f14c:	687b      	ldr	r3, [r7, #4]
 810f14e:	2b00      	cmp	r3, #0
 810f150:	d101      	bne.n	810f156 <xQueueGenericSend+0xa2>
 810f152:	2301      	movs	r3, #1
 810f154:	e000      	b.n	810f158 <xQueueGenericSend+0xa4>
 810f156:	2300      	movs	r3, #0
 810f158:	2b00      	cmp	r3, #0
 810f15a:	d10a      	bne.n	810f172 <xQueueGenericSend+0xbe>
	__asm volatile
 810f15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f160:	f383 8811 	msr	BASEPRI, r3
 810f164:	f3bf 8f6f 	isb	sy
 810f168:	f3bf 8f4f 	dsb	sy
 810f16c:	61fb      	str	r3, [r7, #28]
}
 810f16e:	bf00      	nop
 810f170:	e7fe      	b.n	810f170 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810f172:	f7ff fd3f 	bl	810ebf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810f176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810f17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810f17e:	429a      	cmp	r2, r3
 810f180:	d302      	bcc.n	810f188 <xQueueGenericSend+0xd4>
 810f182:	683b      	ldr	r3, [r7, #0]
 810f184:	2b02      	cmp	r3, #2
 810f186:	d129      	bne.n	810f1dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810f188:	683a      	ldr	r2, [r7, #0]
 810f18a:	68b9      	ldr	r1, [r7, #8]
 810f18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810f18e:	f000 fa8b 	bl	810f6a8 <prvCopyDataToQueue>
 810f192:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810f198:	2b00      	cmp	r3, #0
 810f19a:	d010      	beq.n	810f1be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f19e:	3324      	adds	r3, #36	; 0x24
 810f1a0:	4618      	mov	r0, r3
 810f1a2:	f001 f861 	bl	8110268 <xTaskRemoveFromEventList>
 810f1a6:	4603      	mov	r3, r0
 810f1a8:	2b00      	cmp	r3, #0
 810f1aa:	d013      	beq.n	810f1d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810f1ac:	4b3f      	ldr	r3, [pc, #252]	; (810f2ac <xQueueGenericSend+0x1f8>)
 810f1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f1b2:	601a      	str	r2, [r3, #0]
 810f1b4:	f3bf 8f4f 	dsb	sy
 810f1b8:	f3bf 8f6f 	isb	sy
 810f1bc:	e00a      	b.n	810f1d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810f1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f1c0:	2b00      	cmp	r3, #0
 810f1c2:	d007      	beq.n	810f1d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810f1c4:	4b39      	ldr	r3, [pc, #228]	; (810f2ac <xQueueGenericSend+0x1f8>)
 810f1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f1ca:	601a      	str	r2, [r3, #0]
 810f1cc:	f3bf 8f4f 	dsb	sy
 810f1d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810f1d4:	f7ff fd3e 	bl	810ec54 <vPortExitCritical>
				return pdPASS;
 810f1d8:	2301      	movs	r3, #1
 810f1da:	e063      	b.n	810f2a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810f1dc:	687b      	ldr	r3, [r7, #4]
 810f1de:	2b00      	cmp	r3, #0
 810f1e0:	d103      	bne.n	810f1ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810f1e2:	f7ff fd37 	bl	810ec54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810f1e6:	2300      	movs	r3, #0
 810f1e8:	e05c      	b.n	810f2a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 810f1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810f1ec:	2b00      	cmp	r3, #0
 810f1ee:	d106      	bne.n	810f1fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810f1f0:	f107 0314 	add.w	r3, r7, #20
 810f1f4:	4618      	mov	r0, r3
 810f1f6:	f001 f89b 	bl	8110330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810f1fa:	2301      	movs	r3, #1
 810f1fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810f1fe:	f7ff fd29 	bl	810ec54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810f202:	f000 fdfb 	bl	810fdfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810f206:	f7ff fcf5 	bl	810ebf4 <vPortEnterCritical>
 810f20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f20c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810f210:	b25b      	sxtb	r3, r3
 810f212:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f216:	d103      	bne.n	810f220 <xQueueGenericSend+0x16c>
 810f218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f21a:	2200      	movs	r2, #0
 810f21c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810f226:	b25b      	sxtb	r3, r3
 810f228:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f22c:	d103      	bne.n	810f236 <xQueueGenericSend+0x182>
 810f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f230:	2200      	movs	r2, #0
 810f232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810f236:	f7ff fd0d 	bl	810ec54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810f23a:	1d3a      	adds	r2, r7, #4
 810f23c:	f107 0314 	add.w	r3, r7, #20
 810f240:	4611      	mov	r1, r2
 810f242:	4618      	mov	r0, r3
 810f244:	f001 f88a 	bl	811035c <xTaskCheckForTimeOut>
 810f248:	4603      	mov	r3, r0
 810f24a:	2b00      	cmp	r3, #0
 810f24c:	d124      	bne.n	810f298 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810f24e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810f250:	f000 fb22 	bl	810f898 <prvIsQueueFull>
 810f254:	4603      	mov	r3, r0
 810f256:	2b00      	cmp	r3, #0
 810f258:	d018      	beq.n	810f28c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810f25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f25c:	3310      	adds	r3, #16
 810f25e:	687a      	ldr	r2, [r7, #4]
 810f260:	4611      	mov	r1, r2
 810f262:	4618      	mov	r0, r3
 810f264:	f000 ffb0 	bl	81101c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810f268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810f26a:	f000 faad 	bl	810f7c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810f26e:	f000 fdd3 	bl	810fe18 <xTaskResumeAll>
 810f272:	4603      	mov	r3, r0
 810f274:	2b00      	cmp	r3, #0
 810f276:	f47f af7c 	bne.w	810f172 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 810f27a:	4b0c      	ldr	r3, [pc, #48]	; (810f2ac <xQueueGenericSend+0x1f8>)
 810f27c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f280:	601a      	str	r2, [r3, #0]
 810f282:	f3bf 8f4f 	dsb	sy
 810f286:	f3bf 8f6f 	isb	sy
 810f28a:	e772      	b.n	810f172 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810f28c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810f28e:	f000 fa9b 	bl	810f7c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810f292:	f000 fdc1 	bl	810fe18 <xTaskResumeAll>
 810f296:	e76c      	b.n	810f172 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810f298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810f29a:	f000 fa95 	bl	810f7c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810f29e:	f000 fdbb 	bl	810fe18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810f2a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810f2a4:	4618      	mov	r0, r3
 810f2a6:	3738      	adds	r7, #56	; 0x38
 810f2a8:	46bd      	mov	sp, r7
 810f2aa:	bd80      	pop	{r7, pc}
 810f2ac:	e000ed04 	.word	0xe000ed04

0810f2b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810f2b0:	b580      	push	{r7, lr}
 810f2b2:	b090      	sub	sp, #64	; 0x40
 810f2b4:	af00      	add	r7, sp, #0
 810f2b6:	60f8      	str	r0, [r7, #12]
 810f2b8:	60b9      	str	r1, [r7, #8]
 810f2ba:	607a      	str	r2, [r7, #4]
 810f2bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810f2be:	68fb      	ldr	r3, [r7, #12]
 810f2c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 810f2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f2c4:	2b00      	cmp	r3, #0
 810f2c6:	d10a      	bne.n	810f2de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 810f2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f2cc:	f383 8811 	msr	BASEPRI, r3
 810f2d0:	f3bf 8f6f 	isb	sy
 810f2d4:	f3bf 8f4f 	dsb	sy
 810f2d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 810f2da:	bf00      	nop
 810f2dc:	e7fe      	b.n	810f2dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f2de:	68bb      	ldr	r3, [r7, #8]
 810f2e0:	2b00      	cmp	r3, #0
 810f2e2:	d103      	bne.n	810f2ec <xQueueGenericSendFromISR+0x3c>
 810f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f2e8:	2b00      	cmp	r3, #0
 810f2ea:	d101      	bne.n	810f2f0 <xQueueGenericSendFromISR+0x40>
 810f2ec:	2301      	movs	r3, #1
 810f2ee:	e000      	b.n	810f2f2 <xQueueGenericSendFromISR+0x42>
 810f2f0:	2300      	movs	r3, #0
 810f2f2:	2b00      	cmp	r3, #0
 810f2f4:	d10a      	bne.n	810f30c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 810f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f2fa:	f383 8811 	msr	BASEPRI, r3
 810f2fe:	f3bf 8f6f 	isb	sy
 810f302:	f3bf 8f4f 	dsb	sy
 810f306:	627b      	str	r3, [r7, #36]	; 0x24
}
 810f308:	bf00      	nop
 810f30a:	e7fe      	b.n	810f30a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810f30c:	683b      	ldr	r3, [r7, #0]
 810f30e:	2b02      	cmp	r3, #2
 810f310:	d103      	bne.n	810f31a <xQueueGenericSendFromISR+0x6a>
 810f312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810f316:	2b01      	cmp	r3, #1
 810f318:	d101      	bne.n	810f31e <xQueueGenericSendFromISR+0x6e>
 810f31a:	2301      	movs	r3, #1
 810f31c:	e000      	b.n	810f320 <xQueueGenericSendFromISR+0x70>
 810f31e:	2300      	movs	r3, #0
 810f320:	2b00      	cmp	r3, #0
 810f322:	d10a      	bne.n	810f33a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 810f324:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f328:	f383 8811 	msr	BASEPRI, r3
 810f32c:	f3bf 8f6f 	isb	sy
 810f330:	f3bf 8f4f 	dsb	sy
 810f334:	623b      	str	r3, [r7, #32]
}
 810f336:	bf00      	nop
 810f338:	e7fe      	b.n	810f338 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810f33a:	f7ff fd3d 	bl	810edb8 <vPortValidateInterruptPriority>
	__asm volatile
 810f33e:	f3ef 8211 	mrs	r2, BASEPRI
 810f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f346:	f383 8811 	msr	BASEPRI, r3
 810f34a:	f3bf 8f6f 	isb	sy
 810f34e:	f3bf 8f4f 	dsb	sy
 810f352:	61fa      	str	r2, [r7, #28]
 810f354:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810f356:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810f358:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810f35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810f35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810f362:	429a      	cmp	r2, r3
 810f364:	d302      	bcc.n	810f36c <xQueueGenericSendFromISR+0xbc>
 810f366:	683b      	ldr	r3, [r7, #0]
 810f368:	2b02      	cmp	r3, #2
 810f36a:	d12f      	bne.n	810f3cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810f36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f36e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810f372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810f37a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810f37c:	683a      	ldr	r2, [r7, #0]
 810f37e:	68b9      	ldr	r1, [r7, #8]
 810f380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810f382:	f000 f991 	bl	810f6a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810f386:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 810f38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f38e:	d112      	bne.n	810f3b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810f394:	2b00      	cmp	r3, #0
 810f396:	d016      	beq.n	810f3c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f39a:	3324      	adds	r3, #36	; 0x24
 810f39c:	4618      	mov	r0, r3
 810f39e:	f000 ff63 	bl	8110268 <xTaskRemoveFromEventList>
 810f3a2:	4603      	mov	r3, r0
 810f3a4:	2b00      	cmp	r3, #0
 810f3a6:	d00e      	beq.n	810f3c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810f3a8:	687b      	ldr	r3, [r7, #4]
 810f3aa:	2b00      	cmp	r3, #0
 810f3ac:	d00b      	beq.n	810f3c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810f3ae:	687b      	ldr	r3, [r7, #4]
 810f3b0:	2201      	movs	r2, #1
 810f3b2:	601a      	str	r2, [r3, #0]
 810f3b4:	e007      	b.n	810f3c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810f3b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810f3ba:	3301      	adds	r3, #1
 810f3bc:	b2db      	uxtb	r3, r3
 810f3be:	b25a      	sxtb	r2, r3
 810f3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f3c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810f3c6:	2301      	movs	r3, #1
 810f3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 810f3ca:	e001      	b.n	810f3d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810f3cc:	2300      	movs	r3, #0
 810f3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 810f3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810f3d2:	617b      	str	r3, [r7, #20]
	__asm volatile
 810f3d4:	697b      	ldr	r3, [r7, #20]
 810f3d6:	f383 8811 	msr	BASEPRI, r3
}
 810f3da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f3dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810f3de:	4618      	mov	r0, r3
 810f3e0:	3740      	adds	r7, #64	; 0x40
 810f3e2:	46bd      	mov	sp, r7
 810f3e4:	bd80      	pop	{r7, pc}
	...

0810f3e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810f3e8:	b580      	push	{r7, lr}
 810f3ea:	b08c      	sub	sp, #48	; 0x30
 810f3ec:	af00      	add	r7, sp, #0
 810f3ee:	60f8      	str	r0, [r7, #12]
 810f3f0:	60b9      	str	r1, [r7, #8]
 810f3f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810f3f4:	2300      	movs	r3, #0
 810f3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810f3f8:	68fb      	ldr	r3, [r7, #12]
 810f3fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f3fe:	2b00      	cmp	r3, #0
 810f400:	d10a      	bne.n	810f418 <xQueueReceive+0x30>
	__asm volatile
 810f402:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f406:	f383 8811 	msr	BASEPRI, r3
 810f40a:	f3bf 8f6f 	isb	sy
 810f40e:	f3bf 8f4f 	dsb	sy
 810f412:	623b      	str	r3, [r7, #32]
}
 810f414:	bf00      	nop
 810f416:	e7fe      	b.n	810f416 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f418:	68bb      	ldr	r3, [r7, #8]
 810f41a:	2b00      	cmp	r3, #0
 810f41c:	d103      	bne.n	810f426 <xQueueReceive+0x3e>
 810f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f422:	2b00      	cmp	r3, #0
 810f424:	d101      	bne.n	810f42a <xQueueReceive+0x42>
 810f426:	2301      	movs	r3, #1
 810f428:	e000      	b.n	810f42c <xQueueReceive+0x44>
 810f42a:	2300      	movs	r3, #0
 810f42c:	2b00      	cmp	r3, #0
 810f42e:	d10a      	bne.n	810f446 <xQueueReceive+0x5e>
	__asm volatile
 810f430:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f434:	f383 8811 	msr	BASEPRI, r3
 810f438:	f3bf 8f6f 	isb	sy
 810f43c:	f3bf 8f4f 	dsb	sy
 810f440:	61fb      	str	r3, [r7, #28]
}
 810f442:	bf00      	nop
 810f444:	e7fe      	b.n	810f444 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810f446:	f001 f8cd 	bl	81105e4 <xTaskGetSchedulerState>
 810f44a:	4603      	mov	r3, r0
 810f44c:	2b00      	cmp	r3, #0
 810f44e:	d102      	bne.n	810f456 <xQueueReceive+0x6e>
 810f450:	687b      	ldr	r3, [r7, #4]
 810f452:	2b00      	cmp	r3, #0
 810f454:	d101      	bne.n	810f45a <xQueueReceive+0x72>
 810f456:	2301      	movs	r3, #1
 810f458:	e000      	b.n	810f45c <xQueueReceive+0x74>
 810f45a:	2300      	movs	r3, #0
 810f45c:	2b00      	cmp	r3, #0
 810f45e:	d10a      	bne.n	810f476 <xQueueReceive+0x8e>
	__asm volatile
 810f460:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f464:	f383 8811 	msr	BASEPRI, r3
 810f468:	f3bf 8f6f 	isb	sy
 810f46c:	f3bf 8f4f 	dsb	sy
 810f470:	61bb      	str	r3, [r7, #24]
}
 810f472:	bf00      	nop
 810f474:	e7fe      	b.n	810f474 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810f476:	f7ff fbbd 	bl	810ebf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810f47e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f482:	2b00      	cmp	r3, #0
 810f484:	d01f      	beq.n	810f4c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810f486:	68b9      	ldr	r1, [r7, #8]
 810f488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f48a:	f000 f977 	bl	810f77c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f490:	1e5a      	subs	r2, r3, #1
 810f492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f494:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f498:	691b      	ldr	r3, [r3, #16]
 810f49a:	2b00      	cmp	r3, #0
 810f49c:	d00f      	beq.n	810f4be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f4a0:	3310      	adds	r3, #16
 810f4a2:	4618      	mov	r0, r3
 810f4a4:	f000 fee0 	bl	8110268 <xTaskRemoveFromEventList>
 810f4a8:	4603      	mov	r3, r0
 810f4aa:	2b00      	cmp	r3, #0
 810f4ac:	d007      	beq.n	810f4be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810f4ae:	4b3d      	ldr	r3, [pc, #244]	; (810f5a4 <xQueueReceive+0x1bc>)
 810f4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f4b4:	601a      	str	r2, [r3, #0]
 810f4b6:	f3bf 8f4f 	dsb	sy
 810f4ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810f4be:	f7ff fbc9 	bl	810ec54 <vPortExitCritical>
				return pdPASS;
 810f4c2:	2301      	movs	r3, #1
 810f4c4:	e069      	b.n	810f59a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810f4c6:	687b      	ldr	r3, [r7, #4]
 810f4c8:	2b00      	cmp	r3, #0
 810f4ca:	d103      	bne.n	810f4d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810f4cc:	f7ff fbc2 	bl	810ec54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810f4d0:	2300      	movs	r3, #0
 810f4d2:	e062      	b.n	810f59a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 810f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f4d6:	2b00      	cmp	r3, #0
 810f4d8:	d106      	bne.n	810f4e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810f4da:	f107 0310 	add.w	r3, r7, #16
 810f4de:	4618      	mov	r0, r3
 810f4e0:	f000 ff26 	bl	8110330 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810f4e4:	2301      	movs	r3, #1
 810f4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810f4e8:	f7ff fbb4 	bl	810ec54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810f4ec:	f000 fc86 	bl	810fdfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810f4f0:	f7ff fb80 	bl	810ebf4 <vPortEnterCritical>
 810f4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f4f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810f4fa:	b25b      	sxtb	r3, r3
 810f4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f500:	d103      	bne.n	810f50a <xQueueReceive+0x122>
 810f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f504:	2200      	movs	r2, #0
 810f506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810f50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f50c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810f510:	b25b      	sxtb	r3, r3
 810f512:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f516:	d103      	bne.n	810f520 <xQueueReceive+0x138>
 810f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f51a:	2200      	movs	r2, #0
 810f51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810f520:	f7ff fb98 	bl	810ec54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810f524:	1d3a      	adds	r2, r7, #4
 810f526:	f107 0310 	add.w	r3, r7, #16
 810f52a:	4611      	mov	r1, r2
 810f52c:	4618      	mov	r0, r3
 810f52e:	f000 ff15 	bl	811035c <xTaskCheckForTimeOut>
 810f532:	4603      	mov	r3, r0
 810f534:	2b00      	cmp	r3, #0
 810f536:	d123      	bne.n	810f580 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f53a:	f000 f997 	bl	810f86c <prvIsQueueEmpty>
 810f53e:	4603      	mov	r3, r0
 810f540:	2b00      	cmp	r3, #0
 810f542:	d017      	beq.n	810f574 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810f544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f546:	3324      	adds	r3, #36	; 0x24
 810f548:	687a      	ldr	r2, [r7, #4]
 810f54a:	4611      	mov	r1, r2
 810f54c:	4618      	mov	r0, r3
 810f54e:	f000 fe3b 	bl	81101c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810f552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f554:	f000 f938 	bl	810f7c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810f558:	f000 fc5e 	bl	810fe18 <xTaskResumeAll>
 810f55c:	4603      	mov	r3, r0
 810f55e:	2b00      	cmp	r3, #0
 810f560:	d189      	bne.n	810f476 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 810f562:	4b10      	ldr	r3, [pc, #64]	; (810f5a4 <xQueueReceive+0x1bc>)
 810f564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810f568:	601a      	str	r2, [r3, #0]
 810f56a:	f3bf 8f4f 	dsb	sy
 810f56e:	f3bf 8f6f 	isb	sy
 810f572:	e780      	b.n	810f476 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810f574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f576:	f000 f927 	bl	810f7c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810f57a:	f000 fc4d 	bl	810fe18 <xTaskResumeAll>
 810f57e:	e77a      	b.n	810f476 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810f580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f582:	f000 f921 	bl	810f7c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810f586:	f000 fc47 	bl	810fe18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810f58a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810f58c:	f000 f96e 	bl	810f86c <prvIsQueueEmpty>
 810f590:	4603      	mov	r3, r0
 810f592:	2b00      	cmp	r3, #0
 810f594:	f43f af6f 	beq.w	810f476 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810f598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810f59a:	4618      	mov	r0, r3
 810f59c:	3730      	adds	r7, #48	; 0x30
 810f59e:	46bd      	mov	sp, r7
 810f5a0:	bd80      	pop	{r7, pc}
 810f5a2:	bf00      	nop
 810f5a4:	e000ed04 	.word	0xe000ed04

0810f5a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 810f5a8:	b580      	push	{r7, lr}
 810f5aa:	b08e      	sub	sp, #56	; 0x38
 810f5ac:	af00      	add	r7, sp, #0
 810f5ae:	60f8      	str	r0, [r7, #12]
 810f5b0:	60b9      	str	r1, [r7, #8]
 810f5b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810f5b4:	68fb      	ldr	r3, [r7, #12]
 810f5b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810f5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f5ba:	2b00      	cmp	r3, #0
 810f5bc:	d10a      	bne.n	810f5d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 810f5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f5c2:	f383 8811 	msr	BASEPRI, r3
 810f5c6:	f3bf 8f6f 	isb	sy
 810f5ca:	f3bf 8f4f 	dsb	sy
 810f5ce:	623b      	str	r3, [r7, #32]
}
 810f5d0:	bf00      	nop
 810f5d2:	e7fe      	b.n	810f5d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810f5d4:	68bb      	ldr	r3, [r7, #8]
 810f5d6:	2b00      	cmp	r3, #0
 810f5d8:	d103      	bne.n	810f5e2 <xQueueReceiveFromISR+0x3a>
 810f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f5de:	2b00      	cmp	r3, #0
 810f5e0:	d101      	bne.n	810f5e6 <xQueueReceiveFromISR+0x3e>
 810f5e2:	2301      	movs	r3, #1
 810f5e4:	e000      	b.n	810f5e8 <xQueueReceiveFromISR+0x40>
 810f5e6:	2300      	movs	r3, #0
 810f5e8:	2b00      	cmp	r3, #0
 810f5ea:	d10a      	bne.n	810f602 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 810f5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f5f0:	f383 8811 	msr	BASEPRI, r3
 810f5f4:	f3bf 8f6f 	isb	sy
 810f5f8:	f3bf 8f4f 	dsb	sy
 810f5fc:	61fb      	str	r3, [r7, #28]
}
 810f5fe:	bf00      	nop
 810f600:	e7fe      	b.n	810f600 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810f602:	f7ff fbd9 	bl	810edb8 <vPortValidateInterruptPriority>
	__asm volatile
 810f606:	f3ef 8211 	mrs	r2, BASEPRI
 810f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f60e:	f383 8811 	msr	BASEPRI, r3
 810f612:	f3bf 8f6f 	isb	sy
 810f616:	f3bf 8f4f 	dsb	sy
 810f61a:	61ba      	str	r2, [r7, #24]
 810f61c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810f61e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810f620:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810f626:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f62a:	2b00      	cmp	r3, #0
 810f62c:	d02f      	beq.n	810f68e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 810f62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f630:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810f634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 810f638:	68b9      	ldr	r1, [r7, #8]
 810f63a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810f63c:	f000 f89e 	bl	810f77c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810f640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810f642:	1e5a      	subs	r2, r3, #1
 810f644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f646:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 810f648:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 810f64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f650:	d112      	bne.n	810f678 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f654:	691b      	ldr	r3, [r3, #16]
 810f656:	2b00      	cmp	r3, #0
 810f658:	d016      	beq.n	810f688 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f65c:	3310      	adds	r3, #16
 810f65e:	4618      	mov	r0, r3
 810f660:	f000 fe02 	bl	8110268 <xTaskRemoveFromEventList>
 810f664:	4603      	mov	r3, r0
 810f666:	2b00      	cmp	r3, #0
 810f668:	d00e      	beq.n	810f688 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 810f66a:	687b      	ldr	r3, [r7, #4]
 810f66c:	2b00      	cmp	r3, #0
 810f66e:	d00b      	beq.n	810f688 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 810f670:	687b      	ldr	r3, [r7, #4]
 810f672:	2201      	movs	r2, #1
 810f674:	601a      	str	r2, [r3, #0]
 810f676:	e007      	b.n	810f688 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 810f678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810f67c:	3301      	adds	r3, #1
 810f67e:	b2db      	uxtb	r3, r3
 810f680:	b25a      	sxtb	r2, r3
 810f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810f684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 810f688:	2301      	movs	r3, #1
 810f68a:	637b      	str	r3, [r7, #52]	; 0x34
 810f68c:	e001      	b.n	810f692 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 810f68e:	2300      	movs	r3, #0
 810f690:	637b      	str	r3, [r7, #52]	; 0x34
 810f692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810f694:	613b      	str	r3, [r7, #16]
	__asm volatile
 810f696:	693b      	ldr	r3, [r7, #16]
 810f698:	f383 8811 	msr	BASEPRI, r3
}
 810f69c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810f69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810f6a0:	4618      	mov	r0, r3
 810f6a2:	3738      	adds	r7, #56	; 0x38
 810f6a4:	46bd      	mov	sp, r7
 810f6a6:	bd80      	pop	{r7, pc}

0810f6a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810f6a8:	b580      	push	{r7, lr}
 810f6aa:	b086      	sub	sp, #24
 810f6ac:	af00      	add	r7, sp, #0
 810f6ae:	60f8      	str	r0, [r7, #12]
 810f6b0:	60b9      	str	r1, [r7, #8]
 810f6b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810f6b4:	2300      	movs	r3, #0
 810f6b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810f6b8:	68fb      	ldr	r3, [r7, #12]
 810f6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810f6bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810f6be:	68fb      	ldr	r3, [r7, #12]
 810f6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f6c2:	2b00      	cmp	r3, #0
 810f6c4:	d10d      	bne.n	810f6e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810f6c6:	68fb      	ldr	r3, [r7, #12]
 810f6c8:	681b      	ldr	r3, [r3, #0]
 810f6ca:	2b00      	cmp	r3, #0
 810f6cc:	d14d      	bne.n	810f76a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810f6ce:	68fb      	ldr	r3, [r7, #12]
 810f6d0:	689b      	ldr	r3, [r3, #8]
 810f6d2:	4618      	mov	r0, r3
 810f6d4:	f000 ffa4 	bl	8110620 <xTaskPriorityDisinherit>
 810f6d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810f6da:	68fb      	ldr	r3, [r7, #12]
 810f6dc:	2200      	movs	r2, #0
 810f6de:	609a      	str	r2, [r3, #8]
 810f6e0:	e043      	b.n	810f76a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810f6e2:	687b      	ldr	r3, [r7, #4]
 810f6e4:	2b00      	cmp	r3, #0
 810f6e6:	d119      	bne.n	810f71c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810f6e8:	68fb      	ldr	r3, [r7, #12]
 810f6ea:	6858      	ldr	r0, [r3, #4]
 810f6ec:	68fb      	ldr	r3, [r7, #12]
 810f6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f6f0:	461a      	mov	r2, r3
 810f6f2:	68b9      	ldr	r1, [r7, #8]
 810f6f4:	f001 fbce 	bl	8110e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810f6f8:	68fb      	ldr	r3, [r7, #12]
 810f6fa:	685a      	ldr	r2, [r3, #4]
 810f6fc:	68fb      	ldr	r3, [r7, #12]
 810f6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f700:	441a      	add	r2, r3
 810f702:	68fb      	ldr	r3, [r7, #12]
 810f704:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810f706:	68fb      	ldr	r3, [r7, #12]
 810f708:	685a      	ldr	r2, [r3, #4]
 810f70a:	68fb      	ldr	r3, [r7, #12]
 810f70c:	689b      	ldr	r3, [r3, #8]
 810f70e:	429a      	cmp	r2, r3
 810f710:	d32b      	bcc.n	810f76a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810f712:	68fb      	ldr	r3, [r7, #12]
 810f714:	681a      	ldr	r2, [r3, #0]
 810f716:	68fb      	ldr	r3, [r7, #12]
 810f718:	605a      	str	r2, [r3, #4]
 810f71a:	e026      	b.n	810f76a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810f71c:	68fb      	ldr	r3, [r7, #12]
 810f71e:	68d8      	ldr	r0, [r3, #12]
 810f720:	68fb      	ldr	r3, [r7, #12]
 810f722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f724:	461a      	mov	r2, r3
 810f726:	68b9      	ldr	r1, [r7, #8]
 810f728:	f001 fbb4 	bl	8110e94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810f72c:	68fb      	ldr	r3, [r7, #12]
 810f72e:	68da      	ldr	r2, [r3, #12]
 810f730:	68fb      	ldr	r3, [r7, #12]
 810f732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f734:	425b      	negs	r3, r3
 810f736:	441a      	add	r2, r3
 810f738:	68fb      	ldr	r3, [r7, #12]
 810f73a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810f73c:	68fb      	ldr	r3, [r7, #12]
 810f73e:	68da      	ldr	r2, [r3, #12]
 810f740:	68fb      	ldr	r3, [r7, #12]
 810f742:	681b      	ldr	r3, [r3, #0]
 810f744:	429a      	cmp	r2, r3
 810f746:	d207      	bcs.n	810f758 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810f748:	68fb      	ldr	r3, [r7, #12]
 810f74a:	689a      	ldr	r2, [r3, #8]
 810f74c:	68fb      	ldr	r3, [r7, #12]
 810f74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f750:	425b      	negs	r3, r3
 810f752:	441a      	add	r2, r3
 810f754:	68fb      	ldr	r3, [r7, #12]
 810f756:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810f758:	687b      	ldr	r3, [r7, #4]
 810f75a:	2b02      	cmp	r3, #2
 810f75c:	d105      	bne.n	810f76a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810f75e:	693b      	ldr	r3, [r7, #16]
 810f760:	2b00      	cmp	r3, #0
 810f762:	d002      	beq.n	810f76a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810f764:	693b      	ldr	r3, [r7, #16]
 810f766:	3b01      	subs	r3, #1
 810f768:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810f76a:	693b      	ldr	r3, [r7, #16]
 810f76c:	1c5a      	adds	r2, r3, #1
 810f76e:	68fb      	ldr	r3, [r7, #12]
 810f770:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810f772:	697b      	ldr	r3, [r7, #20]
}
 810f774:	4618      	mov	r0, r3
 810f776:	3718      	adds	r7, #24
 810f778:	46bd      	mov	sp, r7
 810f77a:	bd80      	pop	{r7, pc}

0810f77c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810f77c:	b580      	push	{r7, lr}
 810f77e:	b082      	sub	sp, #8
 810f780:	af00      	add	r7, sp, #0
 810f782:	6078      	str	r0, [r7, #4]
 810f784:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810f786:	687b      	ldr	r3, [r7, #4]
 810f788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f78a:	2b00      	cmp	r3, #0
 810f78c:	d018      	beq.n	810f7c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810f78e:	687b      	ldr	r3, [r7, #4]
 810f790:	68da      	ldr	r2, [r3, #12]
 810f792:	687b      	ldr	r3, [r7, #4]
 810f794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f796:	441a      	add	r2, r3
 810f798:	687b      	ldr	r3, [r7, #4]
 810f79a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810f79c:	687b      	ldr	r3, [r7, #4]
 810f79e:	68da      	ldr	r2, [r3, #12]
 810f7a0:	687b      	ldr	r3, [r7, #4]
 810f7a2:	689b      	ldr	r3, [r3, #8]
 810f7a4:	429a      	cmp	r2, r3
 810f7a6:	d303      	bcc.n	810f7b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810f7a8:	687b      	ldr	r3, [r7, #4]
 810f7aa:	681a      	ldr	r2, [r3, #0]
 810f7ac:	687b      	ldr	r3, [r7, #4]
 810f7ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810f7b0:	687b      	ldr	r3, [r7, #4]
 810f7b2:	68d9      	ldr	r1, [r3, #12]
 810f7b4:	687b      	ldr	r3, [r7, #4]
 810f7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810f7b8:	461a      	mov	r2, r3
 810f7ba:	6838      	ldr	r0, [r7, #0]
 810f7bc:	f001 fb6a 	bl	8110e94 <memcpy>
	}
}
 810f7c0:	bf00      	nop
 810f7c2:	3708      	adds	r7, #8
 810f7c4:	46bd      	mov	sp, r7
 810f7c6:	bd80      	pop	{r7, pc}

0810f7c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810f7c8:	b580      	push	{r7, lr}
 810f7ca:	b084      	sub	sp, #16
 810f7cc:	af00      	add	r7, sp, #0
 810f7ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810f7d0:	f7ff fa10 	bl	810ebf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810f7d4:	687b      	ldr	r3, [r7, #4]
 810f7d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810f7da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810f7dc:	e011      	b.n	810f802 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810f7de:	687b      	ldr	r3, [r7, #4]
 810f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810f7e2:	2b00      	cmp	r3, #0
 810f7e4:	d012      	beq.n	810f80c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810f7e6:	687b      	ldr	r3, [r7, #4]
 810f7e8:	3324      	adds	r3, #36	; 0x24
 810f7ea:	4618      	mov	r0, r3
 810f7ec:	f000 fd3c 	bl	8110268 <xTaskRemoveFromEventList>
 810f7f0:	4603      	mov	r3, r0
 810f7f2:	2b00      	cmp	r3, #0
 810f7f4:	d001      	beq.n	810f7fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810f7f6:	f000 fe13 	bl	8110420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810f7fa:	7bfb      	ldrb	r3, [r7, #15]
 810f7fc:	3b01      	subs	r3, #1
 810f7fe:	b2db      	uxtb	r3, r3
 810f800:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810f802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810f806:	2b00      	cmp	r3, #0
 810f808:	dce9      	bgt.n	810f7de <prvUnlockQueue+0x16>
 810f80a:	e000      	b.n	810f80e <prvUnlockQueue+0x46>
					break;
 810f80c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810f80e:	687b      	ldr	r3, [r7, #4]
 810f810:	22ff      	movs	r2, #255	; 0xff
 810f812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810f816:	f7ff fa1d 	bl	810ec54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810f81a:	f7ff f9eb 	bl	810ebf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810f81e:	687b      	ldr	r3, [r7, #4]
 810f820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810f824:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810f826:	e011      	b.n	810f84c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810f828:	687b      	ldr	r3, [r7, #4]
 810f82a:	691b      	ldr	r3, [r3, #16]
 810f82c:	2b00      	cmp	r3, #0
 810f82e:	d012      	beq.n	810f856 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810f830:	687b      	ldr	r3, [r7, #4]
 810f832:	3310      	adds	r3, #16
 810f834:	4618      	mov	r0, r3
 810f836:	f000 fd17 	bl	8110268 <xTaskRemoveFromEventList>
 810f83a:	4603      	mov	r3, r0
 810f83c:	2b00      	cmp	r3, #0
 810f83e:	d001      	beq.n	810f844 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810f840:	f000 fdee 	bl	8110420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810f844:	7bbb      	ldrb	r3, [r7, #14]
 810f846:	3b01      	subs	r3, #1
 810f848:	b2db      	uxtb	r3, r3
 810f84a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810f84c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810f850:	2b00      	cmp	r3, #0
 810f852:	dce9      	bgt.n	810f828 <prvUnlockQueue+0x60>
 810f854:	e000      	b.n	810f858 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810f856:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810f858:	687b      	ldr	r3, [r7, #4]
 810f85a:	22ff      	movs	r2, #255	; 0xff
 810f85c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810f860:	f7ff f9f8 	bl	810ec54 <vPortExitCritical>
}
 810f864:	bf00      	nop
 810f866:	3710      	adds	r7, #16
 810f868:	46bd      	mov	sp, r7
 810f86a:	bd80      	pop	{r7, pc}

0810f86c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810f86c:	b580      	push	{r7, lr}
 810f86e:	b084      	sub	sp, #16
 810f870:	af00      	add	r7, sp, #0
 810f872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810f874:	f7ff f9be 	bl	810ebf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810f878:	687b      	ldr	r3, [r7, #4]
 810f87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810f87c:	2b00      	cmp	r3, #0
 810f87e:	d102      	bne.n	810f886 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810f880:	2301      	movs	r3, #1
 810f882:	60fb      	str	r3, [r7, #12]
 810f884:	e001      	b.n	810f88a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810f886:	2300      	movs	r3, #0
 810f888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810f88a:	f7ff f9e3 	bl	810ec54 <vPortExitCritical>

	return xReturn;
 810f88e:	68fb      	ldr	r3, [r7, #12]
}
 810f890:	4618      	mov	r0, r3
 810f892:	3710      	adds	r7, #16
 810f894:	46bd      	mov	sp, r7
 810f896:	bd80      	pop	{r7, pc}

0810f898 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810f898:	b580      	push	{r7, lr}
 810f89a:	b084      	sub	sp, #16
 810f89c:	af00      	add	r7, sp, #0
 810f89e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810f8a0:	f7ff f9a8 	bl	810ebf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810f8a4:	687b      	ldr	r3, [r7, #4]
 810f8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810f8a8:	687b      	ldr	r3, [r7, #4]
 810f8aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810f8ac:	429a      	cmp	r2, r3
 810f8ae:	d102      	bne.n	810f8b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810f8b0:	2301      	movs	r3, #1
 810f8b2:	60fb      	str	r3, [r7, #12]
 810f8b4:	e001      	b.n	810f8ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810f8b6:	2300      	movs	r3, #0
 810f8b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810f8ba:	f7ff f9cb 	bl	810ec54 <vPortExitCritical>

	return xReturn;
 810f8be:	68fb      	ldr	r3, [r7, #12]
}
 810f8c0:	4618      	mov	r0, r3
 810f8c2:	3710      	adds	r7, #16
 810f8c4:	46bd      	mov	sp, r7
 810f8c6:	bd80      	pop	{r7, pc}

0810f8c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810f8c8:	b480      	push	{r7}
 810f8ca:	b085      	sub	sp, #20
 810f8cc:	af00      	add	r7, sp, #0
 810f8ce:	6078      	str	r0, [r7, #4]
 810f8d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810f8d2:	2300      	movs	r3, #0
 810f8d4:	60fb      	str	r3, [r7, #12]
 810f8d6:	e014      	b.n	810f902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810f8d8:	4a0f      	ldr	r2, [pc, #60]	; (810f918 <vQueueAddToRegistry+0x50>)
 810f8da:	68fb      	ldr	r3, [r7, #12]
 810f8dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810f8e0:	2b00      	cmp	r3, #0
 810f8e2:	d10b      	bne.n	810f8fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810f8e4:	490c      	ldr	r1, [pc, #48]	; (810f918 <vQueueAddToRegistry+0x50>)
 810f8e6:	68fb      	ldr	r3, [r7, #12]
 810f8e8:	683a      	ldr	r2, [r7, #0]
 810f8ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810f8ee:	4a0a      	ldr	r2, [pc, #40]	; (810f918 <vQueueAddToRegistry+0x50>)
 810f8f0:	68fb      	ldr	r3, [r7, #12]
 810f8f2:	00db      	lsls	r3, r3, #3
 810f8f4:	4413      	add	r3, r2
 810f8f6:	687a      	ldr	r2, [r7, #4]
 810f8f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810f8fa:	e006      	b.n	810f90a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810f8fc:	68fb      	ldr	r3, [r7, #12]
 810f8fe:	3301      	adds	r3, #1
 810f900:	60fb      	str	r3, [r7, #12]
 810f902:	68fb      	ldr	r3, [r7, #12]
 810f904:	2b07      	cmp	r3, #7
 810f906:	d9e7      	bls.n	810f8d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810f908:	bf00      	nop
 810f90a:	bf00      	nop
 810f90c:	3714      	adds	r7, #20
 810f90e:	46bd      	mov	sp, r7
 810f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f914:	4770      	bx	lr
 810f916:	bf00      	nop
 810f918:	10006f48 	.word	0x10006f48

0810f91c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810f91c:	b580      	push	{r7, lr}
 810f91e:	b086      	sub	sp, #24
 810f920:	af00      	add	r7, sp, #0
 810f922:	60f8      	str	r0, [r7, #12]
 810f924:	60b9      	str	r1, [r7, #8]
 810f926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810f928:	68fb      	ldr	r3, [r7, #12]
 810f92a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810f92c:	f7ff f962 	bl	810ebf4 <vPortEnterCritical>
 810f930:	697b      	ldr	r3, [r7, #20]
 810f932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810f936:	b25b      	sxtb	r3, r3
 810f938:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f93c:	d103      	bne.n	810f946 <vQueueWaitForMessageRestricted+0x2a>
 810f93e:	697b      	ldr	r3, [r7, #20]
 810f940:	2200      	movs	r2, #0
 810f942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810f946:	697b      	ldr	r3, [r7, #20]
 810f948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810f94c:	b25b      	sxtb	r3, r3
 810f94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810f952:	d103      	bne.n	810f95c <vQueueWaitForMessageRestricted+0x40>
 810f954:	697b      	ldr	r3, [r7, #20]
 810f956:	2200      	movs	r2, #0
 810f958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810f95c:	f7ff f97a 	bl	810ec54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810f960:	697b      	ldr	r3, [r7, #20]
 810f962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810f964:	2b00      	cmp	r3, #0
 810f966:	d106      	bne.n	810f976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810f968:	697b      	ldr	r3, [r7, #20]
 810f96a:	3324      	adds	r3, #36	; 0x24
 810f96c:	687a      	ldr	r2, [r7, #4]
 810f96e:	68b9      	ldr	r1, [r7, #8]
 810f970:	4618      	mov	r0, r3
 810f972:	f000 fc4d 	bl	8110210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810f976:	6978      	ldr	r0, [r7, #20]
 810f978:	f7ff ff26 	bl	810f7c8 <prvUnlockQueue>
	}
 810f97c:	bf00      	nop
 810f97e:	3718      	adds	r7, #24
 810f980:	46bd      	mov	sp, r7
 810f982:	bd80      	pop	{r7, pc}

0810f984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810f984:	b580      	push	{r7, lr}
 810f986:	b08e      	sub	sp, #56	; 0x38
 810f988:	af04      	add	r7, sp, #16
 810f98a:	60f8      	str	r0, [r7, #12]
 810f98c:	60b9      	str	r1, [r7, #8]
 810f98e:	607a      	str	r2, [r7, #4]
 810f990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810f992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810f994:	2b00      	cmp	r3, #0
 810f996:	d10a      	bne.n	810f9ae <xTaskCreateStatic+0x2a>
	__asm volatile
 810f998:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f99c:	f383 8811 	msr	BASEPRI, r3
 810f9a0:	f3bf 8f6f 	isb	sy
 810f9a4:	f3bf 8f4f 	dsb	sy
 810f9a8:	623b      	str	r3, [r7, #32]
}
 810f9aa:	bf00      	nop
 810f9ac:	e7fe      	b.n	810f9ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810f9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f9b0:	2b00      	cmp	r3, #0
 810f9b2:	d10a      	bne.n	810f9ca <xTaskCreateStatic+0x46>
	__asm volatile
 810f9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f9b8:	f383 8811 	msr	BASEPRI, r3
 810f9bc:	f3bf 8f6f 	isb	sy
 810f9c0:	f3bf 8f4f 	dsb	sy
 810f9c4:	61fb      	str	r3, [r7, #28]
}
 810f9c6:	bf00      	nop
 810f9c8:	e7fe      	b.n	810f9c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810f9ca:	235c      	movs	r3, #92	; 0x5c
 810f9cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810f9ce:	693b      	ldr	r3, [r7, #16]
 810f9d0:	2b5c      	cmp	r3, #92	; 0x5c
 810f9d2:	d00a      	beq.n	810f9ea <xTaskCreateStatic+0x66>
	__asm volatile
 810f9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810f9d8:	f383 8811 	msr	BASEPRI, r3
 810f9dc:	f3bf 8f6f 	isb	sy
 810f9e0:	f3bf 8f4f 	dsb	sy
 810f9e4:	61bb      	str	r3, [r7, #24]
}
 810f9e6:	bf00      	nop
 810f9e8:	e7fe      	b.n	810f9e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810f9ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f9ee:	2b00      	cmp	r3, #0
 810f9f0:	d01e      	beq.n	810fa30 <xTaskCreateStatic+0xac>
 810f9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810f9f4:	2b00      	cmp	r3, #0
 810f9f6:	d01b      	beq.n	810fa30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810f9fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810f9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810f9fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810fa00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810fa04:	2202      	movs	r2, #2
 810fa06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810fa0a:	2300      	movs	r3, #0
 810fa0c:	9303      	str	r3, [sp, #12]
 810fa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810fa10:	9302      	str	r3, [sp, #8]
 810fa12:	f107 0314 	add.w	r3, r7, #20
 810fa16:	9301      	str	r3, [sp, #4]
 810fa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fa1a:	9300      	str	r3, [sp, #0]
 810fa1c:	683b      	ldr	r3, [r7, #0]
 810fa1e:	687a      	ldr	r2, [r7, #4]
 810fa20:	68b9      	ldr	r1, [r7, #8]
 810fa22:	68f8      	ldr	r0, [r7, #12]
 810fa24:	f000 f850 	bl	810fac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810fa28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810fa2a:	f000 f8dd 	bl	810fbe8 <prvAddNewTaskToReadyList>
 810fa2e:	e001      	b.n	810fa34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810fa30:	2300      	movs	r3, #0
 810fa32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810fa34:	697b      	ldr	r3, [r7, #20]
	}
 810fa36:	4618      	mov	r0, r3
 810fa38:	3728      	adds	r7, #40	; 0x28
 810fa3a:	46bd      	mov	sp, r7
 810fa3c:	bd80      	pop	{r7, pc}

0810fa3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810fa3e:	b580      	push	{r7, lr}
 810fa40:	b08c      	sub	sp, #48	; 0x30
 810fa42:	af04      	add	r7, sp, #16
 810fa44:	60f8      	str	r0, [r7, #12]
 810fa46:	60b9      	str	r1, [r7, #8]
 810fa48:	603b      	str	r3, [r7, #0]
 810fa4a:	4613      	mov	r3, r2
 810fa4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810fa4e:	88fb      	ldrh	r3, [r7, #6]
 810fa50:	009b      	lsls	r3, r3, #2
 810fa52:	4618      	mov	r0, r3
 810fa54:	f7fe fd06 	bl	810e464 <pvPortMalloc>
 810fa58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810fa5a:	697b      	ldr	r3, [r7, #20]
 810fa5c:	2b00      	cmp	r3, #0
 810fa5e:	d00e      	beq.n	810fa7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810fa60:	205c      	movs	r0, #92	; 0x5c
 810fa62:	f7fe fcff 	bl	810e464 <pvPortMalloc>
 810fa66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810fa68:	69fb      	ldr	r3, [r7, #28]
 810fa6a:	2b00      	cmp	r3, #0
 810fa6c:	d003      	beq.n	810fa76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810fa6e:	69fb      	ldr	r3, [r7, #28]
 810fa70:	697a      	ldr	r2, [r7, #20]
 810fa72:	631a      	str	r2, [r3, #48]	; 0x30
 810fa74:	e005      	b.n	810fa82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810fa76:	6978      	ldr	r0, [r7, #20]
 810fa78:	f7fe fdc0 	bl	810e5fc <vPortFree>
 810fa7c:	e001      	b.n	810fa82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810fa7e:	2300      	movs	r3, #0
 810fa80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810fa82:	69fb      	ldr	r3, [r7, #28]
 810fa84:	2b00      	cmp	r3, #0
 810fa86:	d017      	beq.n	810fab8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810fa88:	69fb      	ldr	r3, [r7, #28]
 810fa8a:	2200      	movs	r2, #0
 810fa8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810fa90:	88fa      	ldrh	r2, [r7, #6]
 810fa92:	2300      	movs	r3, #0
 810fa94:	9303      	str	r3, [sp, #12]
 810fa96:	69fb      	ldr	r3, [r7, #28]
 810fa98:	9302      	str	r3, [sp, #8]
 810fa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fa9c:	9301      	str	r3, [sp, #4]
 810fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810faa0:	9300      	str	r3, [sp, #0]
 810faa2:	683b      	ldr	r3, [r7, #0]
 810faa4:	68b9      	ldr	r1, [r7, #8]
 810faa6:	68f8      	ldr	r0, [r7, #12]
 810faa8:	f000 f80e 	bl	810fac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810faac:	69f8      	ldr	r0, [r7, #28]
 810faae:	f000 f89b 	bl	810fbe8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810fab2:	2301      	movs	r3, #1
 810fab4:	61bb      	str	r3, [r7, #24]
 810fab6:	e002      	b.n	810fabe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810fab8:	f04f 33ff 	mov.w	r3, #4294967295
 810fabc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810fabe:	69bb      	ldr	r3, [r7, #24]
	}
 810fac0:	4618      	mov	r0, r3
 810fac2:	3720      	adds	r7, #32
 810fac4:	46bd      	mov	sp, r7
 810fac6:	bd80      	pop	{r7, pc}

0810fac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810fac8:	b580      	push	{r7, lr}
 810faca:	b088      	sub	sp, #32
 810facc:	af00      	add	r7, sp, #0
 810face:	60f8      	str	r0, [r7, #12]
 810fad0:	60b9      	str	r1, [r7, #8]
 810fad2:	607a      	str	r2, [r7, #4]
 810fad4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810fad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 810fada:	687b      	ldr	r3, [r7, #4]
 810fadc:	009b      	lsls	r3, r3, #2
 810fade:	461a      	mov	r2, r3
 810fae0:	21a5      	movs	r1, #165	; 0xa5
 810fae2:	f001 f9e5 	bl	8110eb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810fae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810faea:	687b      	ldr	r3, [r7, #4]
 810faec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810faf0:	3b01      	subs	r3, #1
 810faf2:	009b      	lsls	r3, r3, #2
 810faf4:	4413      	add	r3, r2
 810faf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810faf8:	69bb      	ldr	r3, [r7, #24]
 810fafa:	f023 0307 	bic.w	r3, r3, #7
 810fafe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810fb00:	69bb      	ldr	r3, [r7, #24]
 810fb02:	f003 0307 	and.w	r3, r3, #7
 810fb06:	2b00      	cmp	r3, #0
 810fb08:	d00a      	beq.n	810fb20 <prvInitialiseNewTask+0x58>
	__asm volatile
 810fb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810fb0e:	f383 8811 	msr	BASEPRI, r3
 810fb12:	f3bf 8f6f 	isb	sy
 810fb16:	f3bf 8f4f 	dsb	sy
 810fb1a:	617b      	str	r3, [r7, #20]
}
 810fb1c:	bf00      	nop
 810fb1e:	e7fe      	b.n	810fb1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810fb20:	68bb      	ldr	r3, [r7, #8]
 810fb22:	2b00      	cmp	r3, #0
 810fb24:	d01f      	beq.n	810fb66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810fb26:	2300      	movs	r3, #0
 810fb28:	61fb      	str	r3, [r7, #28]
 810fb2a:	e012      	b.n	810fb52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810fb2c:	68ba      	ldr	r2, [r7, #8]
 810fb2e:	69fb      	ldr	r3, [r7, #28]
 810fb30:	4413      	add	r3, r2
 810fb32:	7819      	ldrb	r1, [r3, #0]
 810fb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810fb36:	69fb      	ldr	r3, [r7, #28]
 810fb38:	4413      	add	r3, r2
 810fb3a:	3334      	adds	r3, #52	; 0x34
 810fb3c:	460a      	mov	r2, r1
 810fb3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810fb40:	68ba      	ldr	r2, [r7, #8]
 810fb42:	69fb      	ldr	r3, [r7, #28]
 810fb44:	4413      	add	r3, r2
 810fb46:	781b      	ldrb	r3, [r3, #0]
 810fb48:	2b00      	cmp	r3, #0
 810fb4a:	d006      	beq.n	810fb5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810fb4c:	69fb      	ldr	r3, [r7, #28]
 810fb4e:	3301      	adds	r3, #1
 810fb50:	61fb      	str	r3, [r7, #28]
 810fb52:	69fb      	ldr	r3, [r7, #28]
 810fb54:	2b0f      	cmp	r3, #15
 810fb56:	d9e9      	bls.n	810fb2c <prvInitialiseNewTask+0x64>
 810fb58:	e000      	b.n	810fb5c <prvInitialiseNewTask+0x94>
			{
				break;
 810fb5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810fb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fb5e:	2200      	movs	r2, #0
 810fb60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810fb64:	e003      	b.n	810fb6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810fb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fb68:	2200      	movs	r2, #0
 810fb6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810fb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810fb70:	2b37      	cmp	r3, #55	; 0x37
 810fb72:	d901      	bls.n	810fb78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810fb74:	2337      	movs	r3, #55	; 0x37
 810fb76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810fb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fb7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810fb7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810fb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fb80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810fb82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810fb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fb86:	2200      	movs	r2, #0
 810fb88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fb8c:	3304      	adds	r3, #4
 810fb8e:	4618      	mov	r0, r3
 810fb90:	f7fe fe72 	bl	810e878 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810fb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fb96:	3318      	adds	r3, #24
 810fb98:	4618      	mov	r0, r3
 810fb9a:	f7fe fe6d 	bl	810e878 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810fba2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810fba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810fba6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fbac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810fbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fbb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810fbb2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810fbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fbb6:	2200      	movs	r2, #0
 810fbb8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810fbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fbbc:	2200      	movs	r2, #0
 810fbbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810fbc2:	683a      	ldr	r2, [r7, #0]
 810fbc4:	68f9      	ldr	r1, [r7, #12]
 810fbc6:	69b8      	ldr	r0, [r7, #24]
 810fbc8:	f7fe feea 	bl	810e9a0 <pxPortInitialiseStack>
 810fbcc:	4602      	mov	r2, r0
 810fbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810fbd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fbd4:	2b00      	cmp	r3, #0
 810fbd6:	d002      	beq.n	810fbde <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810fbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810fbda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810fbdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810fbde:	bf00      	nop
 810fbe0:	3720      	adds	r7, #32
 810fbe2:	46bd      	mov	sp, r7
 810fbe4:	bd80      	pop	{r7, pc}
	...

0810fbe8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810fbe8:	b580      	push	{r7, lr}
 810fbea:	b082      	sub	sp, #8
 810fbec:	af00      	add	r7, sp, #0
 810fbee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810fbf0:	f7ff f800 	bl	810ebf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810fbf4:	4b2d      	ldr	r3, [pc, #180]	; (810fcac <prvAddNewTaskToReadyList+0xc4>)
 810fbf6:	681b      	ldr	r3, [r3, #0]
 810fbf8:	3301      	adds	r3, #1
 810fbfa:	4a2c      	ldr	r2, [pc, #176]	; (810fcac <prvAddNewTaskToReadyList+0xc4>)
 810fbfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810fbfe:	4b2c      	ldr	r3, [pc, #176]	; (810fcb0 <prvAddNewTaskToReadyList+0xc8>)
 810fc00:	681b      	ldr	r3, [r3, #0]
 810fc02:	2b00      	cmp	r3, #0
 810fc04:	d109      	bne.n	810fc1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810fc06:	4a2a      	ldr	r2, [pc, #168]	; (810fcb0 <prvAddNewTaskToReadyList+0xc8>)
 810fc08:	687b      	ldr	r3, [r7, #4]
 810fc0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810fc0c:	4b27      	ldr	r3, [pc, #156]	; (810fcac <prvAddNewTaskToReadyList+0xc4>)
 810fc0e:	681b      	ldr	r3, [r3, #0]
 810fc10:	2b01      	cmp	r3, #1
 810fc12:	d110      	bne.n	810fc36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810fc14:	f000 fc28 	bl	8110468 <prvInitialiseTaskLists>
 810fc18:	e00d      	b.n	810fc36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810fc1a:	4b26      	ldr	r3, [pc, #152]	; (810fcb4 <prvAddNewTaskToReadyList+0xcc>)
 810fc1c:	681b      	ldr	r3, [r3, #0]
 810fc1e:	2b00      	cmp	r3, #0
 810fc20:	d109      	bne.n	810fc36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810fc22:	4b23      	ldr	r3, [pc, #140]	; (810fcb0 <prvAddNewTaskToReadyList+0xc8>)
 810fc24:	681b      	ldr	r3, [r3, #0]
 810fc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810fc28:	687b      	ldr	r3, [r7, #4]
 810fc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810fc2c:	429a      	cmp	r2, r3
 810fc2e:	d802      	bhi.n	810fc36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810fc30:	4a1f      	ldr	r2, [pc, #124]	; (810fcb0 <prvAddNewTaskToReadyList+0xc8>)
 810fc32:	687b      	ldr	r3, [r7, #4]
 810fc34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810fc36:	4b20      	ldr	r3, [pc, #128]	; (810fcb8 <prvAddNewTaskToReadyList+0xd0>)
 810fc38:	681b      	ldr	r3, [r3, #0]
 810fc3a:	3301      	adds	r3, #1
 810fc3c:	4a1e      	ldr	r2, [pc, #120]	; (810fcb8 <prvAddNewTaskToReadyList+0xd0>)
 810fc3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810fc40:	4b1d      	ldr	r3, [pc, #116]	; (810fcb8 <prvAddNewTaskToReadyList+0xd0>)
 810fc42:	681a      	ldr	r2, [r3, #0]
 810fc44:	687b      	ldr	r3, [r7, #4]
 810fc46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810fc48:	687b      	ldr	r3, [r7, #4]
 810fc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810fc4c:	4b1b      	ldr	r3, [pc, #108]	; (810fcbc <prvAddNewTaskToReadyList+0xd4>)
 810fc4e:	681b      	ldr	r3, [r3, #0]
 810fc50:	429a      	cmp	r2, r3
 810fc52:	d903      	bls.n	810fc5c <prvAddNewTaskToReadyList+0x74>
 810fc54:	687b      	ldr	r3, [r7, #4]
 810fc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810fc58:	4a18      	ldr	r2, [pc, #96]	; (810fcbc <prvAddNewTaskToReadyList+0xd4>)
 810fc5a:	6013      	str	r3, [r2, #0]
 810fc5c:	687b      	ldr	r3, [r7, #4]
 810fc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810fc60:	4613      	mov	r3, r2
 810fc62:	009b      	lsls	r3, r3, #2
 810fc64:	4413      	add	r3, r2
 810fc66:	009b      	lsls	r3, r3, #2
 810fc68:	4a15      	ldr	r2, [pc, #84]	; (810fcc0 <prvAddNewTaskToReadyList+0xd8>)
 810fc6a:	441a      	add	r2, r3
 810fc6c:	687b      	ldr	r3, [r7, #4]
 810fc6e:	3304      	adds	r3, #4
 810fc70:	4619      	mov	r1, r3
 810fc72:	4610      	mov	r0, r2
 810fc74:	f7fe fe0d 	bl	810e892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810fc78:	f7fe ffec 	bl	810ec54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810fc7c:	4b0d      	ldr	r3, [pc, #52]	; (810fcb4 <prvAddNewTaskToReadyList+0xcc>)
 810fc7e:	681b      	ldr	r3, [r3, #0]
 810fc80:	2b00      	cmp	r3, #0
 810fc82:	d00e      	beq.n	810fca2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810fc84:	4b0a      	ldr	r3, [pc, #40]	; (810fcb0 <prvAddNewTaskToReadyList+0xc8>)
 810fc86:	681b      	ldr	r3, [r3, #0]
 810fc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810fc8a:	687b      	ldr	r3, [r7, #4]
 810fc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810fc8e:	429a      	cmp	r2, r3
 810fc90:	d207      	bcs.n	810fca2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810fc92:	4b0c      	ldr	r3, [pc, #48]	; (810fcc4 <prvAddNewTaskToReadyList+0xdc>)
 810fc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810fc98:	601a      	str	r2, [r3, #0]
 810fc9a:	f3bf 8f4f 	dsb	sy
 810fc9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810fca2:	bf00      	nop
 810fca4:	3708      	adds	r7, #8
 810fca6:	46bd      	mov	sp, r7
 810fca8:	bd80      	pop	{r7, pc}
 810fcaa:	bf00      	nop
 810fcac:	100049cc 	.word	0x100049cc
 810fcb0:	100044f8 	.word	0x100044f8
 810fcb4:	100049d8 	.word	0x100049d8
 810fcb8:	100049e8 	.word	0x100049e8
 810fcbc:	100049d4 	.word	0x100049d4
 810fcc0:	100044fc 	.word	0x100044fc
 810fcc4:	e000ed04 	.word	0xe000ed04

0810fcc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810fcc8:	b580      	push	{r7, lr}
 810fcca:	b084      	sub	sp, #16
 810fccc:	af00      	add	r7, sp, #0
 810fcce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810fcd0:	2300      	movs	r3, #0
 810fcd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810fcd4:	687b      	ldr	r3, [r7, #4]
 810fcd6:	2b00      	cmp	r3, #0
 810fcd8:	d017      	beq.n	810fd0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810fcda:	4b13      	ldr	r3, [pc, #76]	; (810fd28 <vTaskDelay+0x60>)
 810fcdc:	681b      	ldr	r3, [r3, #0]
 810fcde:	2b00      	cmp	r3, #0
 810fce0:	d00a      	beq.n	810fcf8 <vTaskDelay+0x30>
	__asm volatile
 810fce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810fce6:	f383 8811 	msr	BASEPRI, r3
 810fcea:	f3bf 8f6f 	isb	sy
 810fcee:	f3bf 8f4f 	dsb	sy
 810fcf2:	60bb      	str	r3, [r7, #8]
}
 810fcf4:	bf00      	nop
 810fcf6:	e7fe      	b.n	810fcf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810fcf8:	f000 f880 	bl	810fdfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810fcfc:	2100      	movs	r1, #0
 810fcfe:	6878      	ldr	r0, [r7, #4]
 810fd00:	f000 fcfc 	bl	81106fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810fd04:	f000 f888 	bl	810fe18 <xTaskResumeAll>
 810fd08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810fd0a:	68fb      	ldr	r3, [r7, #12]
 810fd0c:	2b00      	cmp	r3, #0
 810fd0e:	d107      	bne.n	810fd20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 810fd10:	4b06      	ldr	r3, [pc, #24]	; (810fd2c <vTaskDelay+0x64>)
 810fd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810fd16:	601a      	str	r2, [r3, #0]
 810fd18:	f3bf 8f4f 	dsb	sy
 810fd1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810fd20:	bf00      	nop
 810fd22:	3710      	adds	r7, #16
 810fd24:	46bd      	mov	sp, r7
 810fd26:	bd80      	pop	{r7, pc}
 810fd28:	100049f4 	.word	0x100049f4
 810fd2c:	e000ed04 	.word	0xe000ed04

0810fd30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810fd30:	b580      	push	{r7, lr}
 810fd32:	b08a      	sub	sp, #40	; 0x28
 810fd34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810fd36:	2300      	movs	r3, #0
 810fd38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810fd3a:	2300      	movs	r3, #0
 810fd3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810fd3e:	463a      	mov	r2, r7
 810fd40:	1d39      	adds	r1, r7, #4
 810fd42:	f107 0308 	add.w	r3, r7, #8
 810fd46:	4618      	mov	r0, r3
 810fd48:	f7fe fb58 	bl	810e3fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810fd4c:	6839      	ldr	r1, [r7, #0]
 810fd4e:	687b      	ldr	r3, [r7, #4]
 810fd50:	68ba      	ldr	r2, [r7, #8]
 810fd52:	9202      	str	r2, [sp, #8]
 810fd54:	9301      	str	r3, [sp, #4]
 810fd56:	2300      	movs	r3, #0
 810fd58:	9300      	str	r3, [sp, #0]
 810fd5a:	2300      	movs	r3, #0
 810fd5c:	460a      	mov	r2, r1
 810fd5e:	4921      	ldr	r1, [pc, #132]	; (810fde4 <vTaskStartScheduler+0xb4>)
 810fd60:	4821      	ldr	r0, [pc, #132]	; (810fde8 <vTaskStartScheduler+0xb8>)
 810fd62:	f7ff fe0f 	bl	810f984 <xTaskCreateStatic>
 810fd66:	4603      	mov	r3, r0
 810fd68:	4a20      	ldr	r2, [pc, #128]	; (810fdec <vTaskStartScheduler+0xbc>)
 810fd6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810fd6c:	4b1f      	ldr	r3, [pc, #124]	; (810fdec <vTaskStartScheduler+0xbc>)
 810fd6e:	681b      	ldr	r3, [r3, #0]
 810fd70:	2b00      	cmp	r3, #0
 810fd72:	d002      	beq.n	810fd7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810fd74:	2301      	movs	r3, #1
 810fd76:	617b      	str	r3, [r7, #20]
 810fd78:	e001      	b.n	810fd7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810fd7a:	2300      	movs	r3, #0
 810fd7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810fd7e:	697b      	ldr	r3, [r7, #20]
 810fd80:	2b01      	cmp	r3, #1
 810fd82:	d102      	bne.n	810fd8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810fd84:	f000 fd0e 	bl	81107a4 <xTimerCreateTimerTask>
 810fd88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810fd8a:	697b      	ldr	r3, [r7, #20]
 810fd8c:	2b01      	cmp	r3, #1
 810fd8e:	d116      	bne.n	810fdbe <vTaskStartScheduler+0x8e>
	__asm volatile
 810fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 810fd94:	f383 8811 	msr	BASEPRI, r3
 810fd98:	f3bf 8f6f 	isb	sy
 810fd9c:	f3bf 8f4f 	dsb	sy
 810fda0:	613b      	str	r3, [r7, #16]
}
 810fda2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810fda4:	4b12      	ldr	r3, [pc, #72]	; (810fdf0 <vTaskStartScheduler+0xc0>)
 810fda6:	f04f 32ff 	mov.w	r2, #4294967295
 810fdaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810fdac:	4b11      	ldr	r3, [pc, #68]	; (810fdf4 <vTaskStartScheduler+0xc4>)
 810fdae:	2201      	movs	r2, #1
 810fdb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810fdb2:	4b11      	ldr	r3, [pc, #68]	; (810fdf8 <vTaskStartScheduler+0xc8>)
 810fdb4:	2200      	movs	r2, #0
 810fdb6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810fdb8:	f7fe fe7a 	bl	810eab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810fdbc:	e00e      	b.n	810fddc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810fdbe:	697b      	ldr	r3, [r7, #20]
 810fdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810fdc4:	d10a      	bne.n	810fddc <vTaskStartScheduler+0xac>
	__asm volatile
 810fdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810fdca:	f383 8811 	msr	BASEPRI, r3
 810fdce:	f3bf 8f6f 	isb	sy
 810fdd2:	f3bf 8f4f 	dsb	sy
 810fdd6:	60fb      	str	r3, [r7, #12]
}
 810fdd8:	bf00      	nop
 810fdda:	e7fe      	b.n	810fdda <vTaskStartScheduler+0xaa>
}
 810fddc:	bf00      	nop
 810fdde:	3718      	adds	r7, #24
 810fde0:	46bd      	mov	sp, r7
 810fde2:	bd80      	pop	{r7, pc}
 810fde4:	08113870 	.word	0x08113870
 810fde8:	08110439 	.word	0x08110439
 810fdec:	100049f0 	.word	0x100049f0
 810fdf0:	100049ec 	.word	0x100049ec
 810fdf4:	100049d8 	.word	0x100049d8
 810fdf8:	100049d0 	.word	0x100049d0

0810fdfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810fdfc:	b480      	push	{r7}
 810fdfe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810fe00:	4b04      	ldr	r3, [pc, #16]	; (810fe14 <vTaskSuspendAll+0x18>)
 810fe02:	681b      	ldr	r3, [r3, #0]
 810fe04:	3301      	adds	r3, #1
 810fe06:	4a03      	ldr	r2, [pc, #12]	; (810fe14 <vTaskSuspendAll+0x18>)
 810fe08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810fe0a:	bf00      	nop
 810fe0c:	46bd      	mov	sp, r7
 810fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fe12:	4770      	bx	lr
 810fe14:	100049f4 	.word	0x100049f4

0810fe18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810fe18:	b580      	push	{r7, lr}
 810fe1a:	b084      	sub	sp, #16
 810fe1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810fe1e:	2300      	movs	r3, #0
 810fe20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810fe22:	2300      	movs	r3, #0
 810fe24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810fe26:	4b42      	ldr	r3, [pc, #264]	; (810ff30 <xTaskResumeAll+0x118>)
 810fe28:	681b      	ldr	r3, [r3, #0]
 810fe2a:	2b00      	cmp	r3, #0
 810fe2c:	d10a      	bne.n	810fe44 <xTaskResumeAll+0x2c>
	__asm volatile
 810fe2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810fe32:	f383 8811 	msr	BASEPRI, r3
 810fe36:	f3bf 8f6f 	isb	sy
 810fe3a:	f3bf 8f4f 	dsb	sy
 810fe3e:	603b      	str	r3, [r7, #0]
}
 810fe40:	bf00      	nop
 810fe42:	e7fe      	b.n	810fe42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810fe44:	f7fe fed6 	bl	810ebf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810fe48:	4b39      	ldr	r3, [pc, #228]	; (810ff30 <xTaskResumeAll+0x118>)
 810fe4a:	681b      	ldr	r3, [r3, #0]
 810fe4c:	3b01      	subs	r3, #1
 810fe4e:	4a38      	ldr	r2, [pc, #224]	; (810ff30 <xTaskResumeAll+0x118>)
 810fe50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810fe52:	4b37      	ldr	r3, [pc, #220]	; (810ff30 <xTaskResumeAll+0x118>)
 810fe54:	681b      	ldr	r3, [r3, #0]
 810fe56:	2b00      	cmp	r3, #0
 810fe58:	d162      	bne.n	810ff20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810fe5a:	4b36      	ldr	r3, [pc, #216]	; (810ff34 <xTaskResumeAll+0x11c>)
 810fe5c:	681b      	ldr	r3, [r3, #0]
 810fe5e:	2b00      	cmp	r3, #0
 810fe60:	d05e      	beq.n	810ff20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810fe62:	e02f      	b.n	810fec4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810fe64:	4b34      	ldr	r3, [pc, #208]	; (810ff38 <xTaskResumeAll+0x120>)
 810fe66:	68db      	ldr	r3, [r3, #12]
 810fe68:	68db      	ldr	r3, [r3, #12]
 810fe6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810fe6c:	68fb      	ldr	r3, [r7, #12]
 810fe6e:	3318      	adds	r3, #24
 810fe70:	4618      	mov	r0, r3
 810fe72:	f7fe fd6b 	bl	810e94c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810fe76:	68fb      	ldr	r3, [r7, #12]
 810fe78:	3304      	adds	r3, #4
 810fe7a:	4618      	mov	r0, r3
 810fe7c:	f7fe fd66 	bl	810e94c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810fe80:	68fb      	ldr	r3, [r7, #12]
 810fe82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810fe84:	4b2d      	ldr	r3, [pc, #180]	; (810ff3c <xTaskResumeAll+0x124>)
 810fe86:	681b      	ldr	r3, [r3, #0]
 810fe88:	429a      	cmp	r2, r3
 810fe8a:	d903      	bls.n	810fe94 <xTaskResumeAll+0x7c>
 810fe8c:	68fb      	ldr	r3, [r7, #12]
 810fe8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810fe90:	4a2a      	ldr	r2, [pc, #168]	; (810ff3c <xTaskResumeAll+0x124>)
 810fe92:	6013      	str	r3, [r2, #0]
 810fe94:	68fb      	ldr	r3, [r7, #12]
 810fe96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810fe98:	4613      	mov	r3, r2
 810fe9a:	009b      	lsls	r3, r3, #2
 810fe9c:	4413      	add	r3, r2
 810fe9e:	009b      	lsls	r3, r3, #2
 810fea0:	4a27      	ldr	r2, [pc, #156]	; (810ff40 <xTaskResumeAll+0x128>)
 810fea2:	441a      	add	r2, r3
 810fea4:	68fb      	ldr	r3, [r7, #12]
 810fea6:	3304      	adds	r3, #4
 810fea8:	4619      	mov	r1, r3
 810feaa:	4610      	mov	r0, r2
 810feac:	f7fe fcf1 	bl	810e892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810feb0:	68fb      	ldr	r3, [r7, #12]
 810feb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810feb4:	4b23      	ldr	r3, [pc, #140]	; (810ff44 <xTaskResumeAll+0x12c>)
 810feb6:	681b      	ldr	r3, [r3, #0]
 810feb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810feba:	429a      	cmp	r2, r3
 810febc:	d302      	bcc.n	810fec4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 810febe:	4b22      	ldr	r3, [pc, #136]	; (810ff48 <xTaskResumeAll+0x130>)
 810fec0:	2201      	movs	r2, #1
 810fec2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810fec4:	4b1c      	ldr	r3, [pc, #112]	; (810ff38 <xTaskResumeAll+0x120>)
 810fec6:	681b      	ldr	r3, [r3, #0]
 810fec8:	2b00      	cmp	r3, #0
 810feca:	d1cb      	bne.n	810fe64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810fecc:	68fb      	ldr	r3, [r7, #12]
 810fece:	2b00      	cmp	r3, #0
 810fed0:	d001      	beq.n	810fed6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810fed2:	f000 fb67 	bl	81105a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810fed6:	4b1d      	ldr	r3, [pc, #116]	; (810ff4c <xTaskResumeAll+0x134>)
 810fed8:	681b      	ldr	r3, [r3, #0]
 810feda:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810fedc:	687b      	ldr	r3, [r7, #4]
 810fede:	2b00      	cmp	r3, #0
 810fee0:	d010      	beq.n	810ff04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810fee2:	f000 f859 	bl	810ff98 <xTaskIncrementTick>
 810fee6:	4603      	mov	r3, r0
 810fee8:	2b00      	cmp	r3, #0
 810feea:	d002      	beq.n	810fef2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 810feec:	4b16      	ldr	r3, [pc, #88]	; (810ff48 <xTaskResumeAll+0x130>)
 810feee:	2201      	movs	r2, #1
 810fef0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810fef2:	687b      	ldr	r3, [r7, #4]
 810fef4:	3b01      	subs	r3, #1
 810fef6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810fef8:	687b      	ldr	r3, [r7, #4]
 810fefa:	2b00      	cmp	r3, #0
 810fefc:	d1f1      	bne.n	810fee2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 810fefe:	4b13      	ldr	r3, [pc, #76]	; (810ff4c <xTaskResumeAll+0x134>)
 810ff00:	2200      	movs	r2, #0
 810ff02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810ff04:	4b10      	ldr	r3, [pc, #64]	; (810ff48 <xTaskResumeAll+0x130>)
 810ff06:	681b      	ldr	r3, [r3, #0]
 810ff08:	2b00      	cmp	r3, #0
 810ff0a:	d009      	beq.n	810ff20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810ff0c:	2301      	movs	r3, #1
 810ff0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810ff10:	4b0f      	ldr	r3, [pc, #60]	; (810ff50 <xTaskResumeAll+0x138>)
 810ff12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ff16:	601a      	str	r2, [r3, #0]
 810ff18:	f3bf 8f4f 	dsb	sy
 810ff1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810ff20:	f7fe fe98 	bl	810ec54 <vPortExitCritical>

	return xAlreadyYielded;
 810ff24:	68bb      	ldr	r3, [r7, #8]
}
 810ff26:	4618      	mov	r0, r3
 810ff28:	3710      	adds	r7, #16
 810ff2a:	46bd      	mov	sp, r7
 810ff2c:	bd80      	pop	{r7, pc}
 810ff2e:	bf00      	nop
 810ff30:	100049f4 	.word	0x100049f4
 810ff34:	100049cc 	.word	0x100049cc
 810ff38:	1000498c 	.word	0x1000498c
 810ff3c:	100049d4 	.word	0x100049d4
 810ff40:	100044fc 	.word	0x100044fc
 810ff44:	100044f8 	.word	0x100044f8
 810ff48:	100049e0 	.word	0x100049e0
 810ff4c:	100049dc 	.word	0x100049dc
 810ff50:	e000ed04 	.word	0xe000ed04

0810ff54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810ff54:	b480      	push	{r7}
 810ff56:	b083      	sub	sp, #12
 810ff58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810ff5a:	4b05      	ldr	r3, [pc, #20]	; (810ff70 <xTaskGetTickCount+0x1c>)
 810ff5c:	681b      	ldr	r3, [r3, #0]
 810ff5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810ff60:	687b      	ldr	r3, [r7, #4]
}
 810ff62:	4618      	mov	r0, r3
 810ff64:	370c      	adds	r7, #12
 810ff66:	46bd      	mov	sp, r7
 810ff68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ff6c:	4770      	bx	lr
 810ff6e:	bf00      	nop
 810ff70:	100049d0 	.word	0x100049d0

0810ff74 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810ff74:	b580      	push	{r7, lr}
 810ff76:	b082      	sub	sp, #8
 810ff78:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810ff7a:	f7fe ff1d 	bl	810edb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810ff7e:	2300      	movs	r3, #0
 810ff80:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810ff82:	4b04      	ldr	r3, [pc, #16]	; (810ff94 <xTaskGetTickCountFromISR+0x20>)
 810ff84:	681b      	ldr	r3, [r3, #0]
 810ff86:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810ff88:	683b      	ldr	r3, [r7, #0]
}
 810ff8a:	4618      	mov	r0, r3
 810ff8c:	3708      	adds	r7, #8
 810ff8e:	46bd      	mov	sp, r7
 810ff90:	bd80      	pop	{r7, pc}
 810ff92:	bf00      	nop
 810ff94:	100049d0 	.word	0x100049d0

0810ff98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810ff98:	b580      	push	{r7, lr}
 810ff9a:	b086      	sub	sp, #24
 810ff9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810ff9e:	2300      	movs	r3, #0
 810ffa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810ffa2:	4b4f      	ldr	r3, [pc, #316]	; (81100e0 <xTaskIncrementTick+0x148>)
 810ffa4:	681b      	ldr	r3, [r3, #0]
 810ffa6:	2b00      	cmp	r3, #0
 810ffa8:	f040 808f 	bne.w	81100ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810ffac:	4b4d      	ldr	r3, [pc, #308]	; (81100e4 <xTaskIncrementTick+0x14c>)
 810ffae:	681b      	ldr	r3, [r3, #0]
 810ffb0:	3301      	adds	r3, #1
 810ffb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810ffb4:	4a4b      	ldr	r2, [pc, #300]	; (81100e4 <xTaskIncrementTick+0x14c>)
 810ffb6:	693b      	ldr	r3, [r7, #16]
 810ffb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810ffba:	693b      	ldr	r3, [r7, #16]
 810ffbc:	2b00      	cmp	r3, #0
 810ffbe:	d120      	bne.n	8110002 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 810ffc0:	4b49      	ldr	r3, [pc, #292]	; (81100e8 <xTaskIncrementTick+0x150>)
 810ffc2:	681b      	ldr	r3, [r3, #0]
 810ffc4:	681b      	ldr	r3, [r3, #0]
 810ffc6:	2b00      	cmp	r3, #0
 810ffc8:	d00a      	beq.n	810ffe0 <xTaskIncrementTick+0x48>
	__asm volatile
 810ffca:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ffce:	f383 8811 	msr	BASEPRI, r3
 810ffd2:	f3bf 8f6f 	isb	sy
 810ffd6:	f3bf 8f4f 	dsb	sy
 810ffda:	603b      	str	r3, [r7, #0]
}
 810ffdc:	bf00      	nop
 810ffde:	e7fe      	b.n	810ffde <xTaskIncrementTick+0x46>
 810ffe0:	4b41      	ldr	r3, [pc, #260]	; (81100e8 <xTaskIncrementTick+0x150>)
 810ffe2:	681b      	ldr	r3, [r3, #0]
 810ffe4:	60fb      	str	r3, [r7, #12]
 810ffe6:	4b41      	ldr	r3, [pc, #260]	; (81100ec <xTaskIncrementTick+0x154>)
 810ffe8:	681b      	ldr	r3, [r3, #0]
 810ffea:	4a3f      	ldr	r2, [pc, #252]	; (81100e8 <xTaskIncrementTick+0x150>)
 810ffec:	6013      	str	r3, [r2, #0]
 810ffee:	4a3f      	ldr	r2, [pc, #252]	; (81100ec <xTaskIncrementTick+0x154>)
 810fff0:	68fb      	ldr	r3, [r7, #12]
 810fff2:	6013      	str	r3, [r2, #0]
 810fff4:	4b3e      	ldr	r3, [pc, #248]	; (81100f0 <xTaskIncrementTick+0x158>)
 810fff6:	681b      	ldr	r3, [r3, #0]
 810fff8:	3301      	adds	r3, #1
 810fffa:	4a3d      	ldr	r2, [pc, #244]	; (81100f0 <xTaskIncrementTick+0x158>)
 810fffc:	6013      	str	r3, [r2, #0]
 810fffe:	f000 fad1 	bl	81105a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8110002:	4b3c      	ldr	r3, [pc, #240]	; (81100f4 <xTaskIncrementTick+0x15c>)
 8110004:	681b      	ldr	r3, [r3, #0]
 8110006:	693a      	ldr	r2, [r7, #16]
 8110008:	429a      	cmp	r2, r3
 811000a:	d349      	bcc.n	81100a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 811000c:	4b36      	ldr	r3, [pc, #216]	; (81100e8 <xTaskIncrementTick+0x150>)
 811000e:	681b      	ldr	r3, [r3, #0]
 8110010:	681b      	ldr	r3, [r3, #0]
 8110012:	2b00      	cmp	r3, #0
 8110014:	d104      	bne.n	8110020 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110016:	4b37      	ldr	r3, [pc, #220]	; (81100f4 <xTaskIncrementTick+0x15c>)
 8110018:	f04f 32ff 	mov.w	r2, #4294967295
 811001c:	601a      	str	r2, [r3, #0]
					break;
 811001e:	e03f      	b.n	81100a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110020:	4b31      	ldr	r3, [pc, #196]	; (81100e8 <xTaskIncrementTick+0x150>)
 8110022:	681b      	ldr	r3, [r3, #0]
 8110024:	68db      	ldr	r3, [r3, #12]
 8110026:	68db      	ldr	r3, [r3, #12]
 8110028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 811002a:	68bb      	ldr	r3, [r7, #8]
 811002c:	685b      	ldr	r3, [r3, #4]
 811002e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8110030:	693a      	ldr	r2, [r7, #16]
 8110032:	687b      	ldr	r3, [r7, #4]
 8110034:	429a      	cmp	r2, r3
 8110036:	d203      	bcs.n	8110040 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8110038:	4a2e      	ldr	r2, [pc, #184]	; (81100f4 <xTaskIncrementTick+0x15c>)
 811003a:	687b      	ldr	r3, [r7, #4]
 811003c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 811003e:	e02f      	b.n	81100a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8110040:	68bb      	ldr	r3, [r7, #8]
 8110042:	3304      	adds	r3, #4
 8110044:	4618      	mov	r0, r3
 8110046:	f7fe fc81 	bl	810e94c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 811004a:	68bb      	ldr	r3, [r7, #8]
 811004c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811004e:	2b00      	cmp	r3, #0
 8110050:	d004      	beq.n	811005c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8110052:	68bb      	ldr	r3, [r7, #8]
 8110054:	3318      	adds	r3, #24
 8110056:	4618      	mov	r0, r3
 8110058:	f7fe fc78 	bl	810e94c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 811005c:	68bb      	ldr	r3, [r7, #8]
 811005e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8110060:	4b25      	ldr	r3, [pc, #148]	; (81100f8 <xTaskIncrementTick+0x160>)
 8110062:	681b      	ldr	r3, [r3, #0]
 8110064:	429a      	cmp	r2, r3
 8110066:	d903      	bls.n	8110070 <xTaskIncrementTick+0xd8>
 8110068:	68bb      	ldr	r3, [r7, #8]
 811006a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 811006c:	4a22      	ldr	r2, [pc, #136]	; (81100f8 <xTaskIncrementTick+0x160>)
 811006e:	6013      	str	r3, [r2, #0]
 8110070:	68bb      	ldr	r3, [r7, #8]
 8110072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8110074:	4613      	mov	r3, r2
 8110076:	009b      	lsls	r3, r3, #2
 8110078:	4413      	add	r3, r2
 811007a:	009b      	lsls	r3, r3, #2
 811007c:	4a1f      	ldr	r2, [pc, #124]	; (81100fc <xTaskIncrementTick+0x164>)
 811007e:	441a      	add	r2, r3
 8110080:	68bb      	ldr	r3, [r7, #8]
 8110082:	3304      	adds	r3, #4
 8110084:	4619      	mov	r1, r3
 8110086:	4610      	mov	r0, r2
 8110088:	f7fe fc03 	bl	810e892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 811008c:	68bb      	ldr	r3, [r7, #8]
 811008e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8110090:	4b1b      	ldr	r3, [pc, #108]	; (8110100 <xTaskIncrementTick+0x168>)
 8110092:	681b      	ldr	r3, [r3, #0]
 8110094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8110096:	429a      	cmp	r2, r3
 8110098:	d3b8      	bcc.n	811000c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 811009a:	2301      	movs	r3, #1
 811009c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 811009e:	e7b5      	b.n	811000c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81100a0:	4b17      	ldr	r3, [pc, #92]	; (8110100 <xTaskIncrementTick+0x168>)
 81100a2:	681b      	ldr	r3, [r3, #0]
 81100a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81100a6:	4915      	ldr	r1, [pc, #84]	; (81100fc <xTaskIncrementTick+0x164>)
 81100a8:	4613      	mov	r3, r2
 81100aa:	009b      	lsls	r3, r3, #2
 81100ac:	4413      	add	r3, r2
 81100ae:	009b      	lsls	r3, r3, #2
 81100b0:	440b      	add	r3, r1
 81100b2:	681b      	ldr	r3, [r3, #0]
 81100b4:	2b01      	cmp	r3, #1
 81100b6:	d901      	bls.n	81100bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 81100b8:	2301      	movs	r3, #1
 81100ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81100bc:	4b11      	ldr	r3, [pc, #68]	; (8110104 <xTaskIncrementTick+0x16c>)
 81100be:	681b      	ldr	r3, [r3, #0]
 81100c0:	2b00      	cmp	r3, #0
 81100c2:	d007      	beq.n	81100d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 81100c4:	2301      	movs	r3, #1
 81100c6:	617b      	str	r3, [r7, #20]
 81100c8:	e004      	b.n	81100d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81100ca:	4b0f      	ldr	r3, [pc, #60]	; (8110108 <xTaskIncrementTick+0x170>)
 81100cc:	681b      	ldr	r3, [r3, #0]
 81100ce:	3301      	adds	r3, #1
 81100d0:	4a0d      	ldr	r2, [pc, #52]	; (8110108 <xTaskIncrementTick+0x170>)
 81100d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81100d4:	697b      	ldr	r3, [r7, #20]
}
 81100d6:	4618      	mov	r0, r3
 81100d8:	3718      	adds	r7, #24
 81100da:	46bd      	mov	sp, r7
 81100dc:	bd80      	pop	{r7, pc}
 81100de:	bf00      	nop
 81100e0:	100049f4 	.word	0x100049f4
 81100e4:	100049d0 	.word	0x100049d0
 81100e8:	10004984 	.word	0x10004984
 81100ec:	10004988 	.word	0x10004988
 81100f0:	100049e4 	.word	0x100049e4
 81100f4:	100049ec 	.word	0x100049ec
 81100f8:	100049d4 	.word	0x100049d4
 81100fc:	100044fc 	.word	0x100044fc
 8110100:	100044f8 	.word	0x100044f8
 8110104:	100049e0 	.word	0x100049e0
 8110108:	100049dc 	.word	0x100049dc

0811010c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 811010c:	b480      	push	{r7}
 811010e:	b085      	sub	sp, #20
 8110110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8110112:	4b28      	ldr	r3, [pc, #160]	; (81101b4 <vTaskSwitchContext+0xa8>)
 8110114:	681b      	ldr	r3, [r3, #0]
 8110116:	2b00      	cmp	r3, #0
 8110118:	d003      	beq.n	8110122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 811011a:	4b27      	ldr	r3, [pc, #156]	; (81101b8 <vTaskSwitchContext+0xac>)
 811011c:	2201      	movs	r2, #1
 811011e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8110120:	e041      	b.n	81101a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8110122:	4b25      	ldr	r3, [pc, #148]	; (81101b8 <vTaskSwitchContext+0xac>)
 8110124:	2200      	movs	r2, #0
 8110126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110128:	4b24      	ldr	r3, [pc, #144]	; (81101bc <vTaskSwitchContext+0xb0>)
 811012a:	681b      	ldr	r3, [r3, #0]
 811012c:	60fb      	str	r3, [r7, #12]
 811012e:	e010      	b.n	8110152 <vTaskSwitchContext+0x46>
 8110130:	68fb      	ldr	r3, [r7, #12]
 8110132:	2b00      	cmp	r3, #0
 8110134:	d10a      	bne.n	811014c <vTaskSwitchContext+0x40>
	__asm volatile
 8110136:	f04f 0350 	mov.w	r3, #80	; 0x50
 811013a:	f383 8811 	msr	BASEPRI, r3
 811013e:	f3bf 8f6f 	isb	sy
 8110142:	f3bf 8f4f 	dsb	sy
 8110146:	607b      	str	r3, [r7, #4]
}
 8110148:	bf00      	nop
 811014a:	e7fe      	b.n	811014a <vTaskSwitchContext+0x3e>
 811014c:	68fb      	ldr	r3, [r7, #12]
 811014e:	3b01      	subs	r3, #1
 8110150:	60fb      	str	r3, [r7, #12]
 8110152:	491b      	ldr	r1, [pc, #108]	; (81101c0 <vTaskSwitchContext+0xb4>)
 8110154:	68fa      	ldr	r2, [r7, #12]
 8110156:	4613      	mov	r3, r2
 8110158:	009b      	lsls	r3, r3, #2
 811015a:	4413      	add	r3, r2
 811015c:	009b      	lsls	r3, r3, #2
 811015e:	440b      	add	r3, r1
 8110160:	681b      	ldr	r3, [r3, #0]
 8110162:	2b00      	cmp	r3, #0
 8110164:	d0e4      	beq.n	8110130 <vTaskSwitchContext+0x24>
 8110166:	68fa      	ldr	r2, [r7, #12]
 8110168:	4613      	mov	r3, r2
 811016a:	009b      	lsls	r3, r3, #2
 811016c:	4413      	add	r3, r2
 811016e:	009b      	lsls	r3, r3, #2
 8110170:	4a13      	ldr	r2, [pc, #76]	; (81101c0 <vTaskSwitchContext+0xb4>)
 8110172:	4413      	add	r3, r2
 8110174:	60bb      	str	r3, [r7, #8]
 8110176:	68bb      	ldr	r3, [r7, #8]
 8110178:	685b      	ldr	r3, [r3, #4]
 811017a:	685a      	ldr	r2, [r3, #4]
 811017c:	68bb      	ldr	r3, [r7, #8]
 811017e:	605a      	str	r2, [r3, #4]
 8110180:	68bb      	ldr	r3, [r7, #8]
 8110182:	685a      	ldr	r2, [r3, #4]
 8110184:	68bb      	ldr	r3, [r7, #8]
 8110186:	3308      	adds	r3, #8
 8110188:	429a      	cmp	r2, r3
 811018a:	d104      	bne.n	8110196 <vTaskSwitchContext+0x8a>
 811018c:	68bb      	ldr	r3, [r7, #8]
 811018e:	685b      	ldr	r3, [r3, #4]
 8110190:	685a      	ldr	r2, [r3, #4]
 8110192:	68bb      	ldr	r3, [r7, #8]
 8110194:	605a      	str	r2, [r3, #4]
 8110196:	68bb      	ldr	r3, [r7, #8]
 8110198:	685b      	ldr	r3, [r3, #4]
 811019a:	68db      	ldr	r3, [r3, #12]
 811019c:	4a09      	ldr	r2, [pc, #36]	; (81101c4 <vTaskSwitchContext+0xb8>)
 811019e:	6013      	str	r3, [r2, #0]
 81101a0:	4a06      	ldr	r2, [pc, #24]	; (81101bc <vTaskSwitchContext+0xb0>)
 81101a2:	68fb      	ldr	r3, [r7, #12]
 81101a4:	6013      	str	r3, [r2, #0]
}
 81101a6:	bf00      	nop
 81101a8:	3714      	adds	r7, #20
 81101aa:	46bd      	mov	sp, r7
 81101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81101b0:	4770      	bx	lr
 81101b2:	bf00      	nop
 81101b4:	100049f4 	.word	0x100049f4
 81101b8:	100049e0 	.word	0x100049e0
 81101bc:	100049d4 	.word	0x100049d4
 81101c0:	100044fc 	.word	0x100044fc
 81101c4:	100044f8 	.word	0x100044f8

081101c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81101c8:	b580      	push	{r7, lr}
 81101ca:	b084      	sub	sp, #16
 81101cc:	af00      	add	r7, sp, #0
 81101ce:	6078      	str	r0, [r7, #4]
 81101d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 81101d2:	687b      	ldr	r3, [r7, #4]
 81101d4:	2b00      	cmp	r3, #0
 81101d6:	d10a      	bne.n	81101ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 81101d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81101dc:	f383 8811 	msr	BASEPRI, r3
 81101e0:	f3bf 8f6f 	isb	sy
 81101e4:	f3bf 8f4f 	dsb	sy
 81101e8:	60fb      	str	r3, [r7, #12]
}
 81101ea:	bf00      	nop
 81101ec:	e7fe      	b.n	81101ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81101ee:	4b07      	ldr	r3, [pc, #28]	; (811020c <vTaskPlaceOnEventList+0x44>)
 81101f0:	681b      	ldr	r3, [r3, #0]
 81101f2:	3318      	adds	r3, #24
 81101f4:	4619      	mov	r1, r3
 81101f6:	6878      	ldr	r0, [r7, #4]
 81101f8:	f7fe fb6f 	bl	810e8da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81101fc:	2101      	movs	r1, #1
 81101fe:	6838      	ldr	r0, [r7, #0]
 8110200:	f000 fa7c 	bl	81106fc <prvAddCurrentTaskToDelayedList>
}
 8110204:	bf00      	nop
 8110206:	3710      	adds	r7, #16
 8110208:	46bd      	mov	sp, r7
 811020a:	bd80      	pop	{r7, pc}
 811020c:	100044f8 	.word	0x100044f8

08110210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8110210:	b580      	push	{r7, lr}
 8110212:	b086      	sub	sp, #24
 8110214:	af00      	add	r7, sp, #0
 8110216:	60f8      	str	r0, [r7, #12]
 8110218:	60b9      	str	r1, [r7, #8]
 811021a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 811021c:	68fb      	ldr	r3, [r7, #12]
 811021e:	2b00      	cmp	r3, #0
 8110220:	d10a      	bne.n	8110238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8110222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110226:	f383 8811 	msr	BASEPRI, r3
 811022a:	f3bf 8f6f 	isb	sy
 811022e:	f3bf 8f4f 	dsb	sy
 8110232:	617b      	str	r3, [r7, #20]
}
 8110234:	bf00      	nop
 8110236:	e7fe      	b.n	8110236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8110238:	4b0a      	ldr	r3, [pc, #40]	; (8110264 <vTaskPlaceOnEventListRestricted+0x54>)
 811023a:	681b      	ldr	r3, [r3, #0]
 811023c:	3318      	adds	r3, #24
 811023e:	4619      	mov	r1, r3
 8110240:	68f8      	ldr	r0, [r7, #12]
 8110242:	f7fe fb26 	bl	810e892 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8110246:	687b      	ldr	r3, [r7, #4]
 8110248:	2b00      	cmp	r3, #0
 811024a:	d002      	beq.n	8110252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 811024c:	f04f 33ff 	mov.w	r3, #4294967295
 8110250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8110252:	6879      	ldr	r1, [r7, #4]
 8110254:	68b8      	ldr	r0, [r7, #8]
 8110256:	f000 fa51 	bl	81106fc <prvAddCurrentTaskToDelayedList>
	}
 811025a:	bf00      	nop
 811025c:	3718      	adds	r7, #24
 811025e:	46bd      	mov	sp, r7
 8110260:	bd80      	pop	{r7, pc}
 8110262:	bf00      	nop
 8110264:	100044f8 	.word	0x100044f8

08110268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8110268:	b580      	push	{r7, lr}
 811026a:	b086      	sub	sp, #24
 811026c:	af00      	add	r7, sp, #0
 811026e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110270:	687b      	ldr	r3, [r7, #4]
 8110272:	68db      	ldr	r3, [r3, #12]
 8110274:	68db      	ldr	r3, [r3, #12]
 8110276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8110278:	693b      	ldr	r3, [r7, #16]
 811027a:	2b00      	cmp	r3, #0
 811027c:	d10a      	bne.n	8110294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 811027e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110282:	f383 8811 	msr	BASEPRI, r3
 8110286:	f3bf 8f6f 	isb	sy
 811028a:	f3bf 8f4f 	dsb	sy
 811028e:	60fb      	str	r3, [r7, #12]
}
 8110290:	bf00      	nop
 8110292:	e7fe      	b.n	8110292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8110294:	693b      	ldr	r3, [r7, #16]
 8110296:	3318      	adds	r3, #24
 8110298:	4618      	mov	r0, r3
 811029a:	f7fe fb57 	bl	810e94c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 811029e:	4b1e      	ldr	r3, [pc, #120]	; (8110318 <xTaskRemoveFromEventList+0xb0>)
 81102a0:	681b      	ldr	r3, [r3, #0]
 81102a2:	2b00      	cmp	r3, #0
 81102a4:	d11d      	bne.n	81102e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81102a6:	693b      	ldr	r3, [r7, #16]
 81102a8:	3304      	adds	r3, #4
 81102aa:	4618      	mov	r0, r3
 81102ac:	f7fe fb4e 	bl	810e94c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81102b0:	693b      	ldr	r3, [r7, #16]
 81102b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81102b4:	4b19      	ldr	r3, [pc, #100]	; (811031c <xTaskRemoveFromEventList+0xb4>)
 81102b6:	681b      	ldr	r3, [r3, #0]
 81102b8:	429a      	cmp	r2, r3
 81102ba:	d903      	bls.n	81102c4 <xTaskRemoveFromEventList+0x5c>
 81102bc:	693b      	ldr	r3, [r7, #16]
 81102be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81102c0:	4a16      	ldr	r2, [pc, #88]	; (811031c <xTaskRemoveFromEventList+0xb4>)
 81102c2:	6013      	str	r3, [r2, #0]
 81102c4:	693b      	ldr	r3, [r7, #16]
 81102c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81102c8:	4613      	mov	r3, r2
 81102ca:	009b      	lsls	r3, r3, #2
 81102cc:	4413      	add	r3, r2
 81102ce:	009b      	lsls	r3, r3, #2
 81102d0:	4a13      	ldr	r2, [pc, #76]	; (8110320 <xTaskRemoveFromEventList+0xb8>)
 81102d2:	441a      	add	r2, r3
 81102d4:	693b      	ldr	r3, [r7, #16]
 81102d6:	3304      	adds	r3, #4
 81102d8:	4619      	mov	r1, r3
 81102da:	4610      	mov	r0, r2
 81102dc:	f7fe fad9 	bl	810e892 <vListInsertEnd>
 81102e0:	e005      	b.n	81102ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81102e2:	693b      	ldr	r3, [r7, #16]
 81102e4:	3318      	adds	r3, #24
 81102e6:	4619      	mov	r1, r3
 81102e8:	480e      	ldr	r0, [pc, #56]	; (8110324 <xTaskRemoveFromEventList+0xbc>)
 81102ea:	f7fe fad2 	bl	810e892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81102ee:	693b      	ldr	r3, [r7, #16]
 81102f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81102f2:	4b0d      	ldr	r3, [pc, #52]	; (8110328 <xTaskRemoveFromEventList+0xc0>)
 81102f4:	681b      	ldr	r3, [r3, #0]
 81102f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81102f8:	429a      	cmp	r2, r3
 81102fa:	d905      	bls.n	8110308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81102fc:	2301      	movs	r3, #1
 81102fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8110300:	4b0a      	ldr	r3, [pc, #40]	; (811032c <xTaskRemoveFromEventList+0xc4>)
 8110302:	2201      	movs	r2, #1
 8110304:	601a      	str	r2, [r3, #0]
 8110306:	e001      	b.n	811030c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8110308:	2300      	movs	r3, #0
 811030a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 811030c:	697b      	ldr	r3, [r7, #20]
}
 811030e:	4618      	mov	r0, r3
 8110310:	3718      	adds	r7, #24
 8110312:	46bd      	mov	sp, r7
 8110314:	bd80      	pop	{r7, pc}
 8110316:	bf00      	nop
 8110318:	100049f4 	.word	0x100049f4
 811031c:	100049d4 	.word	0x100049d4
 8110320:	100044fc 	.word	0x100044fc
 8110324:	1000498c 	.word	0x1000498c
 8110328:	100044f8 	.word	0x100044f8
 811032c:	100049e0 	.word	0x100049e0

08110330 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8110330:	b480      	push	{r7}
 8110332:	b083      	sub	sp, #12
 8110334:	af00      	add	r7, sp, #0
 8110336:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8110338:	4b06      	ldr	r3, [pc, #24]	; (8110354 <vTaskInternalSetTimeOutState+0x24>)
 811033a:	681a      	ldr	r2, [r3, #0]
 811033c:	687b      	ldr	r3, [r7, #4]
 811033e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8110340:	4b05      	ldr	r3, [pc, #20]	; (8110358 <vTaskInternalSetTimeOutState+0x28>)
 8110342:	681a      	ldr	r2, [r3, #0]
 8110344:	687b      	ldr	r3, [r7, #4]
 8110346:	605a      	str	r2, [r3, #4]
}
 8110348:	bf00      	nop
 811034a:	370c      	adds	r7, #12
 811034c:	46bd      	mov	sp, r7
 811034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110352:	4770      	bx	lr
 8110354:	100049e4 	.word	0x100049e4
 8110358:	100049d0 	.word	0x100049d0

0811035c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 811035c:	b580      	push	{r7, lr}
 811035e:	b088      	sub	sp, #32
 8110360:	af00      	add	r7, sp, #0
 8110362:	6078      	str	r0, [r7, #4]
 8110364:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8110366:	687b      	ldr	r3, [r7, #4]
 8110368:	2b00      	cmp	r3, #0
 811036a:	d10a      	bne.n	8110382 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 811036c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110370:	f383 8811 	msr	BASEPRI, r3
 8110374:	f3bf 8f6f 	isb	sy
 8110378:	f3bf 8f4f 	dsb	sy
 811037c:	613b      	str	r3, [r7, #16]
}
 811037e:	bf00      	nop
 8110380:	e7fe      	b.n	8110380 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8110382:	683b      	ldr	r3, [r7, #0]
 8110384:	2b00      	cmp	r3, #0
 8110386:	d10a      	bne.n	811039e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8110388:	f04f 0350 	mov.w	r3, #80	; 0x50
 811038c:	f383 8811 	msr	BASEPRI, r3
 8110390:	f3bf 8f6f 	isb	sy
 8110394:	f3bf 8f4f 	dsb	sy
 8110398:	60fb      	str	r3, [r7, #12]
}
 811039a:	bf00      	nop
 811039c:	e7fe      	b.n	811039c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 811039e:	f7fe fc29 	bl	810ebf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 81103a2:	4b1d      	ldr	r3, [pc, #116]	; (8110418 <xTaskCheckForTimeOut+0xbc>)
 81103a4:	681b      	ldr	r3, [r3, #0]
 81103a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 81103a8:	687b      	ldr	r3, [r7, #4]
 81103aa:	685b      	ldr	r3, [r3, #4]
 81103ac:	69ba      	ldr	r2, [r7, #24]
 81103ae:	1ad3      	subs	r3, r2, r3
 81103b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 81103b2:	683b      	ldr	r3, [r7, #0]
 81103b4:	681b      	ldr	r3, [r3, #0]
 81103b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81103ba:	d102      	bne.n	81103c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81103bc:	2300      	movs	r3, #0
 81103be:	61fb      	str	r3, [r7, #28]
 81103c0:	e023      	b.n	811040a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 81103c2:	687b      	ldr	r3, [r7, #4]
 81103c4:	681a      	ldr	r2, [r3, #0]
 81103c6:	4b15      	ldr	r3, [pc, #84]	; (811041c <xTaskCheckForTimeOut+0xc0>)
 81103c8:	681b      	ldr	r3, [r3, #0]
 81103ca:	429a      	cmp	r2, r3
 81103cc:	d007      	beq.n	81103de <xTaskCheckForTimeOut+0x82>
 81103ce:	687b      	ldr	r3, [r7, #4]
 81103d0:	685b      	ldr	r3, [r3, #4]
 81103d2:	69ba      	ldr	r2, [r7, #24]
 81103d4:	429a      	cmp	r2, r3
 81103d6:	d302      	bcc.n	81103de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81103d8:	2301      	movs	r3, #1
 81103da:	61fb      	str	r3, [r7, #28]
 81103dc:	e015      	b.n	811040a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81103de:	683b      	ldr	r3, [r7, #0]
 81103e0:	681b      	ldr	r3, [r3, #0]
 81103e2:	697a      	ldr	r2, [r7, #20]
 81103e4:	429a      	cmp	r2, r3
 81103e6:	d20b      	bcs.n	8110400 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81103e8:	683b      	ldr	r3, [r7, #0]
 81103ea:	681a      	ldr	r2, [r3, #0]
 81103ec:	697b      	ldr	r3, [r7, #20]
 81103ee:	1ad2      	subs	r2, r2, r3
 81103f0:	683b      	ldr	r3, [r7, #0]
 81103f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81103f4:	6878      	ldr	r0, [r7, #4]
 81103f6:	f7ff ff9b 	bl	8110330 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81103fa:	2300      	movs	r3, #0
 81103fc:	61fb      	str	r3, [r7, #28]
 81103fe:	e004      	b.n	811040a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8110400:	683b      	ldr	r3, [r7, #0]
 8110402:	2200      	movs	r2, #0
 8110404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8110406:	2301      	movs	r3, #1
 8110408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 811040a:	f7fe fc23 	bl	810ec54 <vPortExitCritical>

	return xReturn;
 811040e:	69fb      	ldr	r3, [r7, #28]
}
 8110410:	4618      	mov	r0, r3
 8110412:	3720      	adds	r7, #32
 8110414:	46bd      	mov	sp, r7
 8110416:	bd80      	pop	{r7, pc}
 8110418:	100049d0 	.word	0x100049d0
 811041c:	100049e4 	.word	0x100049e4

08110420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8110420:	b480      	push	{r7}
 8110422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8110424:	4b03      	ldr	r3, [pc, #12]	; (8110434 <vTaskMissedYield+0x14>)
 8110426:	2201      	movs	r2, #1
 8110428:	601a      	str	r2, [r3, #0]
}
 811042a:	bf00      	nop
 811042c:	46bd      	mov	sp, r7
 811042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110432:	4770      	bx	lr
 8110434:	100049e0 	.word	0x100049e0

08110438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8110438:	b580      	push	{r7, lr}
 811043a:	b082      	sub	sp, #8
 811043c:	af00      	add	r7, sp, #0
 811043e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8110440:	f000 f852 	bl	81104e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8110444:	4b06      	ldr	r3, [pc, #24]	; (8110460 <prvIdleTask+0x28>)
 8110446:	681b      	ldr	r3, [r3, #0]
 8110448:	2b01      	cmp	r3, #1
 811044a:	d9f9      	bls.n	8110440 <prvIdleTask+0x8>
			{
				taskYIELD();
 811044c:	4b05      	ldr	r3, [pc, #20]	; (8110464 <prvIdleTask+0x2c>)
 811044e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8110452:	601a      	str	r2, [r3, #0]
 8110454:	f3bf 8f4f 	dsb	sy
 8110458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 811045c:	e7f0      	b.n	8110440 <prvIdleTask+0x8>
 811045e:	bf00      	nop
 8110460:	100044fc 	.word	0x100044fc
 8110464:	e000ed04 	.word	0xe000ed04

08110468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8110468:	b580      	push	{r7, lr}
 811046a:	b082      	sub	sp, #8
 811046c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 811046e:	2300      	movs	r3, #0
 8110470:	607b      	str	r3, [r7, #4]
 8110472:	e00c      	b.n	811048e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8110474:	687a      	ldr	r2, [r7, #4]
 8110476:	4613      	mov	r3, r2
 8110478:	009b      	lsls	r3, r3, #2
 811047a:	4413      	add	r3, r2
 811047c:	009b      	lsls	r3, r3, #2
 811047e:	4a12      	ldr	r2, [pc, #72]	; (81104c8 <prvInitialiseTaskLists+0x60>)
 8110480:	4413      	add	r3, r2
 8110482:	4618      	mov	r0, r3
 8110484:	f7fe f9d8 	bl	810e838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8110488:	687b      	ldr	r3, [r7, #4]
 811048a:	3301      	adds	r3, #1
 811048c:	607b      	str	r3, [r7, #4]
 811048e:	687b      	ldr	r3, [r7, #4]
 8110490:	2b37      	cmp	r3, #55	; 0x37
 8110492:	d9ef      	bls.n	8110474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8110494:	480d      	ldr	r0, [pc, #52]	; (81104cc <prvInitialiseTaskLists+0x64>)
 8110496:	f7fe f9cf 	bl	810e838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 811049a:	480d      	ldr	r0, [pc, #52]	; (81104d0 <prvInitialiseTaskLists+0x68>)
 811049c:	f7fe f9cc 	bl	810e838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 81104a0:	480c      	ldr	r0, [pc, #48]	; (81104d4 <prvInitialiseTaskLists+0x6c>)
 81104a2:	f7fe f9c9 	bl	810e838 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 81104a6:	480c      	ldr	r0, [pc, #48]	; (81104d8 <prvInitialiseTaskLists+0x70>)
 81104a8:	f7fe f9c6 	bl	810e838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 81104ac:	480b      	ldr	r0, [pc, #44]	; (81104dc <prvInitialiseTaskLists+0x74>)
 81104ae:	f7fe f9c3 	bl	810e838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 81104b2:	4b0b      	ldr	r3, [pc, #44]	; (81104e0 <prvInitialiseTaskLists+0x78>)
 81104b4:	4a05      	ldr	r2, [pc, #20]	; (81104cc <prvInitialiseTaskLists+0x64>)
 81104b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 81104b8:	4b0a      	ldr	r3, [pc, #40]	; (81104e4 <prvInitialiseTaskLists+0x7c>)
 81104ba:	4a05      	ldr	r2, [pc, #20]	; (81104d0 <prvInitialiseTaskLists+0x68>)
 81104bc:	601a      	str	r2, [r3, #0]
}
 81104be:	bf00      	nop
 81104c0:	3708      	adds	r7, #8
 81104c2:	46bd      	mov	sp, r7
 81104c4:	bd80      	pop	{r7, pc}
 81104c6:	bf00      	nop
 81104c8:	100044fc 	.word	0x100044fc
 81104cc:	1000495c 	.word	0x1000495c
 81104d0:	10004970 	.word	0x10004970
 81104d4:	1000498c 	.word	0x1000498c
 81104d8:	100049a0 	.word	0x100049a0
 81104dc:	100049b8 	.word	0x100049b8
 81104e0:	10004984 	.word	0x10004984
 81104e4:	10004988 	.word	0x10004988

081104e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81104e8:	b580      	push	{r7, lr}
 81104ea:	b082      	sub	sp, #8
 81104ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81104ee:	e019      	b.n	8110524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81104f0:	f7fe fb80 	bl	810ebf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81104f4:	4b10      	ldr	r3, [pc, #64]	; (8110538 <prvCheckTasksWaitingTermination+0x50>)
 81104f6:	68db      	ldr	r3, [r3, #12]
 81104f8:	68db      	ldr	r3, [r3, #12]
 81104fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81104fc:	687b      	ldr	r3, [r7, #4]
 81104fe:	3304      	adds	r3, #4
 8110500:	4618      	mov	r0, r3
 8110502:	f7fe fa23 	bl	810e94c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8110506:	4b0d      	ldr	r3, [pc, #52]	; (811053c <prvCheckTasksWaitingTermination+0x54>)
 8110508:	681b      	ldr	r3, [r3, #0]
 811050a:	3b01      	subs	r3, #1
 811050c:	4a0b      	ldr	r2, [pc, #44]	; (811053c <prvCheckTasksWaitingTermination+0x54>)
 811050e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8110510:	4b0b      	ldr	r3, [pc, #44]	; (8110540 <prvCheckTasksWaitingTermination+0x58>)
 8110512:	681b      	ldr	r3, [r3, #0]
 8110514:	3b01      	subs	r3, #1
 8110516:	4a0a      	ldr	r2, [pc, #40]	; (8110540 <prvCheckTasksWaitingTermination+0x58>)
 8110518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 811051a:	f7fe fb9b 	bl	810ec54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 811051e:	6878      	ldr	r0, [r7, #4]
 8110520:	f000 f810 	bl	8110544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8110524:	4b06      	ldr	r3, [pc, #24]	; (8110540 <prvCheckTasksWaitingTermination+0x58>)
 8110526:	681b      	ldr	r3, [r3, #0]
 8110528:	2b00      	cmp	r3, #0
 811052a:	d1e1      	bne.n	81104f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 811052c:	bf00      	nop
 811052e:	bf00      	nop
 8110530:	3708      	adds	r7, #8
 8110532:	46bd      	mov	sp, r7
 8110534:	bd80      	pop	{r7, pc}
 8110536:	bf00      	nop
 8110538:	100049a0 	.word	0x100049a0
 811053c:	100049cc 	.word	0x100049cc
 8110540:	100049b4 	.word	0x100049b4

08110544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8110544:	b580      	push	{r7, lr}
 8110546:	b084      	sub	sp, #16
 8110548:	af00      	add	r7, sp, #0
 811054a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 811054c:	687b      	ldr	r3, [r7, #4]
 811054e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8110552:	2b00      	cmp	r3, #0
 8110554:	d108      	bne.n	8110568 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8110556:	687b      	ldr	r3, [r7, #4]
 8110558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 811055a:	4618      	mov	r0, r3
 811055c:	f7fe f84e 	bl	810e5fc <vPortFree>
				vPortFree( pxTCB );
 8110560:	6878      	ldr	r0, [r7, #4]
 8110562:	f7fe f84b 	bl	810e5fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8110566:	e018      	b.n	811059a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8110568:	687b      	ldr	r3, [r7, #4]
 811056a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 811056e:	2b01      	cmp	r3, #1
 8110570:	d103      	bne.n	811057a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8110572:	6878      	ldr	r0, [r7, #4]
 8110574:	f7fe f842 	bl	810e5fc <vPortFree>
	}
 8110578:	e00f      	b.n	811059a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 811057a:	687b      	ldr	r3, [r7, #4]
 811057c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8110580:	2b02      	cmp	r3, #2
 8110582:	d00a      	beq.n	811059a <prvDeleteTCB+0x56>
	__asm volatile
 8110584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110588:	f383 8811 	msr	BASEPRI, r3
 811058c:	f3bf 8f6f 	isb	sy
 8110590:	f3bf 8f4f 	dsb	sy
 8110594:	60fb      	str	r3, [r7, #12]
}
 8110596:	bf00      	nop
 8110598:	e7fe      	b.n	8110598 <prvDeleteTCB+0x54>
	}
 811059a:	bf00      	nop
 811059c:	3710      	adds	r7, #16
 811059e:	46bd      	mov	sp, r7
 81105a0:	bd80      	pop	{r7, pc}
	...

081105a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81105a4:	b480      	push	{r7}
 81105a6:	b083      	sub	sp, #12
 81105a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81105aa:	4b0c      	ldr	r3, [pc, #48]	; (81105dc <prvResetNextTaskUnblockTime+0x38>)
 81105ac:	681b      	ldr	r3, [r3, #0]
 81105ae:	681b      	ldr	r3, [r3, #0]
 81105b0:	2b00      	cmp	r3, #0
 81105b2:	d104      	bne.n	81105be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81105b4:	4b0a      	ldr	r3, [pc, #40]	; (81105e0 <prvResetNextTaskUnblockTime+0x3c>)
 81105b6:	f04f 32ff 	mov.w	r2, #4294967295
 81105ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81105bc:	e008      	b.n	81105d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81105be:	4b07      	ldr	r3, [pc, #28]	; (81105dc <prvResetNextTaskUnblockTime+0x38>)
 81105c0:	681b      	ldr	r3, [r3, #0]
 81105c2:	68db      	ldr	r3, [r3, #12]
 81105c4:	68db      	ldr	r3, [r3, #12]
 81105c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81105c8:	687b      	ldr	r3, [r7, #4]
 81105ca:	685b      	ldr	r3, [r3, #4]
 81105cc:	4a04      	ldr	r2, [pc, #16]	; (81105e0 <prvResetNextTaskUnblockTime+0x3c>)
 81105ce:	6013      	str	r3, [r2, #0]
}
 81105d0:	bf00      	nop
 81105d2:	370c      	adds	r7, #12
 81105d4:	46bd      	mov	sp, r7
 81105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81105da:	4770      	bx	lr
 81105dc:	10004984 	.word	0x10004984
 81105e0:	100049ec 	.word	0x100049ec

081105e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81105e4:	b480      	push	{r7}
 81105e6:	b083      	sub	sp, #12
 81105e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81105ea:	4b0b      	ldr	r3, [pc, #44]	; (8110618 <xTaskGetSchedulerState+0x34>)
 81105ec:	681b      	ldr	r3, [r3, #0]
 81105ee:	2b00      	cmp	r3, #0
 81105f0:	d102      	bne.n	81105f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81105f2:	2301      	movs	r3, #1
 81105f4:	607b      	str	r3, [r7, #4]
 81105f6:	e008      	b.n	811060a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81105f8:	4b08      	ldr	r3, [pc, #32]	; (811061c <xTaskGetSchedulerState+0x38>)
 81105fa:	681b      	ldr	r3, [r3, #0]
 81105fc:	2b00      	cmp	r3, #0
 81105fe:	d102      	bne.n	8110606 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8110600:	2302      	movs	r3, #2
 8110602:	607b      	str	r3, [r7, #4]
 8110604:	e001      	b.n	811060a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8110606:	2300      	movs	r3, #0
 8110608:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 811060a:	687b      	ldr	r3, [r7, #4]
	}
 811060c:	4618      	mov	r0, r3
 811060e:	370c      	adds	r7, #12
 8110610:	46bd      	mov	sp, r7
 8110612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110616:	4770      	bx	lr
 8110618:	100049d8 	.word	0x100049d8
 811061c:	100049f4 	.word	0x100049f4

08110620 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8110620:	b580      	push	{r7, lr}
 8110622:	b086      	sub	sp, #24
 8110624:	af00      	add	r7, sp, #0
 8110626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8110628:	687b      	ldr	r3, [r7, #4]
 811062a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 811062c:	2300      	movs	r3, #0
 811062e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8110630:	687b      	ldr	r3, [r7, #4]
 8110632:	2b00      	cmp	r3, #0
 8110634:	d056      	beq.n	81106e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8110636:	4b2e      	ldr	r3, [pc, #184]	; (81106f0 <xTaskPriorityDisinherit+0xd0>)
 8110638:	681b      	ldr	r3, [r3, #0]
 811063a:	693a      	ldr	r2, [r7, #16]
 811063c:	429a      	cmp	r2, r3
 811063e:	d00a      	beq.n	8110656 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8110640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110644:	f383 8811 	msr	BASEPRI, r3
 8110648:	f3bf 8f6f 	isb	sy
 811064c:	f3bf 8f4f 	dsb	sy
 8110650:	60fb      	str	r3, [r7, #12]
}
 8110652:	bf00      	nop
 8110654:	e7fe      	b.n	8110654 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8110656:	693b      	ldr	r3, [r7, #16]
 8110658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 811065a:	2b00      	cmp	r3, #0
 811065c:	d10a      	bne.n	8110674 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 811065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110662:	f383 8811 	msr	BASEPRI, r3
 8110666:	f3bf 8f6f 	isb	sy
 811066a:	f3bf 8f4f 	dsb	sy
 811066e:	60bb      	str	r3, [r7, #8]
}
 8110670:	bf00      	nop
 8110672:	e7fe      	b.n	8110672 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8110674:	693b      	ldr	r3, [r7, #16]
 8110676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8110678:	1e5a      	subs	r2, r3, #1
 811067a:	693b      	ldr	r3, [r7, #16]
 811067c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 811067e:	693b      	ldr	r3, [r7, #16]
 8110680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8110682:	693b      	ldr	r3, [r7, #16]
 8110684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8110686:	429a      	cmp	r2, r3
 8110688:	d02c      	beq.n	81106e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 811068a:	693b      	ldr	r3, [r7, #16]
 811068c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 811068e:	2b00      	cmp	r3, #0
 8110690:	d128      	bne.n	81106e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8110692:	693b      	ldr	r3, [r7, #16]
 8110694:	3304      	adds	r3, #4
 8110696:	4618      	mov	r0, r3
 8110698:	f7fe f958 	bl	810e94c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 811069c:	693b      	ldr	r3, [r7, #16]
 811069e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81106a0:	693b      	ldr	r3, [r7, #16]
 81106a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81106a4:	693b      	ldr	r3, [r7, #16]
 81106a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81106a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81106ac:	693b      	ldr	r3, [r7, #16]
 81106ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 81106b0:	693b      	ldr	r3, [r7, #16]
 81106b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81106b4:	4b0f      	ldr	r3, [pc, #60]	; (81106f4 <xTaskPriorityDisinherit+0xd4>)
 81106b6:	681b      	ldr	r3, [r3, #0]
 81106b8:	429a      	cmp	r2, r3
 81106ba:	d903      	bls.n	81106c4 <xTaskPriorityDisinherit+0xa4>
 81106bc:	693b      	ldr	r3, [r7, #16]
 81106be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81106c0:	4a0c      	ldr	r2, [pc, #48]	; (81106f4 <xTaskPriorityDisinherit+0xd4>)
 81106c2:	6013      	str	r3, [r2, #0]
 81106c4:	693b      	ldr	r3, [r7, #16]
 81106c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81106c8:	4613      	mov	r3, r2
 81106ca:	009b      	lsls	r3, r3, #2
 81106cc:	4413      	add	r3, r2
 81106ce:	009b      	lsls	r3, r3, #2
 81106d0:	4a09      	ldr	r2, [pc, #36]	; (81106f8 <xTaskPriorityDisinherit+0xd8>)
 81106d2:	441a      	add	r2, r3
 81106d4:	693b      	ldr	r3, [r7, #16]
 81106d6:	3304      	adds	r3, #4
 81106d8:	4619      	mov	r1, r3
 81106da:	4610      	mov	r0, r2
 81106dc:	f7fe f8d9 	bl	810e892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81106e0:	2301      	movs	r3, #1
 81106e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81106e4:	697b      	ldr	r3, [r7, #20]
	}
 81106e6:	4618      	mov	r0, r3
 81106e8:	3718      	adds	r7, #24
 81106ea:	46bd      	mov	sp, r7
 81106ec:	bd80      	pop	{r7, pc}
 81106ee:	bf00      	nop
 81106f0:	100044f8 	.word	0x100044f8
 81106f4:	100049d4 	.word	0x100049d4
 81106f8:	100044fc 	.word	0x100044fc

081106fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81106fc:	b580      	push	{r7, lr}
 81106fe:	b084      	sub	sp, #16
 8110700:	af00      	add	r7, sp, #0
 8110702:	6078      	str	r0, [r7, #4]
 8110704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8110706:	4b21      	ldr	r3, [pc, #132]	; (811078c <prvAddCurrentTaskToDelayedList+0x90>)
 8110708:	681b      	ldr	r3, [r3, #0]
 811070a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 811070c:	4b20      	ldr	r3, [pc, #128]	; (8110790 <prvAddCurrentTaskToDelayedList+0x94>)
 811070e:	681b      	ldr	r3, [r3, #0]
 8110710:	3304      	adds	r3, #4
 8110712:	4618      	mov	r0, r3
 8110714:	f7fe f91a 	bl	810e94c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8110718:	687b      	ldr	r3, [r7, #4]
 811071a:	f1b3 3fff 	cmp.w	r3, #4294967295
 811071e:	d10a      	bne.n	8110736 <prvAddCurrentTaskToDelayedList+0x3a>
 8110720:	683b      	ldr	r3, [r7, #0]
 8110722:	2b00      	cmp	r3, #0
 8110724:	d007      	beq.n	8110736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8110726:	4b1a      	ldr	r3, [pc, #104]	; (8110790 <prvAddCurrentTaskToDelayedList+0x94>)
 8110728:	681b      	ldr	r3, [r3, #0]
 811072a:	3304      	adds	r3, #4
 811072c:	4619      	mov	r1, r3
 811072e:	4819      	ldr	r0, [pc, #100]	; (8110794 <prvAddCurrentTaskToDelayedList+0x98>)
 8110730:	f7fe f8af 	bl	810e892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8110734:	e026      	b.n	8110784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8110736:	68fa      	ldr	r2, [r7, #12]
 8110738:	687b      	ldr	r3, [r7, #4]
 811073a:	4413      	add	r3, r2
 811073c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 811073e:	4b14      	ldr	r3, [pc, #80]	; (8110790 <prvAddCurrentTaskToDelayedList+0x94>)
 8110740:	681b      	ldr	r3, [r3, #0]
 8110742:	68ba      	ldr	r2, [r7, #8]
 8110744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8110746:	68ba      	ldr	r2, [r7, #8]
 8110748:	68fb      	ldr	r3, [r7, #12]
 811074a:	429a      	cmp	r2, r3
 811074c:	d209      	bcs.n	8110762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 811074e:	4b12      	ldr	r3, [pc, #72]	; (8110798 <prvAddCurrentTaskToDelayedList+0x9c>)
 8110750:	681a      	ldr	r2, [r3, #0]
 8110752:	4b0f      	ldr	r3, [pc, #60]	; (8110790 <prvAddCurrentTaskToDelayedList+0x94>)
 8110754:	681b      	ldr	r3, [r3, #0]
 8110756:	3304      	adds	r3, #4
 8110758:	4619      	mov	r1, r3
 811075a:	4610      	mov	r0, r2
 811075c:	f7fe f8bd 	bl	810e8da <vListInsert>
}
 8110760:	e010      	b.n	8110784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8110762:	4b0e      	ldr	r3, [pc, #56]	; (811079c <prvAddCurrentTaskToDelayedList+0xa0>)
 8110764:	681a      	ldr	r2, [r3, #0]
 8110766:	4b0a      	ldr	r3, [pc, #40]	; (8110790 <prvAddCurrentTaskToDelayedList+0x94>)
 8110768:	681b      	ldr	r3, [r3, #0]
 811076a:	3304      	adds	r3, #4
 811076c:	4619      	mov	r1, r3
 811076e:	4610      	mov	r0, r2
 8110770:	f7fe f8b3 	bl	810e8da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8110774:	4b0a      	ldr	r3, [pc, #40]	; (81107a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8110776:	681b      	ldr	r3, [r3, #0]
 8110778:	68ba      	ldr	r2, [r7, #8]
 811077a:	429a      	cmp	r2, r3
 811077c:	d202      	bcs.n	8110784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 811077e:	4a08      	ldr	r2, [pc, #32]	; (81107a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8110780:	68bb      	ldr	r3, [r7, #8]
 8110782:	6013      	str	r3, [r2, #0]
}
 8110784:	bf00      	nop
 8110786:	3710      	adds	r7, #16
 8110788:	46bd      	mov	sp, r7
 811078a:	bd80      	pop	{r7, pc}
 811078c:	100049d0 	.word	0x100049d0
 8110790:	100044f8 	.word	0x100044f8
 8110794:	100049b8 	.word	0x100049b8
 8110798:	10004988 	.word	0x10004988
 811079c:	10004984 	.word	0x10004984
 81107a0:	100049ec 	.word	0x100049ec

081107a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 81107a4:	b580      	push	{r7, lr}
 81107a6:	b08a      	sub	sp, #40	; 0x28
 81107a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 81107aa:	2300      	movs	r3, #0
 81107ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 81107ae:	f000 fb07 	bl	8110dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 81107b2:	4b1c      	ldr	r3, [pc, #112]	; (8110824 <xTimerCreateTimerTask+0x80>)
 81107b4:	681b      	ldr	r3, [r3, #0]
 81107b6:	2b00      	cmp	r3, #0
 81107b8:	d021      	beq.n	81107fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 81107ba:	2300      	movs	r3, #0
 81107bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 81107be:	2300      	movs	r3, #0
 81107c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 81107c2:	1d3a      	adds	r2, r7, #4
 81107c4:	f107 0108 	add.w	r1, r7, #8
 81107c8:	f107 030c 	add.w	r3, r7, #12
 81107cc:	4618      	mov	r0, r3
 81107ce:	f7fd fe2f 	bl	810e430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 81107d2:	6879      	ldr	r1, [r7, #4]
 81107d4:	68bb      	ldr	r3, [r7, #8]
 81107d6:	68fa      	ldr	r2, [r7, #12]
 81107d8:	9202      	str	r2, [sp, #8]
 81107da:	9301      	str	r3, [sp, #4]
 81107dc:	2302      	movs	r3, #2
 81107de:	9300      	str	r3, [sp, #0]
 81107e0:	2300      	movs	r3, #0
 81107e2:	460a      	mov	r2, r1
 81107e4:	4910      	ldr	r1, [pc, #64]	; (8110828 <xTimerCreateTimerTask+0x84>)
 81107e6:	4811      	ldr	r0, [pc, #68]	; (811082c <xTimerCreateTimerTask+0x88>)
 81107e8:	f7ff f8cc 	bl	810f984 <xTaskCreateStatic>
 81107ec:	4603      	mov	r3, r0
 81107ee:	4a10      	ldr	r2, [pc, #64]	; (8110830 <xTimerCreateTimerTask+0x8c>)
 81107f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81107f2:	4b0f      	ldr	r3, [pc, #60]	; (8110830 <xTimerCreateTimerTask+0x8c>)
 81107f4:	681b      	ldr	r3, [r3, #0]
 81107f6:	2b00      	cmp	r3, #0
 81107f8:	d001      	beq.n	81107fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81107fa:	2301      	movs	r3, #1
 81107fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81107fe:	697b      	ldr	r3, [r7, #20]
 8110800:	2b00      	cmp	r3, #0
 8110802:	d10a      	bne.n	811081a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8110804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110808:	f383 8811 	msr	BASEPRI, r3
 811080c:	f3bf 8f6f 	isb	sy
 8110810:	f3bf 8f4f 	dsb	sy
 8110814:	613b      	str	r3, [r7, #16]
}
 8110816:	bf00      	nop
 8110818:	e7fe      	b.n	8110818 <xTimerCreateTimerTask+0x74>
	return xReturn;
 811081a:	697b      	ldr	r3, [r7, #20]
}
 811081c:	4618      	mov	r0, r3
 811081e:	3718      	adds	r7, #24
 8110820:	46bd      	mov	sp, r7
 8110822:	bd80      	pop	{r7, pc}
 8110824:	10004a28 	.word	0x10004a28
 8110828:	08113878 	.word	0x08113878
 811082c:	08110969 	.word	0x08110969
 8110830:	10004a2c 	.word	0x10004a2c

08110834 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8110834:	b580      	push	{r7, lr}
 8110836:	b08a      	sub	sp, #40	; 0x28
 8110838:	af00      	add	r7, sp, #0
 811083a:	60f8      	str	r0, [r7, #12]
 811083c:	60b9      	str	r1, [r7, #8]
 811083e:	607a      	str	r2, [r7, #4]
 8110840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8110842:	2300      	movs	r3, #0
 8110844:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8110846:	68fb      	ldr	r3, [r7, #12]
 8110848:	2b00      	cmp	r3, #0
 811084a:	d10a      	bne.n	8110862 <xTimerGenericCommand+0x2e>
	__asm volatile
 811084c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110850:	f383 8811 	msr	BASEPRI, r3
 8110854:	f3bf 8f6f 	isb	sy
 8110858:	f3bf 8f4f 	dsb	sy
 811085c:	623b      	str	r3, [r7, #32]
}
 811085e:	bf00      	nop
 8110860:	e7fe      	b.n	8110860 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8110862:	4b1a      	ldr	r3, [pc, #104]	; (81108cc <xTimerGenericCommand+0x98>)
 8110864:	681b      	ldr	r3, [r3, #0]
 8110866:	2b00      	cmp	r3, #0
 8110868:	d02a      	beq.n	81108c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 811086a:	68bb      	ldr	r3, [r7, #8]
 811086c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 811086e:	687b      	ldr	r3, [r7, #4]
 8110870:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8110872:	68fb      	ldr	r3, [r7, #12]
 8110874:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8110876:	68bb      	ldr	r3, [r7, #8]
 8110878:	2b05      	cmp	r3, #5
 811087a:	dc18      	bgt.n	81108ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 811087c:	f7ff feb2 	bl	81105e4 <xTaskGetSchedulerState>
 8110880:	4603      	mov	r3, r0
 8110882:	2b02      	cmp	r3, #2
 8110884:	d109      	bne.n	811089a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8110886:	4b11      	ldr	r3, [pc, #68]	; (81108cc <xTimerGenericCommand+0x98>)
 8110888:	6818      	ldr	r0, [r3, #0]
 811088a:	f107 0110 	add.w	r1, r7, #16
 811088e:	2300      	movs	r3, #0
 8110890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8110892:	f7fe fc0f 	bl	810f0b4 <xQueueGenericSend>
 8110896:	6278      	str	r0, [r7, #36]	; 0x24
 8110898:	e012      	b.n	81108c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 811089a:	4b0c      	ldr	r3, [pc, #48]	; (81108cc <xTimerGenericCommand+0x98>)
 811089c:	6818      	ldr	r0, [r3, #0]
 811089e:	f107 0110 	add.w	r1, r7, #16
 81108a2:	2300      	movs	r3, #0
 81108a4:	2200      	movs	r2, #0
 81108a6:	f7fe fc05 	bl	810f0b4 <xQueueGenericSend>
 81108aa:	6278      	str	r0, [r7, #36]	; 0x24
 81108ac:	e008      	b.n	81108c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 81108ae:	4b07      	ldr	r3, [pc, #28]	; (81108cc <xTimerGenericCommand+0x98>)
 81108b0:	6818      	ldr	r0, [r3, #0]
 81108b2:	f107 0110 	add.w	r1, r7, #16
 81108b6:	2300      	movs	r3, #0
 81108b8:	683a      	ldr	r2, [r7, #0]
 81108ba:	f7fe fcf9 	bl	810f2b0 <xQueueGenericSendFromISR>
 81108be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81108c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 81108c2:	4618      	mov	r0, r3
 81108c4:	3728      	adds	r7, #40	; 0x28
 81108c6:	46bd      	mov	sp, r7
 81108c8:	bd80      	pop	{r7, pc}
 81108ca:	bf00      	nop
 81108cc:	10004a28 	.word	0x10004a28

081108d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81108d0:	b580      	push	{r7, lr}
 81108d2:	b088      	sub	sp, #32
 81108d4:	af02      	add	r7, sp, #8
 81108d6:	6078      	str	r0, [r7, #4]
 81108d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81108da:	4b22      	ldr	r3, [pc, #136]	; (8110964 <prvProcessExpiredTimer+0x94>)
 81108dc:	681b      	ldr	r3, [r3, #0]
 81108de:	68db      	ldr	r3, [r3, #12]
 81108e0:	68db      	ldr	r3, [r3, #12]
 81108e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81108e4:	697b      	ldr	r3, [r7, #20]
 81108e6:	3304      	adds	r3, #4
 81108e8:	4618      	mov	r0, r3
 81108ea:	f7fe f82f 	bl	810e94c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81108ee:	697b      	ldr	r3, [r7, #20]
 81108f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81108f4:	f003 0304 	and.w	r3, r3, #4
 81108f8:	2b00      	cmp	r3, #0
 81108fa:	d022      	beq.n	8110942 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81108fc:	697b      	ldr	r3, [r7, #20]
 81108fe:	699a      	ldr	r2, [r3, #24]
 8110900:	687b      	ldr	r3, [r7, #4]
 8110902:	18d1      	adds	r1, r2, r3
 8110904:	687b      	ldr	r3, [r7, #4]
 8110906:	683a      	ldr	r2, [r7, #0]
 8110908:	6978      	ldr	r0, [r7, #20]
 811090a:	f000 f8d1 	bl	8110ab0 <prvInsertTimerInActiveList>
 811090e:	4603      	mov	r3, r0
 8110910:	2b00      	cmp	r3, #0
 8110912:	d01f      	beq.n	8110954 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8110914:	2300      	movs	r3, #0
 8110916:	9300      	str	r3, [sp, #0]
 8110918:	2300      	movs	r3, #0
 811091a:	687a      	ldr	r2, [r7, #4]
 811091c:	2100      	movs	r1, #0
 811091e:	6978      	ldr	r0, [r7, #20]
 8110920:	f7ff ff88 	bl	8110834 <xTimerGenericCommand>
 8110924:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8110926:	693b      	ldr	r3, [r7, #16]
 8110928:	2b00      	cmp	r3, #0
 811092a:	d113      	bne.n	8110954 <prvProcessExpiredTimer+0x84>
	__asm volatile
 811092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110930:	f383 8811 	msr	BASEPRI, r3
 8110934:	f3bf 8f6f 	isb	sy
 8110938:	f3bf 8f4f 	dsb	sy
 811093c:	60fb      	str	r3, [r7, #12]
}
 811093e:	bf00      	nop
 8110940:	e7fe      	b.n	8110940 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8110942:	697b      	ldr	r3, [r7, #20]
 8110944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110948:	f023 0301 	bic.w	r3, r3, #1
 811094c:	b2da      	uxtb	r2, r3
 811094e:	697b      	ldr	r3, [r7, #20]
 8110950:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8110954:	697b      	ldr	r3, [r7, #20]
 8110956:	6a1b      	ldr	r3, [r3, #32]
 8110958:	6978      	ldr	r0, [r7, #20]
 811095a:	4798      	blx	r3
}
 811095c:	bf00      	nop
 811095e:	3718      	adds	r7, #24
 8110960:	46bd      	mov	sp, r7
 8110962:	bd80      	pop	{r7, pc}
 8110964:	10004a20 	.word	0x10004a20

08110968 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8110968:	b580      	push	{r7, lr}
 811096a:	b084      	sub	sp, #16
 811096c:	af00      	add	r7, sp, #0
 811096e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8110970:	f107 0308 	add.w	r3, r7, #8
 8110974:	4618      	mov	r0, r3
 8110976:	f000 f857 	bl	8110a28 <prvGetNextExpireTime>
 811097a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 811097c:	68bb      	ldr	r3, [r7, #8]
 811097e:	4619      	mov	r1, r3
 8110980:	68f8      	ldr	r0, [r7, #12]
 8110982:	f000 f803 	bl	811098c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8110986:	f000 f8d5 	bl	8110b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 811098a:	e7f1      	b.n	8110970 <prvTimerTask+0x8>

0811098c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 811098c:	b580      	push	{r7, lr}
 811098e:	b084      	sub	sp, #16
 8110990:	af00      	add	r7, sp, #0
 8110992:	6078      	str	r0, [r7, #4]
 8110994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8110996:	f7ff fa31 	bl	810fdfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 811099a:	f107 0308 	add.w	r3, r7, #8
 811099e:	4618      	mov	r0, r3
 81109a0:	f000 f866 	bl	8110a70 <prvSampleTimeNow>
 81109a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 81109a6:	68bb      	ldr	r3, [r7, #8]
 81109a8:	2b00      	cmp	r3, #0
 81109aa:	d130      	bne.n	8110a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 81109ac:	683b      	ldr	r3, [r7, #0]
 81109ae:	2b00      	cmp	r3, #0
 81109b0:	d10a      	bne.n	81109c8 <prvProcessTimerOrBlockTask+0x3c>
 81109b2:	687a      	ldr	r2, [r7, #4]
 81109b4:	68fb      	ldr	r3, [r7, #12]
 81109b6:	429a      	cmp	r2, r3
 81109b8:	d806      	bhi.n	81109c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81109ba:	f7ff fa2d 	bl	810fe18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81109be:	68f9      	ldr	r1, [r7, #12]
 81109c0:	6878      	ldr	r0, [r7, #4]
 81109c2:	f7ff ff85 	bl	81108d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81109c6:	e024      	b.n	8110a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81109c8:	683b      	ldr	r3, [r7, #0]
 81109ca:	2b00      	cmp	r3, #0
 81109cc:	d008      	beq.n	81109e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81109ce:	4b13      	ldr	r3, [pc, #76]	; (8110a1c <prvProcessTimerOrBlockTask+0x90>)
 81109d0:	681b      	ldr	r3, [r3, #0]
 81109d2:	681b      	ldr	r3, [r3, #0]
 81109d4:	2b00      	cmp	r3, #0
 81109d6:	d101      	bne.n	81109dc <prvProcessTimerOrBlockTask+0x50>
 81109d8:	2301      	movs	r3, #1
 81109da:	e000      	b.n	81109de <prvProcessTimerOrBlockTask+0x52>
 81109dc:	2300      	movs	r3, #0
 81109de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81109e0:	4b0f      	ldr	r3, [pc, #60]	; (8110a20 <prvProcessTimerOrBlockTask+0x94>)
 81109e2:	6818      	ldr	r0, [r3, #0]
 81109e4:	687a      	ldr	r2, [r7, #4]
 81109e6:	68fb      	ldr	r3, [r7, #12]
 81109e8:	1ad3      	subs	r3, r2, r3
 81109ea:	683a      	ldr	r2, [r7, #0]
 81109ec:	4619      	mov	r1, r3
 81109ee:	f7fe ff95 	bl	810f91c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81109f2:	f7ff fa11 	bl	810fe18 <xTaskResumeAll>
 81109f6:	4603      	mov	r3, r0
 81109f8:	2b00      	cmp	r3, #0
 81109fa:	d10a      	bne.n	8110a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81109fc:	4b09      	ldr	r3, [pc, #36]	; (8110a24 <prvProcessTimerOrBlockTask+0x98>)
 81109fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8110a02:	601a      	str	r2, [r3, #0]
 8110a04:	f3bf 8f4f 	dsb	sy
 8110a08:	f3bf 8f6f 	isb	sy
}
 8110a0c:	e001      	b.n	8110a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8110a0e:	f7ff fa03 	bl	810fe18 <xTaskResumeAll>
}
 8110a12:	bf00      	nop
 8110a14:	3710      	adds	r7, #16
 8110a16:	46bd      	mov	sp, r7
 8110a18:	bd80      	pop	{r7, pc}
 8110a1a:	bf00      	nop
 8110a1c:	10004a24 	.word	0x10004a24
 8110a20:	10004a28 	.word	0x10004a28
 8110a24:	e000ed04 	.word	0xe000ed04

08110a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8110a28:	b480      	push	{r7}
 8110a2a:	b085      	sub	sp, #20
 8110a2c:	af00      	add	r7, sp, #0
 8110a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8110a30:	4b0e      	ldr	r3, [pc, #56]	; (8110a6c <prvGetNextExpireTime+0x44>)
 8110a32:	681b      	ldr	r3, [r3, #0]
 8110a34:	681b      	ldr	r3, [r3, #0]
 8110a36:	2b00      	cmp	r3, #0
 8110a38:	d101      	bne.n	8110a3e <prvGetNextExpireTime+0x16>
 8110a3a:	2201      	movs	r2, #1
 8110a3c:	e000      	b.n	8110a40 <prvGetNextExpireTime+0x18>
 8110a3e:	2200      	movs	r2, #0
 8110a40:	687b      	ldr	r3, [r7, #4]
 8110a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8110a44:	687b      	ldr	r3, [r7, #4]
 8110a46:	681b      	ldr	r3, [r3, #0]
 8110a48:	2b00      	cmp	r3, #0
 8110a4a:	d105      	bne.n	8110a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8110a4c:	4b07      	ldr	r3, [pc, #28]	; (8110a6c <prvGetNextExpireTime+0x44>)
 8110a4e:	681b      	ldr	r3, [r3, #0]
 8110a50:	68db      	ldr	r3, [r3, #12]
 8110a52:	681b      	ldr	r3, [r3, #0]
 8110a54:	60fb      	str	r3, [r7, #12]
 8110a56:	e001      	b.n	8110a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8110a58:	2300      	movs	r3, #0
 8110a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8110a5c:	68fb      	ldr	r3, [r7, #12]
}
 8110a5e:	4618      	mov	r0, r3
 8110a60:	3714      	adds	r7, #20
 8110a62:	46bd      	mov	sp, r7
 8110a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110a68:	4770      	bx	lr
 8110a6a:	bf00      	nop
 8110a6c:	10004a20 	.word	0x10004a20

08110a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8110a70:	b580      	push	{r7, lr}
 8110a72:	b084      	sub	sp, #16
 8110a74:	af00      	add	r7, sp, #0
 8110a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8110a78:	f7ff fa6c 	bl	810ff54 <xTaskGetTickCount>
 8110a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8110a7e:	4b0b      	ldr	r3, [pc, #44]	; (8110aac <prvSampleTimeNow+0x3c>)
 8110a80:	681b      	ldr	r3, [r3, #0]
 8110a82:	68fa      	ldr	r2, [r7, #12]
 8110a84:	429a      	cmp	r2, r3
 8110a86:	d205      	bcs.n	8110a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8110a88:	f000 f936 	bl	8110cf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8110a8c:	687b      	ldr	r3, [r7, #4]
 8110a8e:	2201      	movs	r2, #1
 8110a90:	601a      	str	r2, [r3, #0]
 8110a92:	e002      	b.n	8110a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8110a94:	687b      	ldr	r3, [r7, #4]
 8110a96:	2200      	movs	r2, #0
 8110a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8110a9a:	4a04      	ldr	r2, [pc, #16]	; (8110aac <prvSampleTimeNow+0x3c>)
 8110a9c:	68fb      	ldr	r3, [r7, #12]
 8110a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8110aa0:	68fb      	ldr	r3, [r7, #12]
}
 8110aa2:	4618      	mov	r0, r3
 8110aa4:	3710      	adds	r7, #16
 8110aa6:	46bd      	mov	sp, r7
 8110aa8:	bd80      	pop	{r7, pc}
 8110aaa:	bf00      	nop
 8110aac:	10004a30 	.word	0x10004a30

08110ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8110ab0:	b580      	push	{r7, lr}
 8110ab2:	b086      	sub	sp, #24
 8110ab4:	af00      	add	r7, sp, #0
 8110ab6:	60f8      	str	r0, [r7, #12]
 8110ab8:	60b9      	str	r1, [r7, #8]
 8110aba:	607a      	str	r2, [r7, #4]
 8110abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8110abe:	2300      	movs	r3, #0
 8110ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8110ac2:	68fb      	ldr	r3, [r7, #12]
 8110ac4:	68ba      	ldr	r2, [r7, #8]
 8110ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8110ac8:	68fb      	ldr	r3, [r7, #12]
 8110aca:	68fa      	ldr	r2, [r7, #12]
 8110acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8110ace:	68ba      	ldr	r2, [r7, #8]
 8110ad0:	687b      	ldr	r3, [r7, #4]
 8110ad2:	429a      	cmp	r2, r3
 8110ad4:	d812      	bhi.n	8110afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8110ad6:	687a      	ldr	r2, [r7, #4]
 8110ad8:	683b      	ldr	r3, [r7, #0]
 8110ada:	1ad2      	subs	r2, r2, r3
 8110adc:	68fb      	ldr	r3, [r7, #12]
 8110ade:	699b      	ldr	r3, [r3, #24]
 8110ae0:	429a      	cmp	r2, r3
 8110ae2:	d302      	bcc.n	8110aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8110ae4:	2301      	movs	r3, #1
 8110ae6:	617b      	str	r3, [r7, #20]
 8110ae8:	e01b      	b.n	8110b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8110aea:	4b10      	ldr	r3, [pc, #64]	; (8110b2c <prvInsertTimerInActiveList+0x7c>)
 8110aec:	681a      	ldr	r2, [r3, #0]
 8110aee:	68fb      	ldr	r3, [r7, #12]
 8110af0:	3304      	adds	r3, #4
 8110af2:	4619      	mov	r1, r3
 8110af4:	4610      	mov	r0, r2
 8110af6:	f7fd fef0 	bl	810e8da <vListInsert>
 8110afa:	e012      	b.n	8110b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8110afc:	687a      	ldr	r2, [r7, #4]
 8110afe:	683b      	ldr	r3, [r7, #0]
 8110b00:	429a      	cmp	r2, r3
 8110b02:	d206      	bcs.n	8110b12 <prvInsertTimerInActiveList+0x62>
 8110b04:	68ba      	ldr	r2, [r7, #8]
 8110b06:	683b      	ldr	r3, [r7, #0]
 8110b08:	429a      	cmp	r2, r3
 8110b0a:	d302      	bcc.n	8110b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8110b0c:	2301      	movs	r3, #1
 8110b0e:	617b      	str	r3, [r7, #20]
 8110b10:	e007      	b.n	8110b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8110b12:	4b07      	ldr	r3, [pc, #28]	; (8110b30 <prvInsertTimerInActiveList+0x80>)
 8110b14:	681a      	ldr	r2, [r3, #0]
 8110b16:	68fb      	ldr	r3, [r7, #12]
 8110b18:	3304      	adds	r3, #4
 8110b1a:	4619      	mov	r1, r3
 8110b1c:	4610      	mov	r0, r2
 8110b1e:	f7fd fedc 	bl	810e8da <vListInsert>
		}
	}

	return xProcessTimerNow;
 8110b22:	697b      	ldr	r3, [r7, #20]
}
 8110b24:	4618      	mov	r0, r3
 8110b26:	3718      	adds	r7, #24
 8110b28:	46bd      	mov	sp, r7
 8110b2a:	bd80      	pop	{r7, pc}
 8110b2c:	10004a24 	.word	0x10004a24
 8110b30:	10004a20 	.word	0x10004a20

08110b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8110b34:	b580      	push	{r7, lr}
 8110b36:	b08e      	sub	sp, #56	; 0x38
 8110b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8110b3a:	e0ca      	b.n	8110cd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8110b3c:	687b      	ldr	r3, [r7, #4]
 8110b3e:	2b00      	cmp	r3, #0
 8110b40:	da18      	bge.n	8110b74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8110b42:	1d3b      	adds	r3, r7, #4
 8110b44:	3304      	adds	r3, #4
 8110b46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8110b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110b4a:	2b00      	cmp	r3, #0
 8110b4c:	d10a      	bne.n	8110b64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8110b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110b52:	f383 8811 	msr	BASEPRI, r3
 8110b56:	f3bf 8f6f 	isb	sy
 8110b5a:	f3bf 8f4f 	dsb	sy
 8110b5e:	61fb      	str	r3, [r7, #28]
}
 8110b60:	bf00      	nop
 8110b62:	e7fe      	b.n	8110b62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8110b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8110b66:	681b      	ldr	r3, [r3, #0]
 8110b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8110b6a:	6850      	ldr	r0, [r2, #4]
 8110b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8110b6e:	6892      	ldr	r2, [r2, #8]
 8110b70:	4611      	mov	r1, r2
 8110b72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8110b74:	687b      	ldr	r3, [r7, #4]
 8110b76:	2b00      	cmp	r3, #0
 8110b78:	f2c0 80aa 	blt.w	8110cd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8110b7c:	68fb      	ldr	r3, [r7, #12]
 8110b7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8110b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110b82:	695b      	ldr	r3, [r3, #20]
 8110b84:	2b00      	cmp	r3, #0
 8110b86:	d004      	beq.n	8110b92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8110b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110b8a:	3304      	adds	r3, #4
 8110b8c:	4618      	mov	r0, r3
 8110b8e:	f7fd fedd 	bl	810e94c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8110b92:	463b      	mov	r3, r7
 8110b94:	4618      	mov	r0, r3
 8110b96:	f7ff ff6b 	bl	8110a70 <prvSampleTimeNow>
 8110b9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8110b9c:	687b      	ldr	r3, [r7, #4]
 8110b9e:	2b09      	cmp	r3, #9
 8110ba0:	f200 8097 	bhi.w	8110cd2 <prvProcessReceivedCommands+0x19e>
 8110ba4:	a201      	add	r2, pc, #4	; (adr r2, 8110bac <prvProcessReceivedCommands+0x78>)
 8110ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110baa:	bf00      	nop
 8110bac:	08110bd5 	.word	0x08110bd5
 8110bb0:	08110bd5 	.word	0x08110bd5
 8110bb4:	08110bd5 	.word	0x08110bd5
 8110bb8:	08110c49 	.word	0x08110c49
 8110bbc:	08110c5d 	.word	0x08110c5d
 8110bc0:	08110ca7 	.word	0x08110ca7
 8110bc4:	08110bd5 	.word	0x08110bd5
 8110bc8:	08110bd5 	.word	0x08110bd5
 8110bcc:	08110c49 	.word	0x08110c49
 8110bd0:	08110c5d 	.word	0x08110c5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8110bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110bda:	f043 0301 	orr.w	r3, r3, #1
 8110bde:	b2da      	uxtb	r2, r3
 8110be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8110be6:	68ba      	ldr	r2, [r7, #8]
 8110be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110bea:	699b      	ldr	r3, [r3, #24]
 8110bec:	18d1      	adds	r1, r2, r3
 8110bee:	68bb      	ldr	r3, [r7, #8]
 8110bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8110bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8110bf4:	f7ff ff5c 	bl	8110ab0 <prvInsertTimerInActiveList>
 8110bf8:	4603      	mov	r3, r0
 8110bfa:	2b00      	cmp	r3, #0
 8110bfc:	d069      	beq.n	8110cd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8110bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c00:	6a1b      	ldr	r3, [r3, #32]
 8110c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8110c04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8110c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110c0c:	f003 0304 	and.w	r3, r3, #4
 8110c10:	2b00      	cmp	r3, #0
 8110c12:	d05e      	beq.n	8110cd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8110c14:	68ba      	ldr	r2, [r7, #8]
 8110c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c18:	699b      	ldr	r3, [r3, #24]
 8110c1a:	441a      	add	r2, r3
 8110c1c:	2300      	movs	r3, #0
 8110c1e:	9300      	str	r3, [sp, #0]
 8110c20:	2300      	movs	r3, #0
 8110c22:	2100      	movs	r1, #0
 8110c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8110c26:	f7ff fe05 	bl	8110834 <xTimerGenericCommand>
 8110c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8110c2c:	6a3b      	ldr	r3, [r7, #32]
 8110c2e:	2b00      	cmp	r3, #0
 8110c30:	d14f      	bne.n	8110cd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8110c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110c36:	f383 8811 	msr	BASEPRI, r3
 8110c3a:	f3bf 8f6f 	isb	sy
 8110c3e:	f3bf 8f4f 	dsb	sy
 8110c42:	61bb      	str	r3, [r7, #24]
}
 8110c44:	bf00      	nop
 8110c46:	e7fe      	b.n	8110c46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8110c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110c4e:	f023 0301 	bic.w	r3, r3, #1
 8110c52:	b2da      	uxtb	r2, r3
 8110c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8110c5a:	e03a      	b.n	8110cd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8110c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110c62:	f043 0301 	orr.w	r3, r3, #1
 8110c66:	b2da      	uxtb	r2, r3
 8110c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8110c6e:	68ba      	ldr	r2, [r7, #8]
 8110c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8110c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c76:	699b      	ldr	r3, [r3, #24]
 8110c78:	2b00      	cmp	r3, #0
 8110c7a:	d10a      	bne.n	8110c92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8110c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110c80:	f383 8811 	msr	BASEPRI, r3
 8110c84:	f3bf 8f6f 	isb	sy
 8110c88:	f3bf 8f4f 	dsb	sy
 8110c8c:	617b      	str	r3, [r7, #20]
}
 8110c8e:	bf00      	nop
 8110c90:	e7fe      	b.n	8110c90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8110c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110c94:	699a      	ldr	r2, [r3, #24]
 8110c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110c98:	18d1      	adds	r1, r2, r3
 8110c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8110c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8110c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8110ca0:	f7ff ff06 	bl	8110ab0 <prvInsertTimerInActiveList>
					break;
 8110ca4:	e015      	b.n	8110cd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8110ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110cac:	f003 0302 	and.w	r3, r3, #2
 8110cb0:	2b00      	cmp	r3, #0
 8110cb2:	d103      	bne.n	8110cbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8110cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8110cb6:	f7fd fca1 	bl	810e5fc <vPortFree>
 8110cba:	e00a      	b.n	8110cd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8110cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110cc2:	f023 0301 	bic.w	r3, r3, #1
 8110cc6:	b2da      	uxtb	r2, r3
 8110cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8110cce:	e000      	b.n	8110cd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8110cd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8110cd2:	4b08      	ldr	r3, [pc, #32]	; (8110cf4 <prvProcessReceivedCommands+0x1c0>)
 8110cd4:	681b      	ldr	r3, [r3, #0]
 8110cd6:	1d39      	adds	r1, r7, #4
 8110cd8:	2200      	movs	r2, #0
 8110cda:	4618      	mov	r0, r3
 8110cdc:	f7fe fb84 	bl	810f3e8 <xQueueReceive>
 8110ce0:	4603      	mov	r3, r0
 8110ce2:	2b00      	cmp	r3, #0
 8110ce4:	f47f af2a 	bne.w	8110b3c <prvProcessReceivedCommands+0x8>
	}
}
 8110ce8:	bf00      	nop
 8110cea:	bf00      	nop
 8110cec:	3730      	adds	r7, #48	; 0x30
 8110cee:	46bd      	mov	sp, r7
 8110cf0:	bd80      	pop	{r7, pc}
 8110cf2:	bf00      	nop
 8110cf4:	10004a28 	.word	0x10004a28

08110cf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8110cf8:	b580      	push	{r7, lr}
 8110cfa:	b088      	sub	sp, #32
 8110cfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8110cfe:	e048      	b.n	8110d92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8110d00:	4b2d      	ldr	r3, [pc, #180]	; (8110db8 <prvSwitchTimerLists+0xc0>)
 8110d02:	681b      	ldr	r3, [r3, #0]
 8110d04:	68db      	ldr	r3, [r3, #12]
 8110d06:	681b      	ldr	r3, [r3, #0]
 8110d08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8110d0a:	4b2b      	ldr	r3, [pc, #172]	; (8110db8 <prvSwitchTimerLists+0xc0>)
 8110d0c:	681b      	ldr	r3, [r3, #0]
 8110d0e:	68db      	ldr	r3, [r3, #12]
 8110d10:	68db      	ldr	r3, [r3, #12]
 8110d12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8110d14:	68fb      	ldr	r3, [r7, #12]
 8110d16:	3304      	adds	r3, #4
 8110d18:	4618      	mov	r0, r3
 8110d1a:	f7fd fe17 	bl	810e94c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8110d1e:	68fb      	ldr	r3, [r7, #12]
 8110d20:	6a1b      	ldr	r3, [r3, #32]
 8110d22:	68f8      	ldr	r0, [r7, #12]
 8110d24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8110d26:	68fb      	ldr	r3, [r7, #12]
 8110d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8110d2c:	f003 0304 	and.w	r3, r3, #4
 8110d30:	2b00      	cmp	r3, #0
 8110d32:	d02e      	beq.n	8110d92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8110d34:	68fb      	ldr	r3, [r7, #12]
 8110d36:	699b      	ldr	r3, [r3, #24]
 8110d38:	693a      	ldr	r2, [r7, #16]
 8110d3a:	4413      	add	r3, r2
 8110d3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8110d3e:	68ba      	ldr	r2, [r7, #8]
 8110d40:	693b      	ldr	r3, [r7, #16]
 8110d42:	429a      	cmp	r2, r3
 8110d44:	d90e      	bls.n	8110d64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8110d46:	68fb      	ldr	r3, [r7, #12]
 8110d48:	68ba      	ldr	r2, [r7, #8]
 8110d4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8110d4c:	68fb      	ldr	r3, [r7, #12]
 8110d4e:	68fa      	ldr	r2, [r7, #12]
 8110d50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8110d52:	4b19      	ldr	r3, [pc, #100]	; (8110db8 <prvSwitchTimerLists+0xc0>)
 8110d54:	681a      	ldr	r2, [r3, #0]
 8110d56:	68fb      	ldr	r3, [r7, #12]
 8110d58:	3304      	adds	r3, #4
 8110d5a:	4619      	mov	r1, r3
 8110d5c:	4610      	mov	r0, r2
 8110d5e:	f7fd fdbc 	bl	810e8da <vListInsert>
 8110d62:	e016      	b.n	8110d92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8110d64:	2300      	movs	r3, #0
 8110d66:	9300      	str	r3, [sp, #0]
 8110d68:	2300      	movs	r3, #0
 8110d6a:	693a      	ldr	r2, [r7, #16]
 8110d6c:	2100      	movs	r1, #0
 8110d6e:	68f8      	ldr	r0, [r7, #12]
 8110d70:	f7ff fd60 	bl	8110834 <xTimerGenericCommand>
 8110d74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8110d76:	687b      	ldr	r3, [r7, #4]
 8110d78:	2b00      	cmp	r3, #0
 8110d7a:	d10a      	bne.n	8110d92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8110d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8110d80:	f383 8811 	msr	BASEPRI, r3
 8110d84:	f3bf 8f6f 	isb	sy
 8110d88:	f3bf 8f4f 	dsb	sy
 8110d8c:	603b      	str	r3, [r7, #0]
}
 8110d8e:	bf00      	nop
 8110d90:	e7fe      	b.n	8110d90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8110d92:	4b09      	ldr	r3, [pc, #36]	; (8110db8 <prvSwitchTimerLists+0xc0>)
 8110d94:	681b      	ldr	r3, [r3, #0]
 8110d96:	681b      	ldr	r3, [r3, #0]
 8110d98:	2b00      	cmp	r3, #0
 8110d9a:	d1b1      	bne.n	8110d00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8110d9c:	4b06      	ldr	r3, [pc, #24]	; (8110db8 <prvSwitchTimerLists+0xc0>)
 8110d9e:	681b      	ldr	r3, [r3, #0]
 8110da0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8110da2:	4b06      	ldr	r3, [pc, #24]	; (8110dbc <prvSwitchTimerLists+0xc4>)
 8110da4:	681b      	ldr	r3, [r3, #0]
 8110da6:	4a04      	ldr	r2, [pc, #16]	; (8110db8 <prvSwitchTimerLists+0xc0>)
 8110da8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8110daa:	4a04      	ldr	r2, [pc, #16]	; (8110dbc <prvSwitchTimerLists+0xc4>)
 8110dac:	697b      	ldr	r3, [r7, #20]
 8110dae:	6013      	str	r3, [r2, #0]
}
 8110db0:	bf00      	nop
 8110db2:	3718      	adds	r7, #24
 8110db4:	46bd      	mov	sp, r7
 8110db6:	bd80      	pop	{r7, pc}
 8110db8:	10004a20 	.word	0x10004a20
 8110dbc:	10004a24 	.word	0x10004a24

08110dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8110dc0:	b580      	push	{r7, lr}
 8110dc2:	b082      	sub	sp, #8
 8110dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8110dc6:	f7fd ff15 	bl	810ebf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8110dca:	4b15      	ldr	r3, [pc, #84]	; (8110e20 <prvCheckForValidListAndQueue+0x60>)
 8110dcc:	681b      	ldr	r3, [r3, #0]
 8110dce:	2b00      	cmp	r3, #0
 8110dd0:	d120      	bne.n	8110e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8110dd2:	4814      	ldr	r0, [pc, #80]	; (8110e24 <prvCheckForValidListAndQueue+0x64>)
 8110dd4:	f7fd fd30 	bl	810e838 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8110dd8:	4813      	ldr	r0, [pc, #76]	; (8110e28 <prvCheckForValidListAndQueue+0x68>)
 8110dda:	f7fd fd2d 	bl	810e838 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8110dde:	4b13      	ldr	r3, [pc, #76]	; (8110e2c <prvCheckForValidListAndQueue+0x6c>)
 8110de0:	4a10      	ldr	r2, [pc, #64]	; (8110e24 <prvCheckForValidListAndQueue+0x64>)
 8110de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8110de4:	4b12      	ldr	r3, [pc, #72]	; (8110e30 <prvCheckForValidListAndQueue+0x70>)
 8110de6:	4a10      	ldr	r2, [pc, #64]	; (8110e28 <prvCheckForValidListAndQueue+0x68>)
 8110de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8110dea:	2300      	movs	r3, #0
 8110dec:	9300      	str	r3, [sp, #0]
 8110dee:	4b11      	ldr	r3, [pc, #68]	; (8110e34 <prvCheckForValidListAndQueue+0x74>)
 8110df0:	4a11      	ldr	r2, [pc, #68]	; (8110e38 <prvCheckForValidListAndQueue+0x78>)
 8110df2:	2110      	movs	r1, #16
 8110df4:	200a      	movs	r0, #10
 8110df6:	f7fe f887 	bl	810ef08 <xQueueGenericCreateStatic>
 8110dfa:	4603      	mov	r3, r0
 8110dfc:	4a08      	ldr	r2, [pc, #32]	; (8110e20 <prvCheckForValidListAndQueue+0x60>)
 8110dfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8110e00:	4b07      	ldr	r3, [pc, #28]	; (8110e20 <prvCheckForValidListAndQueue+0x60>)
 8110e02:	681b      	ldr	r3, [r3, #0]
 8110e04:	2b00      	cmp	r3, #0
 8110e06:	d005      	beq.n	8110e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8110e08:	4b05      	ldr	r3, [pc, #20]	; (8110e20 <prvCheckForValidListAndQueue+0x60>)
 8110e0a:	681b      	ldr	r3, [r3, #0]
 8110e0c:	490b      	ldr	r1, [pc, #44]	; (8110e3c <prvCheckForValidListAndQueue+0x7c>)
 8110e0e:	4618      	mov	r0, r3
 8110e10:	f7fe fd5a 	bl	810f8c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8110e14:	f7fd ff1e 	bl	810ec54 <vPortExitCritical>
}
 8110e18:	bf00      	nop
 8110e1a:	46bd      	mov	sp, r7
 8110e1c:	bd80      	pop	{r7, pc}
 8110e1e:	bf00      	nop
 8110e20:	10004a28 	.word	0x10004a28
 8110e24:	100049f8 	.word	0x100049f8
 8110e28:	10004a0c 	.word	0x10004a0c
 8110e2c:	10004a20 	.word	0x10004a20
 8110e30:	10004a24 	.word	0x10004a24
 8110e34:	10004ad4 	.word	0x10004ad4
 8110e38:	10004a34 	.word	0x10004a34
 8110e3c:	08113880 	.word	0x08113880

08110e40 <__errno>:
 8110e40:	4b01      	ldr	r3, [pc, #4]	; (8110e48 <__errno+0x8>)
 8110e42:	6818      	ldr	r0, [r3, #0]
 8110e44:	4770      	bx	lr
 8110e46:	bf00      	nop
 8110e48:	10000014 	.word	0x10000014

08110e4c <__libc_init_array>:
 8110e4c:	b570      	push	{r4, r5, r6, lr}
 8110e4e:	4d0d      	ldr	r5, [pc, #52]	; (8110e84 <__libc_init_array+0x38>)
 8110e50:	4c0d      	ldr	r4, [pc, #52]	; (8110e88 <__libc_init_array+0x3c>)
 8110e52:	1b64      	subs	r4, r4, r5
 8110e54:	10a4      	asrs	r4, r4, #2
 8110e56:	2600      	movs	r6, #0
 8110e58:	42a6      	cmp	r6, r4
 8110e5a:	d109      	bne.n	8110e70 <__libc_init_array+0x24>
 8110e5c:	4d0b      	ldr	r5, [pc, #44]	; (8110e8c <__libc_init_array+0x40>)
 8110e5e:	4c0c      	ldr	r4, [pc, #48]	; (8110e90 <__libc_init_array+0x44>)
 8110e60:	f002 fcf2 	bl	8113848 <_init>
 8110e64:	1b64      	subs	r4, r4, r5
 8110e66:	10a4      	asrs	r4, r4, #2
 8110e68:	2600      	movs	r6, #0
 8110e6a:	42a6      	cmp	r6, r4
 8110e6c:	d105      	bne.n	8110e7a <__libc_init_array+0x2e>
 8110e6e:	bd70      	pop	{r4, r5, r6, pc}
 8110e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8110e74:	4798      	blx	r3
 8110e76:	3601      	adds	r6, #1
 8110e78:	e7ee      	b.n	8110e58 <__libc_init_array+0xc>
 8110e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8110e7e:	4798      	blx	r3
 8110e80:	3601      	adds	r6, #1
 8110e82:	e7f2      	b.n	8110e6a <__libc_init_array+0x1e>
 8110e84:	08113cec 	.word	0x08113cec
 8110e88:	08113cec 	.word	0x08113cec
 8110e8c:	08113cec 	.word	0x08113cec
 8110e90:	08113cf0 	.word	0x08113cf0

08110e94 <memcpy>:
 8110e94:	440a      	add	r2, r1
 8110e96:	4291      	cmp	r1, r2
 8110e98:	f100 33ff 	add.w	r3, r0, #4294967295
 8110e9c:	d100      	bne.n	8110ea0 <memcpy+0xc>
 8110e9e:	4770      	bx	lr
 8110ea0:	b510      	push	{r4, lr}
 8110ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8110ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8110eaa:	4291      	cmp	r1, r2
 8110eac:	d1f9      	bne.n	8110ea2 <memcpy+0xe>
 8110eae:	bd10      	pop	{r4, pc}

08110eb0 <memset>:
 8110eb0:	4402      	add	r2, r0
 8110eb2:	4603      	mov	r3, r0
 8110eb4:	4293      	cmp	r3, r2
 8110eb6:	d100      	bne.n	8110eba <memset+0xa>
 8110eb8:	4770      	bx	lr
 8110eba:	f803 1b01 	strb.w	r1, [r3], #1
 8110ebe:	e7f9      	b.n	8110eb4 <memset+0x4>

08110ec0 <__cvt>:
 8110ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8110ec4:	ec55 4b10 	vmov	r4, r5, d0
 8110ec8:	2d00      	cmp	r5, #0
 8110eca:	460e      	mov	r6, r1
 8110ecc:	4619      	mov	r1, r3
 8110ece:	462b      	mov	r3, r5
 8110ed0:	bfbb      	ittet	lt
 8110ed2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8110ed6:	461d      	movlt	r5, r3
 8110ed8:	2300      	movge	r3, #0
 8110eda:	232d      	movlt	r3, #45	; 0x2d
 8110edc:	700b      	strb	r3, [r1, #0]
 8110ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8110ee0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8110ee4:	4691      	mov	r9, r2
 8110ee6:	f023 0820 	bic.w	r8, r3, #32
 8110eea:	bfbc      	itt	lt
 8110eec:	4622      	movlt	r2, r4
 8110eee:	4614      	movlt	r4, r2
 8110ef0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8110ef4:	d005      	beq.n	8110f02 <__cvt+0x42>
 8110ef6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8110efa:	d100      	bne.n	8110efe <__cvt+0x3e>
 8110efc:	3601      	adds	r6, #1
 8110efe:	2102      	movs	r1, #2
 8110f00:	e000      	b.n	8110f04 <__cvt+0x44>
 8110f02:	2103      	movs	r1, #3
 8110f04:	ab03      	add	r3, sp, #12
 8110f06:	9301      	str	r3, [sp, #4]
 8110f08:	ab02      	add	r3, sp, #8
 8110f0a:	9300      	str	r3, [sp, #0]
 8110f0c:	ec45 4b10 	vmov	d0, r4, r5
 8110f10:	4653      	mov	r3, sl
 8110f12:	4632      	mov	r2, r6
 8110f14:	f000 fccc 	bl	81118b0 <_dtoa_r>
 8110f18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8110f1c:	4607      	mov	r7, r0
 8110f1e:	d102      	bne.n	8110f26 <__cvt+0x66>
 8110f20:	f019 0f01 	tst.w	r9, #1
 8110f24:	d022      	beq.n	8110f6c <__cvt+0xac>
 8110f26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8110f2a:	eb07 0906 	add.w	r9, r7, r6
 8110f2e:	d110      	bne.n	8110f52 <__cvt+0x92>
 8110f30:	783b      	ldrb	r3, [r7, #0]
 8110f32:	2b30      	cmp	r3, #48	; 0x30
 8110f34:	d10a      	bne.n	8110f4c <__cvt+0x8c>
 8110f36:	2200      	movs	r2, #0
 8110f38:	2300      	movs	r3, #0
 8110f3a:	4620      	mov	r0, r4
 8110f3c:	4629      	mov	r1, r5
 8110f3e:	f7ef fe4b 	bl	8100bd8 <__aeabi_dcmpeq>
 8110f42:	b918      	cbnz	r0, 8110f4c <__cvt+0x8c>
 8110f44:	f1c6 0601 	rsb	r6, r6, #1
 8110f48:	f8ca 6000 	str.w	r6, [sl]
 8110f4c:	f8da 3000 	ldr.w	r3, [sl]
 8110f50:	4499      	add	r9, r3
 8110f52:	2200      	movs	r2, #0
 8110f54:	2300      	movs	r3, #0
 8110f56:	4620      	mov	r0, r4
 8110f58:	4629      	mov	r1, r5
 8110f5a:	f7ef fe3d 	bl	8100bd8 <__aeabi_dcmpeq>
 8110f5e:	b108      	cbz	r0, 8110f64 <__cvt+0xa4>
 8110f60:	f8cd 900c 	str.w	r9, [sp, #12]
 8110f64:	2230      	movs	r2, #48	; 0x30
 8110f66:	9b03      	ldr	r3, [sp, #12]
 8110f68:	454b      	cmp	r3, r9
 8110f6a:	d307      	bcc.n	8110f7c <__cvt+0xbc>
 8110f6c:	9b03      	ldr	r3, [sp, #12]
 8110f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8110f70:	1bdb      	subs	r3, r3, r7
 8110f72:	4638      	mov	r0, r7
 8110f74:	6013      	str	r3, [r2, #0]
 8110f76:	b004      	add	sp, #16
 8110f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8110f7c:	1c59      	adds	r1, r3, #1
 8110f7e:	9103      	str	r1, [sp, #12]
 8110f80:	701a      	strb	r2, [r3, #0]
 8110f82:	e7f0      	b.n	8110f66 <__cvt+0xa6>

08110f84 <__exponent>:
 8110f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8110f86:	4603      	mov	r3, r0
 8110f88:	2900      	cmp	r1, #0
 8110f8a:	bfb8      	it	lt
 8110f8c:	4249      	neglt	r1, r1
 8110f8e:	f803 2b02 	strb.w	r2, [r3], #2
 8110f92:	bfb4      	ite	lt
 8110f94:	222d      	movlt	r2, #45	; 0x2d
 8110f96:	222b      	movge	r2, #43	; 0x2b
 8110f98:	2909      	cmp	r1, #9
 8110f9a:	7042      	strb	r2, [r0, #1]
 8110f9c:	dd2a      	ble.n	8110ff4 <__exponent+0x70>
 8110f9e:	f10d 0407 	add.w	r4, sp, #7
 8110fa2:	46a4      	mov	ip, r4
 8110fa4:	270a      	movs	r7, #10
 8110fa6:	46a6      	mov	lr, r4
 8110fa8:	460a      	mov	r2, r1
 8110faa:	fb91 f6f7 	sdiv	r6, r1, r7
 8110fae:	fb07 1516 	mls	r5, r7, r6, r1
 8110fb2:	3530      	adds	r5, #48	; 0x30
 8110fb4:	2a63      	cmp	r2, #99	; 0x63
 8110fb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8110fba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8110fbe:	4631      	mov	r1, r6
 8110fc0:	dcf1      	bgt.n	8110fa6 <__exponent+0x22>
 8110fc2:	3130      	adds	r1, #48	; 0x30
 8110fc4:	f1ae 0502 	sub.w	r5, lr, #2
 8110fc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8110fcc:	1c44      	adds	r4, r0, #1
 8110fce:	4629      	mov	r1, r5
 8110fd0:	4561      	cmp	r1, ip
 8110fd2:	d30a      	bcc.n	8110fea <__exponent+0x66>
 8110fd4:	f10d 0209 	add.w	r2, sp, #9
 8110fd8:	eba2 020e 	sub.w	r2, r2, lr
 8110fdc:	4565      	cmp	r5, ip
 8110fde:	bf88      	it	hi
 8110fe0:	2200      	movhi	r2, #0
 8110fe2:	4413      	add	r3, r2
 8110fe4:	1a18      	subs	r0, r3, r0
 8110fe6:	b003      	add	sp, #12
 8110fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8110fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8110fee:	f804 2f01 	strb.w	r2, [r4, #1]!
 8110ff2:	e7ed      	b.n	8110fd0 <__exponent+0x4c>
 8110ff4:	2330      	movs	r3, #48	; 0x30
 8110ff6:	3130      	adds	r1, #48	; 0x30
 8110ff8:	7083      	strb	r3, [r0, #2]
 8110ffa:	70c1      	strb	r1, [r0, #3]
 8110ffc:	1d03      	adds	r3, r0, #4
 8110ffe:	e7f1      	b.n	8110fe4 <__exponent+0x60>

08111000 <_printf_float>:
 8111000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111004:	ed2d 8b02 	vpush	{d8}
 8111008:	b08d      	sub	sp, #52	; 0x34
 811100a:	460c      	mov	r4, r1
 811100c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8111010:	4616      	mov	r6, r2
 8111012:	461f      	mov	r7, r3
 8111014:	4605      	mov	r5, r0
 8111016:	f001 fa37 	bl	8112488 <_localeconv_r>
 811101a:	f8d0 a000 	ldr.w	sl, [r0]
 811101e:	4650      	mov	r0, sl
 8111020:	f7ef f95e 	bl	81002e0 <strlen>
 8111024:	2300      	movs	r3, #0
 8111026:	930a      	str	r3, [sp, #40]	; 0x28
 8111028:	6823      	ldr	r3, [r4, #0]
 811102a:	9305      	str	r3, [sp, #20]
 811102c:	f8d8 3000 	ldr.w	r3, [r8]
 8111030:	f894 b018 	ldrb.w	fp, [r4, #24]
 8111034:	3307      	adds	r3, #7
 8111036:	f023 0307 	bic.w	r3, r3, #7
 811103a:	f103 0208 	add.w	r2, r3, #8
 811103e:	f8c8 2000 	str.w	r2, [r8]
 8111042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111046:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 811104a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 811104e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8111052:	9307      	str	r3, [sp, #28]
 8111054:	f8cd 8018 	str.w	r8, [sp, #24]
 8111058:	ee08 0a10 	vmov	s16, r0
 811105c:	4b9f      	ldr	r3, [pc, #636]	; (81112dc <_printf_float+0x2dc>)
 811105e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111062:	f04f 32ff 	mov.w	r2, #4294967295
 8111066:	f7ef fde9 	bl	8100c3c <__aeabi_dcmpun>
 811106a:	bb88      	cbnz	r0, 81110d0 <_printf_float+0xd0>
 811106c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8111070:	4b9a      	ldr	r3, [pc, #616]	; (81112dc <_printf_float+0x2dc>)
 8111072:	f04f 32ff 	mov.w	r2, #4294967295
 8111076:	f7ef fdc3 	bl	8100c00 <__aeabi_dcmple>
 811107a:	bb48      	cbnz	r0, 81110d0 <_printf_float+0xd0>
 811107c:	2200      	movs	r2, #0
 811107e:	2300      	movs	r3, #0
 8111080:	4640      	mov	r0, r8
 8111082:	4649      	mov	r1, r9
 8111084:	f7ef fdb2 	bl	8100bec <__aeabi_dcmplt>
 8111088:	b110      	cbz	r0, 8111090 <_printf_float+0x90>
 811108a:	232d      	movs	r3, #45	; 0x2d
 811108c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8111090:	4b93      	ldr	r3, [pc, #588]	; (81112e0 <_printf_float+0x2e0>)
 8111092:	4894      	ldr	r0, [pc, #592]	; (81112e4 <_printf_float+0x2e4>)
 8111094:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8111098:	bf94      	ite	ls
 811109a:	4698      	movls	r8, r3
 811109c:	4680      	movhi	r8, r0
 811109e:	2303      	movs	r3, #3
 81110a0:	6123      	str	r3, [r4, #16]
 81110a2:	9b05      	ldr	r3, [sp, #20]
 81110a4:	f023 0204 	bic.w	r2, r3, #4
 81110a8:	6022      	str	r2, [r4, #0]
 81110aa:	f04f 0900 	mov.w	r9, #0
 81110ae:	9700      	str	r7, [sp, #0]
 81110b0:	4633      	mov	r3, r6
 81110b2:	aa0b      	add	r2, sp, #44	; 0x2c
 81110b4:	4621      	mov	r1, r4
 81110b6:	4628      	mov	r0, r5
 81110b8:	f000 f9d8 	bl	811146c <_printf_common>
 81110bc:	3001      	adds	r0, #1
 81110be:	f040 8090 	bne.w	81111e2 <_printf_float+0x1e2>
 81110c2:	f04f 30ff 	mov.w	r0, #4294967295
 81110c6:	b00d      	add	sp, #52	; 0x34
 81110c8:	ecbd 8b02 	vpop	{d8}
 81110cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81110d0:	4642      	mov	r2, r8
 81110d2:	464b      	mov	r3, r9
 81110d4:	4640      	mov	r0, r8
 81110d6:	4649      	mov	r1, r9
 81110d8:	f7ef fdb0 	bl	8100c3c <__aeabi_dcmpun>
 81110dc:	b140      	cbz	r0, 81110f0 <_printf_float+0xf0>
 81110de:	464b      	mov	r3, r9
 81110e0:	2b00      	cmp	r3, #0
 81110e2:	bfbc      	itt	lt
 81110e4:	232d      	movlt	r3, #45	; 0x2d
 81110e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81110ea:	487f      	ldr	r0, [pc, #508]	; (81112e8 <_printf_float+0x2e8>)
 81110ec:	4b7f      	ldr	r3, [pc, #508]	; (81112ec <_printf_float+0x2ec>)
 81110ee:	e7d1      	b.n	8111094 <_printf_float+0x94>
 81110f0:	6863      	ldr	r3, [r4, #4]
 81110f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81110f6:	9206      	str	r2, [sp, #24]
 81110f8:	1c5a      	adds	r2, r3, #1
 81110fa:	d13f      	bne.n	811117c <_printf_float+0x17c>
 81110fc:	2306      	movs	r3, #6
 81110fe:	6063      	str	r3, [r4, #4]
 8111100:	9b05      	ldr	r3, [sp, #20]
 8111102:	6861      	ldr	r1, [r4, #4]
 8111104:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8111108:	2300      	movs	r3, #0
 811110a:	9303      	str	r3, [sp, #12]
 811110c:	ab0a      	add	r3, sp, #40	; 0x28
 811110e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8111112:	ab09      	add	r3, sp, #36	; 0x24
 8111114:	ec49 8b10 	vmov	d0, r8, r9
 8111118:	9300      	str	r3, [sp, #0]
 811111a:	6022      	str	r2, [r4, #0]
 811111c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8111120:	4628      	mov	r0, r5
 8111122:	f7ff fecd 	bl	8110ec0 <__cvt>
 8111126:	9b06      	ldr	r3, [sp, #24]
 8111128:	9909      	ldr	r1, [sp, #36]	; 0x24
 811112a:	2b47      	cmp	r3, #71	; 0x47
 811112c:	4680      	mov	r8, r0
 811112e:	d108      	bne.n	8111142 <_printf_float+0x142>
 8111130:	1cc8      	adds	r0, r1, #3
 8111132:	db02      	blt.n	811113a <_printf_float+0x13a>
 8111134:	6863      	ldr	r3, [r4, #4]
 8111136:	4299      	cmp	r1, r3
 8111138:	dd41      	ble.n	81111be <_printf_float+0x1be>
 811113a:	f1ab 0b02 	sub.w	fp, fp, #2
 811113e:	fa5f fb8b 	uxtb.w	fp, fp
 8111142:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8111146:	d820      	bhi.n	811118a <_printf_float+0x18a>
 8111148:	3901      	subs	r1, #1
 811114a:	465a      	mov	r2, fp
 811114c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8111150:	9109      	str	r1, [sp, #36]	; 0x24
 8111152:	f7ff ff17 	bl	8110f84 <__exponent>
 8111156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8111158:	1813      	adds	r3, r2, r0
 811115a:	2a01      	cmp	r2, #1
 811115c:	4681      	mov	r9, r0
 811115e:	6123      	str	r3, [r4, #16]
 8111160:	dc02      	bgt.n	8111168 <_printf_float+0x168>
 8111162:	6822      	ldr	r2, [r4, #0]
 8111164:	07d2      	lsls	r2, r2, #31
 8111166:	d501      	bpl.n	811116c <_printf_float+0x16c>
 8111168:	3301      	adds	r3, #1
 811116a:	6123      	str	r3, [r4, #16]
 811116c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8111170:	2b00      	cmp	r3, #0
 8111172:	d09c      	beq.n	81110ae <_printf_float+0xae>
 8111174:	232d      	movs	r3, #45	; 0x2d
 8111176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 811117a:	e798      	b.n	81110ae <_printf_float+0xae>
 811117c:	9a06      	ldr	r2, [sp, #24]
 811117e:	2a47      	cmp	r2, #71	; 0x47
 8111180:	d1be      	bne.n	8111100 <_printf_float+0x100>
 8111182:	2b00      	cmp	r3, #0
 8111184:	d1bc      	bne.n	8111100 <_printf_float+0x100>
 8111186:	2301      	movs	r3, #1
 8111188:	e7b9      	b.n	81110fe <_printf_float+0xfe>
 811118a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 811118e:	d118      	bne.n	81111c2 <_printf_float+0x1c2>
 8111190:	2900      	cmp	r1, #0
 8111192:	6863      	ldr	r3, [r4, #4]
 8111194:	dd0b      	ble.n	81111ae <_printf_float+0x1ae>
 8111196:	6121      	str	r1, [r4, #16]
 8111198:	b913      	cbnz	r3, 81111a0 <_printf_float+0x1a0>
 811119a:	6822      	ldr	r2, [r4, #0]
 811119c:	07d0      	lsls	r0, r2, #31
 811119e:	d502      	bpl.n	81111a6 <_printf_float+0x1a6>
 81111a0:	3301      	adds	r3, #1
 81111a2:	440b      	add	r3, r1
 81111a4:	6123      	str	r3, [r4, #16]
 81111a6:	65a1      	str	r1, [r4, #88]	; 0x58
 81111a8:	f04f 0900 	mov.w	r9, #0
 81111ac:	e7de      	b.n	811116c <_printf_float+0x16c>
 81111ae:	b913      	cbnz	r3, 81111b6 <_printf_float+0x1b6>
 81111b0:	6822      	ldr	r2, [r4, #0]
 81111b2:	07d2      	lsls	r2, r2, #31
 81111b4:	d501      	bpl.n	81111ba <_printf_float+0x1ba>
 81111b6:	3302      	adds	r3, #2
 81111b8:	e7f4      	b.n	81111a4 <_printf_float+0x1a4>
 81111ba:	2301      	movs	r3, #1
 81111bc:	e7f2      	b.n	81111a4 <_printf_float+0x1a4>
 81111be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81111c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81111c4:	4299      	cmp	r1, r3
 81111c6:	db05      	blt.n	81111d4 <_printf_float+0x1d4>
 81111c8:	6823      	ldr	r3, [r4, #0]
 81111ca:	6121      	str	r1, [r4, #16]
 81111cc:	07d8      	lsls	r0, r3, #31
 81111ce:	d5ea      	bpl.n	81111a6 <_printf_float+0x1a6>
 81111d0:	1c4b      	adds	r3, r1, #1
 81111d2:	e7e7      	b.n	81111a4 <_printf_float+0x1a4>
 81111d4:	2900      	cmp	r1, #0
 81111d6:	bfd4      	ite	le
 81111d8:	f1c1 0202 	rsble	r2, r1, #2
 81111dc:	2201      	movgt	r2, #1
 81111de:	4413      	add	r3, r2
 81111e0:	e7e0      	b.n	81111a4 <_printf_float+0x1a4>
 81111e2:	6823      	ldr	r3, [r4, #0]
 81111e4:	055a      	lsls	r2, r3, #21
 81111e6:	d407      	bmi.n	81111f8 <_printf_float+0x1f8>
 81111e8:	6923      	ldr	r3, [r4, #16]
 81111ea:	4642      	mov	r2, r8
 81111ec:	4631      	mov	r1, r6
 81111ee:	4628      	mov	r0, r5
 81111f0:	47b8      	blx	r7
 81111f2:	3001      	adds	r0, #1
 81111f4:	d12c      	bne.n	8111250 <_printf_float+0x250>
 81111f6:	e764      	b.n	81110c2 <_printf_float+0xc2>
 81111f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81111fc:	f240 80e0 	bls.w	81113c0 <_printf_float+0x3c0>
 8111200:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8111204:	2200      	movs	r2, #0
 8111206:	2300      	movs	r3, #0
 8111208:	f7ef fce6 	bl	8100bd8 <__aeabi_dcmpeq>
 811120c:	2800      	cmp	r0, #0
 811120e:	d034      	beq.n	811127a <_printf_float+0x27a>
 8111210:	4a37      	ldr	r2, [pc, #220]	; (81112f0 <_printf_float+0x2f0>)
 8111212:	2301      	movs	r3, #1
 8111214:	4631      	mov	r1, r6
 8111216:	4628      	mov	r0, r5
 8111218:	47b8      	blx	r7
 811121a:	3001      	adds	r0, #1
 811121c:	f43f af51 	beq.w	81110c2 <_printf_float+0xc2>
 8111220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8111224:	429a      	cmp	r2, r3
 8111226:	db02      	blt.n	811122e <_printf_float+0x22e>
 8111228:	6823      	ldr	r3, [r4, #0]
 811122a:	07d8      	lsls	r0, r3, #31
 811122c:	d510      	bpl.n	8111250 <_printf_float+0x250>
 811122e:	ee18 3a10 	vmov	r3, s16
 8111232:	4652      	mov	r2, sl
 8111234:	4631      	mov	r1, r6
 8111236:	4628      	mov	r0, r5
 8111238:	47b8      	blx	r7
 811123a:	3001      	adds	r0, #1
 811123c:	f43f af41 	beq.w	81110c2 <_printf_float+0xc2>
 8111240:	f04f 0800 	mov.w	r8, #0
 8111244:	f104 091a 	add.w	r9, r4, #26
 8111248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 811124a:	3b01      	subs	r3, #1
 811124c:	4543      	cmp	r3, r8
 811124e:	dc09      	bgt.n	8111264 <_printf_float+0x264>
 8111250:	6823      	ldr	r3, [r4, #0]
 8111252:	079b      	lsls	r3, r3, #30
 8111254:	f100 8105 	bmi.w	8111462 <_printf_float+0x462>
 8111258:	68e0      	ldr	r0, [r4, #12]
 811125a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 811125c:	4298      	cmp	r0, r3
 811125e:	bfb8      	it	lt
 8111260:	4618      	movlt	r0, r3
 8111262:	e730      	b.n	81110c6 <_printf_float+0xc6>
 8111264:	2301      	movs	r3, #1
 8111266:	464a      	mov	r2, r9
 8111268:	4631      	mov	r1, r6
 811126a:	4628      	mov	r0, r5
 811126c:	47b8      	blx	r7
 811126e:	3001      	adds	r0, #1
 8111270:	f43f af27 	beq.w	81110c2 <_printf_float+0xc2>
 8111274:	f108 0801 	add.w	r8, r8, #1
 8111278:	e7e6      	b.n	8111248 <_printf_float+0x248>
 811127a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 811127c:	2b00      	cmp	r3, #0
 811127e:	dc39      	bgt.n	81112f4 <_printf_float+0x2f4>
 8111280:	4a1b      	ldr	r2, [pc, #108]	; (81112f0 <_printf_float+0x2f0>)
 8111282:	2301      	movs	r3, #1
 8111284:	4631      	mov	r1, r6
 8111286:	4628      	mov	r0, r5
 8111288:	47b8      	blx	r7
 811128a:	3001      	adds	r0, #1
 811128c:	f43f af19 	beq.w	81110c2 <_printf_float+0xc2>
 8111290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8111294:	4313      	orrs	r3, r2
 8111296:	d102      	bne.n	811129e <_printf_float+0x29e>
 8111298:	6823      	ldr	r3, [r4, #0]
 811129a:	07d9      	lsls	r1, r3, #31
 811129c:	d5d8      	bpl.n	8111250 <_printf_float+0x250>
 811129e:	ee18 3a10 	vmov	r3, s16
 81112a2:	4652      	mov	r2, sl
 81112a4:	4631      	mov	r1, r6
 81112a6:	4628      	mov	r0, r5
 81112a8:	47b8      	blx	r7
 81112aa:	3001      	adds	r0, #1
 81112ac:	f43f af09 	beq.w	81110c2 <_printf_float+0xc2>
 81112b0:	f04f 0900 	mov.w	r9, #0
 81112b4:	f104 0a1a 	add.w	sl, r4, #26
 81112b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81112ba:	425b      	negs	r3, r3
 81112bc:	454b      	cmp	r3, r9
 81112be:	dc01      	bgt.n	81112c4 <_printf_float+0x2c4>
 81112c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81112c2:	e792      	b.n	81111ea <_printf_float+0x1ea>
 81112c4:	2301      	movs	r3, #1
 81112c6:	4652      	mov	r2, sl
 81112c8:	4631      	mov	r1, r6
 81112ca:	4628      	mov	r0, r5
 81112cc:	47b8      	blx	r7
 81112ce:	3001      	adds	r0, #1
 81112d0:	f43f aef7 	beq.w	81110c2 <_printf_float+0xc2>
 81112d4:	f109 0901 	add.w	r9, r9, #1
 81112d8:	e7ee      	b.n	81112b8 <_printf_float+0x2b8>
 81112da:	bf00      	nop
 81112dc:	7fefffff 	.word	0x7fefffff
 81112e0:	08113904 	.word	0x08113904
 81112e4:	08113908 	.word	0x08113908
 81112e8:	08113910 	.word	0x08113910
 81112ec:	0811390c 	.word	0x0811390c
 81112f0:	08113914 	.word	0x08113914
 81112f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81112f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81112f8:	429a      	cmp	r2, r3
 81112fa:	bfa8      	it	ge
 81112fc:	461a      	movge	r2, r3
 81112fe:	2a00      	cmp	r2, #0
 8111300:	4691      	mov	r9, r2
 8111302:	dc37      	bgt.n	8111374 <_printf_float+0x374>
 8111304:	f04f 0b00 	mov.w	fp, #0
 8111308:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811130c:	f104 021a 	add.w	r2, r4, #26
 8111310:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8111312:	9305      	str	r3, [sp, #20]
 8111314:	eba3 0309 	sub.w	r3, r3, r9
 8111318:	455b      	cmp	r3, fp
 811131a:	dc33      	bgt.n	8111384 <_printf_float+0x384>
 811131c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8111320:	429a      	cmp	r2, r3
 8111322:	db3b      	blt.n	811139c <_printf_float+0x39c>
 8111324:	6823      	ldr	r3, [r4, #0]
 8111326:	07da      	lsls	r2, r3, #31
 8111328:	d438      	bmi.n	811139c <_printf_float+0x39c>
 811132a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 811132c:	9b05      	ldr	r3, [sp, #20]
 811132e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8111330:	1ad3      	subs	r3, r2, r3
 8111332:	eba2 0901 	sub.w	r9, r2, r1
 8111336:	4599      	cmp	r9, r3
 8111338:	bfa8      	it	ge
 811133a:	4699      	movge	r9, r3
 811133c:	f1b9 0f00 	cmp.w	r9, #0
 8111340:	dc35      	bgt.n	81113ae <_printf_float+0x3ae>
 8111342:	f04f 0800 	mov.w	r8, #0
 8111346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 811134a:	f104 0a1a 	add.w	sl, r4, #26
 811134e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8111352:	1a9b      	subs	r3, r3, r2
 8111354:	eba3 0309 	sub.w	r3, r3, r9
 8111358:	4543      	cmp	r3, r8
 811135a:	f77f af79 	ble.w	8111250 <_printf_float+0x250>
 811135e:	2301      	movs	r3, #1
 8111360:	4652      	mov	r2, sl
 8111362:	4631      	mov	r1, r6
 8111364:	4628      	mov	r0, r5
 8111366:	47b8      	blx	r7
 8111368:	3001      	adds	r0, #1
 811136a:	f43f aeaa 	beq.w	81110c2 <_printf_float+0xc2>
 811136e:	f108 0801 	add.w	r8, r8, #1
 8111372:	e7ec      	b.n	811134e <_printf_float+0x34e>
 8111374:	4613      	mov	r3, r2
 8111376:	4631      	mov	r1, r6
 8111378:	4642      	mov	r2, r8
 811137a:	4628      	mov	r0, r5
 811137c:	47b8      	blx	r7
 811137e:	3001      	adds	r0, #1
 8111380:	d1c0      	bne.n	8111304 <_printf_float+0x304>
 8111382:	e69e      	b.n	81110c2 <_printf_float+0xc2>
 8111384:	2301      	movs	r3, #1
 8111386:	4631      	mov	r1, r6
 8111388:	4628      	mov	r0, r5
 811138a:	9205      	str	r2, [sp, #20]
 811138c:	47b8      	blx	r7
 811138e:	3001      	adds	r0, #1
 8111390:	f43f ae97 	beq.w	81110c2 <_printf_float+0xc2>
 8111394:	9a05      	ldr	r2, [sp, #20]
 8111396:	f10b 0b01 	add.w	fp, fp, #1
 811139a:	e7b9      	b.n	8111310 <_printf_float+0x310>
 811139c:	ee18 3a10 	vmov	r3, s16
 81113a0:	4652      	mov	r2, sl
 81113a2:	4631      	mov	r1, r6
 81113a4:	4628      	mov	r0, r5
 81113a6:	47b8      	blx	r7
 81113a8:	3001      	adds	r0, #1
 81113aa:	d1be      	bne.n	811132a <_printf_float+0x32a>
 81113ac:	e689      	b.n	81110c2 <_printf_float+0xc2>
 81113ae:	9a05      	ldr	r2, [sp, #20]
 81113b0:	464b      	mov	r3, r9
 81113b2:	4442      	add	r2, r8
 81113b4:	4631      	mov	r1, r6
 81113b6:	4628      	mov	r0, r5
 81113b8:	47b8      	blx	r7
 81113ba:	3001      	adds	r0, #1
 81113bc:	d1c1      	bne.n	8111342 <_printf_float+0x342>
 81113be:	e680      	b.n	81110c2 <_printf_float+0xc2>
 81113c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81113c2:	2a01      	cmp	r2, #1
 81113c4:	dc01      	bgt.n	81113ca <_printf_float+0x3ca>
 81113c6:	07db      	lsls	r3, r3, #31
 81113c8:	d538      	bpl.n	811143c <_printf_float+0x43c>
 81113ca:	2301      	movs	r3, #1
 81113cc:	4642      	mov	r2, r8
 81113ce:	4631      	mov	r1, r6
 81113d0:	4628      	mov	r0, r5
 81113d2:	47b8      	blx	r7
 81113d4:	3001      	adds	r0, #1
 81113d6:	f43f ae74 	beq.w	81110c2 <_printf_float+0xc2>
 81113da:	ee18 3a10 	vmov	r3, s16
 81113de:	4652      	mov	r2, sl
 81113e0:	4631      	mov	r1, r6
 81113e2:	4628      	mov	r0, r5
 81113e4:	47b8      	blx	r7
 81113e6:	3001      	adds	r0, #1
 81113e8:	f43f ae6b 	beq.w	81110c2 <_printf_float+0xc2>
 81113ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81113f0:	2200      	movs	r2, #0
 81113f2:	2300      	movs	r3, #0
 81113f4:	f7ef fbf0 	bl	8100bd8 <__aeabi_dcmpeq>
 81113f8:	b9d8      	cbnz	r0, 8111432 <_printf_float+0x432>
 81113fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81113fc:	f108 0201 	add.w	r2, r8, #1
 8111400:	3b01      	subs	r3, #1
 8111402:	4631      	mov	r1, r6
 8111404:	4628      	mov	r0, r5
 8111406:	47b8      	blx	r7
 8111408:	3001      	adds	r0, #1
 811140a:	d10e      	bne.n	811142a <_printf_float+0x42a>
 811140c:	e659      	b.n	81110c2 <_printf_float+0xc2>
 811140e:	2301      	movs	r3, #1
 8111410:	4652      	mov	r2, sl
 8111412:	4631      	mov	r1, r6
 8111414:	4628      	mov	r0, r5
 8111416:	47b8      	blx	r7
 8111418:	3001      	adds	r0, #1
 811141a:	f43f ae52 	beq.w	81110c2 <_printf_float+0xc2>
 811141e:	f108 0801 	add.w	r8, r8, #1
 8111422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8111424:	3b01      	subs	r3, #1
 8111426:	4543      	cmp	r3, r8
 8111428:	dcf1      	bgt.n	811140e <_printf_float+0x40e>
 811142a:	464b      	mov	r3, r9
 811142c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8111430:	e6dc      	b.n	81111ec <_printf_float+0x1ec>
 8111432:	f04f 0800 	mov.w	r8, #0
 8111436:	f104 0a1a 	add.w	sl, r4, #26
 811143a:	e7f2      	b.n	8111422 <_printf_float+0x422>
 811143c:	2301      	movs	r3, #1
 811143e:	4642      	mov	r2, r8
 8111440:	e7df      	b.n	8111402 <_printf_float+0x402>
 8111442:	2301      	movs	r3, #1
 8111444:	464a      	mov	r2, r9
 8111446:	4631      	mov	r1, r6
 8111448:	4628      	mov	r0, r5
 811144a:	47b8      	blx	r7
 811144c:	3001      	adds	r0, #1
 811144e:	f43f ae38 	beq.w	81110c2 <_printf_float+0xc2>
 8111452:	f108 0801 	add.w	r8, r8, #1
 8111456:	68e3      	ldr	r3, [r4, #12]
 8111458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 811145a:	1a5b      	subs	r3, r3, r1
 811145c:	4543      	cmp	r3, r8
 811145e:	dcf0      	bgt.n	8111442 <_printf_float+0x442>
 8111460:	e6fa      	b.n	8111258 <_printf_float+0x258>
 8111462:	f04f 0800 	mov.w	r8, #0
 8111466:	f104 0919 	add.w	r9, r4, #25
 811146a:	e7f4      	b.n	8111456 <_printf_float+0x456>

0811146c <_printf_common>:
 811146c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8111470:	4616      	mov	r6, r2
 8111472:	4699      	mov	r9, r3
 8111474:	688a      	ldr	r2, [r1, #8]
 8111476:	690b      	ldr	r3, [r1, #16]
 8111478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 811147c:	4293      	cmp	r3, r2
 811147e:	bfb8      	it	lt
 8111480:	4613      	movlt	r3, r2
 8111482:	6033      	str	r3, [r6, #0]
 8111484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8111488:	4607      	mov	r7, r0
 811148a:	460c      	mov	r4, r1
 811148c:	b10a      	cbz	r2, 8111492 <_printf_common+0x26>
 811148e:	3301      	adds	r3, #1
 8111490:	6033      	str	r3, [r6, #0]
 8111492:	6823      	ldr	r3, [r4, #0]
 8111494:	0699      	lsls	r1, r3, #26
 8111496:	bf42      	ittt	mi
 8111498:	6833      	ldrmi	r3, [r6, #0]
 811149a:	3302      	addmi	r3, #2
 811149c:	6033      	strmi	r3, [r6, #0]
 811149e:	6825      	ldr	r5, [r4, #0]
 81114a0:	f015 0506 	ands.w	r5, r5, #6
 81114a4:	d106      	bne.n	81114b4 <_printf_common+0x48>
 81114a6:	f104 0a19 	add.w	sl, r4, #25
 81114aa:	68e3      	ldr	r3, [r4, #12]
 81114ac:	6832      	ldr	r2, [r6, #0]
 81114ae:	1a9b      	subs	r3, r3, r2
 81114b0:	42ab      	cmp	r3, r5
 81114b2:	dc26      	bgt.n	8111502 <_printf_common+0x96>
 81114b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81114b8:	1e13      	subs	r3, r2, #0
 81114ba:	6822      	ldr	r2, [r4, #0]
 81114bc:	bf18      	it	ne
 81114be:	2301      	movne	r3, #1
 81114c0:	0692      	lsls	r2, r2, #26
 81114c2:	d42b      	bmi.n	811151c <_printf_common+0xb0>
 81114c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81114c8:	4649      	mov	r1, r9
 81114ca:	4638      	mov	r0, r7
 81114cc:	47c0      	blx	r8
 81114ce:	3001      	adds	r0, #1
 81114d0:	d01e      	beq.n	8111510 <_printf_common+0xa4>
 81114d2:	6823      	ldr	r3, [r4, #0]
 81114d4:	68e5      	ldr	r5, [r4, #12]
 81114d6:	6832      	ldr	r2, [r6, #0]
 81114d8:	f003 0306 	and.w	r3, r3, #6
 81114dc:	2b04      	cmp	r3, #4
 81114de:	bf08      	it	eq
 81114e0:	1aad      	subeq	r5, r5, r2
 81114e2:	68a3      	ldr	r3, [r4, #8]
 81114e4:	6922      	ldr	r2, [r4, #16]
 81114e6:	bf0c      	ite	eq
 81114e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81114ec:	2500      	movne	r5, #0
 81114ee:	4293      	cmp	r3, r2
 81114f0:	bfc4      	itt	gt
 81114f2:	1a9b      	subgt	r3, r3, r2
 81114f4:	18ed      	addgt	r5, r5, r3
 81114f6:	2600      	movs	r6, #0
 81114f8:	341a      	adds	r4, #26
 81114fa:	42b5      	cmp	r5, r6
 81114fc:	d11a      	bne.n	8111534 <_printf_common+0xc8>
 81114fe:	2000      	movs	r0, #0
 8111500:	e008      	b.n	8111514 <_printf_common+0xa8>
 8111502:	2301      	movs	r3, #1
 8111504:	4652      	mov	r2, sl
 8111506:	4649      	mov	r1, r9
 8111508:	4638      	mov	r0, r7
 811150a:	47c0      	blx	r8
 811150c:	3001      	adds	r0, #1
 811150e:	d103      	bne.n	8111518 <_printf_common+0xac>
 8111510:	f04f 30ff 	mov.w	r0, #4294967295
 8111514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8111518:	3501      	adds	r5, #1
 811151a:	e7c6      	b.n	81114aa <_printf_common+0x3e>
 811151c:	18e1      	adds	r1, r4, r3
 811151e:	1c5a      	adds	r2, r3, #1
 8111520:	2030      	movs	r0, #48	; 0x30
 8111522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8111526:	4422      	add	r2, r4
 8111528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 811152c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8111530:	3302      	adds	r3, #2
 8111532:	e7c7      	b.n	81114c4 <_printf_common+0x58>
 8111534:	2301      	movs	r3, #1
 8111536:	4622      	mov	r2, r4
 8111538:	4649      	mov	r1, r9
 811153a:	4638      	mov	r0, r7
 811153c:	47c0      	blx	r8
 811153e:	3001      	adds	r0, #1
 8111540:	d0e6      	beq.n	8111510 <_printf_common+0xa4>
 8111542:	3601      	adds	r6, #1
 8111544:	e7d9      	b.n	81114fa <_printf_common+0x8e>
	...

08111548 <_printf_i>:
 8111548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 811154c:	460c      	mov	r4, r1
 811154e:	4691      	mov	r9, r2
 8111550:	7e27      	ldrb	r7, [r4, #24]
 8111552:	990c      	ldr	r1, [sp, #48]	; 0x30
 8111554:	2f78      	cmp	r7, #120	; 0x78
 8111556:	4680      	mov	r8, r0
 8111558:	469a      	mov	sl, r3
 811155a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 811155e:	d807      	bhi.n	8111570 <_printf_i+0x28>
 8111560:	2f62      	cmp	r7, #98	; 0x62
 8111562:	d80a      	bhi.n	811157a <_printf_i+0x32>
 8111564:	2f00      	cmp	r7, #0
 8111566:	f000 80d8 	beq.w	811171a <_printf_i+0x1d2>
 811156a:	2f58      	cmp	r7, #88	; 0x58
 811156c:	f000 80a3 	beq.w	81116b6 <_printf_i+0x16e>
 8111570:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8111574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8111578:	e03a      	b.n	81115f0 <_printf_i+0xa8>
 811157a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 811157e:	2b15      	cmp	r3, #21
 8111580:	d8f6      	bhi.n	8111570 <_printf_i+0x28>
 8111582:	a001      	add	r0, pc, #4	; (adr r0, 8111588 <_printf_i+0x40>)
 8111584:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8111588:	081115e1 	.word	0x081115e1
 811158c:	081115f5 	.word	0x081115f5
 8111590:	08111571 	.word	0x08111571
 8111594:	08111571 	.word	0x08111571
 8111598:	08111571 	.word	0x08111571
 811159c:	08111571 	.word	0x08111571
 81115a0:	081115f5 	.word	0x081115f5
 81115a4:	08111571 	.word	0x08111571
 81115a8:	08111571 	.word	0x08111571
 81115ac:	08111571 	.word	0x08111571
 81115b0:	08111571 	.word	0x08111571
 81115b4:	08111701 	.word	0x08111701
 81115b8:	08111625 	.word	0x08111625
 81115bc:	081116e3 	.word	0x081116e3
 81115c0:	08111571 	.word	0x08111571
 81115c4:	08111571 	.word	0x08111571
 81115c8:	08111723 	.word	0x08111723
 81115cc:	08111571 	.word	0x08111571
 81115d0:	08111625 	.word	0x08111625
 81115d4:	08111571 	.word	0x08111571
 81115d8:	08111571 	.word	0x08111571
 81115dc:	081116eb 	.word	0x081116eb
 81115e0:	680b      	ldr	r3, [r1, #0]
 81115e2:	1d1a      	adds	r2, r3, #4
 81115e4:	681b      	ldr	r3, [r3, #0]
 81115e6:	600a      	str	r2, [r1, #0]
 81115e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81115ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81115f0:	2301      	movs	r3, #1
 81115f2:	e0a3      	b.n	811173c <_printf_i+0x1f4>
 81115f4:	6825      	ldr	r5, [r4, #0]
 81115f6:	6808      	ldr	r0, [r1, #0]
 81115f8:	062e      	lsls	r6, r5, #24
 81115fa:	f100 0304 	add.w	r3, r0, #4
 81115fe:	d50a      	bpl.n	8111616 <_printf_i+0xce>
 8111600:	6805      	ldr	r5, [r0, #0]
 8111602:	600b      	str	r3, [r1, #0]
 8111604:	2d00      	cmp	r5, #0
 8111606:	da03      	bge.n	8111610 <_printf_i+0xc8>
 8111608:	232d      	movs	r3, #45	; 0x2d
 811160a:	426d      	negs	r5, r5
 811160c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8111610:	485e      	ldr	r0, [pc, #376]	; (811178c <_printf_i+0x244>)
 8111612:	230a      	movs	r3, #10
 8111614:	e019      	b.n	811164a <_printf_i+0x102>
 8111616:	f015 0f40 	tst.w	r5, #64	; 0x40
 811161a:	6805      	ldr	r5, [r0, #0]
 811161c:	600b      	str	r3, [r1, #0]
 811161e:	bf18      	it	ne
 8111620:	b22d      	sxthne	r5, r5
 8111622:	e7ef      	b.n	8111604 <_printf_i+0xbc>
 8111624:	680b      	ldr	r3, [r1, #0]
 8111626:	6825      	ldr	r5, [r4, #0]
 8111628:	1d18      	adds	r0, r3, #4
 811162a:	6008      	str	r0, [r1, #0]
 811162c:	0628      	lsls	r0, r5, #24
 811162e:	d501      	bpl.n	8111634 <_printf_i+0xec>
 8111630:	681d      	ldr	r5, [r3, #0]
 8111632:	e002      	b.n	811163a <_printf_i+0xf2>
 8111634:	0669      	lsls	r1, r5, #25
 8111636:	d5fb      	bpl.n	8111630 <_printf_i+0xe8>
 8111638:	881d      	ldrh	r5, [r3, #0]
 811163a:	4854      	ldr	r0, [pc, #336]	; (811178c <_printf_i+0x244>)
 811163c:	2f6f      	cmp	r7, #111	; 0x6f
 811163e:	bf0c      	ite	eq
 8111640:	2308      	moveq	r3, #8
 8111642:	230a      	movne	r3, #10
 8111644:	2100      	movs	r1, #0
 8111646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 811164a:	6866      	ldr	r6, [r4, #4]
 811164c:	60a6      	str	r6, [r4, #8]
 811164e:	2e00      	cmp	r6, #0
 8111650:	bfa2      	ittt	ge
 8111652:	6821      	ldrge	r1, [r4, #0]
 8111654:	f021 0104 	bicge.w	r1, r1, #4
 8111658:	6021      	strge	r1, [r4, #0]
 811165a:	b90d      	cbnz	r5, 8111660 <_printf_i+0x118>
 811165c:	2e00      	cmp	r6, #0
 811165e:	d04d      	beq.n	81116fc <_printf_i+0x1b4>
 8111660:	4616      	mov	r6, r2
 8111662:	fbb5 f1f3 	udiv	r1, r5, r3
 8111666:	fb03 5711 	mls	r7, r3, r1, r5
 811166a:	5dc7      	ldrb	r7, [r0, r7]
 811166c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8111670:	462f      	mov	r7, r5
 8111672:	42bb      	cmp	r3, r7
 8111674:	460d      	mov	r5, r1
 8111676:	d9f4      	bls.n	8111662 <_printf_i+0x11a>
 8111678:	2b08      	cmp	r3, #8
 811167a:	d10b      	bne.n	8111694 <_printf_i+0x14c>
 811167c:	6823      	ldr	r3, [r4, #0]
 811167e:	07df      	lsls	r7, r3, #31
 8111680:	d508      	bpl.n	8111694 <_printf_i+0x14c>
 8111682:	6923      	ldr	r3, [r4, #16]
 8111684:	6861      	ldr	r1, [r4, #4]
 8111686:	4299      	cmp	r1, r3
 8111688:	bfde      	ittt	le
 811168a:	2330      	movle	r3, #48	; 0x30
 811168c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8111690:	f106 36ff 	addle.w	r6, r6, #4294967295
 8111694:	1b92      	subs	r2, r2, r6
 8111696:	6122      	str	r2, [r4, #16]
 8111698:	f8cd a000 	str.w	sl, [sp]
 811169c:	464b      	mov	r3, r9
 811169e:	aa03      	add	r2, sp, #12
 81116a0:	4621      	mov	r1, r4
 81116a2:	4640      	mov	r0, r8
 81116a4:	f7ff fee2 	bl	811146c <_printf_common>
 81116a8:	3001      	adds	r0, #1
 81116aa:	d14c      	bne.n	8111746 <_printf_i+0x1fe>
 81116ac:	f04f 30ff 	mov.w	r0, #4294967295
 81116b0:	b004      	add	sp, #16
 81116b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81116b6:	4835      	ldr	r0, [pc, #212]	; (811178c <_printf_i+0x244>)
 81116b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81116bc:	6823      	ldr	r3, [r4, #0]
 81116be:	680e      	ldr	r6, [r1, #0]
 81116c0:	061f      	lsls	r7, r3, #24
 81116c2:	f856 5b04 	ldr.w	r5, [r6], #4
 81116c6:	600e      	str	r6, [r1, #0]
 81116c8:	d514      	bpl.n	81116f4 <_printf_i+0x1ac>
 81116ca:	07d9      	lsls	r1, r3, #31
 81116cc:	bf44      	itt	mi
 81116ce:	f043 0320 	orrmi.w	r3, r3, #32
 81116d2:	6023      	strmi	r3, [r4, #0]
 81116d4:	b91d      	cbnz	r5, 81116de <_printf_i+0x196>
 81116d6:	6823      	ldr	r3, [r4, #0]
 81116d8:	f023 0320 	bic.w	r3, r3, #32
 81116dc:	6023      	str	r3, [r4, #0]
 81116de:	2310      	movs	r3, #16
 81116e0:	e7b0      	b.n	8111644 <_printf_i+0xfc>
 81116e2:	6823      	ldr	r3, [r4, #0]
 81116e4:	f043 0320 	orr.w	r3, r3, #32
 81116e8:	6023      	str	r3, [r4, #0]
 81116ea:	2378      	movs	r3, #120	; 0x78
 81116ec:	4828      	ldr	r0, [pc, #160]	; (8111790 <_printf_i+0x248>)
 81116ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81116f2:	e7e3      	b.n	81116bc <_printf_i+0x174>
 81116f4:	065e      	lsls	r6, r3, #25
 81116f6:	bf48      	it	mi
 81116f8:	b2ad      	uxthmi	r5, r5
 81116fa:	e7e6      	b.n	81116ca <_printf_i+0x182>
 81116fc:	4616      	mov	r6, r2
 81116fe:	e7bb      	b.n	8111678 <_printf_i+0x130>
 8111700:	680b      	ldr	r3, [r1, #0]
 8111702:	6826      	ldr	r6, [r4, #0]
 8111704:	6960      	ldr	r0, [r4, #20]
 8111706:	1d1d      	adds	r5, r3, #4
 8111708:	600d      	str	r5, [r1, #0]
 811170a:	0635      	lsls	r5, r6, #24
 811170c:	681b      	ldr	r3, [r3, #0]
 811170e:	d501      	bpl.n	8111714 <_printf_i+0x1cc>
 8111710:	6018      	str	r0, [r3, #0]
 8111712:	e002      	b.n	811171a <_printf_i+0x1d2>
 8111714:	0671      	lsls	r1, r6, #25
 8111716:	d5fb      	bpl.n	8111710 <_printf_i+0x1c8>
 8111718:	8018      	strh	r0, [r3, #0]
 811171a:	2300      	movs	r3, #0
 811171c:	6123      	str	r3, [r4, #16]
 811171e:	4616      	mov	r6, r2
 8111720:	e7ba      	b.n	8111698 <_printf_i+0x150>
 8111722:	680b      	ldr	r3, [r1, #0]
 8111724:	1d1a      	adds	r2, r3, #4
 8111726:	600a      	str	r2, [r1, #0]
 8111728:	681e      	ldr	r6, [r3, #0]
 811172a:	6862      	ldr	r2, [r4, #4]
 811172c:	2100      	movs	r1, #0
 811172e:	4630      	mov	r0, r6
 8111730:	f7ee fdde 	bl	81002f0 <memchr>
 8111734:	b108      	cbz	r0, 811173a <_printf_i+0x1f2>
 8111736:	1b80      	subs	r0, r0, r6
 8111738:	6060      	str	r0, [r4, #4]
 811173a:	6863      	ldr	r3, [r4, #4]
 811173c:	6123      	str	r3, [r4, #16]
 811173e:	2300      	movs	r3, #0
 8111740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8111744:	e7a8      	b.n	8111698 <_printf_i+0x150>
 8111746:	6923      	ldr	r3, [r4, #16]
 8111748:	4632      	mov	r2, r6
 811174a:	4649      	mov	r1, r9
 811174c:	4640      	mov	r0, r8
 811174e:	47d0      	blx	sl
 8111750:	3001      	adds	r0, #1
 8111752:	d0ab      	beq.n	81116ac <_printf_i+0x164>
 8111754:	6823      	ldr	r3, [r4, #0]
 8111756:	079b      	lsls	r3, r3, #30
 8111758:	d413      	bmi.n	8111782 <_printf_i+0x23a>
 811175a:	68e0      	ldr	r0, [r4, #12]
 811175c:	9b03      	ldr	r3, [sp, #12]
 811175e:	4298      	cmp	r0, r3
 8111760:	bfb8      	it	lt
 8111762:	4618      	movlt	r0, r3
 8111764:	e7a4      	b.n	81116b0 <_printf_i+0x168>
 8111766:	2301      	movs	r3, #1
 8111768:	4632      	mov	r2, r6
 811176a:	4649      	mov	r1, r9
 811176c:	4640      	mov	r0, r8
 811176e:	47d0      	blx	sl
 8111770:	3001      	adds	r0, #1
 8111772:	d09b      	beq.n	81116ac <_printf_i+0x164>
 8111774:	3501      	adds	r5, #1
 8111776:	68e3      	ldr	r3, [r4, #12]
 8111778:	9903      	ldr	r1, [sp, #12]
 811177a:	1a5b      	subs	r3, r3, r1
 811177c:	42ab      	cmp	r3, r5
 811177e:	dcf2      	bgt.n	8111766 <_printf_i+0x21e>
 8111780:	e7eb      	b.n	811175a <_printf_i+0x212>
 8111782:	2500      	movs	r5, #0
 8111784:	f104 0619 	add.w	r6, r4, #25
 8111788:	e7f5      	b.n	8111776 <_printf_i+0x22e>
 811178a:	bf00      	nop
 811178c:	08113916 	.word	0x08113916
 8111790:	08113927 	.word	0x08113927

08111794 <quorem>:
 8111794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8111798:	6903      	ldr	r3, [r0, #16]
 811179a:	690c      	ldr	r4, [r1, #16]
 811179c:	42a3      	cmp	r3, r4
 811179e:	4607      	mov	r7, r0
 81117a0:	f2c0 8081 	blt.w	81118a6 <quorem+0x112>
 81117a4:	3c01      	subs	r4, #1
 81117a6:	f101 0814 	add.w	r8, r1, #20
 81117aa:	f100 0514 	add.w	r5, r0, #20
 81117ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81117b2:	9301      	str	r3, [sp, #4]
 81117b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81117b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81117bc:	3301      	adds	r3, #1
 81117be:	429a      	cmp	r2, r3
 81117c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81117c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81117c8:	fbb2 f6f3 	udiv	r6, r2, r3
 81117cc:	d331      	bcc.n	8111832 <quorem+0x9e>
 81117ce:	f04f 0e00 	mov.w	lr, #0
 81117d2:	4640      	mov	r0, r8
 81117d4:	46ac      	mov	ip, r5
 81117d6:	46f2      	mov	sl, lr
 81117d8:	f850 2b04 	ldr.w	r2, [r0], #4
 81117dc:	b293      	uxth	r3, r2
 81117de:	fb06 e303 	mla	r3, r6, r3, lr
 81117e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81117e6:	b29b      	uxth	r3, r3
 81117e8:	ebaa 0303 	sub.w	r3, sl, r3
 81117ec:	0c12      	lsrs	r2, r2, #16
 81117ee:	f8dc a000 	ldr.w	sl, [ip]
 81117f2:	fb06 e202 	mla	r2, r6, r2, lr
 81117f6:	fa13 f38a 	uxtah	r3, r3, sl
 81117fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81117fe:	fa1f fa82 	uxth.w	sl, r2
 8111802:	f8dc 2000 	ldr.w	r2, [ip]
 8111806:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 811180a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 811180e:	b29b      	uxth	r3, r3
 8111810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8111814:	4581      	cmp	r9, r0
 8111816:	f84c 3b04 	str.w	r3, [ip], #4
 811181a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 811181e:	d2db      	bcs.n	81117d8 <quorem+0x44>
 8111820:	f855 300b 	ldr.w	r3, [r5, fp]
 8111824:	b92b      	cbnz	r3, 8111832 <quorem+0x9e>
 8111826:	9b01      	ldr	r3, [sp, #4]
 8111828:	3b04      	subs	r3, #4
 811182a:	429d      	cmp	r5, r3
 811182c:	461a      	mov	r2, r3
 811182e:	d32e      	bcc.n	811188e <quorem+0xfa>
 8111830:	613c      	str	r4, [r7, #16]
 8111832:	4638      	mov	r0, r7
 8111834:	f001 f8b2 	bl	811299c <__mcmp>
 8111838:	2800      	cmp	r0, #0
 811183a:	db24      	blt.n	8111886 <quorem+0xf2>
 811183c:	3601      	adds	r6, #1
 811183e:	4628      	mov	r0, r5
 8111840:	f04f 0c00 	mov.w	ip, #0
 8111844:	f858 2b04 	ldr.w	r2, [r8], #4
 8111848:	f8d0 e000 	ldr.w	lr, [r0]
 811184c:	b293      	uxth	r3, r2
 811184e:	ebac 0303 	sub.w	r3, ip, r3
 8111852:	0c12      	lsrs	r2, r2, #16
 8111854:	fa13 f38e 	uxtah	r3, r3, lr
 8111858:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 811185c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8111860:	b29b      	uxth	r3, r3
 8111862:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8111866:	45c1      	cmp	r9, r8
 8111868:	f840 3b04 	str.w	r3, [r0], #4
 811186c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8111870:	d2e8      	bcs.n	8111844 <quorem+0xb0>
 8111872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8111876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 811187a:	b922      	cbnz	r2, 8111886 <quorem+0xf2>
 811187c:	3b04      	subs	r3, #4
 811187e:	429d      	cmp	r5, r3
 8111880:	461a      	mov	r2, r3
 8111882:	d30a      	bcc.n	811189a <quorem+0x106>
 8111884:	613c      	str	r4, [r7, #16]
 8111886:	4630      	mov	r0, r6
 8111888:	b003      	add	sp, #12
 811188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 811188e:	6812      	ldr	r2, [r2, #0]
 8111890:	3b04      	subs	r3, #4
 8111892:	2a00      	cmp	r2, #0
 8111894:	d1cc      	bne.n	8111830 <quorem+0x9c>
 8111896:	3c01      	subs	r4, #1
 8111898:	e7c7      	b.n	811182a <quorem+0x96>
 811189a:	6812      	ldr	r2, [r2, #0]
 811189c:	3b04      	subs	r3, #4
 811189e:	2a00      	cmp	r2, #0
 81118a0:	d1f0      	bne.n	8111884 <quorem+0xf0>
 81118a2:	3c01      	subs	r4, #1
 81118a4:	e7eb      	b.n	811187e <quorem+0xea>
 81118a6:	2000      	movs	r0, #0
 81118a8:	e7ee      	b.n	8111888 <quorem+0xf4>
 81118aa:	0000      	movs	r0, r0
 81118ac:	0000      	movs	r0, r0
	...

081118b0 <_dtoa_r>:
 81118b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81118b4:	ed2d 8b02 	vpush	{d8}
 81118b8:	ec57 6b10 	vmov	r6, r7, d0
 81118bc:	b095      	sub	sp, #84	; 0x54
 81118be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81118c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81118c4:	9105      	str	r1, [sp, #20]
 81118c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 81118ca:	4604      	mov	r4, r0
 81118cc:	9209      	str	r2, [sp, #36]	; 0x24
 81118ce:	930f      	str	r3, [sp, #60]	; 0x3c
 81118d0:	b975      	cbnz	r5, 81118f0 <_dtoa_r+0x40>
 81118d2:	2010      	movs	r0, #16
 81118d4:	f000 fddc 	bl	8112490 <malloc>
 81118d8:	4602      	mov	r2, r0
 81118da:	6260      	str	r0, [r4, #36]	; 0x24
 81118dc:	b920      	cbnz	r0, 81118e8 <_dtoa_r+0x38>
 81118de:	4bb2      	ldr	r3, [pc, #712]	; (8111ba8 <_dtoa_r+0x2f8>)
 81118e0:	21ea      	movs	r1, #234	; 0xea
 81118e2:	48b2      	ldr	r0, [pc, #712]	; (8111bac <_dtoa_r+0x2fc>)
 81118e4:	f001 fa24 	bl	8112d30 <__assert_func>
 81118e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81118ec:	6005      	str	r5, [r0, #0]
 81118ee:	60c5      	str	r5, [r0, #12]
 81118f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81118f2:	6819      	ldr	r1, [r3, #0]
 81118f4:	b151      	cbz	r1, 811190c <_dtoa_r+0x5c>
 81118f6:	685a      	ldr	r2, [r3, #4]
 81118f8:	604a      	str	r2, [r1, #4]
 81118fa:	2301      	movs	r3, #1
 81118fc:	4093      	lsls	r3, r2
 81118fe:	608b      	str	r3, [r1, #8]
 8111900:	4620      	mov	r0, r4
 8111902:	f000 fe0d 	bl	8112520 <_Bfree>
 8111906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8111908:	2200      	movs	r2, #0
 811190a:	601a      	str	r2, [r3, #0]
 811190c:	1e3b      	subs	r3, r7, #0
 811190e:	bfb9      	ittee	lt
 8111910:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8111914:	9303      	strlt	r3, [sp, #12]
 8111916:	2300      	movge	r3, #0
 8111918:	f8c8 3000 	strge.w	r3, [r8]
 811191c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8111920:	4ba3      	ldr	r3, [pc, #652]	; (8111bb0 <_dtoa_r+0x300>)
 8111922:	bfbc      	itt	lt
 8111924:	2201      	movlt	r2, #1
 8111926:	f8c8 2000 	strlt.w	r2, [r8]
 811192a:	ea33 0309 	bics.w	r3, r3, r9
 811192e:	d11b      	bne.n	8111968 <_dtoa_r+0xb8>
 8111930:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8111932:	f242 730f 	movw	r3, #9999	; 0x270f
 8111936:	6013      	str	r3, [r2, #0]
 8111938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 811193c:	4333      	orrs	r3, r6
 811193e:	f000 857a 	beq.w	8112436 <_dtoa_r+0xb86>
 8111942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8111944:	b963      	cbnz	r3, 8111960 <_dtoa_r+0xb0>
 8111946:	4b9b      	ldr	r3, [pc, #620]	; (8111bb4 <_dtoa_r+0x304>)
 8111948:	e024      	b.n	8111994 <_dtoa_r+0xe4>
 811194a:	4b9b      	ldr	r3, [pc, #620]	; (8111bb8 <_dtoa_r+0x308>)
 811194c:	9300      	str	r3, [sp, #0]
 811194e:	3308      	adds	r3, #8
 8111950:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8111952:	6013      	str	r3, [r2, #0]
 8111954:	9800      	ldr	r0, [sp, #0]
 8111956:	b015      	add	sp, #84	; 0x54
 8111958:	ecbd 8b02 	vpop	{d8}
 811195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8111960:	4b94      	ldr	r3, [pc, #592]	; (8111bb4 <_dtoa_r+0x304>)
 8111962:	9300      	str	r3, [sp, #0]
 8111964:	3303      	adds	r3, #3
 8111966:	e7f3      	b.n	8111950 <_dtoa_r+0xa0>
 8111968:	ed9d 7b02 	vldr	d7, [sp, #8]
 811196c:	2200      	movs	r2, #0
 811196e:	ec51 0b17 	vmov	r0, r1, d7
 8111972:	2300      	movs	r3, #0
 8111974:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8111978:	f7ef f92e 	bl	8100bd8 <__aeabi_dcmpeq>
 811197c:	4680      	mov	r8, r0
 811197e:	b158      	cbz	r0, 8111998 <_dtoa_r+0xe8>
 8111980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8111982:	2301      	movs	r3, #1
 8111984:	6013      	str	r3, [r2, #0]
 8111986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8111988:	2b00      	cmp	r3, #0
 811198a:	f000 8551 	beq.w	8112430 <_dtoa_r+0xb80>
 811198e:	488b      	ldr	r0, [pc, #556]	; (8111bbc <_dtoa_r+0x30c>)
 8111990:	6018      	str	r0, [r3, #0]
 8111992:	1e43      	subs	r3, r0, #1
 8111994:	9300      	str	r3, [sp, #0]
 8111996:	e7dd      	b.n	8111954 <_dtoa_r+0xa4>
 8111998:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 811199c:	aa12      	add	r2, sp, #72	; 0x48
 811199e:	a913      	add	r1, sp, #76	; 0x4c
 81119a0:	4620      	mov	r0, r4
 81119a2:	f001 f89f 	bl	8112ae4 <__d2b>
 81119a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81119aa:	4683      	mov	fp, r0
 81119ac:	2d00      	cmp	r5, #0
 81119ae:	d07c      	beq.n	8111aaa <_dtoa_r+0x1fa>
 81119b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81119b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 81119b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81119ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 81119be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81119c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81119c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81119ca:	4b7d      	ldr	r3, [pc, #500]	; (8111bc0 <_dtoa_r+0x310>)
 81119cc:	2200      	movs	r2, #0
 81119ce:	4630      	mov	r0, r6
 81119d0:	4639      	mov	r1, r7
 81119d2:	f7ee fce1 	bl	8100398 <__aeabi_dsub>
 81119d6:	a36e      	add	r3, pc, #440	; (adr r3, 8111b90 <_dtoa_r+0x2e0>)
 81119d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81119dc:	f7ee fe94 	bl	8100708 <__aeabi_dmul>
 81119e0:	a36d      	add	r3, pc, #436	; (adr r3, 8111b98 <_dtoa_r+0x2e8>)
 81119e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81119e6:	f7ee fcd9 	bl	810039c <__adddf3>
 81119ea:	4606      	mov	r6, r0
 81119ec:	4628      	mov	r0, r5
 81119ee:	460f      	mov	r7, r1
 81119f0:	f7ee fe20 	bl	8100634 <__aeabi_i2d>
 81119f4:	a36a      	add	r3, pc, #424	; (adr r3, 8111ba0 <_dtoa_r+0x2f0>)
 81119f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81119fa:	f7ee fe85 	bl	8100708 <__aeabi_dmul>
 81119fe:	4602      	mov	r2, r0
 8111a00:	460b      	mov	r3, r1
 8111a02:	4630      	mov	r0, r6
 8111a04:	4639      	mov	r1, r7
 8111a06:	f7ee fcc9 	bl	810039c <__adddf3>
 8111a0a:	4606      	mov	r6, r0
 8111a0c:	460f      	mov	r7, r1
 8111a0e:	f7ef f92b 	bl	8100c68 <__aeabi_d2iz>
 8111a12:	2200      	movs	r2, #0
 8111a14:	4682      	mov	sl, r0
 8111a16:	2300      	movs	r3, #0
 8111a18:	4630      	mov	r0, r6
 8111a1a:	4639      	mov	r1, r7
 8111a1c:	f7ef f8e6 	bl	8100bec <__aeabi_dcmplt>
 8111a20:	b148      	cbz	r0, 8111a36 <_dtoa_r+0x186>
 8111a22:	4650      	mov	r0, sl
 8111a24:	f7ee fe06 	bl	8100634 <__aeabi_i2d>
 8111a28:	4632      	mov	r2, r6
 8111a2a:	463b      	mov	r3, r7
 8111a2c:	f7ef f8d4 	bl	8100bd8 <__aeabi_dcmpeq>
 8111a30:	b908      	cbnz	r0, 8111a36 <_dtoa_r+0x186>
 8111a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111a36:	f1ba 0f16 	cmp.w	sl, #22
 8111a3a:	d854      	bhi.n	8111ae6 <_dtoa_r+0x236>
 8111a3c:	4b61      	ldr	r3, [pc, #388]	; (8111bc4 <_dtoa_r+0x314>)
 8111a3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8111a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111a46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8111a4a:	f7ef f8cf 	bl	8100bec <__aeabi_dcmplt>
 8111a4e:	2800      	cmp	r0, #0
 8111a50:	d04b      	beq.n	8111aea <_dtoa_r+0x23a>
 8111a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8111a56:	2300      	movs	r3, #0
 8111a58:	930e      	str	r3, [sp, #56]	; 0x38
 8111a5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8111a5c:	1b5d      	subs	r5, r3, r5
 8111a5e:	1e6b      	subs	r3, r5, #1
 8111a60:	9304      	str	r3, [sp, #16]
 8111a62:	bf43      	ittte	mi
 8111a64:	2300      	movmi	r3, #0
 8111a66:	f1c5 0801 	rsbmi	r8, r5, #1
 8111a6a:	9304      	strmi	r3, [sp, #16]
 8111a6c:	f04f 0800 	movpl.w	r8, #0
 8111a70:	f1ba 0f00 	cmp.w	sl, #0
 8111a74:	db3b      	blt.n	8111aee <_dtoa_r+0x23e>
 8111a76:	9b04      	ldr	r3, [sp, #16]
 8111a78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8111a7c:	4453      	add	r3, sl
 8111a7e:	9304      	str	r3, [sp, #16]
 8111a80:	2300      	movs	r3, #0
 8111a82:	9306      	str	r3, [sp, #24]
 8111a84:	9b05      	ldr	r3, [sp, #20]
 8111a86:	2b09      	cmp	r3, #9
 8111a88:	d869      	bhi.n	8111b5e <_dtoa_r+0x2ae>
 8111a8a:	2b05      	cmp	r3, #5
 8111a8c:	bfc4      	itt	gt
 8111a8e:	3b04      	subgt	r3, #4
 8111a90:	9305      	strgt	r3, [sp, #20]
 8111a92:	9b05      	ldr	r3, [sp, #20]
 8111a94:	f1a3 0302 	sub.w	r3, r3, #2
 8111a98:	bfcc      	ite	gt
 8111a9a:	2500      	movgt	r5, #0
 8111a9c:	2501      	movle	r5, #1
 8111a9e:	2b03      	cmp	r3, #3
 8111aa0:	d869      	bhi.n	8111b76 <_dtoa_r+0x2c6>
 8111aa2:	e8df f003 	tbb	[pc, r3]
 8111aa6:	4e2c      	.short	0x4e2c
 8111aa8:	5a4c      	.short	0x5a4c
 8111aaa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8111aae:	441d      	add	r5, r3
 8111ab0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8111ab4:	2b20      	cmp	r3, #32
 8111ab6:	bfc1      	itttt	gt
 8111ab8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8111abc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8111ac0:	fa09 f303 	lslgt.w	r3, r9, r3
 8111ac4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8111ac8:	bfda      	itte	le
 8111aca:	f1c3 0320 	rsble	r3, r3, #32
 8111ace:	fa06 f003 	lslle.w	r0, r6, r3
 8111ad2:	4318      	orrgt	r0, r3
 8111ad4:	f7ee fd9e 	bl	8100614 <__aeabi_ui2d>
 8111ad8:	2301      	movs	r3, #1
 8111ada:	4606      	mov	r6, r0
 8111adc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8111ae0:	3d01      	subs	r5, #1
 8111ae2:	9310      	str	r3, [sp, #64]	; 0x40
 8111ae4:	e771      	b.n	81119ca <_dtoa_r+0x11a>
 8111ae6:	2301      	movs	r3, #1
 8111ae8:	e7b6      	b.n	8111a58 <_dtoa_r+0x1a8>
 8111aea:	900e      	str	r0, [sp, #56]	; 0x38
 8111aec:	e7b5      	b.n	8111a5a <_dtoa_r+0x1aa>
 8111aee:	f1ca 0300 	rsb	r3, sl, #0
 8111af2:	9306      	str	r3, [sp, #24]
 8111af4:	2300      	movs	r3, #0
 8111af6:	eba8 080a 	sub.w	r8, r8, sl
 8111afa:	930d      	str	r3, [sp, #52]	; 0x34
 8111afc:	e7c2      	b.n	8111a84 <_dtoa_r+0x1d4>
 8111afe:	2300      	movs	r3, #0
 8111b00:	9308      	str	r3, [sp, #32]
 8111b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111b04:	2b00      	cmp	r3, #0
 8111b06:	dc39      	bgt.n	8111b7c <_dtoa_r+0x2cc>
 8111b08:	f04f 0901 	mov.w	r9, #1
 8111b0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8111b10:	464b      	mov	r3, r9
 8111b12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8111b16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8111b18:	2200      	movs	r2, #0
 8111b1a:	6042      	str	r2, [r0, #4]
 8111b1c:	2204      	movs	r2, #4
 8111b1e:	f102 0614 	add.w	r6, r2, #20
 8111b22:	429e      	cmp	r6, r3
 8111b24:	6841      	ldr	r1, [r0, #4]
 8111b26:	d92f      	bls.n	8111b88 <_dtoa_r+0x2d8>
 8111b28:	4620      	mov	r0, r4
 8111b2a:	f000 fcb9 	bl	81124a0 <_Balloc>
 8111b2e:	9000      	str	r0, [sp, #0]
 8111b30:	2800      	cmp	r0, #0
 8111b32:	d14b      	bne.n	8111bcc <_dtoa_r+0x31c>
 8111b34:	4b24      	ldr	r3, [pc, #144]	; (8111bc8 <_dtoa_r+0x318>)
 8111b36:	4602      	mov	r2, r0
 8111b38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8111b3c:	e6d1      	b.n	81118e2 <_dtoa_r+0x32>
 8111b3e:	2301      	movs	r3, #1
 8111b40:	e7de      	b.n	8111b00 <_dtoa_r+0x250>
 8111b42:	2300      	movs	r3, #0
 8111b44:	9308      	str	r3, [sp, #32]
 8111b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111b48:	eb0a 0903 	add.w	r9, sl, r3
 8111b4c:	f109 0301 	add.w	r3, r9, #1
 8111b50:	2b01      	cmp	r3, #1
 8111b52:	9301      	str	r3, [sp, #4]
 8111b54:	bfb8      	it	lt
 8111b56:	2301      	movlt	r3, #1
 8111b58:	e7dd      	b.n	8111b16 <_dtoa_r+0x266>
 8111b5a:	2301      	movs	r3, #1
 8111b5c:	e7f2      	b.n	8111b44 <_dtoa_r+0x294>
 8111b5e:	2501      	movs	r5, #1
 8111b60:	2300      	movs	r3, #0
 8111b62:	9305      	str	r3, [sp, #20]
 8111b64:	9508      	str	r5, [sp, #32]
 8111b66:	f04f 39ff 	mov.w	r9, #4294967295
 8111b6a:	2200      	movs	r2, #0
 8111b6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8111b70:	2312      	movs	r3, #18
 8111b72:	9209      	str	r2, [sp, #36]	; 0x24
 8111b74:	e7cf      	b.n	8111b16 <_dtoa_r+0x266>
 8111b76:	2301      	movs	r3, #1
 8111b78:	9308      	str	r3, [sp, #32]
 8111b7a:	e7f4      	b.n	8111b66 <_dtoa_r+0x2b6>
 8111b7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8111b80:	f8cd 9004 	str.w	r9, [sp, #4]
 8111b84:	464b      	mov	r3, r9
 8111b86:	e7c6      	b.n	8111b16 <_dtoa_r+0x266>
 8111b88:	3101      	adds	r1, #1
 8111b8a:	6041      	str	r1, [r0, #4]
 8111b8c:	0052      	lsls	r2, r2, #1
 8111b8e:	e7c6      	b.n	8111b1e <_dtoa_r+0x26e>
 8111b90:	636f4361 	.word	0x636f4361
 8111b94:	3fd287a7 	.word	0x3fd287a7
 8111b98:	8b60c8b3 	.word	0x8b60c8b3
 8111b9c:	3fc68a28 	.word	0x3fc68a28
 8111ba0:	509f79fb 	.word	0x509f79fb
 8111ba4:	3fd34413 	.word	0x3fd34413
 8111ba8:	08113945 	.word	0x08113945
 8111bac:	0811395c 	.word	0x0811395c
 8111bb0:	7ff00000 	.word	0x7ff00000
 8111bb4:	08113941 	.word	0x08113941
 8111bb8:	08113938 	.word	0x08113938
 8111bbc:	08113915 	.word	0x08113915
 8111bc0:	3ff80000 	.word	0x3ff80000
 8111bc4:	08113a58 	.word	0x08113a58
 8111bc8:	081139bb 	.word	0x081139bb
 8111bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8111bce:	9a00      	ldr	r2, [sp, #0]
 8111bd0:	601a      	str	r2, [r3, #0]
 8111bd2:	9b01      	ldr	r3, [sp, #4]
 8111bd4:	2b0e      	cmp	r3, #14
 8111bd6:	f200 80ad 	bhi.w	8111d34 <_dtoa_r+0x484>
 8111bda:	2d00      	cmp	r5, #0
 8111bdc:	f000 80aa 	beq.w	8111d34 <_dtoa_r+0x484>
 8111be0:	f1ba 0f00 	cmp.w	sl, #0
 8111be4:	dd36      	ble.n	8111c54 <_dtoa_r+0x3a4>
 8111be6:	4ac3      	ldr	r2, [pc, #780]	; (8111ef4 <_dtoa_r+0x644>)
 8111be8:	f00a 030f 	and.w	r3, sl, #15
 8111bec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8111bf0:	ed93 7b00 	vldr	d7, [r3]
 8111bf4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8111bf8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8111bfc:	eeb0 8a47 	vmov.f32	s16, s14
 8111c00:	eef0 8a67 	vmov.f32	s17, s15
 8111c04:	d016      	beq.n	8111c34 <_dtoa_r+0x384>
 8111c06:	4bbc      	ldr	r3, [pc, #752]	; (8111ef8 <_dtoa_r+0x648>)
 8111c08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8111c0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8111c10:	f7ee fea4 	bl	810095c <__aeabi_ddiv>
 8111c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111c18:	f007 070f 	and.w	r7, r7, #15
 8111c1c:	2503      	movs	r5, #3
 8111c1e:	4eb6      	ldr	r6, [pc, #728]	; (8111ef8 <_dtoa_r+0x648>)
 8111c20:	b957      	cbnz	r7, 8111c38 <_dtoa_r+0x388>
 8111c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8111c26:	ec53 2b18 	vmov	r2, r3, d8
 8111c2a:	f7ee fe97 	bl	810095c <__aeabi_ddiv>
 8111c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111c32:	e029      	b.n	8111c88 <_dtoa_r+0x3d8>
 8111c34:	2502      	movs	r5, #2
 8111c36:	e7f2      	b.n	8111c1e <_dtoa_r+0x36e>
 8111c38:	07f9      	lsls	r1, r7, #31
 8111c3a:	d508      	bpl.n	8111c4e <_dtoa_r+0x39e>
 8111c3c:	ec51 0b18 	vmov	r0, r1, d8
 8111c40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8111c44:	f7ee fd60 	bl	8100708 <__aeabi_dmul>
 8111c48:	ec41 0b18 	vmov	d8, r0, r1
 8111c4c:	3501      	adds	r5, #1
 8111c4e:	107f      	asrs	r7, r7, #1
 8111c50:	3608      	adds	r6, #8
 8111c52:	e7e5      	b.n	8111c20 <_dtoa_r+0x370>
 8111c54:	f000 80a6 	beq.w	8111da4 <_dtoa_r+0x4f4>
 8111c58:	f1ca 0600 	rsb	r6, sl, #0
 8111c5c:	4ba5      	ldr	r3, [pc, #660]	; (8111ef4 <_dtoa_r+0x644>)
 8111c5e:	4fa6      	ldr	r7, [pc, #664]	; (8111ef8 <_dtoa_r+0x648>)
 8111c60:	f006 020f 	and.w	r2, r6, #15
 8111c64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8111c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8111c6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8111c70:	f7ee fd4a 	bl	8100708 <__aeabi_dmul>
 8111c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111c78:	1136      	asrs	r6, r6, #4
 8111c7a:	2300      	movs	r3, #0
 8111c7c:	2502      	movs	r5, #2
 8111c7e:	2e00      	cmp	r6, #0
 8111c80:	f040 8085 	bne.w	8111d8e <_dtoa_r+0x4de>
 8111c84:	2b00      	cmp	r3, #0
 8111c86:	d1d2      	bne.n	8111c2e <_dtoa_r+0x37e>
 8111c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8111c8a:	2b00      	cmp	r3, #0
 8111c8c:	f000 808c 	beq.w	8111da8 <_dtoa_r+0x4f8>
 8111c90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8111c94:	4b99      	ldr	r3, [pc, #612]	; (8111efc <_dtoa_r+0x64c>)
 8111c96:	2200      	movs	r2, #0
 8111c98:	4630      	mov	r0, r6
 8111c9a:	4639      	mov	r1, r7
 8111c9c:	f7ee ffa6 	bl	8100bec <__aeabi_dcmplt>
 8111ca0:	2800      	cmp	r0, #0
 8111ca2:	f000 8081 	beq.w	8111da8 <_dtoa_r+0x4f8>
 8111ca6:	9b01      	ldr	r3, [sp, #4]
 8111ca8:	2b00      	cmp	r3, #0
 8111caa:	d07d      	beq.n	8111da8 <_dtoa_r+0x4f8>
 8111cac:	f1b9 0f00 	cmp.w	r9, #0
 8111cb0:	dd3c      	ble.n	8111d2c <_dtoa_r+0x47c>
 8111cb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8111cb6:	9307      	str	r3, [sp, #28]
 8111cb8:	2200      	movs	r2, #0
 8111cba:	4b91      	ldr	r3, [pc, #580]	; (8111f00 <_dtoa_r+0x650>)
 8111cbc:	4630      	mov	r0, r6
 8111cbe:	4639      	mov	r1, r7
 8111cc0:	f7ee fd22 	bl	8100708 <__aeabi_dmul>
 8111cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111cc8:	3501      	adds	r5, #1
 8111cca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8111cce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8111cd2:	4628      	mov	r0, r5
 8111cd4:	f7ee fcae 	bl	8100634 <__aeabi_i2d>
 8111cd8:	4632      	mov	r2, r6
 8111cda:	463b      	mov	r3, r7
 8111cdc:	f7ee fd14 	bl	8100708 <__aeabi_dmul>
 8111ce0:	4b88      	ldr	r3, [pc, #544]	; (8111f04 <_dtoa_r+0x654>)
 8111ce2:	2200      	movs	r2, #0
 8111ce4:	f7ee fb5a 	bl	810039c <__adddf3>
 8111ce8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8111cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8111cf0:	9303      	str	r3, [sp, #12]
 8111cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8111cf4:	2b00      	cmp	r3, #0
 8111cf6:	d15c      	bne.n	8111db2 <_dtoa_r+0x502>
 8111cf8:	4b83      	ldr	r3, [pc, #524]	; (8111f08 <_dtoa_r+0x658>)
 8111cfa:	2200      	movs	r2, #0
 8111cfc:	4630      	mov	r0, r6
 8111cfe:	4639      	mov	r1, r7
 8111d00:	f7ee fb4a 	bl	8100398 <__aeabi_dsub>
 8111d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8111d08:	4606      	mov	r6, r0
 8111d0a:	460f      	mov	r7, r1
 8111d0c:	f7ee ff8c 	bl	8100c28 <__aeabi_dcmpgt>
 8111d10:	2800      	cmp	r0, #0
 8111d12:	f040 8296 	bne.w	8112242 <_dtoa_r+0x992>
 8111d16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8111d1a:	4630      	mov	r0, r6
 8111d1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8111d20:	4639      	mov	r1, r7
 8111d22:	f7ee ff63 	bl	8100bec <__aeabi_dcmplt>
 8111d26:	2800      	cmp	r0, #0
 8111d28:	f040 8288 	bne.w	811223c <_dtoa_r+0x98c>
 8111d2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8111d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8111d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8111d36:	2b00      	cmp	r3, #0
 8111d38:	f2c0 8158 	blt.w	8111fec <_dtoa_r+0x73c>
 8111d3c:	f1ba 0f0e 	cmp.w	sl, #14
 8111d40:	f300 8154 	bgt.w	8111fec <_dtoa_r+0x73c>
 8111d44:	4b6b      	ldr	r3, [pc, #428]	; (8111ef4 <_dtoa_r+0x644>)
 8111d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8111d4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8111d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8111d50:	2b00      	cmp	r3, #0
 8111d52:	f280 80e3 	bge.w	8111f1c <_dtoa_r+0x66c>
 8111d56:	9b01      	ldr	r3, [sp, #4]
 8111d58:	2b00      	cmp	r3, #0
 8111d5a:	f300 80df 	bgt.w	8111f1c <_dtoa_r+0x66c>
 8111d5e:	f040 826d 	bne.w	811223c <_dtoa_r+0x98c>
 8111d62:	4b69      	ldr	r3, [pc, #420]	; (8111f08 <_dtoa_r+0x658>)
 8111d64:	2200      	movs	r2, #0
 8111d66:	4640      	mov	r0, r8
 8111d68:	4649      	mov	r1, r9
 8111d6a:	f7ee fccd 	bl	8100708 <__aeabi_dmul>
 8111d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8111d72:	f7ee ff4f 	bl	8100c14 <__aeabi_dcmpge>
 8111d76:	9e01      	ldr	r6, [sp, #4]
 8111d78:	4637      	mov	r7, r6
 8111d7a:	2800      	cmp	r0, #0
 8111d7c:	f040 8243 	bne.w	8112206 <_dtoa_r+0x956>
 8111d80:	9d00      	ldr	r5, [sp, #0]
 8111d82:	2331      	movs	r3, #49	; 0x31
 8111d84:	f805 3b01 	strb.w	r3, [r5], #1
 8111d88:	f10a 0a01 	add.w	sl, sl, #1
 8111d8c:	e23f      	b.n	811220e <_dtoa_r+0x95e>
 8111d8e:	07f2      	lsls	r2, r6, #31
 8111d90:	d505      	bpl.n	8111d9e <_dtoa_r+0x4ee>
 8111d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8111d96:	f7ee fcb7 	bl	8100708 <__aeabi_dmul>
 8111d9a:	3501      	adds	r5, #1
 8111d9c:	2301      	movs	r3, #1
 8111d9e:	1076      	asrs	r6, r6, #1
 8111da0:	3708      	adds	r7, #8
 8111da2:	e76c      	b.n	8111c7e <_dtoa_r+0x3ce>
 8111da4:	2502      	movs	r5, #2
 8111da6:	e76f      	b.n	8111c88 <_dtoa_r+0x3d8>
 8111da8:	9b01      	ldr	r3, [sp, #4]
 8111daa:	f8cd a01c 	str.w	sl, [sp, #28]
 8111dae:	930c      	str	r3, [sp, #48]	; 0x30
 8111db0:	e78d      	b.n	8111cce <_dtoa_r+0x41e>
 8111db2:	9900      	ldr	r1, [sp, #0]
 8111db4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8111db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8111db8:	4b4e      	ldr	r3, [pc, #312]	; (8111ef4 <_dtoa_r+0x644>)
 8111dba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8111dbe:	4401      	add	r1, r0
 8111dc0:	9102      	str	r1, [sp, #8]
 8111dc2:	9908      	ldr	r1, [sp, #32]
 8111dc4:	eeb0 8a47 	vmov.f32	s16, s14
 8111dc8:	eef0 8a67 	vmov.f32	s17, s15
 8111dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8111dd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8111dd4:	2900      	cmp	r1, #0
 8111dd6:	d045      	beq.n	8111e64 <_dtoa_r+0x5b4>
 8111dd8:	494c      	ldr	r1, [pc, #304]	; (8111f0c <_dtoa_r+0x65c>)
 8111dda:	2000      	movs	r0, #0
 8111ddc:	f7ee fdbe 	bl	810095c <__aeabi_ddiv>
 8111de0:	ec53 2b18 	vmov	r2, r3, d8
 8111de4:	f7ee fad8 	bl	8100398 <__aeabi_dsub>
 8111de8:	9d00      	ldr	r5, [sp, #0]
 8111dea:	ec41 0b18 	vmov	d8, r0, r1
 8111dee:	4639      	mov	r1, r7
 8111df0:	4630      	mov	r0, r6
 8111df2:	f7ee ff39 	bl	8100c68 <__aeabi_d2iz>
 8111df6:	900c      	str	r0, [sp, #48]	; 0x30
 8111df8:	f7ee fc1c 	bl	8100634 <__aeabi_i2d>
 8111dfc:	4602      	mov	r2, r0
 8111dfe:	460b      	mov	r3, r1
 8111e00:	4630      	mov	r0, r6
 8111e02:	4639      	mov	r1, r7
 8111e04:	f7ee fac8 	bl	8100398 <__aeabi_dsub>
 8111e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8111e0a:	3330      	adds	r3, #48	; 0x30
 8111e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8111e10:	ec53 2b18 	vmov	r2, r3, d8
 8111e14:	4606      	mov	r6, r0
 8111e16:	460f      	mov	r7, r1
 8111e18:	f7ee fee8 	bl	8100bec <__aeabi_dcmplt>
 8111e1c:	2800      	cmp	r0, #0
 8111e1e:	d165      	bne.n	8111eec <_dtoa_r+0x63c>
 8111e20:	4632      	mov	r2, r6
 8111e22:	463b      	mov	r3, r7
 8111e24:	4935      	ldr	r1, [pc, #212]	; (8111efc <_dtoa_r+0x64c>)
 8111e26:	2000      	movs	r0, #0
 8111e28:	f7ee fab6 	bl	8100398 <__aeabi_dsub>
 8111e2c:	ec53 2b18 	vmov	r2, r3, d8
 8111e30:	f7ee fedc 	bl	8100bec <__aeabi_dcmplt>
 8111e34:	2800      	cmp	r0, #0
 8111e36:	f040 80b9 	bne.w	8111fac <_dtoa_r+0x6fc>
 8111e3a:	9b02      	ldr	r3, [sp, #8]
 8111e3c:	429d      	cmp	r5, r3
 8111e3e:	f43f af75 	beq.w	8111d2c <_dtoa_r+0x47c>
 8111e42:	4b2f      	ldr	r3, [pc, #188]	; (8111f00 <_dtoa_r+0x650>)
 8111e44:	ec51 0b18 	vmov	r0, r1, d8
 8111e48:	2200      	movs	r2, #0
 8111e4a:	f7ee fc5d 	bl	8100708 <__aeabi_dmul>
 8111e4e:	4b2c      	ldr	r3, [pc, #176]	; (8111f00 <_dtoa_r+0x650>)
 8111e50:	ec41 0b18 	vmov	d8, r0, r1
 8111e54:	2200      	movs	r2, #0
 8111e56:	4630      	mov	r0, r6
 8111e58:	4639      	mov	r1, r7
 8111e5a:	f7ee fc55 	bl	8100708 <__aeabi_dmul>
 8111e5e:	4606      	mov	r6, r0
 8111e60:	460f      	mov	r7, r1
 8111e62:	e7c4      	b.n	8111dee <_dtoa_r+0x53e>
 8111e64:	ec51 0b17 	vmov	r0, r1, d7
 8111e68:	f7ee fc4e 	bl	8100708 <__aeabi_dmul>
 8111e6c:	9b02      	ldr	r3, [sp, #8]
 8111e6e:	9d00      	ldr	r5, [sp, #0]
 8111e70:	930c      	str	r3, [sp, #48]	; 0x30
 8111e72:	ec41 0b18 	vmov	d8, r0, r1
 8111e76:	4639      	mov	r1, r7
 8111e78:	4630      	mov	r0, r6
 8111e7a:	f7ee fef5 	bl	8100c68 <__aeabi_d2iz>
 8111e7e:	9011      	str	r0, [sp, #68]	; 0x44
 8111e80:	f7ee fbd8 	bl	8100634 <__aeabi_i2d>
 8111e84:	4602      	mov	r2, r0
 8111e86:	460b      	mov	r3, r1
 8111e88:	4630      	mov	r0, r6
 8111e8a:	4639      	mov	r1, r7
 8111e8c:	f7ee fa84 	bl	8100398 <__aeabi_dsub>
 8111e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8111e92:	3330      	adds	r3, #48	; 0x30
 8111e94:	f805 3b01 	strb.w	r3, [r5], #1
 8111e98:	9b02      	ldr	r3, [sp, #8]
 8111e9a:	429d      	cmp	r5, r3
 8111e9c:	4606      	mov	r6, r0
 8111e9e:	460f      	mov	r7, r1
 8111ea0:	f04f 0200 	mov.w	r2, #0
 8111ea4:	d134      	bne.n	8111f10 <_dtoa_r+0x660>
 8111ea6:	4b19      	ldr	r3, [pc, #100]	; (8111f0c <_dtoa_r+0x65c>)
 8111ea8:	ec51 0b18 	vmov	r0, r1, d8
 8111eac:	f7ee fa76 	bl	810039c <__adddf3>
 8111eb0:	4602      	mov	r2, r0
 8111eb2:	460b      	mov	r3, r1
 8111eb4:	4630      	mov	r0, r6
 8111eb6:	4639      	mov	r1, r7
 8111eb8:	f7ee feb6 	bl	8100c28 <__aeabi_dcmpgt>
 8111ebc:	2800      	cmp	r0, #0
 8111ebe:	d175      	bne.n	8111fac <_dtoa_r+0x6fc>
 8111ec0:	ec53 2b18 	vmov	r2, r3, d8
 8111ec4:	4911      	ldr	r1, [pc, #68]	; (8111f0c <_dtoa_r+0x65c>)
 8111ec6:	2000      	movs	r0, #0
 8111ec8:	f7ee fa66 	bl	8100398 <__aeabi_dsub>
 8111ecc:	4602      	mov	r2, r0
 8111ece:	460b      	mov	r3, r1
 8111ed0:	4630      	mov	r0, r6
 8111ed2:	4639      	mov	r1, r7
 8111ed4:	f7ee fe8a 	bl	8100bec <__aeabi_dcmplt>
 8111ed8:	2800      	cmp	r0, #0
 8111eda:	f43f af27 	beq.w	8111d2c <_dtoa_r+0x47c>
 8111ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8111ee0:	1e6b      	subs	r3, r5, #1
 8111ee2:	930c      	str	r3, [sp, #48]	; 0x30
 8111ee4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8111ee8:	2b30      	cmp	r3, #48	; 0x30
 8111eea:	d0f8      	beq.n	8111ede <_dtoa_r+0x62e>
 8111eec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8111ef0:	e04a      	b.n	8111f88 <_dtoa_r+0x6d8>
 8111ef2:	bf00      	nop
 8111ef4:	08113a58 	.word	0x08113a58
 8111ef8:	08113a30 	.word	0x08113a30
 8111efc:	3ff00000 	.word	0x3ff00000
 8111f00:	40240000 	.word	0x40240000
 8111f04:	401c0000 	.word	0x401c0000
 8111f08:	40140000 	.word	0x40140000
 8111f0c:	3fe00000 	.word	0x3fe00000
 8111f10:	4baf      	ldr	r3, [pc, #700]	; (81121d0 <_dtoa_r+0x920>)
 8111f12:	f7ee fbf9 	bl	8100708 <__aeabi_dmul>
 8111f16:	4606      	mov	r6, r0
 8111f18:	460f      	mov	r7, r1
 8111f1a:	e7ac      	b.n	8111e76 <_dtoa_r+0x5c6>
 8111f1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8111f20:	9d00      	ldr	r5, [sp, #0]
 8111f22:	4642      	mov	r2, r8
 8111f24:	464b      	mov	r3, r9
 8111f26:	4630      	mov	r0, r6
 8111f28:	4639      	mov	r1, r7
 8111f2a:	f7ee fd17 	bl	810095c <__aeabi_ddiv>
 8111f2e:	f7ee fe9b 	bl	8100c68 <__aeabi_d2iz>
 8111f32:	9002      	str	r0, [sp, #8]
 8111f34:	f7ee fb7e 	bl	8100634 <__aeabi_i2d>
 8111f38:	4642      	mov	r2, r8
 8111f3a:	464b      	mov	r3, r9
 8111f3c:	f7ee fbe4 	bl	8100708 <__aeabi_dmul>
 8111f40:	4602      	mov	r2, r0
 8111f42:	460b      	mov	r3, r1
 8111f44:	4630      	mov	r0, r6
 8111f46:	4639      	mov	r1, r7
 8111f48:	f7ee fa26 	bl	8100398 <__aeabi_dsub>
 8111f4c:	9e02      	ldr	r6, [sp, #8]
 8111f4e:	9f01      	ldr	r7, [sp, #4]
 8111f50:	3630      	adds	r6, #48	; 0x30
 8111f52:	f805 6b01 	strb.w	r6, [r5], #1
 8111f56:	9e00      	ldr	r6, [sp, #0]
 8111f58:	1bae      	subs	r6, r5, r6
 8111f5a:	42b7      	cmp	r7, r6
 8111f5c:	4602      	mov	r2, r0
 8111f5e:	460b      	mov	r3, r1
 8111f60:	d137      	bne.n	8111fd2 <_dtoa_r+0x722>
 8111f62:	f7ee fa1b 	bl	810039c <__adddf3>
 8111f66:	4642      	mov	r2, r8
 8111f68:	464b      	mov	r3, r9
 8111f6a:	4606      	mov	r6, r0
 8111f6c:	460f      	mov	r7, r1
 8111f6e:	f7ee fe5b 	bl	8100c28 <__aeabi_dcmpgt>
 8111f72:	b9c8      	cbnz	r0, 8111fa8 <_dtoa_r+0x6f8>
 8111f74:	4642      	mov	r2, r8
 8111f76:	464b      	mov	r3, r9
 8111f78:	4630      	mov	r0, r6
 8111f7a:	4639      	mov	r1, r7
 8111f7c:	f7ee fe2c 	bl	8100bd8 <__aeabi_dcmpeq>
 8111f80:	b110      	cbz	r0, 8111f88 <_dtoa_r+0x6d8>
 8111f82:	9b02      	ldr	r3, [sp, #8]
 8111f84:	07d9      	lsls	r1, r3, #31
 8111f86:	d40f      	bmi.n	8111fa8 <_dtoa_r+0x6f8>
 8111f88:	4620      	mov	r0, r4
 8111f8a:	4659      	mov	r1, fp
 8111f8c:	f000 fac8 	bl	8112520 <_Bfree>
 8111f90:	2300      	movs	r3, #0
 8111f92:	702b      	strb	r3, [r5, #0]
 8111f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8111f96:	f10a 0001 	add.w	r0, sl, #1
 8111f9a:	6018      	str	r0, [r3, #0]
 8111f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8111f9e:	2b00      	cmp	r3, #0
 8111fa0:	f43f acd8 	beq.w	8111954 <_dtoa_r+0xa4>
 8111fa4:	601d      	str	r5, [r3, #0]
 8111fa6:	e4d5      	b.n	8111954 <_dtoa_r+0xa4>
 8111fa8:	f8cd a01c 	str.w	sl, [sp, #28]
 8111fac:	462b      	mov	r3, r5
 8111fae:	461d      	mov	r5, r3
 8111fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8111fb4:	2a39      	cmp	r2, #57	; 0x39
 8111fb6:	d108      	bne.n	8111fca <_dtoa_r+0x71a>
 8111fb8:	9a00      	ldr	r2, [sp, #0]
 8111fba:	429a      	cmp	r2, r3
 8111fbc:	d1f7      	bne.n	8111fae <_dtoa_r+0x6fe>
 8111fbe:	9a07      	ldr	r2, [sp, #28]
 8111fc0:	9900      	ldr	r1, [sp, #0]
 8111fc2:	3201      	adds	r2, #1
 8111fc4:	9207      	str	r2, [sp, #28]
 8111fc6:	2230      	movs	r2, #48	; 0x30
 8111fc8:	700a      	strb	r2, [r1, #0]
 8111fca:	781a      	ldrb	r2, [r3, #0]
 8111fcc:	3201      	adds	r2, #1
 8111fce:	701a      	strb	r2, [r3, #0]
 8111fd0:	e78c      	b.n	8111eec <_dtoa_r+0x63c>
 8111fd2:	4b7f      	ldr	r3, [pc, #508]	; (81121d0 <_dtoa_r+0x920>)
 8111fd4:	2200      	movs	r2, #0
 8111fd6:	f7ee fb97 	bl	8100708 <__aeabi_dmul>
 8111fda:	2200      	movs	r2, #0
 8111fdc:	2300      	movs	r3, #0
 8111fde:	4606      	mov	r6, r0
 8111fe0:	460f      	mov	r7, r1
 8111fe2:	f7ee fdf9 	bl	8100bd8 <__aeabi_dcmpeq>
 8111fe6:	2800      	cmp	r0, #0
 8111fe8:	d09b      	beq.n	8111f22 <_dtoa_r+0x672>
 8111fea:	e7cd      	b.n	8111f88 <_dtoa_r+0x6d8>
 8111fec:	9a08      	ldr	r2, [sp, #32]
 8111fee:	2a00      	cmp	r2, #0
 8111ff0:	f000 80c4 	beq.w	811217c <_dtoa_r+0x8cc>
 8111ff4:	9a05      	ldr	r2, [sp, #20]
 8111ff6:	2a01      	cmp	r2, #1
 8111ff8:	f300 80a8 	bgt.w	811214c <_dtoa_r+0x89c>
 8111ffc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8111ffe:	2a00      	cmp	r2, #0
 8112000:	f000 80a0 	beq.w	8112144 <_dtoa_r+0x894>
 8112004:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8112008:	9e06      	ldr	r6, [sp, #24]
 811200a:	4645      	mov	r5, r8
 811200c:	9a04      	ldr	r2, [sp, #16]
 811200e:	2101      	movs	r1, #1
 8112010:	441a      	add	r2, r3
 8112012:	4620      	mov	r0, r4
 8112014:	4498      	add	r8, r3
 8112016:	9204      	str	r2, [sp, #16]
 8112018:	f000 fb3e 	bl	8112698 <__i2b>
 811201c:	4607      	mov	r7, r0
 811201e:	2d00      	cmp	r5, #0
 8112020:	dd0b      	ble.n	811203a <_dtoa_r+0x78a>
 8112022:	9b04      	ldr	r3, [sp, #16]
 8112024:	2b00      	cmp	r3, #0
 8112026:	dd08      	ble.n	811203a <_dtoa_r+0x78a>
 8112028:	42ab      	cmp	r3, r5
 811202a:	9a04      	ldr	r2, [sp, #16]
 811202c:	bfa8      	it	ge
 811202e:	462b      	movge	r3, r5
 8112030:	eba8 0803 	sub.w	r8, r8, r3
 8112034:	1aed      	subs	r5, r5, r3
 8112036:	1ad3      	subs	r3, r2, r3
 8112038:	9304      	str	r3, [sp, #16]
 811203a:	9b06      	ldr	r3, [sp, #24]
 811203c:	b1fb      	cbz	r3, 811207e <_dtoa_r+0x7ce>
 811203e:	9b08      	ldr	r3, [sp, #32]
 8112040:	2b00      	cmp	r3, #0
 8112042:	f000 809f 	beq.w	8112184 <_dtoa_r+0x8d4>
 8112046:	2e00      	cmp	r6, #0
 8112048:	dd11      	ble.n	811206e <_dtoa_r+0x7be>
 811204a:	4639      	mov	r1, r7
 811204c:	4632      	mov	r2, r6
 811204e:	4620      	mov	r0, r4
 8112050:	f000 fbde 	bl	8112810 <__pow5mult>
 8112054:	465a      	mov	r2, fp
 8112056:	4601      	mov	r1, r0
 8112058:	4607      	mov	r7, r0
 811205a:	4620      	mov	r0, r4
 811205c:	f000 fb32 	bl	81126c4 <__multiply>
 8112060:	4659      	mov	r1, fp
 8112062:	9007      	str	r0, [sp, #28]
 8112064:	4620      	mov	r0, r4
 8112066:	f000 fa5b 	bl	8112520 <_Bfree>
 811206a:	9b07      	ldr	r3, [sp, #28]
 811206c:	469b      	mov	fp, r3
 811206e:	9b06      	ldr	r3, [sp, #24]
 8112070:	1b9a      	subs	r2, r3, r6
 8112072:	d004      	beq.n	811207e <_dtoa_r+0x7ce>
 8112074:	4659      	mov	r1, fp
 8112076:	4620      	mov	r0, r4
 8112078:	f000 fbca 	bl	8112810 <__pow5mult>
 811207c:	4683      	mov	fp, r0
 811207e:	2101      	movs	r1, #1
 8112080:	4620      	mov	r0, r4
 8112082:	f000 fb09 	bl	8112698 <__i2b>
 8112086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8112088:	2b00      	cmp	r3, #0
 811208a:	4606      	mov	r6, r0
 811208c:	dd7c      	ble.n	8112188 <_dtoa_r+0x8d8>
 811208e:	461a      	mov	r2, r3
 8112090:	4601      	mov	r1, r0
 8112092:	4620      	mov	r0, r4
 8112094:	f000 fbbc 	bl	8112810 <__pow5mult>
 8112098:	9b05      	ldr	r3, [sp, #20]
 811209a:	2b01      	cmp	r3, #1
 811209c:	4606      	mov	r6, r0
 811209e:	dd76      	ble.n	811218e <_dtoa_r+0x8de>
 81120a0:	2300      	movs	r3, #0
 81120a2:	9306      	str	r3, [sp, #24]
 81120a4:	6933      	ldr	r3, [r6, #16]
 81120a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 81120aa:	6918      	ldr	r0, [r3, #16]
 81120ac:	f000 faa4 	bl	81125f8 <__hi0bits>
 81120b0:	f1c0 0020 	rsb	r0, r0, #32
 81120b4:	9b04      	ldr	r3, [sp, #16]
 81120b6:	4418      	add	r0, r3
 81120b8:	f010 001f 	ands.w	r0, r0, #31
 81120bc:	f000 8086 	beq.w	81121cc <_dtoa_r+0x91c>
 81120c0:	f1c0 0320 	rsb	r3, r0, #32
 81120c4:	2b04      	cmp	r3, #4
 81120c6:	dd7f      	ble.n	81121c8 <_dtoa_r+0x918>
 81120c8:	f1c0 001c 	rsb	r0, r0, #28
 81120cc:	9b04      	ldr	r3, [sp, #16]
 81120ce:	4403      	add	r3, r0
 81120d0:	4480      	add	r8, r0
 81120d2:	4405      	add	r5, r0
 81120d4:	9304      	str	r3, [sp, #16]
 81120d6:	f1b8 0f00 	cmp.w	r8, #0
 81120da:	dd05      	ble.n	81120e8 <_dtoa_r+0x838>
 81120dc:	4659      	mov	r1, fp
 81120de:	4642      	mov	r2, r8
 81120e0:	4620      	mov	r0, r4
 81120e2:	f000 fbef 	bl	81128c4 <__lshift>
 81120e6:	4683      	mov	fp, r0
 81120e8:	9b04      	ldr	r3, [sp, #16]
 81120ea:	2b00      	cmp	r3, #0
 81120ec:	dd05      	ble.n	81120fa <_dtoa_r+0x84a>
 81120ee:	4631      	mov	r1, r6
 81120f0:	461a      	mov	r2, r3
 81120f2:	4620      	mov	r0, r4
 81120f4:	f000 fbe6 	bl	81128c4 <__lshift>
 81120f8:	4606      	mov	r6, r0
 81120fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81120fc:	2b00      	cmp	r3, #0
 81120fe:	d069      	beq.n	81121d4 <_dtoa_r+0x924>
 8112100:	4631      	mov	r1, r6
 8112102:	4658      	mov	r0, fp
 8112104:	f000 fc4a 	bl	811299c <__mcmp>
 8112108:	2800      	cmp	r0, #0
 811210a:	da63      	bge.n	81121d4 <_dtoa_r+0x924>
 811210c:	2300      	movs	r3, #0
 811210e:	4659      	mov	r1, fp
 8112110:	220a      	movs	r2, #10
 8112112:	4620      	mov	r0, r4
 8112114:	f000 fa26 	bl	8112564 <__multadd>
 8112118:	9b08      	ldr	r3, [sp, #32]
 811211a:	f10a 3aff 	add.w	sl, sl, #4294967295
 811211e:	4683      	mov	fp, r0
 8112120:	2b00      	cmp	r3, #0
 8112122:	f000 818f 	beq.w	8112444 <_dtoa_r+0xb94>
 8112126:	4639      	mov	r1, r7
 8112128:	2300      	movs	r3, #0
 811212a:	220a      	movs	r2, #10
 811212c:	4620      	mov	r0, r4
 811212e:	f000 fa19 	bl	8112564 <__multadd>
 8112132:	f1b9 0f00 	cmp.w	r9, #0
 8112136:	4607      	mov	r7, r0
 8112138:	f300 808e 	bgt.w	8112258 <_dtoa_r+0x9a8>
 811213c:	9b05      	ldr	r3, [sp, #20]
 811213e:	2b02      	cmp	r3, #2
 8112140:	dc50      	bgt.n	81121e4 <_dtoa_r+0x934>
 8112142:	e089      	b.n	8112258 <_dtoa_r+0x9a8>
 8112144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8112146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 811214a:	e75d      	b.n	8112008 <_dtoa_r+0x758>
 811214c:	9b01      	ldr	r3, [sp, #4]
 811214e:	1e5e      	subs	r6, r3, #1
 8112150:	9b06      	ldr	r3, [sp, #24]
 8112152:	42b3      	cmp	r3, r6
 8112154:	bfbf      	itttt	lt
 8112156:	9b06      	ldrlt	r3, [sp, #24]
 8112158:	9606      	strlt	r6, [sp, #24]
 811215a:	1af2      	sublt	r2, r6, r3
 811215c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 811215e:	bfb6      	itet	lt
 8112160:	189b      	addlt	r3, r3, r2
 8112162:	1b9e      	subge	r6, r3, r6
 8112164:	930d      	strlt	r3, [sp, #52]	; 0x34
 8112166:	9b01      	ldr	r3, [sp, #4]
 8112168:	bfb8      	it	lt
 811216a:	2600      	movlt	r6, #0
 811216c:	2b00      	cmp	r3, #0
 811216e:	bfb5      	itete	lt
 8112170:	eba8 0503 	sublt.w	r5, r8, r3
 8112174:	9b01      	ldrge	r3, [sp, #4]
 8112176:	2300      	movlt	r3, #0
 8112178:	4645      	movge	r5, r8
 811217a:	e747      	b.n	811200c <_dtoa_r+0x75c>
 811217c:	9e06      	ldr	r6, [sp, #24]
 811217e:	9f08      	ldr	r7, [sp, #32]
 8112180:	4645      	mov	r5, r8
 8112182:	e74c      	b.n	811201e <_dtoa_r+0x76e>
 8112184:	9a06      	ldr	r2, [sp, #24]
 8112186:	e775      	b.n	8112074 <_dtoa_r+0x7c4>
 8112188:	9b05      	ldr	r3, [sp, #20]
 811218a:	2b01      	cmp	r3, #1
 811218c:	dc18      	bgt.n	81121c0 <_dtoa_r+0x910>
 811218e:	9b02      	ldr	r3, [sp, #8]
 8112190:	b9b3      	cbnz	r3, 81121c0 <_dtoa_r+0x910>
 8112192:	9b03      	ldr	r3, [sp, #12]
 8112194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8112198:	b9a3      	cbnz	r3, 81121c4 <_dtoa_r+0x914>
 811219a:	9b03      	ldr	r3, [sp, #12]
 811219c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81121a0:	0d1b      	lsrs	r3, r3, #20
 81121a2:	051b      	lsls	r3, r3, #20
 81121a4:	b12b      	cbz	r3, 81121b2 <_dtoa_r+0x902>
 81121a6:	9b04      	ldr	r3, [sp, #16]
 81121a8:	3301      	adds	r3, #1
 81121aa:	9304      	str	r3, [sp, #16]
 81121ac:	f108 0801 	add.w	r8, r8, #1
 81121b0:	2301      	movs	r3, #1
 81121b2:	9306      	str	r3, [sp, #24]
 81121b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81121b6:	2b00      	cmp	r3, #0
 81121b8:	f47f af74 	bne.w	81120a4 <_dtoa_r+0x7f4>
 81121bc:	2001      	movs	r0, #1
 81121be:	e779      	b.n	81120b4 <_dtoa_r+0x804>
 81121c0:	2300      	movs	r3, #0
 81121c2:	e7f6      	b.n	81121b2 <_dtoa_r+0x902>
 81121c4:	9b02      	ldr	r3, [sp, #8]
 81121c6:	e7f4      	b.n	81121b2 <_dtoa_r+0x902>
 81121c8:	d085      	beq.n	81120d6 <_dtoa_r+0x826>
 81121ca:	4618      	mov	r0, r3
 81121cc:	301c      	adds	r0, #28
 81121ce:	e77d      	b.n	81120cc <_dtoa_r+0x81c>
 81121d0:	40240000 	.word	0x40240000
 81121d4:	9b01      	ldr	r3, [sp, #4]
 81121d6:	2b00      	cmp	r3, #0
 81121d8:	dc38      	bgt.n	811224c <_dtoa_r+0x99c>
 81121da:	9b05      	ldr	r3, [sp, #20]
 81121dc:	2b02      	cmp	r3, #2
 81121de:	dd35      	ble.n	811224c <_dtoa_r+0x99c>
 81121e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 81121e4:	f1b9 0f00 	cmp.w	r9, #0
 81121e8:	d10d      	bne.n	8112206 <_dtoa_r+0x956>
 81121ea:	4631      	mov	r1, r6
 81121ec:	464b      	mov	r3, r9
 81121ee:	2205      	movs	r2, #5
 81121f0:	4620      	mov	r0, r4
 81121f2:	f000 f9b7 	bl	8112564 <__multadd>
 81121f6:	4601      	mov	r1, r0
 81121f8:	4606      	mov	r6, r0
 81121fa:	4658      	mov	r0, fp
 81121fc:	f000 fbce 	bl	811299c <__mcmp>
 8112200:	2800      	cmp	r0, #0
 8112202:	f73f adbd 	bgt.w	8111d80 <_dtoa_r+0x4d0>
 8112206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8112208:	9d00      	ldr	r5, [sp, #0]
 811220a:	ea6f 0a03 	mvn.w	sl, r3
 811220e:	f04f 0800 	mov.w	r8, #0
 8112212:	4631      	mov	r1, r6
 8112214:	4620      	mov	r0, r4
 8112216:	f000 f983 	bl	8112520 <_Bfree>
 811221a:	2f00      	cmp	r7, #0
 811221c:	f43f aeb4 	beq.w	8111f88 <_dtoa_r+0x6d8>
 8112220:	f1b8 0f00 	cmp.w	r8, #0
 8112224:	d005      	beq.n	8112232 <_dtoa_r+0x982>
 8112226:	45b8      	cmp	r8, r7
 8112228:	d003      	beq.n	8112232 <_dtoa_r+0x982>
 811222a:	4641      	mov	r1, r8
 811222c:	4620      	mov	r0, r4
 811222e:	f000 f977 	bl	8112520 <_Bfree>
 8112232:	4639      	mov	r1, r7
 8112234:	4620      	mov	r0, r4
 8112236:	f000 f973 	bl	8112520 <_Bfree>
 811223a:	e6a5      	b.n	8111f88 <_dtoa_r+0x6d8>
 811223c:	2600      	movs	r6, #0
 811223e:	4637      	mov	r7, r6
 8112240:	e7e1      	b.n	8112206 <_dtoa_r+0x956>
 8112242:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8112244:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8112248:	4637      	mov	r7, r6
 811224a:	e599      	b.n	8111d80 <_dtoa_r+0x4d0>
 811224c:	9b08      	ldr	r3, [sp, #32]
 811224e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8112252:	2b00      	cmp	r3, #0
 8112254:	f000 80fd 	beq.w	8112452 <_dtoa_r+0xba2>
 8112258:	2d00      	cmp	r5, #0
 811225a:	dd05      	ble.n	8112268 <_dtoa_r+0x9b8>
 811225c:	4639      	mov	r1, r7
 811225e:	462a      	mov	r2, r5
 8112260:	4620      	mov	r0, r4
 8112262:	f000 fb2f 	bl	81128c4 <__lshift>
 8112266:	4607      	mov	r7, r0
 8112268:	9b06      	ldr	r3, [sp, #24]
 811226a:	2b00      	cmp	r3, #0
 811226c:	d05c      	beq.n	8112328 <_dtoa_r+0xa78>
 811226e:	6879      	ldr	r1, [r7, #4]
 8112270:	4620      	mov	r0, r4
 8112272:	f000 f915 	bl	81124a0 <_Balloc>
 8112276:	4605      	mov	r5, r0
 8112278:	b928      	cbnz	r0, 8112286 <_dtoa_r+0x9d6>
 811227a:	4b80      	ldr	r3, [pc, #512]	; (811247c <_dtoa_r+0xbcc>)
 811227c:	4602      	mov	r2, r0
 811227e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8112282:	f7ff bb2e 	b.w	81118e2 <_dtoa_r+0x32>
 8112286:	693a      	ldr	r2, [r7, #16]
 8112288:	3202      	adds	r2, #2
 811228a:	0092      	lsls	r2, r2, #2
 811228c:	f107 010c 	add.w	r1, r7, #12
 8112290:	300c      	adds	r0, #12
 8112292:	f7fe fdff 	bl	8110e94 <memcpy>
 8112296:	2201      	movs	r2, #1
 8112298:	4629      	mov	r1, r5
 811229a:	4620      	mov	r0, r4
 811229c:	f000 fb12 	bl	81128c4 <__lshift>
 81122a0:	9b00      	ldr	r3, [sp, #0]
 81122a2:	3301      	adds	r3, #1
 81122a4:	9301      	str	r3, [sp, #4]
 81122a6:	9b00      	ldr	r3, [sp, #0]
 81122a8:	444b      	add	r3, r9
 81122aa:	9307      	str	r3, [sp, #28]
 81122ac:	9b02      	ldr	r3, [sp, #8]
 81122ae:	f003 0301 	and.w	r3, r3, #1
 81122b2:	46b8      	mov	r8, r7
 81122b4:	9306      	str	r3, [sp, #24]
 81122b6:	4607      	mov	r7, r0
 81122b8:	9b01      	ldr	r3, [sp, #4]
 81122ba:	4631      	mov	r1, r6
 81122bc:	3b01      	subs	r3, #1
 81122be:	4658      	mov	r0, fp
 81122c0:	9302      	str	r3, [sp, #8]
 81122c2:	f7ff fa67 	bl	8111794 <quorem>
 81122c6:	4603      	mov	r3, r0
 81122c8:	3330      	adds	r3, #48	; 0x30
 81122ca:	9004      	str	r0, [sp, #16]
 81122cc:	4641      	mov	r1, r8
 81122ce:	4658      	mov	r0, fp
 81122d0:	9308      	str	r3, [sp, #32]
 81122d2:	f000 fb63 	bl	811299c <__mcmp>
 81122d6:	463a      	mov	r2, r7
 81122d8:	4681      	mov	r9, r0
 81122da:	4631      	mov	r1, r6
 81122dc:	4620      	mov	r0, r4
 81122de:	f000 fb79 	bl	81129d4 <__mdiff>
 81122e2:	68c2      	ldr	r2, [r0, #12]
 81122e4:	9b08      	ldr	r3, [sp, #32]
 81122e6:	4605      	mov	r5, r0
 81122e8:	bb02      	cbnz	r2, 811232c <_dtoa_r+0xa7c>
 81122ea:	4601      	mov	r1, r0
 81122ec:	4658      	mov	r0, fp
 81122ee:	f000 fb55 	bl	811299c <__mcmp>
 81122f2:	9b08      	ldr	r3, [sp, #32]
 81122f4:	4602      	mov	r2, r0
 81122f6:	4629      	mov	r1, r5
 81122f8:	4620      	mov	r0, r4
 81122fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 81122fe:	f000 f90f 	bl	8112520 <_Bfree>
 8112302:	9b05      	ldr	r3, [sp, #20]
 8112304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8112306:	9d01      	ldr	r5, [sp, #4]
 8112308:	ea43 0102 	orr.w	r1, r3, r2
 811230c:	9b06      	ldr	r3, [sp, #24]
 811230e:	430b      	orrs	r3, r1
 8112310:	9b08      	ldr	r3, [sp, #32]
 8112312:	d10d      	bne.n	8112330 <_dtoa_r+0xa80>
 8112314:	2b39      	cmp	r3, #57	; 0x39
 8112316:	d029      	beq.n	811236c <_dtoa_r+0xabc>
 8112318:	f1b9 0f00 	cmp.w	r9, #0
 811231c:	dd01      	ble.n	8112322 <_dtoa_r+0xa72>
 811231e:	9b04      	ldr	r3, [sp, #16]
 8112320:	3331      	adds	r3, #49	; 0x31
 8112322:	9a02      	ldr	r2, [sp, #8]
 8112324:	7013      	strb	r3, [r2, #0]
 8112326:	e774      	b.n	8112212 <_dtoa_r+0x962>
 8112328:	4638      	mov	r0, r7
 811232a:	e7b9      	b.n	81122a0 <_dtoa_r+0x9f0>
 811232c:	2201      	movs	r2, #1
 811232e:	e7e2      	b.n	81122f6 <_dtoa_r+0xa46>
 8112330:	f1b9 0f00 	cmp.w	r9, #0
 8112334:	db06      	blt.n	8112344 <_dtoa_r+0xa94>
 8112336:	9905      	ldr	r1, [sp, #20]
 8112338:	ea41 0909 	orr.w	r9, r1, r9
 811233c:	9906      	ldr	r1, [sp, #24]
 811233e:	ea59 0101 	orrs.w	r1, r9, r1
 8112342:	d120      	bne.n	8112386 <_dtoa_r+0xad6>
 8112344:	2a00      	cmp	r2, #0
 8112346:	ddec      	ble.n	8112322 <_dtoa_r+0xa72>
 8112348:	4659      	mov	r1, fp
 811234a:	2201      	movs	r2, #1
 811234c:	4620      	mov	r0, r4
 811234e:	9301      	str	r3, [sp, #4]
 8112350:	f000 fab8 	bl	81128c4 <__lshift>
 8112354:	4631      	mov	r1, r6
 8112356:	4683      	mov	fp, r0
 8112358:	f000 fb20 	bl	811299c <__mcmp>
 811235c:	2800      	cmp	r0, #0
 811235e:	9b01      	ldr	r3, [sp, #4]
 8112360:	dc02      	bgt.n	8112368 <_dtoa_r+0xab8>
 8112362:	d1de      	bne.n	8112322 <_dtoa_r+0xa72>
 8112364:	07da      	lsls	r2, r3, #31
 8112366:	d5dc      	bpl.n	8112322 <_dtoa_r+0xa72>
 8112368:	2b39      	cmp	r3, #57	; 0x39
 811236a:	d1d8      	bne.n	811231e <_dtoa_r+0xa6e>
 811236c:	9a02      	ldr	r2, [sp, #8]
 811236e:	2339      	movs	r3, #57	; 0x39
 8112370:	7013      	strb	r3, [r2, #0]
 8112372:	462b      	mov	r3, r5
 8112374:	461d      	mov	r5, r3
 8112376:	3b01      	subs	r3, #1
 8112378:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 811237c:	2a39      	cmp	r2, #57	; 0x39
 811237e:	d050      	beq.n	8112422 <_dtoa_r+0xb72>
 8112380:	3201      	adds	r2, #1
 8112382:	701a      	strb	r2, [r3, #0]
 8112384:	e745      	b.n	8112212 <_dtoa_r+0x962>
 8112386:	2a00      	cmp	r2, #0
 8112388:	dd03      	ble.n	8112392 <_dtoa_r+0xae2>
 811238a:	2b39      	cmp	r3, #57	; 0x39
 811238c:	d0ee      	beq.n	811236c <_dtoa_r+0xabc>
 811238e:	3301      	adds	r3, #1
 8112390:	e7c7      	b.n	8112322 <_dtoa_r+0xa72>
 8112392:	9a01      	ldr	r2, [sp, #4]
 8112394:	9907      	ldr	r1, [sp, #28]
 8112396:	f802 3c01 	strb.w	r3, [r2, #-1]
 811239a:	428a      	cmp	r2, r1
 811239c:	d02a      	beq.n	81123f4 <_dtoa_r+0xb44>
 811239e:	4659      	mov	r1, fp
 81123a0:	2300      	movs	r3, #0
 81123a2:	220a      	movs	r2, #10
 81123a4:	4620      	mov	r0, r4
 81123a6:	f000 f8dd 	bl	8112564 <__multadd>
 81123aa:	45b8      	cmp	r8, r7
 81123ac:	4683      	mov	fp, r0
 81123ae:	f04f 0300 	mov.w	r3, #0
 81123b2:	f04f 020a 	mov.w	r2, #10
 81123b6:	4641      	mov	r1, r8
 81123b8:	4620      	mov	r0, r4
 81123ba:	d107      	bne.n	81123cc <_dtoa_r+0xb1c>
 81123bc:	f000 f8d2 	bl	8112564 <__multadd>
 81123c0:	4680      	mov	r8, r0
 81123c2:	4607      	mov	r7, r0
 81123c4:	9b01      	ldr	r3, [sp, #4]
 81123c6:	3301      	adds	r3, #1
 81123c8:	9301      	str	r3, [sp, #4]
 81123ca:	e775      	b.n	81122b8 <_dtoa_r+0xa08>
 81123cc:	f000 f8ca 	bl	8112564 <__multadd>
 81123d0:	4639      	mov	r1, r7
 81123d2:	4680      	mov	r8, r0
 81123d4:	2300      	movs	r3, #0
 81123d6:	220a      	movs	r2, #10
 81123d8:	4620      	mov	r0, r4
 81123da:	f000 f8c3 	bl	8112564 <__multadd>
 81123de:	4607      	mov	r7, r0
 81123e0:	e7f0      	b.n	81123c4 <_dtoa_r+0xb14>
 81123e2:	f1b9 0f00 	cmp.w	r9, #0
 81123e6:	9a00      	ldr	r2, [sp, #0]
 81123e8:	bfcc      	ite	gt
 81123ea:	464d      	movgt	r5, r9
 81123ec:	2501      	movle	r5, #1
 81123ee:	4415      	add	r5, r2
 81123f0:	f04f 0800 	mov.w	r8, #0
 81123f4:	4659      	mov	r1, fp
 81123f6:	2201      	movs	r2, #1
 81123f8:	4620      	mov	r0, r4
 81123fa:	9301      	str	r3, [sp, #4]
 81123fc:	f000 fa62 	bl	81128c4 <__lshift>
 8112400:	4631      	mov	r1, r6
 8112402:	4683      	mov	fp, r0
 8112404:	f000 faca 	bl	811299c <__mcmp>
 8112408:	2800      	cmp	r0, #0
 811240a:	dcb2      	bgt.n	8112372 <_dtoa_r+0xac2>
 811240c:	d102      	bne.n	8112414 <_dtoa_r+0xb64>
 811240e:	9b01      	ldr	r3, [sp, #4]
 8112410:	07db      	lsls	r3, r3, #31
 8112412:	d4ae      	bmi.n	8112372 <_dtoa_r+0xac2>
 8112414:	462b      	mov	r3, r5
 8112416:	461d      	mov	r5, r3
 8112418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 811241c:	2a30      	cmp	r2, #48	; 0x30
 811241e:	d0fa      	beq.n	8112416 <_dtoa_r+0xb66>
 8112420:	e6f7      	b.n	8112212 <_dtoa_r+0x962>
 8112422:	9a00      	ldr	r2, [sp, #0]
 8112424:	429a      	cmp	r2, r3
 8112426:	d1a5      	bne.n	8112374 <_dtoa_r+0xac4>
 8112428:	f10a 0a01 	add.w	sl, sl, #1
 811242c:	2331      	movs	r3, #49	; 0x31
 811242e:	e779      	b.n	8112324 <_dtoa_r+0xa74>
 8112430:	4b13      	ldr	r3, [pc, #76]	; (8112480 <_dtoa_r+0xbd0>)
 8112432:	f7ff baaf 	b.w	8111994 <_dtoa_r+0xe4>
 8112436:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8112438:	2b00      	cmp	r3, #0
 811243a:	f47f aa86 	bne.w	811194a <_dtoa_r+0x9a>
 811243e:	4b11      	ldr	r3, [pc, #68]	; (8112484 <_dtoa_r+0xbd4>)
 8112440:	f7ff baa8 	b.w	8111994 <_dtoa_r+0xe4>
 8112444:	f1b9 0f00 	cmp.w	r9, #0
 8112448:	dc03      	bgt.n	8112452 <_dtoa_r+0xba2>
 811244a:	9b05      	ldr	r3, [sp, #20]
 811244c:	2b02      	cmp	r3, #2
 811244e:	f73f aec9 	bgt.w	81121e4 <_dtoa_r+0x934>
 8112452:	9d00      	ldr	r5, [sp, #0]
 8112454:	4631      	mov	r1, r6
 8112456:	4658      	mov	r0, fp
 8112458:	f7ff f99c 	bl	8111794 <quorem>
 811245c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8112460:	f805 3b01 	strb.w	r3, [r5], #1
 8112464:	9a00      	ldr	r2, [sp, #0]
 8112466:	1aaa      	subs	r2, r5, r2
 8112468:	4591      	cmp	r9, r2
 811246a:	ddba      	ble.n	81123e2 <_dtoa_r+0xb32>
 811246c:	4659      	mov	r1, fp
 811246e:	2300      	movs	r3, #0
 8112470:	220a      	movs	r2, #10
 8112472:	4620      	mov	r0, r4
 8112474:	f000 f876 	bl	8112564 <__multadd>
 8112478:	4683      	mov	fp, r0
 811247a:	e7eb      	b.n	8112454 <_dtoa_r+0xba4>
 811247c:	081139bb 	.word	0x081139bb
 8112480:	08113914 	.word	0x08113914
 8112484:	08113938 	.word	0x08113938

08112488 <_localeconv_r>:
 8112488:	4800      	ldr	r0, [pc, #0]	; (811248c <_localeconv_r+0x4>)
 811248a:	4770      	bx	lr
 811248c:	10000168 	.word	0x10000168

08112490 <malloc>:
 8112490:	4b02      	ldr	r3, [pc, #8]	; (811249c <malloc+0xc>)
 8112492:	4601      	mov	r1, r0
 8112494:	6818      	ldr	r0, [r3, #0]
 8112496:	f000 bbe1 	b.w	8112c5c <_malloc_r>
 811249a:	bf00      	nop
 811249c:	10000014 	.word	0x10000014

081124a0 <_Balloc>:
 81124a0:	b570      	push	{r4, r5, r6, lr}
 81124a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81124a4:	4604      	mov	r4, r0
 81124a6:	460d      	mov	r5, r1
 81124a8:	b976      	cbnz	r6, 81124c8 <_Balloc+0x28>
 81124aa:	2010      	movs	r0, #16
 81124ac:	f7ff fff0 	bl	8112490 <malloc>
 81124b0:	4602      	mov	r2, r0
 81124b2:	6260      	str	r0, [r4, #36]	; 0x24
 81124b4:	b920      	cbnz	r0, 81124c0 <_Balloc+0x20>
 81124b6:	4b18      	ldr	r3, [pc, #96]	; (8112518 <_Balloc+0x78>)
 81124b8:	4818      	ldr	r0, [pc, #96]	; (811251c <_Balloc+0x7c>)
 81124ba:	2166      	movs	r1, #102	; 0x66
 81124bc:	f000 fc38 	bl	8112d30 <__assert_func>
 81124c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81124c4:	6006      	str	r6, [r0, #0]
 81124c6:	60c6      	str	r6, [r0, #12]
 81124c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 81124ca:	68f3      	ldr	r3, [r6, #12]
 81124cc:	b183      	cbz	r3, 81124f0 <_Balloc+0x50>
 81124ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81124d0:	68db      	ldr	r3, [r3, #12]
 81124d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81124d6:	b9b8      	cbnz	r0, 8112508 <_Balloc+0x68>
 81124d8:	2101      	movs	r1, #1
 81124da:	fa01 f605 	lsl.w	r6, r1, r5
 81124de:	1d72      	adds	r2, r6, #5
 81124e0:	0092      	lsls	r2, r2, #2
 81124e2:	4620      	mov	r0, r4
 81124e4:	f000 fb5a 	bl	8112b9c <_calloc_r>
 81124e8:	b160      	cbz	r0, 8112504 <_Balloc+0x64>
 81124ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81124ee:	e00e      	b.n	811250e <_Balloc+0x6e>
 81124f0:	2221      	movs	r2, #33	; 0x21
 81124f2:	2104      	movs	r1, #4
 81124f4:	4620      	mov	r0, r4
 81124f6:	f000 fb51 	bl	8112b9c <_calloc_r>
 81124fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81124fc:	60f0      	str	r0, [r6, #12]
 81124fe:	68db      	ldr	r3, [r3, #12]
 8112500:	2b00      	cmp	r3, #0
 8112502:	d1e4      	bne.n	81124ce <_Balloc+0x2e>
 8112504:	2000      	movs	r0, #0
 8112506:	bd70      	pop	{r4, r5, r6, pc}
 8112508:	6802      	ldr	r2, [r0, #0]
 811250a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 811250e:	2300      	movs	r3, #0
 8112510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8112514:	e7f7      	b.n	8112506 <_Balloc+0x66>
 8112516:	bf00      	nop
 8112518:	08113945 	.word	0x08113945
 811251c:	081139cc 	.word	0x081139cc

08112520 <_Bfree>:
 8112520:	b570      	push	{r4, r5, r6, lr}
 8112522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8112524:	4605      	mov	r5, r0
 8112526:	460c      	mov	r4, r1
 8112528:	b976      	cbnz	r6, 8112548 <_Bfree+0x28>
 811252a:	2010      	movs	r0, #16
 811252c:	f7ff ffb0 	bl	8112490 <malloc>
 8112530:	4602      	mov	r2, r0
 8112532:	6268      	str	r0, [r5, #36]	; 0x24
 8112534:	b920      	cbnz	r0, 8112540 <_Bfree+0x20>
 8112536:	4b09      	ldr	r3, [pc, #36]	; (811255c <_Bfree+0x3c>)
 8112538:	4809      	ldr	r0, [pc, #36]	; (8112560 <_Bfree+0x40>)
 811253a:	218a      	movs	r1, #138	; 0x8a
 811253c:	f000 fbf8 	bl	8112d30 <__assert_func>
 8112540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8112544:	6006      	str	r6, [r0, #0]
 8112546:	60c6      	str	r6, [r0, #12]
 8112548:	b13c      	cbz	r4, 811255a <_Bfree+0x3a>
 811254a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 811254c:	6862      	ldr	r2, [r4, #4]
 811254e:	68db      	ldr	r3, [r3, #12]
 8112550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8112554:	6021      	str	r1, [r4, #0]
 8112556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 811255a:	bd70      	pop	{r4, r5, r6, pc}
 811255c:	08113945 	.word	0x08113945
 8112560:	081139cc 	.word	0x081139cc

08112564 <__multadd>:
 8112564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8112568:	690e      	ldr	r6, [r1, #16]
 811256a:	4607      	mov	r7, r0
 811256c:	4698      	mov	r8, r3
 811256e:	460c      	mov	r4, r1
 8112570:	f101 0014 	add.w	r0, r1, #20
 8112574:	2300      	movs	r3, #0
 8112576:	6805      	ldr	r5, [r0, #0]
 8112578:	b2a9      	uxth	r1, r5
 811257a:	fb02 8101 	mla	r1, r2, r1, r8
 811257e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8112582:	0c2d      	lsrs	r5, r5, #16
 8112584:	fb02 c505 	mla	r5, r2, r5, ip
 8112588:	b289      	uxth	r1, r1
 811258a:	3301      	adds	r3, #1
 811258c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8112590:	429e      	cmp	r6, r3
 8112592:	f840 1b04 	str.w	r1, [r0], #4
 8112596:	ea4f 4815 	mov.w	r8, r5, lsr #16
 811259a:	dcec      	bgt.n	8112576 <__multadd+0x12>
 811259c:	f1b8 0f00 	cmp.w	r8, #0
 81125a0:	d022      	beq.n	81125e8 <__multadd+0x84>
 81125a2:	68a3      	ldr	r3, [r4, #8]
 81125a4:	42b3      	cmp	r3, r6
 81125a6:	dc19      	bgt.n	81125dc <__multadd+0x78>
 81125a8:	6861      	ldr	r1, [r4, #4]
 81125aa:	4638      	mov	r0, r7
 81125ac:	3101      	adds	r1, #1
 81125ae:	f7ff ff77 	bl	81124a0 <_Balloc>
 81125b2:	4605      	mov	r5, r0
 81125b4:	b928      	cbnz	r0, 81125c2 <__multadd+0x5e>
 81125b6:	4602      	mov	r2, r0
 81125b8:	4b0d      	ldr	r3, [pc, #52]	; (81125f0 <__multadd+0x8c>)
 81125ba:	480e      	ldr	r0, [pc, #56]	; (81125f4 <__multadd+0x90>)
 81125bc:	21b5      	movs	r1, #181	; 0xb5
 81125be:	f000 fbb7 	bl	8112d30 <__assert_func>
 81125c2:	6922      	ldr	r2, [r4, #16]
 81125c4:	3202      	adds	r2, #2
 81125c6:	f104 010c 	add.w	r1, r4, #12
 81125ca:	0092      	lsls	r2, r2, #2
 81125cc:	300c      	adds	r0, #12
 81125ce:	f7fe fc61 	bl	8110e94 <memcpy>
 81125d2:	4621      	mov	r1, r4
 81125d4:	4638      	mov	r0, r7
 81125d6:	f7ff ffa3 	bl	8112520 <_Bfree>
 81125da:	462c      	mov	r4, r5
 81125dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 81125e0:	3601      	adds	r6, #1
 81125e2:	f8c3 8014 	str.w	r8, [r3, #20]
 81125e6:	6126      	str	r6, [r4, #16]
 81125e8:	4620      	mov	r0, r4
 81125ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81125ee:	bf00      	nop
 81125f0:	081139bb 	.word	0x081139bb
 81125f4:	081139cc 	.word	0x081139cc

081125f8 <__hi0bits>:
 81125f8:	0c03      	lsrs	r3, r0, #16
 81125fa:	041b      	lsls	r3, r3, #16
 81125fc:	b9d3      	cbnz	r3, 8112634 <__hi0bits+0x3c>
 81125fe:	0400      	lsls	r0, r0, #16
 8112600:	2310      	movs	r3, #16
 8112602:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8112606:	bf04      	itt	eq
 8112608:	0200      	lsleq	r0, r0, #8
 811260a:	3308      	addeq	r3, #8
 811260c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8112610:	bf04      	itt	eq
 8112612:	0100      	lsleq	r0, r0, #4
 8112614:	3304      	addeq	r3, #4
 8112616:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 811261a:	bf04      	itt	eq
 811261c:	0080      	lsleq	r0, r0, #2
 811261e:	3302      	addeq	r3, #2
 8112620:	2800      	cmp	r0, #0
 8112622:	db05      	blt.n	8112630 <__hi0bits+0x38>
 8112624:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8112628:	f103 0301 	add.w	r3, r3, #1
 811262c:	bf08      	it	eq
 811262e:	2320      	moveq	r3, #32
 8112630:	4618      	mov	r0, r3
 8112632:	4770      	bx	lr
 8112634:	2300      	movs	r3, #0
 8112636:	e7e4      	b.n	8112602 <__hi0bits+0xa>

08112638 <__lo0bits>:
 8112638:	6803      	ldr	r3, [r0, #0]
 811263a:	f013 0207 	ands.w	r2, r3, #7
 811263e:	4601      	mov	r1, r0
 8112640:	d00b      	beq.n	811265a <__lo0bits+0x22>
 8112642:	07da      	lsls	r2, r3, #31
 8112644:	d424      	bmi.n	8112690 <__lo0bits+0x58>
 8112646:	0798      	lsls	r0, r3, #30
 8112648:	bf49      	itett	mi
 811264a:	085b      	lsrmi	r3, r3, #1
 811264c:	089b      	lsrpl	r3, r3, #2
 811264e:	2001      	movmi	r0, #1
 8112650:	600b      	strmi	r3, [r1, #0]
 8112652:	bf5c      	itt	pl
 8112654:	600b      	strpl	r3, [r1, #0]
 8112656:	2002      	movpl	r0, #2
 8112658:	4770      	bx	lr
 811265a:	b298      	uxth	r0, r3
 811265c:	b9b0      	cbnz	r0, 811268c <__lo0bits+0x54>
 811265e:	0c1b      	lsrs	r3, r3, #16
 8112660:	2010      	movs	r0, #16
 8112662:	f013 0fff 	tst.w	r3, #255	; 0xff
 8112666:	bf04      	itt	eq
 8112668:	0a1b      	lsreq	r3, r3, #8
 811266a:	3008      	addeq	r0, #8
 811266c:	071a      	lsls	r2, r3, #28
 811266e:	bf04      	itt	eq
 8112670:	091b      	lsreq	r3, r3, #4
 8112672:	3004      	addeq	r0, #4
 8112674:	079a      	lsls	r2, r3, #30
 8112676:	bf04      	itt	eq
 8112678:	089b      	lsreq	r3, r3, #2
 811267a:	3002      	addeq	r0, #2
 811267c:	07da      	lsls	r2, r3, #31
 811267e:	d403      	bmi.n	8112688 <__lo0bits+0x50>
 8112680:	085b      	lsrs	r3, r3, #1
 8112682:	f100 0001 	add.w	r0, r0, #1
 8112686:	d005      	beq.n	8112694 <__lo0bits+0x5c>
 8112688:	600b      	str	r3, [r1, #0]
 811268a:	4770      	bx	lr
 811268c:	4610      	mov	r0, r2
 811268e:	e7e8      	b.n	8112662 <__lo0bits+0x2a>
 8112690:	2000      	movs	r0, #0
 8112692:	4770      	bx	lr
 8112694:	2020      	movs	r0, #32
 8112696:	4770      	bx	lr

08112698 <__i2b>:
 8112698:	b510      	push	{r4, lr}
 811269a:	460c      	mov	r4, r1
 811269c:	2101      	movs	r1, #1
 811269e:	f7ff feff 	bl	81124a0 <_Balloc>
 81126a2:	4602      	mov	r2, r0
 81126a4:	b928      	cbnz	r0, 81126b2 <__i2b+0x1a>
 81126a6:	4b05      	ldr	r3, [pc, #20]	; (81126bc <__i2b+0x24>)
 81126a8:	4805      	ldr	r0, [pc, #20]	; (81126c0 <__i2b+0x28>)
 81126aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 81126ae:	f000 fb3f 	bl	8112d30 <__assert_func>
 81126b2:	2301      	movs	r3, #1
 81126b4:	6144      	str	r4, [r0, #20]
 81126b6:	6103      	str	r3, [r0, #16]
 81126b8:	bd10      	pop	{r4, pc}
 81126ba:	bf00      	nop
 81126bc:	081139bb 	.word	0x081139bb
 81126c0:	081139cc 	.word	0x081139cc

081126c4 <__multiply>:
 81126c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81126c8:	4614      	mov	r4, r2
 81126ca:	690a      	ldr	r2, [r1, #16]
 81126cc:	6923      	ldr	r3, [r4, #16]
 81126ce:	429a      	cmp	r2, r3
 81126d0:	bfb8      	it	lt
 81126d2:	460b      	movlt	r3, r1
 81126d4:	460d      	mov	r5, r1
 81126d6:	bfbc      	itt	lt
 81126d8:	4625      	movlt	r5, r4
 81126da:	461c      	movlt	r4, r3
 81126dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 81126e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 81126e4:	68ab      	ldr	r3, [r5, #8]
 81126e6:	6869      	ldr	r1, [r5, #4]
 81126e8:	eb0a 0709 	add.w	r7, sl, r9
 81126ec:	42bb      	cmp	r3, r7
 81126ee:	b085      	sub	sp, #20
 81126f0:	bfb8      	it	lt
 81126f2:	3101      	addlt	r1, #1
 81126f4:	f7ff fed4 	bl	81124a0 <_Balloc>
 81126f8:	b930      	cbnz	r0, 8112708 <__multiply+0x44>
 81126fa:	4602      	mov	r2, r0
 81126fc:	4b42      	ldr	r3, [pc, #264]	; (8112808 <__multiply+0x144>)
 81126fe:	4843      	ldr	r0, [pc, #268]	; (811280c <__multiply+0x148>)
 8112700:	f240 115d 	movw	r1, #349	; 0x15d
 8112704:	f000 fb14 	bl	8112d30 <__assert_func>
 8112708:	f100 0614 	add.w	r6, r0, #20
 811270c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8112710:	4633      	mov	r3, r6
 8112712:	2200      	movs	r2, #0
 8112714:	4543      	cmp	r3, r8
 8112716:	d31e      	bcc.n	8112756 <__multiply+0x92>
 8112718:	f105 0c14 	add.w	ip, r5, #20
 811271c:	f104 0314 	add.w	r3, r4, #20
 8112720:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8112724:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8112728:	9202      	str	r2, [sp, #8]
 811272a:	ebac 0205 	sub.w	r2, ip, r5
 811272e:	3a15      	subs	r2, #21
 8112730:	f022 0203 	bic.w	r2, r2, #3
 8112734:	3204      	adds	r2, #4
 8112736:	f105 0115 	add.w	r1, r5, #21
 811273a:	458c      	cmp	ip, r1
 811273c:	bf38      	it	cc
 811273e:	2204      	movcc	r2, #4
 8112740:	9201      	str	r2, [sp, #4]
 8112742:	9a02      	ldr	r2, [sp, #8]
 8112744:	9303      	str	r3, [sp, #12]
 8112746:	429a      	cmp	r2, r3
 8112748:	d808      	bhi.n	811275c <__multiply+0x98>
 811274a:	2f00      	cmp	r7, #0
 811274c:	dc55      	bgt.n	81127fa <__multiply+0x136>
 811274e:	6107      	str	r7, [r0, #16]
 8112750:	b005      	add	sp, #20
 8112752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112756:	f843 2b04 	str.w	r2, [r3], #4
 811275a:	e7db      	b.n	8112714 <__multiply+0x50>
 811275c:	f8b3 a000 	ldrh.w	sl, [r3]
 8112760:	f1ba 0f00 	cmp.w	sl, #0
 8112764:	d020      	beq.n	81127a8 <__multiply+0xe4>
 8112766:	f105 0e14 	add.w	lr, r5, #20
 811276a:	46b1      	mov	r9, r6
 811276c:	2200      	movs	r2, #0
 811276e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8112772:	f8d9 b000 	ldr.w	fp, [r9]
 8112776:	b2a1      	uxth	r1, r4
 8112778:	fa1f fb8b 	uxth.w	fp, fp
 811277c:	fb0a b101 	mla	r1, sl, r1, fp
 8112780:	4411      	add	r1, r2
 8112782:	f8d9 2000 	ldr.w	r2, [r9]
 8112786:	0c24      	lsrs	r4, r4, #16
 8112788:	0c12      	lsrs	r2, r2, #16
 811278a:	fb0a 2404 	mla	r4, sl, r4, r2
 811278e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8112792:	b289      	uxth	r1, r1
 8112794:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8112798:	45f4      	cmp	ip, lr
 811279a:	f849 1b04 	str.w	r1, [r9], #4
 811279e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 81127a2:	d8e4      	bhi.n	811276e <__multiply+0xaa>
 81127a4:	9901      	ldr	r1, [sp, #4]
 81127a6:	5072      	str	r2, [r6, r1]
 81127a8:	9a03      	ldr	r2, [sp, #12]
 81127aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 81127ae:	3304      	adds	r3, #4
 81127b0:	f1b9 0f00 	cmp.w	r9, #0
 81127b4:	d01f      	beq.n	81127f6 <__multiply+0x132>
 81127b6:	6834      	ldr	r4, [r6, #0]
 81127b8:	f105 0114 	add.w	r1, r5, #20
 81127bc:	46b6      	mov	lr, r6
 81127be:	f04f 0a00 	mov.w	sl, #0
 81127c2:	880a      	ldrh	r2, [r1, #0]
 81127c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 81127c8:	fb09 b202 	mla	r2, r9, r2, fp
 81127cc:	4492      	add	sl, r2
 81127ce:	b2a4      	uxth	r4, r4
 81127d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 81127d4:	f84e 4b04 	str.w	r4, [lr], #4
 81127d8:	f851 4b04 	ldr.w	r4, [r1], #4
 81127dc:	f8be 2000 	ldrh.w	r2, [lr]
 81127e0:	0c24      	lsrs	r4, r4, #16
 81127e2:	fb09 2404 	mla	r4, r9, r4, r2
 81127e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 81127ea:	458c      	cmp	ip, r1
 81127ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 81127f0:	d8e7      	bhi.n	81127c2 <__multiply+0xfe>
 81127f2:	9a01      	ldr	r2, [sp, #4]
 81127f4:	50b4      	str	r4, [r6, r2]
 81127f6:	3604      	adds	r6, #4
 81127f8:	e7a3      	b.n	8112742 <__multiply+0x7e>
 81127fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 81127fe:	2b00      	cmp	r3, #0
 8112800:	d1a5      	bne.n	811274e <__multiply+0x8a>
 8112802:	3f01      	subs	r7, #1
 8112804:	e7a1      	b.n	811274a <__multiply+0x86>
 8112806:	bf00      	nop
 8112808:	081139bb 	.word	0x081139bb
 811280c:	081139cc 	.word	0x081139cc

08112810 <__pow5mult>:
 8112810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8112814:	4615      	mov	r5, r2
 8112816:	f012 0203 	ands.w	r2, r2, #3
 811281a:	4606      	mov	r6, r0
 811281c:	460f      	mov	r7, r1
 811281e:	d007      	beq.n	8112830 <__pow5mult+0x20>
 8112820:	4c25      	ldr	r4, [pc, #148]	; (81128b8 <__pow5mult+0xa8>)
 8112822:	3a01      	subs	r2, #1
 8112824:	2300      	movs	r3, #0
 8112826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 811282a:	f7ff fe9b 	bl	8112564 <__multadd>
 811282e:	4607      	mov	r7, r0
 8112830:	10ad      	asrs	r5, r5, #2
 8112832:	d03d      	beq.n	81128b0 <__pow5mult+0xa0>
 8112834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8112836:	b97c      	cbnz	r4, 8112858 <__pow5mult+0x48>
 8112838:	2010      	movs	r0, #16
 811283a:	f7ff fe29 	bl	8112490 <malloc>
 811283e:	4602      	mov	r2, r0
 8112840:	6270      	str	r0, [r6, #36]	; 0x24
 8112842:	b928      	cbnz	r0, 8112850 <__pow5mult+0x40>
 8112844:	4b1d      	ldr	r3, [pc, #116]	; (81128bc <__pow5mult+0xac>)
 8112846:	481e      	ldr	r0, [pc, #120]	; (81128c0 <__pow5mult+0xb0>)
 8112848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 811284c:	f000 fa70 	bl	8112d30 <__assert_func>
 8112850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8112854:	6004      	str	r4, [r0, #0]
 8112856:	60c4      	str	r4, [r0, #12]
 8112858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 811285c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8112860:	b94c      	cbnz	r4, 8112876 <__pow5mult+0x66>
 8112862:	f240 2171 	movw	r1, #625	; 0x271
 8112866:	4630      	mov	r0, r6
 8112868:	f7ff ff16 	bl	8112698 <__i2b>
 811286c:	2300      	movs	r3, #0
 811286e:	f8c8 0008 	str.w	r0, [r8, #8]
 8112872:	4604      	mov	r4, r0
 8112874:	6003      	str	r3, [r0, #0]
 8112876:	f04f 0900 	mov.w	r9, #0
 811287a:	07eb      	lsls	r3, r5, #31
 811287c:	d50a      	bpl.n	8112894 <__pow5mult+0x84>
 811287e:	4639      	mov	r1, r7
 8112880:	4622      	mov	r2, r4
 8112882:	4630      	mov	r0, r6
 8112884:	f7ff ff1e 	bl	81126c4 <__multiply>
 8112888:	4639      	mov	r1, r7
 811288a:	4680      	mov	r8, r0
 811288c:	4630      	mov	r0, r6
 811288e:	f7ff fe47 	bl	8112520 <_Bfree>
 8112892:	4647      	mov	r7, r8
 8112894:	106d      	asrs	r5, r5, #1
 8112896:	d00b      	beq.n	81128b0 <__pow5mult+0xa0>
 8112898:	6820      	ldr	r0, [r4, #0]
 811289a:	b938      	cbnz	r0, 81128ac <__pow5mult+0x9c>
 811289c:	4622      	mov	r2, r4
 811289e:	4621      	mov	r1, r4
 81128a0:	4630      	mov	r0, r6
 81128a2:	f7ff ff0f 	bl	81126c4 <__multiply>
 81128a6:	6020      	str	r0, [r4, #0]
 81128a8:	f8c0 9000 	str.w	r9, [r0]
 81128ac:	4604      	mov	r4, r0
 81128ae:	e7e4      	b.n	811287a <__pow5mult+0x6a>
 81128b0:	4638      	mov	r0, r7
 81128b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81128b6:	bf00      	nop
 81128b8:	08113b20 	.word	0x08113b20
 81128bc:	08113945 	.word	0x08113945
 81128c0:	081139cc 	.word	0x081139cc

081128c4 <__lshift>:
 81128c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81128c8:	460c      	mov	r4, r1
 81128ca:	6849      	ldr	r1, [r1, #4]
 81128cc:	6923      	ldr	r3, [r4, #16]
 81128ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81128d2:	68a3      	ldr	r3, [r4, #8]
 81128d4:	4607      	mov	r7, r0
 81128d6:	4691      	mov	r9, r2
 81128d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81128dc:	f108 0601 	add.w	r6, r8, #1
 81128e0:	42b3      	cmp	r3, r6
 81128e2:	db0b      	blt.n	81128fc <__lshift+0x38>
 81128e4:	4638      	mov	r0, r7
 81128e6:	f7ff fddb 	bl	81124a0 <_Balloc>
 81128ea:	4605      	mov	r5, r0
 81128ec:	b948      	cbnz	r0, 8112902 <__lshift+0x3e>
 81128ee:	4602      	mov	r2, r0
 81128f0:	4b28      	ldr	r3, [pc, #160]	; (8112994 <__lshift+0xd0>)
 81128f2:	4829      	ldr	r0, [pc, #164]	; (8112998 <__lshift+0xd4>)
 81128f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 81128f8:	f000 fa1a 	bl	8112d30 <__assert_func>
 81128fc:	3101      	adds	r1, #1
 81128fe:	005b      	lsls	r3, r3, #1
 8112900:	e7ee      	b.n	81128e0 <__lshift+0x1c>
 8112902:	2300      	movs	r3, #0
 8112904:	f100 0114 	add.w	r1, r0, #20
 8112908:	f100 0210 	add.w	r2, r0, #16
 811290c:	4618      	mov	r0, r3
 811290e:	4553      	cmp	r3, sl
 8112910:	db33      	blt.n	811297a <__lshift+0xb6>
 8112912:	6920      	ldr	r0, [r4, #16]
 8112914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8112918:	f104 0314 	add.w	r3, r4, #20
 811291c:	f019 091f 	ands.w	r9, r9, #31
 8112920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8112924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8112928:	d02b      	beq.n	8112982 <__lshift+0xbe>
 811292a:	f1c9 0e20 	rsb	lr, r9, #32
 811292e:	468a      	mov	sl, r1
 8112930:	2200      	movs	r2, #0
 8112932:	6818      	ldr	r0, [r3, #0]
 8112934:	fa00 f009 	lsl.w	r0, r0, r9
 8112938:	4302      	orrs	r2, r0
 811293a:	f84a 2b04 	str.w	r2, [sl], #4
 811293e:	f853 2b04 	ldr.w	r2, [r3], #4
 8112942:	459c      	cmp	ip, r3
 8112944:	fa22 f20e 	lsr.w	r2, r2, lr
 8112948:	d8f3      	bhi.n	8112932 <__lshift+0x6e>
 811294a:	ebac 0304 	sub.w	r3, ip, r4
 811294e:	3b15      	subs	r3, #21
 8112950:	f023 0303 	bic.w	r3, r3, #3
 8112954:	3304      	adds	r3, #4
 8112956:	f104 0015 	add.w	r0, r4, #21
 811295a:	4584      	cmp	ip, r0
 811295c:	bf38      	it	cc
 811295e:	2304      	movcc	r3, #4
 8112960:	50ca      	str	r2, [r1, r3]
 8112962:	b10a      	cbz	r2, 8112968 <__lshift+0xa4>
 8112964:	f108 0602 	add.w	r6, r8, #2
 8112968:	3e01      	subs	r6, #1
 811296a:	4638      	mov	r0, r7
 811296c:	612e      	str	r6, [r5, #16]
 811296e:	4621      	mov	r1, r4
 8112970:	f7ff fdd6 	bl	8112520 <_Bfree>
 8112974:	4628      	mov	r0, r5
 8112976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 811297a:	f842 0f04 	str.w	r0, [r2, #4]!
 811297e:	3301      	adds	r3, #1
 8112980:	e7c5      	b.n	811290e <__lshift+0x4a>
 8112982:	3904      	subs	r1, #4
 8112984:	f853 2b04 	ldr.w	r2, [r3], #4
 8112988:	f841 2f04 	str.w	r2, [r1, #4]!
 811298c:	459c      	cmp	ip, r3
 811298e:	d8f9      	bhi.n	8112984 <__lshift+0xc0>
 8112990:	e7ea      	b.n	8112968 <__lshift+0xa4>
 8112992:	bf00      	nop
 8112994:	081139bb 	.word	0x081139bb
 8112998:	081139cc 	.word	0x081139cc

0811299c <__mcmp>:
 811299c:	b530      	push	{r4, r5, lr}
 811299e:	6902      	ldr	r2, [r0, #16]
 81129a0:	690c      	ldr	r4, [r1, #16]
 81129a2:	1b12      	subs	r2, r2, r4
 81129a4:	d10e      	bne.n	81129c4 <__mcmp+0x28>
 81129a6:	f100 0314 	add.w	r3, r0, #20
 81129aa:	3114      	adds	r1, #20
 81129ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 81129b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 81129b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 81129b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 81129bc:	42a5      	cmp	r5, r4
 81129be:	d003      	beq.n	81129c8 <__mcmp+0x2c>
 81129c0:	d305      	bcc.n	81129ce <__mcmp+0x32>
 81129c2:	2201      	movs	r2, #1
 81129c4:	4610      	mov	r0, r2
 81129c6:	bd30      	pop	{r4, r5, pc}
 81129c8:	4283      	cmp	r3, r0
 81129ca:	d3f3      	bcc.n	81129b4 <__mcmp+0x18>
 81129cc:	e7fa      	b.n	81129c4 <__mcmp+0x28>
 81129ce:	f04f 32ff 	mov.w	r2, #4294967295
 81129d2:	e7f7      	b.n	81129c4 <__mcmp+0x28>

081129d4 <__mdiff>:
 81129d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81129d8:	460c      	mov	r4, r1
 81129da:	4606      	mov	r6, r0
 81129dc:	4611      	mov	r1, r2
 81129de:	4620      	mov	r0, r4
 81129e0:	4617      	mov	r7, r2
 81129e2:	f7ff ffdb 	bl	811299c <__mcmp>
 81129e6:	1e05      	subs	r5, r0, #0
 81129e8:	d110      	bne.n	8112a0c <__mdiff+0x38>
 81129ea:	4629      	mov	r1, r5
 81129ec:	4630      	mov	r0, r6
 81129ee:	f7ff fd57 	bl	81124a0 <_Balloc>
 81129f2:	b930      	cbnz	r0, 8112a02 <__mdiff+0x2e>
 81129f4:	4b39      	ldr	r3, [pc, #228]	; (8112adc <__mdiff+0x108>)
 81129f6:	4602      	mov	r2, r0
 81129f8:	f240 2132 	movw	r1, #562	; 0x232
 81129fc:	4838      	ldr	r0, [pc, #224]	; (8112ae0 <__mdiff+0x10c>)
 81129fe:	f000 f997 	bl	8112d30 <__assert_func>
 8112a02:	2301      	movs	r3, #1
 8112a04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8112a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112a0c:	bfa4      	itt	ge
 8112a0e:	463b      	movge	r3, r7
 8112a10:	4627      	movge	r7, r4
 8112a12:	4630      	mov	r0, r6
 8112a14:	6879      	ldr	r1, [r7, #4]
 8112a16:	bfa6      	itte	ge
 8112a18:	461c      	movge	r4, r3
 8112a1a:	2500      	movge	r5, #0
 8112a1c:	2501      	movlt	r5, #1
 8112a1e:	f7ff fd3f 	bl	81124a0 <_Balloc>
 8112a22:	b920      	cbnz	r0, 8112a2e <__mdiff+0x5a>
 8112a24:	4b2d      	ldr	r3, [pc, #180]	; (8112adc <__mdiff+0x108>)
 8112a26:	4602      	mov	r2, r0
 8112a28:	f44f 7110 	mov.w	r1, #576	; 0x240
 8112a2c:	e7e6      	b.n	81129fc <__mdiff+0x28>
 8112a2e:	693e      	ldr	r6, [r7, #16]
 8112a30:	60c5      	str	r5, [r0, #12]
 8112a32:	6925      	ldr	r5, [r4, #16]
 8112a34:	f107 0114 	add.w	r1, r7, #20
 8112a38:	f104 0914 	add.w	r9, r4, #20
 8112a3c:	f100 0e14 	add.w	lr, r0, #20
 8112a40:	f107 0210 	add.w	r2, r7, #16
 8112a44:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8112a48:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8112a4c:	46f2      	mov	sl, lr
 8112a4e:	2700      	movs	r7, #0
 8112a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8112a54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8112a58:	fa1f f883 	uxth.w	r8, r3
 8112a5c:	fa17 f78b 	uxtah	r7, r7, fp
 8112a60:	0c1b      	lsrs	r3, r3, #16
 8112a62:	eba7 0808 	sub.w	r8, r7, r8
 8112a66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8112a6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8112a6e:	fa1f f888 	uxth.w	r8, r8
 8112a72:	141f      	asrs	r7, r3, #16
 8112a74:	454d      	cmp	r5, r9
 8112a76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8112a7a:	f84a 3b04 	str.w	r3, [sl], #4
 8112a7e:	d8e7      	bhi.n	8112a50 <__mdiff+0x7c>
 8112a80:	1b2b      	subs	r3, r5, r4
 8112a82:	3b15      	subs	r3, #21
 8112a84:	f023 0303 	bic.w	r3, r3, #3
 8112a88:	3304      	adds	r3, #4
 8112a8a:	3415      	adds	r4, #21
 8112a8c:	42a5      	cmp	r5, r4
 8112a8e:	bf38      	it	cc
 8112a90:	2304      	movcc	r3, #4
 8112a92:	4419      	add	r1, r3
 8112a94:	4473      	add	r3, lr
 8112a96:	469e      	mov	lr, r3
 8112a98:	460d      	mov	r5, r1
 8112a9a:	4565      	cmp	r5, ip
 8112a9c:	d30e      	bcc.n	8112abc <__mdiff+0xe8>
 8112a9e:	f10c 0203 	add.w	r2, ip, #3
 8112aa2:	1a52      	subs	r2, r2, r1
 8112aa4:	f022 0203 	bic.w	r2, r2, #3
 8112aa8:	3903      	subs	r1, #3
 8112aaa:	458c      	cmp	ip, r1
 8112aac:	bf38      	it	cc
 8112aae:	2200      	movcc	r2, #0
 8112ab0:	441a      	add	r2, r3
 8112ab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8112ab6:	b17b      	cbz	r3, 8112ad8 <__mdiff+0x104>
 8112ab8:	6106      	str	r6, [r0, #16]
 8112aba:	e7a5      	b.n	8112a08 <__mdiff+0x34>
 8112abc:	f855 8b04 	ldr.w	r8, [r5], #4
 8112ac0:	fa17 f488 	uxtah	r4, r7, r8
 8112ac4:	1422      	asrs	r2, r4, #16
 8112ac6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8112aca:	b2a4      	uxth	r4, r4
 8112acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8112ad0:	f84e 4b04 	str.w	r4, [lr], #4
 8112ad4:	1417      	asrs	r7, r2, #16
 8112ad6:	e7e0      	b.n	8112a9a <__mdiff+0xc6>
 8112ad8:	3e01      	subs	r6, #1
 8112ada:	e7ea      	b.n	8112ab2 <__mdiff+0xde>
 8112adc:	081139bb 	.word	0x081139bb
 8112ae0:	081139cc 	.word	0x081139cc

08112ae4 <__d2b>:
 8112ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8112ae8:	4689      	mov	r9, r1
 8112aea:	2101      	movs	r1, #1
 8112aec:	ec57 6b10 	vmov	r6, r7, d0
 8112af0:	4690      	mov	r8, r2
 8112af2:	f7ff fcd5 	bl	81124a0 <_Balloc>
 8112af6:	4604      	mov	r4, r0
 8112af8:	b930      	cbnz	r0, 8112b08 <__d2b+0x24>
 8112afa:	4602      	mov	r2, r0
 8112afc:	4b25      	ldr	r3, [pc, #148]	; (8112b94 <__d2b+0xb0>)
 8112afe:	4826      	ldr	r0, [pc, #152]	; (8112b98 <__d2b+0xb4>)
 8112b00:	f240 310a 	movw	r1, #778	; 0x30a
 8112b04:	f000 f914 	bl	8112d30 <__assert_func>
 8112b08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8112b0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8112b10:	bb35      	cbnz	r5, 8112b60 <__d2b+0x7c>
 8112b12:	2e00      	cmp	r6, #0
 8112b14:	9301      	str	r3, [sp, #4]
 8112b16:	d028      	beq.n	8112b6a <__d2b+0x86>
 8112b18:	4668      	mov	r0, sp
 8112b1a:	9600      	str	r6, [sp, #0]
 8112b1c:	f7ff fd8c 	bl	8112638 <__lo0bits>
 8112b20:	9900      	ldr	r1, [sp, #0]
 8112b22:	b300      	cbz	r0, 8112b66 <__d2b+0x82>
 8112b24:	9a01      	ldr	r2, [sp, #4]
 8112b26:	f1c0 0320 	rsb	r3, r0, #32
 8112b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8112b2e:	430b      	orrs	r3, r1
 8112b30:	40c2      	lsrs	r2, r0
 8112b32:	6163      	str	r3, [r4, #20]
 8112b34:	9201      	str	r2, [sp, #4]
 8112b36:	9b01      	ldr	r3, [sp, #4]
 8112b38:	61a3      	str	r3, [r4, #24]
 8112b3a:	2b00      	cmp	r3, #0
 8112b3c:	bf14      	ite	ne
 8112b3e:	2202      	movne	r2, #2
 8112b40:	2201      	moveq	r2, #1
 8112b42:	6122      	str	r2, [r4, #16]
 8112b44:	b1d5      	cbz	r5, 8112b7c <__d2b+0x98>
 8112b46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8112b4a:	4405      	add	r5, r0
 8112b4c:	f8c9 5000 	str.w	r5, [r9]
 8112b50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8112b54:	f8c8 0000 	str.w	r0, [r8]
 8112b58:	4620      	mov	r0, r4
 8112b5a:	b003      	add	sp, #12
 8112b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8112b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8112b64:	e7d5      	b.n	8112b12 <__d2b+0x2e>
 8112b66:	6161      	str	r1, [r4, #20]
 8112b68:	e7e5      	b.n	8112b36 <__d2b+0x52>
 8112b6a:	a801      	add	r0, sp, #4
 8112b6c:	f7ff fd64 	bl	8112638 <__lo0bits>
 8112b70:	9b01      	ldr	r3, [sp, #4]
 8112b72:	6163      	str	r3, [r4, #20]
 8112b74:	2201      	movs	r2, #1
 8112b76:	6122      	str	r2, [r4, #16]
 8112b78:	3020      	adds	r0, #32
 8112b7a:	e7e3      	b.n	8112b44 <__d2b+0x60>
 8112b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8112b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8112b84:	f8c9 0000 	str.w	r0, [r9]
 8112b88:	6918      	ldr	r0, [r3, #16]
 8112b8a:	f7ff fd35 	bl	81125f8 <__hi0bits>
 8112b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8112b92:	e7df      	b.n	8112b54 <__d2b+0x70>
 8112b94:	081139bb 	.word	0x081139bb
 8112b98:	081139cc 	.word	0x081139cc

08112b9c <_calloc_r>:
 8112b9c:	b513      	push	{r0, r1, r4, lr}
 8112b9e:	434a      	muls	r2, r1
 8112ba0:	4611      	mov	r1, r2
 8112ba2:	9201      	str	r2, [sp, #4]
 8112ba4:	f000 f85a 	bl	8112c5c <_malloc_r>
 8112ba8:	4604      	mov	r4, r0
 8112baa:	b118      	cbz	r0, 8112bb4 <_calloc_r+0x18>
 8112bac:	9a01      	ldr	r2, [sp, #4]
 8112bae:	2100      	movs	r1, #0
 8112bb0:	f7fe f97e 	bl	8110eb0 <memset>
 8112bb4:	4620      	mov	r0, r4
 8112bb6:	b002      	add	sp, #8
 8112bb8:	bd10      	pop	{r4, pc}
	...

08112bbc <_free_r>:
 8112bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8112bbe:	2900      	cmp	r1, #0
 8112bc0:	d048      	beq.n	8112c54 <_free_r+0x98>
 8112bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8112bc6:	9001      	str	r0, [sp, #4]
 8112bc8:	2b00      	cmp	r3, #0
 8112bca:	f1a1 0404 	sub.w	r4, r1, #4
 8112bce:	bfb8      	it	lt
 8112bd0:	18e4      	addlt	r4, r4, r3
 8112bd2:	f000 f8ef 	bl	8112db4 <__malloc_lock>
 8112bd6:	4a20      	ldr	r2, [pc, #128]	; (8112c58 <_free_r+0x9c>)
 8112bd8:	9801      	ldr	r0, [sp, #4]
 8112bda:	6813      	ldr	r3, [r2, #0]
 8112bdc:	4615      	mov	r5, r2
 8112bde:	b933      	cbnz	r3, 8112bee <_free_r+0x32>
 8112be0:	6063      	str	r3, [r4, #4]
 8112be2:	6014      	str	r4, [r2, #0]
 8112be4:	b003      	add	sp, #12
 8112be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8112bea:	f000 b8e9 	b.w	8112dc0 <__malloc_unlock>
 8112bee:	42a3      	cmp	r3, r4
 8112bf0:	d90b      	bls.n	8112c0a <_free_r+0x4e>
 8112bf2:	6821      	ldr	r1, [r4, #0]
 8112bf4:	1862      	adds	r2, r4, r1
 8112bf6:	4293      	cmp	r3, r2
 8112bf8:	bf04      	itt	eq
 8112bfa:	681a      	ldreq	r2, [r3, #0]
 8112bfc:	685b      	ldreq	r3, [r3, #4]
 8112bfe:	6063      	str	r3, [r4, #4]
 8112c00:	bf04      	itt	eq
 8112c02:	1852      	addeq	r2, r2, r1
 8112c04:	6022      	streq	r2, [r4, #0]
 8112c06:	602c      	str	r4, [r5, #0]
 8112c08:	e7ec      	b.n	8112be4 <_free_r+0x28>
 8112c0a:	461a      	mov	r2, r3
 8112c0c:	685b      	ldr	r3, [r3, #4]
 8112c0e:	b10b      	cbz	r3, 8112c14 <_free_r+0x58>
 8112c10:	42a3      	cmp	r3, r4
 8112c12:	d9fa      	bls.n	8112c0a <_free_r+0x4e>
 8112c14:	6811      	ldr	r1, [r2, #0]
 8112c16:	1855      	adds	r5, r2, r1
 8112c18:	42a5      	cmp	r5, r4
 8112c1a:	d10b      	bne.n	8112c34 <_free_r+0x78>
 8112c1c:	6824      	ldr	r4, [r4, #0]
 8112c1e:	4421      	add	r1, r4
 8112c20:	1854      	adds	r4, r2, r1
 8112c22:	42a3      	cmp	r3, r4
 8112c24:	6011      	str	r1, [r2, #0]
 8112c26:	d1dd      	bne.n	8112be4 <_free_r+0x28>
 8112c28:	681c      	ldr	r4, [r3, #0]
 8112c2a:	685b      	ldr	r3, [r3, #4]
 8112c2c:	6053      	str	r3, [r2, #4]
 8112c2e:	4421      	add	r1, r4
 8112c30:	6011      	str	r1, [r2, #0]
 8112c32:	e7d7      	b.n	8112be4 <_free_r+0x28>
 8112c34:	d902      	bls.n	8112c3c <_free_r+0x80>
 8112c36:	230c      	movs	r3, #12
 8112c38:	6003      	str	r3, [r0, #0]
 8112c3a:	e7d3      	b.n	8112be4 <_free_r+0x28>
 8112c3c:	6825      	ldr	r5, [r4, #0]
 8112c3e:	1961      	adds	r1, r4, r5
 8112c40:	428b      	cmp	r3, r1
 8112c42:	bf04      	itt	eq
 8112c44:	6819      	ldreq	r1, [r3, #0]
 8112c46:	685b      	ldreq	r3, [r3, #4]
 8112c48:	6063      	str	r3, [r4, #4]
 8112c4a:	bf04      	itt	eq
 8112c4c:	1949      	addeq	r1, r1, r5
 8112c4e:	6021      	streq	r1, [r4, #0]
 8112c50:	6054      	str	r4, [r2, #4]
 8112c52:	e7c7      	b.n	8112be4 <_free_r+0x28>
 8112c54:	b003      	add	sp, #12
 8112c56:	bd30      	pop	{r4, r5, pc}
 8112c58:	10004b24 	.word	0x10004b24

08112c5c <_malloc_r>:
 8112c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112c5e:	1ccd      	adds	r5, r1, #3
 8112c60:	f025 0503 	bic.w	r5, r5, #3
 8112c64:	3508      	adds	r5, #8
 8112c66:	2d0c      	cmp	r5, #12
 8112c68:	bf38      	it	cc
 8112c6a:	250c      	movcc	r5, #12
 8112c6c:	2d00      	cmp	r5, #0
 8112c6e:	4606      	mov	r6, r0
 8112c70:	db01      	blt.n	8112c76 <_malloc_r+0x1a>
 8112c72:	42a9      	cmp	r1, r5
 8112c74:	d903      	bls.n	8112c7e <_malloc_r+0x22>
 8112c76:	230c      	movs	r3, #12
 8112c78:	6033      	str	r3, [r6, #0]
 8112c7a:	2000      	movs	r0, #0
 8112c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8112c7e:	f000 f899 	bl	8112db4 <__malloc_lock>
 8112c82:	4921      	ldr	r1, [pc, #132]	; (8112d08 <_malloc_r+0xac>)
 8112c84:	680a      	ldr	r2, [r1, #0]
 8112c86:	4614      	mov	r4, r2
 8112c88:	b99c      	cbnz	r4, 8112cb2 <_malloc_r+0x56>
 8112c8a:	4f20      	ldr	r7, [pc, #128]	; (8112d0c <_malloc_r+0xb0>)
 8112c8c:	683b      	ldr	r3, [r7, #0]
 8112c8e:	b923      	cbnz	r3, 8112c9a <_malloc_r+0x3e>
 8112c90:	4621      	mov	r1, r4
 8112c92:	4630      	mov	r0, r6
 8112c94:	f000 f83c 	bl	8112d10 <_sbrk_r>
 8112c98:	6038      	str	r0, [r7, #0]
 8112c9a:	4629      	mov	r1, r5
 8112c9c:	4630      	mov	r0, r6
 8112c9e:	f000 f837 	bl	8112d10 <_sbrk_r>
 8112ca2:	1c43      	adds	r3, r0, #1
 8112ca4:	d123      	bne.n	8112cee <_malloc_r+0x92>
 8112ca6:	230c      	movs	r3, #12
 8112ca8:	6033      	str	r3, [r6, #0]
 8112caa:	4630      	mov	r0, r6
 8112cac:	f000 f888 	bl	8112dc0 <__malloc_unlock>
 8112cb0:	e7e3      	b.n	8112c7a <_malloc_r+0x1e>
 8112cb2:	6823      	ldr	r3, [r4, #0]
 8112cb4:	1b5b      	subs	r3, r3, r5
 8112cb6:	d417      	bmi.n	8112ce8 <_malloc_r+0x8c>
 8112cb8:	2b0b      	cmp	r3, #11
 8112cba:	d903      	bls.n	8112cc4 <_malloc_r+0x68>
 8112cbc:	6023      	str	r3, [r4, #0]
 8112cbe:	441c      	add	r4, r3
 8112cc0:	6025      	str	r5, [r4, #0]
 8112cc2:	e004      	b.n	8112cce <_malloc_r+0x72>
 8112cc4:	6863      	ldr	r3, [r4, #4]
 8112cc6:	42a2      	cmp	r2, r4
 8112cc8:	bf0c      	ite	eq
 8112cca:	600b      	streq	r3, [r1, #0]
 8112ccc:	6053      	strne	r3, [r2, #4]
 8112cce:	4630      	mov	r0, r6
 8112cd0:	f000 f876 	bl	8112dc0 <__malloc_unlock>
 8112cd4:	f104 000b 	add.w	r0, r4, #11
 8112cd8:	1d23      	adds	r3, r4, #4
 8112cda:	f020 0007 	bic.w	r0, r0, #7
 8112cde:	1ac2      	subs	r2, r0, r3
 8112ce0:	d0cc      	beq.n	8112c7c <_malloc_r+0x20>
 8112ce2:	1a1b      	subs	r3, r3, r0
 8112ce4:	50a3      	str	r3, [r4, r2]
 8112ce6:	e7c9      	b.n	8112c7c <_malloc_r+0x20>
 8112ce8:	4622      	mov	r2, r4
 8112cea:	6864      	ldr	r4, [r4, #4]
 8112cec:	e7cc      	b.n	8112c88 <_malloc_r+0x2c>
 8112cee:	1cc4      	adds	r4, r0, #3
 8112cf0:	f024 0403 	bic.w	r4, r4, #3
 8112cf4:	42a0      	cmp	r0, r4
 8112cf6:	d0e3      	beq.n	8112cc0 <_malloc_r+0x64>
 8112cf8:	1a21      	subs	r1, r4, r0
 8112cfa:	4630      	mov	r0, r6
 8112cfc:	f000 f808 	bl	8112d10 <_sbrk_r>
 8112d00:	3001      	adds	r0, #1
 8112d02:	d1dd      	bne.n	8112cc0 <_malloc_r+0x64>
 8112d04:	e7cf      	b.n	8112ca6 <_malloc_r+0x4a>
 8112d06:	bf00      	nop
 8112d08:	10004b24 	.word	0x10004b24
 8112d0c:	10004b28 	.word	0x10004b28

08112d10 <_sbrk_r>:
 8112d10:	b538      	push	{r3, r4, r5, lr}
 8112d12:	4d06      	ldr	r5, [pc, #24]	; (8112d2c <_sbrk_r+0x1c>)
 8112d14:	2300      	movs	r3, #0
 8112d16:	4604      	mov	r4, r0
 8112d18:	4608      	mov	r0, r1
 8112d1a:	602b      	str	r3, [r5, #0]
 8112d1c:	f7ef f808 	bl	8101d30 <_sbrk>
 8112d20:	1c43      	adds	r3, r0, #1
 8112d22:	d102      	bne.n	8112d2a <_sbrk_r+0x1a>
 8112d24:	682b      	ldr	r3, [r5, #0]
 8112d26:	b103      	cbz	r3, 8112d2a <_sbrk_r+0x1a>
 8112d28:	6023      	str	r3, [r4, #0]
 8112d2a:	bd38      	pop	{r3, r4, r5, pc}
 8112d2c:	10006f88 	.word	0x10006f88

08112d30 <__assert_func>:
 8112d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8112d32:	4614      	mov	r4, r2
 8112d34:	461a      	mov	r2, r3
 8112d36:	4b09      	ldr	r3, [pc, #36]	; (8112d5c <__assert_func+0x2c>)
 8112d38:	681b      	ldr	r3, [r3, #0]
 8112d3a:	4605      	mov	r5, r0
 8112d3c:	68d8      	ldr	r0, [r3, #12]
 8112d3e:	b14c      	cbz	r4, 8112d54 <__assert_func+0x24>
 8112d40:	4b07      	ldr	r3, [pc, #28]	; (8112d60 <__assert_func+0x30>)
 8112d42:	9100      	str	r1, [sp, #0]
 8112d44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8112d48:	4906      	ldr	r1, [pc, #24]	; (8112d64 <__assert_func+0x34>)
 8112d4a:	462b      	mov	r3, r5
 8112d4c:	f000 f80e 	bl	8112d6c <fiprintf>
 8112d50:	f000 fa64 	bl	811321c <abort>
 8112d54:	4b04      	ldr	r3, [pc, #16]	; (8112d68 <__assert_func+0x38>)
 8112d56:	461c      	mov	r4, r3
 8112d58:	e7f3      	b.n	8112d42 <__assert_func+0x12>
 8112d5a:	bf00      	nop
 8112d5c:	10000014 	.word	0x10000014
 8112d60:	08113b2c 	.word	0x08113b2c
 8112d64:	08113b39 	.word	0x08113b39
 8112d68:	08113b67 	.word	0x08113b67

08112d6c <fiprintf>:
 8112d6c:	b40e      	push	{r1, r2, r3}
 8112d6e:	b503      	push	{r0, r1, lr}
 8112d70:	4601      	mov	r1, r0
 8112d72:	ab03      	add	r3, sp, #12
 8112d74:	4805      	ldr	r0, [pc, #20]	; (8112d8c <fiprintf+0x20>)
 8112d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8112d7a:	6800      	ldr	r0, [r0, #0]
 8112d7c:	9301      	str	r3, [sp, #4]
 8112d7e:	f000 f84f 	bl	8112e20 <_vfiprintf_r>
 8112d82:	b002      	add	sp, #8
 8112d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8112d88:	b003      	add	sp, #12
 8112d8a:	4770      	bx	lr
 8112d8c:	10000014 	.word	0x10000014

08112d90 <__ascii_mbtowc>:
 8112d90:	b082      	sub	sp, #8
 8112d92:	b901      	cbnz	r1, 8112d96 <__ascii_mbtowc+0x6>
 8112d94:	a901      	add	r1, sp, #4
 8112d96:	b142      	cbz	r2, 8112daa <__ascii_mbtowc+0x1a>
 8112d98:	b14b      	cbz	r3, 8112dae <__ascii_mbtowc+0x1e>
 8112d9a:	7813      	ldrb	r3, [r2, #0]
 8112d9c:	600b      	str	r3, [r1, #0]
 8112d9e:	7812      	ldrb	r2, [r2, #0]
 8112da0:	1e10      	subs	r0, r2, #0
 8112da2:	bf18      	it	ne
 8112da4:	2001      	movne	r0, #1
 8112da6:	b002      	add	sp, #8
 8112da8:	4770      	bx	lr
 8112daa:	4610      	mov	r0, r2
 8112dac:	e7fb      	b.n	8112da6 <__ascii_mbtowc+0x16>
 8112dae:	f06f 0001 	mvn.w	r0, #1
 8112db2:	e7f8      	b.n	8112da6 <__ascii_mbtowc+0x16>

08112db4 <__malloc_lock>:
 8112db4:	4801      	ldr	r0, [pc, #4]	; (8112dbc <__malloc_lock+0x8>)
 8112db6:	f000 bbf1 	b.w	811359c <__retarget_lock_acquire_recursive>
 8112dba:	bf00      	nop
 8112dbc:	10006f90 	.word	0x10006f90

08112dc0 <__malloc_unlock>:
 8112dc0:	4801      	ldr	r0, [pc, #4]	; (8112dc8 <__malloc_unlock+0x8>)
 8112dc2:	f000 bbec 	b.w	811359e <__retarget_lock_release_recursive>
 8112dc6:	bf00      	nop
 8112dc8:	10006f90 	.word	0x10006f90

08112dcc <__sfputc_r>:
 8112dcc:	6893      	ldr	r3, [r2, #8]
 8112dce:	3b01      	subs	r3, #1
 8112dd0:	2b00      	cmp	r3, #0
 8112dd2:	b410      	push	{r4}
 8112dd4:	6093      	str	r3, [r2, #8]
 8112dd6:	da08      	bge.n	8112dea <__sfputc_r+0x1e>
 8112dd8:	6994      	ldr	r4, [r2, #24]
 8112dda:	42a3      	cmp	r3, r4
 8112ddc:	db01      	blt.n	8112de2 <__sfputc_r+0x16>
 8112dde:	290a      	cmp	r1, #10
 8112de0:	d103      	bne.n	8112dea <__sfputc_r+0x1e>
 8112de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112de6:	f000 b94b 	b.w	8113080 <__swbuf_r>
 8112dea:	6813      	ldr	r3, [r2, #0]
 8112dec:	1c58      	adds	r0, r3, #1
 8112dee:	6010      	str	r0, [r2, #0]
 8112df0:	7019      	strb	r1, [r3, #0]
 8112df2:	4608      	mov	r0, r1
 8112df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8112df8:	4770      	bx	lr

08112dfa <__sfputs_r>:
 8112dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8112dfc:	4606      	mov	r6, r0
 8112dfe:	460f      	mov	r7, r1
 8112e00:	4614      	mov	r4, r2
 8112e02:	18d5      	adds	r5, r2, r3
 8112e04:	42ac      	cmp	r4, r5
 8112e06:	d101      	bne.n	8112e0c <__sfputs_r+0x12>
 8112e08:	2000      	movs	r0, #0
 8112e0a:	e007      	b.n	8112e1c <__sfputs_r+0x22>
 8112e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112e10:	463a      	mov	r2, r7
 8112e12:	4630      	mov	r0, r6
 8112e14:	f7ff ffda 	bl	8112dcc <__sfputc_r>
 8112e18:	1c43      	adds	r3, r0, #1
 8112e1a:	d1f3      	bne.n	8112e04 <__sfputs_r+0xa>
 8112e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08112e20 <_vfiprintf_r>:
 8112e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8112e24:	460d      	mov	r5, r1
 8112e26:	b09d      	sub	sp, #116	; 0x74
 8112e28:	4614      	mov	r4, r2
 8112e2a:	4698      	mov	r8, r3
 8112e2c:	4606      	mov	r6, r0
 8112e2e:	b118      	cbz	r0, 8112e38 <_vfiprintf_r+0x18>
 8112e30:	6983      	ldr	r3, [r0, #24]
 8112e32:	b90b      	cbnz	r3, 8112e38 <_vfiprintf_r+0x18>
 8112e34:	f000 fb14 	bl	8113460 <__sinit>
 8112e38:	4b89      	ldr	r3, [pc, #548]	; (8113060 <_vfiprintf_r+0x240>)
 8112e3a:	429d      	cmp	r5, r3
 8112e3c:	d11b      	bne.n	8112e76 <_vfiprintf_r+0x56>
 8112e3e:	6875      	ldr	r5, [r6, #4]
 8112e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8112e42:	07d9      	lsls	r1, r3, #31
 8112e44:	d405      	bmi.n	8112e52 <_vfiprintf_r+0x32>
 8112e46:	89ab      	ldrh	r3, [r5, #12]
 8112e48:	059a      	lsls	r2, r3, #22
 8112e4a:	d402      	bmi.n	8112e52 <_vfiprintf_r+0x32>
 8112e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8112e4e:	f000 fba5 	bl	811359c <__retarget_lock_acquire_recursive>
 8112e52:	89ab      	ldrh	r3, [r5, #12]
 8112e54:	071b      	lsls	r3, r3, #28
 8112e56:	d501      	bpl.n	8112e5c <_vfiprintf_r+0x3c>
 8112e58:	692b      	ldr	r3, [r5, #16]
 8112e5a:	b9eb      	cbnz	r3, 8112e98 <_vfiprintf_r+0x78>
 8112e5c:	4629      	mov	r1, r5
 8112e5e:	4630      	mov	r0, r6
 8112e60:	f000 f96e 	bl	8113140 <__swsetup_r>
 8112e64:	b1c0      	cbz	r0, 8112e98 <_vfiprintf_r+0x78>
 8112e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8112e68:	07dc      	lsls	r4, r3, #31
 8112e6a:	d50e      	bpl.n	8112e8a <_vfiprintf_r+0x6a>
 8112e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8112e70:	b01d      	add	sp, #116	; 0x74
 8112e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8112e76:	4b7b      	ldr	r3, [pc, #492]	; (8113064 <_vfiprintf_r+0x244>)
 8112e78:	429d      	cmp	r5, r3
 8112e7a:	d101      	bne.n	8112e80 <_vfiprintf_r+0x60>
 8112e7c:	68b5      	ldr	r5, [r6, #8]
 8112e7e:	e7df      	b.n	8112e40 <_vfiprintf_r+0x20>
 8112e80:	4b79      	ldr	r3, [pc, #484]	; (8113068 <_vfiprintf_r+0x248>)
 8112e82:	429d      	cmp	r5, r3
 8112e84:	bf08      	it	eq
 8112e86:	68f5      	ldreq	r5, [r6, #12]
 8112e88:	e7da      	b.n	8112e40 <_vfiprintf_r+0x20>
 8112e8a:	89ab      	ldrh	r3, [r5, #12]
 8112e8c:	0598      	lsls	r0, r3, #22
 8112e8e:	d4ed      	bmi.n	8112e6c <_vfiprintf_r+0x4c>
 8112e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8112e92:	f000 fb84 	bl	811359e <__retarget_lock_release_recursive>
 8112e96:	e7e9      	b.n	8112e6c <_vfiprintf_r+0x4c>
 8112e98:	2300      	movs	r3, #0
 8112e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8112e9c:	2320      	movs	r3, #32
 8112e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8112ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8112ea6:	2330      	movs	r3, #48	; 0x30
 8112ea8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 811306c <_vfiprintf_r+0x24c>
 8112eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8112eb0:	f04f 0901 	mov.w	r9, #1
 8112eb4:	4623      	mov	r3, r4
 8112eb6:	469a      	mov	sl, r3
 8112eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8112ebc:	b10a      	cbz	r2, 8112ec2 <_vfiprintf_r+0xa2>
 8112ebe:	2a25      	cmp	r2, #37	; 0x25
 8112ec0:	d1f9      	bne.n	8112eb6 <_vfiprintf_r+0x96>
 8112ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8112ec6:	d00b      	beq.n	8112ee0 <_vfiprintf_r+0xc0>
 8112ec8:	465b      	mov	r3, fp
 8112eca:	4622      	mov	r2, r4
 8112ecc:	4629      	mov	r1, r5
 8112ece:	4630      	mov	r0, r6
 8112ed0:	f7ff ff93 	bl	8112dfa <__sfputs_r>
 8112ed4:	3001      	adds	r0, #1
 8112ed6:	f000 80aa 	beq.w	811302e <_vfiprintf_r+0x20e>
 8112eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8112edc:	445a      	add	r2, fp
 8112ede:	9209      	str	r2, [sp, #36]	; 0x24
 8112ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8112ee4:	2b00      	cmp	r3, #0
 8112ee6:	f000 80a2 	beq.w	811302e <_vfiprintf_r+0x20e>
 8112eea:	2300      	movs	r3, #0
 8112eec:	f04f 32ff 	mov.w	r2, #4294967295
 8112ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8112ef4:	f10a 0a01 	add.w	sl, sl, #1
 8112ef8:	9304      	str	r3, [sp, #16]
 8112efa:	9307      	str	r3, [sp, #28]
 8112efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8112f00:	931a      	str	r3, [sp, #104]	; 0x68
 8112f02:	4654      	mov	r4, sl
 8112f04:	2205      	movs	r2, #5
 8112f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112f0a:	4858      	ldr	r0, [pc, #352]	; (811306c <_vfiprintf_r+0x24c>)
 8112f0c:	f7ed f9f0 	bl	81002f0 <memchr>
 8112f10:	9a04      	ldr	r2, [sp, #16]
 8112f12:	b9d8      	cbnz	r0, 8112f4c <_vfiprintf_r+0x12c>
 8112f14:	06d1      	lsls	r1, r2, #27
 8112f16:	bf44      	itt	mi
 8112f18:	2320      	movmi	r3, #32
 8112f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8112f1e:	0713      	lsls	r3, r2, #28
 8112f20:	bf44      	itt	mi
 8112f22:	232b      	movmi	r3, #43	; 0x2b
 8112f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8112f28:	f89a 3000 	ldrb.w	r3, [sl]
 8112f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8112f2e:	d015      	beq.n	8112f5c <_vfiprintf_r+0x13c>
 8112f30:	9a07      	ldr	r2, [sp, #28]
 8112f32:	4654      	mov	r4, sl
 8112f34:	2000      	movs	r0, #0
 8112f36:	f04f 0c0a 	mov.w	ip, #10
 8112f3a:	4621      	mov	r1, r4
 8112f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8112f40:	3b30      	subs	r3, #48	; 0x30
 8112f42:	2b09      	cmp	r3, #9
 8112f44:	d94e      	bls.n	8112fe4 <_vfiprintf_r+0x1c4>
 8112f46:	b1b0      	cbz	r0, 8112f76 <_vfiprintf_r+0x156>
 8112f48:	9207      	str	r2, [sp, #28]
 8112f4a:	e014      	b.n	8112f76 <_vfiprintf_r+0x156>
 8112f4c:	eba0 0308 	sub.w	r3, r0, r8
 8112f50:	fa09 f303 	lsl.w	r3, r9, r3
 8112f54:	4313      	orrs	r3, r2
 8112f56:	9304      	str	r3, [sp, #16]
 8112f58:	46a2      	mov	sl, r4
 8112f5a:	e7d2      	b.n	8112f02 <_vfiprintf_r+0xe2>
 8112f5c:	9b03      	ldr	r3, [sp, #12]
 8112f5e:	1d19      	adds	r1, r3, #4
 8112f60:	681b      	ldr	r3, [r3, #0]
 8112f62:	9103      	str	r1, [sp, #12]
 8112f64:	2b00      	cmp	r3, #0
 8112f66:	bfbb      	ittet	lt
 8112f68:	425b      	neglt	r3, r3
 8112f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8112f6e:	9307      	strge	r3, [sp, #28]
 8112f70:	9307      	strlt	r3, [sp, #28]
 8112f72:	bfb8      	it	lt
 8112f74:	9204      	strlt	r2, [sp, #16]
 8112f76:	7823      	ldrb	r3, [r4, #0]
 8112f78:	2b2e      	cmp	r3, #46	; 0x2e
 8112f7a:	d10c      	bne.n	8112f96 <_vfiprintf_r+0x176>
 8112f7c:	7863      	ldrb	r3, [r4, #1]
 8112f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8112f80:	d135      	bne.n	8112fee <_vfiprintf_r+0x1ce>
 8112f82:	9b03      	ldr	r3, [sp, #12]
 8112f84:	1d1a      	adds	r2, r3, #4
 8112f86:	681b      	ldr	r3, [r3, #0]
 8112f88:	9203      	str	r2, [sp, #12]
 8112f8a:	2b00      	cmp	r3, #0
 8112f8c:	bfb8      	it	lt
 8112f8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8112f92:	3402      	adds	r4, #2
 8112f94:	9305      	str	r3, [sp, #20]
 8112f96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 811307c <_vfiprintf_r+0x25c>
 8112f9a:	7821      	ldrb	r1, [r4, #0]
 8112f9c:	2203      	movs	r2, #3
 8112f9e:	4650      	mov	r0, sl
 8112fa0:	f7ed f9a6 	bl	81002f0 <memchr>
 8112fa4:	b140      	cbz	r0, 8112fb8 <_vfiprintf_r+0x198>
 8112fa6:	2340      	movs	r3, #64	; 0x40
 8112fa8:	eba0 000a 	sub.w	r0, r0, sl
 8112fac:	fa03 f000 	lsl.w	r0, r3, r0
 8112fb0:	9b04      	ldr	r3, [sp, #16]
 8112fb2:	4303      	orrs	r3, r0
 8112fb4:	3401      	adds	r4, #1
 8112fb6:	9304      	str	r3, [sp, #16]
 8112fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8112fbc:	482c      	ldr	r0, [pc, #176]	; (8113070 <_vfiprintf_r+0x250>)
 8112fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8112fc2:	2206      	movs	r2, #6
 8112fc4:	f7ed f994 	bl	81002f0 <memchr>
 8112fc8:	2800      	cmp	r0, #0
 8112fca:	d03f      	beq.n	811304c <_vfiprintf_r+0x22c>
 8112fcc:	4b29      	ldr	r3, [pc, #164]	; (8113074 <_vfiprintf_r+0x254>)
 8112fce:	bb1b      	cbnz	r3, 8113018 <_vfiprintf_r+0x1f8>
 8112fd0:	9b03      	ldr	r3, [sp, #12]
 8112fd2:	3307      	adds	r3, #7
 8112fd4:	f023 0307 	bic.w	r3, r3, #7
 8112fd8:	3308      	adds	r3, #8
 8112fda:	9303      	str	r3, [sp, #12]
 8112fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8112fde:	443b      	add	r3, r7
 8112fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8112fe2:	e767      	b.n	8112eb4 <_vfiprintf_r+0x94>
 8112fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8112fe8:	460c      	mov	r4, r1
 8112fea:	2001      	movs	r0, #1
 8112fec:	e7a5      	b.n	8112f3a <_vfiprintf_r+0x11a>
 8112fee:	2300      	movs	r3, #0
 8112ff0:	3401      	adds	r4, #1
 8112ff2:	9305      	str	r3, [sp, #20]
 8112ff4:	4619      	mov	r1, r3
 8112ff6:	f04f 0c0a 	mov.w	ip, #10
 8112ffa:	4620      	mov	r0, r4
 8112ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8113000:	3a30      	subs	r2, #48	; 0x30
 8113002:	2a09      	cmp	r2, #9
 8113004:	d903      	bls.n	811300e <_vfiprintf_r+0x1ee>
 8113006:	2b00      	cmp	r3, #0
 8113008:	d0c5      	beq.n	8112f96 <_vfiprintf_r+0x176>
 811300a:	9105      	str	r1, [sp, #20]
 811300c:	e7c3      	b.n	8112f96 <_vfiprintf_r+0x176>
 811300e:	fb0c 2101 	mla	r1, ip, r1, r2
 8113012:	4604      	mov	r4, r0
 8113014:	2301      	movs	r3, #1
 8113016:	e7f0      	b.n	8112ffa <_vfiprintf_r+0x1da>
 8113018:	ab03      	add	r3, sp, #12
 811301a:	9300      	str	r3, [sp, #0]
 811301c:	462a      	mov	r2, r5
 811301e:	4b16      	ldr	r3, [pc, #88]	; (8113078 <_vfiprintf_r+0x258>)
 8113020:	a904      	add	r1, sp, #16
 8113022:	4630      	mov	r0, r6
 8113024:	f7fd ffec 	bl	8111000 <_printf_float>
 8113028:	4607      	mov	r7, r0
 811302a:	1c78      	adds	r0, r7, #1
 811302c:	d1d6      	bne.n	8112fdc <_vfiprintf_r+0x1bc>
 811302e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8113030:	07d9      	lsls	r1, r3, #31
 8113032:	d405      	bmi.n	8113040 <_vfiprintf_r+0x220>
 8113034:	89ab      	ldrh	r3, [r5, #12]
 8113036:	059a      	lsls	r2, r3, #22
 8113038:	d402      	bmi.n	8113040 <_vfiprintf_r+0x220>
 811303a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 811303c:	f000 faaf 	bl	811359e <__retarget_lock_release_recursive>
 8113040:	89ab      	ldrh	r3, [r5, #12]
 8113042:	065b      	lsls	r3, r3, #25
 8113044:	f53f af12 	bmi.w	8112e6c <_vfiprintf_r+0x4c>
 8113048:	9809      	ldr	r0, [sp, #36]	; 0x24
 811304a:	e711      	b.n	8112e70 <_vfiprintf_r+0x50>
 811304c:	ab03      	add	r3, sp, #12
 811304e:	9300      	str	r3, [sp, #0]
 8113050:	462a      	mov	r2, r5
 8113052:	4b09      	ldr	r3, [pc, #36]	; (8113078 <_vfiprintf_r+0x258>)
 8113054:	a904      	add	r1, sp, #16
 8113056:	4630      	mov	r0, r6
 8113058:	f7fe fa76 	bl	8111548 <_printf_i>
 811305c:	e7e4      	b.n	8113028 <_vfiprintf_r+0x208>
 811305e:	bf00      	nop
 8113060:	08113ca4 	.word	0x08113ca4
 8113064:	08113cc4 	.word	0x08113cc4
 8113068:	08113c84 	.word	0x08113c84
 811306c:	08113b72 	.word	0x08113b72
 8113070:	08113b7c 	.word	0x08113b7c
 8113074:	08111001 	.word	0x08111001
 8113078:	08112dfb 	.word	0x08112dfb
 811307c:	08113b78 	.word	0x08113b78

08113080 <__swbuf_r>:
 8113080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8113082:	460e      	mov	r6, r1
 8113084:	4614      	mov	r4, r2
 8113086:	4605      	mov	r5, r0
 8113088:	b118      	cbz	r0, 8113092 <__swbuf_r+0x12>
 811308a:	6983      	ldr	r3, [r0, #24]
 811308c:	b90b      	cbnz	r3, 8113092 <__swbuf_r+0x12>
 811308e:	f000 f9e7 	bl	8113460 <__sinit>
 8113092:	4b21      	ldr	r3, [pc, #132]	; (8113118 <__swbuf_r+0x98>)
 8113094:	429c      	cmp	r4, r3
 8113096:	d12b      	bne.n	81130f0 <__swbuf_r+0x70>
 8113098:	686c      	ldr	r4, [r5, #4]
 811309a:	69a3      	ldr	r3, [r4, #24]
 811309c:	60a3      	str	r3, [r4, #8]
 811309e:	89a3      	ldrh	r3, [r4, #12]
 81130a0:	071a      	lsls	r2, r3, #28
 81130a2:	d52f      	bpl.n	8113104 <__swbuf_r+0x84>
 81130a4:	6923      	ldr	r3, [r4, #16]
 81130a6:	b36b      	cbz	r3, 8113104 <__swbuf_r+0x84>
 81130a8:	6923      	ldr	r3, [r4, #16]
 81130aa:	6820      	ldr	r0, [r4, #0]
 81130ac:	1ac0      	subs	r0, r0, r3
 81130ae:	6963      	ldr	r3, [r4, #20]
 81130b0:	b2f6      	uxtb	r6, r6
 81130b2:	4283      	cmp	r3, r0
 81130b4:	4637      	mov	r7, r6
 81130b6:	dc04      	bgt.n	81130c2 <__swbuf_r+0x42>
 81130b8:	4621      	mov	r1, r4
 81130ba:	4628      	mov	r0, r5
 81130bc:	f000 f93c 	bl	8113338 <_fflush_r>
 81130c0:	bb30      	cbnz	r0, 8113110 <__swbuf_r+0x90>
 81130c2:	68a3      	ldr	r3, [r4, #8]
 81130c4:	3b01      	subs	r3, #1
 81130c6:	60a3      	str	r3, [r4, #8]
 81130c8:	6823      	ldr	r3, [r4, #0]
 81130ca:	1c5a      	adds	r2, r3, #1
 81130cc:	6022      	str	r2, [r4, #0]
 81130ce:	701e      	strb	r6, [r3, #0]
 81130d0:	6963      	ldr	r3, [r4, #20]
 81130d2:	3001      	adds	r0, #1
 81130d4:	4283      	cmp	r3, r0
 81130d6:	d004      	beq.n	81130e2 <__swbuf_r+0x62>
 81130d8:	89a3      	ldrh	r3, [r4, #12]
 81130da:	07db      	lsls	r3, r3, #31
 81130dc:	d506      	bpl.n	81130ec <__swbuf_r+0x6c>
 81130de:	2e0a      	cmp	r6, #10
 81130e0:	d104      	bne.n	81130ec <__swbuf_r+0x6c>
 81130e2:	4621      	mov	r1, r4
 81130e4:	4628      	mov	r0, r5
 81130e6:	f000 f927 	bl	8113338 <_fflush_r>
 81130ea:	b988      	cbnz	r0, 8113110 <__swbuf_r+0x90>
 81130ec:	4638      	mov	r0, r7
 81130ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81130f0:	4b0a      	ldr	r3, [pc, #40]	; (811311c <__swbuf_r+0x9c>)
 81130f2:	429c      	cmp	r4, r3
 81130f4:	d101      	bne.n	81130fa <__swbuf_r+0x7a>
 81130f6:	68ac      	ldr	r4, [r5, #8]
 81130f8:	e7cf      	b.n	811309a <__swbuf_r+0x1a>
 81130fa:	4b09      	ldr	r3, [pc, #36]	; (8113120 <__swbuf_r+0xa0>)
 81130fc:	429c      	cmp	r4, r3
 81130fe:	bf08      	it	eq
 8113100:	68ec      	ldreq	r4, [r5, #12]
 8113102:	e7ca      	b.n	811309a <__swbuf_r+0x1a>
 8113104:	4621      	mov	r1, r4
 8113106:	4628      	mov	r0, r5
 8113108:	f000 f81a 	bl	8113140 <__swsetup_r>
 811310c:	2800      	cmp	r0, #0
 811310e:	d0cb      	beq.n	81130a8 <__swbuf_r+0x28>
 8113110:	f04f 37ff 	mov.w	r7, #4294967295
 8113114:	e7ea      	b.n	81130ec <__swbuf_r+0x6c>
 8113116:	bf00      	nop
 8113118:	08113ca4 	.word	0x08113ca4
 811311c:	08113cc4 	.word	0x08113cc4
 8113120:	08113c84 	.word	0x08113c84

08113124 <__ascii_wctomb>:
 8113124:	b149      	cbz	r1, 811313a <__ascii_wctomb+0x16>
 8113126:	2aff      	cmp	r2, #255	; 0xff
 8113128:	bf85      	ittet	hi
 811312a:	238a      	movhi	r3, #138	; 0x8a
 811312c:	6003      	strhi	r3, [r0, #0]
 811312e:	700a      	strbls	r2, [r1, #0]
 8113130:	f04f 30ff 	movhi.w	r0, #4294967295
 8113134:	bf98      	it	ls
 8113136:	2001      	movls	r0, #1
 8113138:	4770      	bx	lr
 811313a:	4608      	mov	r0, r1
 811313c:	4770      	bx	lr
	...

08113140 <__swsetup_r>:
 8113140:	4b32      	ldr	r3, [pc, #200]	; (811320c <__swsetup_r+0xcc>)
 8113142:	b570      	push	{r4, r5, r6, lr}
 8113144:	681d      	ldr	r5, [r3, #0]
 8113146:	4606      	mov	r6, r0
 8113148:	460c      	mov	r4, r1
 811314a:	b125      	cbz	r5, 8113156 <__swsetup_r+0x16>
 811314c:	69ab      	ldr	r3, [r5, #24]
 811314e:	b913      	cbnz	r3, 8113156 <__swsetup_r+0x16>
 8113150:	4628      	mov	r0, r5
 8113152:	f000 f985 	bl	8113460 <__sinit>
 8113156:	4b2e      	ldr	r3, [pc, #184]	; (8113210 <__swsetup_r+0xd0>)
 8113158:	429c      	cmp	r4, r3
 811315a:	d10f      	bne.n	811317c <__swsetup_r+0x3c>
 811315c:	686c      	ldr	r4, [r5, #4]
 811315e:	89a3      	ldrh	r3, [r4, #12]
 8113160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8113164:	0719      	lsls	r1, r3, #28
 8113166:	d42c      	bmi.n	81131c2 <__swsetup_r+0x82>
 8113168:	06dd      	lsls	r5, r3, #27
 811316a:	d411      	bmi.n	8113190 <__swsetup_r+0x50>
 811316c:	2309      	movs	r3, #9
 811316e:	6033      	str	r3, [r6, #0]
 8113170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8113174:	81a3      	strh	r3, [r4, #12]
 8113176:	f04f 30ff 	mov.w	r0, #4294967295
 811317a:	e03e      	b.n	81131fa <__swsetup_r+0xba>
 811317c:	4b25      	ldr	r3, [pc, #148]	; (8113214 <__swsetup_r+0xd4>)
 811317e:	429c      	cmp	r4, r3
 8113180:	d101      	bne.n	8113186 <__swsetup_r+0x46>
 8113182:	68ac      	ldr	r4, [r5, #8]
 8113184:	e7eb      	b.n	811315e <__swsetup_r+0x1e>
 8113186:	4b24      	ldr	r3, [pc, #144]	; (8113218 <__swsetup_r+0xd8>)
 8113188:	429c      	cmp	r4, r3
 811318a:	bf08      	it	eq
 811318c:	68ec      	ldreq	r4, [r5, #12]
 811318e:	e7e6      	b.n	811315e <__swsetup_r+0x1e>
 8113190:	0758      	lsls	r0, r3, #29
 8113192:	d512      	bpl.n	81131ba <__swsetup_r+0x7a>
 8113194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8113196:	b141      	cbz	r1, 81131aa <__swsetup_r+0x6a>
 8113198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 811319c:	4299      	cmp	r1, r3
 811319e:	d002      	beq.n	81131a6 <__swsetup_r+0x66>
 81131a0:	4630      	mov	r0, r6
 81131a2:	f7ff fd0b 	bl	8112bbc <_free_r>
 81131a6:	2300      	movs	r3, #0
 81131a8:	6363      	str	r3, [r4, #52]	; 0x34
 81131aa:	89a3      	ldrh	r3, [r4, #12]
 81131ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81131b0:	81a3      	strh	r3, [r4, #12]
 81131b2:	2300      	movs	r3, #0
 81131b4:	6063      	str	r3, [r4, #4]
 81131b6:	6923      	ldr	r3, [r4, #16]
 81131b8:	6023      	str	r3, [r4, #0]
 81131ba:	89a3      	ldrh	r3, [r4, #12]
 81131bc:	f043 0308 	orr.w	r3, r3, #8
 81131c0:	81a3      	strh	r3, [r4, #12]
 81131c2:	6923      	ldr	r3, [r4, #16]
 81131c4:	b94b      	cbnz	r3, 81131da <__swsetup_r+0x9a>
 81131c6:	89a3      	ldrh	r3, [r4, #12]
 81131c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81131cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81131d0:	d003      	beq.n	81131da <__swsetup_r+0x9a>
 81131d2:	4621      	mov	r1, r4
 81131d4:	4630      	mov	r0, r6
 81131d6:	f000 fa07 	bl	81135e8 <__smakebuf_r>
 81131da:	89a0      	ldrh	r0, [r4, #12]
 81131dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81131e0:	f010 0301 	ands.w	r3, r0, #1
 81131e4:	d00a      	beq.n	81131fc <__swsetup_r+0xbc>
 81131e6:	2300      	movs	r3, #0
 81131e8:	60a3      	str	r3, [r4, #8]
 81131ea:	6963      	ldr	r3, [r4, #20]
 81131ec:	425b      	negs	r3, r3
 81131ee:	61a3      	str	r3, [r4, #24]
 81131f0:	6923      	ldr	r3, [r4, #16]
 81131f2:	b943      	cbnz	r3, 8113206 <__swsetup_r+0xc6>
 81131f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81131f8:	d1ba      	bne.n	8113170 <__swsetup_r+0x30>
 81131fa:	bd70      	pop	{r4, r5, r6, pc}
 81131fc:	0781      	lsls	r1, r0, #30
 81131fe:	bf58      	it	pl
 8113200:	6963      	ldrpl	r3, [r4, #20]
 8113202:	60a3      	str	r3, [r4, #8]
 8113204:	e7f4      	b.n	81131f0 <__swsetup_r+0xb0>
 8113206:	2000      	movs	r0, #0
 8113208:	e7f7      	b.n	81131fa <__swsetup_r+0xba>
 811320a:	bf00      	nop
 811320c:	10000014 	.word	0x10000014
 8113210:	08113ca4 	.word	0x08113ca4
 8113214:	08113cc4 	.word	0x08113cc4
 8113218:	08113c84 	.word	0x08113c84

0811321c <abort>:
 811321c:	b508      	push	{r3, lr}
 811321e:	2006      	movs	r0, #6
 8113220:	f000 fa4a 	bl	81136b8 <raise>
 8113224:	2001      	movs	r0, #1
 8113226:	f7ee fd0c 	bl	8101c42 <_exit>
	...

0811322c <__sflush_r>:
 811322c:	898a      	ldrh	r2, [r1, #12]
 811322e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113232:	4605      	mov	r5, r0
 8113234:	0710      	lsls	r0, r2, #28
 8113236:	460c      	mov	r4, r1
 8113238:	d458      	bmi.n	81132ec <__sflush_r+0xc0>
 811323a:	684b      	ldr	r3, [r1, #4]
 811323c:	2b00      	cmp	r3, #0
 811323e:	dc05      	bgt.n	811324c <__sflush_r+0x20>
 8113240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8113242:	2b00      	cmp	r3, #0
 8113244:	dc02      	bgt.n	811324c <__sflush_r+0x20>
 8113246:	2000      	movs	r0, #0
 8113248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 811324c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 811324e:	2e00      	cmp	r6, #0
 8113250:	d0f9      	beq.n	8113246 <__sflush_r+0x1a>
 8113252:	2300      	movs	r3, #0
 8113254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8113258:	682f      	ldr	r7, [r5, #0]
 811325a:	602b      	str	r3, [r5, #0]
 811325c:	d032      	beq.n	81132c4 <__sflush_r+0x98>
 811325e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8113260:	89a3      	ldrh	r3, [r4, #12]
 8113262:	075a      	lsls	r2, r3, #29
 8113264:	d505      	bpl.n	8113272 <__sflush_r+0x46>
 8113266:	6863      	ldr	r3, [r4, #4]
 8113268:	1ac0      	subs	r0, r0, r3
 811326a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 811326c:	b10b      	cbz	r3, 8113272 <__sflush_r+0x46>
 811326e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8113270:	1ac0      	subs	r0, r0, r3
 8113272:	2300      	movs	r3, #0
 8113274:	4602      	mov	r2, r0
 8113276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8113278:	6a21      	ldr	r1, [r4, #32]
 811327a:	4628      	mov	r0, r5
 811327c:	47b0      	blx	r6
 811327e:	1c43      	adds	r3, r0, #1
 8113280:	89a3      	ldrh	r3, [r4, #12]
 8113282:	d106      	bne.n	8113292 <__sflush_r+0x66>
 8113284:	6829      	ldr	r1, [r5, #0]
 8113286:	291d      	cmp	r1, #29
 8113288:	d82c      	bhi.n	81132e4 <__sflush_r+0xb8>
 811328a:	4a2a      	ldr	r2, [pc, #168]	; (8113334 <__sflush_r+0x108>)
 811328c:	40ca      	lsrs	r2, r1
 811328e:	07d6      	lsls	r6, r2, #31
 8113290:	d528      	bpl.n	81132e4 <__sflush_r+0xb8>
 8113292:	2200      	movs	r2, #0
 8113294:	6062      	str	r2, [r4, #4]
 8113296:	04d9      	lsls	r1, r3, #19
 8113298:	6922      	ldr	r2, [r4, #16]
 811329a:	6022      	str	r2, [r4, #0]
 811329c:	d504      	bpl.n	81132a8 <__sflush_r+0x7c>
 811329e:	1c42      	adds	r2, r0, #1
 81132a0:	d101      	bne.n	81132a6 <__sflush_r+0x7a>
 81132a2:	682b      	ldr	r3, [r5, #0]
 81132a4:	b903      	cbnz	r3, 81132a8 <__sflush_r+0x7c>
 81132a6:	6560      	str	r0, [r4, #84]	; 0x54
 81132a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81132aa:	602f      	str	r7, [r5, #0]
 81132ac:	2900      	cmp	r1, #0
 81132ae:	d0ca      	beq.n	8113246 <__sflush_r+0x1a>
 81132b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81132b4:	4299      	cmp	r1, r3
 81132b6:	d002      	beq.n	81132be <__sflush_r+0x92>
 81132b8:	4628      	mov	r0, r5
 81132ba:	f7ff fc7f 	bl	8112bbc <_free_r>
 81132be:	2000      	movs	r0, #0
 81132c0:	6360      	str	r0, [r4, #52]	; 0x34
 81132c2:	e7c1      	b.n	8113248 <__sflush_r+0x1c>
 81132c4:	6a21      	ldr	r1, [r4, #32]
 81132c6:	2301      	movs	r3, #1
 81132c8:	4628      	mov	r0, r5
 81132ca:	47b0      	blx	r6
 81132cc:	1c41      	adds	r1, r0, #1
 81132ce:	d1c7      	bne.n	8113260 <__sflush_r+0x34>
 81132d0:	682b      	ldr	r3, [r5, #0]
 81132d2:	2b00      	cmp	r3, #0
 81132d4:	d0c4      	beq.n	8113260 <__sflush_r+0x34>
 81132d6:	2b1d      	cmp	r3, #29
 81132d8:	d001      	beq.n	81132de <__sflush_r+0xb2>
 81132da:	2b16      	cmp	r3, #22
 81132dc:	d101      	bne.n	81132e2 <__sflush_r+0xb6>
 81132de:	602f      	str	r7, [r5, #0]
 81132e0:	e7b1      	b.n	8113246 <__sflush_r+0x1a>
 81132e2:	89a3      	ldrh	r3, [r4, #12]
 81132e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81132e8:	81a3      	strh	r3, [r4, #12]
 81132ea:	e7ad      	b.n	8113248 <__sflush_r+0x1c>
 81132ec:	690f      	ldr	r7, [r1, #16]
 81132ee:	2f00      	cmp	r7, #0
 81132f0:	d0a9      	beq.n	8113246 <__sflush_r+0x1a>
 81132f2:	0793      	lsls	r3, r2, #30
 81132f4:	680e      	ldr	r6, [r1, #0]
 81132f6:	bf08      	it	eq
 81132f8:	694b      	ldreq	r3, [r1, #20]
 81132fa:	600f      	str	r7, [r1, #0]
 81132fc:	bf18      	it	ne
 81132fe:	2300      	movne	r3, #0
 8113300:	eba6 0807 	sub.w	r8, r6, r7
 8113304:	608b      	str	r3, [r1, #8]
 8113306:	f1b8 0f00 	cmp.w	r8, #0
 811330a:	dd9c      	ble.n	8113246 <__sflush_r+0x1a>
 811330c:	6a21      	ldr	r1, [r4, #32]
 811330e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8113310:	4643      	mov	r3, r8
 8113312:	463a      	mov	r2, r7
 8113314:	4628      	mov	r0, r5
 8113316:	47b0      	blx	r6
 8113318:	2800      	cmp	r0, #0
 811331a:	dc06      	bgt.n	811332a <__sflush_r+0xfe>
 811331c:	89a3      	ldrh	r3, [r4, #12]
 811331e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8113322:	81a3      	strh	r3, [r4, #12]
 8113324:	f04f 30ff 	mov.w	r0, #4294967295
 8113328:	e78e      	b.n	8113248 <__sflush_r+0x1c>
 811332a:	4407      	add	r7, r0
 811332c:	eba8 0800 	sub.w	r8, r8, r0
 8113330:	e7e9      	b.n	8113306 <__sflush_r+0xda>
 8113332:	bf00      	nop
 8113334:	20400001 	.word	0x20400001

08113338 <_fflush_r>:
 8113338:	b538      	push	{r3, r4, r5, lr}
 811333a:	690b      	ldr	r3, [r1, #16]
 811333c:	4605      	mov	r5, r0
 811333e:	460c      	mov	r4, r1
 8113340:	b913      	cbnz	r3, 8113348 <_fflush_r+0x10>
 8113342:	2500      	movs	r5, #0
 8113344:	4628      	mov	r0, r5
 8113346:	bd38      	pop	{r3, r4, r5, pc}
 8113348:	b118      	cbz	r0, 8113352 <_fflush_r+0x1a>
 811334a:	6983      	ldr	r3, [r0, #24]
 811334c:	b90b      	cbnz	r3, 8113352 <_fflush_r+0x1a>
 811334e:	f000 f887 	bl	8113460 <__sinit>
 8113352:	4b14      	ldr	r3, [pc, #80]	; (81133a4 <_fflush_r+0x6c>)
 8113354:	429c      	cmp	r4, r3
 8113356:	d11b      	bne.n	8113390 <_fflush_r+0x58>
 8113358:	686c      	ldr	r4, [r5, #4]
 811335a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811335e:	2b00      	cmp	r3, #0
 8113360:	d0ef      	beq.n	8113342 <_fflush_r+0xa>
 8113362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8113364:	07d0      	lsls	r0, r2, #31
 8113366:	d404      	bmi.n	8113372 <_fflush_r+0x3a>
 8113368:	0599      	lsls	r1, r3, #22
 811336a:	d402      	bmi.n	8113372 <_fflush_r+0x3a>
 811336c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811336e:	f000 f915 	bl	811359c <__retarget_lock_acquire_recursive>
 8113372:	4628      	mov	r0, r5
 8113374:	4621      	mov	r1, r4
 8113376:	f7ff ff59 	bl	811322c <__sflush_r>
 811337a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 811337c:	07da      	lsls	r2, r3, #31
 811337e:	4605      	mov	r5, r0
 8113380:	d4e0      	bmi.n	8113344 <_fflush_r+0xc>
 8113382:	89a3      	ldrh	r3, [r4, #12]
 8113384:	059b      	lsls	r3, r3, #22
 8113386:	d4dd      	bmi.n	8113344 <_fflush_r+0xc>
 8113388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 811338a:	f000 f908 	bl	811359e <__retarget_lock_release_recursive>
 811338e:	e7d9      	b.n	8113344 <_fflush_r+0xc>
 8113390:	4b05      	ldr	r3, [pc, #20]	; (81133a8 <_fflush_r+0x70>)
 8113392:	429c      	cmp	r4, r3
 8113394:	d101      	bne.n	811339a <_fflush_r+0x62>
 8113396:	68ac      	ldr	r4, [r5, #8]
 8113398:	e7df      	b.n	811335a <_fflush_r+0x22>
 811339a:	4b04      	ldr	r3, [pc, #16]	; (81133ac <_fflush_r+0x74>)
 811339c:	429c      	cmp	r4, r3
 811339e:	bf08      	it	eq
 81133a0:	68ec      	ldreq	r4, [r5, #12]
 81133a2:	e7da      	b.n	811335a <_fflush_r+0x22>
 81133a4:	08113ca4 	.word	0x08113ca4
 81133a8:	08113cc4 	.word	0x08113cc4
 81133ac:	08113c84 	.word	0x08113c84

081133b0 <std>:
 81133b0:	2300      	movs	r3, #0
 81133b2:	b510      	push	{r4, lr}
 81133b4:	4604      	mov	r4, r0
 81133b6:	e9c0 3300 	strd	r3, r3, [r0]
 81133ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81133be:	6083      	str	r3, [r0, #8]
 81133c0:	8181      	strh	r1, [r0, #12]
 81133c2:	6643      	str	r3, [r0, #100]	; 0x64
 81133c4:	81c2      	strh	r2, [r0, #14]
 81133c6:	6183      	str	r3, [r0, #24]
 81133c8:	4619      	mov	r1, r3
 81133ca:	2208      	movs	r2, #8
 81133cc:	305c      	adds	r0, #92	; 0x5c
 81133ce:	f7fd fd6f 	bl	8110eb0 <memset>
 81133d2:	4b05      	ldr	r3, [pc, #20]	; (81133e8 <std+0x38>)
 81133d4:	6263      	str	r3, [r4, #36]	; 0x24
 81133d6:	4b05      	ldr	r3, [pc, #20]	; (81133ec <std+0x3c>)
 81133d8:	62a3      	str	r3, [r4, #40]	; 0x28
 81133da:	4b05      	ldr	r3, [pc, #20]	; (81133f0 <std+0x40>)
 81133dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 81133de:	4b05      	ldr	r3, [pc, #20]	; (81133f4 <std+0x44>)
 81133e0:	6224      	str	r4, [r4, #32]
 81133e2:	6323      	str	r3, [r4, #48]	; 0x30
 81133e4:	bd10      	pop	{r4, pc}
 81133e6:	bf00      	nop
 81133e8:	081136f1 	.word	0x081136f1
 81133ec:	08113713 	.word	0x08113713
 81133f0:	0811374b 	.word	0x0811374b
 81133f4:	0811376f 	.word	0x0811376f

081133f8 <_cleanup_r>:
 81133f8:	4901      	ldr	r1, [pc, #4]	; (8113400 <_cleanup_r+0x8>)
 81133fa:	f000 b8af 	b.w	811355c <_fwalk_reent>
 81133fe:	bf00      	nop
 8113400:	08113339 	.word	0x08113339

08113404 <__sfmoreglue>:
 8113404:	b570      	push	{r4, r5, r6, lr}
 8113406:	1e4a      	subs	r2, r1, #1
 8113408:	2568      	movs	r5, #104	; 0x68
 811340a:	4355      	muls	r5, r2
 811340c:	460e      	mov	r6, r1
 811340e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8113412:	f7ff fc23 	bl	8112c5c <_malloc_r>
 8113416:	4604      	mov	r4, r0
 8113418:	b140      	cbz	r0, 811342c <__sfmoreglue+0x28>
 811341a:	2100      	movs	r1, #0
 811341c:	e9c0 1600 	strd	r1, r6, [r0]
 8113420:	300c      	adds	r0, #12
 8113422:	60a0      	str	r0, [r4, #8]
 8113424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8113428:	f7fd fd42 	bl	8110eb0 <memset>
 811342c:	4620      	mov	r0, r4
 811342e:	bd70      	pop	{r4, r5, r6, pc}

08113430 <__sfp_lock_acquire>:
 8113430:	4801      	ldr	r0, [pc, #4]	; (8113438 <__sfp_lock_acquire+0x8>)
 8113432:	f000 b8b3 	b.w	811359c <__retarget_lock_acquire_recursive>
 8113436:	bf00      	nop
 8113438:	10006f94 	.word	0x10006f94

0811343c <__sfp_lock_release>:
 811343c:	4801      	ldr	r0, [pc, #4]	; (8113444 <__sfp_lock_release+0x8>)
 811343e:	f000 b8ae 	b.w	811359e <__retarget_lock_release_recursive>
 8113442:	bf00      	nop
 8113444:	10006f94 	.word	0x10006f94

08113448 <__sinit_lock_acquire>:
 8113448:	4801      	ldr	r0, [pc, #4]	; (8113450 <__sinit_lock_acquire+0x8>)
 811344a:	f000 b8a7 	b.w	811359c <__retarget_lock_acquire_recursive>
 811344e:	bf00      	nop
 8113450:	10006f8f 	.word	0x10006f8f

08113454 <__sinit_lock_release>:
 8113454:	4801      	ldr	r0, [pc, #4]	; (811345c <__sinit_lock_release+0x8>)
 8113456:	f000 b8a2 	b.w	811359e <__retarget_lock_release_recursive>
 811345a:	bf00      	nop
 811345c:	10006f8f 	.word	0x10006f8f

08113460 <__sinit>:
 8113460:	b510      	push	{r4, lr}
 8113462:	4604      	mov	r4, r0
 8113464:	f7ff fff0 	bl	8113448 <__sinit_lock_acquire>
 8113468:	69a3      	ldr	r3, [r4, #24]
 811346a:	b11b      	cbz	r3, 8113474 <__sinit+0x14>
 811346c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8113470:	f7ff bff0 	b.w	8113454 <__sinit_lock_release>
 8113474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8113478:	6523      	str	r3, [r4, #80]	; 0x50
 811347a:	4b13      	ldr	r3, [pc, #76]	; (81134c8 <__sinit+0x68>)
 811347c:	4a13      	ldr	r2, [pc, #76]	; (81134cc <__sinit+0x6c>)
 811347e:	681b      	ldr	r3, [r3, #0]
 8113480:	62a2      	str	r2, [r4, #40]	; 0x28
 8113482:	42a3      	cmp	r3, r4
 8113484:	bf04      	itt	eq
 8113486:	2301      	moveq	r3, #1
 8113488:	61a3      	streq	r3, [r4, #24]
 811348a:	4620      	mov	r0, r4
 811348c:	f000 f820 	bl	81134d0 <__sfp>
 8113490:	6060      	str	r0, [r4, #4]
 8113492:	4620      	mov	r0, r4
 8113494:	f000 f81c 	bl	81134d0 <__sfp>
 8113498:	60a0      	str	r0, [r4, #8]
 811349a:	4620      	mov	r0, r4
 811349c:	f000 f818 	bl	81134d0 <__sfp>
 81134a0:	2200      	movs	r2, #0
 81134a2:	60e0      	str	r0, [r4, #12]
 81134a4:	2104      	movs	r1, #4
 81134a6:	6860      	ldr	r0, [r4, #4]
 81134a8:	f7ff ff82 	bl	81133b0 <std>
 81134ac:	68a0      	ldr	r0, [r4, #8]
 81134ae:	2201      	movs	r2, #1
 81134b0:	2109      	movs	r1, #9
 81134b2:	f7ff ff7d 	bl	81133b0 <std>
 81134b6:	68e0      	ldr	r0, [r4, #12]
 81134b8:	2202      	movs	r2, #2
 81134ba:	2112      	movs	r1, #18
 81134bc:	f7ff ff78 	bl	81133b0 <std>
 81134c0:	2301      	movs	r3, #1
 81134c2:	61a3      	str	r3, [r4, #24]
 81134c4:	e7d2      	b.n	811346c <__sinit+0xc>
 81134c6:	bf00      	nop
 81134c8:	08113900 	.word	0x08113900
 81134cc:	081133f9 	.word	0x081133f9

081134d0 <__sfp>:
 81134d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81134d2:	4607      	mov	r7, r0
 81134d4:	f7ff ffac 	bl	8113430 <__sfp_lock_acquire>
 81134d8:	4b1e      	ldr	r3, [pc, #120]	; (8113554 <__sfp+0x84>)
 81134da:	681e      	ldr	r6, [r3, #0]
 81134dc:	69b3      	ldr	r3, [r6, #24]
 81134de:	b913      	cbnz	r3, 81134e6 <__sfp+0x16>
 81134e0:	4630      	mov	r0, r6
 81134e2:	f7ff ffbd 	bl	8113460 <__sinit>
 81134e6:	3648      	adds	r6, #72	; 0x48
 81134e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 81134ec:	3b01      	subs	r3, #1
 81134ee:	d503      	bpl.n	81134f8 <__sfp+0x28>
 81134f0:	6833      	ldr	r3, [r6, #0]
 81134f2:	b30b      	cbz	r3, 8113538 <__sfp+0x68>
 81134f4:	6836      	ldr	r6, [r6, #0]
 81134f6:	e7f7      	b.n	81134e8 <__sfp+0x18>
 81134f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 81134fc:	b9d5      	cbnz	r5, 8113534 <__sfp+0x64>
 81134fe:	4b16      	ldr	r3, [pc, #88]	; (8113558 <__sfp+0x88>)
 8113500:	60e3      	str	r3, [r4, #12]
 8113502:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8113506:	6665      	str	r5, [r4, #100]	; 0x64
 8113508:	f000 f847 	bl	811359a <__retarget_lock_init_recursive>
 811350c:	f7ff ff96 	bl	811343c <__sfp_lock_release>
 8113510:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8113514:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8113518:	6025      	str	r5, [r4, #0]
 811351a:	61a5      	str	r5, [r4, #24]
 811351c:	2208      	movs	r2, #8
 811351e:	4629      	mov	r1, r5
 8113520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8113524:	f7fd fcc4 	bl	8110eb0 <memset>
 8113528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 811352c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8113530:	4620      	mov	r0, r4
 8113532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8113534:	3468      	adds	r4, #104	; 0x68
 8113536:	e7d9      	b.n	81134ec <__sfp+0x1c>
 8113538:	2104      	movs	r1, #4
 811353a:	4638      	mov	r0, r7
 811353c:	f7ff ff62 	bl	8113404 <__sfmoreglue>
 8113540:	4604      	mov	r4, r0
 8113542:	6030      	str	r0, [r6, #0]
 8113544:	2800      	cmp	r0, #0
 8113546:	d1d5      	bne.n	81134f4 <__sfp+0x24>
 8113548:	f7ff ff78 	bl	811343c <__sfp_lock_release>
 811354c:	230c      	movs	r3, #12
 811354e:	603b      	str	r3, [r7, #0]
 8113550:	e7ee      	b.n	8113530 <__sfp+0x60>
 8113552:	bf00      	nop
 8113554:	08113900 	.word	0x08113900
 8113558:	ffff0001 	.word	0xffff0001

0811355c <_fwalk_reent>:
 811355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8113560:	4606      	mov	r6, r0
 8113562:	4688      	mov	r8, r1
 8113564:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8113568:	2700      	movs	r7, #0
 811356a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 811356e:	f1b9 0901 	subs.w	r9, r9, #1
 8113572:	d505      	bpl.n	8113580 <_fwalk_reent+0x24>
 8113574:	6824      	ldr	r4, [r4, #0]
 8113576:	2c00      	cmp	r4, #0
 8113578:	d1f7      	bne.n	811356a <_fwalk_reent+0xe>
 811357a:	4638      	mov	r0, r7
 811357c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8113580:	89ab      	ldrh	r3, [r5, #12]
 8113582:	2b01      	cmp	r3, #1
 8113584:	d907      	bls.n	8113596 <_fwalk_reent+0x3a>
 8113586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 811358a:	3301      	adds	r3, #1
 811358c:	d003      	beq.n	8113596 <_fwalk_reent+0x3a>
 811358e:	4629      	mov	r1, r5
 8113590:	4630      	mov	r0, r6
 8113592:	47c0      	blx	r8
 8113594:	4307      	orrs	r7, r0
 8113596:	3568      	adds	r5, #104	; 0x68
 8113598:	e7e9      	b.n	811356e <_fwalk_reent+0x12>

0811359a <__retarget_lock_init_recursive>:
 811359a:	4770      	bx	lr

0811359c <__retarget_lock_acquire_recursive>:
 811359c:	4770      	bx	lr

0811359e <__retarget_lock_release_recursive>:
 811359e:	4770      	bx	lr

081135a0 <__swhatbuf_r>:
 81135a0:	b570      	push	{r4, r5, r6, lr}
 81135a2:	460e      	mov	r6, r1
 81135a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81135a8:	2900      	cmp	r1, #0
 81135aa:	b096      	sub	sp, #88	; 0x58
 81135ac:	4614      	mov	r4, r2
 81135ae:	461d      	mov	r5, r3
 81135b0:	da07      	bge.n	81135c2 <__swhatbuf_r+0x22>
 81135b2:	2300      	movs	r3, #0
 81135b4:	602b      	str	r3, [r5, #0]
 81135b6:	89b3      	ldrh	r3, [r6, #12]
 81135b8:	061a      	lsls	r2, r3, #24
 81135ba:	d410      	bmi.n	81135de <__swhatbuf_r+0x3e>
 81135bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81135c0:	e00e      	b.n	81135e0 <__swhatbuf_r+0x40>
 81135c2:	466a      	mov	r2, sp
 81135c4:	f000 f8fa 	bl	81137bc <_fstat_r>
 81135c8:	2800      	cmp	r0, #0
 81135ca:	dbf2      	blt.n	81135b2 <__swhatbuf_r+0x12>
 81135cc:	9a01      	ldr	r2, [sp, #4]
 81135ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 81135d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 81135d6:	425a      	negs	r2, r3
 81135d8:	415a      	adcs	r2, r3
 81135da:	602a      	str	r2, [r5, #0]
 81135dc:	e7ee      	b.n	81135bc <__swhatbuf_r+0x1c>
 81135de:	2340      	movs	r3, #64	; 0x40
 81135e0:	2000      	movs	r0, #0
 81135e2:	6023      	str	r3, [r4, #0]
 81135e4:	b016      	add	sp, #88	; 0x58
 81135e6:	bd70      	pop	{r4, r5, r6, pc}

081135e8 <__smakebuf_r>:
 81135e8:	898b      	ldrh	r3, [r1, #12]
 81135ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 81135ec:	079d      	lsls	r5, r3, #30
 81135ee:	4606      	mov	r6, r0
 81135f0:	460c      	mov	r4, r1
 81135f2:	d507      	bpl.n	8113604 <__smakebuf_r+0x1c>
 81135f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 81135f8:	6023      	str	r3, [r4, #0]
 81135fa:	6123      	str	r3, [r4, #16]
 81135fc:	2301      	movs	r3, #1
 81135fe:	6163      	str	r3, [r4, #20]
 8113600:	b002      	add	sp, #8
 8113602:	bd70      	pop	{r4, r5, r6, pc}
 8113604:	ab01      	add	r3, sp, #4
 8113606:	466a      	mov	r2, sp
 8113608:	f7ff ffca 	bl	81135a0 <__swhatbuf_r>
 811360c:	9900      	ldr	r1, [sp, #0]
 811360e:	4605      	mov	r5, r0
 8113610:	4630      	mov	r0, r6
 8113612:	f7ff fb23 	bl	8112c5c <_malloc_r>
 8113616:	b948      	cbnz	r0, 811362c <__smakebuf_r+0x44>
 8113618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 811361c:	059a      	lsls	r2, r3, #22
 811361e:	d4ef      	bmi.n	8113600 <__smakebuf_r+0x18>
 8113620:	f023 0303 	bic.w	r3, r3, #3
 8113624:	f043 0302 	orr.w	r3, r3, #2
 8113628:	81a3      	strh	r3, [r4, #12]
 811362a:	e7e3      	b.n	81135f4 <__smakebuf_r+0xc>
 811362c:	4b0d      	ldr	r3, [pc, #52]	; (8113664 <__smakebuf_r+0x7c>)
 811362e:	62b3      	str	r3, [r6, #40]	; 0x28
 8113630:	89a3      	ldrh	r3, [r4, #12]
 8113632:	6020      	str	r0, [r4, #0]
 8113634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8113638:	81a3      	strh	r3, [r4, #12]
 811363a:	9b00      	ldr	r3, [sp, #0]
 811363c:	6163      	str	r3, [r4, #20]
 811363e:	9b01      	ldr	r3, [sp, #4]
 8113640:	6120      	str	r0, [r4, #16]
 8113642:	b15b      	cbz	r3, 811365c <__smakebuf_r+0x74>
 8113644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113648:	4630      	mov	r0, r6
 811364a:	f000 f8c9 	bl	81137e0 <_isatty_r>
 811364e:	b128      	cbz	r0, 811365c <__smakebuf_r+0x74>
 8113650:	89a3      	ldrh	r3, [r4, #12]
 8113652:	f023 0303 	bic.w	r3, r3, #3
 8113656:	f043 0301 	orr.w	r3, r3, #1
 811365a:	81a3      	strh	r3, [r4, #12]
 811365c:	89a0      	ldrh	r0, [r4, #12]
 811365e:	4305      	orrs	r5, r0
 8113660:	81a5      	strh	r5, [r4, #12]
 8113662:	e7cd      	b.n	8113600 <__smakebuf_r+0x18>
 8113664:	081133f9 	.word	0x081133f9

08113668 <_raise_r>:
 8113668:	291f      	cmp	r1, #31
 811366a:	b538      	push	{r3, r4, r5, lr}
 811366c:	4604      	mov	r4, r0
 811366e:	460d      	mov	r5, r1
 8113670:	d904      	bls.n	811367c <_raise_r+0x14>
 8113672:	2316      	movs	r3, #22
 8113674:	6003      	str	r3, [r0, #0]
 8113676:	f04f 30ff 	mov.w	r0, #4294967295
 811367a:	bd38      	pop	{r3, r4, r5, pc}
 811367c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 811367e:	b112      	cbz	r2, 8113686 <_raise_r+0x1e>
 8113680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8113684:	b94b      	cbnz	r3, 811369a <_raise_r+0x32>
 8113686:	4620      	mov	r0, r4
 8113688:	f000 f830 	bl	81136ec <_getpid_r>
 811368c:	462a      	mov	r2, r5
 811368e:	4601      	mov	r1, r0
 8113690:	4620      	mov	r0, r4
 8113692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8113696:	f000 b817 	b.w	81136c8 <_kill_r>
 811369a:	2b01      	cmp	r3, #1
 811369c:	d00a      	beq.n	81136b4 <_raise_r+0x4c>
 811369e:	1c59      	adds	r1, r3, #1
 81136a0:	d103      	bne.n	81136aa <_raise_r+0x42>
 81136a2:	2316      	movs	r3, #22
 81136a4:	6003      	str	r3, [r0, #0]
 81136a6:	2001      	movs	r0, #1
 81136a8:	e7e7      	b.n	811367a <_raise_r+0x12>
 81136aa:	2400      	movs	r4, #0
 81136ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 81136b0:	4628      	mov	r0, r5
 81136b2:	4798      	blx	r3
 81136b4:	2000      	movs	r0, #0
 81136b6:	e7e0      	b.n	811367a <_raise_r+0x12>

081136b8 <raise>:
 81136b8:	4b02      	ldr	r3, [pc, #8]	; (81136c4 <raise+0xc>)
 81136ba:	4601      	mov	r1, r0
 81136bc:	6818      	ldr	r0, [r3, #0]
 81136be:	f7ff bfd3 	b.w	8113668 <_raise_r>
 81136c2:	bf00      	nop
 81136c4:	10000014 	.word	0x10000014

081136c8 <_kill_r>:
 81136c8:	b538      	push	{r3, r4, r5, lr}
 81136ca:	4d07      	ldr	r5, [pc, #28]	; (81136e8 <_kill_r+0x20>)
 81136cc:	2300      	movs	r3, #0
 81136ce:	4604      	mov	r4, r0
 81136d0:	4608      	mov	r0, r1
 81136d2:	4611      	mov	r1, r2
 81136d4:	602b      	str	r3, [r5, #0]
 81136d6:	f7ee faa4 	bl	8101c22 <_kill>
 81136da:	1c43      	adds	r3, r0, #1
 81136dc:	d102      	bne.n	81136e4 <_kill_r+0x1c>
 81136de:	682b      	ldr	r3, [r5, #0]
 81136e0:	b103      	cbz	r3, 81136e4 <_kill_r+0x1c>
 81136e2:	6023      	str	r3, [r4, #0]
 81136e4:	bd38      	pop	{r3, r4, r5, pc}
 81136e6:	bf00      	nop
 81136e8:	10006f88 	.word	0x10006f88

081136ec <_getpid_r>:
 81136ec:	f7ee ba91 	b.w	8101c12 <_getpid>

081136f0 <__sread>:
 81136f0:	b510      	push	{r4, lr}
 81136f2:	460c      	mov	r4, r1
 81136f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81136f8:	f000 f894 	bl	8113824 <_read_r>
 81136fc:	2800      	cmp	r0, #0
 81136fe:	bfab      	itete	ge
 8113700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8113702:	89a3      	ldrhlt	r3, [r4, #12]
 8113704:	181b      	addge	r3, r3, r0
 8113706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 811370a:	bfac      	ite	ge
 811370c:	6563      	strge	r3, [r4, #84]	; 0x54
 811370e:	81a3      	strhlt	r3, [r4, #12]
 8113710:	bd10      	pop	{r4, pc}

08113712 <__swrite>:
 8113712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8113716:	461f      	mov	r7, r3
 8113718:	898b      	ldrh	r3, [r1, #12]
 811371a:	05db      	lsls	r3, r3, #23
 811371c:	4605      	mov	r5, r0
 811371e:	460c      	mov	r4, r1
 8113720:	4616      	mov	r6, r2
 8113722:	d505      	bpl.n	8113730 <__swrite+0x1e>
 8113724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113728:	2302      	movs	r3, #2
 811372a:	2200      	movs	r2, #0
 811372c:	f000 f868 	bl	8113800 <_lseek_r>
 8113730:	89a3      	ldrh	r3, [r4, #12]
 8113732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8113736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 811373a:	81a3      	strh	r3, [r4, #12]
 811373c:	4632      	mov	r2, r6
 811373e:	463b      	mov	r3, r7
 8113740:	4628      	mov	r0, r5
 8113742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8113746:	f000 b817 	b.w	8113778 <_write_r>

0811374a <__sseek>:
 811374a:	b510      	push	{r4, lr}
 811374c:	460c      	mov	r4, r1
 811374e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113752:	f000 f855 	bl	8113800 <_lseek_r>
 8113756:	1c43      	adds	r3, r0, #1
 8113758:	89a3      	ldrh	r3, [r4, #12]
 811375a:	bf15      	itete	ne
 811375c:	6560      	strne	r0, [r4, #84]	; 0x54
 811375e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8113762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8113766:	81a3      	strheq	r3, [r4, #12]
 8113768:	bf18      	it	ne
 811376a:	81a3      	strhne	r3, [r4, #12]
 811376c:	bd10      	pop	{r4, pc}

0811376e <__sclose>:
 811376e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8113772:	f000 b813 	b.w	811379c <_close_r>
	...

08113778 <_write_r>:
 8113778:	b538      	push	{r3, r4, r5, lr}
 811377a:	4d07      	ldr	r5, [pc, #28]	; (8113798 <_write_r+0x20>)
 811377c:	4604      	mov	r4, r0
 811377e:	4608      	mov	r0, r1
 8113780:	4611      	mov	r1, r2
 8113782:	2200      	movs	r2, #0
 8113784:	602a      	str	r2, [r5, #0]
 8113786:	461a      	mov	r2, r3
 8113788:	f7ee fa82 	bl	8101c90 <_write>
 811378c:	1c43      	adds	r3, r0, #1
 811378e:	d102      	bne.n	8113796 <_write_r+0x1e>
 8113790:	682b      	ldr	r3, [r5, #0]
 8113792:	b103      	cbz	r3, 8113796 <_write_r+0x1e>
 8113794:	6023      	str	r3, [r4, #0]
 8113796:	bd38      	pop	{r3, r4, r5, pc}
 8113798:	10006f88 	.word	0x10006f88

0811379c <_close_r>:
 811379c:	b538      	push	{r3, r4, r5, lr}
 811379e:	4d06      	ldr	r5, [pc, #24]	; (81137b8 <_close_r+0x1c>)
 81137a0:	2300      	movs	r3, #0
 81137a2:	4604      	mov	r4, r0
 81137a4:	4608      	mov	r0, r1
 81137a6:	602b      	str	r3, [r5, #0]
 81137a8:	f7ee fa8e 	bl	8101cc8 <_close>
 81137ac:	1c43      	adds	r3, r0, #1
 81137ae:	d102      	bne.n	81137b6 <_close_r+0x1a>
 81137b0:	682b      	ldr	r3, [r5, #0]
 81137b2:	b103      	cbz	r3, 81137b6 <_close_r+0x1a>
 81137b4:	6023      	str	r3, [r4, #0]
 81137b6:	bd38      	pop	{r3, r4, r5, pc}
 81137b8:	10006f88 	.word	0x10006f88

081137bc <_fstat_r>:
 81137bc:	b538      	push	{r3, r4, r5, lr}
 81137be:	4d07      	ldr	r5, [pc, #28]	; (81137dc <_fstat_r+0x20>)
 81137c0:	2300      	movs	r3, #0
 81137c2:	4604      	mov	r4, r0
 81137c4:	4608      	mov	r0, r1
 81137c6:	4611      	mov	r1, r2
 81137c8:	602b      	str	r3, [r5, #0]
 81137ca:	f7ee fa89 	bl	8101ce0 <_fstat>
 81137ce:	1c43      	adds	r3, r0, #1
 81137d0:	d102      	bne.n	81137d8 <_fstat_r+0x1c>
 81137d2:	682b      	ldr	r3, [r5, #0]
 81137d4:	b103      	cbz	r3, 81137d8 <_fstat_r+0x1c>
 81137d6:	6023      	str	r3, [r4, #0]
 81137d8:	bd38      	pop	{r3, r4, r5, pc}
 81137da:	bf00      	nop
 81137dc:	10006f88 	.word	0x10006f88

081137e0 <_isatty_r>:
 81137e0:	b538      	push	{r3, r4, r5, lr}
 81137e2:	4d06      	ldr	r5, [pc, #24]	; (81137fc <_isatty_r+0x1c>)
 81137e4:	2300      	movs	r3, #0
 81137e6:	4604      	mov	r4, r0
 81137e8:	4608      	mov	r0, r1
 81137ea:	602b      	str	r3, [r5, #0]
 81137ec:	f7ee fa88 	bl	8101d00 <_isatty>
 81137f0:	1c43      	adds	r3, r0, #1
 81137f2:	d102      	bne.n	81137fa <_isatty_r+0x1a>
 81137f4:	682b      	ldr	r3, [r5, #0]
 81137f6:	b103      	cbz	r3, 81137fa <_isatty_r+0x1a>
 81137f8:	6023      	str	r3, [r4, #0]
 81137fa:	bd38      	pop	{r3, r4, r5, pc}
 81137fc:	10006f88 	.word	0x10006f88

08113800 <_lseek_r>:
 8113800:	b538      	push	{r3, r4, r5, lr}
 8113802:	4d07      	ldr	r5, [pc, #28]	; (8113820 <_lseek_r+0x20>)
 8113804:	4604      	mov	r4, r0
 8113806:	4608      	mov	r0, r1
 8113808:	4611      	mov	r1, r2
 811380a:	2200      	movs	r2, #0
 811380c:	602a      	str	r2, [r5, #0]
 811380e:	461a      	mov	r2, r3
 8113810:	f7ee fa81 	bl	8101d16 <_lseek>
 8113814:	1c43      	adds	r3, r0, #1
 8113816:	d102      	bne.n	811381e <_lseek_r+0x1e>
 8113818:	682b      	ldr	r3, [r5, #0]
 811381a:	b103      	cbz	r3, 811381e <_lseek_r+0x1e>
 811381c:	6023      	str	r3, [r4, #0]
 811381e:	bd38      	pop	{r3, r4, r5, pc}
 8113820:	10006f88 	.word	0x10006f88

08113824 <_read_r>:
 8113824:	b538      	push	{r3, r4, r5, lr}
 8113826:	4d07      	ldr	r5, [pc, #28]	; (8113844 <_read_r+0x20>)
 8113828:	4604      	mov	r4, r0
 811382a:	4608      	mov	r0, r1
 811382c:	4611      	mov	r1, r2
 811382e:	2200      	movs	r2, #0
 8113830:	602a      	str	r2, [r5, #0]
 8113832:	461a      	mov	r2, r3
 8113834:	f7ee fa0f 	bl	8101c56 <_read>
 8113838:	1c43      	adds	r3, r0, #1
 811383a:	d102      	bne.n	8113842 <_read_r+0x1e>
 811383c:	682b      	ldr	r3, [r5, #0]
 811383e:	b103      	cbz	r3, 8113842 <_read_r+0x1e>
 8113840:	6023      	str	r3, [r4, #0]
 8113842:	bd38      	pop	{r3, r4, r5, pc}
 8113844:	10006f88 	.word	0x10006f88

08113848 <_init>:
 8113848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 811384a:	bf00      	nop
 811384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811384e:	bc08      	pop	{r3}
 8113850:	469e      	mov	lr, r3
 8113852:	4770      	bx	lr

08113854 <_fini>:
 8113854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8113856:	bf00      	nop
 8113858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 811385a:	bc08      	pop	{r3}
 811385c:	469e      	mov	lr, r3
 811385e:	4770      	bx	lr
